

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Sep 20 08:39:20 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text4,local,class=CODE,merge=1,delta=2,group=4
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2,group=4
    35                           	psect	text14,local,class=CODE,merge=1,delta=2,group=4
    36                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2,group=4
    41                           	psect	text20,local,class=CODE,merge=1,delta=2,group=4
    42                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text22,local,class=CODE,merge=1,delta=2,group=4
    44                           	psect	text23,local,class=CODE,merge=1,delta=2,group=4
    45                           	psect	text24,local,class=CODE,merge=1,delta=2,group=4
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	swtext1,local,class=CONST,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	swtext2,local,class=CONST,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
    81                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
    82                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
    83                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
    84                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
    85                           	psect	text62,local,class=CODE,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2
    87                           	dabs	1,0x7E,2
    88  0000                     
    89                           ; Version 1.41 (B)
    90                           ; Generated 21/02/2017 GMT
    91                           ; 
    92                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC16F1829 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0016                     	;# 
   145  0017                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  001E                     	;# 
   152  001F                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0095                     	;# 
   161  0096                     	;# 
   162  0097                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009A                     	;# 
   166  009B                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  0111                     	;# 
   175  0112                     	;# 
   176  0113                     	;# 
   177  0114                     	;# 
   178  0115                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  0118                     	;# 
   182  0119                     	;# 
   183  011A                     	;# 
   184  011B                     	;# 
   185  011D                     	;# 
   186  011E                     	;# 
   187  018C                     	;# 
   188  018D                     	;# 
   189  018E                     	;# 
   190  0191                     	;# 
   191  0191                     	;# 
   192  0192                     	;# 
   193  0193                     	;# 
   194  0193                     	;# 
   195  0193                     	;# 
   196  0194                     	;# 
   197  0195                     	;# 
   198  0196                     	;# 
   199  0199                     	;# 
   200  019A                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019D                     	;# 
   205  019E                     	;# 
   206  019F                     	;# 
   207  020C                     	;# 
   208  020D                     	;# 
   209  020E                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0216                     	;# 
   222  0216                     	;# 
   223  0217                     	;# 
   224  0217                     	;# 
   225  0219                     	;# 
   226  021A                     	;# 
   227  021B                     	;# 
   228  021C                     	;# 
   229  021D                     	;# 
   230  021E                     	;# 
   231  021F                     	;# 
   232  0291                     	;# 
   233  0291                     	;# 
   234  0292                     	;# 
   235  0293                     	;# 
   236  0294                     	;# 
   237  0295                     	;# 
   238  0295                     	;# 
   239  0296                     	;# 
   240  0298                     	;# 
   241  0298                     	;# 
   242  0299                     	;# 
   243  029A                     	;# 
   244  029B                     	;# 
   245  029C                     	;# 
   246  029D                     	;# 
   247  029E                     	;# 
   248  0311                     	;# 
   249  0311                     	;# 
   250  0312                     	;# 
   251  0313                     	;# 
   252  0318                     	;# 
   253  0318                     	;# 
   254  0319                     	;# 
   255  031A                     	;# 
   256  038C                     	;# 
   257  038D                     	;# 
   258  038E                     	;# 
   259  0391                     	;# 
   260  0392                     	;# 
   261  0393                     	;# 
   262  0394                     	;# 
   263  0395                     	;# 
   264  0396                     	;# 
   265  039A                     	;# 
   266  039C                     	;# 
   267  039D                     	;# 
   268  039E                     	;# 
   269  039F                     	;# 
   270  0415                     	;# 
   271  0416                     	;# 
   272  0417                     	;# 
   273  041C                     	;# 
   274  041D                     	;# 
   275  041E                     	;# 
   276  0FE4                     	;# 
   277  0FE5                     	;# 
   278  0FE6                     	;# 
   279  0FE7                     	;# 
   280  0FE8                     	;# 
   281  0FE9                     	;# 
   282  0FEA                     	;# 
   283  0FEB                     	;# 
   284  0FED                     	;# 
   285  0FEE                     	;# 
   286  0FEF                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0013                     	;# 
   305  0014                     	;# 
   306  0015                     	;# 
   307  0016                     	;# 
   308  0016                     	;# 
   309  0017                     	;# 
   310  0018                     	;# 
   311  0019                     	;# 
   312  001A                     	;# 
   313  001B                     	;# 
   314  001C                     	;# 
   315  001E                     	;# 
   316  001F                     	;# 
   317  008C                     	;# 
   318  008D                     	;# 
   319  008E                     	;# 
   320  0091                     	;# 
   321  0092                     	;# 
   322  0093                     	;# 
   323  0094                     	;# 
   324  0095                     	;# 
   325  0096                     	;# 
   326  0097                     	;# 
   327  0098                     	;# 
   328  0099                     	;# 
   329  009A                     	;# 
   330  009B                     	;# 
   331  009B                     	;# 
   332  009C                     	;# 
   333  009D                     	;# 
   334  009E                     	;# 
   335  010C                     	;# 
   336  010D                     	;# 
   337  010E                     	;# 
   338  0111                     	;# 
   339  0112                     	;# 
   340  0113                     	;# 
   341  0114                     	;# 
   342  0115                     	;# 
   343  0116                     	;# 
   344  0117                     	;# 
   345  0118                     	;# 
   346  0119                     	;# 
   347  011A                     	;# 
   348  011B                     	;# 
   349  011D                     	;# 
   350  011E                     	;# 
   351  018C                     	;# 
   352  018D                     	;# 
   353  018E                     	;# 
   354  0191                     	;# 
   355  0191                     	;# 
   356  0192                     	;# 
   357  0193                     	;# 
   358  0193                     	;# 
   359  0193                     	;# 
   360  0194                     	;# 
   361  0195                     	;# 
   362  0196                     	;# 
   363  0199                     	;# 
   364  019A                     	;# 
   365  019B                     	;# 
   366  019B                     	;# 
   367  019C                     	;# 
   368  019D                     	;# 
   369  019E                     	;# 
   370  019F                     	;# 
   371  020C                     	;# 
   372  020D                     	;# 
   373  020E                     	;# 
   374  0211                     	;# 
   375  0211                     	;# 
   376  0212                     	;# 
   377  0212                     	;# 
   378  0213                     	;# 
   379  0213                     	;# 
   380  0214                     	;# 
   381  0214                     	;# 
   382  0215                     	;# 
   383  0215                     	;# 
   384  0215                     	;# 
   385  0216                     	;# 
   386  0216                     	;# 
   387  0217                     	;# 
   388  0217                     	;# 
   389  0219                     	;# 
   390  021A                     	;# 
   391  021B                     	;# 
   392  021C                     	;# 
   393  021D                     	;# 
   394  021E                     	;# 
   395  021F                     	;# 
   396  0291                     	;# 
   397  0291                     	;# 
   398  0292                     	;# 
   399  0293                     	;# 
   400  0294                     	;# 
   401  0295                     	;# 
   402  0295                     	;# 
   403  0296                     	;# 
   404  0298                     	;# 
   405  0298                     	;# 
   406  0299                     	;# 
   407  029A                     	;# 
   408  029B                     	;# 
   409  029C                     	;# 
   410  029D                     	;# 
   411  029E                     	;# 
   412  0311                     	;# 
   413  0311                     	;# 
   414  0312                     	;# 
   415  0313                     	;# 
   416  0318                     	;# 
   417  0318                     	;# 
   418  0319                     	;# 
   419  031A                     	;# 
   420  038C                     	;# 
   421  038D                     	;# 
   422  038E                     	;# 
   423  0391                     	;# 
   424  0392                     	;# 
   425  0393                     	;# 
   426  0394                     	;# 
   427  0395                     	;# 
   428  0396                     	;# 
   429  039A                     	;# 
   430  039C                     	;# 
   431  039D                     	;# 
   432  039E                     	;# 
   433  039F                     	;# 
   434  0415                     	;# 
   435  0416                     	;# 
   436  0417                     	;# 
   437  041C                     	;# 
   438  041D                     	;# 
   439  041E                     	;# 
   440  0FE4                     	;# 
   441  0FE5                     	;# 
   442  0FE6                     	;# 
   443  0FE7                     	;# 
   444  0FE8                     	;# 
   445  0FE9                     	;# 
   446  0FEA                     	;# 
   447  0FEB                     	;# 
   448  0FED                     	;# 
   449  0FEE                     	;# 
   450  0FEF                     	;# 
   451  0000                     	;# 
   452  0001                     	;# 
   453  0002                     	;# 
   454  0003                     	;# 
   455  0004                     	;# 
   456  0005                     	;# 
   457  0006                     	;# 
   458  0007                     	;# 
   459  0008                     	;# 
   460  0009                     	;# 
   461  000A                     	;# 
   462  000B                     	;# 
   463  000C                     	;# 
   464  000D                     	;# 
   465  000E                     	;# 
   466  0011                     	;# 
   467  0012                     	;# 
   468  0013                     	;# 
   469  0014                     	;# 
   470  0015                     	;# 
   471  0016                     	;# 
   472  0016                     	;# 
   473  0017                     	;# 
   474  0018                     	;# 
   475  0019                     	;# 
   476  001A                     	;# 
   477  001B                     	;# 
   478  001C                     	;# 
   479  001E                     	;# 
   480  001F                     	;# 
   481  008C                     	;# 
   482  008D                     	;# 
   483  008E                     	;# 
   484  0091                     	;# 
   485  0092                     	;# 
   486  0093                     	;# 
   487  0094                     	;# 
   488  0095                     	;# 
   489  0096                     	;# 
   490  0097                     	;# 
   491  0098                     	;# 
   492  0099                     	;# 
   493  009A                     	;# 
   494  009B                     	;# 
   495  009B                     	;# 
   496  009C                     	;# 
   497  009D                     	;# 
   498  009E                     	;# 
   499  010C                     	;# 
   500  010D                     	;# 
   501  010E                     	;# 
   502  0111                     	;# 
   503  0112                     	;# 
   504  0113                     	;# 
   505  0114                     	;# 
   506  0115                     	;# 
   507  0116                     	;# 
   508  0117                     	;# 
   509  0118                     	;# 
   510  0119                     	;# 
   511  011A                     	;# 
   512  011B                     	;# 
   513  011D                     	;# 
   514  011E                     	;# 
   515  018C                     	;# 
   516  018D                     	;# 
   517  018E                     	;# 
   518  0191                     	;# 
   519  0191                     	;# 
   520  0192                     	;# 
   521  0193                     	;# 
   522  0193                     	;# 
   523  0193                     	;# 
   524  0194                     	;# 
   525  0195                     	;# 
   526  0196                     	;# 
   527  0199                     	;# 
   528  019A                     	;# 
   529  019B                     	;# 
   530  019B                     	;# 
   531  019C                     	;# 
   532  019D                     	;# 
   533  019E                     	;# 
   534  019F                     	;# 
   535  020C                     	;# 
   536  020D                     	;# 
   537  020E                     	;# 
   538  0211                     	;# 
   539  0211                     	;# 
   540  0212                     	;# 
   541  0212                     	;# 
   542  0213                     	;# 
   543  0213                     	;# 
   544  0214                     	;# 
   545  0214                     	;# 
   546  0215                     	;# 
   547  0215                     	;# 
   548  0215                     	;# 
   549  0216                     	;# 
   550  0216                     	;# 
   551  0217                     	;# 
   552  0217                     	;# 
   553  0219                     	;# 
   554  021A                     	;# 
   555  021B                     	;# 
   556  021C                     	;# 
   557  021D                     	;# 
   558  021E                     	;# 
   559  021F                     	;# 
   560  0291                     	;# 
   561  0291                     	;# 
   562  0292                     	;# 
   563  0293                     	;# 
   564  0294                     	;# 
   565  0295                     	;# 
   566  0295                     	;# 
   567  0296                     	;# 
   568  0298                     	;# 
   569  0298                     	;# 
   570  0299                     	;# 
   571  029A                     	;# 
   572  029B                     	;# 
   573  029C                     	;# 
   574  029D                     	;# 
   575  029E                     	;# 
   576  0311                     	;# 
   577  0311                     	;# 
   578  0312                     	;# 
   579  0313                     	;# 
   580  0318                     	;# 
   581  0318                     	;# 
   582  0319                     	;# 
   583  031A                     	;# 
   584  038C                     	;# 
   585  038D                     	;# 
   586  038E                     	;# 
   587  0391                     	;# 
   588  0392                     	;# 
   589  0393                     	;# 
   590  0394                     	;# 
   591  0395                     	;# 
   592  0396                     	;# 
   593  039A                     	;# 
   594  039C                     	;# 
   595  039D                     	;# 
   596  039E                     	;# 
   597  039F                     	;# 
   598  0415                     	;# 
   599  0416                     	;# 
   600  0417                     	;# 
   601  041C                     	;# 
   602  041D                     	;# 
   603  041E                     	;# 
   604  0FE4                     	;# 
   605  0FE5                     	;# 
   606  0FE6                     	;# 
   607  0FE7                     	;# 
   608  0FE8                     	;# 
   609  0FE9                     	;# 
   610  0FEA                     	;# 
   611  0FEB                     	;# 
   612  0FED                     	;# 
   613  0FEE                     	;# 
   614  0FEF                     	;# 
   615  0000                     	;# 
   616  0001                     	;# 
   617  0002                     	;# 
   618  0003                     	;# 
   619  0004                     	;# 
   620  0005                     	;# 
   621  0006                     	;# 
   622  0007                     	;# 
   623  0008                     	;# 
   624  0009                     	;# 
   625  000A                     	;# 
   626  000B                     	;# 
   627  000C                     	;# 
   628  000D                     	;# 
   629  000E                     	;# 
   630  0011                     	;# 
   631  0012                     	;# 
   632  0013                     	;# 
   633  0014                     	;# 
   634  0015                     	;# 
   635  0016                     	;# 
   636  0016                     	;# 
   637  0017                     	;# 
   638  0018                     	;# 
   639  0019                     	;# 
   640  001A                     	;# 
   641  001B                     	;# 
   642  001C                     	;# 
   643  001E                     	;# 
   644  001F                     	;# 
   645  008C                     	;# 
   646  008D                     	;# 
   647  008E                     	;# 
   648  0091                     	;# 
   649  0092                     	;# 
   650  0093                     	;# 
   651  0094                     	;# 
   652  0095                     	;# 
   653  0096                     	;# 
   654  0097                     	;# 
   655  0098                     	;# 
   656  0099                     	;# 
   657  009A                     	;# 
   658  009B                     	;# 
   659  009B                     	;# 
   660  009C                     	;# 
   661  009D                     	;# 
   662  009E                     	;# 
   663  010C                     	;# 
   664  010D                     	;# 
   665  010E                     	;# 
   666  0111                     	;# 
   667  0112                     	;# 
   668  0113                     	;# 
   669  0114                     	;# 
   670  0115                     	;# 
   671  0116                     	;# 
   672  0117                     	;# 
   673  0118                     	;# 
   674  0119                     	;# 
   675  011A                     	;# 
   676  011B                     	;# 
   677  011D                     	;# 
   678  011E                     	;# 
   679  018C                     	;# 
   680  018D                     	;# 
   681  018E                     	;# 
   682  0191                     	;# 
   683  0191                     	;# 
   684  0192                     	;# 
   685  0193                     	;# 
   686  0193                     	;# 
   687  0193                     	;# 
   688  0194                     	;# 
   689  0195                     	;# 
   690  0196                     	;# 
   691  0199                     	;# 
   692  019A                     	;# 
   693  019B                     	;# 
   694  019B                     	;# 
   695  019C                     	;# 
   696  019D                     	;# 
   697  019E                     	;# 
   698  019F                     	;# 
   699  020C                     	;# 
   700  020D                     	;# 
   701  020E                     	;# 
   702  0211                     	;# 
   703  0211                     	;# 
   704  0212                     	;# 
   705  0212                     	;# 
   706  0213                     	;# 
   707  0213                     	;# 
   708  0214                     	;# 
   709  0214                     	;# 
   710  0215                     	;# 
   711  0215                     	;# 
   712  0215                     	;# 
   713  0216                     	;# 
   714  0216                     	;# 
   715  0217                     	;# 
   716  0217                     	;# 
   717  0219                     	;# 
   718  021A                     	;# 
   719  021B                     	;# 
   720  021C                     	;# 
   721  021D                     	;# 
   722  021E                     	;# 
   723  021F                     	;# 
   724  0291                     	;# 
   725  0291                     	;# 
   726  0292                     	;# 
   727  0293                     	;# 
   728  0294                     	;# 
   729  0295                     	;# 
   730  0295                     	;# 
   731  0296                     	;# 
   732  0298                     	;# 
   733  0298                     	;# 
   734  0299                     	;# 
   735  029A                     	;# 
   736  029B                     	;# 
   737  029C                     	;# 
   738  029D                     	;# 
   739  029E                     	;# 
   740  0311                     	;# 
   741  0311                     	;# 
   742  0312                     	;# 
   743  0313                     	;# 
   744  0318                     	;# 
   745  0318                     	;# 
   746  0319                     	;# 
   747  031A                     	;# 
   748  038C                     	;# 
   749  038D                     	;# 
   750  038E                     	;# 
   751  0391                     	;# 
   752  0392                     	;# 
   753  0393                     	;# 
   754  0394                     	;# 
   755  0395                     	;# 
   756  0396                     	;# 
   757  039A                     	;# 
   758  039C                     	;# 
   759  039D                     	;# 
   760  039E                     	;# 
   761  039F                     	;# 
   762  0415                     	;# 
   763  0416                     	;# 
   764  0417                     	;# 
   765  041C                     	;# 
   766  041D                     	;# 
   767  041E                     	;# 
   768  0FE4                     	;# 
   769  0FE5                     	;# 
   770  0FE6                     	;# 
   771  0FE7                     	;# 
   772  0FE8                     	;# 
   773  0FE9                     	;# 
   774  0FEA                     	;# 
   775  0FEB                     	;# 
   776  0FED                     	;# 
   777  0FEE                     	;# 
   778  0FEF                     	;# 
   779  0000                     	;# 
   780  0001                     	;# 
   781  0002                     	;# 
   782  0003                     	;# 
   783  0004                     	;# 
   784  0005                     	;# 
   785  0006                     	;# 
   786  0007                     	;# 
   787  0008                     	;# 
   788  0009                     	;# 
   789  000A                     	;# 
   790  000B                     	;# 
   791  000C                     	;# 
   792  000D                     	;# 
   793  000E                     	;# 
   794  0011                     	;# 
   795  0012                     	;# 
   796  0013                     	;# 
   797  0014                     	;# 
   798  0015                     	;# 
   799  0016                     	;# 
   800  0016                     	;# 
   801  0017                     	;# 
   802  0018                     	;# 
   803  0019                     	;# 
   804  001A                     	;# 
   805  001B                     	;# 
   806  001C                     	;# 
   807  001E                     	;# 
   808  001F                     	;# 
   809  008C                     	;# 
   810  008D                     	;# 
   811  008E                     	;# 
   812  0091                     	;# 
   813  0092                     	;# 
   814  0093                     	;# 
   815  0094                     	;# 
   816  0095                     	;# 
   817  0096                     	;# 
   818  0097                     	;# 
   819  0098                     	;# 
   820  0099                     	;# 
   821  009A                     	;# 
   822  009B                     	;# 
   823  009B                     	;# 
   824  009C                     	;# 
   825  009D                     	;# 
   826  009E                     	;# 
   827  010C                     	;# 
   828  010D                     	;# 
   829  010E                     	;# 
   830  0111                     	;# 
   831  0112                     	;# 
   832  0113                     	;# 
   833  0114                     	;# 
   834  0115                     	;# 
   835  0116                     	;# 
   836  0117                     	;# 
   837  0118                     	;# 
   838  0119                     	;# 
   839  011A                     	;# 
   840  011B                     	;# 
   841  011D                     	;# 
   842  011E                     	;# 
   843  018C                     	;# 
   844  018D                     	;# 
   845  018E                     	;# 
   846  0191                     	;# 
   847  0191                     	;# 
   848  0192                     	;# 
   849  0193                     	;# 
   850  0193                     	;# 
   851  0193                     	;# 
   852  0194                     	;# 
   853  0195                     	;# 
   854  0196                     	;# 
   855  0199                     	;# 
   856  019A                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019C                     	;# 
   860  019D                     	;# 
   861  019E                     	;# 
   862  019F                     	;# 
   863  020C                     	;# 
   864  020D                     	;# 
   865  020E                     	;# 
   866  0211                     	;# 
   867  0211                     	;# 
   868  0212                     	;# 
   869  0212                     	;# 
   870  0213                     	;# 
   871  0213                     	;# 
   872  0214                     	;# 
   873  0214                     	;# 
   874  0215                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0216                     	;# 
   878  0216                     	;# 
   879  0217                     	;# 
   880  0217                     	;# 
   881  0219                     	;# 
   882  021A                     	;# 
   883  021B                     	;# 
   884  021C                     	;# 
   885  021D                     	;# 
   886  021E                     	;# 
   887  021F                     	;# 
   888  0291                     	;# 
   889  0291                     	;# 
   890  0292                     	;# 
   891  0293                     	;# 
   892  0294                     	;# 
   893  0295                     	;# 
   894  0295                     	;# 
   895  0296                     	;# 
   896  0298                     	;# 
   897  0298                     	;# 
   898  0299                     	;# 
   899  029A                     	;# 
   900  029B                     	;# 
   901  029C                     	;# 
   902  029D                     	;# 
   903  029E                     	;# 
   904  0311                     	;# 
   905  0311                     	;# 
   906  0312                     	;# 
   907  0313                     	;# 
   908  0318                     	;# 
   909  0318                     	;# 
   910  0319                     	;# 
   911  031A                     	;# 
   912  038C                     	;# 
   913  038D                     	;# 
   914  038E                     	;# 
   915  0391                     	;# 
   916  0392                     	;# 
   917  0393                     	;# 
   918  0394                     	;# 
   919  0395                     	;# 
   920  0396                     	;# 
   921  039A                     	;# 
   922  039C                     	;# 
   923  039D                     	;# 
   924  039E                     	;# 
   925  039F                     	;# 
   926  0415                     	;# 
   927  0416                     	;# 
   928  0417                     	;# 
   929  041C                     	;# 
   930  041D                     	;# 
   931  041E                     	;# 
   932  0FE4                     	;# 
   933  0FE5                     	;# 
   934  0FE6                     	;# 
   935  0FE7                     	;# 
   936  0FE8                     	;# 
   937  0FE9                     	;# 
   938  0FEA                     	;# 
   939  0FEB                     	;# 
   940  0FED                     	;# 
   941  0FEE                     	;# 
   942  0FEF                     	;# 
   943  0000                     	;# 
   944  0001                     	;# 
   945  0002                     	;# 
   946  0003                     	;# 
   947  0004                     	;# 
   948  0005                     	;# 
   949  0006                     	;# 
   950  0007                     	;# 
   951  0008                     	;# 
   952  0009                     	;# 
   953  000A                     	;# 
   954  000B                     	;# 
   955  000C                     	;# 
   956  000D                     	;# 
   957  000E                     	;# 
   958  0011                     	;# 
   959  0012                     	;# 
   960  0013                     	;# 
   961  0014                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  001E                     	;# 
   972  001F                     	;# 
   973  008C                     	;# 
   974  008D                     	;# 
   975  008E                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0093                     	;# 
   979  0094                     	;# 
   980  0095                     	;# 
   981  0096                     	;# 
   982  0097                     	;# 
   983  0098                     	;# 
   984  0099                     	;# 
   985  009A                     	;# 
   986  009B                     	;# 
   987  009B                     	;# 
   988  009C                     	;# 
   989  009D                     	;# 
   990  009E                     	;# 
   991  010C                     	;# 
   992  010D                     	;# 
   993  010E                     	;# 
   994  0111                     	;# 
   995  0112                     	;# 
   996  0113                     	;# 
   997  0114                     	;# 
   998  0115                     	;# 
   999  0116                     	;# 
  1000  0117                     	;# 
  1001  0118                     	;# 
  1002  0119                     	;# 
  1003  011A                     	;# 
  1004  011B                     	;# 
  1005  011D                     	;# 
  1006  011E                     	;# 
  1007  018C                     	;# 
  1008  018D                     	;# 
  1009  018E                     	;# 
  1010  0191                     	;# 
  1011  0191                     	;# 
  1012  0192                     	;# 
  1013  0193                     	;# 
  1014  0193                     	;# 
  1015  0193                     	;# 
  1016  0194                     	;# 
  1017  0195                     	;# 
  1018  0196                     	;# 
  1019  0199                     	;# 
  1020  019A                     	;# 
  1021  019B                     	;# 
  1022  019B                     	;# 
  1023  019C                     	;# 
  1024  019D                     	;# 
  1025  019E                     	;# 
  1026  019F                     	;# 
  1027  020C                     	;# 
  1028  020D                     	;# 
  1029  020E                     	;# 
  1030  0211                     	;# 
  1031  0211                     	;# 
  1032  0212                     	;# 
  1033  0212                     	;# 
  1034  0213                     	;# 
  1035  0213                     	;# 
  1036  0214                     	;# 
  1037  0214                     	;# 
  1038  0215                     	;# 
  1039  0215                     	;# 
  1040  0215                     	;# 
  1041  0216                     	;# 
  1042  0216                     	;# 
  1043  0217                     	;# 
  1044  0217                     	;# 
  1045  0219                     	;# 
  1046  021A                     	;# 
  1047  021B                     	;# 
  1048  021C                     	;# 
  1049  021D                     	;# 
  1050  021E                     	;# 
  1051  021F                     	;# 
  1052  0291                     	;# 
  1053  0291                     	;# 
  1054  0292                     	;# 
  1055  0293                     	;# 
  1056  0294                     	;# 
  1057  0295                     	;# 
  1058  0295                     	;# 
  1059  0296                     	;# 
  1060  0298                     	;# 
  1061  0298                     	;# 
  1062  0299                     	;# 
  1063  029A                     	;# 
  1064  029B                     	;# 
  1065  029C                     	;# 
  1066  029D                     	;# 
  1067  029E                     	;# 
  1068  0311                     	;# 
  1069  0311                     	;# 
  1070  0312                     	;# 
  1071  0313                     	;# 
  1072  0318                     	;# 
  1073  0318                     	;# 
  1074  0319                     	;# 
  1075  031A                     	;# 
  1076  038C                     	;# 
  1077  038D                     	;# 
  1078  038E                     	;# 
  1079  0391                     	;# 
  1080  0392                     	;# 
  1081  0393                     	;# 
  1082  0394                     	;# 
  1083  0395                     	;# 
  1084  0396                     	;# 
  1085  039A                     	;# 
  1086  039C                     	;# 
  1087  039D                     	;# 
  1088  039E                     	;# 
  1089  039F                     	;# 
  1090  0415                     	;# 
  1091  0416                     	;# 
  1092  0417                     	;# 
  1093  041C                     	;# 
  1094  041D                     	;# 
  1095  041E                     	;# 
  1096  0FE4                     	;# 
  1097  0FE5                     	;# 
  1098  0FE6                     	;# 
  1099  0FE7                     	;# 
  1100  0FE8                     	;# 
  1101  0FE9                     	;# 
  1102  0FEA                     	;# 
  1103  0FEB                     	;# 
  1104  0FED                     	;# 
  1105  0FEE                     	;# 
  1106  0FEF                     	;# 
  1107  0000                     	;# 
  1108  0001                     	;# 
  1109  0002                     	;# 
  1110  0003                     	;# 
  1111  0004                     	;# 
  1112  0005                     	;# 
  1113  0006                     	;# 
  1114  0007                     	;# 
  1115  0008                     	;# 
  1116  0009                     	;# 
  1117  000A                     	;# 
  1118  000B                     	;# 
  1119  000C                     	;# 
  1120  000D                     	;# 
  1121  000E                     	;# 
  1122  0011                     	;# 
  1123  0012                     	;# 
  1124  0013                     	;# 
  1125  0014                     	;# 
  1126  0015                     	;# 
  1127  0016                     	;# 
  1128  0016                     	;# 
  1129  0017                     	;# 
  1130  0018                     	;# 
  1131  0019                     	;# 
  1132  001A                     	;# 
  1133  001B                     	;# 
  1134  001C                     	;# 
  1135  001E                     	;# 
  1136  001F                     	;# 
  1137  008C                     	;# 
  1138  008D                     	;# 
  1139  008E                     	;# 
  1140  0091                     	;# 
  1141  0092                     	;# 
  1142  0093                     	;# 
  1143  0094                     	;# 
  1144  0095                     	;# 
  1145  0096                     	;# 
  1146  0097                     	;# 
  1147  0098                     	;# 
  1148  0099                     	;# 
  1149  009A                     	;# 
  1150  009B                     	;# 
  1151  009B                     	;# 
  1152  009C                     	;# 
  1153  009D                     	;# 
  1154  009E                     	;# 
  1155  010C                     	;# 
  1156  010D                     	;# 
  1157  010E                     	;# 
  1158  0111                     	;# 
  1159  0112                     	;# 
  1160  0113                     	;# 
  1161  0114                     	;# 
  1162  0115                     	;# 
  1163  0116                     	;# 
  1164  0117                     	;# 
  1165  0118                     	;# 
  1166  0119                     	;# 
  1167  011A                     	;# 
  1168  011B                     	;# 
  1169  011D                     	;# 
  1170  011E                     	;# 
  1171  018C                     	;# 
  1172  018D                     	;# 
  1173  018E                     	;# 
  1174  0191                     	;# 
  1175  0191                     	;# 
  1176  0192                     	;# 
  1177  0193                     	;# 
  1178  0193                     	;# 
  1179  0193                     	;# 
  1180  0194                     	;# 
  1181  0195                     	;# 
  1182  0196                     	;# 
  1183  0199                     	;# 
  1184  019A                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019C                     	;# 
  1188  019D                     	;# 
  1189  019E                     	;# 
  1190  019F                     	;# 
  1191  020C                     	;# 
  1192  020D                     	;# 
  1193  020E                     	;# 
  1194  0211                     	;# 
  1195  0211                     	;# 
  1196  0212                     	;# 
  1197  0212                     	;# 
  1198  0213                     	;# 
  1199  0213                     	;# 
  1200  0214                     	;# 
  1201  0214                     	;# 
  1202  0215                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0216                     	;# 
  1206  0216                     	;# 
  1207  0217                     	;# 
  1208  0217                     	;# 
  1209  0219                     	;# 
  1210  021A                     	;# 
  1211  021B                     	;# 
  1212  021C                     	;# 
  1213  021D                     	;# 
  1214  021E                     	;# 
  1215  021F                     	;# 
  1216  0291                     	;# 
  1217  0291                     	;# 
  1218  0292                     	;# 
  1219  0293                     	;# 
  1220  0294                     	;# 
  1221  0295                     	;# 
  1222  0295                     	;# 
  1223  0296                     	;# 
  1224  0298                     	;# 
  1225  0298                     	;# 
  1226  0299                     	;# 
  1227  029A                     	;# 
  1228  029B                     	;# 
  1229  029C                     	;# 
  1230  029D                     	;# 
  1231  029E                     	;# 
  1232  0311                     	;# 
  1233  0311                     	;# 
  1234  0312                     	;# 
  1235  0313                     	;# 
  1236  0318                     	;# 
  1237  0318                     	;# 
  1238  0319                     	;# 
  1239  031A                     	;# 
  1240  038C                     	;# 
  1241  038D                     	;# 
  1242  038E                     	;# 
  1243  0391                     	;# 
  1244  0392                     	;# 
  1245  0393                     	;# 
  1246  0394                     	;# 
  1247  0395                     	;# 
  1248  0396                     	;# 
  1249  039A                     	;# 
  1250  039C                     	;# 
  1251  039D                     	;# 
  1252  039E                     	;# 
  1253  039F                     	;# 
  1254  0415                     	;# 
  1255  0416                     	;# 
  1256  0417                     	;# 
  1257  041C                     	;# 
  1258  041D                     	;# 
  1259  041E                     	;# 
  1260  0FE4                     	;# 
  1261  0FE5                     	;# 
  1262  0FE6                     	;# 
  1263  0FE7                     	;# 
  1264  0FE8                     	;# 
  1265  0FE9                     	;# 
  1266  0FEA                     	;# 
  1267  0FEB                     	;# 
  1268  0FED                     	;# 
  1269  0FEE                     	;# 
  1270  0FEF                     	;# 
  1271  0000                     	;# 
  1272  0001                     	;# 
  1273  0002                     	;# 
  1274  0003                     	;# 
  1275  0004                     	;# 
  1276  0005                     	;# 
  1277  0006                     	;# 
  1278  0007                     	;# 
  1279  0008                     	;# 
  1280  0009                     	;# 
  1281  000A                     	;# 
  1282  000B                     	;# 
  1283  000C                     	;# 
  1284  000D                     	;# 
  1285  000E                     	;# 
  1286  0011                     	;# 
  1287  0012                     	;# 
  1288  0013                     	;# 
  1289  0014                     	;# 
  1290  0015                     	;# 
  1291  0016                     	;# 
  1292  0016                     	;# 
  1293  0017                     	;# 
  1294  0018                     	;# 
  1295  0019                     	;# 
  1296  001A                     	;# 
  1297  001B                     	;# 
  1298  001C                     	;# 
  1299  001E                     	;# 
  1300  001F                     	;# 
  1301  008C                     	;# 
  1302  008D                     	;# 
  1303  008E                     	;# 
  1304  0091                     	;# 
  1305  0092                     	;# 
  1306  0093                     	;# 
  1307  0094                     	;# 
  1308  0095                     	;# 
  1309  0096                     	;# 
  1310  0097                     	;# 
  1311  0098                     	;# 
  1312  0099                     	;# 
  1313  009A                     	;# 
  1314  009B                     	;# 
  1315  009B                     	;# 
  1316  009C                     	;# 
  1317  009D                     	;# 
  1318  009E                     	;# 
  1319  010C                     	;# 
  1320  010D                     	;# 
  1321  010E                     	;# 
  1322  0111                     	;# 
  1323  0112                     	;# 
  1324  0113                     	;# 
  1325  0114                     	;# 
  1326  0115                     	;# 
  1327  0116                     	;# 
  1328  0117                     	;# 
  1329  0118                     	;# 
  1330  0119                     	;# 
  1331  011A                     	;# 
  1332  011B                     	;# 
  1333  011D                     	;# 
  1334  011E                     	;# 
  1335  018C                     	;# 
  1336  018D                     	;# 
  1337  018E                     	;# 
  1338  0191                     	;# 
  1339  0191                     	;# 
  1340  0192                     	;# 
  1341  0193                     	;# 
  1342  0193                     	;# 
  1343  0193                     	;# 
  1344  0194                     	;# 
  1345  0195                     	;# 
  1346  0196                     	;# 
  1347  0199                     	;# 
  1348  019A                     	;# 
  1349  019B                     	;# 
  1350  019B                     	;# 
  1351  019C                     	;# 
  1352  019D                     	;# 
  1353  019E                     	;# 
  1354  019F                     	;# 
  1355  020C                     	;# 
  1356  020D                     	;# 
  1357  020E                     	;# 
  1358  0211                     	;# 
  1359  0211                     	;# 
  1360  0212                     	;# 
  1361  0212                     	;# 
  1362  0213                     	;# 
  1363  0213                     	;# 
  1364  0214                     	;# 
  1365  0214                     	;# 
  1366  0215                     	;# 
  1367  0215                     	;# 
  1368  0215                     	;# 
  1369  0216                     	;# 
  1370  0216                     	;# 
  1371  0217                     	;# 
  1372  0217                     	;# 
  1373  0219                     	;# 
  1374  021A                     	;# 
  1375  021B                     	;# 
  1376  021C                     	;# 
  1377  021D                     	;# 
  1378  021E                     	;# 
  1379  021F                     	;# 
  1380  0291                     	;# 
  1381  0291                     	;# 
  1382  0292                     	;# 
  1383  0293                     	;# 
  1384  0294                     	;# 
  1385  0295                     	;# 
  1386  0295                     	;# 
  1387  0296                     	;# 
  1388  0298                     	;# 
  1389  0298                     	;# 
  1390  0299                     	;# 
  1391  029A                     	;# 
  1392  029B                     	;# 
  1393  029C                     	;# 
  1394  029D                     	;# 
  1395  029E                     	;# 
  1396  0311                     	;# 
  1397  0311                     	;# 
  1398  0312                     	;# 
  1399  0313                     	;# 
  1400  0318                     	;# 
  1401  0318                     	;# 
  1402  0319                     	;# 
  1403  031A                     	;# 
  1404  038C                     	;# 
  1405  038D                     	;# 
  1406  038E                     	;# 
  1407  0391                     	;# 
  1408  0392                     	;# 
  1409  0393                     	;# 
  1410  0394                     	;# 
  1411  0395                     	;# 
  1412  0396                     	;# 
  1413  039A                     	;# 
  1414  039C                     	;# 
  1415  039D                     	;# 
  1416  039E                     	;# 
  1417  039F                     	;# 
  1418  0415                     	;# 
  1419  0416                     	;# 
  1420  0417                     	;# 
  1421  041C                     	;# 
  1422  041D                     	;# 
  1423  041E                     	;# 
  1424  0FE4                     	;# 
  1425  0FE5                     	;# 
  1426  0FE6                     	;# 
  1427  0FE7                     	;# 
  1428  0FE8                     	;# 
  1429  0FE9                     	;# 
  1430  0FEA                     	;# 
  1431  0FEB                     	;# 
  1432  0FED                     	;# 
  1433  0FEE                     	;# 
  1434  0FEF                     	;# 
  1435  0000                     	;# 
  1436  0001                     	;# 
  1437  0002                     	;# 
  1438  0003                     	;# 
  1439  0004                     	;# 
  1440  0005                     	;# 
  1441  0006                     	;# 
  1442  0007                     	;# 
  1443  0008                     	;# 
  1444  0009                     	;# 
  1445  000A                     	;# 
  1446  000B                     	;# 
  1447  000C                     	;# 
  1448  000D                     	;# 
  1449  000E                     	;# 
  1450  0011                     	;# 
  1451  0012                     	;# 
  1452  0013                     	;# 
  1453  0014                     	;# 
  1454  0015                     	;# 
  1455  0016                     	;# 
  1456  0016                     	;# 
  1457  0017                     	;# 
  1458  0018                     	;# 
  1459  0019                     	;# 
  1460  001A                     	;# 
  1461  001B                     	;# 
  1462  001C                     	;# 
  1463  001E                     	;# 
  1464  001F                     	;# 
  1465  008C                     	;# 
  1466  008D                     	;# 
  1467  008E                     	;# 
  1468  0091                     	;# 
  1469  0092                     	;# 
  1470  0093                     	;# 
  1471  0094                     	;# 
  1472  0095                     	;# 
  1473  0096                     	;# 
  1474  0097                     	;# 
  1475  0098                     	;# 
  1476  0099                     	;# 
  1477  009A                     	;# 
  1478  009B                     	;# 
  1479  009B                     	;# 
  1480  009C                     	;# 
  1481  009D                     	;# 
  1482  009E                     	;# 
  1483  010C                     	;# 
  1484  010D                     	;# 
  1485  010E                     	;# 
  1486  0111                     	;# 
  1487  0112                     	;# 
  1488  0113                     	;# 
  1489  0114                     	;# 
  1490  0115                     	;# 
  1491  0116                     	;# 
  1492  0117                     	;# 
  1493  0118                     	;# 
  1494  0119                     	;# 
  1495  011A                     	;# 
  1496  011B                     	;# 
  1497  011D                     	;# 
  1498  011E                     	;# 
  1499  018C                     	;# 
  1500  018D                     	;# 
  1501  018E                     	;# 
  1502  0191                     	;# 
  1503  0191                     	;# 
  1504  0192                     	;# 
  1505  0193                     	;# 
  1506  0193                     	;# 
  1507  0193                     	;# 
  1508  0194                     	;# 
  1509  0195                     	;# 
  1510  0196                     	;# 
  1511  0199                     	;# 
  1512  019A                     	;# 
  1513  019B                     	;# 
  1514  019B                     	;# 
  1515  019C                     	;# 
  1516  019D                     	;# 
  1517  019E                     	;# 
  1518  019F                     	;# 
  1519  020C                     	;# 
  1520  020D                     	;# 
  1521  020E                     	;# 
  1522  0211                     	;# 
  1523  0211                     	;# 
  1524  0212                     	;# 
  1525  0212                     	;# 
  1526  0213                     	;# 
  1527  0213                     	;# 
  1528  0214                     	;# 
  1529  0214                     	;# 
  1530  0215                     	;# 
  1531  0215                     	;# 
  1532  0215                     	;# 
  1533  0216                     	;# 
  1534  0216                     	;# 
  1535  0217                     	;# 
  1536  0217                     	;# 
  1537  0219                     	;# 
  1538  021A                     	;# 
  1539  021B                     	;# 
  1540  021C                     	;# 
  1541  021D                     	;# 
  1542  021E                     	;# 
  1543  021F                     	;# 
  1544  0291                     	;# 
  1545  0291                     	;# 
  1546  0292                     	;# 
  1547  0293                     	;# 
  1548  0294                     	;# 
  1549  0295                     	;# 
  1550  0295                     	;# 
  1551  0296                     	;# 
  1552  0298                     	;# 
  1553  0298                     	;# 
  1554  0299                     	;# 
  1555  029A                     	;# 
  1556  029B                     	;# 
  1557  029C                     	;# 
  1558  029D                     	;# 
  1559  029E                     	;# 
  1560  0311                     	;# 
  1561  0311                     	;# 
  1562  0312                     	;# 
  1563  0313                     	;# 
  1564  0318                     	;# 
  1565  0318                     	;# 
  1566  0319                     	;# 
  1567  031A                     	;# 
  1568  038C                     	;# 
  1569  038D                     	;# 
  1570  038E                     	;# 
  1571  0391                     	;# 
  1572  0392                     	;# 
  1573  0393                     	;# 
  1574  0394                     	;# 
  1575  0395                     	;# 
  1576  0396                     	;# 
  1577  039A                     	;# 
  1578  039C                     	;# 
  1579  039D                     	;# 
  1580  039E                     	;# 
  1581  039F                     	;# 
  1582  0415                     	;# 
  1583  0416                     	;# 
  1584  0417                     	;# 
  1585  041C                     	;# 
  1586  041D                     	;# 
  1587  041E                     	;# 
  1588  0FE4                     	;# 
  1589  0FE5                     	;# 
  1590  0FE6                     	;# 
  1591  0FE7                     	;# 
  1592  0FE8                     	;# 
  1593  0FE9                     	;# 
  1594  0FEA                     	;# 
  1595  0FEB                     	;# 
  1596  0FED                     	;# 
  1597  0FEE                     	;# 
  1598  0FEF                     	;# 
  1599  0000                     	;# 
  1600  0001                     	;# 
  1601  0002                     	;# 
  1602  0003                     	;# 
  1603  0004                     	;# 
  1604  0005                     	;# 
  1605  0006                     	;# 
  1606  0007                     	;# 
  1607  0008                     	;# 
  1608  0009                     	;# 
  1609  000A                     	;# 
  1610  000B                     	;# 
  1611  000C                     	;# 
  1612  000D                     	;# 
  1613  000E                     	;# 
  1614  0011                     	;# 
  1615  0012                     	;# 
  1616  0013                     	;# 
  1617  0014                     	;# 
  1618  0015                     	;# 
  1619  0016                     	;# 
  1620  0016                     	;# 
  1621  0017                     	;# 
  1622  0018                     	;# 
  1623  0019                     	;# 
  1624  001A                     	;# 
  1625  001B                     	;# 
  1626  001C                     	;# 
  1627  001E                     	;# 
  1628  001F                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0091                     	;# 
  1633  0092                     	;# 
  1634  0093                     	;# 
  1635  0094                     	;# 
  1636  0095                     	;# 
  1637  0096                     	;# 
  1638  0097                     	;# 
  1639  0098                     	;# 
  1640  0099                     	;# 
  1641  009A                     	;# 
  1642  009B                     	;# 
  1643  009B                     	;# 
  1644  009C                     	;# 
  1645  009D                     	;# 
  1646  009E                     	;# 
  1647  010C                     	;# 
  1648  010D                     	;# 
  1649  010E                     	;# 
  1650  0111                     	;# 
  1651  0112                     	;# 
  1652  0113                     	;# 
  1653  0114                     	;# 
  1654  0115                     	;# 
  1655  0116                     	;# 
  1656  0117                     	;# 
  1657  0118                     	;# 
  1658  0119                     	;# 
  1659  011A                     	;# 
  1660  011B                     	;# 
  1661  011D                     	;# 
  1662  011E                     	;# 
  1663  018C                     	;# 
  1664  018D                     	;# 
  1665  018E                     	;# 
  1666  0191                     	;# 
  1667  0191                     	;# 
  1668  0192                     	;# 
  1669  0193                     	;# 
  1670  0193                     	;# 
  1671  0193                     	;# 
  1672  0194                     	;# 
  1673  0195                     	;# 
  1674  0196                     	;# 
  1675  0199                     	;# 
  1676  019A                     	;# 
  1677  019B                     	;# 
  1678  019B                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020C                     	;# 
  1684  020D                     	;# 
  1685  020E                     	;# 
  1686  0211                     	;# 
  1687  0211                     	;# 
  1688  0212                     	;# 
  1689  0212                     	;# 
  1690  0213                     	;# 
  1691  0213                     	;# 
  1692  0214                     	;# 
  1693  0214                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0215                     	;# 
  1697  0216                     	;# 
  1698  0216                     	;# 
  1699  0217                     	;# 
  1700  0217                     	;# 
  1701  0219                     	;# 
  1702  021A                     	;# 
  1703  021B                     	;# 
  1704  021C                     	;# 
  1705  021D                     	;# 
  1706  021E                     	;# 
  1707  021F                     	;# 
  1708  0291                     	;# 
  1709  0291                     	;# 
  1710  0292                     	;# 
  1711  0293                     	;# 
  1712  0294                     	;# 
  1713  0295                     	;# 
  1714  0295                     	;# 
  1715  0296                     	;# 
  1716  0298                     	;# 
  1717  0298                     	;# 
  1718  0299                     	;# 
  1719  029A                     	;# 
  1720  029B                     	;# 
  1721  029C                     	;# 
  1722  029D                     	;# 
  1723  029E                     	;# 
  1724  0311                     	;# 
  1725  0311                     	;# 
  1726  0312                     	;# 
  1727  0313                     	;# 
  1728  0318                     	;# 
  1729  0318                     	;# 
  1730  0319                     	;# 
  1731  031A                     	;# 
  1732  038C                     	;# 
  1733  038D                     	;# 
  1734  038E                     	;# 
  1735  0391                     	;# 
  1736  0392                     	;# 
  1737  0393                     	;# 
  1738  0394                     	;# 
  1739  0395                     	;# 
  1740  0396                     	;# 
  1741  039A                     	;# 
  1742  039C                     	;# 
  1743  039D                     	;# 
  1744  039E                     	;# 
  1745  039F                     	;# 
  1746  0415                     	;# 
  1747  0416                     	;# 
  1748  0417                     	;# 
  1749  041C                     	;# 
  1750  041D                     	;# 
  1751  041E                     	;# 
  1752  0FE4                     	;# 
  1753  0FE5                     	;# 
  1754  0FE6                     	;# 
  1755  0FE7                     	;# 
  1756  0FE8                     	;# 
  1757  0FE9                     	;# 
  1758  0FEA                     	;# 
  1759  0FEB                     	;# 
  1760  0FED                     	;# 
  1761  0FEE                     	;# 
  1762  0FEF                     	;# 
  1763  0000                     	;# 
  1764  0001                     	;# 
  1765  0002                     	;# 
  1766  0003                     	;# 
  1767  0004                     	;# 
  1768  0005                     	;# 
  1769  0006                     	;# 
  1770  0007                     	;# 
  1771  0008                     	;# 
  1772  0009                     	;# 
  1773  000A                     	;# 
  1774  000B                     	;# 
  1775  000C                     	;# 
  1776  000D                     	;# 
  1777  000E                     	;# 
  1778  0011                     	;# 
  1779  0012                     	;# 
  1780  0013                     	;# 
  1781  0014                     	;# 
  1782  0015                     	;# 
  1783  0016                     	;# 
  1784  0016                     	;# 
  1785  0017                     	;# 
  1786  0018                     	;# 
  1787  0019                     	;# 
  1788  001A                     	;# 
  1789  001B                     	;# 
  1790  001C                     	;# 
  1791  001E                     	;# 
  1792  001F                     	;# 
  1793  008C                     	;# 
  1794  008D                     	;# 
  1795  008E                     	;# 
  1796  0091                     	;# 
  1797  0092                     	;# 
  1798  0093                     	;# 
  1799  0094                     	;# 
  1800  0095                     	;# 
  1801  0096                     	;# 
  1802  0097                     	;# 
  1803  0098                     	;# 
  1804  0099                     	;# 
  1805  009A                     	;# 
  1806  009B                     	;# 
  1807  009B                     	;# 
  1808  009C                     	;# 
  1809  009D                     	;# 
  1810  009E                     	;# 
  1811  010C                     	;# 
  1812  010D                     	;# 
  1813  010E                     	;# 
  1814  0111                     	;# 
  1815  0112                     	;# 
  1816  0113                     	;# 
  1817  0114                     	;# 
  1818  0115                     	;# 
  1819  0116                     	;# 
  1820  0117                     	;# 
  1821  0118                     	;# 
  1822  0119                     	;# 
  1823  011A                     	;# 
  1824  011B                     	;# 
  1825  011D                     	;# 
  1826  011E                     	;# 
  1827  018C                     	;# 
  1828  018D                     	;# 
  1829  018E                     	;# 
  1830  0191                     	;# 
  1831  0191                     	;# 
  1832  0192                     	;# 
  1833  0193                     	;# 
  1834  0193                     	;# 
  1835  0193                     	;# 
  1836  0194                     	;# 
  1837  0195                     	;# 
  1838  0196                     	;# 
  1839  0199                     	;# 
  1840  019A                     	;# 
  1841  019B                     	;# 
  1842  019B                     	;# 
  1843  019C                     	;# 
  1844  019D                     	;# 
  1845  019E                     	;# 
  1846  019F                     	;# 
  1847  020C                     	;# 
  1848  020D                     	;# 
  1849  020E                     	;# 
  1850  0211                     	;# 
  1851  0211                     	;# 
  1852  0212                     	;# 
  1853  0212                     	;# 
  1854  0213                     	;# 
  1855  0213                     	;# 
  1856  0214                     	;# 
  1857  0214                     	;# 
  1858  0215                     	;# 
  1859  0215                     	;# 
  1860  0215                     	;# 
  1861  0216                     	;# 
  1862  0216                     	;# 
  1863  0217                     	;# 
  1864  0217                     	;# 
  1865  0219                     	;# 
  1866  021A                     	;# 
  1867  021B                     	;# 
  1868  021C                     	;# 
  1869  021D                     	;# 
  1870  021E                     	;# 
  1871  021F                     	;# 
  1872  0291                     	;# 
  1873  0291                     	;# 
  1874  0292                     	;# 
  1875  0293                     	;# 
  1876  0294                     	;# 
  1877  0295                     	;# 
  1878  0295                     	;# 
  1879  0296                     	;# 
  1880  0298                     	;# 
  1881  0298                     	;# 
  1882  0299                     	;# 
  1883  029A                     	;# 
  1884  029B                     	;# 
  1885  029C                     	;# 
  1886  029D                     	;# 
  1887  029E                     	;# 
  1888  0311                     	;# 
  1889  0311                     	;# 
  1890  0312                     	;# 
  1891  0313                     	;# 
  1892  0318                     	;# 
  1893  0318                     	;# 
  1894  0319                     	;# 
  1895  031A                     	;# 
  1896  038C                     	;# 
  1897  038D                     	;# 
  1898  038E                     	;# 
  1899  0391                     	;# 
  1900  0392                     	;# 
  1901  0393                     	;# 
  1902  0394                     	;# 
  1903  0395                     	;# 
  1904  0396                     	;# 
  1905  039A                     	;# 
  1906  039C                     	;# 
  1907  039D                     	;# 
  1908  039E                     	;# 
  1909  039F                     	;# 
  1910  0415                     	;# 
  1911  0416                     	;# 
  1912  0417                     	;# 
  1913  041C                     	;# 
  1914  041D                     	;# 
  1915  041E                     	;# 
  1916  0FE4                     	;# 
  1917  0FE5                     	;# 
  1918  0FE6                     	;# 
  1919  0FE7                     	;# 
  1920  0FE8                     	;# 
  1921  0FE9                     	;# 
  1922  0FEA                     	;# 
  1923  0FEB                     	;# 
  1924  0FED                     	;# 
  1925  0FEE                     	;# 
  1926  0FEF                     	;# 
  1927                           
  1928                           	psect	idataCOMMON
  1929  0003                     __pidataCOMMON:	
  1930                           
  1931                           ;initializer for _I2C_slaveWriteData
  1932  0003  3455               	retlw	85
  1933                           
  1934                           	psect	idataBANK1
  1935  0A0C                     __pidataBANK1:	
  1936                           
  1937                           ;initializer for _tmr_scaler
  1938  0A0C  3401               	retlw	1
  1939                           
  1940                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1941  0A0D  3401               	retlw	1
  1942                           
  1943                           ;initializer for _type_no_data
  1944  0A0E  3406               	retlw	6
  1945                           
  1946                           	psect	stringtext
  1947  06CB                     __pstringtext:	
  1948  06CB                     _dpowers:	
  1949  06CB  3401               	retlw	1
  1950  06CC  3400               	retlw	0
  1951  06CD  340A               	retlw	10
  1952  06CE  3400               	retlw	0
  1953  06CF  3464               	retlw	100
  1954  06D0  3400               	retlw	0
  1955  06D1  34E8               	retlw	232
  1956  06D2  3403               	retlw	3
  1957  06D3  3410               	retlw	16
  1958  06D4  3427               	retlw	39
  1959  06D5                     __end_of_dpowers:	
  1960  06D5                     _RESOLUTION:	
  1961  06D5  34FF               	retlw	255
  1962  06D6  34FF               	retlw	255
  1963  06D7                     __end_of_RESOLUTION:	
  1964  06D7                     STR_36:	
  1965  06D7  3449               	retlw	73	;'I'
  1966  06D8  344C               	retlw	76	;'L'
  1967  06D9  344C               	retlw	76	;'L'
  1968  06DA  3445               	retlw	69	;'E'
  1969  06DB  3447               	retlw	71	;'G'
  1970  06DC  3441               	retlw	65	;'A'
  1971  06DD  344C               	retlw	76	;'L'
  1972  06DE  345F               	retlw	95	;'_'
  1973  06DF  3454               	retlw	84	;'T'
  1974  06E0  3459               	retlw	89	;'Y'
  1975  06E1  3450               	retlw	80	;'P'
  1976  06E2  3445               	retlw	69	;'E'
  1977  06E3  340A               	retlw	10
  1978  06E4  3400               	retlw	0
  1979  06E5                     STR_16:	
  1980  06E5  3424               	retlw	36	;'$'
  1981  06E6  343A               	retlw	58	;':'
  1982  06E7  3452               	retlw	82	;'R'
  1983  06E8  3444               	retlw	68	;'D'
  1984  06E9  3441               	retlw	65	;'A'
  1985  06EA  343A               	retlw	58	;':'
  1986  06EB  3425               	retlw	37	;'%'
  1987  06EC  3464               	retlw	100	;'d'
  1988  06ED  340A               	retlw	10
  1989  06EE  3400               	retlw	0
  1990  06EF                     STR_13:	
  1991  06EF  3424               	retlw	36	;'$'
  1992  06F0  343A               	retlw	58	;':'
  1993  06F1  3447               	retlw	71	;'G'
  1994  06F2  3445               	retlw	69	;'E'
  1995  06F3  3454               	retlw	84	;'T'
  1996  06F4  343A               	retlw	58	;':'
  1997  06F5  3425               	retlw	37	;'%'
  1998  06F6  3464               	retlw	100	;'d'
  1999  06F7  340A               	retlw	10
  2000  06F8  3400               	retlw	0
  2001  06F9                     STR_34:	
  2002  06F9  342D               	retlw	45	;'-'
  2003  06FA  3425               	retlw	37	;'%'
  2004  06FB  3464               	retlw	100	;'d'
  2005  06FC  342E               	retlw	46	;'.'
  2006  06FD  3425               	retlw	37	;'%'
  2007  06FE  3430               	retlw	48	;'0'
  2008  06FF  3432               	retlw	50	;'2'
  2009  0700  3464               	retlw	100	;'d'
  2010  0701  340A               	retlw	10
  2011  0702  3400               	retlw	0
  2012  0703                     STR_5:	
  2013  0703  3424               	retlw	36	;'$'
  2014  0704  343A               	retlw	58	;':'
  2015  0705  3457               	retlw	87	;'W'
  2016  0706  3448               	retlw	72	;'H'
  2017  0707  344F               	retlw	79	;'O'
  2018  0708  343A               	retlw	58	;':'
  2019  0709  3425               	retlw	37	;'%'
  2020  070A  3473               	retlw	115	;'s'
  2021  070B  340A               	retlw	10
  2022  070C  3400               	retlw	0
  2023  070D                     STR_9:	
  2024  070D  342A               	retlw	42	;'*'
  2025  070E  343A               	retlw	58	;':'
  2026  070F  3453               	retlw	83	;'S'
  2027  0710  3454               	retlw	84	;'T'
  2028  0711  3450               	retlw	80	;'P'
  2029  0712  343A               	retlw	58	;':'
  2030  0713  3425               	retlw	37	;'%'
  2031  0714  3473               	retlw	115	;'s'
  2032  0715  340A               	retlw	10
  2033  0716  3400               	retlw	0
  2034  0717                     STR_32:	
  2035  0717  342D               	retlw	45	;'-'
  2036  0718  3425               	retlw	37	;'%'
  2037  0719  3464               	retlw	100	;'d'
  2038  071A  342E               	retlw	46	;'.'
  2039  071B  3425               	retlw	37	;'%'
  2040  071C  3430               	retlw	48	;'0'
  2041  071D  3432               	retlw	50	;'2'
  2042  071E  3464               	retlw	100	;'d'
  2043  071F  342C               	retlw	44	;','
  2044  0720  3400               	retlw	0
  2045  0721                     STR_24:	
  2046  0721  3455               	retlw	85	;'U'
  2047  0722  3449               	retlw	73	;'I'
  2048  0723  344E               	retlw	78	;'N'
  2049  0724  3454               	retlw	84	;'T'
  2050  0725  3431               	retlw	49	;'1'
  2051  0726  3436               	retlw	54	;'6'
  2052  0727  345F               	retlw	95	;'_'
  2053  0728  3454               	retlw	84	;'T'
  2054  0729  343A               	retlw	58	;':'
  2055  072A  3400               	retlw	0
  2056  072B                     STR_1:	
  2057  072B  3453               	retlw	83	;'S'
  2058  072C  3448               	retlw	72	;'H'
  2059  072D  3454               	retlw	84	;'T'
  2060  072E  3433               	retlw	51	;'3'
  2061  072F  3431               	retlw	49	;'1'
  2062  0730  345F               	retlw	95	;'_'
  2063  0731  3444               	retlw	68	;'D'
  2064  0732  3449               	retlw	73	;'I'
  2065  0733  3453               	retlw	83	;'S'
  2066  0734  3400               	retlw	0
  2067  0735                     STR_35:	
  2068  0735  344E               	retlw	78	;'N'
  2069  0736  344F               	retlw	79	;'O'
  2070  0737  345F               	retlw	95	;'_'
  2071  0738  3444               	retlw	68	;'D'
  2072  0739  3441               	retlw	65	;'A'
  2073  073A  3454               	retlw	84	;'T'
  2074  073B  3441               	retlw	65	;'A'
  2075  073C  340A               	retlw	10
  2076  073D  3400               	retlw	0
  2077  073E                     STR_18:	
  2078  073E  3455               	retlw	85	;'U'
  2079  073F  3449               	retlw	73	;'I'
  2080  0740  344E               	retlw	78	;'N'
  2081  0741  3454               	retlw	84	;'T'
  2082  0742  3438               	retlw	56	;'8'
  2083  0743  345F               	retlw	95	;'_'
  2084  0744  3454               	retlw	84	;'T'
  2085  0745  343A               	retlw	58	;':'
  2086  0746  3400               	retlw	0
  2087  0747                     STR_30:	
  2088  0747  3446               	retlw	70	;'F'
  2089  0748  344C               	retlw	76	;'L'
  2090  0749  344F               	retlw	79	;'O'
  2091  074A  3441               	retlw	65	;'A'
  2092  074B  3454               	retlw	84	;'T'
  2093  074C  343A               	retlw	58	;':'
  2094  074D  3400               	retlw	0
  2095  074E                     STR_2:	
  2096  074E  3428               	retlw	40	;'('
  2097  074F  346E               	retlw	110	;'n'
  2098  0750  3475               	retlw	117	;'u'
  2099  0751  346C               	retlw	108	;'l'
  2100  0752  346C               	retlw	108	;'l'
  2101  0753  3429               	retlw	41	;')'
  2102  0754  3400               	retlw	0
  2103  0755                     STR_17:	
  2104  0755  3425               	retlw	37	;'%'
  2105  0756  3425               	retlw	37	;'%'
  2106  0757  3425               	retlw	37	;'%'
  2107  0758  3464               	retlw	100	;'d'
  2108  0759  343A               	retlw	58	;':'
  2109  075A  3400               	retlw	0
  2110  075B                     STR_3:	
  2111  075B  3423               	retlw	35	;'#'
  2112  075C  3425               	retlw	37	;'%'
  2113  075D  3473               	retlw	115	;'s'
  2114  075E  340A               	retlw	10
  2115  075F  3400               	retlw	0
  2116  0760                     STR_20:	
  2117  0760  3425               	retlw	37	;'%'
  2118  0761  3475               	retlw	117	;'u'
  2119  0762  340A               	retlw	10
  2120  0763  3400               	retlw	0
  2121  0764                     STR_22:	
  2122  0764  3425               	retlw	37	;'%'
  2123  0765  3464               	retlw	100	;'d'
  2124  0766  342C               	retlw	44	;','
  2125  0767  3400               	retlw	0
  2126  0768                     STR_19:	
  2127  0768  3425               	retlw	37	;'%'
  2128  0769  3475               	retlw	117	;'u'
  2129  076A  342C               	retlw	44	;','
  2130  076B  3400               	retlw	0
  2131  076C                     STR_15:	
  2132  076C  3452               	retlw	82	;'R'
  2133  076D  3444               	retlw	68	;'D'
  2134  076E  3441               	retlw	65	;'A'
  2135  076F  3400               	retlw	0
  2136  0770                     STR_14:	
  2137  0770  3457               	retlw	87	;'W'
  2138  0771  3444               	retlw	68	;'D'
  2139  0772  3441               	retlw	65	;'A'
  2140  0773  3400               	retlw	0
  2141  0774                     STR_7:	
  2142  0774  3453               	retlw	83	;'S'
  2143  0775  3454               	retlw	84	;'T'
  2144  0776  3441               	retlw	65	;'A'
  2145  0777  3400               	retlw	0
  2146  0778                     STR_10:	
  2147  0778  3441               	retlw	65	;'A'
  2148  0779  3443               	retlw	67	;'C'
  2149  077A  344B               	retlw	75	;'K'
  2150  077B  3400               	retlw	0
  2151  077C                     STR_4:	
  2152  077C  3457               	retlw	87	;'W'
  2153  077D  3448               	retlw	72	;'H'
  2154  077E  344F               	retlw	79	;'O'
  2155  077F  3400               	retlw	0
  2156  0780                     STR_8:	
  2157  0780  3453               	retlw	83	;'S'
  2158  0781  3454               	retlw	84	;'T'
  2159  0782  3450               	retlw	80	;'P'
  2160  0783  3400               	retlw	0
  2161  0784                     STR_12:	
  2162  0784  3447               	retlw	71	;'G'
  2163  0785  3445               	retlw	69	;'E'
  2164  0786  3454               	retlw	84	;'T'
  2165  0787  3400               	retlw	0
  2166  0788                     STR_11:	
  2167  0788  3453               	retlw	83	;'S'
  2168  0789  3445               	retlw	69	;'E'
  2169  078A  3454               	retlw	84	;'T'
  2170  078B  3400               	retlw	0
  2171  078C                     STR_6:	
  2172  078C  3453               	retlw	83	;'S'
  2173  078D  3441               	retlw	65	;'A'
  2174  078E  3456               	retlw	86	;'V'
  2175  078F  3400               	retlw	0
  2176  06EB                     
  2177                           ; #config settings
  2178  0000                     
  2179                           	psect	nvBANK1
  2180  00E7                     __pnvBANK1:	
  2181  00E7                     _PROTOCOL_Set_Handler:	
  2182  00E7                     	ds	2
  2183  00E9                     _PROTOCOL_Stop_Handler:	
  2184  00E9                     	ds	2
  2185  00EB                     _PROTOCOL_Start_Handler:	
  2186  00EB                     	ds	2
  2187                           
  2188                           	psect	nvBANK2
  2189  0160                     __pnvBANK2:	
  2190  0160                     _device_id_:	
  2191  0160                     	ds	2
  2192  0015                     _TMR0	set	21
  2193  000B                     _INTCONbits	set	11
  2194  0014                     _PIR4bits	set	20
  2195  0011                     _PIR1bits	set	17
  2196  005A                     _TMR0IF	set	90
  2197  0095                     _OPTION_REG	set	149
  2198  0095                     _OPTION_REGbits	set	149
  2199  008E                     _TRISC	set	142
  2200  008D                     _TRISB	set	141
  2201  008C                     _TRISA	set	140
  2202  0097                     _WDTCON	set	151
  2203  0098                     _OSCTUNE	set	152
  2204  0099                     _OSCCON	set	153
  2205  0094                     _PIE4bits	set	148
  2206  0091                     _PIE1bits	set	145
  2207  010E                     _LATCbits	set	270
  2208  011D                     _APFCON0	set	285
  2209  011E                     _APFCON1	set	286
  2210  010E                     _LATC	set	270
  2211  010D                     _LATB	set	269
  2212  010C                     _LATA	set	268
  2213  0196                     _EECON2	set	406
  2214  0193                     _EEDATL	set	403
  2215  0194                     _EEDATH	set	404
  2216  0195                     _EECON1bits	set	405
  2217  0192                     _EEADRH	set	402
  2218  0191                     _EEADRL	set	401
  2219  018C                     _ANSELA	set	396
  2220  018D                     _ANSELB	set	397
  2221  018E                     _ANSELC	set	398
  2222  0199                     _RCREG	set	409
  2223  019D                     _RCSTAbits	set	413
  2224  019A                     _TXREG	set	410
  2225  019C                     _SPBRGH	set	412
  2226  019B                     _SPBRGL	set	411
  2227  019E                     _TXSTA	set	414
  2228  019D                     _RCSTA	set	413
  2229  019F                     _BAUDCON	set	415
  2230  020E                     _WPUC	set	526
  2231  020C                     _WPUA	set	524
  2232  020D                     _WPUB	set	525
  2233  0219                     _SSP2BUF	set	537
  2234  021E                     _SSP2CON2bits	set	542
  2235  021D                     _SSP2CON1bits	set	541
  2236  021A                     _SSP2ADD	set	538
  2237  021F                     _SSP2CON3	set	543
  2238  021D                     _SSP2CON1	set	541
  2239  021C                     _SSP2STAT	set	540
  2240  0215                     _SSP1CON1bits	set	533
  2241  0216                     _SSP1CON2bits	set	534
  2242  0214                     _SSP1STATbits	set	532
  2243  0211                     _SSP1BUF	set	529
  2244  0212                     _SSP1ADD	set	530
  2245  0213                     _SSP1MSK	set	531
  2246  0217                     _SSP1CON3	set	535
  2247  0216                     _SSP1CON2	set	534
  2248  0215                     _SSP1CON1	set	533
  2249  0214                     _SSP1STAT	set	532
  2250                           
  2251                           	psect	cinit
  2252  004A                     start_initialization:	
  2253  004A                     __initialization:	
  2254                           
  2255                           ; Initialize objects allocated to COMMON
  2256  004A  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  2257  004D  00FD               	movwf	__pdataCOMMON& (0+127)
  2258                           
  2259                           ; Initialize objects allocated to BANK1
  2260  004E  0021               	movlb	1	; select bank1
  2261  004F  318A  220C  3180   	fcall	__pidataBANK1	;fetch initializer
  2262  0052  00ED               	movwf	__pdataBANK1& (0+127)
  2263  0053  318A  220D  3180   	fcall	__pidataBANK1+1	;fetch initializer
  2264  0056  00EE               	movwf	(__pdataBANK1+1)& (0+127)
  2265  0057  318A  220E  3180   	fcall	__pidataBANK1+2	;fetch initializer
  2266  005A  00EF               	movwf	(__pdataBANK1+2)& (0+127)
  2267                           
  2268                           ; Clear objects allocated to COMMON
  2269  005B  01FA               	clrf	__pbssCOMMON& (0+127)
  2270  005C  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2271  005D  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2272                           
  2273                           ; Clear objects allocated to BANK0
  2274  005E  3060               	movlw	low __pbssBANK0
  2275  005F  0084               	movwf	4
  2276  0060  3000               	movlw	high __pbssBANK0
  2277  0061  0085               	movwf	5
  2278  0062  300F               	movlw	15
  2279  0063  318A  2232  3180   	fcall	clear_ram0
  2280                           
  2281                           ; Clear objects allocated to BANK1
  2282  0066  30A0               	movlw	low __pbssBANK1
  2283  0067  0084               	movwf	4
  2284  0068  3000               	movlw	high __pbssBANK1
  2285  0069  0085               	movwf	5
  2286  006A  3047               	movlw	71
  2287  006B  318A  2232  3180   	fcall	clear_ram0
  2288                           
  2289                           ; Clear objects allocated to BANK2
  2290  006E  3020               	movlw	low __pbssBANK2
  2291  006F  0084               	movwf	4
  2292  0070  3001               	movlw	high __pbssBANK2
  2293  0071  0085               	movwf	5
  2294  0072  3040               	movlw	64
  2295  0073  318A  2232  3180   	fcall	clear_ram0
  2296                           
  2297                           ; Clear objects allocated to BANK3
  2298  0076  30A0               	movlw	low __pbssBANK3
  2299  0077  0084               	movwf	4
  2300  0078  3001               	movlw	high __pbssBANK3
  2301  0079  0085               	movwf	5
  2302  007A  3030               	movlw	48
  2303  007B  318A  2232         	fcall	clear_ram0
  2304  007D                     end_of_initialization:	
  2305                           ;End of C runtime variable initialization code
  2306                           
  2307  007D                     __end_of__initialization:	
  2308  007D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2309  007E  0020               	movlb	0
  2310  007F  318D  2D5D         	ljmp	_main	;jump to C main() function
  2311                           
  2312                           	psect	bssCOMMON
  2313  007A                     __pbssCOMMON:	
  2314  007A                     _eusartTxBufferRemaining:	
  2315  007A                     	ds	1
  2316  007B                     _eusartTxTail:	
  2317  007B                     	ds	1
  2318  007C                     _eusartTxHead:	
  2319  007C                     	ds	1
  2320                           
  2321                           	psect	dataCOMMON
  2322  007D                     __pdataCOMMON:	
  2323  007D                     _I2C_slaveWriteData:	
  2324  007D                     	ds	1
  2325                           
  2326                           	psect	bssBANK0
  2327  0060                     __pbssBANK0:	
  2328  0060                     _i2c2_object:	
  2329  0060                     	ds	5
  2330  0065                     _i:	
  2331  0065                     	ds	1
  2332  0066                     _value:	
  2333  0066                     	ds	1
  2334  0067                     _eusartRxCount:	
  2335  0067                     	ds	1
  2336  0068                     _eusartRxTail:	
  2337  0068                     	ds	1
  2338  0069                     _eusartRxHead:	
  2339  0069                     	ds	1
  2340  006A                     _p_i2c2_current:	
  2341  006A                     	ds	1
  2342  006B                     _p_i2c2_trb_current:	
  2343  006B                     	ds	1
  2344  006C                     I2C1_StatusCallback@next:	
  2345  006C                     	ds	1
  2346  006D                     I2C2_ISR@i2c_address:	
  2347  006D                     	ds	2
  2348                           
  2349                           	psect	bssBANK1
  2350  00A0                     __pbssBANK1:	
  2351  00A0                     _eusartRxBuffer:	
  2352  00A0                     	ds	8
  2353  00A8                     _eusartTxBuffer:	
  2354  00A8                     	ds	8
  2355  00B0                     _float100:	
  2356  00B0                     	ds	2
  2357  00B2                     _PROTOCOL_Inv_Handler:	
  2358  00B2                     	ds	2
  2359  00B4                     _PROTOCOL_Extension_Handler:	
  2360  00B4                     	ds	2
  2361  00B6                     _PROTOCOL_Loop_Func:	
  2362  00B6                     	ds	2
  2363  00B8                     _data:	
  2364  00B8                     	ds	1
  2365  00B9                     _j:	
  2366  00B9                     	ds	1
  2367  00BA                     _backplane_slave_enabled:	
  2368  00BA                     	ds	1
  2369  00BB                     _readbuf_status:	
  2370  00BB                     	ds	1
  2371  00BC                     _tmr_overflow:	
  2372  00BC                     	ds	1
  2373  00BD                     _tmr_cnt:	
  2374  00BD                     	ds	1
  2375  00BE                     _sec_cnt:	
  2376  00BE                     	ds	1
  2377  00BF                     _invoked:	
  2378  00BF                     	ds	1
  2379  00C0                     _running:	
  2380  00C0                     	ds	1
  2381  00C1                     _locked:	
  2382  00C1                     	ds	1
  2383  00C2                     _cnt:	
  2384  00C2                     	ds	1
  2385  00C3                     _slave_address:	
  2386  00C3                     	ds	1
  2387  00C4                     _timer0ReloadVal:	
  2388  00C4                     	ds	1
  2389  00C5                     I2C2_ISR@i2c_10bit_address_restart:	
  2390  00C5                     	ds	1
  2391  00C6                     I2C2_ISR@i2c_bytes_left:	
  2392  00C6                     	ds	1
  2393  00C7                     I2C2_ISR@pi2c_buf_ptr:	
  2394  00C7                     	ds	1
  2395  00C8                     _i2c2_trb_count:	
  2396  00C8                     	ds	1
  2397  00C9                     _i2c2_state:	
  2398  00C9                     	ds	1
  2399  00CA                     I2C1_StatusCallback@ext_cnt:	
  2400  00CA                     	ds	1
  2401  00CB                     I2C1_StatusCallback@ext_len:	
  2402  00CB                     	ds	1
  2403  00CC                     I2C1_StatusCallback@slaveWriteType:	
  2404  00CC                     	ds	1
  2405  00CD                     _readbuf:	
  2406  00CD                     	ds	6
  2407  00D3                     I2C2_MasterRead@trBlock:	
  2408  00D3                     	ds	4
  2409  00D7                     I2C2_MasterWrite@trBlock:	
  2410  00D7                     	ds	4
  2411  00DB                     PROTOCOL_Send_float@pbuf:	
  2412  00DB                     	ds	3
  2413  00DE                     _i2c2_tr_queue:	
  2414  00DE                     	ds	3
  2415  00E1                     PROTOCOL_Send_int16_t@pbuf:	
  2416  00E1                     	ds	2
  2417  00E3                     PROTOCOL_Send_uint16_t@pbuf:	
  2418  00E3                     	ds	2
  2419  00E5                     PROTOCOL_Send_int8_t@pbuf:	
  2420  00E5                     	ds	1
  2421  00E6                     PROTOCOL_Send_uint8_t@pbuf:	
  2422  00E6                     	ds	1
  2423                           
  2424                           	psect	dataBANK1
  2425  00ED                     __pdataBANK1:	
  2426  00ED                     _tmr_scaler:	
  2427  00ED                     	ds	1
  2428  00EE                     _BACKPLANE_SLAVE_ADDRESS:	
  2429  00EE                     	ds	1
  2430  00EF                     _type_no_data:	
  2431  00EF                     	ds	1
  2432                           
  2433                           	psect	bssBANK2
  2434  0120                     __pbssBANK2:	
  2435  0120                     _buf:	
  2436  0120                     	ds	48
  2437  0150                     _sendbuf:	
  2438  0150                     	ds	16
  2439                           
  2440                           	psect	bssBANK3
  2441  01A0                     __pbssBANK3:	
  2442  01A0                     I2C1_StatusCallback@ext_buf:	
  2443  01A0                     	ds	48
  2444                           
  2445                           	psect	clrtext
  2446  0A32                     clear_ram0:	
  2447                           ;	Called with FSR0 containing the base address, and
  2448                           ;	WREG with the size to clear
  2449                           
  2450  0A32  0064               	clrwdt	;clear the watchdog before getting into this loop
  2451  0A33                     clrloop0:	
  2452  0A33  0180               	clrf	0	;clear RAM location pointed to by FSR
  2453  0A34  3101               	addfsr 0,1
  2454  0A35  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2455  0A36  2A33               	goto	clrloop0	;have we reached the end yet?
  2456  0A37  3400               	retlw	0	;all done for this memory range, return
  2457                           
  2458                           	psect	cstackBANK2
  2459  0162                     __pcstackBANK2:	
  2460  0162                     PROTOCOL_Loop@c:	
  2461                           
  2462                           ; 1 bytes @ 0x0
  2463  0162                     	ds	1
  2464  0163                     PROTOCOL_Loop@device_address:	
  2465                           
  2466                           ; 1 bytes @ 0x1
  2467  0163                     	ds	1
  2468                           
  2469                           	psect	cstackCOMMON
  2470  0070                     __pcstackCOMMON:	
  2471  0070                     ?_isdigit:	
  2472  0070                     ?_PROTOCOL_Read_Device_Address:	
  2473                           ; 1 bit 
  2474                           
  2475  0070                     ?_I2C1_StatusCallback:	
  2476                           ; 1 bytes @ 0x0
  2477                           
  2478  0070                     ?_PROTOCOL_SET:	
  2479                           ; 1 bytes @ 0x0
  2480                           
  2481  0070                     ?_PROTOCOL_STA:	
  2482                           ; 1 bytes @ 0x0
  2483                           
  2484  0070                     ?_PROTOCOL_STP:	
  2485                           ; 1 bytes @ 0x0
  2486                           
  2487  0070                     ?_PROTOCOL_SAV:	
  2488                           ; 1 bytes @ 0x0
  2489                           
  2490  0070                     ?_PROTOCOL_INV:	
  2491                           ; 1 bytes @ 0x0
  2492                           
  2493  0070                     ??_PROTOCOL_INV:	
  2494                           ; 1 bytes @ 0x0
  2495                           
  2496  0070                     ?_PROTOCOL_RST:	
  2497                           ; 1 bytes @ 0x0
  2498                           
  2499  0070                     ??_PROTOCOL_RST:	
  2500                           ; 1 bytes @ 0x0
  2501                           
  2502  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2506                           ; 1 bytes @ 0x0
  2507                           
  2508  0070                     ?_PROTOCOL_Read_Lock:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0070                     ??_PROTOCOL_Read_Lock:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514  0070                     ?_PROTOCOL_EXT:	
  2515                           ; 1 bytes @ 0x0
  2516                           
  2517  0070                     ?_PROTOCOL_I2C_WHO:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520  0070                     ??_PROTOCOL_I2C_WHO:	
  2521                           ; 1 bytes @ 0x0
  2522                           
  2523  0070                     ??_PROTOCOL_I2C_SEN:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526  0070                     ?_PROTOCOL_I2C_GET:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0070                     ??_PROTOCOL_I2C_GET:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532  0070                     ?_I2C2_Stop:	
  2533                           ; 1 bytes @ 0x0
  2534                           
  2535  0070                     ??_I2C2_Stop:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538  0070                     ?_I2C2_FunctionComplete:	
  2539                           ; 1 bytes @ 0x0
  2540                           
  2541  0070                     ??_I2C2_FunctionComplete:	
  2542                           ; 1 bytes @ 0x0
  2543                           
  2544  0070                     ?_PIN_MANAGER_Initialize:	
  2545                           ; 1 bytes @ 0x0
  2546                           
  2547  0070                     ?_OSCILLATOR_Initialize:	
  2548                           ; 1 bytes @ 0x0
  2549                           
  2550  0070                     ?_WDT_Initialize:	
  2551                           ; 1 bytes @ 0x0
  2552                           
  2553  0070                     ?_TMR0_Initialize:	
  2554                           ; 1 bytes @ 0x0
  2555                           
  2556  0070                     ?_EUSART_Initialize:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559  0070                     ?_EUSART_Transmit_ISR:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  0070                     ??_EUSART_Transmit_ISR:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565  0070                     ?_EUSART_Receive_ISR:	
  2566                           ; 1 bytes @ 0x0
  2567                           
  2568  0070                     ??_EUSART_Receive_ISR:	
  2569                           ; 1 bytes @ 0x0
  2570                           
  2571  0070                     ?_PROTOCOL_Loop:	
  2572                           ; 1 bytes @ 0x0
  2573                           
  2574  0070                     ?_I2C1_Initialize:	
  2575                           ; 1 bytes @ 0x0
  2576                           
  2577  0070                     ?_I2C1_ISR:	
  2578                           ; 1 bytes @ 0x0
  2579                           
  2580  0070                     ?_I2C2_Initialize:	
  2581                           ; 1 bytes @ 0x0
  2582                           
  2583  0070                     ?_I2C2_ISR:	
  2584                           ; 1 bytes @ 0x0
  2585                           
  2586  0070                     ?_I2C2_BusCollisionISR:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589  0070                     ??_I2C2_BusCollisionISR:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592  0070                     ?_INTERRUPT_InterruptManager:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595  0070                     ?_EUSART_Read:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0070                     ?_EUSART_Write:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0070                     ?_putch:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0070                     ?_DATAEE_ReadByte:	
  2605                           ; 1 bytes @ 0x0
  2606                           
  2607  0070                     ?_TMR0_HasOverflowOccured:	
  2608                           ; 1 bytes @ 0x0
  2609                           
  2610  0070                     ?_inv_handler:	
  2611                           ; 1 bytes @ 0x0
  2612                           
  2613  0070                     ?_main:	
  2614                           ; 1 bytes @ 0x0
  2615                           
  2616  0070                     ?_PROTOCOL_Write_Device_Address:	
  2617                           ; 1 bytes @ 0x0
  2618                           
  2619  0070                     ?i1_DATAEE_WriteByte:	
  2620                           ; 1 bytes @ 0x0
  2621                           
  2622  0070                     ?i1_PROTOCOL_STA:	
  2623                           ; 1 bytes @ 0x0
  2624                           
  2625  0070                     ??i1_PROTOCOL_STA:	
  2626                           ; 1 bytes @ 0x0
  2627                           
  2628  0070                     ?i1_PROTOCOL_STP:	
  2629                           ; 1 bytes @ 0x0
  2630                           
  2631  0070                     ??i1_PROTOCOL_STP:	
  2632                           ; 1 bytes @ 0x0
  2633                           
  2634  0070                     ?i1_PROTOCOL_SAV:	
  2635                           ; 1 bytes @ 0x0
  2636                           
  2637  0070                     ?i1_PROTOCOL_SET:	
  2638                           ; 1 bytes @ 0x0
  2639                           
  2640  0070                     ??i1_PROTOCOL_SET:	
  2641                           ; 1 bytes @ 0x0
  2642                           
  2643  0070                     ?i1_PROTOCOL_EXT:	
  2644                           ; 1 bytes @ 0x0
  2645                           
  2646  0070                     ??i1_PROTOCOL_EXT:	
  2647                           ; 1 bytes @ 0x0
  2648                           
  2649  0070                     ?_PROTOCOL_I2C_SEN:	
  2650                           ; 1 bytes @ 0x0
  2651                           
  2652  0070                     i1DATAEE_WriteByte@bData:	
  2653                           ; 2 bytes @ 0x0
  2654                           
  2655                           
  2656                           ; 1 bytes @ 0x0
  2657  0070                     	ds	1
  2658  0071                     ??i1_DATAEE_WriteByte:	
  2659  0071                     I2C2_Stop@completion_code:	
  2660                           ; 1 bytes @ 0x1
  2661                           
  2662  0071                     i1DATAEE_WriteByte@bAdd:	
  2663                           ; 1 bytes @ 0x1
  2664                           
  2665  0071                     i1PROTOCOL_SET@value_:	
  2666                           ; 1 bytes @ 0x1
  2667                           
  2668                           
  2669                           ; 1 bytes @ 0x1
  2670  0071                     	ds	1
  2671  0072                     ??_I2C2_ISR:	
  2672  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2673                           ; 1 bytes @ 0x2
  2674                           
  2675  0072                     PROTOCOL_I2C_SEN@pdata:	
  2676                           ; 1 bytes @ 0x2
  2677                           
  2678                           
  2679                           ; 2 bytes @ 0x2
  2680  0072                     	ds	1
  2681  0073                     ??i1_PROTOCOL_SAV:	
  2682                           
  2683                           ; 1 bytes @ 0x3
  2684  0073                     	ds	1
  2685  0074                     ??_I2C1_StatusCallback:	
  2686                           
  2687                           ; 1 bytes @ 0x4
  2688  0074                     	ds	1
  2689  0075                     I2C1_StatusCallback@pdata:	
  2690                           
  2691                           ; 2 bytes @ 0x5
  2692  0075                     	ds	2
  2693  0077                     I2C1_StatusCallback@i2c_bus_state:	
  2694                           
  2695                           ; 1 bytes @ 0x7
  2696  0077                     	ds	1
  2697  0078                     ??_I2C1_ISR:	
  2698                           
  2699                           ; 1 bytes @ 0x8
  2700  0078                     	ds	1
  2701  0079                     I2C1_ISR@i2c_data:	
  2702                           
  2703                           ; 1 bytes @ 0x9
  2704  0079                     	ds	1
  2705                           
  2706                           	psect	cstackBANK0
  2707  0020                     __pcstackBANK0:	
  2708  0020                     ??_INTERRUPT_InterruptManager:	
  2709                           
  2710                           ; 1 bytes @ 0x0
  2711  0020                     	ds	1
  2712  0021                     ??_PROTOCOL_Read_Device_Address:	
  2713  0021                     ??_PROTOCOL_SET:	
  2714                           ; 1 bytes @ 0x1
  2715                           
  2716  0021                     ??_PROTOCOL_STA:	
  2717                           ; 1 bytes @ 0x1
  2718                           
  2719  0021                     ??_PROTOCOL_STP:	
  2720                           ; 1 bytes @ 0x1
  2721                           
  2722  0021                     ??_PROTOCOL_EXT:	
  2723                           ; 1 bytes @ 0x1
  2724                           
  2725  0021                     ?_I2C2_MasterWriteTRBBuild:	
  2726                           ; 1 bytes @ 0x1
  2727                           
  2728  0021                     ?_I2C2_MasterTRBInsert:	
  2729                           ; 1 bytes @ 0x1
  2730                           
  2731  0021                     ?_I2C2_MasterReadTRBBuild:	
  2732                           ; 1 bytes @ 0x1
  2733                           
  2734  0021                     ??_PIN_MANAGER_Initialize:	
  2735                           ; 1 bytes @ 0x1
  2736                           
  2737  0021                     ??_OSCILLATOR_Initialize:	
  2738                           ; 1 bytes @ 0x1
  2739                           
  2740  0021                     ??_WDT_Initialize:	
  2741                           ; 1 bytes @ 0x1
  2742                           
  2743  0021                     ??_TMR0_Initialize:	
  2744                           ; 1 bytes @ 0x1
  2745                           
  2746  0021                     ??_EUSART_Initialize:	
  2747                           ; 1 bytes @ 0x1
  2748                           
  2749  0021                     ??_isdigit:	
  2750                           ; 1 bytes @ 0x1
  2751                           
  2752  0021                     ??_I2C1_Initialize:	
  2753                           ; 1 bytes @ 0x1
  2754                           
  2755  0021                     ??_I2C2_Initialize:	
  2756                           ; 1 bytes @ 0x1
  2757                           
  2758  0021                     ??_EUSART_Read:	
  2759                           ; 1 bytes @ 0x1
  2760                           
  2761  0021                     ??_EUSART_Write:	
  2762                           ; 1 bytes @ 0x1
  2763                           
  2764  0021                     ?_DATAEE_WriteByte:	
  2765                           ; 1 bytes @ 0x1
  2766                           
  2767  0021                     ??_DATAEE_ReadByte:	
  2768                           ; 1 bytes @ 0x1
  2769                           
  2770  0021                     ??_TMR0_HasOverflowOccured:	
  2771                           ; 1 bytes @ 0x1
  2772                           
  2773  0021                     ?_PROTOCOL_I2C_Set_TLV:	
  2774                           ; 1 bytes @ 0x1
  2775                           
  2776  0021                     ?_strncmp:	
  2777                           ; 1 bytes @ 0x1
  2778                           
  2779  0021                     ?___wmul:	
  2780                           ; 2 bytes @ 0x1
  2781                           
  2782  0021                     ?___lwdiv:	
  2783                           ; 2 bytes @ 0x1
  2784                           
  2785  0021                     ?___lmul:	
  2786                           ; 2 bytes @ 0x1
  2787                           
  2788  0021                     I2C2_MasterTRBInsert@ptrb_list:	
  2789                           ; 4 bytes @ 0x1
  2790                           
  2791  0021                     I2C2_MasterReadTRBBuild@pdata:	
  2792                           ; 1 bytes @ 0x1
  2793                           
  2794  0021                     I2C2_MasterWriteTRBBuild@pdata:	
  2795                           ; 1 bytes @ 0x1
  2796                           
  2797  0021                     DATAEE_WriteByte@bData:	
  2798                           ; 1 bytes @ 0x1
  2799                           
  2800  0021                     DATAEE_ReadByte@bAdd:	
  2801                           ; 1 bytes @ 0x1
  2802                           
  2803  0021                     PROTOCOL_EXT@char_buf:	
  2804                           ; 1 bytes @ 0x1
  2805                           
  2806  0021                     PROTOCOL_I2C_Set_TLV@length:	
  2807                           ; 1 bytes @ 0x1
  2808                           
  2809  0021                     _isdigit$1477:	
  2810                           ; 1 bytes @ 0x1
  2811                           
  2812  0021                     ___wmul@multiplier:	
  2813                           ; 1 bytes @ 0x1
  2814                           
  2815  0021                     ___lwdiv@divisor:	
  2816                           ; 2 bytes @ 0x1
  2817                           
  2818  0021                     strncmp@s1:	
  2819                           ; 2 bytes @ 0x1
  2820                           
  2821  0021                     ___lmul@multiplier:	
  2822                           ; 2 bytes @ 0x1
  2823                           
  2824                           
  2825                           ; 4 bytes @ 0x1
  2826  0021                     	ds	1
  2827  0022                     ?_PROTOCOL_Initialize:	
  2828  0022                     ??_DATAEE_WriteByte:	
  2829                           ; 1 bytes @ 0x2
  2830                           
  2831  0022                     I2C2_MasterTRBInsert@pflag:	
  2832                           ; 1 bytes @ 0x2
  2833                           
  2834  0022                     I2C2_MasterReadTRBBuild@length:	
  2835                           ; 1 bytes @ 0x2
  2836                           
  2837  0022                     I2C2_MasterWriteTRBBuild@length:	
  2838                           ; 1 bytes @ 0x2
  2839                           
  2840  0022                     EUSART_Read@readValue:	
  2841                           ; 1 bytes @ 0x2
  2842                           
  2843  0022                     EUSART_Write@txData:	
  2844                           ; 1 bytes @ 0x2
  2845                           
  2846  0022                     DATAEE_WriteByte@bAdd:	
  2847                           ; 1 bytes @ 0x2
  2848                           
  2849  0022                     PROTOCOL_SET@value_:	
  2850                           ; 1 bytes @ 0x2
  2851                           
  2852  0022                     isdigit@c:	
  2853                           ; 1 bytes @ 0x2
  2854                           
  2855  0022                     PROTOCOL_Initialize@device_id:	
  2856                           ; 1 bytes @ 0x2
  2857                           
  2858  0022                     PROTOCOL_I2C_Set_TLV@pbuffer:	
  2859                           ; 2 bytes @ 0x2
  2860                           
  2861                           
  2862                           ; 2 bytes @ 0x2
  2863  0022                     	ds	1
  2864  0023                     ??_I2C2_MasterTRBInsert:	
  2865  0023                     ??_putch:	
  2866                           ; 1 bytes @ 0x3
  2867                           
  2868  0023                     putch@txData:	
  2869                           ; 1 bytes @ 0x3
  2870                           
  2871  0023                     DATAEE_WriteByte@GIEBitValue:	
  2872                           ; 1 bytes @ 0x3
  2873                           
  2874  0023                     strncmp@s2:	
  2875                           ; 1 bytes @ 0x3
  2876                           
  2877  0023                     I2C2_MasterReadTRBBuild@address:	
  2878                           ; 1 bytes @ 0x3
  2879                           
  2880  0023                     I2C2_MasterWriteTRBBuild@address:	
  2881                           ; 2 bytes @ 0x3
  2882                           
  2883  0023                     ___wmul@multiplicand:	
  2884                           ; 2 bytes @ 0x3
  2885                           
  2886  0023                     ___lwdiv@dividend:	
  2887                           ; 2 bytes @ 0x3
  2888                           
  2889                           
  2890                           ; 2 bytes @ 0x3
  2891  0023                     	ds	1
  2892  0024                     ??_PROTOCOL_SAV:	
  2893  0024                     ??_PROTOCOL_Write_Device_Address:	
  2894                           ; 1 bytes @ 0x4
  2895                           
  2896  0024                     ??_PROTOCOL_I2C_Set_TLV:	
  2897                           ; 1 bytes @ 0x4
  2898                           
  2899  0024                     I2C2_MasterTRBInsert@count:	
  2900                           ; 1 bytes @ 0x4
  2901                           
  2902  0024                     PROTOCOL_Initialize@start_handler:	
  2903                           ; 1 bytes @ 0x4
  2904                           
  2905  0024                     strncmp@len:	
  2906                           ; 1 bytes @ 0x4
  2907                           
  2908                           
  2909                           ; 2 bytes @ 0x4
  2910  0024                     	ds	1
  2911  0025                     ??_I2C2_MasterWriteTRBBuild:	
  2912  0025                     ??_I2C2_MasterReadTRBBuild:	
  2913                           ; 1 bytes @ 0x5
  2914                           
  2915  0025                     ??___wmul:	
  2916                           ; 1 bytes @ 0x5
  2917                           
  2918  0025                     ??___lwdiv:	
  2919                           ; 1 bytes @ 0x5
  2920                           
  2921  0025                     PROTOCOL_Initialize@stop_handler:	
  2922                           ; 1 bytes @ 0x5
  2923                           
  2924  0025                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  2925                           ; 1 bytes @ 0x5
  2926                           
  2927  0025                     PROTOCOL_I2C_Set_TLV@type:	
  2928                           ; 1 bytes @ 0x5
  2929                           
  2930  0025                     ___wmul@product:	
  2931                           ; 1 bytes @ 0x5
  2932                           
  2933  0025                     ___lmul@multiplicand:	
  2934                           ; 2 bytes @ 0x5
  2935                           
  2936                           
  2937                           ; 4 bytes @ 0x5
  2938  0025                     	ds	1
  2939  0026                     ??_strncmp:	
  2940  0026                     PROTOCOL_Initialize@set_handler:	
  2941                           ; 1 bytes @ 0x6
  2942                           
  2943  0026                     PROTOCOL_I2C_Set_TLV@status:	
  2944                           ; 1 bytes @ 0x6
  2945                           
  2946  0026                     ___lwdiv@counter:	
  2947                           ; 1 bytes @ 0x6
  2948                           
  2949                           
  2950                           ; 1 bytes @ 0x6
  2951  0026                     	ds	1
  2952  0027                     ?_atoi:	
  2953  0027                     I2C2_MasterReadTRBBuild@ptrb:	
  2954                           ; 2 bytes @ 0x7
  2955                           
  2956  0027                     I2C2_MasterWriteTRBBuild@ptrb:	
  2957                           ; 1 bytes @ 0x7
  2958                           
  2959  0027                     PROTOCOL_Initialize@inv_handler:	
  2960                           ; 1 bytes @ 0x7
  2961                           
  2962  0027                     ___lwdiv@quotient:	
  2963                           ; 2 bytes @ 0x7
  2964                           
  2965                           
  2966                           ; 2 bytes @ 0x7
  2967  0027                     	ds	1
  2968  0028                     ?_I2C2_MasterWrite:	
  2969  0028                     ?_I2C2_MasterRead:	
  2970                           ; 1 bytes @ 0x8
  2971                           
  2972  0028                     I2C2_MasterWrite@length:	
  2973                           ; 1 bytes @ 0x8
  2974                           
  2975  0028                     I2C2_MasterRead@length:	
  2976                           ; 1 bytes @ 0x8
  2977                           
  2978                           
  2979                           ; 1 bytes @ 0x8
  2980  0028                     	ds	1
  2981  0029                     ??_atoi:	
  2982  0029                     ??___lmul:	
  2983                           ; 1 bytes @ 0x9
  2984                           
  2985  0029                     ?___lwmod:	
  2986                           ; 1 bytes @ 0x9
  2987                           
  2988  0029                     PROTOCOL_Initialize@scaler:	
  2989                           ; 2 bytes @ 0x9
  2990                           
  2991  0029                     I2C2_MasterWrite@address:	
  2992                           ; 1 bytes @ 0x9
  2993                           
  2994  0029                     I2C2_MasterRead@address:	
  2995                           ; 2 bytes @ 0x9
  2996                           
  2997  0029                     ___lwmod@divisor:	
  2998                           ; 2 bytes @ 0x9
  2999                           
  3000  0029                     ___lmul@product:	
  3001                           ; 2 bytes @ 0x9
  3002                           
  3003                           
  3004                           ; 4 bytes @ 0x9
  3005  0029                     	ds	1
  3006  002A                     ??_PROTOCOL_Initialize:	
  3007                           
  3008                           ; 1 bytes @ 0xA
  3009  002A                     	ds	1
  3010  002B                     I2C2_MasterWrite@pflag:	
  3011  002B                     I2C2_MasterRead@pflag:	
  3012                           ; 1 bytes @ 0xB
  3013                           
  3014  002B                     atoi@sign:	
  3015                           ; 1 bytes @ 0xB
  3016                           
  3017  002B                     ___lwmod@dividend:	
  3018                           ; 1 bytes @ 0xB
  3019                           
  3020                           
  3021                           ; 2 bytes @ 0xB
  3022  002B                     	ds	1
  3023  002C                     ??_I2C2_MasterWrite:	
  3024  002C                     ??_I2C2_MasterRead:	
  3025                           ; 1 bytes @ 0xC
  3026                           
  3027  002C                     atoi@a:	
  3028                           ; 1 bytes @ 0xC
  3029                           
  3030                           
  3031                           ; 2 bytes @ 0xC
  3032  002C                     	ds	1
  3033  002D                     ??___lwmod:	
  3034  002D                     ?___aldiv:	
  3035                           ; 1 bytes @ 0xD
  3036                           
  3037  002D                     ___aldiv@divisor:	
  3038                           ; 4 bytes @ 0xD
  3039                           
  3040                           
  3041                           ; 4 bytes @ 0xD
  3042  002D                     	ds	1
  3043  002E                     I2C2_MasterWrite@pdata:	
  3044  002E                     I2C2_MasterRead@pdata:	
  3045                           ; 1 bytes @ 0xE
  3046                           
  3047  002E                     atoi@s:	
  3048                           ; 1 bytes @ 0xE
  3049                           
  3050  002E                     ___lwmod@counter:	
  3051                           ; 1 bytes @ 0xE
  3052                           
  3053                           
  3054                           ; 1 bytes @ 0xE
  3055  002E                     	ds	1
  3056  002F                     ?_i2c2_write:	
  3057  002F                     ?_i2c2_read_no_reg_addr:	
  3058                           ; 1 bytes @ 0xF
  3059                           
  3060  002F                     ?_printf:	
  3061                           ; 1 bytes @ 0xF
  3062                           
  3063  002F                     printf@f:	
  3064                           ; 2 bytes @ 0xF
  3065                           
  3066  002F                     i2c2_write@dev_addr:	
  3067                           ; 2 bytes @ 0xF
  3068                           
  3069  002F                     i2c2_read_no_reg_addr@dev_addr:	
  3070                           ; 2 bytes @ 0xF
  3071                           
  3072                           
  3073                           ; 2 bytes @ 0xF
  3074  002F                     	ds	2
  3075  0031                     i2c2_write@reg_addr:	
  3076  0031                     i2c2_read_no_reg_addr@pbuf:	
  3077                           ; 1 bytes @ 0x11
  3078                           
  3079  0031                     ___aldiv@dividend:	
  3080                           ; 1 bytes @ 0x11
  3081                           
  3082                           
  3083                           ; 4 bytes @ 0x11
  3084  0031                     	ds	1
  3085  0032                     i2c2_write@data:	
  3086  0032                     i2c2_read_no_reg_addr@len:	
  3087                           ; 1 bytes @ 0x12
  3088                           
  3089                           
  3090                           ; 1 bytes @ 0x12
  3091  0032                     	ds	1
  3092  0033                     ??_i2c2_write:	
  3093  0033                     ??_i2c2_read_no_reg_addr:	
  3094                           ; 1 bytes @ 0x13
  3095                           
  3096  0033                     ??_printf:	
  3097                           ; 1 bytes @ 0x13
  3098                           
  3099                           
  3100                           ; 1 bytes @ 0x13
  3101  0033                     	ds	2
  3102  0035                     ??___aldiv:	
  3103  0035                     i2c2_read_no_reg_addr@timeout:	
  3104                           ; 1 bytes @ 0x15
  3105                           
  3106  0035                     i2c2_write@buf:	
  3107                           ; 1 bytes @ 0x15
  3108                           
  3109                           
  3110                           ; 2 bytes @ 0x15
  3111  0035                     	ds	1
  3112  0036                     i2c2_read_no_reg_addr@read_status:	
  3113  0036                     ___aldiv@counter:	
  3114                           ; 1 bytes @ 0x16
  3115                           
  3116                           
  3117                           ; 1 bytes @ 0x16
  3118  0036                     	ds	1
  3119  0037                     printf@prec:	
  3120  0037                     i2c2_write@write_status:	
  3121                           ; 1 bytes @ 0x17
  3122                           
  3123  0037                     i2c2_read_no_reg_addr@status:	
  3124                           ; 1 bytes @ 0x17
  3125                           
  3126  0037                     ___aldiv@sign:	
  3127                           ; 1 bytes @ 0x17
  3128                           
  3129                           
  3130                           ; 1 bytes @ 0x17
  3131  0037                     	ds	1
  3132  0038                     i2c2_write@status:	
  3133  0038                     printf@cp:	
  3134                           ; 1 bytes @ 0x18
  3135                           
  3136  0038                     ___aldiv@quotient:	
  3137                           ; 2 bytes @ 0x18
  3138                           
  3139                           
  3140                           ; 4 bytes @ 0x18
  3141  0038                     	ds	2
  3142  003A                     printf@ap:	
  3143                           
  3144                           ; 1 bytes @ 0x1A
  3145  003A                     	ds	1
  3146  003B                     printf@val:	
  3147                           
  3148                           ; 2 bytes @ 0x1B
  3149  003B                     	ds	2
  3150  003D                     printf@len:	
  3151                           
  3152                           ; 2 bytes @ 0x1D
  3153  003D                     	ds	2
  3154  003F                     printf@flag:	
  3155                           
  3156                           ; 1 bytes @ 0x1F
  3157  003F                     	ds	1
  3158  0040                     printf@width:	
  3159                           
  3160                           ; 2 bytes @ 0x20
  3161  0040                     	ds	2
  3162  0042                     printf@c:	
  3163                           
  3164                           ; 1 bytes @ 0x22
  3165  0042                     	ds	1
  3166  0043                     ?_PROTOCOL_I2C_Send_int8_t:	
  3167  0043                     PROTOCOL_I2C_Send_int8_t@pbuffer:	
  3168                           ; 1 bytes @ 0x23
  3169                           
  3170                           
  3171                           ; 1 bytes @ 0x23
  3172  0043                     	ds	1
  3173  0044                     ??_PROTOCOL_I2C_Send_int8_t:	
  3174                           
  3175                           ; 1 bytes @ 0x24
  3176  0044                     	ds	2
  3177  0046                     PROTOCOL_I2C_Send_int8_t@length:	
  3178                           
  3179                           ; 1 bytes @ 0x26
  3180  0046                     	ds	1
  3181  0047                     ??_inv_handler:	
  3182                           
  3183                           ; 1 bytes @ 0x27
  3184  0047                     	ds	5
  3185  004C                     inv_handler@status:	
  3186                           
  3187                           ; 1 bytes @ 0x2C
  3188  004C                     	ds	1
  3189  004D                     inv_handler@measure:	
  3190                           
  3191                           ; 6 bytes @ 0x2D
  3192  004D                     	ds	6
  3193  0053                     inv_handler@s_t:	
  3194                           
  3195                           ; 4 bytes @ 0x33
  3196  0053                     	ds	4
  3197  0057                     inv_handler@s_rh:	
  3198                           
  3199                           ; 4 bytes @ 0x37
  3200  0057                     	ds	4
  3201  005B                     inv_handler@data:	
  3202                           
  3203                           ; 2 bytes @ 0x3B
  3204  005B                     	ds	2
  3205  005D                     ??_PROTOCOL_Loop:	
  3206                           
  3207                           ; 1 bytes @ 0x3D
  3208  005D                     	ds	2
  3209  005F                     ??_main:	
  3210                           
  3211                           ; 1 bytes @ 0x3F
  3212  005F                     	ds	1
  3213                           
  3214                           	psect	maintext
  3215  0D5D                     __pmaintext:	
  3216 ;;
  3217 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3218 ;;
  3219 ;; *************** function _main *****************
  3220 ;; Defined at:
  3221 ;;		line 37 in file "main.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;		None
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;		None
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      void 
  3228 ;; Registers used:
  3229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3230 ;; Tracked objects:
  3231 ;;		On entry : B1F/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3238 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3239 ;;Total ram usage:        1 bytes
  3240 ;; Hardware stack levels required when called:   11
  3241 ;; This function calls:
  3242 ;;		_EUSART_Initialize
  3243 ;;		_I2C1_Initialize
  3244 ;;		_I2C2_Initialize
  3245 ;;		_OSCILLATOR_Initialize
  3246 ;;		_PIN_MANAGER_Initialize
  3247 ;;		_PROTOCOL_Initialize
  3248 ;;		_PROTOCOL_Loop
  3249 ;;		_TMR0_Initialize
  3250 ;;		_WDT_Initialize
  3251 ;; This function is called by:
  3252 ;;		Startup code after reset
  3253 ;; This function uses a non-reentrant model
  3254 ;;
  3255                           
  3256                           
  3257                           ;psect for function _main
  3258  0D5D                     _main:	
  3259                           
  3260                           ;main.c: 40: PROTOCOL_Initialize("SHT31_DIS", (0), (0), (0), inv_handler, 125);
  3261                           
  3262                           ;incstack = 0
  3263                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3264  0D5D  302B               	movlw	low (STR_1| (0+32768))
  3265  0D5E  0020               	movlb	0	; select bank0
  3266  0D5F  00A2               	movwf	PROTOCOL_Initialize@device_id
  3267  0D60  3087               	movlw	high (STR_1| (0+32768))
  3268  0D61  00A3               	movwf	PROTOCOL_Initialize@device_id+1
  3269  0D62  01A4               	clrf	PROTOCOL_Initialize@start_handler
  3270  0D63  01A5               	clrf	PROTOCOL_Initialize@stop_handler
  3271  0D64  01A6               	clrf	PROTOCOL_Initialize@set_handler
  3272  0D65  3003               	movlw	low _inv_handler
  3273  0D66  00A7               	movwf	PROTOCOL_Initialize@inv_handler
  3274  0D67  3006               	movlw	high _inv_handler
  3275  0D68  00A8               	movwf	PROTOCOL_Initialize@inv_handler+1
  3276  0D69  307D               	movlw	125
  3277  0D6A  00DF               	movwf	??_main
  3278  0D6B  085F               	movf	??_main,w
  3279  0D6C  00A9               	movwf	PROTOCOL_Initialize@scaler
  3280  0D6D  318E  26BC  318D   	fcall	_PROTOCOL_Initialize
  3281                           
  3282                           ;main.c: 43: PIN_MANAGER_Initialize();
  3283  0D70  318B  2357  318D   	fcall	_PIN_MANAGER_Initialize
  3284                           
  3285                           ;main.c: 44: OSCILLATOR_Initialize();
  3286  0D73  318A  2227  318D   	fcall	_OSCILLATOR_Initialize
  3287                           
  3288                           ;main.c: 45: WDT_Initialize();
  3289  0D76  318A  2223  318D   	fcall	_WDT_Initialize
  3290                           
  3291                           ;main.c: 46: TMR0_Initialize();
  3292  0D79  318A  227E  318D   	fcall	_TMR0_Initialize
  3293                           
  3294                           ;main.c: 49: (INTCONbits.GIE = 1);
  3295  0D7C  178B               	bsf	11,7	;volatile
  3296                           
  3297                           ;main.c: 50: (INTCONbits.PEIE = 1);
  3298  0D7D  170B               	bsf	11,6	;volatile
  3299                           
  3300                           ;main.c: 53: EUSART_Initialize();
  3301  0D7E  318A  22CE  318D   	fcall	_EUSART_Initialize
  3302                           
  3303                           ;main.c: 56: I2C2_Initialize();
  3304  0D81  318A  229D  318D   	fcall	_I2C2_Initialize
  3305                           
  3306                           ;main.c: 59: I2C1_Initialize();
  3307  0D84  318B  23B4  318D   	fcall	_I2C1_Initialize
  3308                           
  3309                           ;main.c: 62: PROTOCOL_Loop();
  3310  0D87  3182  2256         	fcall	_PROTOCOL_Loop
  3311  0D89  3180  2848         	ljmp	start
  3312  0D8B                     __end_of_main:	
  3313                           
  3314                           	psect	text1
  3315  0A23                     __ptext1:	
  3316 ;; *************** function _WDT_Initialize *****************
  3317 ;; Defined at:
  3318 ;;		line 89 in file "mcc_generated_files/mcc.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;		None
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;		None
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  1    wreg      void 
  3325 ;; Registers used:
  3326 ;;		wreg
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3336 ;;Total ram usage:        0 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    5
  3339 ;; This function calls:
  3340 ;;		Nothing
  3341 ;; This function is called by:
  3342 ;;		_main
  3343 ;;		_SYSTEM_Initialize
  3344 ;; This function uses a non-reentrant model
  3345 ;;
  3346                           
  3347                           
  3348                           ;psect for function _WDT_Initialize
  3349  0A23                     _WDT_Initialize:	
  3350                           
  3351                           ;mcc.c: 92: WDTCON = 0x16;
  3352                           
  3353                           ;incstack = 0
  3354                           ; Regs used in _WDT_Initialize: [wreg]
  3355  0A23  3016               	movlw	22
  3356  0A24  0021               	movlb	1	; select bank1
  3357  0A25  0097               	movwf	23	;volatile
  3358  0A26  0008               	return
  3359  0A27                     __end_of_WDT_Initialize:	
  3360                           
  3361                           	psect	text2
  3362  0A7E                     __ptext2:	
  3363 ;; *************** function _TMR0_Initialize *****************
  3364 ;; Defined at:
  3365 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3366 ;; Parameters:    Size  Location     Type
  3367 ;;		None
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;		None
  3370 ;; Return value:  Size  Location     Type
  3371 ;;                  1    wreg      void 
  3372 ;; Registers used:
  3373 ;;		wreg, status,2
  3374 ;; Tracked objects:
  3375 ;;		On entry : 0/0
  3376 ;;		On exit  : 0/0
  3377 ;;		Unchanged: 0/0
  3378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3381 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3382 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3383 ;;Total ram usage:        1 bytes
  3384 ;; Hardware stack levels used:    1
  3385 ;; Hardware stack levels required when called:    5
  3386 ;; This function calls:
  3387 ;;		Nothing
  3388 ;; This function is called by:
  3389 ;;		_main
  3390 ;;		_SYSTEM_Initialize
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           
  3395                           ;psect for function _TMR0_Initialize
  3396  0A7E                     _TMR0_Initialize:	
  3397                           
  3398                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD4 & 0x3F;
  3399                           
  3400                           ;incstack = 0
  3401                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3402  0A7E  0021               	movlb	1	; select bank1
  3403  0A7F  0815               	movf	21,w	;volatile
  3404  0A80  39C0               	andlw	192
  3405  0A81  3814               	iorlw	20
  3406  0A82  0095               	movwf	21	;volatile
  3407                           
  3408                           ;tmr0.c: 70: TMR0 = 0x06;
  3409  0A83  3006               	movlw	6
  3410  0A84  0020               	movlb	0	; select bank0
  3411  0A85  0095               	movwf	21	;volatile
  3412                           
  3413                           ;tmr0.c: 73: timer0ReloadVal= 6;
  3414  0A86  3006               	movlw	6
  3415  0A87  00A1               	movwf	??_TMR0_Initialize
  3416  0A88  0821               	movf	??_TMR0_Initialize,w
  3417  0A89  0021               	movlb	1	; select bank1
  3418  0A8A  00C4               	movwf	_timer0ReloadVal^(0+128)	;volatile
  3419                           
  3420                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3421  0A8B  110B               	bcf	11,2	;volatile
  3422  0A8C  0008               	return
  3423  0A8D                     __end_of_TMR0_Initialize:	
  3424                           
  3425                           	psect	text3
  3426  0256                     __ptext3:	
  3427 ;; *************** function _PROTOCOL_Loop *****************
  3428 ;; Defined at:
  3429 ;;		line 131 in file "protocol.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;		None
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;  device_addre    1    1[BANK2 ] unsigned char 
  3434 ;;  c               1    0[BANK2 ] unsigned char 
  3435 ;; Return value:  Size  Location     Type
  3436 ;;                  1    wreg      void 
  3437 ;; Registers used:
  3438 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3439 ;; Tracked objects:
  3440 ;;		On entry : 0/0
  3441 ;;		On exit  : 0/0
  3442 ;;		Unchanged: 0/0
  3443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3445 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  3446 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3447 ;;      Totals:         0       2       0       2       0       0       0       0       0       0       0       0       
      +0       0
  3448 ;;Total ram usage:        4 bytes
  3449 ;; Hardware stack levels used:    1
  3450 ;; Hardware stack levels required when called:   10
  3451 ;; This function calls:
  3452 ;;		Absolute function
  3453 ;;		_EUSART_Read
  3454 ;;		_PROTOCOL_EXT
  3455 ;;		_PROTOCOL_Read_Device_Address
  3456 ;;		_PROTOCOL_SAV
  3457 ;;		_PROTOCOL_SET
  3458 ;;		_PROTOCOL_STA
  3459 ;;		_PROTOCOL_STP
  3460 ;;		_PROTOCOL_Write_Device_Address
  3461 ;;		_TMR0_HasOverflowOccured
  3462 ;;		_atoi
  3463 ;;		_inv_handler
  3464 ;;		_printf
  3465 ;;		_strncmp
  3466 ;; This function is called by:
  3467 ;;		_main
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471                           
  3472                           ;psect for function _PROTOCOL_Loop
  3473  0256                     _PROTOCOL_Loop:	
  3474  0256                     l741:	
  3475                           ;incstack = 0
  3476                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3477                           ;protocol.c: 132: uint8_t device_address;
  3478                           ;protocol.c: 133: uint8_t c;
  3479                           ;protocol.c: 134: while (1) {
  3480                           
  3481                           
  3482                           ;protocol.c: 135: tmr_overflow = TMR0_HasOverflowOccured();
  3483  0256  318A  221F  3182   	fcall	_TMR0_HasOverflowOccured
  3484  0259  0020               	movlb	0	; select bank0
  3485  025A  00DD               	movwf	??_PROTOCOL_Loop
  3486  025B  085D               	movf	??_PROTOCOL_Loop,w
  3487  025C  0021               	movlb	1	; select bank1
  3488  025D  00BC               	movwf	_tmr_overflow^(0+128)
  3489                           
  3490                           ;protocol.c: 136: if (tmr_overflow) {
  3491  025E  083C               	movf	_tmr_overflow^(0+128),w
  3492  025F  1903               	btfsc	3,2
  3493  0260  2A83               	goto	l4547
  3494                           
  3495                           ;protocol.c: 137: TMR0IF = 0;
  3496  0261  110B               	bcf	11,2	;volatile
  3497                           
  3498                           ;protocol.c: 138: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3499  0262  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3500  0263  0433               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3501  0264  1903               	btfsc	3,2
  3502  0265  2A83               	goto	l4547
  3503  0266  3001               	movlw	1
  3504  0267  0020               	movlb	0	; select bank0
  3505  0268  00DD               	movwf	??_PROTOCOL_Loop
  3506  0269  085D               	movf	??_PROTOCOL_Loop,w
  3507  026A  0021               	movlb	1	; select bank1
  3508  026B  07BD               	addwf	_tmr_cnt^(0+128),f
  3509  026C  0020               	movlb	0	; select bank0
  3510  026D  0866               	movf	_value,w
  3511  026E  0021               	movlb	1	; select bank1
  3512  026F  023D               	subwf	_tmr_cnt^(0+128),w
  3513  0270  1C03               	skipc
  3514  0271  2A83               	goto	l4547
  3515                           
  3516                           ;protocol.c: 139: tmr_cnt = 0;
  3517  0272  01BD               	clrf	_tmr_cnt^(0+128)
  3518                           
  3519                           ;protocol.c: 140: if (++sec_cnt >= tmr_scaler) {
  3520  0273  3001               	movlw	1
  3521  0274  0020               	movlb	0	; select bank0
  3522  0275  00DD               	movwf	??_PROTOCOL_Loop
  3523  0276  085D               	movf	??_PROTOCOL_Loop,w
  3524  0277  0021               	movlb	1	; select bank1
  3525  0278  07BE               	addwf	_sec_cnt^(0+128),f
  3526  0279  086D               	movf	_tmr_scaler^(0+128),w
  3527  027A  023E               	subwf	_sec_cnt^(0+128),w
  3528  027B  1C03               	skipc
  3529  027C  2A83               	goto	l4547
  3530                           
  3531                           ;protocol.c: 141: if (running) invoked = 1;
  3532  027D  0840               	movf	_running^(0+128),w
  3533  027E  1903               	btfsc	3,2
  3534  027F  2A82               	goto	l4545
  3535  0280  01BF               	clrf	_invoked^(0+128)
  3536  0281  0ABF               	incf	_invoked^(0+128),f
  3537  0282                     l4545:	
  3538                           
  3539                           ;protocol.c: 142: sec_cnt = 0;
  3540  0282  01BE               	clrf	_sec_cnt^(0+128)
  3541  0283                     l4547:	
  3542                           
  3543                           ;protocol.c: 143: }
  3544                           ;protocol.c: 144: }
  3545                           ;protocol.c: 145: }
  3546                           ;protocol.c: 146: if (invoked && PROTOCOL_Inv_Handler) {
  3547  0283  083F               	movf	_invoked^(0+128),w
  3548  0284  1903               	btfsc	3,2
  3549  0285  2A91               	goto	l4557
  3550  0286  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3551  0287  0433               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3552  0288  1903               	btfsc	3,2
  3553  0289  2A91               	goto	l4557
  3554                           
  3555                           ;protocol.c: 147: PROTOCOL_Inv_Handler();
  3556  028A  0833               	movf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3557  028B  008A               	movwf	10
  3558  028C  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3559  028D  000A               	callw
  3560  028E  3182               	pagesel	$
  3561                           
  3562                           ;protocol.c: 148: invoked = 0;
  3563  028F  0021               	movlb	1	; select bank1
  3564  0290  01BF               	clrf	_invoked^(0+128)
  3565  0291                     l4557:	
  3566                           
  3567                           ;protocol.c: 151: if ((eusartRxCount)) {
  3568  0291  0020               	movlb	0	; select bank0
  3569  0292  0867               	movf	_eusartRxCount,w	;volatile
  3570  0293  1903               	btfsc	3,2
  3571  0294  2A56               	goto	l741
  3572                           
  3573                           ;protocol.c: 152: c = EUSART_Read();
  3574  0295  318B  2375  3182   	fcall	_EUSART_Read
  3575  0298  0020               	movlb	0	; select bank0
  3576  0299  00DD               	movwf	??_PROTOCOL_Loop
  3577  029A  085D               	movf	??_PROTOCOL_Loop,w
  3578  029B  0022               	movlb	2	; select bank2
  3579  029C  00E2               	movwf	PROTOCOL_Loop@c^(0+256)
  3580                           
  3581                           ;protocol.c: 153: buf[cnt++] = c;
  3582  029D  0862               	movf	PROTOCOL_Loop@c^(0+256),w
  3583  029E  0020               	movlb	0	; select bank0
  3584  029F  00DD               	movwf	??_PROTOCOL_Loop
  3585  02A0  0021               	movlb	1	; select bank1
  3586  02A1  0842               	movf	_cnt^(0+128),w
  3587  02A2  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3588  02A3  0086               	movwf	6
  3589  02A4  3001               	movlw	1	; select bank2/3
  3590  02A5  0087               	movwf	7
  3591  02A6  0020               	movlb	0	; select bank0
  3592  02A7  085D               	movf	??_PROTOCOL_Loop,w
  3593  02A8  0081               	movwf	1
  3594  02A9  3001               	movlw	1
  3595  02AA  00DD               	movwf	??_PROTOCOL_Loop
  3596  02AB  085D               	movf	??_PROTOCOL_Loop,w
  3597  02AC  0021               	movlb	1	; select bank1
  3598  02AD  07C2               	addwf	_cnt^(0+128),f
  3599                           
  3600                           ;protocol.c: 154: if (c == '\n') {
  3601  02AE  300A               	movlw	10
  3602  02AF  0022               	movlb	2	; select bank2
  3603  02B0  0662               	xorwf	PROTOCOL_Loop@c^(0+256),w
  3604  02B1  1D03               	btfss	3,2
  3605  02B2  2A56               	goto	l741
  3606                           
  3607                           ;protocol.c: 155: buf[--cnt] = '\0';
  3608  02B3  3001               	movlw	1
  3609  02B4  0021               	movlb	1	; select bank1
  3610  02B5  02C2               	subwf	_cnt^(0+128),f
  3611  02B6  0842               	movf	_cnt^(0+128),w
  3612  02B7  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3613  02B8  0086               	movwf	6
  3614  02B9  3001               	movlw	1	; select bank2/3
  3615  02BA  0087               	movwf	7
  3616  02BB  0181               	clrf	1
  3617                           
  3618                           ;protocol.c: 156: cnt = 0;
  3619  02BC  01C2               	clrf	_cnt^(0+128)
  3620                           
  3621                           ;protocol.c: 157: printf("#%s\n", buf);
  3622  02BD  305B               	movlw	low (STR_3| (0+32768))
  3623  02BE  0020               	movlb	0	; select bank0
  3624  02BF  00AF               	movwf	printf@f
  3625  02C0  3087               	movlw	high (STR_3| (0+32768))
  3626  02C1  00B0               	movwf	printf@f+1
  3627  02C2  3020               	movlw	low _buf
  3628  02C3  00B1               	movwf	low ((?_printf| 0+2))
  3629  02C4  3001               	movlw	high _buf
  3630  02C5  00B2               	movwf	(low ((?_printf| 0+2))+1)
  3631  02C6  3180  2081  3182   	fcall	_printf
  3632                           
  3633                           ;protocol.c: 158: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  3634  02C9  0021               	movlb	1	; select bank1
  3635  02CA  036E               	decf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  3636  02CB  1903               	btfsc	3,2
  3637  02CC  2AD2               	goto	l4577
  3638                           
  3639                           ;protocol.c: 159: PROTOCOL_EXT(buf);
  3640  02CD  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3641  02CE  3180  2002  3182   	fcall	_PROTOCOL_EXT
  3642                           
  3643                           ;protocol.c: 160: } else if (!strncmp(("WHO"), (buf), 3)) {
  3644  02D1  2A56               	goto	l741
  3645  02D2                     l4577:	
  3646  02D2  307C               	movlw	low (STR_4| (0+32768))
  3647  02D3  0020               	movlb	0	; select bank0
  3648  02D4  00A1               	movwf	strncmp@s1
  3649  02D5  3087               	movlw	high (STR_4| (0+32768))
  3650  02D6  00A2               	movwf	strncmp@s1+1
  3651  02D7  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3652  02D8  00DD               	movwf	??_PROTOCOL_Loop
  3653  02D9  085D               	movf	??_PROTOCOL_Loop,w
  3654  02DA  00A3               	movwf	strncmp@s2
  3655  02DB  3003               	movlw	3
  3656  02DC  00A4               	movwf	strncmp@len
  3657  02DD  3000               	movlw	0
  3658  02DE  00A5               	movwf	strncmp@len+1
  3659  02DF  318D  25F0  3182   	fcall	_strncmp
  3660  02E2  0020               	movlb	0	; select bank0
  3661  02E3  0821               	movf	?_strncmp,w
  3662  02E4  0422               	iorwf	?_strncmp+1,w
  3663  02E5  1D03               	btfss	3,2
  3664  02E6  2AF7               	goto	l4581
  3665                           
  3666                           ;protocol.c: 161: printf("$:WHO:%s\n", device_id_);
  3667  02E7  3003               	movlw	low (STR_5| (0+32768))
  3668  02E8  00AF               	movwf	printf@f
  3669  02E9  3087               	movlw	high (STR_5| (0+32768))
  3670  02EA  00B0               	movwf	printf@f+1
  3671  02EB  0022               	movlb	2	; select bank2
  3672  02EC  0861               	movf	(_device_id_+1)^(0+256),w
  3673  02ED  0020               	movlb	0	; select bank0
  3674  02EE  00B2               	movwf	(low ((?_printf| 0+2))+1)
  3675  02EF  0022               	movlb	2	; select bank2
  3676  02F0  0860               	movf	_device_id_^(0+256),w
  3677  02F1  0020               	movlb	0	; select bank0
  3678  02F2  00B1               	movwf	low ((?_printf| 0+2))
  3679  02F3  3180  2081  3182   	fcall	_printf
  3680                           
  3681                           ;protocol.c: 162: } else if (!strncmp(("SAV"), (buf), 3)) {
  3682  02F6  2A56               	goto	l741
  3683  02F7                     l4581:	
  3684  02F7  308C               	movlw	low (STR_6| (0+32768))
  3685  02F8  0020               	movlb	0	; select bank0
  3686  02F9  00A1               	movwf	strncmp@s1
  3687  02FA  3087               	movlw	high (STR_6| (0+32768))
  3688  02FB  00A2               	movwf	strncmp@s1+1
  3689  02FC  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3690  02FD  00DD               	movwf	??_PROTOCOL_Loop
  3691  02FE  085D               	movf	??_PROTOCOL_Loop,w
  3692  02FF  00A3               	movwf	strncmp@s2
  3693  0300  3003               	movlw	3
  3694  0301  00A4               	movwf	strncmp@len
  3695  0302  3000               	movlw	0
  3696  0303  00A5               	movwf	strncmp@len+1
  3697  0304  318D  25F0  3182   	fcall	_strncmp
  3698  0307  0020               	movlb	0	; select bank0
  3699  0308  0821               	movf	?_strncmp,w
  3700  0309  0422               	iorwf	?_strncmp+1,w
  3701  030A  1D03               	btfss	3,2
  3702  030B  2B10               	goto	l4585
  3703                           
  3704                           ;protocol.c: 163: PROTOCOL_SAV();
  3705  030C  318A  224F  3182   	fcall	_PROTOCOL_SAV
  3706                           
  3707                           ;protocol.c: 164: } else if (!strncmp(("STA"), (buf), 3)) {
  3708  030F  2A56               	goto	l741
  3709  0310                     l4585:	
  3710  0310  3074               	movlw	low (STR_7| (0+32768))
  3711  0311  0020               	movlb	0	; select bank0
  3712  0312  00A1               	movwf	strncmp@s1
  3713  0313  3087               	movlw	high (STR_7| (0+32768))
  3714  0314  00A2               	movwf	strncmp@s1+1
  3715  0315  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3716  0316  00DD               	movwf	??_PROTOCOL_Loop
  3717  0317  085D               	movf	??_PROTOCOL_Loop,w
  3718  0318  00A3               	movwf	strncmp@s2
  3719  0319  3003               	movlw	3
  3720  031A  00A4               	movwf	strncmp@len
  3721  031B  3000               	movlw	0
  3722  031C  00A5               	movwf	strncmp@len+1
  3723  031D  318D  25F0  3182   	fcall	_strncmp
  3724  0320  0020               	movlb	0	; select bank0
  3725  0321  0821               	movf	?_strncmp,w
  3726  0322  0422               	iorwf	?_strncmp+1,w
  3727  0323  1D03               	btfss	3,2
  3728  0324  2B29               	goto	l4589
  3729                           
  3730                           ;protocol.c: 165: PROTOCOL_STA();
  3731  0325  318A  221B  3182   	fcall	_PROTOCOL_STA
  3732                           
  3733                           ;protocol.c: 166: } else if (!strncmp(("STP"), (buf), 3)) {
  3734  0328  2A56               	goto	l741
  3735  0329                     l4589:	
  3736  0329  3080               	movlw	low (STR_8| (0+32768))
  3737  032A  0020               	movlb	0	; select bank0
  3738  032B  00A1               	movwf	strncmp@s1
  3739  032C  3087               	movlw	high (STR_8| (0+32768))
  3740  032D  00A2               	movwf	strncmp@s1+1
  3741  032E  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3742  032F  00DD               	movwf	??_PROTOCOL_Loop
  3743  0330  085D               	movf	??_PROTOCOL_Loop,w
  3744  0331  00A3               	movwf	strncmp@s2
  3745  0332  3003               	movlw	3
  3746  0333  00A4               	movwf	strncmp@len
  3747  0334  3000               	movlw	0
  3748  0335  00A5               	movwf	strncmp@len+1
  3749  0336  318D  25F0  3182   	fcall	_strncmp
  3750  0339  0020               	movlb	0	; select bank0
  3751  033A  0821               	movf	?_strncmp,w
  3752  033B  0422               	iorwf	?_strncmp+1,w
  3753  033C  1D03               	btfss	3,2
  3754  033D  2B4E               	goto	l4595
  3755                           
  3756                           ;protocol.c: 167: PROTOCOL_STP();
  3757  033E  318A  2209  3182   	fcall	_PROTOCOL_STP
  3758                           
  3759                           ;protocol.c: 168: printf("*:STP:%s\n", "ACK");
  3760  0341  300D               	movlw	low (STR_9| (0+32768))
  3761  0342  0020               	movlb	0	; select bank0
  3762  0343  00AF               	movwf	printf@f
  3763  0344  3087               	movlw	high (STR_9| (0+32768))
  3764  0345  00B0               	movwf	printf@f+1
  3765  0346  3078               	movlw	low (STR_10| (0+32768))
  3766  0347  00B1               	movwf	low ((?_printf| 0+2))
  3767  0348  3087               	movlw	high (STR_10| (0+32768))
  3768  0349  00B2               	movwf	(low ((?_printf| 0+2))+1)
  3769  034A  3180  2081  3182   	fcall	_printf
  3770                           
  3771                           ;protocol.c: 169: } else if (!strncmp(("SET"), (buf), 3)) {
  3772  034D  2A56               	goto	l741
  3773  034E                     l4595:	
  3774  034E  3088               	movlw	low (STR_11| (0+32768))
  3775  034F  0020               	movlb	0	; select bank0
  3776  0350  00A1               	movwf	strncmp@s1
  3777  0351  3087               	movlw	high (STR_11| (0+32768))
  3778  0352  00A2               	movwf	strncmp@s1+1
  3779  0353  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3780  0354  00DD               	movwf	??_PROTOCOL_Loop
  3781  0355  085D               	movf	??_PROTOCOL_Loop,w
  3782  0356  00A3               	movwf	strncmp@s2
  3783  0357  3003               	movlw	3
  3784  0358  00A4               	movwf	strncmp@len
  3785  0359  3000               	movlw	0
  3786  035A  00A5               	movwf	strncmp@len+1
  3787  035B  318D  25F0  3182   	fcall	_strncmp
  3788  035E  0020               	movlb	0	; select bank0
  3789  035F  0821               	movf	?_strncmp,w
  3790  0360  0422               	iorwf	?_strncmp+1,w
  3791  0361  1D03               	btfss	3,2
  3792  0362  2B6D               	goto	l4599
  3793                           
  3794                           ;protocol.c: 170: PROTOCOL_SET(atoi(&buf[4]));
  3795  0363  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3796  0364  318F  270D  3182   	fcall	_atoi
  3797  0367  0020               	movlb	0	; select bank0
  3798  0368  0827               	movf	?_atoi,w
  3799  0369  318A  223F  3182   	fcall	_PROTOCOL_SET
  3800                           
  3801                           ;protocol.c: 171: } else if (!strncmp(("GET"), (buf), 3)) {
  3802  036C  2A56               	goto	l741
  3803  036D                     l4599:	
  3804  036D  3084               	movlw	low (STR_12| (0+32768))
  3805  036E  0020               	movlb	0	; select bank0
  3806  036F  00A1               	movwf	strncmp@s1
  3807  0370  3087               	movlw	high (STR_12| (0+32768))
  3808  0371  00A2               	movwf	strncmp@s1+1
  3809  0372  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3810  0373  00DD               	movwf	??_PROTOCOL_Loop
  3811  0374  085D               	movf	??_PROTOCOL_Loop,w
  3812  0375  00A3               	movwf	strncmp@s2
  3813  0376  3003               	movlw	3
  3814  0377  00A4               	movwf	strncmp@len
  3815  0378  3000               	movlw	0
  3816  0379  00A5               	movwf	strncmp@len+1
  3817  037A  318D  25F0  3182   	fcall	_strncmp
  3818  037D  0020               	movlb	0	; select bank0
  3819  037E  0821               	movf	?_strncmp,w
  3820  037F  0422               	iorwf	?_strncmp+1,w
  3821  0380  1D03               	btfss	3,2
  3822  0381  2B91               	goto	l4603
  3823                           
  3824                           ;protocol.c: 172: printf("$:GET:%d\n", value);
  3825  0382  30EF               	movlw	low (STR_13| (0+32768))
  3826  0383  00AF               	movwf	printf@f
  3827  0384  3086               	movlw	high (STR_13| (0+32768))
  3828  0385  00B0               	movwf	printf@f+1
  3829  0386  0866               	movf	_value,w
  3830  0387  00DD               	movwf	??_PROTOCOL_Loop
  3831  0388  01DE               	clrf	??_PROTOCOL_Loop+1
  3832  0389  085D               	movf	??_PROTOCOL_Loop,w
  3833  038A  00B1               	movwf	?_printf+2
  3834  038B  085E               	movf	??_PROTOCOL_Loop+1,w
  3835  038C  00B2               	movwf	?_printf+3
  3836  038D  3180  2081  3182   	fcall	_printf
  3837                           
  3838                           ;protocol.c: 173: } else if (!strncmp(("WDA"), (buf), 3)) {
  3839  0390  2A56               	goto	l741
  3840  0391                     l4603:	
  3841  0391  3070               	movlw	low (STR_14| (0+32768))
  3842  0392  0020               	movlb	0	; select bank0
  3843  0393  00A1               	movwf	strncmp@s1
  3844  0394  3087               	movlw	high (STR_14| (0+32768))
  3845  0395  00A2               	movwf	strncmp@s1+1
  3846  0396  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3847  0397  00DD               	movwf	??_PROTOCOL_Loop
  3848  0398  085D               	movf	??_PROTOCOL_Loop,w
  3849  0399  00A3               	movwf	strncmp@s2
  3850  039A  3003               	movlw	3
  3851  039B  00A4               	movwf	strncmp@len
  3852  039C  3000               	movlw	0
  3853  039D  00A5               	movwf	strncmp@len+1
  3854  039E  318D  25F0  3182   	fcall	_strncmp
  3855  03A1  0020               	movlb	0	; select bank0
  3856  03A2  0821               	movf	?_strncmp,w
  3857  03A3  0422               	iorwf	?_strncmp+1,w
  3858  03A4  1D03               	btfss	3,2
  3859  03A5  2BB5               	goto	l4609
  3860                           
  3861                           ;protocol.c: 174: device_address = atoi(&buf[4]);
  3862  03A6  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3863  03A7  318F  270D  3182   	fcall	_atoi
  3864  03AA  0020               	movlb	0	; select bank0
  3865  03AB  0827               	movf	?_atoi,w
  3866  03AC  00DD               	movwf	??_PROTOCOL_Loop
  3867  03AD  085D               	movf	??_PROTOCOL_Loop,w
  3868  03AE  0022               	movlb	2	; select bank2
  3869  03AF  00E3               	movwf	PROTOCOL_Loop@device_address^(0+256)
  3870                           
  3871                           ;protocol.c: 175: PROTOCOL_Write_Device_Address(device_address);
  3872  03B0  0863               	movf	PROTOCOL_Loop@device_address^(0+256),w
  3873  03B1  318A  228D  3182   	fcall	_PROTOCOL_Write_Device_Address
  3874                           
  3875                           ;protocol.c: 176: } else if (!strncmp(("RDA"), (buf), 3)) {
  3876  03B4  2A56               	goto	l741
  3877  03B5                     l4609:	
  3878  03B5  306C               	movlw	low (STR_15| (0+32768))
  3879  03B6  0020               	movlb	0	; select bank0
  3880  03B7  00A1               	movwf	strncmp@s1
  3881  03B8  3087               	movlw	high (STR_15| (0+32768))
  3882  03B9  00A2               	movwf	strncmp@s1+1
  3883  03BA  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3884  03BB  00DD               	movwf	??_PROTOCOL_Loop
  3885  03BC  085D               	movf	??_PROTOCOL_Loop,w
  3886  03BD  00A3               	movwf	strncmp@s2
  3887  03BE  3003               	movlw	3
  3888  03BF  00A4               	movwf	strncmp@len
  3889  03C0  3000               	movlw	0
  3890  03C1  00A5               	movwf	strncmp@len+1
  3891  03C2  318D  25F0  3182   	fcall	_strncmp
  3892  03C5  0020               	movlb	0	; select bank0
  3893  03C6  0821               	movf	?_strncmp,w
  3894  03C7  0422               	iorwf	?_strncmp+1,w
  3895  03C8  1D03               	btfss	3,2
  3896  03C9  2BE4               	goto	l4615
  3897                           
  3898                           ;protocol.c: 177: device_address = PROTOCOL_Read_Device_Address();
  3899  03CA  318A  2206  3182   	fcall	_PROTOCOL_Read_Device_Address
  3900  03CD  0020               	movlb	0	; select bank0
  3901  03CE  00DD               	movwf	??_PROTOCOL_Loop
  3902  03CF  085D               	movf	??_PROTOCOL_Loop,w
  3903  03D0  0022               	movlb	2	; select bank2
  3904  03D1  00E3               	movwf	PROTOCOL_Loop@device_address^(0+256)
  3905                           
  3906                           ;protocol.c: 178: printf("$:RDA:%d\n", device_address);
  3907  03D2  30E5               	movlw	low (STR_16| (0+32768))
  3908  03D3  0020               	movlb	0	; select bank0
  3909  03D4  00AF               	movwf	printf@f
  3910  03D5  3086               	movlw	high (STR_16| (0+32768))
  3911  03D6  00B0               	movwf	printf@f+1
  3912  03D7  0022               	movlb	2	; select bank2
  3913  03D8  0863               	movf	PROTOCOL_Loop@device_address^(0+256),w
  3914  03D9  0020               	movlb	0	; select bank0
  3915  03DA  00DD               	movwf	??_PROTOCOL_Loop
  3916  03DB  01DE               	clrf	??_PROTOCOL_Loop+1
  3917  03DC  085D               	movf	??_PROTOCOL_Loop,w
  3918  03DD  00B1               	movwf	?_printf+2
  3919  03DE  085E               	movf	??_PROTOCOL_Loop+1,w
  3920  03DF  00B2               	movwf	?_printf+3
  3921  03E0  3180  2081  3182   	fcall	_printf
  3922                           
  3923                           ;protocol.c: 179: } else {
  3924  03E3  2A56               	goto	l741
  3925  03E4                     l4615:	
  3926                           
  3927                           ;protocol.c: 180: PROTOCOL_EXT(buf);
  3928  03E4  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3929  03E5  3180  2002  3182   	fcall	_PROTOCOL_EXT
  3930  03E8  2A56               	goto	l741
  3931  03E9                     __end_of_PROTOCOL_Loop:	
  3932                           
  3933                           	psect	text4
  3934  0DF0                     __ptext4:	
  3935 ;; *************** function _strncmp *****************
  3936 ;; Defined at:
  3937 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;  s1              2    1[BANK0 ] PTR const unsigned char 
  3940 ;;		 -> STR_15(4), STR_14(4), STR_12(4), STR_11(4), 
  3941 ;;		 -> STR_8(4), STR_7(4), STR_6(4), STR_4(4), 
  3942 ;;  s2              1    3[BANK0 ] PTR const unsigned char 
  3943 ;;		 -> buf(48), 
  3944 ;;  len             2    4[BANK0 ] unsigned int 
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;		None
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  2    1[BANK0 ] int 
  3949 ;; Registers used:
  3950 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3956 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3958 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3959 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3960 ;;Total ram usage:        7 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    5
  3963 ;; This function calls:
  3964 ;;		Nothing
  3965 ;; This function is called by:
  3966 ;;		_PROTOCOL_Loop
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970                           
  3971                           ;psect for function _strncmp
  3972  0DF0                     _strncmp:	
  3973  0DF0                     l4475:	
  3974                           ;incstack = 0
  3975                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  3976                           
  3977  0DF0  3001               	movlw	1
  3978  0DF1  0020               	movlb	0	; select bank0
  3979  0DF2  02A4               	subwf	strncmp@len,f
  3980  0DF3  3000               	movlw	0
  3981  0DF4  3BA5               	subwfb	strncmp@len+1,f
  3982  0DF5  0A24               	incf	strncmp@len,w
  3983  0DF6  1903               	btfsc	3,2
  3984  0DF7  0A25               	incf	strncmp@len+1,w
  3985  0DF8  1903               	btfsc	3,2
  3986  0DF9  2E2F               	goto	l4477
  3987  0DFA  0020               	movlb	0	; select bank0
  3988  0DFB  0821               	movf	strncmp@s1,w
  3989  0DFC  0084               	movwf	4
  3990  0DFD  0822               	movf	strncmp@s1+1,w
  3991  0DFE  0085               	movwf	5
  3992  0DFF  0012               	moviw fsr0++
  3993  0E00  1903               	btfsc	3,2
  3994  0E01  2E0E               	goto	l4467
  3995  0E02  0823               	movf	strncmp@s2,w
  3996  0E03  0086               	movwf	6
  3997  0E04  3001               	movlw	1	; select bank2/3
  3998  0E05  0087               	movwf	7
  3999  0E06  0821               	movf	strncmp@s1,w
  4000  0E07  0084               	movwf	4
  4001  0E08  0822               	movf	strncmp@s1+1,w
  4002  0E09  0085               	movwf	5
  4003  0E0A  0800               	movf	0,w	;code access
  4004  0E0B  0601               	xorwf	1,w
  4005  0E0C  1903               	skipnz
  4006  0E0D  2E26               	goto	l4471
  4007  0E0E                     l4467:	
  4008  0E0E  0823               	movf	strncmp@s2,w
  4009  0E0F  0086               	movwf	6
  4010  0E10  3001               	movlw	1	; select bank2/3
  4011  0E11  0087               	movwf	7
  4012  0E12  0801               	movf	1,w
  4013  0E13  00A6               	movwf	??_strncmp
  4014  0E14  01A7               	clrf	??_strncmp+1
  4015  0E15  09A6               	comf	??_strncmp,f
  4016  0E16  09A7               	comf	??_strncmp+1,f
  4017  0E17  0AA6               	incf	??_strncmp,f
  4018  0E18  1903               	skipnz
  4019  0E19  0AA7               	incf	??_strncmp+1,f
  4020  0E1A  0821               	movf	strncmp@s1,w
  4021  0E1B  0084               	movwf	4
  4022  0E1C  0822               	movf	strncmp@s1+1,w
  4023  0E1D  0085               	movwf	5
  4024  0E1E  0800               	movf	0,w	;code access
  4025  0E1F  0726               	addwf	??_strncmp,w
  4026  0E20  00A1               	movwf	?_strncmp
  4027  0E21  0827               	movf	??_strncmp+1,w
  4028  0E22  1803               	skipnc
  4029  0E23  0A27               	incf	??_strncmp+1,w
  4030  0E24  00A2               	movwf	?_strncmp+1
  4031  0E25  0008               	return
  4032  0E26                     l4471:	
  4033  0E26  3001               	movlw	1
  4034  0E27  07A1               	addwf	strncmp@s1,f
  4035  0E28  3000               	movlw	0
  4036  0E29  3DA2               	addwfc	strncmp@s1+1,f
  4037  0E2A  3001               	movlw	1
  4038  0E2B  00A6               	movwf	??_strncmp
  4039  0E2C  0826               	movf	??_strncmp,w
  4040  0E2D  07A3               	addwf	strncmp@s2,f
  4041  0E2E  2DF0               	goto	l4475
  4042  0E2F                     l4477:	
  4043  0E2F  01A1               	clrf	?_strncmp
  4044  0E30  01A2               	clrf	?_strncmp+1
  4045  0E31  0008               	return
  4046  0E32                     __end_of_strncmp:	
  4047                           
  4048                           	psect	text5
  4049  0603                     __ptext5:	
  4050 ;; *************** function _inv_handler *****************
  4051 ;; Defined at:
  4052 ;;		line 15 in file "main.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;		None
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;  measure         6   45[BANK0 ] unsigned char [6]
  4057 ;;  s_rh            4   55[BANK0 ] long 
  4058 ;;  s_t             4   51[BANK0 ] long 
  4059 ;;  data            2   59[BANK0 ] char [2]
  4060 ;;  status          1   44[BANK0 ] unsigned char 
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  1    wreg      void 
  4063 ;; Registers used:
  4064 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4071 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4072 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4073 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4074 ;;Total ram usage:       22 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    9
  4077 ;; This function calls:
  4078 ;;		_PROTOCOL_I2C_Send_int8_t
  4079 ;;		___aldiv
  4080 ;;		___lmul
  4081 ;;		_i2c2_read_no_reg_addr
  4082 ;;		_i2c2_write
  4083 ;; This function is called by:
  4084 ;;		_main
  4085 ;;		_PROTOCOL_Loop
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           
  4090                           ;psect for function _inv_handler
  4091  0603                     _inv_handler:	
  4092                           
  4093                           ;main.c: 16: uint8_t measure[6];
  4094                           ;main.c: 17: int8_t data[2];
  4095                           ;main.c: 18: int32_t s_t;
  4096                           ;main.c: 19: int32_t s_rh;
  4097                           ;main.c: 20: uint8_t status;
  4098                           ;main.c: 22: LATCbits.LATC7 ^= 1;
  4099                           
  4100                           ;incstack = 0
  4101                           ; Regs used in _inv_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4102  0603  0022               	movlb	2	; select bank2
  4103  0604  0D0E               	rlf	14,w	;volatile
  4104  0605  0D0E               	rlf	14,w	;volatile
  4105  0606  3901               	andlw	1
  4106  0607  0020               	movlb	0	; select bank0
  4107  0608  00C7               	movwf	??_inv_handler
  4108  0609  3001               	movlw	1
  4109  060A  06C7               	xorwf	??_inv_handler,f
  4110  060B  0CC7               	rrf	??_inv_handler,f
  4111  060C  0CC7               	rrf	??_inv_handler,f
  4112  060D  0022               	movlb	2	; select bank2
  4113  060E  080E               	movf	14,w	;volatile
  4114  060F  0020               	movlb	0	; select bank0
  4115  0610  0647               	xorwf	??_inv_handler,w
  4116  0611  397F               	andlw	-129
  4117  0612  0647               	xorwf	??_inv_handler,w
  4118  0613  0022               	movlb	2	; select bank2
  4119  0614  008E               	movwf	14	;volatile
  4120                           
  4121                           ;main.c: 25: status = i2c2_write(0x0045, 0x2c, 0x06);
  4122  0615  3045               	movlw	69
  4123  0616  0020               	movlb	0	; select bank0
  4124  0617  00AF               	movwf	i2c2_write@dev_addr
  4125  0618  3000               	movlw	0
  4126  0619  00B0               	movwf	i2c2_write@dev_addr+1
  4127  061A  302C               	movlw	44
  4128  061B  00C7               	movwf	??_inv_handler
  4129  061C  0847               	movf	??_inv_handler,w
  4130  061D  00B1               	movwf	i2c2_write@reg_addr
  4131  061E  3006               	movlw	6
  4132  061F  00C8               	movwf	??_inv_handler+1
  4133  0620  0848               	movf	??_inv_handler+1,w
  4134  0621  00B2               	movwf	i2c2_write@data
  4135  0622  318C  2465  3186   	fcall	_i2c2_write
  4136  0625  0020               	movlb	0	; select bank0
  4137  0626  00C9               	movwf	??_inv_handler+2
  4138  0627  0849               	movf	??_inv_handler+2,w
  4139  0628  00CC               	movwf	inv_handler@status
  4140                           
  4141                           ;main.c: 26: status = i2c2_read_no_reg_addr(0x0045, measure, 6);
  4142  0629  3045               	movlw	69
  4143  062A  00AF               	movwf	i2c2_read_no_reg_addr@dev_addr
  4144  062B  3000               	movlw	0
  4145  062C  00B0               	movwf	i2c2_read_no_reg_addr@dev_addr+1
  4146  062D  304D               	movlw	(low (inv_handler@measure| 0))& (0+255)
  4147  062E  00C7               	movwf	??_inv_handler
  4148  062F  0847               	movf	??_inv_handler,w
  4149  0630  00B1               	movwf	i2c2_read_no_reg_addr@pbuf
  4150  0631  3006               	movlw	6
  4151  0632  00C8               	movwf	??_inv_handler+1
  4152  0633  0848               	movf	??_inv_handler+1,w
  4153  0634  00B2               	movwf	i2c2_read_no_reg_addr@len
  4154  0635  318D  2504  3186   	fcall	_i2c2_read_no_reg_addr
  4155  0638  0020               	movlb	0	; select bank0
  4156  0639  00C9               	movwf	??_inv_handler+2
  4157  063A  0849               	movf	??_inv_handler+2,w
  4158  063B  00CC               	movwf	inv_handler@status
  4159                           
  4160                           ;main.c: 27: s_t = (int32_t)((uint16_t)measure[0] * 256 + (uint16_t)measure[1]);
  4161  063C  084E               	movf	inv_handler@measure+1,w
  4162  063D  00C7               	movwf	??_inv_handler
  4163  063E  01C8               	clrf	??_inv_handler+1
  4164  063F  084D               	movf	inv_handler@measure,w
  4165  0640  00C9               	movwf	??_inv_handler+2
  4166  0641  01CA               	clrf	??_inv_handler+3
  4167  0642  0849               	movf	??_inv_handler+2,w
  4168  0643  00CA               	movwf	??_inv_handler+3
  4169  0644  01C9               	clrf	??_inv_handler+2
  4170  0645  0847               	movf	??_inv_handler,w
  4171  0646  0749               	addwf	??_inv_handler+2,w
  4172  0647  00D3               	movwf	inv_handler@s_t
  4173  0648  0848               	movf	??_inv_handler+1,w
  4174  0649  3D4A               	addwfc	??_inv_handler+3,w
  4175  064A  00D4               	movwf	inv_handler@s_t+1
  4176  064B  01D5               	clrf	inv_handler@s_t+2
  4177  064C  01D6               	clrf	inv_handler@s_t+3
  4178                           
  4179                           ;main.c: 28: s_rh = (int32_t)((uint16_t)measure[3] * 256 + (uint16_t)measure[4]);
  4180  064D  0851               	movf	inv_handler@measure+4,w
  4181  064E  00C7               	movwf	??_inv_handler
  4182  064F  01C8               	clrf	??_inv_handler+1
  4183  0650  0850               	movf	inv_handler@measure+3,w
  4184  0651  00C9               	movwf	??_inv_handler+2
  4185  0652  01CA               	clrf	??_inv_handler+3
  4186  0653  0849               	movf	??_inv_handler+2,w
  4187  0654  00CA               	movwf	??_inv_handler+3
  4188  0655  01C9               	clrf	??_inv_handler+2
  4189  0656  0847               	movf	??_inv_handler,w
  4190  0657  0749               	addwf	??_inv_handler+2,w
  4191  0658  00D7               	movwf	inv_handler@s_rh
  4192  0659  0848               	movf	??_inv_handler+1,w
  4193  065A  3D4A               	addwfc	??_inv_handler+3,w
  4194  065B  00D8               	movwf	inv_handler@s_rh+1
  4195  065C  01D9               	clrf	inv_handler@s_rh+2
  4196  065D  01DA               	clrf	inv_handler@s_rh+3
  4197                           
  4198                           ;main.c: 30: data[0] = (int8_t)(s_t * 175 / RESOLUTION - 45);
  4199  065E  30D5               	movlw	low (_RESOLUTION| (0+32768))
  4200  065F  0084               	movwf	4
  4201  0660  3086               	movlw	high (_RESOLUTION| (0+32768))
  4202  0661  0085               	movwf	5
  4203  0662  3F00               	moviw [0]fsr0
  4204  0663  00C7               	movwf	??_inv_handler
  4205  0664  3F01               	moviw [1]fsr0
  4206  0665  00C8               	movwf	??_inv_handler+1
  4207  0666  0847               	movf	??_inv_handler,w
  4208  0667  00AD               	movwf	___aldiv@divisor
  4209  0668  0848               	movf	??_inv_handler+1,w
  4210  0669  00AE               	movwf	___aldiv@divisor+1
  4211  066A  01AF               	clrf	___aldiv@divisor+2
  4212  066B  01B0               	clrf	___aldiv@divisor+3
  4213  066C  0856               	movf	inv_handler@s_t+3,w
  4214  066D  00A4               	movwf	___lmul@multiplier+3
  4215  066E  0855               	movf	inv_handler@s_t+2,w
  4216  066F  00A3               	movwf	___lmul@multiplier+2
  4217  0670  0854               	movf	inv_handler@s_t+1,w
  4218  0671  00A2               	movwf	___lmul@multiplier+1
  4219  0672  0853               	movf	inv_handler@s_t,w
  4220  0673  00A1               	movwf	___lmul@multiplier
  4221  0674  3000               	movlw	0
  4222  0675  00A8               	movwf	___lmul@multiplicand+3
  4223  0676  3000               	movlw	0
  4224  0677  00A7               	movwf	___lmul@multiplicand+2
  4225  0678  3000               	movlw	0
  4226  0679  00A6               	movwf	___lmul@multiplicand+1
  4227  067A  30AF               	movlw	175
  4228  067B  00A5               	movwf	___lmul@multiplicand
  4229  067C  318D  258B  3186   	fcall	___lmul
  4230  067F  0020               	movlb	0	; select bank0
  4231  0680  0824               	movf	?___lmul+3,w
  4232  0681  00B4               	movwf	___aldiv@dividend+3
  4233  0682  0823               	movf	?___lmul+2,w
  4234  0683  00B3               	movwf	___aldiv@dividend+2
  4235  0684  0822               	movf	?___lmul+1,w
  4236  0685  00B2               	movwf	___aldiv@dividend+1
  4237  0686  0821               	movf	?___lmul,w
  4238  0687  00B1               	movwf	___aldiv@dividend
  4239  0688  318F  277E  3186   	fcall	___aldiv
  4240  068B  0020               	movlb	0	; select bank0
  4241  068C  082D               	movf	?___aldiv,w
  4242  068D  3ED3               	addlw	-45
  4243  068E  00C9               	movwf	??_inv_handler+2
  4244  068F  0849               	movf	??_inv_handler+2,w
  4245  0690  00DB               	movwf	inv_handler@data
  4246                           
  4247                           ;main.c: 31: data[1] = (int8_t)(s_rh * 100 / RESOLUTION);
  4248  0691  30D5               	movlw	low (_RESOLUTION| (0+32768))
  4249  0692  0084               	movwf	4
  4250  0693  3086               	movlw	high (_RESOLUTION| (0+32768))
  4251  0694  0085               	movwf	5
  4252  0695  3F00               	moviw [0]fsr0
  4253  0696  00C7               	movwf	??_inv_handler
  4254  0697  3F01               	moviw [1]fsr0
  4255  0698  00C8               	movwf	??_inv_handler+1
  4256  0699  0847               	movf	??_inv_handler,w
  4257  069A  00AD               	movwf	___aldiv@divisor
  4258  069B  0848               	movf	??_inv_handler+1,w
  4259  069C  00AE               	movwf	___aldiv@divisor+1
  4260  069D  01AF               	clrf	___aldiv@divisor+2
  4261  069E  01B0               	clrf	___aldiv@divisor+3
  4262  069F  085A               	movf	inv_handler@s_rh+3,w
  4263  06A0  00A4               	movwf	___lmul@multiplier+3
  4264  06A1  0859               	movf	inv_handler@s_rh+2,w
  4265  06A2  00A3               	movwf	___lmul@multiplier+2
  4266  06A3  0858               	movf	inv_handler@s_rh+1,w
  4267  06A4  00A2               	movwf	___lmul@multiplier+1
  4268  06A5  0857               	movf	inv_handler@s_rh,w
  4269  06A6  00A1               	movwf	___lmul@multiplier
  4270  06A7  3000               	movlw	0
  4271  06A8  00A8               	movwf	___lmul@multiplicand+3
  4272  06A9  3000               	movlw	0
  4273  06AA  00A7               	movwf	___lmul@multiplicand+2
  4274  06AB  3000               	movlw	0
  4275  06AC  00A6               	movwf	___lmul@multiplicand+1
  4276  06AD  3064               	movlw	100
  4277  06AE  00A5               	movwf	___lmul@multiplicand
  4278  06AF  318D  258B  3186   	fcall	___lmul
  4279  06B2  0020               	movlb	0	; select bank0
  4280  06B3  0824               	movf	?___lmul+3,w
  4281  06B4  00B4               	movwf	___aldiv@dividend+3
  4282  06B5  0823               	movf	?___lmul+2,w
  4283  06B6  00B3               	movwf	___aldiv@dividend+2
  4284  06B7  0822               	movf	?___lmul+1,w
  4285  06B8  00B2               	movwf	___aldiv@dividend+1
  4286  06B9  0821               	movf	?___lmul,w
  4287  06BA  00B1               	movwf	___aldiv@dividend
  4288  06BB  318F  277E  3186   	fcall	___aldiv
  4289  06BE  0020               	movlb	0	; select bank0
  4290  06BF  082D               	movf	?___aldiv,w
  4291  06C0  00C9               	movwf	??_inv_handler+2
  4292  06C1  0849               	movf	??_inv_handler+2,w
  4293  06C2  00DC               	movwf	inv_handler@data+1
  4294                           
  4295                           ;main.c: 34: PROTOCOL_I2C_Send_int8_t(2, data);
  4296  06C3  305B               	movlw	(low (inv_handler@data| 0))& (0+255)
  4297  06C4  00C7               	movwf	??_inv_handler
  4298  06C5  0847               	movf	??_inv_handler,w
  4299  06C6  00C3               	movwf	PROTOCOL_I2C_Send_int8_t@pbuffer
  4300  06C7  3002               	movlw	2
  4301  06C8  3187  2790         	fcall	_PROTOCOL_I2C_Send_int8_t
  4302  06CA  0008               	return
  4303  06CB                     __end_of_inv_handler:	
  4304                           
  4305                           	psect	text6
  4306  0C65                     __ptext6:	
  4307 ;; *************** function _i2c2_write *****************
  4308 ;; Defined at:
  4309 ;;		line 13 in file "i2c2_util.c"
  4310 ;; Parameters:    Size  Location     Type
  4311 ;;  dev_addr        2   15[BANK0 ] unsigned int 
  4312 ;;  reg_addr        1   17[BANK0 ] unsigned char 
  4313 ;;  data            1   18[BANK0 ] unsigned char 
  4314 ;; Auto vars:     Size  Location     Type
  4315 ;;  buf             2   21[BANK0 ] unsigned char [2]
  4316 ;;  status          1   24[BANK0 ] enum E2979
  4317 ;;  write_status    1   23[BANK0 ] unsigned char 
  4318 ;; Return value:  Size  Location     Type
  4319 ;;                  1    wreg      unsigned char 
  4320 ;; Registers used:
  4321 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4322 ;; Tracked objects:
  4323 ;;		On entry : 0/0
  4324 ;;		On exit  : 0/0
  4325 ;;		Unchanged: 0/0
  4326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4327 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4328 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4329 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4330 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4331 ;;Total ram usage:       10 bytes
  4332 ;; Hardware stack levels used:    1
  4333 ;; Hardware stack levels required when called:    7
  4334 ;; This function calls:
  4335 ;;		_I2C2_MasterWrite
  4336 ;; This function is called by:
  4337 ;;		_inv_handler
  4338 ;; This function uses a non-reentrant model
  4339 ;;
  4340                           
  4341                           
  4342                           ;psect for function _i2c2_write
  4343  0C65                     _i2c2_write:	
  4344                           
  4345                           ;i2c2_util.c: 15: uint8_t buf[2];
  4346                           ;i2c2_util.c: 16: I2C2_MESSAGE_STATUS status;
  4347                           ;i2c2_util.c: 17: uint8_t write_status;
  4348                           ;i2c2_util.c: 18: buf[0] = reg_addr;
  4349                           
  4350                           ;incstack = 0
  4351                           ; Regs used in _i2c2_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4352  0C65  0020               	movlb	0	; select bank0
  4353  0C66  0831               	movf	i2c2_write@reg_addr,w
  4354  0C67  00B3               	movwf	??_i2c2_write
  4355  0C68  0833               	movf	??_i2c2_write,w
  4356  0C69  00B5               	movwf	i2c2_write@buf
  4357                           
  4358                           ;i2c2_util.c: 19: buf[1] = data;
  4359  0C6A  0832               	movf	i2c2_write@data,w
  4360  0C6B  00B3               	movwf	??_i2c2_write
  4361  0C6C  0833               	movf	??_i2c2_write,w
  4362  0C6D  00B6               	movwf	i2c2_write@buf+1
  4363                           
  4364                           ;i2c2_util.c: 20: I2C2_MasterWrite(buf, 2, dev_addr, &status);
  4365  0C6E  3002               	movlw	2
  4366  0C6F  00B3               	movwf	??_i2c2_write
  4367  0C70  0833               	movf	??_i2c2_write,w
  4368  0C71  00A8               	movwf	I2C2_MasterWrite@length
  4369  0C72  0830               	movf	i2c2_write@dev_addr+1,w
  4370  0C73  00AA               	movwf	I2C2_MasterWrite@address+1
  4371  0C74  082F               	movf	i2c2_write@dev_addr,w
  4372  0C75  00A9               	movwf	I2C2_MasterWrite@address
  4373  0C76  3038               	movlw	(low (i2c2_write@status| 0))& (0+255)
  4374  0C77  00B4               	movwf	??_i2c2_write+1
  4375  0C78  0834               	movf	??_i2c2_write+1,w
  4376  0C79  00AB               	movwf	I2C2_MasterWrite@pflag
  4377  0C7A  3035               	movlw	(low (i2c2_write@buf| 0))& (0+255)
  4378  0C7B  318C  24DC  318C   	fcall	_I2C2_MasterWrite
  4379  0C7E                     l4291:	
  4380                           ;i2c2_util.c: 21: while (status == I2C2_MESSAGE_PENDING);
  4381                           
  4382  0C7E  3002               	movlw	2
  4383  0C7F  0020               	movlb	0	; select bank0
  4384  0C80  0638               	xorwf	i2c2_write@status,w
  4385  0C81  1903               	btfsc	3,2
  4386  0C82  2C7E               	goto	l4291
  4387                           
  4388                           ;i2c2_util.c: 22: if (status == I2C2_MESSAGE_COMPLETE) {
  4389  0C83  0838               	movf	i2c2_write@status,w
  4390  0C84  1D03               	btfss	3,2
  4391  0C85  2C88               	goto	l937
  4392                           
  4393                           ;i2c2_util.c: 23: write_status = 0;
  4394  0C86  01B7               	clrf	i2c2_write@write_status
  4395                           
  4396                           ;i2c2_util.c: 24: } else {
  4397  0C87  2C8A               	goto	l4297
  4398  0C88                     l937:	
  4399                           
  4400                           ;i2c2_util.c: 25: write_status = 1;
  4401  0C88  01B7               	clrf	i2c2_write@write_status
  4402  0C89  0AB7               	incf	i2c2_write@write_status,f
  4403  0C8A                     l4297:	
  4404                           
  4405                           ;i2c2_util.c: 26: }
  4406                           ;i2c2_util.c: 27: return write_status;
  4407  0C8A  0837               	movf	i2c2_write@write_status,w
  4408  0C8B  0008               	return
  4409  0C8C                     __end_of_i2c2_write:	
  4410                           
  4411                           	psect	text7
  4412  0CDC                     __ptext7:	
  4413 ;; *************** function _I2C2_MasterWrite *****************
  4414 ;; Defined at:
  4415 ;;		line 598 in file "mcc_generated_files/i2c2.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;  pdata           1    wreg     PTR unsigned char 
  4418 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  4419 ;;  length          1    8[BANK0 ] unsigned char 
  4420 ;;  address         2    9[BANK0 ] unsigned int 
  4421 ;;  pflag           1   11[BANK0 ] PTR enum E2972
  4422 ;;		 -> i2c2_write_no_data@status(1), i2c2_read@status(1), i2c2_write@status(1), 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
  4425 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  4426 ;; Return value:  Size  Location     Type
  4427 ;;                  1    wreg      void 
  4428 ;; Registers used:
  4429 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4430 ;; Tracked objects:
  4431 ;;		On entry : 0/0
  4432 ;;		On exit  : 0/0
  4433 ;;		Unchanged: 0/0
  4434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4435 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4437 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4438 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4439 ;;Total ram usage:        7 bytes
  4440 ;; Hardware stack levels used:    1
  4441 ;; Hardware stack levels required when called:    6
  4442 ;; This function calls:
  4443 ;;		_I2C2_MasterTRBInsert
  4444 ;;		_I2C2_MasterWriteTRBBuild
  4445 ;; This function is called by:
  4446 ;;		_i2c2_write
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           
  4451                           ;psect for function _I2C2_MasterWrite
  4452  0CDC                     _I2C2_MasterWrite:	
  4453                           
  4454                           ;incstack = 0
  4455                           ; Regs used in _I2C2_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4456                           ;I2C2_MasterWrite@pdata stored from wreg
  4457  0CDC  0020               	movlb	0	; select bank0
  4458  0CDD  00AE               	movwf	I2C2_MasterWrite@pdata
  4459                           
  4460                           ;i2c2.c: 604: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
  4461                           ;i2c2.c: 607: if (i2c2_object.trStatus.s.full != 1)
  4462  0CDE  1862               	btfsc	_i2c2_object+2,0
  4463  0CDF  2CFD               	goto	l4117
  4464                           
  4465                           ;i2c2.c: 608: {
  4466                           ;i2c2.c: 609: I2C2_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  4467  0CE0  082E               	movf	I2C2_MasterWrite@pdata,w
  4468  0CE1  00AC               	movwf	??_I2C2_MasterWrite
  4469  0CE2  082C               	movf	??_I2C2_MasterWrite,w
  4470  0CE3  00A1               	movwf	I2C2_MasterWriteTRBBuild@pdata
  4471  0CE4  0828               	movf	I2C2_MasterWrite@length,w
  4472  0CE5  00AD               	movwf	??_I2C2_MasterWrite+1
  4473  0CE6  082D               	movf	??_I2C2_MasterWrite+1,w
  4474  0CE7  00A2               	movwf	I2C2_MasterWriteTRBBuild@length
  4475  0CE8  082A               	movf	I2C2_MasterWrite@address+1,w
  4476  0CE9  00A4               	movwf	I2C2_MasterWriteTRBBuild@address+1
  4477  0CEA  0829               	movf	I2C2_MasterWrite@address,w
  4478  0CEB  00A3               	movwf	I2C2_MasterWriteTRBBuild@address
  4479  0CEC  30D7               	movlw	(low (I2C2_MasterWrite@trBlock| 0))& (0+255)
  4480  0CED  318B  2394  318C   	fcall	_I2C2_MasterWriteTRBBuild
  4481                           
  4482                           ;i2c2.c: 610: I2C2_MasterTRBInsert(1, &trBlock, pflag);
  4483  0CF0  30D7               	movlw	(low (I2C2_MasterWrite@trBlock| 0))& (0+255)
  4484  0CF1  0020               	movlb	0	; select bank0
  4485  0CF2  00AC               	movwf	??_I2C2_MasterWrite
  4486  0CF3  082C               	movf	??_I2C2_MasterWrite,w
  4487  0CF4  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
  4488  0CF5  082B               	movf	I2C2_MasterWrite@pflag,w
  4489  0CF6  00AD               	movwf	??_I2C2_MasterWrite+1
  4490  0CF7  082D               	movf	??_I2C2_MasterWrite+1,w
  4491  0CF8  00A2               	movwf	I2C2_MasterTRBInsert@pflag
  4492  0CF9  3001               	movlw	1
  4493  0CFA  318E  2675         	fcall	_I2C2_MasterTRBInsert
  4494                           
  4495                           ;i2c2.c: 611: }
  4496  0CFC  0008               	return
  4497  0CFD                     l4117:	
  4498                           
  4499                           ;i2c2.c: 612: else
  4500                           ;i2c2.c: 613: {
  4501                           ;i2c2.c: 614: *pflag = I2C2_MESSAGE_FAIL;
  4502  0CFD  0020               	movlb	0	; select bank0
  4503  0CFE  082B               	movf	I2C2_MasterWrite@pflag,w
  4504  0CFF  0086               	movwf	6
  4505  0D00  0187               	clrf	7
  4506  0D01  0181               	clrf	1
  4507  0D02  0A81               	incf	1,f
  4508  0D03  0008               	return
  4509  0D04                     __end_of_I2C2_MasterWrite:	
  4510                           
  4511                           	psect	text8
  4512  0B94                     __ptext8:	
  4513 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
  4514 ;; Defined at:
  4515 ;;		line 707 in file "mcc_generated_files/i2c2.c"
  4516 ;; Parameters:    Size  Location     Type
  4517 ;;  ptrb            1    wreg     PTR struct .
  4518 ;;		 -> I2C2_MasterWrite@trBlock(4), 
  4519 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
  4520 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  4521 ;;  length          1    2[BANK0 ] unsigned char 
  4522 ;;  address         2    3[BANK0 ] unsigned int 
  4523 ;; Auto vars:     Size  Location     Type
  4524 ;;  ptrb            1    7[BANK0 ] PTR struct .
  4525 ;;		 -> I2C2_MasterWrite@trBlock(4), 
  4526 ;; Return value:  Size  Location     Type
  4527 ;;                  1    wreg      void 
  4528 ;; Registers used:
  4529 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4535 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4537 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4538 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4539 ;;Total ram usage:        7 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    5
  4542 ;; This function calls:
  4543 ;;		Nothing
  4544 ;; This function is called by:
  4545 ;;		_I2C2_MasterWrite
  4546 ;; This function uses a non-reentrant model
  4547 ;;
  4548                           
  4549                           
  4550                           ;psect for function _I2C2_MasterWriteTRBBuild
  4551  0B94                     _I2C2_MasterWriteTRBBuild:	
  4552                           
  4553                           ;incstack = 0
  4554                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  4555                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
  4556  0B94  0020               	movlb	0	; select bank0
  4557  0B95  00A7               	movwf	I2C2_MasterWriteTRBBuild@ptrb
  4558                           
  4559                           ;i2c2.c: 713: ptrb->address = address << 1;
  4560  0B96  0824               	movf	I2C2_MasterWriteTRBBuild@address+1,w
  4561  0B97  00A6               	movwf	??_I2C2_MasterWriteTRBBuild+1
  4562  0B98  0823               	movf	I2C2_MasterWriteTRBBuild@address,w
  4563  0B99  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
  4564  0B9A  35A5               	lslf	??_I2C2_MasterWriteTRBBuild,f
  4565  0B9B  0DA6               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
  4566  0B9C  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  4567  0B9D  0086               	movwf	6
  4568  0B9E  0187               	clrf	7
  4569  0B9F  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
  4570  0BA0  3FC0               	movwi [0]fsr1
  4571  0BA1  0826               	movf	??_I2C2_MasterWriteTRBBuild+1,w
  4572  0BA2  3FC1               	movwi [1]fsr1
  4573                           
  4574                           ;i2c2.c: 714: ptrb->length = length;
  4575  0BA3  0822               	movf	I2C2_MasterWriteTRBBuild@length,w
  4576  0BA4  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
  4577  0BA5  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  4578  0BA6  3E02               	addlw	2
  4579  0BA7  0086               	movwf	6
  4580  0BA8  0187               	clrf	7
  4581  0BA9  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
  4582  0BAA  0081               	movwf	1
  4583                           
  4584                           ;i2c2.c: 715: ptrb->pbuffer = pdata;
  4585  0BAB  0821               	movf	I2C2_MasterWriteTRBBuild@pdata,w
  4586  0BAC  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
  4587  0BAD  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  4588  0BAE  3E03               	addlw	3
  4589  0BAF  0086               	movwf	6
  4590  0BB0  0187               	clrf	7
  4591  0BB1  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
  4592  0BB2  0081               	movwf	1
  4593  0BB3  0008               	return
  4594  0BB4                     __end_of_I2C2_MasterWriteTRBBuild:	
  4595                           
  4596                           	psect	text9
  4597  0D04                     __ptext9:	
  4598 ;; *************** function _i2c2_read_no_reg_addr *****************
  4599 ;; Defined at:
  4600 ;;		line 77 in file "i2c2_util.c"
  4601 ;; Parameters:    Size  Location     Type
  4602 ;;  dev_addr        2   15[BANK0 ] unsigned int 
  4603 ;;  pbuf            1   17[BANK0 ] PTR unsigned char 
  4604 ;;		 -> inv_handler@measure(6), 
  4605 ;;  len             1   18[BANK0 ] unsigned char 
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;  status          1   23[BANK0 ] enum E2979
  4608 ;;  read_status     1   22[BANK0 ] unsigned char 
  4609 ;;  timeout         1   21[BANK0 ] unsigned char 
  4610 ;; Return value:  Size  Location     Type
  4611 ;;                  1    wreg      unsigned char 
  4612 ;; Registers used:
  4613 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4614 ;; Tracked objects:
  4615 ;;		On entry : 0/0
  4616 ;;		On exit  : 0/0
  4617 ;;		Unchanged: 0/0
  4618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4619 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4620 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4621 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4622 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4623 ;;Total ram usage:        9 bytes
  4624 ;; Hardware stack levels used:    1
  4625 ;; Hardware stack levels required when called:    7
  4626 ;; This function calls:
  4627 ;;		_I2C2_MasterRead
  4628 ;; This function is called by:
  4629 ;;		_inv_handler
  4630 ;; This function uses a non-reentrant model
  4631 ;;
  4632                           
  4633                           
  4634                           ;psect for function _i2c2_read_no_reg_addr
  4635  0D04                     _i2c2_read_no_reg_addr:	
  4636                           
  4637                           ;i2c2_util.c: 79: I2C2_MESSAGE_STATUS status;
  4638                           ;i2c2_util.c: 80: uint8_t read_status = 2;
  4639                           
  4640                           ;incstack = 0
  4641                           ; Regs used in _i2c2_read_no_reg_addr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  4642  0D04  3002               	movlw	2
  4643  0D05  0020               	movlb	0	; select bank0
  4644  0D06  00B3               	movwf	??_i2c2_read_no_reg_addr
  4645  0D07  0833               	movf	??_i2c2_read_no_reg_addr,w
  4646  0D08  00B6               	movwf	i2c2_read_no_reg_addr@read_status
  4647                           
  4648                           ;i2c2_util.c: 81: uint8_t timeout = 1;
  4649  0D09  01B5               	clrf	i2c2_read_no_reg_addr@timeout
  4650  0D0A  0AB5               	incf	i2c2_read_no_reg_addr@timeout,f
  4651  0D0B                     l4317:	
  4652                           ;i2c2_util.c: 82: while (status != I2C2_MESSAGE_FAIL) {
  4653                           
  4654  0D0B  0337               	decf	i2c2_read_no_reg_addr@status,w
  4655  0D0C  1903               	btfsc	3,2
  4656  0D0D  2D2E               	goto	l4319
  4657                           
  4658                           ;i2c2_util.c: 83: I2C2_MasterRead(pbuf, len, dev_addr, &status);
  4659  0D0E  0832               	movf	i2c2_read_no_reg_addr@len,w
  4660  0D0F  00B3               	movwf	??_i2c2_read_no_reg_addr
  4661  0D10  0833               	movf	??_i2c2_read_no_reg_addr,w
  4662  0D11  00A8               	movwf	I2C2_MasterRead@length
  4663  0D12  0830               	movf	i2c2_read_no_reg_addr@dev_addr+1,w
  4664  0D13  00AA               	movwf	I2C2_MasterRead@address+1
  4665  0D14  082F               	movf	i2c2_read_no_reg_addr@dev_addr,w
  4666  0D15  00A9               	movwf	I2C2_MasterRead@address
  4667  0D16  3037               	movlw	(low (i2c2_read_no_reg_addr@status| 0))& (0+255)
  4668  0D17  00B4               	movwf	??_i2c2_read_no_reg_addr+1
  4669  0D18  0834               	movf	??_i2c2_read_no_reg_addr+1,w
  4670  0D19  00AB               	movwf	I2C2_MasterRead@pflag
  4671  0D1A  0831               	movf	i2c2_read_no_reg_addr@pbuf,w
  4672  0D1B  318C  24B4  318D   	fcall	_I2C2_MasterRead
  4673  0D1E                     l4307:	
  4674                           ;i2c2_util.c: 84: while (status == I2C2_MESSAGE_PENDING);
  4675                           
  4676  0D1E  3002               	movlw	2
  4677  0D1F  0020               	movlb	0	; select bank0
  4678  0D20  0637               	xorwf	i2c2_read_no_reg_addr@status,w
  4679  0D21  1903               	btfsc	3,2
  4680  0D22  2D1E               	goto	l4307
  4681                           
  4682                           ;i2c2_util.c: 85: if (status == I2C2_MESSAGE_COMPLETE) {
  4683  0D23  0837               	movf	i2c2_read_no_reg_addr@status,w
  4684  0D24  1D03               	btfss	3,2
  4685  0D25  2D28               	goto	l4313
  4686                           
  4687                           ;i2c2_util.c: 86: read_status = 0;
  4688  0D26  01B6               	clrf	i2c2_read_no_reg_addr@read_status
  4689                           
  4690                           ;i2c2_util.c: 87: break;
  4691  0D27  2D2E               	goto	l4319
  4692  0D28                     l4313:	
  4693                           
  4694                           ;i2c2_util.c: 88: }
  4695                           ;i2c2_util.c: 89: if (--timeout == 0) {
  4696  0D28  3001               	movlw	1
  4697  0D29  02B5               	subwf	i2c2_read_no_reg_addr@timeout,f
  4698  0D2A  1D03               	btfss	3,2
  4699  0D2B  2D0B               	goto	l4317
  4700                           
  4701                           ;i2c2_util.c: 90: read_status = 1;
  4702  0D2C  01B6               	clrf	i2c2_read_no_reg_addr@read_status
  4703  0D2D  0AB6               	incf	i2c2_read_no_reg_addr@read_status,f
  4704  0D2E                     l4319:	
  4705                           ;i2c2_util.c: 91: break;
  4706                           
  4707                           
  4708                           ;i2c2_util.c: 92: }
  4709                           ;i2c2_util.c: 93: }
  4710                           ;i2c2_util.c: 94: return read_status;
  4711  0D2E  0836               	movf	i2c2_read_no_reg_addr@read_status,w
  4712  0D2F  0008               	return
  4713  0D30                     __end_of_i2c2_read_no_reg_addr:	
  4714                           
  4715                           	psect	text10
  4716  0CB4                     __ptext10:	
  4717 ;; *************** function _I2C2_MasterRead *****************
  4718 ;; Defined at:
  4719 ;;		line 619 in file "mcc_generated_files/i2c2.c"
  4720 ;; Parameters:    Size  Location     Type
  4721 ;;  pdata           1    wreg     PTR unsigned char 
  4722 ;;		 -> inv_handler@measure(6), 
  4723 ;;  length          1    8[BANK0 ] unsigned char 
  4724 ;;  address         2    9[BANK0 ] unsigned int 
  4725 ;;  pflag           1   11[BANK0 ] PTR enum E2972
  4726 ;;		 -> i2c2_read_no_reg_addr@status(1), i2c2_read@status(1), 
  4727 ;; Auto vars:     Size  Location     Type
  4728 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
  4729 ;;		 -> inv_handler@measure(6), 
  4730 ;; Return value:  Size  Location     Type
  4731 ;;                  1    wreg      void 
  4732 ;; Registers used:
  4733 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4734 ;; Tracked objects:
  4735 ;;		On entry : 0/0
  4736 ;;		On exit  : 0/0
  4737 ;;		Unchanged: 0/0
  4738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4739 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4740 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4741 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4742 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4743 ;;Total ram usage:        7 bytes
  4744 ;; Hardware stack levels used:    1
  4745 ;; Hardware stack levels required when called:    6
  4746 ;; This function calls:
  4747 ;;		_I2C2_MasterReadTRBBuild
  4748 ;;		_I2C2_MasterTRBInsert
  4749 ;; This function is called by:
  4750 ;;		_i2c2_read_no_reg_addr
  4751 ;; This function uses a non-reentrant model
  4752 ;;
  4753                           
  4754                           
  4755                           ;psect for function _I2C2_MasterRead
  4756  0CB4                     _I2C2_MasterRead:	
  4757                           
  4758                           ;incstack = 0
  4759                           ; Regs used in _I2C2_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4760                           ;I2C2_MasterRead@pdata stored from wreg
  4761  0CB4  0020               	movlb	0	; select bank0
  4762  0CB5  00AE               	movwf	I2C2_MasterRead@pdata
  4763                           
  4764                           ;i2c2.c: 625: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
  4765                           ;i2c2.c: 629: if (i2c2_object.trStatus.s.full != 1)
  4766  0CB6  1862               	btfsc	_i2c2_object+2,0
  4767  0CB7  2CD5               	goto	l4123
  4768                           
  4769                           ;i2c2.c: 630: {
  4770                           ;i2c2.c: 631: I2C2_MasterReadTRBBuild(&trBlock, pdata, length, address);
  4771  0CB8  082E               	movf	I2C2_MasterRead@pdata,w
  4772  0CB9  00AC               	movwf	??_I2C2_MasterRead
  4773  0CBA  082C               	movf	??_I2C2_MasterRead,w
  4774  0CBB  00A1               	movwf	I2C2_MasterReadTRBBuild@pdata
  4775  0CBC  0828               	movf	I2C2_MasterRead@length,w
  4776  0CBD  00AD               	movwf	??_I2C2_MasterRead+1
  4777  0CBE  082D               	movf	??_I2C2_MasterRead+1,w
  4778  0CBF  00A2               	movwf	I2C2_MasterReadTRBBuild@length
  4779  0CC0  082A               	movf	I2C2_MasterRead@address+1,w
  4780  0CC1  00A4               	movwf	I2C2_MasterReadTRBBuild@address+1
  4781  0CC2  0829               	movf	I2C2_MasterRead@address,w
  4782  0CC3  00A3               	movwf	I2C2_MasterReadTRBBuild@address
  4783  0CC4  30D3               	movlw	(low (I2C2_MasterRead@trBlock| 0))& (0+255)
  4784  0CC5  318C  248C  318C   	fcall	_I2C2_MasterReadTRBBuild
  4785                           
  4786                           ;i2c2.c: 632: I2C2_MasterTRBInsert(1, &trBlock, pflag);
  4787  0CC8  30D3               	movlw	(low (I2C2_MasterRead@trBlock| 0))& (0+255)
  4788  0CC9  0020               	movlb	0	; select bank0
  4789  0CCA  00AC               	movwf	??_I2C2_MasterRead
  4790  0CCB  082C               	movf	??_I2C2_MasterRead,w
  4791  0CCC  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
  4792  0CCD  082B               	movf	I2C2_MasterRead@pflag,w
  4793  0CCE  00AD               	movwf	??_I2C2_MasterRead+1
  4794  0CCF  082D               	movf	??_I2C2_MasterRead+1,w
  4795  0CD0  00A2               	movwf	I2C2_MasterTRBInsert@pflag
  4796  0CD1  3001               	movlw	1
  4797  0CD2  318E  2675         	fcall	_I2C2_MasterTRBInsert
  4798                           
  4799                           ;i2c2.c: 633: }
  4800  0CD4  0008               	return
  4801  0CD5                     l4123:	
  4802                           
  4803                           ;i2c2.c: 634: else
  4804                           ;i2c2.c: 635: {
  4805                           ;i2c2.c: 636: *pflag = I2C2_MESSAGE_FAIL;
  4806  0CD5  0020               	movlb	0	; select bank0
  4807  0CD6  082B               	movf	I2C2_MasterRead@pflag,w
  4808  0CD7  0086               	movwf	6
  4809  0CD8  0187               	clrf	7
  4810  0CD9  0181               	clrf	1
  4811  0CDA  0A81               	incf	1,f
  4812  0CDB  0008               	return
  4813  0CDC                     __end_of_I2C2_MasterRead:	
  4814                           
  4815                           	psect	text11
  4816  0E75                     __ptext11:	
  4817 ;; *************** function _I2C2_MasterTRBInsert *****************
  4818 ;; Defined at:
  4819 ;;		line 641 in file "mcc_generated_files/i2c2.c"
  4820 ;; Parameters:    Size  Location     Type
  4821 ;;  count           1    wreg     unsigned char 
  4822 ;;  ptrb_list       1    1[BANK0 ] PTR struct .
  4823 ;;		 -> I2C2_MasterRead@trBlock(4), I2C2_MasterWrite@trBlock(4), 
  4824 ;;  pflag           1    2[BANK0 ] PTR enum E2972
  4825 ;;		 -> i2c2_read_no_reg_addr@status(1), i2c2_write_no_data@status(1), i2c2_read@status(1), i2c2_write@status(1), 
  4826 ;; Auto vars:     Size  Location     Type
  4827 ;;  count           1    4[BANK0 ] unsigned char 
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  1    wreg      void 
  4830 ;; Registers used:
  4831 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4837 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4838 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4839 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4840 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4841 ;;Total ram usage:        4 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; Hardware stack levels required when called:    5
  4844 ;; This function calls:
  4845 ;;		Nothing
  4846 ;; This function is called by:
  4847 ;;		_I2C2_MasterWrite
  4848 ;;		_I2C2_MasterRead
  4849 ;; This function uses a non-reentrant model
  4850 ;;
  4851                           
  4852                           
  4853                           ;psect for function _I2C2_MasterTRBInsert
  4854  0E75                     _I2C2_MasterTRBInsert:	
  4855                           
  4856                           ;incstack = 0
  4857                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  4858                           ;I2C2_MasterTRBInsert@count stored from wreg
  4859  0E75  0020               	movlb	0	; select bank0
  4860  0E76  00A4               	movwf	I2C2_MasterTRBInsert@count
  4861                           
  4862                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
  4863  0E77  1862               	btfsc	_i2c2_object+2,0
  4864  0E78  2EA9               	goto	l4027
  4865                           
  4866                           ;i2c2.c: 649: {
  4867                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
  4868  0E79  3002               	movlw	2
  4869  0E7A  00A3               	movwf	??_I2C2_MasterTRBInsert
  4870  0E7B  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4871  0E7C  0086               	movwf	6
  4872  0E7D  0187               	clrf	7
  4873  0E7E  0823               	movf	??_I2C2_MasterTRBInsert,w
  4874  0E7F  0081               	movwf	1
  4875                           
  4876                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
  4877  0E80  0821               	movf	I2C2_MasterTRBInsert@ptrb_list,w
  4878  0E81  00A3               	movwf	??_I2C2_MasterTRBInsert
  4879  0E82  0A60               	incf	_i2c2_object,w
  4880  0E83  0086               	movwf	6
  4881  0E84  0187               	clrf	7
  4882  0E85  0823               	movf	??_I2C2_MasterTRBInsert,w
  4883  0E86  0081               	movwf	1
  4884                           
  4885                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
  4886  0E87  0824               	movf	I2C2_MasterTRBInsert@count,w
  4887  0E88  00A3               	movwf	??_I2C2_MasterTRBInsert
  4888  0E89  0860               	movf	_i2c2_object,w
  4889  0E8A  0086               	movwf	6
  4890  0E8B  0187               	clrf	7
  4891  0E8C  0823               	movf	??_I2C2_MasterTRBInsert,w
  4892  0E8D  0081               	movwf	1
  4893                           
  4894                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
  4895  0E8E  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4896  0E8F  00A3               	movwf	??_I2C2_MasterTRBInsert
  4897  0E90  0860               	movf	_i2c2_object,w
  4898  0E91  3E02               	addlw	2
  4899  0E92  0086               	movwf	6
  4900  0E93  0187               	clrf	7
  4901  0E94  0823               	movf	??_I2C2_MasterTRBInsert,w
  4902  0E95  0081               	movwf	1
  4903                           
  4904                           ;i2c2.c: 655: i2c2_object.pTrTail++;
  4905  0E96  3003               	movlw	3
  4906  0E97  00A3               	movwf	??_I2C2_MasterTRBInsert
  4907  0E98  0823               	movf	??_I2C2_MasterTRBInsert,w
  4908  0E99  07E0               	addwf	_i2c2_object,f
  4909                           
  4910                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
  4911  0E9A  0860               	movf	_i2c2_object,w
  4912  0E9B  3AE1               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
  4913  0E9C  1D03               	skipz
  4914  0E9D  2EA2               	goto	l4023
  4915                           
  4916                           ;i2c2.c: 659: {
  4917                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
  4918  0E9E  30DE               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  4919  0E9F  00A3               	movwf	??_I2C2_MasterTRBInsert
  4920  0EA0  0823               	movf	??_I2C2_MasterTRBInsert,w
  4921  0EA1  00E0               	movwf	_i2c2_object
  4922  0EA2                     l4023:	
  4923                           
  4924                           ;i2c2.c: 662: }
  4925                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
  4926  0EA2  10E2               	bcf	_i2c2_object+2,1
  4927                           
  4928                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
  4929  0EA3  0861               	movf	low ((_i2c2_object| 0+1)),w
  4930  0EA4  0660               	xorwf	_i2c2_object,w
  4931  0EA5  1D03               	skipz
  4932  0EA6  2EAE               	goto	l4029
  4933                           
  4934                           ;i2c2.c: 670: {
  4935                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
  4936  0EA7  1462               	bsf	_i2c2_object+2,0
  4937                           
  4938                           ;i2c2.c: 673: }
  4939                           ;i2c2.c: 675: }
  4940  0EA8  2EAE               	goto	l4029
  4941  0EA9                     l4027:	
  4942                           
  4943                           ;i2c2.c: 676: else
  4944                           ;i2c2.c: 677: {
  4945                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
  4946  0EA9  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4947  0EAA  0086               	movwf	6
  4948  0EAB  0187               	clrf	7
  4949  0EAC  0181               	clrf	1
  4950  0EAD  0A81               	incf	1,f
  4951  0EAE                     l4029:	
  4952                           
  4953                           ;i2c2.c: 679: }
  4954                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
  4955  0EAE  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  4956  0EAF  0086               	movwf	6
  4957  0EB0  0187               	clrf	7
  4958  0EB1  3002               	movlw	2
  4959  0EB2  0601               	xorwf	1,w
  4960  0EB3  1D03               	btfss	3,2
  4961  0EB4  0008               	return
  4962  0EB5                     l4033:	
  4963                           ;i2c2.c: 683: {
  4964                           ;i2c2.c: 684: while(i2c2_state != S_MASTER_IDLE);
  4965                           
  4966  0EB5  0021               	movlb	1	; select bank1
  4967  0EB6  0849               	movf	_i2c2_state^(0+128),w
  4968  0EB7  1D03               	btfss	3,2
  4969  0EB8  2EB5               	goto	l4033
  4970                           
  4971                           ;i2c2.c: 685: {
  4972                           ;i2c2.c: 688: PIR4bits.SSP2IF = 1;
  4973  0EB9  0020               	movlb	0	; select bank0
  4974  0EBA  1414               	bsf	20,0	;volatile
  4975  0EBB  0008               	return
  4976  0EBC                     __end_of_I2C2_MasterTRBInsert:	
  4977                           
  4978                           	psect	text12
  4979  0C8C                     __ptext12:	
  4980 ;; *************** function _I2C2_MasterReadTRBBuild *****************
  4981 ;; Defined at:
  4982 ;;		line 694 in file "mcc_generated_files/i2c2.c"
  4983 ;; Parameters:    Size  Location     Type
  4984 ;;  ptrb            1    wreg     PTR struct .
  4985 ;;		 -> I2C2_MasterRead@trBlock(4), 
  4986 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
  4987 ;;		 -> inv_handler@measure(6), 
  4988 ;;  length          1    2[BANK0 ] unsigned char 
  4989 ;;  address         2    3[BANK0 ] unsigned int 
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;  ptrb            1    7[BANK0 ] PTR struct .
  4992 ;;		 -> I2C2_MasterRead@trBlock(4), 
  4993 ;; Return value:  Size  Location     Type
  4994 ;;                  1    wreg      void 
  4995 ;; Registers used:
  4996 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4997 ;; Tracked objects:
  4998 ;;		On entry : 0/0
  4999 ;;		On exit  : 0/0
  5000 ;;		Unchanged: 0/0
  5001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5002 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5003 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5004 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5005 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5006 ;;Total ram usage:        7 bytes
  5007 ;; Hardware stack levels used:    1
  5008 ;; Hardware stack levels required when called:    5
  5009 ;; This function calls:
  5010 ;;		Nothing
  5011 ;; This function is called by:
  5012 ;;		_I2C2_MasterRead
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           
  5017                           ;psect for function _I2C2_MasterReadTRBBuild
  5018  0C8C                     _I2C2_MasterReadTRBBuild:	
  5019                           
  5020                           ;incstack = 0
  5021                           ; Regs used in _I2C2_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  5022                           ;I2C2_MasterReadTRBBuild@ptrb stored from wreg
  5023  0C8C  0020               	movlb	0	; select bank0
  5024  0C8D  00A7               	movwf	I2C2_MasterReadTRBBuild@ptrb
  5025                           
  5026                           ;i2c2.c: 700: ptrb->address = address << 1;
  5027  0C8E  0824               	movf	I2C2_MasterReadTRBBuild@address+1,w
  5028  0C8F  00A6               	movwf	??_I2C2_MasterReadTRBBuild+1
  5029  0C90  0823               	movf	I2C2_MasterReadTRBBuild@address,w
  5030  0C91  00A5               	movwf	??_I2C2_MasterReadTRBBuild
  5031  0C92  35A5               	lslf	??_I2C2_MasterReadTRBBuild,f
  5032  0C93  0DA6               	rlf	??_I2C2_MasterReadTRBBuild+1,f
  5033  0C94  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5034  0C95  0086               	movwf	6
  5035  0C96  0187               	clrf	7
  5036  0C97  0825               	movf	??_I2C2_MasterReadTRBBuild,w
  5037  0C98  3FC0               	movwi [0]fsr1
  5038  0C99  0826               	movf	??_I2C2_MasterReadTRBBuild+1,w
  5039  0C9A  3FC1               	movwi [1]fsr1
  5040                           
  5041                           ;i2c2.c: 702: ptrb->address |= 0x01;
  5042  0C9B  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5043  0C9C  0086               	movwf	6
  5044  0C9D  0187               	clrf	7
  5045  0C9E  3001               	movlw	1
  5046  0C9F  0481               	iorwf	1,f
  5047  0CA0  3141               	addfsr 1,1
  5048  0CA1  3000               	movlw	0
  5049  0CA2  0481               	iorwf	1,f
  5050                           
  5051                           ;i2c2.c: 703: ptrb->length = length;
  5052  0CA3  0822               	movf	I2C2_MasterReadTRBBuild@length,w
  5053  0CA4  00A5               	movwf	??_I2C2_MasterReadTRBBuild
  5054  0CA5  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5055  0CA6  3E02               	addlw	2
  5056  0CA7  0086               	movwf	6
  5057  0CA8  0187               	clrf	7
  5058  0CA9  0825               	movf	??_I2C2_MasterReadTRBBuild,w
  5059  0CAA  0081               	movwf	1
  5060                           
  5061                           ;i2c2.c: 704: ptrb->pbuffer = pdata;
  5062  0CAB  0821               	movf	I2C2_MasterReadTRBBuild@pdata,w
  5063  0CAC  00A5               	movwf	??_I2C2_MasterReadTRBBuild
  5064  0CAD  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5065  0CAE  3E03               	addlw	3
  5066  0CAF  0086               	movwf	6
  5067  0CB0  0187               	clrf	7
  5068  0CB1  0825               	movf	??_I2C2_MasterReadTRBBuild,w
  5069  0CB2  0081               	movwf	1
  5070  0CB3  0008               	return
  5071  0CB4                     __end_of_I2C2_MasterReadTRBBuild:	
  5072                           
  5073                           	psect	text13
  5074  0D8B                     __ptext13:	
  5075 ;; *************** function ___lmul *****************
  5076 ;; Defined at:
  5077 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;  multiplier      4    1[BANK0 ] unsigned long 
  5080 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;  product         4    9[BANK0 ] unsigned long 
  5083 ;; Return value:  Size  Location     Type
  5084 ;;                  4    1[BANK0 ] unsigned long 
  5085 ;; Registers used:
  5086 ;;		wreg, status,2, status,0
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5092 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5093 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5095 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5096 ;;Total ram usage:       12 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; Hardware stack levels required when called:    5
  5099 ;; This function calls:
  5100 ;;		Nothing
  5101 ;; This function is called by:
  5102 ;;		_inv_handler
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           
  5107                           ;psect for function ___lmul
  5108  0D8B                     ___lmul:	
  5109                           
  5110                           ;incstack = 0
  5111                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5112  0D8B  3000               	movlw	0
  5113  0D8C  0020               	movlb	0	; select bank0
  5114  0D8D  00AC               	movwf	___lmul@product+3
  5115  0D8E  3000               	movlw	0
  5116  0D8F  00AB               	movwf	___lmul@product+2
  5117  0D90  3000               	movlw	0
  5118  0D91  00AA               	movwf	___lmul@product+1
  5119  0D92  3000               	movlw	0
  5120  0D93  00A9               	movwf	___lmul@product
  5121  0D94                     l4349:	
  5122  0D94  1C21               	btfss	___lmul@multiplier,0
  5123  0D95  2D9E               	goto	l4353
  5124  0D96  0825               	movf	___lmul@multiplicand,w
  5125  0D97  07A9               	addwf	___lmul@product,f
  5126  0D98  0826               	movf	___lmul@multiplicand+1,w
  5127  0D99  3DAA               	addwfc	___lmul@product+1,f
  5128  0D9A  0827               	movf	___lmul@multiplicand+2,w
  5129  0D9B  3DAB               	addwfc	___lmul@product+2,f
  5130  0D9C  0828               	movf	___lmul@multiplicand+3,w
  5131  0D9D  3DAC               	addwfc	___lmul@product+3,f
  5132  0D9E                     l4353:	
  5133  0D9E  3001               	movlw	1
  5134  0D9F                     u3875:	
  5135  0D9F  35A5               	lslf	___lmul@multiplicand,f
  5136  0DA0  0DA6               	rlf	___lmul@multiplicand+1,f
  5137  0DA1  0DA7               	rlf	___lmul@multiplicand+2,f
  5138  0DA2  0DA8               	rlf	___lmul@multiplicand+3,f
  5139  0DA3  0B89               	decfsz	9,f
  5140  0DA4  2D9F               	goto	u3875
  5141  0DA5  3001               	movlw	1
  5142  0DA6                     u3885:	
  5143  0DA6  36A4               	lsrf	___lmul@multiplier+3,f
  5144  0DA7  0CA3               	rrf	___lmul@multiplier+2,f
  5145  0DA8  0CA2               	rrf	___lmul@multiplier+1,f
  5146  0DA9  0CA1               	rrf	___lmul@multiplier,f
  5147  0DAA  0B89               	decfsz	9,f
  5148  0DAB  2DA6               	goto	u3885
  5149  0DAC  0824               	movf	___lmul@multiplier+3,w
  5150  0DAD  0423               	iorwf	___lmul@multiplier+2,w
  5151  0DAE  0422               	iorwf	___lmul@multiplier+1,w
  5152  0DAF  0421               	iorwf	___lmul@multiplier,w
  5153  0DB0  1D03               	skipz
  5154  0DB1  2D94               	goto	l4349
  5155  0DB2  082C               	movf	___lmul@product+3,w
  5156  0DB3  00A4               	movwf	?___lmul+3
  5157  0DB4  082B               	movf	___lmul@product+2,w
  5158  0DB5  00A3               	movwf	?___lmul+2
  5159  0DB6  082A               	movf	___lmul@product+1,w
  5160  0DB7  00A2               	movwf	?___lmul+1
  5161  0DB8  0829               	movf	___lmul@product,w
  5162  0DB9  00A1               	movwf	?___lmul
  5163  0DBA  0008               	return
  5164  0DBB                     __end_of___lmul:	
  5165                           
  5166                           	psect	text14
  5167  0F7E                     __ptext14:	
  5168 ;; *************** function ___aldiv *****************
  5169 ;; Defined at:
  5170 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;  divisor         4   13[BANK0 ] long 
  5173 ;;  dividend        4   17[BANK0 ] long 
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  quotient        4   24[BANK0 ] long 
  5176 ;;  sign            1   23[BANK0 ] unsigned char 
  5177 ;;  counter         1   22[BANK0 ] unsigned char 
  5178 ;; Return value:  Size  Location     Type
  5179 ;;                  4   13[BANK0 ] long 
  5180 ;; Registers used:
  5181 ;;		wreg, status,2, status,0
  5182 ;; Tracked objects:
  5183 ;;		On entry : 0/0
  5184 ;;		On exit  : 0/0
  5185 ;;		Unchanged: 0/0
  5186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5187 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5188 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5189 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5190 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5191 ;;Total ram usage:       15 bytes
  5192 ;; Hardware stack levels used:    1
  5193 ;; Hardware stack levels required when called:    5
  5194 ;; This function calls:
  5195 ;;		Nothing
  5196 ;; This function is called by:
  5197 ;;		_inv_handler
  5198 ;; This function uses a non-reentrant model
  5199 ;;
  5200                           
  5201                           
  5202                           ;psect for function ___aldiv
  5203  0F7E                     ___aldiv:	
  5204                           
  5205                           ;incstack = 0
  5206                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5207  0F7E  0020               	movlb	0	; select bank0
  5208  0F7F  01B7               	clrf	___aldiv@sign
  5209  0F80  1FB0               	btfss	___aldiv@divisor+3,7
  5210  0F81  2F8F               	goto	l1117
  5211  0F82  09AD               	comf	___aldiv@divisor,f
  5212  0F83  09AE               	comf	___aldiv@divisor+1,f
  5213  0F84  09AF               	comf	___aldiv@divisor+2,f
  5214  0F85  09B0               	comf	___aldiv@divisor+3,f
  5215  0F86  0AAD               	incf	___aldiv@divisor,f
  5216  0F87  1903               	skipnz
  5217  0F88  0AAE               	incf	___aldiv@divisor+1,f
  5218  0F89  1903               	skipnz
  5219  0F8A  0AAF               	incf	___aldiv@divisor+2,f
  5220  0F8B  1903               	skipnz
  5221  0F8C  0AB0               	incf	___aldiv@divisor+3,f
  5222  0F8D  01B7               	clrf	___aldiv@sign
  5223  0F8E  0AB7               	incf	___aldiv@sign,f
  5224  0F8F                     l1117:	
  5225  0F8F  1FB4               	btfss	___aldiv@dividend+3,7
  5226  0F90  2FA0               	goto	l4371
  5227  0F91  09B1               	comf	___aldiv@dividend,f
  5228  0F92  09B2               	comf	___aldiv@dividend+1,f
  5229  0F93  09B3               	comf	___aldiv@dividend+2,f
  5230  0F94  09B4               	comf	___aldiv@dividend+3,f
  5231  0F95  0AB1               	incf	___aldiv@dividend,f
  5232  0F96  1903               	skipnz
  5233  0F97  0AB2               	incf	___aldiv@dividend+1,f
  5234  0F98  1903               	skipnz
  5235  0F99  0AB3               	incf	___aldiv@dividend+2,f
  5236  0F9A  1903               	skipnz
  5237  0F9B  0AB4               	incf	___aldiv@dividend+3,f
  5238  0F9C  3001               	movlw	1
  5239  0F9D  00B5               	movwf	??___aldiv
  5240  0F9E  0835               	movf	??___aldiv,w
  5241  0F9F  06B7               	xorwf	___aldiv@sign,f
  5242  0FA0                     l4371:	
  5243  0FA0  3000               	movlw	0
  5244  0FA1  00BB               	movwf	___aldiv@quotient+3
  5245  0FA2  3000               	movlw	0
  5246  0FA3  00BA               	movwf	___aldiv@quotient+2
  5247  0FA4  3000               	movlw	0
  5248  0FA5  00B9               	movwf	___aldiv@quotient+1
  5249  0FA6  3000               	movlw	0
  5250  0FA7  00B8               	movwf	___aldiv@quotient
  5251  0FA8  0830               	movf	___aldiv@divisor+3,w
  5252  0FA9  042F               	iorwf	___aldiv@divisor+2,w
  5253  0FAA  042E               	iorwf	___aldiv@divisor+1,w
  5254  0FAB  042D               	iorwf	___aldiv@divisor,w
  5255  0FAC  1903               	skipnz
  5256  0FAD  2FE9               	goto	l4393
  5257  0FAE  01B6               	clrf	___aldiv@counter
  5258  0FAF  0AB6               	incf	___aldiv@counter,f
  5259  0FB0                     l4379:	
  5260  0FB0  1BB0               	btfsc	___aldiv@divisor+3,7
  5261  0FB1  2FBE               	goto	l4381
  5262  0FB2  3001               	movlw	1
  5263  0FB3                     u3935:	
  5264  0FB3  35AD               	lslf	___aldiv@divisor,f
  5265  0FB4  0DAE               	rlf	___aldiv@divisor+1,f
  5266  0FB5  0DAF               	rlf	___aldiv@divisor+2,f
  5267  0FB6  0DB0               	rlf	___aldiv@divisor+3,f
  5268  0FB7  0B89               	decfsz	9,f
  5269  0FB8  2FB3               	goto	u3935
  5270  0FB9  3001               	movlw	1
  5271  0FBA  00B5               	movwf	??___aldiv
  5272  0FBB  0835               	movf	??___aldiv,w
  5273  0FBC  07B6               	addwf	___aldiv@counter,f
  5274  0FBD  2FB0               	goto	l4379
  5275  0FBE                     l4381:	
  5276  0FBE  3001               	movlw	1
  5277  0FBF                     u3955:	
  5278  0FBF  35B8               	lslf	___aldiv@quotient,f
  5279  0FC0  0DB9               	rlf	___aldiv@quotient+1,f
  5280  0FC1  0DBA               	rlf	___aldiv@quotient+2,f
  5281  0FC2  0DBB               	rlf	___aldiv@quotient+3,f
  5282  0FC3  0B89               	decfsz	9,f
  5283  0FC4  2FBF               	goto	u3955
  5284  0FC5  0830               	movf	___aldiv@divisor+3,w
  5285  0FC6  0234               	subwf	___aldiv@dividend+3,w
  5286  0FC7  1D03               	skipz
  5287  0FC8  2FD3               	goto	u3965
  5288  0FC9  082F               	movf	___aldiv@divisor+2,w
  5289  0FCA  0233               	subwf	___aldiv@dividend+2,w
  5290  0FCB  1D03               	skipz
  5291  0FCC  2FD3               	goto	u3965
  5292  0FCD  082E               	movf	___aldiv@divisor+1,w
  5293  0FCE  0232               	subwf	___aldiv@dividend+1,w
  5294  0FCF  1D03               	skipz
  5295  0FD0  2FD3               	goto	u3965
  5296  0FD1  082D               	movf	___aldiv@divisor,w
  5297  0FD2  0231               	subwf	___aldiv@dividend,w
  5298  0FD3                     u3965:	
  5299  0FD3  1C03               	skipc
  5300  0FD4  2FDE               	goto	l4389
  5301  0FD5  082D               	movf	___aldiv@divisor,w
  5302  0FD6  02B1               	subwf	___aldiv@dividend,f
  5303  0FD7  082E               	movf	___aldiv@divisor+1,w
  5304  0FD8  3BB2               	subwfb	___aldiv@dividend+1,f
  5305  0FD9  082F               	movf	___aldiv@divisor+2,w
  5306  0FDA  3BB3               	subwfb	___aldiv@dividend+2,f
  5307  0FDB  0830               	movf	___aldiv@divisor+3,w
  5308  0FDC  3BB4               	subwfb	___aldiv@dividend+3,f
  5309  0FDD  1438               	bsf	___aldiv@quotient,0
  5310  0FDE                     l4389:	
  5311  0FDE  3001               	movlw	1
  5312  0FDF                     u3975:	
  5313  0FDF  36B0               	lsrf	___aldiv@divisor+3,f
  5314  0FE0  0CAF               	rrf	___aldiv@divisor+2,f
  5315  0FE1  0CAE               	rrf	___aldiv@divisor+1,f
  5316  0FE2  0CAD               	rrf	___aldiv@divisor,f
  5317  0FE3  0B89               	decfsz	9,f
  5318  0FE4  2FDF               	goto	u3975
  5319  0FE5  3001               	movlw	1
  5320  0FE6  02B6               	subwf	___aldiv@counter,f
  5321  0FE7  1D03               	btfss	3,2
  5322  0FE8  2FBE               	goto	l4381
  5323  0FE9                     l4393:	
  5324  0FE9  0837               	movf	___aldiv@sign,w
  5325  0FEA  1903               	btfsc	3,2
  5326  0FEB  2FF7               	goto	l4397
  5327  0FEC  09B8               	comf	___aldiv@quotient,f
  5328  0FED  09B9               	comf	___aldiv@quotient+1,f
  5329  0FEE  09BA               	comf	___aldiv@quotient+2,f
  5330  0FEF  09BB               	comf	___aldiv@quotient+3,f
  5331  0FF0  0AB8               	incf	___aldiv@quotient,f
  5332  0FF1  1903               	skipnz
  5333  0FF2  0AB9               	incf	___aldiv@quotient+1,f
  5334  0FF3  1903               	skipnz
  5335  0FF4  0ABA               	incf	___aldiv@quotient+2,f
  5336  0FF5  1903               	skipnz
  5337  0FF6  0ABB               	incf	___aldiv@quotient+3,f
  5338  0FF7                     l4397:	
  5339  0FF7  083B               	movf	___aldiv@quotient+3,w
  5340  0FF8  00B0               	movwf	?___aldiv+3
  5341  0FF9  083A               	movf	___aldiv@quotient+2,w
  5342  0FFA  00AF               	movwf	?___aldiv+2
  5343  0FFB  0839               	movf	___aldiv@quotient+1,w
  5344  0FFC  00AE               	movwf	?___aldiv+1
  5345  0FFD  0838               	movf	___aldiv@quotient,w
  5346  0FFE  00AD               	movwf	?___aldiv
  5347  0FFF  0008               	return
  5348  1000                     __end_of___aldiv:	
  5349                           
  5350                           	psect	text15
  5351  0790                     __ptext15:	
  5352 ;; *************** function _PROTOCOL_I2C_Send_int8_t *****************
  5353 ;; Defined at:
  5354 ;;		line 296 in file "protocol.c"
  5355 ;; Parameters:    Size  Location     Type
  5356 ;;  length          1    wreg     unsigned char 
  5357 ;;  pbuffer         1   35[BANK0 ] PTR char 
  5358 ;;		 -> PROTOCOL_Send_int8_t@pbuf(1), inv_handler@data(2), 
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;  length          1   38[BANK0 ] unsigned char 
  5361 ;; Return value:  Size  Location     Type
  5362 ;;                  1    wreg      void 
  5363 ;; Registers used:
  5364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5370 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5374 ;;Total ram usage:        4 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; Hardware stack levels required when called:    8
  5377 ;; This function calls:
  5378 ;;		_PROTOCOL_I2C_Set_TLV
  5379 ;;		_printf
  5380 ;; This function is called by:
  5381 ;;		_inv_handler
  5382 ;; This function uses a non-reentrant model
  5383 ;;
  5384                           
  5385                           
  5386                           ;psect for function _PROTOCOL_I2C_Send_int8_t
  5387  0790                     _PROTOCOL_I2C_Send_int8_t:	
  5388                           
  5389                           ;incstack = 0
  5390                           ; Regs used in _PROTOCOL_I2C_Send_int8_t: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5391                           ;PROTOCOL_I2C_Send_int8_t@length stored from wreg
  5392  0790  0020               	movlb	0	; select bank0
  5393  0791  00C6               	movwf	PROTOCOL_I2C_Send_int8_t@length
  5394                           
  5395                           ;protocol.c: 297: if (backplane_slave_enabled) {
  5396  0792  0021               	movlb	1	; select bank1
  5397  0793  083A               	movf	_backplane_slave_enabled^(0+128),w
  5398  0794  1903               	btfsc	3,2
  5399  0795  2FBC               	goto	l4335
  5400                           
  5401                           ;protocol.c: 298: for (i=0; i<length; i++) {
  5402  0796  0020               	movlb	0	; select bank0
  5403  0797  01E5               	clrf	_i
  5404  0798                     l4331:	
  5405  0798  0846               	movf	PROTOCOL_I2C_Send_int8_t@length,w
  5406  0799  0265               	subwf	_i,w
  5407  079A  1803               	btfsc	3,0
  5408  079B  2FB0               	goto	l4333
  5409                           
  5410                           ;protocol.c: 299: sendbuf[i] = (uint8_t)pbuffer[i];
  5411  079C  0865               	movf	_i,w
  5412  079D  0743               	addwf	PROTOCOL_I2C_Send_int8_t@pbuffer,w
  5413  079E  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5414  079F  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5415  07A0  0086               	movwf	6
  5416  07A1  0187               	clrf	7
  5417  07A2  0801               	movf	1,w
  5418  07A3  00C5               	movwf	??_PROTOCOL_I2C_Send_int8_t+1
  5419  07A4  0865               	movf	_i,w
  5420  07A5  3E50               	addlw	(low (_sendbuf| (0+256)))& (0+255)
  5421  07A6  0086               	movwf	6
  5422  07A7  3001               	movlw	1	; select bank2/3
  5423  07A8  0087               	movwf	7
  5424  07A9  0845               	movf	??_PROTOCOL_I2C_Send_int8_t+1,w
  5425  07AA  0081               	movwf	1
  5426  07AB  3001               	movlw	1
  5427  07AC  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5428  07AD  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5429  07AE  07E5               	addwf	_i,f
  5430  07AF  2F98               	goto	l4331
  5431  07B0                     l4333:	
  5432                           
  5433                           ;protocol.c: 300: }
  5434                           ;protocol.c: 301: PROTOCOL_I2C_Set_TLV(0x02, length, &sendbuf[0]);
  5435  07B0  0846               	movf	PROTOCOL_I2C_Send_int8_t@length,w
  5436  07B1  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5437  07B2  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5438  07B3  00A1               	movwf	PROTOCOL_I2C_Set_TLV@length
  5439  07B4  3050               	movlw	low _sendbuf
  5440  07B5  00A2               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer
  5441  07B6  3001               	movlw	high _sendbuf
  5442  07B7  00A3               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer+1
  5443  07B8  3002               	movlw	2
  5444  07B9  318B  23D5         	fcall	_PROTOCOL_I2C_Set_TLV
  5445                           
  5446                           ;protocol.c: 302: } else {
  5447  07BB  0008               	return
  5448  07BC                     l4335:	
  5449                           
  5450                           ;protocol.c: 303: length--;
  5451  07BC  3001               	movlw	1
  5452  07BD  0020               	movlb	0	; select bank0
  5453  07BE  02C6               	subwf	PROTOCOL_I2C_Send_int8_t@length,f
  5454                           
  5455                           ;protocol.c: 304: for (i=0; i<length; i++) printf("%d,", (int8_t)pbuffer[i]);
  5456  07BF  01E5               	clrf	_i
  5457  07C0                     l4343:	
  5458  07C0  0846               	movf	PROTOCOL_I2C_Send_int8_t@length,w
  5459  07C1  0265               	subwf	_i,w
  5460  07C2  1803               	btfsc	3,0
  5461  07C3  2FDC               	goto	l4345
  5462  07C4  3064               	movlw	low (STR_22| (0+32768))
  5463  07C5  00AF               	movwf	printf@f
  5464  07C6  3087               	movlw	high (STR_22| (0+32768))
  5465  07C7  00B0               	movwf	printf@f+1
  5466  07C8  0865               	movf	_i,w
  5467  07C9  0743               	addwf	PROTOCOL_I2C_Send_int8_t@pbuffer,w
  5468  07CA  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5469  07CB  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5470  07CC  0086               	movwf	6
  5471  07CD  0187               	clrf	7
  5472  07CE  0801               	movf	1,w
  5473  07CF  00B1               	movwf	?_printf+2
  5474  07D0  01B2               	clrf	?_printf+3
  5475  07D1  1BB1               	btfsc	?_printf+2,7
  5476  07D2  03B2               	decf	?_printf+3,f
  5477  07D3  3180  2081  3187   	fcall	_printf
  5478  07D6  3001               	movlw	1
  5479  07D7  0020               	movlb	0	; select bank0
  5480  07D8  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5481  07D9  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5482  07DA  07E5               	addwf	_i,f
  5483  07DB  2FC0               	goto	l4343
  5484  07DC                     l4345:	
  5485                           
  5486                           ;protocol.c: 305: printf("%d\n", (int8_t)pbuffer[i]);
  5487  07DC  30EB               	movlw	low ((STR_16+6)| (0+32768))
  5488  07DD  00AF               	movwf	printf@f
  5489  07DE  3086               	movlw	high ((STR_16+6)| (0+32768))
  5490  07DF  00B0               	movwf	printf@f+1
  5491  07E0  0865               	movf	_i,w
  5492  07E1  0743               	addwf	PROTOCOL_I2C_Send_int8_t@pbuffer,w
  5493  07E2  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5494  07E3  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5495  07E4  0086               	movwf	6
  5496  07E5  0187               	clrf	7
  5497  07E6  0801               	movf	1,w
  5498  07E7  00B1               	movwf	?_printf+2
  5499  07E8  01B2               	clrf	?_printf+3
  5500  07E9  1BB1               	btfsc	?_printf+2,7
  5501  07EA  03B2               	decf	?_printf+3,f
  5502  07EB  3180  2081         	fcall	_printf
  5503  07ED  0008               	return
  5504  07EE                     __end_of_PROTOCOL_I2C_Send_int8_t:	
  5505                           
  5506                           	psect	text16
  5507  0081                     __ptext16:	
  5508 ;; *************** function _printf *****************
  5509 ;; Defined at:
  5510 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5511 ;; Parameters:    Size  Location     Type
  5512 ;;  f               2   15[BANK0 ] PTR const unsigned char 
  5513 ;;		 -> STR_48(10), STR_47(9), STR_46(10), STR_45(9), 
  5514 ;;		 -> STR_44(4), STR_43(4), STR_42(4), STR_41(4), 
  5515 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_37(4), 
  5516 ;;		 -> STR_36(14), STR_35(9), STR_34(10), STR_33(9), 
  5517 ;;		 -> STR_32(10), STR_31(9), STR_30(7), STR_29(4), 
  5518 ;;		 -> STR_28(4), STR_27(9), STR_26(4), STR_25(4), 
  5519 ;;		 -> STR_24(10), STR_23(4), STR_22(4), STR_21(8), 
  5520 ;;		 -> STR_20(4), STR_19(4), STR_18(9), STR_17(6), 
  5521 ;;		 -> STR_16(10), STR_13(10), STR_9(10), STR_5(10), 
  5522 ;;		 -> STR_3(5), 
  5523 ;; Auto vars:     Size  Location     Type
  5524 ;;  tmpval          4    0        struct .
  5525 ;;  width           2   32[BANK0 ] int 
  5526 ;;  len             2   29[BANK0 ] unsigned int 
  5527 ;;  val             2   27[BANK0 ] unsigned int 
  5528 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  5529 ;;		 -> STR_10(4), buf(48), STR_2(7), ROM(8192), 
  5530 ;;		 -> printf@c(1), STR_1(10), I2C2_ISR@i2c_address(2), 
  5531 ;;  c               1   34[BANK0 ] char 
  5532 ;;  flag            1   31[BANK0 ] unsigned char 
  5533 ;;  ap              1   26[BANK0 ] PTR void [1]
  5534 ;;		 -> ?_printf(2), 
  5535 ;;  prec            1   23[BANK0 ] char 
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  2   15[BANK0 ] int 
  5538 ;; Registers used:
  5539 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5545 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5546 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5547 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5548 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5549 ;;Total ram usage:       20 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    7
  5552 ;; This function calls:
  5553 ;;		___lwdiv
  5554 ;;		___lwmod
  5555 ;;		___wmul
  5556 ;;		_isdigit
  5557 ;;		_putch
  5558 ;; This function is called by:
  5559 ;;		_PROTOCOL_Loop
  5560 ;;		_PROTOCOL_I2C_Send_int8_t
  5561 ;; This function uses a non-reentrant model
  5562 ;;
  5563                           
  5564                           
  5565                           ;psect for function _printf
  5566  0081                     _printf:	
  5567                           
  5568                           ;doprnt.c: 466: va_list ap;
  5569                           ;doprnt.c: 499: signed char c;
  5570                           ;doprnt.c: 501: int width;
  5571                           ;doprnt.c: 506: signed char prec;
  5572                           ;doprnt.c: 508: unsigned char flag;
  5573                           ;doprnt.c: 523: union {
  5574                           ;doprnt.c: 524: unsigned long vd;
  5575                           ;doprnt.c: 525: double integ;
  5576                           ;doprnt.c: 526: } tmpval;
  5577                           ;doprnt.c: 528: unsigned int val;
  5578                           ;doprnt.c: 529: unsigned len;
  5579                           ;doprnt.c: 530: const char * cp;
  5580                           ;doprnt.c: 533: *ap = __va_start();
  5581                           
  5582                           ;incstack = 0
  5583                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5584  0081  3031               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5585  0082  0020               	movlb	0	; select bank0
  5586  0083  00B3               	movwf	??_printf
  5587  0084  0833               	movf	??_printf,w
  5588  0085  00BA               	movwf	printf@ap
  5589  0086                     l4255:	
  5590                           ;doprnt.c: 536: while(c = *f++) {
  5591                           
  5592  0086  0020               	movlb	0	; select bank0
  5593  0087  0830               	movf	printf@f+1,w
  5594  0088  00B4               	movwf	??_printf+1
  5595  0089  082F               	movf	printf@f,w
  5596  008A  00B3               	movwf	??_printf
  5597  008B  0AAF               	incf	printf@f,f
  5598  008C  1903               	skipnz
  5599  008D  0AB0               	incf	printf@f+1,f
  5600  008E  0833               	movf	??_printf,w
  5601  008F  0084               	movwf	4
  5602  0090  0834               	movf	??_printf+1,w
  5603  0091  0085               	movwf	5
  5604  0092  0800               	movf	0,w	;code access
  5605  0093  00B5               	movwf	??_printf+2
  5606  0094  0835               	movf	??_printf+2,w
  5607  0095  00C2               	movwf	printf@c
  5608  0096  0842               	movf	printf@c,w
  5609  0097  1903               	btfsc	3,2
  5610  0098  0008               	return
  5611                           
  5612                           ;doprnt.c: 538: if(c != '%')
  5613  0099  3025               	movlw	37
  5614  009A  0642               	xorwf	printf@c,w
  5615  009B  1903               	btfsc	3,2
  5616  009C  28A2               	goto	l4131
  5617                           
  5618                           ;doprnt.c: 540: {
  5619                           ;doprnt.c: 541: (putch(c) );
  5620  009D  0842               	movf	printf@c,w
  5621  009E  318A  222C  3180   	fcall	_putch
  5622                           
  5623                           ;doprnt.c: 542: continue;
  5624  00A1  2886               	goto	l4255
  5625  00A2                     l4131:	
  5626                           
  5627                           ;doprnt.c: 543: }
  5628                           ;doprnt.c: 546: width = 0;
  5629  00A2  0020               	movlb	0	; select bank0
  5630  00A3  01C0               	clrf	printf@width
  5631  00A4  01C1               	clrf	printf@width+1
  5632                           
  5633                           ;doprnt.c: 548: flag = 0;
  5634  00A5  01BF               	clrf	printf@flag
  5635                           
  5636                           ;doprnt.c: 551: switch(*f) {
  5637                           
  5638                           ;doprnt.c: 550: for(;;) {
  5639  00A6  28AC               	goto	l4137
  5640  00A7                     l565:	
  5641                           ;doprnt.c: 579: case '0':
  5642                           
  5643                           
  5644                           ;doprnt.c: 580: flag |= 0x04;
  5645  00A7  153F               	bsf	printf@flag,2
  5646                           
  5647                           ;doprnt.c: 581: f++;
  5648  00A8  3001               	movlw	1
  5649  00A9  07AF               	addwf	printf@f,f
  5650  00AA  3000               	movlw	0
  5651  00AB  3DB0               	addwfc	printf@f+1,f
  5652  00AC                     l4137:	
  5653                           ;doprnt.c: 584: }
  5654                           
  5655                           ;doprnt.c: 582: continue;
  5656                           
  5657  00AC  082F               	movf	printf@f,w
  5658  00AD  0084               	movwf	4
  5659  00AE  0830               	movf	printf@f+1,w
  5660  00AF  0085               	movwf	5
  5661  00B0  0800               	movf	0,w	;code access
  5662                           
  5663                           ; Switch size 1, requested type "space"
  5664                           ; Number of cases is 1, Range of values is 48 to 48
  5665                           ; switch strategies available:
  5666                           ; Name         Instructions Cycles
  5667                           ; simple_byte            4     3 (average)
  5668                           ; direct_byte           11     9 (fixed)
  5669                           ; jumptable            263     9 (fixed)
  5670                           ;	Chosen strategy is simple_byte
  5671  00B1  3A30               	xorlw	48	; case 48
  5672  00B2  1903               	skipnz
  5673  00B3  28A7               	goto	l565
  5674  00B4  28B5               	goto	l4139
  5675  00B5                     l4139:	
  5676                           ;doprnt.c: 586: }
  5677                           
  5678                           ;doprnt.c: 585: break;
  5679                           
  5680                           
  5681                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5682  00B5  082F               	movf	printf@f,w
  5683  00B6  0084               	movwf	4
  5684  00B7  0830               	movf	printf@f+1,w
  5685  00B8  0085               	movwf	5
  5686  00B9  0800               	movf	0,w	;code access
  5687  00BA  318A  226F  3180   	fcall	_isdigit
  5688  00BD  1C03               	btfss	3,0
  5689  00BE  2956               	goto	l4187
  5690                           
  5691                           ;doprnt.c: 598: width = 0;
  5692  00BF  0020               	movlb	0	; select bank0
  5693  00C0  01C0               	clrf	printf@width
  5694  00C1  01C1               	clrf	printf@width+1
  5695  00C2                     l4143:	
  5696                           ;doprnt.c: 599: do {
  5697                           
  5698                           
  5699                           ;doprnt.c: 600: width *= 10;
  5700  00C2  300A               	movlw	10
  5701  00C3  0020               	movlb	0	; select bank0
  5702  00C4  00A1               	movwf	___wmul@multiplier
  5703  00C5  3000               	movlw	0
  5704  00C6  00A2               	movwf	___wmul@multiplier+1
  5705  00C7  0841               	movf	printf@width+1,w
  5706  00C8  00A4               	movwf	___wmul@multiplicand+1
  5707  00C9  0840               	movf	printf@width,w
  5708  00CA  00A3               	movwf	___wmul@multiplicand
  5709  00CB  318B  231E  3180   	fcall	___wmul
  5710  00CE  0020               	movlb	0	; select bank0
  5711  00CF  0822               	movf	?___wmul+1,w
  5712  00D0  00C1               	movwf	printf@width+1
  5713  00D1  0821               	movf	?___wmul,w
  5714  00D2  00C0               	movwf	printf@width
  5715                           
  5716                           ;doprnt.c: 601: width += *f++ - '0';
  5717  00D3  082F               	movf	printf@f,w
  5718  00D4  0084               	movwf	4
  5719  00D5  0830               	movf	printf@f+1,w
  5720  00D6  0085               	movwf	5
  5721  00D7  0800               	movf	0,w	;code access
  5722  00D8  3ED0               	addlw	208
  5723  00D9  00B3               	movwf	??_printf
  5724  00DA  30FF               	movlw	255
  5725  00DB  1803               	skipnc
  5726  00DC  3000               	movlw	0
  5727  00DD  00B4               	movwf	??_printf+1
  5728  00DE  0833               	movf	??_printf,w
  5729  00DF  07C0               	addwf	printf@width,f
  5730  00E0  0834               	movf	??_printf+1,w
  5731  00E1  3DC1               	addwfc	printf@width+1,f
  5732  00E2  3001               	movlw	1
  5733  00E3  07AF               	addwf	printf@f,f
  5734  00E4  3000               	movlw	0
  5735  00E5  3DB0               	addwfc	printf@f+1,f
  5736                           
  5737                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5738  00E6  082F               	movf	printf@f,w
  5739  00E7  0084               	movwf	4
  5740  00E8  0830               	movf	printf@f+1,w
  5741  00E9  0085               	movwf	5
  5742  00EA  0800               	movf	0,w	;code access
  5743  00EB  318A  226F  3180   	fcall	_isdigit
  5744  00EE  1C03               	btfss	3,0
  5745  00EF  2956               	goto	l4187
  5746  00F0  28C2               	goto	l4143
  5747  00F1                     l4151:	
  5748                           ;doprnt.c: 728: case 's':
  5749                           
  5750                           ;doprnt.c: 698: case 'i':
  5751                           ;doprnt.c: 699: break;
  5752                           
  5753                           ;doprnt.c: 697: case 'd':
  5754                           
  5755                           ;doprnt.c: 638: goto alldone;
  5756                           
  5757                           ;doprnt.c: 637: case 0:
  5758                           
  5759                           ;doprnt.c: 608: }
  5760                           ;doprnt.c: 635: switch(c = *f++) {
  5761                           
  5762                           
  5763                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5764  00F1  0020               	movlb	0	; select bank0
  5765  00F2  083A               	movf	printf@ap,w
  5766  00F3  0086               	movwf	6
  5767  00F4  0187               	clrf	7
  5768  00F5  3F40               	moviw [0]fsr1
  5769  00F6  00B8               	movwf	printf@cp
  5770  00F7  3F41               	moviw [1]fsr1
  5771  00F8  00B9               	movwf	printf@cp+1
  5772  00F9  3002               	movlw	2
  5773  00FA  00B3               	movwf	??_printf
  5774  00FB  0833               	movf	??_printf,w
  5775  00FC  07BA               	addwf	printf@ap,f
  5776                           
  5777                           ;doprnt.c: 740: if(!cp)
  5778  00FD  0838               	movf	printf@cp,w
  5779  00FE  0439               	iorwf	printf@cp+1,w
  5780  00FF  1D03               	btfss	3,2
  5781  0100  2905               	goto	l4159
  5782                           
  5783                           ;doprnt.c: 741: cp = "(null)";
  5784  0101  304E               	movlw	low (STR_2| (0+32768))
  5785  0102  00B8               	movwf	printf@cp
  5786  0103  3087               	movlw	high (STR_2| (0+32768))
  5787  0104  00B9               	movwf	printf@cp+1
  5788  0105                     l4159:	
  5789                           
  5790                           ;doprnt.c: 745: len = 0;
  5791  0105  01BD               	clrf	printf@len
  5792  0106  01BE               	clrf	printf@len+1
  5793  0107                     l4163:	
  5794                           ;doprnt.c: 746: while(cp[len])
  5795                           
  5796  0107  0838               	movf	printf@cp,w
  5797  0108  073D               	addwf	printf@len,w
  5798  0109  0084               	movwf	4
  5799  010A  0839               	movf	printf@cp+1,w
  5800  010B  3D3E               	addwfc	printf@len+1,w
  5801  010C  0085               	movwf	5
  5802  010D  0012               	moviw fsr0++
  5803  010E  1903               	btfsc	3,2
  5804  010F  2915               	goto	l4165
  5805                           
  5806                           ;doprnt.c: 747: len++;
  5807  0110  3001               	movlw	1
  5808  0111  07BD               	addwf	printf@len,f
  5809  0112  3000               	movlw	0
  5810  0113  3DBE               	addwfc	printf@len+1,f
  5811  0114  2907               	goto	l4163
  5812  0115                     l4165:	
  5813                           ;doprnt.c: 750: dostring:
  5814                           
  5815                           
  5816                           ;doprnt.c: 757: if(width > len)
  5817  0115  0841               	movf	printf@width+1,w
  5818  0116  023E               	subwf	printf@len+1,w
  5819  0117  1D03               	skipz
  5820  0118  291B               	goto	u3555
  5821  0119  0840               	movf	printf@width,w
  5822  011A  023D               	subwf	printf@len,w
  5823  011B                     u3555:	
  5824  011B  1803               	skipnc
  5825  011C  2922               	goto	l4169
  5826                           
  5827                           ;doprnt.c: 758: width -= len;
  5828  011D  083D               	movf	printf@len,w
  5829  011E  02C0               	subwf	printf@width,f
  5830  011F  083E               	movf	printf@len+1,w
  5831  0120  3BC1               	subwfb	printf@width+1,f
  5832  0121  2924               	goto	l4173
  5833  0122                     l4169:	
  5834                           
  5835                           ;doprnt.c: 759: else
  5836                           ;doprnt.c: 760: width = 0;
  5837  0122  01C0               	clrf	printf@width
  5838  0123  01C1               	clrf	printf@width+1
  5839  0124                     l4173:	
  5840                           ;doprnt.c: 764: while(width--)
  5841                           
  5842  0124  30FF               	movlw	255
  5843  0125  0020               	movlb	0	; select bank0
  5844  0126  07C0               	addwf	printf@width,f
  5845  0127  30FF               	movlw	255
  5846  0128  3DC1               	addwfc	printf@width+1,f
  5847  0129  0A40               	incf	printf@width,w
  5848  012A  1903               	btfsc	3,2
  5849  012B  0A41               	incf	printf@width+1,w
  5850  012C  1903               	btfsc	3,2
  5851  012D  2940               	goto	l4179
  5852                           
  5853                           ;doprnt.c: 765: (putch(' ') );
  5854  012E  3020               	movlw	32
  5855  012F  318A  222C  3180   	fcall	_putch
  5856  0132  2924               	goto	l4173
  5857  0133                     l4175:	
  5858                           ;doprnt.c: 767: while(len--)
  5859                           
  5860                           
  5861                           ;doprnt.c: 768: (putch(*cp++) );
  5862  0133  0838               	movf	printf@cp,w
  5863  0134  0084               	movwf	4
  5864  0135  0839               	movf	printf@cp+1,w
  5865  0136  0085               	movwf	5
  5866  0137  0800               	movf	0,w	;code access
  5867  0138  318A  222C  3180   	fcall	_putch
  5868  013B  3001               	movlw	1
  5869  013C  0020               	movlb	0	; select bank0
  5870  013D  07B8               	addwf	printf@cp,f
  5871  013E  3000               	movlw	0
  5872  013F  3DB9               	addwfc	printf@cp+1,f
  5873  0140                     l4179:	
  5874  0140  3001               	movlw	1
  5875  0141  02BD               	subwf	printf@len,f
  5876  0142  3000               	movlw	0
  5877  0143  3BBE               	subwfb	printf@len+1,f
  5878  0144  0A3D               	incf	printf@len,w
  5879  0145  1D03               	skipz
  5880  0146  2933               	goto	l4175
  5881  0147  0A3E               	incf	printf@len+1,w
  5882  0148  1903               	btfsc	3,2
  5883  0149  2886               	goto	l4255
  5884  014A  2933               	goto	l4175
  5885  014B                     l4181:	
  5886                           ;doprnt.c: 802: default:
  5887                           
  5888                           ;doprnt.c: 774: continue;
  5889                           
  5890                           
  5891                           ;doprnt.c: 805: cp = (char *)&c;
  5892  014B  3042               	movlw	low printf@c
  5893  014C  00B8               	movwf	printf@cp
  5894  014D  3000               	movlw	high printf@c
  5895  014E  00B9               	movwf	printf@cp+1
  5896                           
  5897                           ;doprnt.c: 806: len = 1;
  5898  014F  3001               	movlw	1
  5899  0150  00BD               	movwf	printf@len
  5900  0151  3000               	movlw	0
  5901  0152  00BE               	movwf	printf@len+1
  5902                           
  5903                           ;doprnt.c: 807: goto dostring;
  5904  0153  2915               	goto	l4165
  5905  0154                     l593:	
  5906                           ;doprnt.c: 817: case 'u':
  5907                           
  5908                           
  5909                           ;doprnt.c: 818: flag |= 0x40;
  5910  0154  173F               	bsf	printf@flag,6
  5911                           
  5912                           ;doprnt.c: 822: }
  5913                           
  5914                           ;doprnt.c: 819: break;
  5915  0155  2974               	goto	l577
  5916  0156                     l4187:	
  5917  0156  0020               	movlb	0	; select bank0
  5918  0157  0830               	movf	printf@f+1,w
  5919  0158  00B4               	movwf	??_printf+1
  5920  0159  082F               	movf	printf@f,w
  5921  015A  00B3               	movwf	??_printf
  5922  015B  0AAF               	incf	printf@f,f
  5923  015C  1903               	skipnz
  5924  015D  0AB0               	incf	printf@f+1,f
  5925  015E  0833               	movf	??_printf,w
  5926  015F  0084               	movwf	4
  5927  0160  0834               	movf	??_printf+1,w
  5928  0161  0085               	movwf	5
  5929  0162  0800               	movf	0,w	;code access
  5930  0163  00C2               	movwf	printf@c
  5931                           
  5932                           ; Switch size 1, requested type "space"
  5933                           ; Number of cases is 5, Range of values is 0 to 117
  5934                           ; switch strategies available:
  5935                           ; Name         Instructions Cycles
  5936                           ; simple_byte           16     9 (average)
  5937                           ; direct_byte          242     6 (fixed)
  5938                           ; jumptable            260     6 (fixed)
  5939                           ;	Chosen strategy is simple_byte
  5940  0164  3A00               	xorlw	0	; case 0
  5941  0165  1903               	skipnz
  5942  0166  2A55               	goto	l617
  5943  0167  3A64               	xorlw	100	; case 100
  5944  0168  1903               	skipnz
  5945  0169  2974               	goto	l577
  5946  016A  3A0D               	xorlw	13	; case 105
  5947  016B  1903               	skipnz
  5948  016C  2974               	goto	l577
  5949  016D  3A1A               	xorlw	26	; case 115
  5950  016E  1903               	skipnz
  5951  016F  28F1               	goto	l4151
  5952  0170  3A06               	xorlw	6	; case 117
  5953  0171  1903               	skipnz
  5954  0172  2954               	goto	l593
  5955  0173  294B               	goto	l4181
  5956  0174                     l577:	
  5957                           
  5958                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  5959  0174  0020               	movlb	0	; select bank0
  5960  0175  1B3F               	btfsc	printf@flag,6
  5961  0176  298E               	goto	l4199
  5962                           
  5963                           ;doprnt.c: 1253: {
  5964                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5965  0177  083A               	movf	printf@ap,w
  5966  0178  0086               	movwf	6
  5967  0179  0187               	clrf	7
  5968  017A  3F40               	moviw [0]fsr1
  5969  017B  00BB               	movwf	printf@val
  5970  017C  3F41               	moviw [1]fsr1
  5971  017D  00BC               	movwf	printf@val+1
  5972  017E  3002               	movlw	2
  5973  017F  00B3               	movwf	??_printf
  5974  0180  0833               	movf	??_printf,w
  5975  0181  07BA               	addwf	printf@ap,f
  5976                           
  5977                           ;doprnt.c: 1261: if((int)val < 0) {
  5978  0182  1FBC               	btfss	printf@val+1,7
  5979  0183  2999               	goto	l4203
  5980                           
  5981                           ;doprnt.c: 1262: flag |= 0x03;
  5982  0184  3003               	movlw	3
  5983  0185  00B3               	movwf	??_printf
  5984  0186  0833               	movf	??_printf,w
  5985  0187  04BF               	iorwf	printf@flag,f
  5986                           
  5987                           ;doprnt.c: 1263: val = -val;
  5988  0188  09BB               	comf	printf@val,f
  5989  0189  09BC               	comf	printf@val+1,f
  5990  018A  0ABB               	incf	printf@val,f
  5991  018B  1903               	skipnz
  5992  018C  0ABC               	incf	printf@val+1,f
  5993                           
  5994                           ;doprnt.c: 1264: }
  5995                           ;doprnt.c: 1266: }
  5996  018D  2999               	goto	l4203
  5997  018E                     l4199:	
  5998                           
  5999                           ;doprnt.c: 1268: else
  6000                           ;doprnt.c: 1273: {
  6001                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6002  018E  083A               	movf	printf@ap,w
  6003  018F  0086               	movwf	6
  6004  0190  0187               	clrf	7
  6005  0191  3F40               	moviw [0]fsr1
  6006  0192  00BB               	movwf	printf@val
  6007  0193  3F41               	moviw [1]fsr1
  6008  0194  00BC               	movwf	printf@val+1
  6009  0195  3002               	movlw	2
  6010  0196  00B3               	movwf	??_printf
  6011  0197  0833               	movf	??_printf,w
  6012  0198  07BA               	addwf	printf@ap,f
  6013  0199                     l4203:	
  6014                           
  6015                           ;doprnt.c: 1287: }
  6016                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6017  0199  01C2               	clrf	printf@c
  6018  019A  0AC2               	incf	printf@c,f
  6019  019B  3005               	movlw	5
  6020  019C  0642               	xorwf	printf@c,w
  6021  019D  1903               	btfsc	3,2
  6022  019E  29BE               	goto	l4215
  6023  019F                     l4209:	
  6024                           
  6025                           ;doprnt.c: 1306: if(val < dpowers[c])
  6026  019F  0842               	movf	printf@c,w
  6027  01A0  00B3               	movwf	??_printf
  6028  01A1  01B4               	clrf	??_printf+1
  6029  01A2  35B3               	lslf	??_printf,f
  6030  01A3  0DB4               	rlf	??_printf+1,f
  6031  01A4  30CB               	movlw	low (_dpowers| (0+32768))
  6032  01A5  0733               	addwf	??_printf,w
  6033  01A6  0084               	movwf	4
  6034  01A7  3086               	movlw	high (_dpowers| (0+32768))
  6035  01A8  3D34               	addwfc	??_printf+1,w
  6036  01A9  0085               	movwf	5
  6037  01AA  3F00               	moviw [0]fsr0
  6038  01AB  00B5               	movwf	??_printf+2
  6039  01AC  3F01               	moviw [1]fsr0
  6040  01AD  00B6               	movwf	??_printf+3
  6041  01AE  0836               	movf	??_printf+3,w
  6042  01AF  023C               	subwf	printf@val+1,w
  6043  01B0  1D03               	skipz
  6044  01B1  29B4               	goto	u3615
  6045  01B2  0835               	movf	??_printf+2,w
  6046  01B3  023B               	subwf	printf@val,w
  6047  01B4                     u3615:	
  6048  01B4  1C03               	btfss	3,0
  6049  01B5  29BE               	goto	l4215
  6050                           
  6051                           ;doprnt.c: 1307: break;
  6052  01B6  3001               	movlw	1
  6053  01B7  00B3               	movwf	??_printf
  6054  01B8  0833               	movf	??_printf,w
  6055  01B9  07C2               	addwf	printf@c,f
  6056  01BA  3005               	movlw	5
  6057  01BB  0642               	xorwf	printf@c,w
  6058  01BC  1D03               	btfss	3,2
  6059  01BD  299F               	goto	l4209
  6060  01BE                     l4215:	
  6061                           
  6062                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6063  01BE  0840               	movf	printf@width,w
  6064  01BF  0441               	iorwf	printf@width+1,w
  6065  01C0  1903               	btfsc	3,2
  6066  01C1  29CA               	goto	l600
  6067  01C2  083F               	movf	printf@flag,w
  6068  01C3  3903               	andlw	3
  6069  01C4  1903               	btfsc	3,2
  6070  01C5  29CA               	goto	l600
  6071                           
  6072                           ;doprnt.c: 1346: width--;
  6073  01C6  30FF               	movlw	255
  6074  01C7  07C0               	addwf	printf@width,f
  6075  01C8  30FF               	movlw	255
  6076  01C9  3DC1               	addwfc	printf@width+1,f
  6077  01CA                     l600:	
  6078                           
  6079                           ;doprnt.c: 1381: if(width > c)
  6080  01CA  0842               	movf	printf@c,w
  6081  01CB  00B3               	movwf	??_printf
  6082  01CC  01B4               	clrf	??_printf+1
  6083  01CD  1BB3               	btfsc	??_printf,7
  6084  01CE  03B4               	decf	??_printf+1,f
  6085  01CF  0834               	movf	??_printf+1,w
  6086  01D0  3A80               	xorlw	128
  6087  01D1  00B5               	movwf	??_printf+2
  6088  01D2  0841               	movf	printf@width+1,w
  6089  01D3  3A80               	xorlw	128
  6090  01D4  0235               	subwf	??_printf+2,w
  6091  01D5  1D03               	skipz
  6092  01D6  29D9               	goto	u3655
  6093  01D7  0840               	movf	printf@width,w
  6094  01D8  0233               	subwf	??_printf,w
  6095  01D9                     u3655:	
  6096  01D9  1803               	skipnc
  6097  01DA  29E6               	goto	l4223
  6098                           
  6099                           ;doprnt.c: 1382: width -= c;
  6100  01DB  0020               	movlb	0	; select bank0
  6101  01DC  0842               	movf	printf@c,w
  6102  01DD  00B3               	movwf	??_printf
  6103  01DE  01B4               	clrf	??_printf+1
  6104  01DF  1BB3               	btfsc	??_printf,7
  6105  01E0  03B4               	decf	??_printf+1,f
  6106  01E1  0833               	movf	??_printf,w
  6107  01E2  02C0               	subwf	printf@width,f
  6108  01E3  0834               	movf	??_printf+1,w
  6109  01E4  3BC1               	subwfb	printf@width+1,f
  6110  01E5  29E9               	goto	l4225
  6111  01E6                     l4223:	
  6112                           
  6113                           ;doprnt.c: 1383: else
  6114                           ;doprnt.c: 1384: width = 0;
  6115  01E6  0020               	movlb	0	; select bank0
  6116  01E7  01C0               	clrf	printf@width
  6117  01E8  01C1               	clrf	printf@width+1
  6118  01E9                     l4225:	
  6119                           
  6120                           ;doprnt.c: 1387: if(flag & 0x04) {
  6121  01E9  1D3F               	btfss	printf@flag,2
  6122  01EA  2A02               	goto	l4237
  6123                           
  6124                           ;doprnt.c: 1392: if(flag & 0x03)
  6125  01EB  083F               	movf	printf@flag,w
  6126  01EC  3903               	andlw	3
  6127  01ED  1903               	btfsc	3,2
  6128  01EE  29F3               	goto	l4231
  6129                           
  6130                           ;doprnt.c: 1393: (putch('-') );
  6131  01EF  302D               	movlw	45
  6132  01F0  318A  222C  3180   	fcall	_putch
  6133  01F3                     l4231:	
  6134                           
  6135                           ;doprnt.c: 1415: if(width)
  6136  01F3  0020               	movlb	0	; select bank0
  6137  01F4                     L2:	
  6138  01F4  0840               	movf	printf@width,w
  6139  01F5  0441               	iorwf	printf@width+1,w
  6140  01F6  1903               	btfsc	3,2
  6141  01F7  2A1B               	goto	l4247
  6142                           
  6143                           ;doprnt.c: 1417: (putch('0') );
  6144                           
  6145                           ;doprnt.c: 1416: do
  6146  01F8  3030               	movlw	48
  6147  01F9  318A  222C  3180   	fcall	_putch
  6148                           
  6149                           ;doprnt.c: 1418: while(--width);
  6150  01FC  30FF               	movlw	255
  6151  01FD  0020               	movlb	0	; select bank0
  6152  01FE  07C0               	addwf	printf@width,f
  6153  01FF  30FF               	movlw	255
  6154  0200  3DC1               	addwfc	printf@width+1,f
  6155  0201  29F4               	goto	L2
  6156  0202                     l4237:	
  6157                           ;doprnt.c: 1420: } else
  6158                           
  6159                           
  6160                           ;doprnt.c: 1422: {
  6161                           ;doprnt.c: 1424: if(width
  6162                           ;doprnt.c: 1428: )
  6163  0202  0840               	movf	printf@width,w
  6164  0203  0441               	iorwf	printf@width+1,w
  6165  0204  1903               	btfsc	3,2
  6166  0205  2A13               	goto	l4243
  6167  0206                     l4239:	
  6168                           ;doprnt.c: 1429: do
  6169                           
  6170                           
  6171                           ;doprnt.c: 1430: (putch(' ') );
  6172  0206  3020               	movlw	32
  6173  0207  318A  222C  3180   	fcall	_putch
  6174                           
  6175                           ;doprnt.c: 1431: while(--width);
  6176  020A  30FF               	movlw	255
  6177  020B  0020               	movlb	0	; select bank0
  6178  020C  07C0               	addwf	printf@width,f
  6179  020D  30FF               	movlw	255
  6180  020E  3DC1               	addwfc	printf@width+1,f
  6181  020F  0840               	movf	printf@width,w
  6182  0210  0441               	iorwf	printf@width+1,w
  6183  0211  1D03               	btfss	3,2
  6184  0212  2A06               	goto	l4239
  6185  0213                     l4243:	
  6186                           
  6187                           ;doprnt.c: 1438: if(flag & 0x03)
  6188  0213  083F               	movf	printf@flag,w
  6189  0214  3903               	andlw	3
  6190  0215  1903               	btfsc	3,2
  6191  0216  2A1B               	goto	l4247
  6192                           
  6193                           ;doprnt.c: 1439: (putch('-') );
  6194  0217  302D               	movlw	45
  6195  0218  318A  222C  3180   	fcall	_putch
  6196  021B                     l4247:	
  6197                           
  6198                           ;doprnt.c: 1469: }
  6199                           ;doprnt.c: 1472: prec = c;
  6200  021B  0020               	movlb	0	; select bank0
  6201  021C  0842               	movf	printf@c,w
  6202  021D  00B3               	movwf	??_printf
  6203  021E  0833               	movf	??_printf,w
  6204  021F  00B7               	movwf	printf@prec
  6205  0220                     l4253:	
  6206                           ;doprnt.c: 1474: while(prec--) {
  6207                           
  6208  0220  30FF               	movlw	255
  6209  0221  0020               	movlb	0	; select bank0
  6210  0222  00B3               	movwf	??_printf
  6211  0223  0833               	movf	??_printf,w
  6212  0224  07B7               	addwf	printf@prec,f
  6213  0225  0A37               	incf	printf@prec,w
  6214  0226  1903               	btfsc	3,2
  6215  0227  2886               	goto	l4255
  6216                           
  6217                           ;doprnt.c: 1478: {
  6218                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6219  0228  300A               	movlw	10
  6220  0229  00A9               	movwf	___lwmod@divisor
  6221  022A  3000               	movlw	0
  6222  022B  00AA               	movwf	___lwmod@divisor+1
  6223  022C  0837               	movf	printf@prec,w
  6224  022D  00B3               	movwf	??_printf
  6225  022E  01B4               	clrf	??_printf+1
  6226  022F  35B3               	lslf	??_printf,f
  6227  0230  0DB4               	rlf	??_printf+1,f
  6228  0231  30CB               	movlw	low (_dpowers| (0+32768))
  6229  0232  0733               	addwf	??_printf,w
  6230  0233  0084               	movwf	4
  6231  0234  3086               	movlw	high (_dpowers| (0+32768))
  6232  0235  3D34               	addwfc	??_printf+1,w
  6233  0236  0085               	movwf	5
  6234  0237  3F00               	moviw [0]fsr0
  6235  0238  00A1               	movwf	___lwdiv@divisor
  6236  0239  3F01               	moviw [1]fsr0
  6237  023A  00A2               	movwf	___lwdiv@divisor+1
  6238  023B  083C               	movf	printf@val+1,w
  6239  023C  00A4               	movwf	___lwdiv@dividend+1
  6240  023D  083B               	movf	printf@val,w
  6241  023E  00A3               	movwf	___lwdiv@dividend
  6242  023F  318D  25BB  3180   	fcall	___lwdiv
  6243  0242  0020               	movlb	0	; select bank0
  6244  0243  0822               	movf	?___lwdiv+1,w
  6245  0244  00AC               	movwf	___lwmod@dividend+1
  6246  0245  0821               	movf	?___lwdiv,w
  6247  0246  00AB               	movwf	___lwmod@dividend
  6248  0247  318D  2530  3180   	fcall	___lwmod
  6249  024A  0020               	movlb	0	; select bank0
  6250  024B  0829               	movf	?___lwmod,w
  6251  024C  3E30               	addlw	48
  6252  024D  00B5               	movwf	??_printf+2
  6253  024E  0835               	movf	??_printf+2,w
  6254  024F  00C2               	movwf	printf@c
  6255                           
  6256                           ;doprnt.c: 1523: }
  6257                           ;doprnt.c: 1524: (putch(c) );
  6258  0250  0842               	movf	printf@c,w
  6259  0251  318A  222C  3180   	fcall	_putch
  6260  0254  2A20               	goto	l4253
  6261  0255                     l617:	
  6262                           ;doprnt.c: 1540: return 0;
  6263                           ;	Return value of _printf is never used
  6264                           
  6265                           ;doprnt.c: 1525: }
  6266                           ;doprnt.c: 1533: }
  6267                           ;doprnt.c: 1535: alldone:
  6268                           
  6269  0255  0008               	return
  6270  0256                     __end_of_printf:	
  6271                           
  6272                           	psect	text17
  6273  0A2C                     __ptext17:	
  6274 ;; *************** function _putch *****************
  6275 ;; Defined at:
  6276 ;;		line 160 in file "mcc_generated_files/eusart.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;  txData          1    wreg     unsigned char 
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;  txData          1    3[BANK0 ] unsigned char 
  6281 ;; Return value:  Size  Location     Type
  6282 ;;                  1    wreg      void 
  6283 ;; Registers used:
  6284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6285 ;; Tracked objects:
  6286 ;;		On entry : 0/0
  6287 ;;		On exit  : 0/0
  6288 ;;		Unchanged: 0/0
  6289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6291 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;Total ram usage:        1 bytes
  6295 ;; Hardware stack levels used:    1
  6296 ;; Hardware stack levels required when called:    6
  6297 ;; This function calls:
  6298 ;;		_EUSART_Write
  6299 ;; This function is called by:
  6300 ;;		_printf
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           
  6305                           ;psect for function _putch
  6306  0A2C                     _putch:	
  6307                           
  6308                           ;incstack = 0
  6309                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6310                           ;putch@txData stored from wreg
  6311  0A2C  0020               	movlb	0	; select bank0
  6312  0A2D  00A3               	movwf	putch@txData
  6313                           
  6314                           ;eusart.c: 162: EUSART_Write(txData);
  6315  0A2E  0823               	movf	putch@txData,w
  6316  0A2F  318C  241A         	fcall	_EUSART_Write
  6317  0A31  0008               	return
  6318  0A32                     __end_of_putch:	
  6319                           
  6320                           	psect	text18
  6321  0C1A                     __ptext18:	
  6322 ;; *************** function _EUSART_Write *****************
  6323 ;; Defined at:
  6324 ;;		line 132 in file "mcc_generated_files/eusart.c"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;  txData          1    wreg     unsigned char 
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;  txData          1    2[BANK0 ] unsigned char 
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  1    wreg      void 
  6331 ;; Registers used:
  6332 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6341 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6342 ;;Total ram usage:        2 bytes
  6343 ;; Hardware stack levels used:    1
  6344 ;; Hardware stack levels required when called:    5
  6345 ;; This function calls:
  6346 ;;		Nothing
  6347 ;; This function is called by:
  6348 ;;		_putch
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           
  6353                           ;psect for function _EUSART_Write
  6354  0C1A                     _EUSART_Write:	
  6355                           
  6356                           ;incstack = 0
  6357                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6358                           ;EUSART_Write@txData stored from wreg
  6359  0C1A  0020               	movlb	0	; select bank0
  6360  0C1B  00A2               	movwf	EUSART_Write@txData
  6361  0C1C                     l3995:	
  6362                           ;eusart.c: 135: {
  6363                           
  6364                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  6365                           
  6366  0C1C  087A               	movf	_eusartTxBufferRemaining,w	;volatile
  6367  0C1D  1903               	btfsc	3,2
  6368  0C1E  2C1C               	goto	l3995
  6369                           
  6370                           ;eusart.c: 136: }
  6371                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  6372  0C1F  0021               	movlb	1	; select bank1
  6373  0C20  1A11               	btfsc	17,4	;volatile
  6374  0C21  2C27               	goto	l383
  6375                           
  6376                           ;eusart.c: 139: {
  6377                           ;eusart.c: 140: TXREG = txData;
  6378  0C22  0020               	movlb	0	; select bank0
  6379  0C23  0822               	movf	EUSART_Write@txData,w
  6380  0C24  0023               	movlb	3	; select bank3
  6381  0C25  009A               	movwf	26	;volatile
  6382                           
  6383                           ;eusart.c: 141: }
  6384  0C26  2C3B               	goto	l4009
  6385  0C27                     l383:	
  6386                           
  6387                           ;eusart.c: 142: else
  6388                           ;eusart.c: 143: {
  6389                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  6390  0C27  1211               	bcf	17,4	;volatile
  6391                           
  6392                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  6393  0C28  0020               	movlb	0	; select bank0
  6394  0C29  0822               	movf	EUSART_Write@txData,w
  6395  0C2A  00A1               	movwf	??_EUSART_Write
  6396  0C2B  087C               	movf	_eusartTxHead,w
  6397  0C2C  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6398  0C2D  0086               	movwf	6
  6399  0C2E  0187               	clrf	7
  6400  0C2F  0821               	movf	??_EUSART_Write,w
  6401  0C30  0081               	movwf	1
  6402  0C31  3001               	movlw	1
  6403  0C32  00A1               	movwf	??_EUSART_Write
  6404  0C33  0821               	movf	??_EUSART_Write,w
  6405  0C34  07FC               	addwf	_eusartTxHead,f	;volatile
  6406                           
  6407                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6408  0C35  3008               	movlw	8
  6409  0C36  027C               	subwf	_eusartTxHead,w	;volatile
  6410  0C37  1803               	btfsc	3,0
  6411                           
  6412                           ;eusart.c: 147: {
  6413                           ;eusart.c: 148: eusartTxHead = 0;
  6414  0C38  01FC               	clrf	_eusartTxHead	;volatile
  6415                           
  6416                           ;eusart.c: 149: }
  6417                           ;eusart.c: 150: eusartTxBufferRemaining--;
  6418  0C39  3001               	movlw	1
  6419  0C3A  02FA               	subwf	_eusartTxBufferRemaining,f	;volatile
  6420  0C3B                     l4009:	
  6421                           
  6422                           ;eusart.c: 151: }
  6423                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  6424  0C3B  0021               	movlb	1	; select bank1
  6425  0C3C  1611               	bsf	17,4	;volatile
  6426  0C3D  0008               	return
  6427  0C3E                     __end_of_EUSART_Write:	
  6428                           
  6429                           	psect	text19
  6430  0D30                     __ptext19:	
  6431 ;; *************** function ___lwmod *****************
  6432 ;; Defined at:
  6433 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6434 ;; Parameters:    Size  Location     Type
  6435 ;;  divisor         2    9[BANK0 ] unsigned int 
  6436 ;;  dividend        2   11[BANK0 ] unsigned int 
  6437 ;; Auto vars:     Size  Location     Type
  6438 ;;  counter         1   14[BANK0 ] unsigned char 
  6439 ;; Return value:  Size  Location     Type
  6440 ;;                  2    9[BANK0 ] unsigned int 
  6441 ;; Registers used:
  6442 ;;		wreg, status,2, status,0
  6443 ;; Tracked objects:
  6444 ;;		On entry : 0/0
  6445 ;;		On exit  : 0/0
  6446 ;;		Unchanged: 0/0
  6447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6448 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6449 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6450 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;Total ram usage:        6 bytes
  6453 ;; Hardware stack levels used:    1
  6454 ;; Hardware stack levels required when called:    5
  6455 ;; This function calls:
  6456 ;;		Nothing
  6457 ;; This function is called by:
  6458 ;;		_printf
  6459 ;; This function uses a non-reentrant model
  6460 ;;
  6461                           
  6462                           
  6463                           ;psect for function ___lwmod
  6464  0D30                     ___lwmod:	
  6465                           
  6466                           ;incstack = 0
  6467                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6468  0D30  0020               	movlb	0	; select bank0
  6469  0D31  0829               	movf	___lwmod@divisor,w
  6470  0D32  042A               	iorwf	___lwmod@divisor+1,w
  6471  0D33  1903               	btfsc	3,2
  6472  0D34  2D58               	goto	l4109
  6473  0D35  01AE               	clrf	___lwmod@counter
  6474  0D36  0AAE               	incf	___lwmod@counter,f
  6475  0D37                     l4099:	
  6476  0D37  1BAA               	btfsc	___lwmod@divisor+1,7
  6477  0D38  2D43               	goto	l4101
  6478  0D39  3001               	movlw	1
  6479  0D3A                     u3435:	
  6480  0D3A  35A9               	lslf	___lwmod@divisor,f
  6481  0D3B  0DAA               	rlf	___lwmod@divisor+1,f
  6482  0D3C  0B89               	decfsz	9,f
  6483  0D3D  2D3A               	goto	u3435
  6484  0D3E  3001               	movlw	1
  6485  0D3F  00AD               	movwf	??___lwmod
  6486  0D40  082D               	movf	??___lwmod,w
  6487  0D41  07AE               	addwf	___lwmod@counter,f
  6488  0D42  2D37               	goto	l4099
  6489  0D43                     l4101:	
  6490  0D43  082A               	movf	___lwmod@divisor+1,w
  6491  0D44  022C               	subwf	___lwmod@dividend+1,w
  6492  0D45  1D03               	skipz
  6493  0D46  2D49               	goto	u3455
  6494  0D47  0829               	movf	___lwmod@divisor,w
  6495  0D48  022B               	subwf	___lwmod@dividend,w
  6496  0D49                     u3455:	
  6497  0D49  1C03               	skipc
  6498  0D4A  2D4F               	goto	l4105
  6499  0D4B  0829               	movf	___lwmod@divisor,w
  6500  0D4C  02AB               	subwf	___lwmod@dividend,f
  6501  0D4D  082A               	movf	___lwmod@divisor+1,w
  6502  0D4E  3BAC               	subwfb	___lwmod@dividend+1,f
  6503  0D4F                     l4105:	
  6504  0D4F  3001               	movlw	1
  6505  0D50                     u3465:	
  6506  0D50  36AA               	lsrf	___lwmod@divisor+1,f
  6507  0D51  0CA9               	rrf	___lwmod@divisor,f
  6508  0D52  0B89               	decfsz	9,f
  6509  0D53  2D50               	goto	u3465
  6510  0D54  3001               	movlw	1
  6511  0D55  02AE               	subwf	___lwmod@counter,f
  6512  0D56  1D03               	btfss	3,2
  6513  0D57  2D43               	goto	l4101
  6514  0D58                     l4109:	
  6515  0D58  082C               	movf	___lwmod@dividend+1,w
  6516  0D59  00AA               	movwf	?___lwmod+1
  6517  0D5A  082B               	movf	___lwmod@dividend,w
  6518  0D5B  00A9               	movwf	?___lwmod
  6519  0D5C  0008               	return
  6520  0D5D                     __end_of___lwmod:	
  6521                           
  6522                           	psect	text20
  6523  0DBB                     __ptext20:	
  6524 ;; *************** function ___lwdiv *****************
  6525 ;; Defined at:
  6526 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6527 ;; Parameters:    Size  Location     Type
  6528 ;;  divisor         2    1[BANK0 ] unsigned int 
  6529 ;;  dividend        2    3[BANK0 ] unsigned int 
  6530 ;; Auto vars:     Size  Location     Type
  6531 ;;  quotient        2    7[BANK0 ] unsigned int 
  6532 ;;  counter         1    6[BANK0 ] unsigned char 
  6533 ;; Return value:  Size  Location     Type
  6534 ;;                  2    1[BANK0 ] unsigned int 
  6535 ;; Registers used:
  6536 ;;		wreg, status,2, status,0
  6537 ;; Tracked objects:
  6538 ;;		On entry : 0/0
  6539 ;;		On exit  : 0/0
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6542 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6543 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6544 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6545 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;Total ram usage:        8 bytes
  6547 ;; Hardware stack levels used:    1
  6548 ;; Hardware stack levels required when called:    5
  6549 ;; This function calls:
  6550 ;;		Nothing
  6551 ;; This function is called by:
  6552 ;;		_printf
  6553 ;; This function uses a non-reentrant model
  6554 ;;
  6555                           
  6556                           
  6557                           ;psect for function ___lwdiv
  6558  0DBB                     ___lwdiv:	
  6559                           
  6560                           ;incstack = 0
  6561                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6562  0DBB  0020               	movlb	0	; select bank0
  6563  0DBC  01A7               	clrf	___lwdiv@quotient
  6564  0DBD  01A8               	clrf	___lwdiv@quotient+1
  6565  0DBE  0821               	movf	___lwdiv@divisor,w
  6566  0DBF  0422               	iorwf	___lwdiv@divisor+1,w
  6567  0DC0  1903               	btfsc	3,2
  6568  0DC1  2DEB               	goto	l4087
  6569  0DC2  01A6               	clrf	___lwdiv@counter
  6570  0DC3  0AA6               	incf	___lwdiv@counter,f
  6571  0DC4                     l4075:	
  6572  0DC4  1BA2               	btfsc	___lwdiv@divisor+1,7
  6573  0DC5  2DD0               	goto	l4077
  6574  0DC6  3001               	movlw	1
  6575  0DC7                     u3365:	
  6576  0DC7  35A1               	lslf	___lwdiv@divisor,f
  6577  0DC8  0DA2               	rlf	___lwdiv@divisor+1,f
  6578  0DC9  0B89               	decfsz	9,f
  6579  0DCA  2DC7               	goto	u3365
  6580  0DCB  3001               	movlw	1
  6581  0DCC  00A5               	movwf	??___lwdiv
  6582  0DCD  0825               	movf	??___lwdiv,w
  6583  0DCE  07A6               	addwf	___lwdiv@counter,f
  6584  0DCF  2DC4               	goto	l4075
  6585  0DD0                     l4077:	
  6586  0DD0  3001               	movlw	1
  6587  0DD1                     u3385:	
  6588  0DD1  35A7               	lslf	___lwdiv@quotient,f
  6589  0DD2  0DA8               	rlf	___lwdiv@quotient+1,f
  6590  0DD3  0B89               	decfsz	9,f
  6591  0DD4  2DD1               	goto	u3385
  6592  0DD5  0822               	movf	___lwdiv@divisor+1,w
  6593  0DD6  0224               	subwf	___lwdiv@dividend+1,w
  6594  0DD7  1D03               	skipz
  6595  0DD8  2DDB               	goto	u3395
  6596  0DD9  0821               	movf	___lwdiv@divisor,w
  6597  0DDA  0223               	subwf	___lwdiv@dividend,w
  6598  0DDB                     u3395:	
  6599  0DDB  1C03               	skipc
  6600  0DDC  2DE2               	goto	l4083
  6601  0DDD  0821               	movf	___lwdiv@divisor,w
  6602  0DDE  02A3               	subwf	___lwdiv@dividend,f
  6603  0DDF  0822               	movf	___lwdiv@divisor+1,w
  6604  0DE0  3BA4               	subwfb	___lwdiv@dividend+1,f
  6605  0DE1  1427               	bsf	___lwdiv@quotient,0
  6606  0DE2                     l4083:	
  6607  0DE2  3001               	movlw	1
  6608  0DE3                     u3405:	
  6609  0DE3  36A2               	lsrf	___lwdiv@divisor+1,f
  6610  0DE4  0CA1               	rrf	___lwdiv@divisor,f
  6611  0DE5  0B89               	decfsz	9,f
  6612  0DE6  2DE3               	goto	u3405
  6613  0DE7  3001               	movlw	1
  6614  0DE8  02A6               	subwf	___lwdiv@counter,f
  6615  0DE9  1D03               	btfss	3,2
  6616  0DEA  2DD0               	goto	l4077
  6617  0DEB                     l4087:	
  6618  0DEB  0828               	movf	___lwdiv@quotient+1,w
  6619  0DEC  00A2               	movwf	?___lwdiv+1
  6620  0DED  0827               	movf	___lwdiv@quotient,w
  6621  0DEE  00A1               	movwf	?___lwdiv
  6622  0DEF  0008               	return
  6623  0DF0                     __end_of___lwdiv:	
  6624                           
  6625                           	psect	text21
  6626  0BD5                     __ptext21:	
  6627 ;; *************** function _PROTOCOL_I2C_Set_TLV *****************
  6628 ;; Defined at:
  6629 ;;		line 207 in file "protocol.c"
  6630 ;; Parameters:    Size  Location     Type
  6631 ;;  type            1    wreg     unsigned char 
  6632 ;;  length          1    1[BANK0 ] unsigned char 
  6633 ;;  pbuffer         2    2[BANK0 ] PTR unsigned char 
  6634 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), 
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;  type            1    5[BANK0 ] unsigned char 
  6637 ;;  status          1    6[BANK0 ] enum E3406
  6638 ;; Return value:  Size  Location     Type
  6639 ;;                  1    wreg      void 
  6640 ;; Registers used:
  6641 ;;		wreg, status,2, status,0
  6642 ;; Tracked objects:
  6643 ;;		On entry : 0/0
  6644 ;;		On exit  : 0/0
  6645 ;;		Unchanged: 0/0
  6646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6647 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6650 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6651 ;;Total ram usage:        6 bytes
  6652 ;; Hardware stack levels used:    1
  6653 ;; Hardware stack levels required when called:    5
  6654 ;; This function calls:
  6655 ;;		Nothing
  6656 ;; This function is called by:
  6657 ;;		_PROTOCOL_I2C_Send_int8_t
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           
  6662                           ;psect for function _PROTOCOL_I2C_Set_TLV
  6663  0BD5                     _PROTOCOL_I2C_Set_TLV:	
  6664                           
  6665                           ;incstack = 0
  6666                           ; Regs used in _PROTOCOL_I2C_Set_TLV: [wreg+status,2+status,0]
  6667                           ;PROTOCOL_I2C_Set_TLV@type stored from wreg
  6668  0BD5  0020               	movlb	0	; select bank0
  6669  0BD6  00A5               	movwf	PROTOCOL_I2C_Set_TLV@type
  6670                           
  6671                           ;protocol.c: 208: READBUF_STATUS status = readbuf.status;
  6672  0BD7  0021               	movlb	1	; select bank1
  6673  0BD8  0851               	movf	(_readbuf^(0+128)+4),w
  6674  0BD9  0020               	movlb	0	; select bank0
  6675  0BDA  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  6676  0BDB  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  6677  0BDC  00A6               	movwf	PROTOCOL_I2C_Set_TLV@status
  6678                           
  6679                           ;protocol.c: 209: if (status == COMPLETE) {
  6680  0BDD  3003               	movlw	3
  6681  0BDE  0626               	xorwf	PROTOCOL_I2C_Set_TLV@status,w
  6682  0BDF  1D03               	btfss	3,2
  6683  0BE0  0008               	return
  6684                           
  6685                           ;protocol.c: 210: readbuf.type = type;
  6686  0BE1  0825               	movf	PROTOCOL_I2C_Set_TLV@type,w
  6687  0BE2  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  6688  0BE3  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  6689  0BE4  0021               	movlb	1	; select bank1
  6690  0BE5  00CD               	movwf	_readbuf^(0+128)
  6691                           
  6692                           ;protocol.c: 211: readbuf.length = length;
  6693  0BE6  0020               	movlb	0	; select bank0
  6694  0BE7  0821               	movf	PROTOCOL_I2C_Set_TLV@length,w
  6695  0BE8  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  6696  0BE9  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  6697  0BEA  0021               	movlb	1	; select bank1
  6698  0BEB  00CE               	movwf	(_readbuf^(0+128)+1)
  6699                           
  6700                           ;protocol.c: 212: readbuf.pbuffer = pbuffer;
  6701  0BEC  0020               	movlb	0	; select bank0
  6702  0BED  0823               	movf	PROTOCOL_I2C_Set_TLV@pbuffer+1,w
  6703  0BEE  0021               	movlb	1	; select bank1
  6704  0BEF  00D0               	movwf	((low ((_readbuf| 0+2))+1))^(0+128)
  6705  0BF0  0020               	movlb	0	; select bank0
  6706  0BF1  0822               	movf	PROTOCOL_I2C_Set_TLV@pbuffer,w
  6707  0BF2  0021               	movlb	1	; select bank1
  6708  0BF3  00CF               	movwf	(low ((_readbuf| 0+2)))^(0+128)
  6709                           
  6710                           ;protocol.c: 213: readbuf.buf_cnt = 0;
  6711  0BF4  01D2               	clrf	(_readbuf^(0+128)+5)
  6712                           
  6713                           ;protocol.c: 214: readbuf.status = TLV_SET;
  6714  0BF5  01D1               	clrf	(_readbuf^(0+128)+4)
  6715  0BF6  0008               	return
  6716  0BF7                     __end_of_PROTOCOL_I2C_Set_TLV:	
  6717                           
  6718                           	psect	text22
  6719  0F0D                     __ptext22:	
  6720 ;; *************** function _atoi *****************
  6721 ;; Defined at:
  6722 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;  s               1    wreg     PTR const unsigned char 
  6725 ;;		 -> buf(48), 
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;  s               1   14[BANK0 ] PTR const unsigned char 
  6728 ;;		 -> buf(48), 
  6729 ;;  a               2   12[BANK0 ] int 
  6730 ;;  sign            1   11[BANK0 ] unsigned char 
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  2    7[BANK0 ] int 
  6733 ;; Registers used:
  6734 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6740 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6741 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6742 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6743 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6744 ;;Total ram usage:        8 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    6
  6747 ;; This function calls:
  6748 ;;		___wmul
  6749 ;;		_isdigit
  6750 ;; This function is called by:
  6751 ;;		_PROTOCOL_Loop
  6752 ;; This function uses a non-reentrant model
  6753 ;;
  6754                           
  6755                           
  6756                           ;psect for function _atoi
  6757  0F0D                     _atoi:	
  6758                           
  6759                           ;incstack = 0
  6760                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6761                           ;atoi@s stored from wreg
  6762  0F0D  0020               	movlb	0	; select bank0
  6763  0F0E  00AE               	movwf	atoi@s
  6764  0F0F                     l4485:	
  6765  0F0F  082E               	movf	atoi@s,w
  6766  0F10  0086               	movwf	6
  6767  0F11  3001               	movlw	1	; select bank2/3
  6768  0F12  0087               	movwf	7
  6769  0F13  3020               	movlw	32
  6770  0F14  0601               	xorwf	1,w
  6771  0F15  1D03               	btfss	3,2
  6772  0F16  2F1C               	goto	l4487
  6773  0F17                     l4483:	
  6774  0F17  3001               	movlw	1
  6775  0F18  00A9               	movwf	??_atoi
  6776  0F19  0829               	movf	??_atoi,w
  6777  0F1A  07AE               	addwf	atoi@s,f
  6778  0F1B  2F0F               	goto	l4485
  6779  0F1C                     l4487:	
  6780  0F1C  082E               	movf	atoi@s,w
  6781  0F1D  0086               	movwf	6
  6782  0F1E  3001               	movlw	1	; select bank2/3
  6783  0F1F  0087               	movwf	7
  6784  0F20  3009               	movlw	9
  6785  0F21  0601               	xorwf	1,w
  6786  0F22  1903               	btfsc	3,2
  6787  0F23  2F17               	goto	l4483
  6788  0F24  01AC               	clrf	atoi@a
  6789  0F25  01AD               	clrf	atoi@a+1
  6790  0F26  01AB               	clrf	atoi@sign
  6791  0F27  082E               	movf	atoi@s,w
  6792  0F28  0086               	movwf	6
  6793  0F29  3001               	movlw	1	; select bank2/3
  6794  0F2A  0087               	movwf	7
  6795  0F2B  302D               	movlw	45
  6796  0F2C  0601               	xorwf	1,w
  6797  0F2D  1D03               	btfss	3,2
  6798  0F2E  2F34               	goto	l4495
  6799  0F2F  3001               	movlw	1
  6800  0F30  00A9               	movwf	??_atoi
  6801  0F31  0829               	movf	??_atoi,w
  6802  0F32  07AB               	addwf	atoi@sign,f
  6803  0F33  2F3C               	goto	l4501
  6804  0F34                     l4495:	
  6805  0F34  082E               	movf	atoi@s,w
  6806  0F35  0086               	movwf	6
  6807  0F36  3001               	movlw	1	; select bank2/3
  6808  0F37  0087               	movwf	7
  6809  0F38  302B               	movlw	43
  6810  0F39  0601               	xorwf	1,w
  6811  0F3A  1D03               	btfss	3,2
  6812  0F3B  2F40               	goto	l4503
  6813  0F3C                     l4501:	
  6814  0F3C  3001               	movlw	1
  6815  0F3D  00A9               	movwf	??_atoi
  6816  0F3E  0829               	movf	??_atoi,w
  6817  0F3F  07AE               	addwf	atoi@s,f
  6818  0F40                     l4503:	
  6819  0F40  082E               	movf	atoi@s,w
  6820  0F41  0086               	movwf	6
  6821  0F42  3001               	movlw	1	; select bank2/3
  6822  0F43  0087               	movwf	7
  6823  0F44  0801               	movf	1,w
  6824  0F45  318A  226F  318F   	fcall	_isdigit
  6825  0F48  1C03               	btfss	3,0
  6826  0F49  2F69               	goto	l4505
  6827  0F4A  0020               	movlb	0	; select bank0
  6828  0F4B  082D               	movf	atoi@a+1,w
  6829  0F4C  00A2               	movwf	___wmul@multiplier+1
  6830  0F4D  082C               	movf	atoi@a,w
  6831  0F4E  00A1               	movwf	___wmul@multiplier
  6832  0F4F  300A               	movlw	10
  6833  0F50  00A3               	movwf	___wmul@multiplicand
  6834  0F51  3000               	movlw	0
  6835  0F52  00A4               	movwf	___wmul@multiplicand+1
  6836  0F53  318B  231E  318F   	fcall	___wmul
  6837  0F56  0020               	movlb	0	; select bank0
  6838  0F57  082E               	movf	atoi@s,w
  6839  0F58  0086               	movwf	6
  6840  0F59  3001               	movlw	1	; select bank2/3
  6841  0F5A  0087               	movwf	7
  6842  0F5B  0801               	movf	1,w
  6843  0F5C  0721               	addwf	?___wmul,w
  6844  0F5D  00A9               	movwf	??_atoi
  6845  0F5E  0822               	movf	?___wmul+1,w
  6846  0F5F  1803               	skipnc
  6847  0F60  0A22               	incf	?___wmul+1,w
  6848  0F61  00AA               	movwf	??_atoi+1
  6849  0F62  0829               	movf	??_atoi,w
  6850  0F63  3ED0               	addlw	208
  6851  0F64  00AC               	movwf	atoi@a
  6852  0F65  30FF               	movlw	255
  6853  0F66  3D2A               	addwfc	??_atoi+1,w
  6854  0F67  00AD               	movwf	atoi@a+1
  6855  0F68  2F3C               	goto	l4501
  6856  0F69                     l4505:	
  6857  0F69  0020               	movlb	0	; select bank0
  6858  0F6A  082B               	movf	atoi@sign,w
  6859  0F6B  1903               	btfsc	3,2
  6860  0F6C  2F79               	goto	l4511
  6861  0F6D  092C               	comf	atoi@a,w
  6862  0F6E  00A9               	movwf	??_atoi
  6863  0F6F  092D               	comf	atoi@a+1,w
  6864  0F70  00AA               	movwf	??_atoi+1
  6865  0F71  0AA9               	incf	??_atoi,f
  6866  0F72  1903               	skipnz
  6867  0F73  0AAA               	incf	??_atoi+1,f
  6868  0F74  0829               	movf	??_atoi,w
  6869  0F75  00A7               	movwf	?_atoi
  6870  0F76  082A               	movf	??_atoi+1,w
  6871  0F77  00A8               	movwf	?_atoi+1
  6872  0F78  0008               	return
  6873  0F79                     l4511:	
  6874  0F79  082D               	movf	atoi@a+1,w
  6875  0F7A  00A8               	movwf	?_atoi+1
  6876  0F7B  082C               	movf	atoi@a,w
  6877  0F7C  00A7               	movwf	?_atoi
  6878  0F7D  0008               	return
  6879  0F7E                     __end_of_atoi:	
  6880                           
  6881                           	psect	text23
  6882  0A6F                     __ptext23:	
  6883 ;; *************** function _isdigit *****************
  6884 ;; Defined at:
  6885 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;  c               1    wreg     unsigned char 
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;  c               1    2[BANK0 ] unsigned char 
  6890 ;; Return value:  Size  Location     Type
  6891 ;;		None               void
  6892 ;; Registers used:
  6893 ;;		wreg, status,2, status,0
  6894 ;; Tracked objects:
  6895 ;;		On entry : 0/0
  6896 ;;		On exit  : 0/0
  6897 ;;		Unchanged: 0/0
  6898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6900 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6902 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6903 ;;Total ram usage:        2 bytes
  6904 ;; Hardware stack levels used:    1
  6905 ;; Hardware stack levels required when called:    5
  6906 ;; This function calls:
  6907 ;;		Nothing
  6908 ;; This function is called by:
  6909 ;;		_printf
  6910 ;;		_atoi
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           
  6915                           ;psect for function _isdigit
  6916  0A6F                     _isdigit:	
  6917                           
  6918                           ;incstack = 0
  6919                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6920                           ;isdigit@c stored from wreg
  6921  0A6F  0020               	movlb	0	; select bank0
  6922  0A70  00A2               	movwf	isdigit@c
  6923  0A71  01A1               	clrf	_isdigit$1477
  6924  0A72  303A               	movlw	58
  6925  0A73  0222               	subwf	isdigit@c,w
  6926  0A74  1803               	skipnc
  6927  0A75  2A7C               	goto	l4047
  6928  0A76  3030               	movlw	48
  6929  0A77  0222               	subwf	isdigit@c,w
  6930  0A78  1C03               	skipc
  6931  0A79  2A7C               	goto	l4047
  6932  0A7A  01A1               	clrf	_isdigit$1477
  6933  0A7B  0AA1               	incf	_isdigit$1477,f
  6934  0A7C                     l4047:	
  6935  0A7C  0C21               	rrf	_isdigit$1477,w
  6936  0A7D  0008               	return
  6937  0A7E                     __end_of_isdigit:	
  6938                           
  6939                           	psect	text24
  6940  0B1E                     __ptext24:	
  6941 ;; *************** function ___wmul *****************
  6942 ;; Defined at:
  6943 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  6944 ;; Parameters:    Size  Location     Type
  6945 ;;  multiplier      2    1[BANK0 ] unsigned int 
  6946 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  6947 ;; Auto vars:     Size  Location     Type
  6948 ;;  product         2    5[BANK0 ] unsigned int 
  6949 ;; Return value:  Size  Location     Type
  6950 ;;                  2    1[BANK0 ] unsigned int 
  6951 ;; Registers used:
  6952 ;;		wreg, status,2, status,0
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6958 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6959 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6961 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6962 ;;Total ram usage:        6 bytes
  6963 ;; Hardware stack levels used:    1
  6964 ;; Hardware stack levels required when called:    5
  6965 ;; This function calls:
  6966 ;;		Nothing
  6967 ;; This function is called by:
  6968 ;;		_printf
  6969 ;;		_atoi
  6970 ;; This function uses a non-reentrant model
  6971 ;;
  6972                           
  6973                           
  6974                           ;psect for function ___wmul
  6975  0B1E                     ___wmul:	
  6976                           
  6977                           ;incstack = 0
  6978                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6979  0B1E  0020               	movlb	0	; select bank0
  6980  0B1F  01A5               	clrf	___wmul@product
  6981  0B20  01A6               	clrf	___wmul@product+1
  6982  0B21                     l4053:	
  6983  0B21  1C21               	btfss	___wmul@multiplier,0
  6984  0B22  2B27               	goto	l1058
  6985  0B23  0823               	movf	___wmul@multiplicand,w
  6986  0B24  07A5               	addwf	___wmul@product,f
  6987  0B25  0824               	movf	___wmul@multiplicand+1,w
  6988  0B26  3DA6               	addwfc	___wmul@product+1,f
  6989  0B27                     l1058:	
  6990  0B27  3001               	movlw	1
  6991  0B28                     u3325:	
  6992  0B28  35A3               	lslf	___wmul@multiplicand,f
  6993  0B29  0DA4               	rlf	___wmul@multiplicand+1,f
  6994  0B2A  0B89               	decfsz	9,f
  6995  0B2B  2B28               	goto	u3325
  6996  0B2C  3001               	movlw	1
  6997  0B2D                     u3335:	
  6998  0B2D  36A2               	lsrf	___wmul@multiplier+1,f
  6999  0B2E  0CA1               	rrf	___wmul@multiplier,f
  7000  0B2F  0B89               	decfsz	9,f
  7001  0B30  2B2D               	goto	u3335
  7002  0B31  0821               	movf	___wmul@multiplier,w
  7003  0B32  0422               	iorwf	___wmul@multiplier+1,w
  7004  0B33  1D03               	btfss	3,2
  7005  0B34  2B21               	goto	l4053
  7006  0B35  0826               	movf	___wmul@product+1,w
  7007  0B36  00A2               	movwf	?___wmul+1
  7008  0B37  0825               	movf	___wmul@product,w
  7009  0B38  00A1               	movwf	?___wmul
  7010  0B39  0008               	return
  7011  0B3A                     __end_of___wmul:	
  7012                           
  7013                           	psect	text25
  7014  0A1F                     __ptext25:	
  7015 ;; *************** function _TMR0_HasOverflowOccured *****************
  7016 ;; Defined at:
  7017 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;		None
  7020 ;; Auto vars:     Size  Location     Type
  7021 ;;		None
  7022 ;; Return value:  Size  Location     Type
  7023 ;;                  1    wreg      unsigned char 
  7024 ;; Registers used:
  7025 ;;		wreg, status,2, status,0
  7026 ;; Tracked objects:
  7027 ;;		On entry : 0/0
  7028 ;;		On exit  : 0/0
  7029 ;;		Unchanged: 0/0
  7030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7034 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7035 ;;Total ram usage:        0 bytes
  7036 ;; Hardware stack levels used:    1
  7037 ;; Hardware stack levels required when called:    5
  7038 ;; This function calls:
  7039 ;;		Nothing
  7040 ;; This function is called by:
  7041 ;;		_PROTOCOL_Loop
  7042 ;; This function uses a non-reentrant model
  7043 ;;
  7044                           
  7045                           
  7046                           ;psect for function _TMR0_HasOverflowOccured
  7047  0A1F                     _TMR0_HasOverflowOccured:	
  7048                           
  7049                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  7050                           
  7051                           ;incstack = 0
  7052                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  7053  0A1F  0C0B               	rrf	11,w	;volatile
  7054  0A20  0C89               	rrf	9,f
  7055  0A21  3901               	andlw	1
  7056  0A22  0008               	return
  7057  0A23                     __end_of_TMR0_HasOverflowOccured:	
  7058                           
  7059                           	psect	text26
  7060  0A8D                     __ptext26:	
  7061 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  7062 ;; Defined at:
  7063 ;;		line 84 in file "protocol.c"
  7064 ;; Parameters:    Size  Location     Type
  7065 ;;  device_id_i2    1    wreg     unsigned char 
  7066 ;; Auto vars:     Size  Location     Type
  7067 ;;  device_id_i2    1    5[BANK0 ] unsigned char 
  7068 ;; Return value:  Size  Location     Type
  7069 ;;                  1    wreg      void 
  7070 ;; Registers used:
  7071 ;;		wreg, status,2, status,0, pclath, cstack
  7072 ;; Tracked objects:
  7073 ;;		On entry : 0/0
  7074 ;;		On exit  : 0/0
  7075 ;;		Unchanged: 0/0
  7076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7078 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7079 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7081 ;;Total ram usage:        2 bytes
  7082 ;; Hardware stack levels used:    1
  7083 ;; Hardware stack levels required when called:    6
  7084 ;; This function calls:
  7085 ;;		_DATAEE_WriteByte
  7086 ;; This function is called by:
  7087 ;;		_PROTOCOL_Loop
  7088 ;; This function uses a non-reentrant model
  7089 ;;
  7090                           
  7091                           
  7092                           ;psect for function _PROTOCOL_Write_Device_Address
  7093  0A8D                     _PROTOCOL_Write_Device_Address:	
  7094                           
  7095                           ;incstack = 0
  7096                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  7097                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  7098  0A8D  0020               	movlb	0	; select bank0
  7099  0A8E  00A5               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  7100                           
  7101                           ;protocol.c: 85: DATAEE_WriteByte(0, device_id_i2c);
  7102  0A8F  0825               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7103  0A90  00A4               	movwf	??_PROTOCOL_Write_Device_Address
  7104  0A91  0824               	movf	??_PROTOCOL_Write_Device_Address,w
  7105  0A92  00A1               	movwf	DATAEE_WriteByte@bData
  7106  0A93  3000               	movlw	0
  7107  0A94  318B  23F7         	fcall	_DATAEE_WriteByte
  7108                           
  7109                           ;protocol.c: 86: slave_address = device_id_i2c;
  7110  0A96  0020               	movlb	0	; select bank0
  7111  0A97  0825               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7112  0A98  00A4               	movwf	??_PROTOCOL_Write_Device_Address
  7113  0A99  0824               	movf	??_PROTOCOL_Write_Device_Address,w
  7114  0A9A  0021               	movlb	1	; select bank1
  7115  0A9B  00C3               	movwf	_slave_address^(0+128)
  7116  0A9C  0008               	return
  7117  0A9D                     __end_of_PROTOCOL_Write_Device_Address:	
  7118                           
  7119                           	psect	text27
  7120  0A09                     __ptext27:	
  7121 ;; *************** function _PROTOCOL_STP *****************
  7122 ;; Defined at:
  7123 ;;		line 98 in file "protocol.c"
  7124 ;; Parameters:    Size  Location     Type
  7125 ;;		None
  7126 ;; Auto vars:     Size  Location     Type
  7127 ;;		None
  7128 ;; Return value:  Size  Location     Type
  7129 ;;                  1    wreg      void 
  7130 ;; Registers used:
  7131 ;;		wreg, status,2, status,0
  7132 ;; Tracked objects:
  7133 ;;		On entry : 0/0
  7134 ;;		On exit  : 0/0
  7135 ;;		Unchanged: 0/0
  7136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7141 ;;Total ram usage:        0 bytes
  7142 ;; Hardware stack levels used:    1
  7143 ;; Hardware stack levels required when called:    5
  7144 ;; This function calls:
  7145 ;;		Nothing
  7146 ;; This function is called by:
  7147 ;;		_PROTOCOL_Loop
  7148 ;; This function uses a non-reentrant model
  7149 ;;
  7150                           
  7151                           
  7152                           ;psect for function _PROTOCOL_STP
  7153  0A09                     _PROTOCOL_STP:	
  7154                           
  7155                           ;protocol.c: 100: running = 0;
  7156                           
  7157                           ;incstack = 0
  7158                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  7159  0A09  0021               	movlb	1	; select bank1
  7160  0A0A  01C0               	clrf	_running^(0+128)
  7161  0A0B  0008               	return
  7162  0A0C                     __end_of_PROTOCOL_STP:	
  7163                           
  7164                           	psect	text28
  7165  0A1B                     __ptext28:	
  7166 ;; *************** function _PROTOCOL_STA *****************
  7167 ;; Defined at:
  7168 ;;		line 93 in file "protocol.c"
  7169 ;; Parameters:    Size  Location     Type
  7170 ;;		None
  7171 ;; Auto vars:     Size  Location     Type
  7172 ;;		None
  7173 ;; Return value:  Size  Location     Type
  7174 ;;                  1    wreg      void 
  7175 ;; Registers used:
  7176 ;;		wreg, status,2, status,0
  7177 ;; Tracked objects:
  7178 ;;		On entry : 0/0
  7179 ;;		On exit  : 0/0
  7180 ;;		Unchanged: 0/0
  7181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7186 ;;Total ram usage:        0 bytes
  7187 ;; Hardware stack levels used:    1
  7188 ;; Hardware stack levels required when called:    5
  7189 ;; This function calls:
  7190 ;;		Nothing
  7191 ;; This function is called by:
  7192 ;;		_PROTOCOL_Loop
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           
  7197                           ;psect for function _PROTOCOL_STA
  7198  0A1B                     _PROTOCOL_STA:	
  7199                           
  7200                           ;protocol.c: 95: running = 1;
  7201                           
  7202                           ;incstack = 0
  7203                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  7204  0A1B  0021               	movlb	1	; select bank1
  7205  0A1C  01C0               	clrf	_running^(0+128)
  7206  0A1D  0AC0               	incf	_running^(0+128),f
  7207  0A1E  0008               	return
  7208  0A1F                     __end_of_PROTOCOL_STA:	
  7209                           
  7210                           	psect	text29
  7211  0A3F                     __ptext29:	
  7212 ;; *************** function _PROTOCOL_SET *****************
  7213 ;; Defined at:
  7214 ;;		line 111 in file "protocol.c"
  7215 ;; Parameters:    Size  Location     Type
  7216 ;;  value_          1    wreg     unsigned char 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;  value_          1    2[BANK0 ] unsigned char 
  7219 ;; Return value:  Size  Location     Type
  7220 ;;                  1    wreg      void 
  7221 ;; Registers used:
  7222 ;;		wreg, status,2, status,0
  7223 ;; Tracked objects:
  7224 ;;		On entry : 0/0
  7225 ;;		On exit  : 0/0
  7226 ;;		Unchanged: 0/0
  7227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7230 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7232 ;;Total ram usage:        2 bytes
  7233 ;; Hardware stack levels used:    1
  7234 ;; Hardware stack levels required when called:    5
  7235 ;; This function calls:
  7236 ;;		Nothing
  7237 ;; This function is called by:
  7238 ;;		_PROTOCOL_Loop
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           
  7243                           ;psect for function _PROTOCOL_SET
  7244  0A3F                     _PROTOCOL_SET:	
  7245                           
  7246                           ;incstack = 0
  7247                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  7248                           ;PROTOCOL_SET@value_ stored from wreg
  7249  0A3F  0020               	movlb	0	; select bank0
  7250  0A40  00A2               	movwf	PROTOCOL_SET@value_
  7251                           
  7252                           ;protocol.c: 112: value = value_;
  7253  0A41  0822               	movf	PROTOCOL_SET@value_,w
  7254  0A42  00A1               	movwf	??_PROTOCOL_SET
  7255  0A43  0821               	movf	??_PROTOCOL_SET,w
  7256  0A44  00E6               	movwf	_value
  7257  0A45  0008               	return
  7258  0A46                     __end_of_PROTOCOL_SET:	
  7259                           
  7260                           	psect	text30
  7261  0A4F                     __ptext30:	
  7262 ;; *************** function _PROTOCOL_SAV *****************
  7263 ;; Defined at:
  7264 ;;		line 107 in file "protocol.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;		None
  7267 ;; Auto vars:     Size  Location     Type
  7268 ;;		None
  7269 ;; Return value:  Size  Location     Type
  7270 ;;                  1    wreg      void 
  7271 ;; Registers used:
  7272 ;;		wreg, status,2, status,0, pclath, cstack
  7273 ;; Tracked objects:
  7274 ;;		On entry : 0/0
  7275 ;;		On exit  : 0/0
  7276 ;;		Unchanged: 0/0
  7277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7280 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7281 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7282 ;;Total ram usage:        1 bytes
  7283 ;; Hardware stack levels used:    1
  7284 ;; Hardware stack levels required when called:    6
  7285 ;; This function calls:
  7286 ;;		_DATAEE_WriteByte
  7287 ;; This function is called by:
  7288 ;;		_PROTOCOL_Loop
  7289 ;; This function uses a non-reentrant model
  7290 ;;
  7291                           
  7292                           
  7293                           ;psect for function _PROTOCOL_SAV
  7294  0A4F                     _PROTOCOL_SAV:	
  7295                           
  7296                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
  7297                           
  7298                           ;incstack = 0
  7299                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  7300  0A4F  0020               	movlb	0	; select bank0
  7301  0A50  0866               	movf	_value,w
  7302  0A51  00A4               	movwf	??_PROTOCOL_SAV
  7303  0A52  0824               	movf	??_PROTOCOL_SAV,w
  7304  0A53  00A1               	movwf	DATAEE_WriteByte@bData
  7305  0A54  3001               	movlw	1
  7306  0A55  318B  23F7         	fcall	_DATAEE_WriteByte
  7307  0A57  0008               	return
  7308  0A58                     __end_of_PROTOCOL_SAV:	
  7309                           
  7310                           	psect	text31
  7311  0BF7                     __ptext31:	
  7312 ;; *************** function _DATAEE_WriteByte *****************
  7313 ;; Defined at:
  7314 ;;		line 180 in file "mcc_generated_files/memory.c"
  7315 ;; Parameters:    Size  Location     Type
  7316 ;;  bAdd            1    wreg     unsigned char 
  7317 ;;  bData           1    1[BANK0 ] unsigned char 
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;  bAdd            1    2[BANK0 ] unsigned char 
  7320 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  7321 ;; Return value:  Size  Location     Type
  7322 ;;                  1    wreg      void 
  7323 ;; Registers used:
  7324 ;;		wreg, status,2, status,0
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : 0/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7330 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7331 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7333 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7334 ;;Total ram usage:        3 bytes
  7335 ;; Hardware stack levels used:    1
  7336 ;; Hardware stack levels required when called:    5
  7337 ;; This function calls:
  7338 ;;		Nothing
  7339 ;; This function is called by:
  7340 ;;		_PROTOCOL_Write_Device_Address
  7341 ;;		_PROTOCOL_SAV
  7342 ;; This function uses a non-reentrant model
  7343 ;;
  7344                           
  7345                           
  7346                           ;psect for function _DATAEE_WriteByte
  7347  0BF7                     _DATAEE_WriteByte:	
  7348                           
  7349                           ;incstack = 0
  7350                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  7351                           ;DATAEE_WriteByte@bAdd stored from wreg
  7352  0BF7  0020               	movlb	0	; select bank0
  7353  0BF8  00A2               	movwf	DATAEE_WriteByte@bAdd
  7354                           
  7355                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  7356  0BF9  01A3               	clrf	DATAEE_WriteByte@GIEBitValue
  7357                           
  7358                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  7359  0BFA  0822               	movf	DATAEE_WriteByte@bAdd,w
  7360  0BFB  0023               	movlb	3	; select bank3
  7361  0BFC  0091               	movwf	17	;volatile
  7362                           
  7363                           ;memory.c: 185: EEDATL = bData;
  7364  0BFD  0020               	movlb	0	; select bank0
  7365  0BFE  0821               	movf	DATAEE_WriteByte@bData,w
  7366  0BFF  0023               	movlb	3	; select bank3
  7367  0C00  0093               	movwf	19	;volatile
  7368                           
  7369                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  7370  0C01  1395               	bcf	21,7	;volsfr
  7371                           
  7372                           ;memory.c: 187: EECON1bits.CFGS = 0;
  7373  0C02  1315               	bcf	21,6	;volsfr
  7374                           
  7375                           ;memory.c: 188: EECON1bits.WREN = 1;
  7376  0C03  1515               	bsf	21,2	;volsfr
  7377                           
  7378                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  7379  0C04  3000               	movlw	0
  7380  0C05  1B8B               	btfsc	11,7	;volatile
  7381  0C06  3001               	movlw	1
  7382  0C07  0020               	movlb	0	; select bank0
  7383  0C08  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
  7384                           
  7385                           ;memory.c: 191: INTCONbits.GIE = 0;
  7386  0C09  138B               	bcf	11,7	;volatile
  7387                           
  7388                           ;memory.c: 192: EECON2 = 0x55;
  7389  0C0A  3055               	movlw	85
  7390  0C0B  0023               	movlb	3	; select bank3
  7391  0C0C  0096               	movwf	22	;volsfr
  7392                           
  7393                           ;memory.c: 193: EECON2 = 0xAA;
  7394  0C0D  30AA               	movlw	170
  7395  0C0E  0096               	movwf	22	;volsfr
  7396                           
  7397                           ;memory.c: 194: EECON1bits.WR = 1;
  7398  0C0F  1495               	bsf	21,1	;volsfr
  7399  0C10                     l480:	
  7400                           ;memory.c: 197: {
  7401                           
  7402                           ;memory.c: 196: while (EECON1bits.WR)
  7403                           
  7404  0C10  1895               	btfsc	21,1	;volsfr
  7405  0C11  2C10               	goto	l480
  7406                           
  7407                           ;memory.c: 198: }
  7408                           ;memory.c: 200: EECON1bits.WREN = 0;
  7409  0C12  1115               	bcf	21,2	;volsfr
  7410                           
  7411                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  7412  0C13  0020               	movlb	0	; select bank0
  7413  0C14  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
  7414  0C15  1C03               	skipc
  7415  0C16  138B               	bcf	11,7	;volatile
  7416  0C17  1803               	skipnc
  7417  0C18  178B               	bsf	11,7	;volatile
  7418  0C19  0008               	return
  7419  0C1A                     __end_of_DATAEE_WriteByte:	
  7420                           
  7421                           	psect	text32
  7422  0002                     __ptext32:	
  7423 ;; *************** function _PROTOCOL_EXT *****************
  7424 ;; Defined at:
  7425 ;;		line 116 in file "protocol.c"
  7426 ;; Parameters:    Size  Location     Type
  7427 ;;  char_buf        1    wreg     PTR unsigned char 
  7428 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  7429 ;; Auto vars:     Size  Location     Type
  7430 ;;  char_buf        1    1[BANK0 ] PTR unsigned char 
  7431 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  7432 ;; Return value:  Size  Location     Type
  7433 ;;                  1    wreg      void 
  7434 ;; Registers used:
  7435 ;;		wreg, status,2, status,0
  7436 ;; Tracked objects:
  7437 ;;		On entry : 0/0
  7438 ;;		On exit  : 0/0
  7439 ;;		Unchanged: 0/0
  7440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7442 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7444 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7445 ;;Total ram usage:        1 bytes
  7446 ;; Hardware stack levels used:    1
  7447 ;; Hardware stack levels required when called:    5
  7448 ;; This function calls:
  7449 ;;		Nothing
  7450 ;; This function is called by:
  7451 ;;		_PROTOCOL_Loop
  7452 ;; This function uses a non-reentrant model
  7453 ;;
  7454                           
  7455                           
  7456                           ;psect for function _PROTOCOL_EXT
  7457  0002                     _PROTOCOL_EXT:	
  7458                           
  7459                           ;incstack = 0
  7460                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0]
  7461  0002  0008               	return
  7462  0003                     __end_of_PROTOCOL_EXT:	
  7463                           
  7464                           	psect	text33
  7465  0B75                     __ptext33:	
  7466 ;; *************** function _EUSART_Read *****************
  7467 ;; Defined at:
  7468 ;;		line 112 in file "mcc_generated_files/eusart.c"
  7469 ;; Parameters:    Size  Location     Type
  7470 ;;		None
  7471 ;; Auto vars:     Size  Location     Type
  7472 ;;  readValue       1    2[BANK0 ] unsigned char 
  7473 ;; Return value:  Size  Location     Type
  7474 ;;                  1    wreg      unsigned char 
  7475 ;; Registers used:
  7476 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7477 ;; Tracked objects:
  7478 ;;		On entry : 0/0
  7479 ;;		On exit  : 0/0
  7480 ;;		Unchanged: 0/0
  7481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7483 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;Total ram usage:        2 bytes
  7487 ;; Hardware stack levels used:    1
  7488 ;; Hardware stack levels required when called:    5
  7489 ;; This function calls:
  7490 ;;		Nothing
  7491 ;; This function is called by:
  7492 ;;		_PROTOCOL_Loop
  7493 ;;		_getch
  7494 ;; This function uses a non-reentrant model
  7495 ;;
  7496                           
  7497                           
  7498                           ;psect for function _EUSART_Read
  7499  0B75                     _EUSART_Read:	
  7500                           
  7501                           ;eusart.c: 114: uint8_t readValue = 0;
  7502                           
  7503                           ;incstack = 0
  7504                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  7505  0B75  0020               	movlb	0	; select bank0
  7506  0B76  01A2               	clrf	EUSART_Read@readValue
  7507  0B77                     l4421:	
  7508                           ;eusart.c: 117: {
  7509                           
  7510                           ;eusart.c: 116: while(0 == eusartRxCount)
  7511                           
  7512  0B77  0867               	movf	_eusartRxCount,w	;volatile
  7513  0B78  1903               	btfsc	3,2
  7514  0B79  2B77               	goto	l4421
  7515                           
  7516                           ;eusart.c: 118: }
  7517                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  7518  0B7A  0868               	movf	_eusartRxTail,w
  7519  0B7B  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  7520  0B7C  0086               	movwf	6
  7521  0B7D  0187               	clrf	7
  7522  0B7E  0801               	movf	1,w
  7523  0B7F  00A1               	movwf	??_EUSART_Read
  7524  0B80  0821               	movf	??_EUSART_Read,w
  7525  0B81  00A2               	movwf	EUSART_Read@readValue
  7526  0B82  3001               	movlw	1
  7527  0B83  00A1               	movwf	??_EUSART_Read
  7528  0B84  0821               	movf	??_EUSART_Read,w
  7529  0B85  07E8               	addwf	_eusartRxTail,f	;volatile
  7530                           
  7531                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  7532  0B86  3008               	movlw	8
  7533  0B87  0268               	subwf	_eusartRxTail,w	;volatile
  7534  0B88  1803               	btfsc	3,0
  7535                           
  7536                           ;eusart.c: 122: {
  7537                           ;eusart.c: 123: eusartRxTail = 0;
  7538  0B89  01E8               	clrf	_eusartRxTail	;volatile
  7539                           
  7540                           ;eusart.c: 124: }
  7541                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  7542  0B8A  0021               	movlb	1	; select bank1
  7543  0B8B  1291               	bcf	17,5	;volatile
  7544                           
  7545                           ;eusart.c: 126: eusartRxCount--;
  7546  0B8C  3001               	movlw	1
  7547  0B8D  0020               	movlb	0	; select bank0
  7548  0B8E  02E7               	subwf	_eusartRxCount,f	;volatile
  7549                           
  7550                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  7551  0B8F  0021               	movlb	1	; select bank1
  7552  0B90  1691               	bsf	17,5	;volatile
  7553                           
  7554                           ;eusart.c: 129: return readValue;
  7555  0B91  0020               	movlb	0	; select bank0
  7556  0B92  0822               	movf	EUSART_Read@readValue,w
  7557  0B93  0008               	return
  7558  0B94                     __end_of_EUSART_Read:	
  7559                           
  7560                           	psect	text34
  7561  0EBC                     __ptext34:	
  7562 ;; *************** function _PROTOCOL_Initialize *****************
  7563 ;; Defined at:
  7564 ;;		line 59 in file "protocol.c"
  7565 ;; Parameters:    Size  Location     Type
  7566 ;;  device_id       2    2[BANK0 ] PTR const unsigned char 
  7567 ;;		 -> STR_1(10), 
  7568 ;;  start_handle    1    4[BANK0 ] PTR void 
  7569 ;;		 -> NULL(0), 
  7570 ;;  stop_handler    1    5[BANK0 ] PTR void 
  7571 ;;		 -> NULL(0), 
  7572 ;;  set_handler     1    6[BANK0 ] PTR void 
  7573 ;;		 -> NULL(0), 
  7574 ;;  inv_handler     2    7[BANK0 ] PTR void 
  7575 ;;		 -> inv_handler(1), 
  7576 ;;  scaler          1    9[BANK0 ] unsigned char 
  7577 ;; Auto vars:     Size  Location     Type
  7578 ;;		None
  7579 ;; Return value:  Size  Location     Type
  7580 ;;                  1    wreg      void 
  7581 ;; Registers used:
  7582 ;;		wreg, status,2, status,0, pclath, cstack
  7583 ;; Tracked objects:
  7584 ;;		On entry : 0/0
  7585 ;;		On exit  : 0/0
  7586 ;;		Unchanged: 0/0
  7587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7588 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7590 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7591 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7592 ;;Total ram usage:       10 bytes
  7593 ;; Hardware stack levels used:    1
  7594 ;; Hardware stack levels required when called:    6
  7595 ;; This function calls:
  7596 ;;		_DATAEE_ReadByte
  7597 ;; This function is called by:
  7598 ;;		_main
  7599 ;; This function uses a non-reentrant model
  7600 ;;
  7601                           
  7602                           
  7603                           ;psect for function _PROTOCOL_Initialize
  7604  0EBC                     _PROTOCOL_Initialize:	
  7605                           
  7606                           ;protocol.c: 60: device_id_ = device_id;
  7607                           
  7608                           ;incstack = 0
  7609                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7610  0EBC  0020               	movlb	0	; select bank0
  7611  0EBD  0823               	movf	PROTOCOL_Initialize@device_id+1,w
  7612  0EBE  0022               	movlb	2	; select bank2
  7613  0EBF  00E1               	movwf	(_device_id_+1)^(0+256)
  7614  0EC0  0020               	movlb	0	; select bank0
  7615  0EC1  0822               	movf	PROTOCOL_Initialize@device_id,w
  7616  0EC2  0022               	movlb	2	; select bank2
  7617  0EC3  00E0               	movwf	_device_id_^(0+256)
  7618                           
  7619                           ;protocol.c: 61: PROTOCOL_Start_Handler = start_handler;
  7620  0EC4  0020               	movlb	0	; select bank0
  7621  0EC5  0824               	movf	PROTOCOL_Initialize@start_handler,w
  7622  0EC6  00AA               	movwf	??_PROTOCOL_Initialize
  7623  0EC7  3000               	movlw	0
  7624  0EC8  00AB               	movwf	??_PROTOCOL_Initialize+1
  7625  0EC9  082A               	movf	??_PROTOCOL_Initialize,w
  7626  0ECA  0021               	movlb	1	; select bank1
  7627  0ECB  00EB               	movwf	_PROTOCOL_Start_Handler^(0+128)
  7628  0ECC  0020               	movlb	0	; select bank0
  7629  0ECD  082B               	movf	??_PROTOCOL_Initialize+1,w
  7630  0ECE  0021               	movlb	1	; select bank1
  7631  0ECF  00EC               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  7632                           
  7633                           ;protocol.c: 62: PROTOCOL_Stop_Handler = stop_handler;
  7634  0ED0  0020               	movlb	0	; select bank0
  7635  0ED1  0825               	movf	PROTOCOL_Initialize@stop_handler,w
  7636  0ED2  00AA               	movwf	??_PROTOCOL_Initialize
  7637  0ED3  3000               	movlw	0
  7638  0ED4  00AB               	movwf	??_PROTOCOL_Initialize+1
  7639  0ED5  082A               	movf	??_PROTOCOL_Initialize,w
  7640  0ED6  0021               	movlb	1	; select bank1
  7641  0ED7  00E9               	movwf	_PROTOCOL_Stop_Handler^(0+128)
  7642  0ED8  0020               	movlb	0	; select bank0
  7643  0ED9  082B               	movf	??_PROTOCOL_Initialize+1,w
  7644  0EDA  0021               	movlb	1	; select bank1
  7645  0EDB  00EA               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+128)
  7646                           
  7647                           ;protocol.c: 63: PROTOCOL_Set_Handler = set_handler;
  7648  0EDC  0020               	movlb	0	; select bank0
  7649  0EDD  0826               	movf	PROTOCOL_Initialize@set_handler,w
  7650  0EDE  00AA               	movwf	??_PROTOCOL_Initialize
  7651  0EDF  3000               	movlw	0
  7652  0EE0  00AB               	movwf	??_PROTOCOL_Initialize+1
  7653  0EE1  082A               	movf	??_PROTOCOL_Initialize,w
  7654  0EE2  0021               	movlb	1	; select bank1
  7655  0EE3  00E7               	movwf	_PROTOCOL_Set_Handler^(0+128)
  7656  0EE4  0020               	movlb	0	; select bank0
  7657  0EE5  082B               	movf	??_PROTOCOL_Initialize+1,w
  7658  0EE6  0021               	movlb	1	; select bank1
  7659  0EE7  00E8               	movwf	(_PROTOCOL_Set_Handler+1)^(0+128)
  7660                           
  7661                           ;protocol.c: 66: value = DATAEE_ReadByte(1);
  7662  0EE8  3001               	movlw	1
  7663  0EE9  318A  2262  318E   	fcall	_DATAEE_ReadByte
  7664  0EEC  0020               	movlb	0	; select bank0
  7665  0EED  00AA               	movwf	??_PROTOCOL_Initialize
  7666  0EEE  082A               	movf	??_PROTOCOL_Initialize,w
  7667  0EEF  00E6               	movwf	_value
  7668                           
  7669                           ;protocol.c: 68: slave_address = DATAEE_ReadByte(0);
  7670  0EF0  3000               	movlw	0
  7671  0EF1  318A  2262         	fcall	_DATAEE_ReadByte
  7672  0EF3  0020               	movlb	0	; select bank0
  7673  0EF4  00AA               	movwf	??_PROTOCOL_Initialize
  7674  0EF5  082A               	movf	??_PROTOCOL_Initialize,w
  7675  0EF6  0021               	movlb	1	; select bank1
  7676  0EF7  00C3               	movwf	_slave_address^(0+128)
  7677                           
  7678                           ;protocol.c: 71: readbuf.status = COMPLETE;
  7679  0EF8  3003               	movlw	3
  7680  0EF9  0020               	movlb	0	; select bank0
  7681  0EFA  00AA               	movwf	??_PROTOCOL_Initialize
  7682  0EFB  082A               	movf	??_PROTOCOL_Initialize,w
  7683  0EFC  0021               	movlb	1	; select bank1
  7684  0EFD  00D1               	movwf	(_readbuf^(0+128)+4)
  7685                           
  7686                           ;protocol.c: 72: PROTOCOL_Inv_Handler = inv_handler;
  7687  0EFE  0020               	movlb	0	; select bank0
  7688  0EFF  0828               	movf	PROTOCOL_Initialize@inv_handler+1,w
  7689  0F00  0021               	movlb	1	; select bank1
  7690  0F01  00B3               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+128)
  7691  0F02  0020               	movlb	0	; select bank0
  7692  0F03  0827               	movf	PROTOCOL_Initialize@inv_handler,w
  7693  0F04  0021               	movlb	1	; select bank1
  7694  0F05  00B2               	movwf	_PROTOCOL_Inv_Handler^(0+128)
  7695                           
  7696                           ;protocol.c: 73: tmr_scaler = scaler;
  7697  0F06  0020               	movlb	0	; select bank0
  7698  0F07  0829               	movf	PROTOCOL_Initialize@scaler,w
  7699  0F08  00AA               	movwf	??_PROTOCOL_Initialize
  7700  0F09  082A               	movf	??_PROTOCOL_Initialize,w
  7701  0F0A  0021               	movlb	1	; select bank1
  7702  0F0B  00ED               	movwf	_tmr_scaler^(0+128)
  7703  0F0C  0008               	return
  7704  0F0D                     __end_of_PROTOCOL_Initialize:	
  7705                           
  7706                           	psect	text35
  7707  0A62                     __ptext35:	
  7708 ;; *************** function _DATAEE_ReadByte *****************
  7709 ;; Defined at:
  7710 ;;		line 204 in file "mcc_generated_files/memory.c"
  7711 ;; Parameters:    Size  Location     Type
  7712 ;;  bAdd            1    wreg     unsigned char 
  7713 ;; Auto vars:     Size  Location     Type
  7714 ;;  bAdd            1    1[BANK0 ] unsigned char 
  7715 ;; Return value:  Size  Location     Type
  7716 ;;                  1    wreg      unsigned char 
  7717 ;; Registers used:
  7718 ;;		wreg
  7719 ;; Tracked objects:
  7720 ;;		On entry : 0/0
  7721 ;;		On exit  : 0/0
  7722 ;;		Unchanged: 0/0
  7723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7725 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7727 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7728 ;;Total ram usage:        1 bytes
  7729 ;; Hardware stack levels used:    1
  7730 ;; Hardware stack levels required when called:    5
  7731 ;; This function calls:
  7732 ;;		Nothing
  7733 ;; This function is called by:
  7734 ;;		_PROTOCOL_Initialize
  7735 ;; This function uses a non-reentrant model
  7736 ;;
  7737                           
  7738                           
  7739                           ;psect for function _DATAEE_ReadByte
  7740  0A62                     _DATAEE_ReadByte:	
  7741                           
  7742                           ;incstack = 0
  7743                           ; Regs used in _DATAEE_ReadByte: [wreg]
  7744                           ;DATAEE_ReadByte@bAdd stored from wreg
  7745  0A62  0020               	movlb	0	; select bank0
  7746  0A63  00A1               	movwf	DATAEE_ReadByte@bAdd
  7747                           
  7748                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  7749  0A64  0821               	movf	DATAEE_ReadByte@bAdd,w
  7750  0A65  0023               	movlb	3	; select bank3
  7751  0A66  0091               	movwf	17	;volatile
  7752                           
  7753                           ;memory.c: 207: EECON1bits.CFGS = 0;
  7754  0A67  1315               	bcf	21,6	;volsfr
  7755                           
  7756                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  7757  0A68  1395               	bcf	21,7	;volsfr
  7758                           
  7759                           ;memory.c: 209: EECON1bits.RD = 1;
  7760  0A69  1415               	bsf	21,0	;volsfr
  7761                           
  7762                           ;memory.c: 210: __nop();
  7763  0A6A  0000               	nop
  7764                           
  7765                           ;memory.c: 211: __nop();
  7766  0A6B  0000               	nop
  7767                           
  7768                           ;memory.c: 213: return (EEDATL);
  7769  0A6C  0023               	movlb	3	; select bank3
  7770  0A6D  0813               	movf	19,w	;volatile
  7771  0A6E  0008               	return
  7772  0A6F                     __end_of_DATAEE_ReadByte:	
  7773                           
  7774                           	psect	text36
  7775  0B57                     __ptext36:	
  7776 ;; *************** function _PIN_MANAGER_Initialize *****************
  7777 ;; Defined at:
  7778 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  7779 ;; Parameters:    Size  Location     Type
  7780 ;;		None
  7781 ;; Auto vars:     Size  Location     Type
  7782 ;;		None
  7783 ;; Return value:  Size  Location     Type
  7784 ;;                  1    wreg      void 
  7785 ;; Registers used:
  7786 ;;		wreg, status,2
  7787 ;; Tracked objects:
  7788 ;;		On entry : 0/0
  7789 ;;		On exit  : 0/0
  7790 ;;		Unchanged: 0/0
  7791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7796 ;;Total ram usage:        0 bytes
  7797 ;; Hardware stack levels used:    1
  7798 ;; Hardware stack levels required when called:    5
  7799 ;; This function calls:
  7800 ;;		Nothing
  7801 ;; This function is called by:
  7802 ;;		_main
  7803 ;;		_SYSTEM_Initialize
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           
  7808                           ;psect for function _PIN_MANAGER_Initialize
  7809  0B57                     _PIN_MANAGER_Initialize:	
  7810                           
  7811                           ;pin_manager.c: 56: LATA = 0x00;
  7812                           
  7813                           ;incstack = 0
  7814                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  7815  0B57  0022               	movlb	2	; select bank2
  7816  0B58  018C               	clrf	12	;volatile
  7817                           
  7818                           ;pin_manager.c: 57: LATB = 0x00;
  7819  0B59  018D               	clrf	13	;volatile
  7820                           
  7821                           ;pin_manager.c: 58: LATC = 0x00;
  7822  0B5A  018E               	clrf	14	;volatile
  7823                           
  7824                           ;pin_manager.c: 63: TRISA = 0x3F;
  7825  0B5B  303F               	movlw	63
  7826  0B5C  0021               	movlb	1	; select bank1
  7827  0B5D  008C               	movwf	12	;volatile
  7828                           
  7829                           ;pin_manager.c: 64: TRISB = 0xF0;
  7830  0B5E  30F0               	movlw	240
  7831  0B5F  008D               	movwf	13	;volatile
  7832                           
  7833                           ;pin_manager.c: 65: TRISC = 0x7F;
  7834  0B60  307F               	movlw	127
  7835  0B61  008E               	movwf	14	;volatile
  7836                           
  7837                           ;pin_manager.c: 70: ANSELC = 0x4F;
  7838  0B62  304F               	movlw	79
  7839  0B63  0023               	movlb	3	; select bank3
  7840  0B64  008E               	movwf	14	;volatile
  7841                           
  7842                           ;pin_manager.c: 71: ANSELB = 0x00;
  7843  0B65  018D               	clrf	13	;volatile
  7844                           
  7845                           ;pin_manager.c: 72: ANSELA = 0x17;
  7846  0B66  3017               	movlw	23
  7847  0B67  008C               	movwf	12	;volatile
  7848                           
  7849                           ;pin_manager.c: 77: WPUB = 0x00;
  7850  0B68  0024               	movlb	4	; select bank4
  7851  0B69  018D               	clrf	13	;volatile
  7852                           
  7853                           ;pin_manager.c: 78: WPUA = 0x3F;
  7854  0B6A  303F               	movlw	63
  7855  0B6B  008C               	movwf	12	;volatile
  7856                           
  7857                           ;pin_manager.c: 79: WPUC = 0x7F;
  7858  0B6C  307F               	movlw	127
  7859  0B6D  008E               	movwf	14	;volatile
  7860                           
  7861                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  7862  0B6E  0021               	movlb	1	; select bank1
  7863  0B6F  1395               	bcf	21,7	;volatile
  7864                           
  7865                           ;pin_manager.c: 86: APFCON1 = 0x00;
  7866  0B70  0022               	movlb	2	; select bank2
  7867  0B71  019E               	clrf	30	;volatile
  7868                           
  7869                           ;pin_manager.c: 87: APFCON0 = 0x84;
  7870  0B72  3084               	movlw	132
  7871  0B73  009D               	movwf	29	;volatile
  7872  0B74  0008               	return
  7873  0B75                     __end_of_PIN_MANAGER_Initialize:	
  7874                           
  7875                           	psect	text37
  7876  0A27                     __ptext37:	
  7877 ;; *************** function _OSCILLATOR_Initialize *****************
  7878 ;; Defined at:
  7879 ;;		line 81 in file "mcc_generated_files/mcc.c"
  7880 ;; Parameters:    Size  Location     Type
  7881 ;;		None
  7882 ;; Auto vars:     Size  Location     Type
  7883 ;;		None
  7884 ;; Return value:  Size  Location     Type
  7885 ;;                  1    wreg      void 
  7886 ;; Registers used:
  7887 ;;		wreg, status,2
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;Total ram usage:        0 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:    5
  7900 ;; This function calls:
  7901 ;;		Nothing
  7902 ;; This function is called by:
  7903 ;;		_main
  7904 ;;		_SYSTEM_Initialize
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           
  7909                           ;psect for function _OSCILLATOR_Initialize
  7910  0A27                     _OSCILLATOR_Initialize:	
  7911                           
  7912                           ;mcc.c: 84: OSCCON = 0x68;
  7913                           
  7914                           ;incstack = 0
  7915                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  7916  0A27  3068               	movlw	104
  7917  0A28  0021               	movlb	1	; select bank1
  7918  0A29  0099               	movwf	25	;volatile
  7919                           
  7920                           ;mcc.c: 86: OSCTUNE = 0x00;
  7921  0A2A  0198               	clrf	24	;volatile
  7922  0A2B  0008               	return
  7923  0A2C                     __end_of_OSCILLATOR_Initialize:	
  7924                           
  7925                           	psect	text38
  7926  0A9D                     __ptext38:	
  7927 ;; *************** function _I2C2_Initialize *****************
  7928 ;; Defined at:
  7929 ;;		line 198 in file "mcc_generated_files/i2c2.c"
  7930 ;; Parameters:    Size  Location     Type
  7931 ;;		None
  7932 ;; Auto vars:     Size  Location     Type
  7933 ;;		None
  7934 ;; Return value:  Size  Location     Type
  7935 ;;                  1    wreg      void 
  7936 ;; Registers used:
  7937 ;;		wreg, status,2
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7945 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;Total ram usage:        1 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:    5
  7950 ;; This function calls:
  7951 ;;		Nothing
  7952 ;; This function is called by:
  7953 ;;		_main
  7954 ;;		_SYSTEM_Initialize
  7955 ;; This function uses a non-reentrant model
  7956 ;;
  7957                           
  7958                           
  7959                           ;psect for function _I2C2_Initialize
  7960  0A9D                     _I2C2_Initialize:	
  7961                           
  7962                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
  7963                           
  7964                           ;incstack = 0
  7965                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
  7966  0A9D  30DE               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  7967  0A9E  0020               	movlb	0	; select bank0
  7968  0A9F  00A1               	movwf	??_I2C2_Initialize
  7969  0AA0  0821               	movf	??_I2C2_Initialize,w
  7970  0AA1  00E1               	movwf	low ((_i2c2_object| 0+1))
  7971                           
  7972                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
  7973  0AA2  30DE               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  7974  0AA3  00A1               	movwf	??_I2C2_Initialize
  7975  0AA4  0821               	movf	??_I2C2_Initialize,w
  7976  0AA5  00E0               	movwf	_i2c2_object
  7977                           
  7978                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
  7979  0AA6  14E2               	bsf	_i2c2_object+2,1
  7980                           
  7981                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
  7982  0AA7  1062               	bcf	_i2c2_object+2,0
  7983                           
  7984                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
  7985  0AA8  01E4               	clrf	_i2c2_object+4
  7986                           
  7987                           ;i2c2.c: 208: SSP2STAT = 0x00;
  7988  0AA9  0024               	movlb	4	; select bank4
  7989  0AAA  019C               	clrf	28	;volatile
  7990                           
  7991                           ;i2c2.c: 210: SSP2CON1 = 0x28;
  7992  0AAB  3028               	movlw	40
  7993  0AAC  009D               	movwf	29	;volatile
  7994                           
  7995                           ;i2c2.c: 212: SSP2CON3 = 0x00;
  7996  0AAD  019F               	clrf	31	;volatile
  7997                           
  7998                           ;i2c2.c: 214: SSP2ADD = 0x09;
  7999  0AAE  3009               	movlw	9
  8000  0AAF  009A               	movwf	26	;volatile
  8001                           
  8002                           ;i2c2.c: 218: PIR4bits.SSP2IF = 0;
  8003  0AB0  0020               	movlb	0	; select bank0
  8004  0AB1  1014               	bcf	20,0	;volatile
  8005                           
  8006                           ;i2c2.c: 220: PIE4bits.SSP2IE = 1;
  8007  0AB2  0021               	movlb	1	; select bank1
  8008  0AB3  1414               	bsf	20,0	;volatile
  8009  0AB4  0008               	return
  8010  0AB5                     __end_of_I2C2_Initialize:	
  8011                           
  8012                           	psect	text39
  8013  0BB4                     __ptext39:	
  8014 ;; *************** function _I2C1_Initialize *****************
  8015 ;; Defined at:
  8016 ;;		line 30 in file "mcc_generated_files/i2c1.c"
  8017 ;; Parameters:    Size  Location     Type
  8018 ;;		None
  8019 ;; Auto vars:     Size  Location     Type
  8020 ;;		None
  8021 ;; Return value:  Size  Location     Type
  8022 ;;                  1    wreg      void 
  8023 ;; Registers used:
  8024 ;;		wreg, status,2, status,0, pclath, cstack
  8025 ;; Tracked objects:
  8026 ;;		On entry : 0/0
  8027 ;;		On exit  : 0/0
  8028 ;;		Unchanged: 0/0
  8029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8032 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8033 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8034 ;;Total ram usage:        2 bytes
  8035 ;; Hardware stack levels used:    1
  8036 ;; Hardware stack levels required when called:    6
  8037 ;; This function calls:
  8038 ;;		_PROTOCOL_Read_Device_Address
  8039 ;; This function is called by:
  8040 ;;		_main
  8041 ;;		_SYSTEM_Initialize
  8042 ;; This function uses a non-reentrant model
  8043 ;;
  8044                           
  8045                           
  8046                           ;psect for function _I2C1_Initialize
  8047  0BB4                     _I2C1_Initialize:	
  8048                           
  8049                           ;i2c1.c: 34: _delay((unsigned long)((2000)*(4000000/4000.0)));
  8050                           
  8051                           ;incstack = 0
  8052                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8053  0BB4  300B               	movlw	11
  8054  0BB5  0020               	movlb	0	; select bank0
  8055  0BB6  00A2               	movwf	??_I2C1_Initialize+1
  8056  0BB7  3026               	movlw	38
  8057  0BB8  00A1               	movwf	??_I2C1_Initialize
  8058  0BB9  305D               	movlw	93
  8059  0BBA                     u4447:	
  8060  0BBA  0B89               	decfsz	9,f
  8061  0BBB  2BBA               	goto	u4447
  8062  0BBC  0BA1               	decfsz	??_I2C1_Initialize,f
  8063  0BBD  2BBA               	goto	u4447
  8064  0BBE  0BA2               	decfsz	??_I2C1_Initialize+1,f
  8065  0BBF  2BBA               	goto	u4447
  8066  0BC0  3200               	nop2
  8067                           
  8068                           ;i2c1.c: 38: SSP1STAT = 0x80;
  8069  0BC1  3080               	movlw	128
  8070  0BC2  0024               	movlb	4	; select bank4
  8071  0BC3  0094               	movwf	20	;volatile
  8072                           
  8073                           ;i2c1.c: 40: SSP1CON1 = 0x26;
  8074  0BC4  3026               	movlw	38
  8075  0BC5  0095               	movwf	21	;volatile
  8076                           
  8077                           ;i2c1.c: 42: SSP1CON2 = 0x81;
  8078  0BC6  3081               	movlw	129
  8079  0BC7  0096               	movwf	22	;volatile
  8080                           
  8081                           ;i2c1.c: 44: SSP1CON3 = 0x00;
  8082  0BC8  0197               	clrf	23	;volatile
  8083                           
  8084                           ;i2c1.c: 46: SSP1MSK = (0x7F << 1);
  8085  0BC9  30FE               	movlw	254
  8086  0BCA  0093               	movwf	19	;volatile
  8087                           
  8088                           ;i2c1.c: 48: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  8089  0BCB  318A  2206         	fcall	_PROTOCOL_Read_Device_Address
  8090  0BCD  0709               	addwf	9,w
  8091  0BCE  0024               	movlb	4	; select bank4
  8092  0BCF  0092               	movwf	18	;volatile
  8093                           
  8094                           ;i2c1.c: 51: PIR1bits.SSP1IF = 0;
  8095  0BD0  0020               	movlb	0	; select bank0
  8096  0BD1  1191               	bcf	17,3	;volatile
  8097                           
  8098                           ;i2c1.c: 53: PIE1bits.SSP1IE = 1;
  8099  0BD2  0021               	movlb	1	; select bank1
  8100  0BD3  1591               	bsf	17,3	;volatile
  8101  0BD4  0008               	return
  8102  0BD5                     __end_of_I2C1_Initialize:	
  8103                           
  8104                           	psect	text40
  8105  0A06                     __ptext40:	
  8106 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  8107 ;; Defined at:
  8108 ;;		line 89 in file "protocol.c"
  8109 ;; Parameters:    Size  Location     Type
  8110 ;;		None
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;		None
  8113 ;; Return value:  Size  Location     Type
  8114 ;;                  1    wreg      unsigned char 
  8115 ;; Registers used:
  8116 ;;		wreg
  8117 ;; Tracked objects:
  8118 ;;		On entry : 0/0
  8119 ;;		On exit  : 0/0
  8120 ;;		Unchanged: 0/0
  8121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8126 ;;Total ram usage:        0 bytes
  8127 ;; Hardware stack levels used:    1
  8128 ;; Hardware stack levels required when called:    5
  8129 ;; This function calls:
  8130 ;;		Nothing
  8131 ;; This function is called by:
  8132 ;;		_I2C1_Initialize
  8133 ;;		_PROTOCOL_Loop
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           
  8138                           ;psect for function _PROTOCOL_Read_Device_Address
  8139  0A06                     _PROTOCOL_Read_Device_Address:	
  8140                           
  8141                           ;protocol.c: 90: return slave_address;
  8142                           
  8143                           ;incstack = 0
  8144                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  8145  0A06  0021               	movlb	1	; select bank1
  8146  0A07  0843               	movf	_slave_address^(0+128),w
  8147  0A08  0008               	return
  8148  0A09                     __end_of_PROTOCOL_Read_Device_Address:	
  8149                           
  8150                           	psect	text41
  8151  0ACE                     __ptext41:	
  8152 ;; *************** function _EUSART_Initialize *****************
  8153 ;; Defined at:
  8154 ;;		line 75 in file "mcc_generated_files/eusart.c"
  8155 ;; Parameters:    Size  Location     Type
  8156 ;;		None
  8157 ;; Auto vars:     Size  Location     Type
  8158 ;;		None
  8159 ;; Return value:  Size  Location     Type
  8160 ;;                  1    wreg      void 
  8161 ;; Registers used:
  8162 ;;		wreg, status,2
  8163 ;; Tracked objects:
  8164 ;;		On entry : 0/0
  8165 ;;		On exit  : 0/0
  8166 ;;		Unchanged: 0/0
  8167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8170 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8171 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8172 ;;Total ram usage:        1 bytes
  8173 ;; Hardware stack levels used:    1
  8174 ;; Hardware stack levels required when called:    5
  8175 ;; This function calls:
  8176 ;;		Nothing
  8177 ;; This function is called by:
  8178 ;;		_main
  8179 ;;		_SYSTEM_Initialize
  8180 ;; This function uses a non-reentrant model
  8181 ;;
  8182                           
  8183                           
  8184                           ;psect for function _EUSART_Initialize
  8185  0ACE                     _EUSART_Initialize:	
  8186                           
  8187                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  8188                           
  8189                           ;incstack = 0
  8190                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8191  0ACE  0021               	movlb	1	; select bank1
  8192  0ACF  1291               	bcf	17,5	;volatile
  8193                           
  8194                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  8195  0AD0  1211               	bcf	17,4	;volatile
  8196                           
  8197                           ;eusart.c: 84: BAUDCON = 0x08;
  8198  0AD1  3008               	movlw	8
  8199  0AD2  0023               	movlb	3	; select bank3
  8200  0AD3  009F               	movwf	31	;volatile
  8201                           
  8202                           ;eusart.c: 87: RCSTA = 0x90;
  8203  0AD4  3090               	movlw	144
  8204  0AD5  009D               	movwf	29	;volatile
  8205                           
  8206                           ;eusart.c: 90: TXSTA = 0x24;
  8207  0AD6  3024               	movlw	36
  8208  0AD7  009E               	movwf	30	;volatile
  8209                           
  8210                           ;eusart.c: 93: SPBRGL = 0x67;
  8211  0AD8  3067               	movlw	103
  8212  0AD9  009B               	movwf	27	;volatile
  8213                           
  8214                           ;eusart.c: 96: SPBRGH = 0x00;
  8215  0ADA  019C               	clrf	28	;volatile
  8216                           
  8217                           ;eusart.c: 100: eusartTxHead = 0;
  8218  0ADB  01FC               	clrf	_eusartTxHead	;volatile
  8219                           
  8220                           ;eusart.c: 101: eusartTxTail = 0;
  8221  0ADC  01FB               	clrf	_eusartTxTail	;volatile
  8222                           
  8223                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  8224  0ADD  3008               	movlw	8
  8225  0ADE  0020               	movlb	0	; select bank0
  8226  0ADF  00A1               	movwf	??_EUSART_Initialize
  8227  0AE0  0821               	movf	??_EUSART_Initialize,w
  8228  0AE1  00FA               	movwf	_eusartTxBufferRemaining	;volatile
  8229                           
  8230                           ;eusart.c: 104: eusartRxHead = 0;
  8231  0AE2  01E9               	clrf	_eusartRxHead	;volatile
  8232                           
  8233                           ;eusart.c: 105: eusartRxTail = 0;
  8234  0AE3  01E8               	clrf	_eusartRxTail	;volatile
  8235                           
  8236                           ;eusart.c: 106: eusartRxCount = 0;
  8237  0AE4  01E7               	clrf	_eusartRxCount	;volatile
  8238                           
  8239                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  8240  0AE5  0021               	movlb	1	; select bank1
  8241  0AE6  1691               	bsf	17,5	;volatile
  8242  0AE7  0008               	return
  8243  0AE8                     __end_of_EUSART_Initialize:	
  8244                           
  8245                           	psect	intentry
  8246  0004                     __pintentry:	
  8247 ;; *************** function _INTERRUPT_InterruptManager *****************
  8248 ;; Defined at:
  8249 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8250 ;; Parameters:    Size  Location     Type
  8251 ;;		None
  8252 ;; Auto vars:     Size  Location     Type
  8253 ;;		None
  8254 ;; Return value:  Size  Location     Type
  8255 ;;                  1    wreg      void 
  8256 ;; Registers used:
  8257 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8258 ;; Tracked objects:
  8259 ;;		On entry : 0/0
  8260 ;;		On exit  : 0/0
  8261 ;;		Unchanged: 0/0
  8262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8265 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8266 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;Total ram usage:        1 bytes
  8268 ;; Hardware stack levels used:    1
  8269 ;; Hardware stack levels required when called:    4
  8270 ;; This function calls:
  8271 ;;		_EUSART_Receive_ISR
  8272 ;;		_EUSART_Transmit_ISR
  8273 ;;		_I2C1_ISR
  8274 ;;		_I2C2_BusCollisionISR
  8275 ;;		_I2C2_ISR
  8276 ;; This function is called by:
  8277 ;;		Interrupt level 1
  8278 ;; This function uses a non-reentrant model
  8279 ;;
  8280                           
  8281  0004                     _INTERRUPT_InterruptManager:	
  8282                           
  8283                           ;incstack = 0
  8284  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8285                           
  8286                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8287  0005  3180               	pagesel	$
  8288  0006  0020               	movlb	0	; select bank0
  8289  0007  087F               	movf	127,w
  8290  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
  8291                           
  8292                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  8293  0009  1F0B               	btfss	11,6	;volatile
  8294  000A  2815               	goto	i1l323
  8295  000B  0021               	movlb	1	; select bank1
  8296  000C  1E11               	btfss	17,4	;volatile
  8297  000D  2815               	goto	i1l323
  8298  000E  0020               	movlb	0	; select bank0
  8299  000F  1E11               	btfss	17,4	;volatile
  8300  0010  2815               	goto	i1l323
  8301                           
  8302                           ;interrupt_manager.c: 55: {
  8303                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  8304  0011  318B  2303  3180   	fcall	_EUSART_Transmit_ISR
  8305                           
  8306                           ;interrupt_manager.c: 57: }
  8307  0014  2843               	goto	i1l333
  8308  0015                     i1l323:	
  8309                           
  8310                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  8311  0015  1F0B               	btfss	11,6	;volatile
  8312  0016  2821               	goto	i1l325
  8313  0017  0021               	movlb	1	; select bank1
  8314  0018  1E91               	btfss	17,5	;volatile
  8315  0019  2821               	goto	i1l325
  8316  001A  0020               	movlb	0	; select bank0
  8317  001B  1E91               	btfss	17,5	;volatile
  8318  001C  2821               	goto	i1l325
  8319                           
  8320                           ;interrupt_manager.c: 59: {
  8321                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  8322  001D  318A  22E8  3180   	fcall	_EUSART_Receive_ISR
  8323                           
  8324                           ;interrupt_manager.c: 61: }
  8325  0020  2843               	goto	i1l333
  8326  0021                     i1l325:	
  8327                           
  8328                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  8329  0021  1F0B               	btfss	11,6	;volatile
  8330  0022  282D               	goto	i1l327
  8331  0023  0021               	movlb	1	; select bank1
  8332  0024  1D91               	btfss	17,3	;volatile
  8333  0025  282D               	goto	i1l327
  8334  0026  0020               	movlb	0	; select bank0
  8335  0027  1D91               	btfss	17,3	;volatile
  8336  0028  282D               	goto	i1l327
  8337                           
  8338                           ;interrupt_manager.c: 63: {
  8339                           ;interrupt_manager.c: 64: I2C1_ISR();
  8340  0029  318C  243E  3180   	fcall	_I2C1_ISR
  8341                           
  8342                           ;interrupt_manager.c: 65: }
  8343  002C  2843               	goto	i1l333
  8344  002D                     i1l327:	
  8345                           
  8346                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE4bits.BCL2IE == 1 && PIR4bi
      +                          ts.BCL2IF == 1)
  8347  002D  1F0B               	btfss	11,6	;volatile
  8348  002E  2839               	goto	i1l329
  8349  002F  0021               	movlb	1	; select bank1
  8350  0030  1C94               	btfss	20,1	;volatile
  8351  0031  2839               	goto	i1l329
  8352  0032  0020               	movlb	0	; select bank0
  8353  0033  1C94               	btfss	20,1	;volatile
  8354  0034  2839               	goto	i1l329
  8355                           
  8356                           ;interrupt_manager.c: 67: {
  8357                           ;interrupt_manager.c: 68: I2C2_BusCollisionISR();
  8358  0035  3189  21F9  3180   	fcall	_I2C2_BusCollisionISR
  8359                           
  8360                           ;interrupt_manager.c: 69: }
  8361  0038  2843               	goto	i1l333
  8362  0039                     i1l329:	
  8363                           
  8364                           ;interrupt_manager.c: 70: else if(INTCONbits.PEIE == 1 && PIE4bits.SSP2IE == 1 && PIR4bi
      +                          ts.SSP2IF == 1)
  8365  0039  1F0B               	btfss	11,6	;volatile
  8366  003A  2843               	goto	i1l333
  8367  003B  0021               	movlb	1	; select bank1
  8368  003C  1C14               	btfss	20,0	;volatile
  8369  003D  2843               	goto	i1l333
  8370  003E  0020               	movlb	0	; select bank0
  8371  003F  1C14               	btfss	20,0	;volatile
  8372  0040  2843               	goto	i1l333
  8373                           
  8374                           ;interrupt_manager.c: 71: {
  8375                           ;interrupt_manager.c: 72: I2C2_ISR();
  8376  0041  3183  23E9         	fcall	_I2C2_ISR
  8377  0043                     i1l333:	
  8378                           ;interrupt_manager.c: 74: else
  8379                           ;interrupt_manager.c: 75: {
  8380                           
  8381                           ;interrupt_manager.c: 73: }
  8382                           
  8383  0043  0020               	movlb	0	; select bank0
  8384  0044  0820               	movf	??_INTERRUPT_InterruptManager,w
  8385  0045  00FF               	movwf	127
  8386  0046  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8387  0047  0009               	retfie
  8388  0048                     __end_of_INTERRUPT_InterruptManager:	
  8389                           
  8390                           	psect	text43
  8391  03E9                     __ptext43:	
  8392 ;; *************** function _I2C2_ISR *****************
  8393 ;; Defined at:
  8394 ;;		line 233 in file "mcc_generated_files/i2c2.c"
  8395 ;; Parameters:    Size  Location     Type
  8396 ;;		None
  8397 ;; Auto vars:     Size  Location     Type
  8398 ;;		None
  8399 ;; Return value:  Size  Location     Type
  8400 ;;                  1    wreg      void 
  8401 ;; Registers used:
  8402 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8403 ;; Tracked objects:
  8404 ;;		On entry : 0/0
  8405 ;;		On exit  : 0/0
  8406 ;;		Unchanged: 0/0
  8407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8411 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8412 ;;Total ram usage:        4 bytes
  8413 ;; Hardware stack levels used:    1
  8414 ;; Hardware stack levels required when called:    1
  8415 ;; This function calls:
  8416 ;;		_I2C2_FunctionComplete
  8417 ;;		_I2C2_Stop
  8418 ;; This function is called by:
  8419 ;;		_INTERRUPT_InterruptManager
  8420 ;; This function uses a non-reentrant model
  8421 ;;
  8422                           
  8423                           
  8424                           ;psect for function _I2C2_ISR
  8425  03E9                     _I2C2_ISR:	
  8426                           
  8427                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
  8428                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
  8429                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
  8430                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
  8431                           ;i2c2.c: 241: PIR4bits.SSP2IF = 0;
  8432                           
  8433                           ;incstack = 0
  8434                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8435  03E9  0020               	movlb	0	; select bank0
  8436  03EA  1014               	bcf	20,0	;volatile
  8437                           
  8438                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
  8439  03EB  0024               	movlb	4	; select bank4
  8440  03EC  1F9D               	btfss	29,7	;volatile
  8441  03ED  2D2C               	goto	i1l3705
  8442                           
  8443                           ;i2c2.c: 246: {
  8444                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
  8445  03EE  139D               	bcf	29,7	;volatile
  8446                           
  8447                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
  8448  03EF  0021               	movlb	1	; select bank1
  8449  03F0  01C9               	clrf	_i2c2_state^(0+128)
  8450                           
  8451                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
  8452  03F1  0020               	movlb	0	; select bank0
  8453  03F2  086A               	movf	_p_i2c2_current,w
  8454  03F3  3E02               	addlw	2
  8455  03F4  0086               	movwf	6
  8456  03F5  0187               	clrf	7
  8457  03F6  0801               	movf	1,w
  8458  03F7  0086               	movwf	6
  8459  03F8  0187               	clrf	7
  8460  03F9  0181               	clrf	1
  8461  03FA  0A81               	incf	1,f
  8462                           
  8463                           ;i2c2.c: 253: p_i2c2_current = (0);
  8464  03FB  01EA               	clrf	_p_i2c2_current
  8465                           
  8466                           ;i2c2.c: 255: return;
  8467  03FC  0008               	return
  8468  03FD                     i1l184:	
  8469                           ;i2c2.c: 260: {
  8470                           ;i2c2.c: 261: case S_MASTER_IDLE:
  8471                           
  8472                           ;i2c2.c: 256: }
  8473                           ;i2c2.c: 259: switch(i2c2_state)
  8474                           
  8475                           
  8476                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
  8477  03FD  0020               	movlb	0	; select bank0
  8478  03FE  18E2               	btfsc	_i2c2_object+2,1
  8479  03FF  0008               	return
  8480                           
  8481                           ;i2c2.c: 264: {
  8482                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
  8483  0400  0861               	movf	low ((_i2c2_object| 0+1)),w
  8484  0401  00F2               	movwf	??_I2C2_ISR
  8485  0402  0872               	movf	??_I2C2_ISR,w
  8486  0403  00EA               	movwf	_p_i2c2_current
  8487                           
  8488                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
  8489  0404  0861               	movf	low ((_i2c2_object| 0+1)),w
  8490  0405  0086               	movwf	6
  8491  0406  0187               	clrf	7
  8492  0407  0801               	movf	1,w
  8493  0408  00F2               	movwf	??_I2C2_ISR
  8494  0409  0872               	movf	??_I2C2_ISR,w
  8495  040A  0021               	movlb	1	; select bank1
  8496  040B  00C8               	movwf	_i2c2_trb_count^(0+128)
  8497                           
  8498                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
  8499  040C  0020               	movlb	0	; select bank0
  8500  040D  0861               	movf	low ((_i2c2_object| 0+1)),w
  8501  040E  0086               	movwf	6
  8502  040F  0187               	clrf	7
  8503  0410  3F41               	moviw [1]fsr1
  8504  0411  00EB               	movwf	_p_i2c2_trb_current
  8505                           
  8506                           ;i2c2.c: 270: i2c2_object.pTrHead++;
  8507  0412  3003               	movlw	3
  8508  0413  00F2               	movwf	??_I2C2_ISR
  8509  0414  0872               	movf	??_I2C2_ISR,w
  8510  0415  07E1               	addwf	low ((_i2c2_object| 0+1)),f
  8511                           
  8512                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
  8513  0416  0861               	movf	low ((_i2c2_object| 0+1)),w
  8514  0417  3AE1               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
  8515  0418  1D03               	skipz
  8516  0419  2C1E               	goto	i1l3593
  8517                           
  8518                           ;i2c2.c: 274: {
  8519                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
  8520  041A  30DE               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  8521  041B  00F2               	movwf	??_I2C2_ISR
  8522  041C  0872               	movf	??_I2C2_ISR,w
  8523  041D  00E1               	movwf	low ((_i2c2_object| 0+1))
  8524  041E                     i1l3593:	
  8525                           
  8526                           ;i2c2.c: 277: }
  8527                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
  8528  041E  1062               	bcf	_i2c2_object+2,0
  8529                           
  8530                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
  8531  041F  0861               	movf	low ((_i2c2_object| 0+1)),w
  8532  0420  0660               	xorwf	_i2c2_object,w
  8533  0421  1903               	btfsc	3,2
  8534                           
  8535                           ;i2c2.c: 285: {
  8536                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
  8537  0422  14E2               	bsf	_i2c2_object+2,1
  8538                           
  8539                           ;i2c2.c: 288: }
  8540                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
  8541  0423  0024               	movlb	4	; select bank4
  8542  0424  141E               	bsf	30,0	;volatile
  8543                           
  8544                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
  8545  0425  3002               	movlw	2
  8546  0426  00F2               	movwf	??_I2C2_ISR
  8547  0427  0872               	movf	??_I2C2_ISR,w
  8548  0428  0021               	movlb	1	; select bank1
  8549  0429  00C9               	movwf	_i2c2_state^(0+128)
  8550                           
  8551                           ;i2c2.c: 295: }
  8552                           ;i2c2.c: 297: break;
  8553  042A  0008               	return
  8554  042B                     i1l189:	
  8555                           ;i2c2.c: 299: case S_MASTER_RESTART:
  8556                           
  8557                           
  8558                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
  8559  042B  0024               	movlb	4	; select bank4
  8560  042C  149E               	bsf	30,1	;volatile
  8561                           
  8562                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
  8563  042D  3002               	movlw	2
  8564  042E  00F2               	movwf	??_I2C2_ISR
  8565  042F  0872               	movf	??_I2C2_ISR,w
  8566  0430  0021               	movlb	1	; select bank1
  8567  0431  00C9               	movwf	_i2c2_state^(0+128)
  8568                           
  8569                           ;i2c2.c: 309: break;
  8570  0432  0008               	return
  8571  0433                     i1l190:	
  8572                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
  8573                           
  8574                           
  8575                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
  8576  0433  0024               	movlb	4	; select bank4
  8577  0434  1F1E               	btfss	30,6	;volatile
  8578  0435  2C3F               	goto	i1l3605
  8579                           
  8580                           ;i2c2.c: 314: {
  8581                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
  8582  0436  3001               	movlw	1
  8583  0437  00F2               	movwf	??_I2C2_ISR
  8584  0438  0872               	movf	??_I2C2_ISR,w
  8585  0439  0020               	movlb	0	; select bank0
  8586  043A  07E4               	addwf	_i2c2_object+4,f
  8587                           
  8588                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  8589  043B  3004               	movlw	4
  8590  043C  318A  22B5         	fcall	_I2C2_Stop
  8591                           
  8592                           ;i2c2.c: 317: }
  8593  043E  0008               	return
  8594  043F                     i1l3605:	
  8595                           
  8596                           ;i2c2.c: 318: else
  8597                           ;i2c2.c: 319: {
  8598                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
  8599  043F  0020               	movlb	0	; select bank0
  8600  0440  086E               	movf	I2C2_ISR@i2c_address+1,w
  8601  0441  00F3               	movwf	??_I2C2_ISR+1
  8602  0442  086D               	movf	I2C2_ISR@i2c_address,w
  8603  0443  00F2               	movwf	??_I2C2_ISR
  8604  0444  36F3               	lsrf	??_I2C2_ISR+1,f
  8605  0445  0CF2               	rrf	??_I2C2_ISR,f
  8606  0446  0872               	movf	??_I2C2_ISR,w
  8607  0447  0024               	movlb	4	; select bank4
  8608  0448  0099               	movwf	25	;volatile
  8609                           
  8610                           ;i2c2.c: 324: if(i2c_address & 0x01)
  8611  0449  0020               	movlb	0	; select bank0
  8612  044A  1C6D               	btfss	I2C2_ISR@i2c_address,0
  8613  044B  2C52               	goto	i1l3611
  8614                           
  8615                           ;i2c2.c: 325: {
  8616                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
  8617  044C  300B               	movlw	11
  8618  044D  00F2               	movwf	??_I2C2_ISR
  8619  044E  0872               	movf	??_I2C2_ISR,w
  8620  044F  0021               	movlb	1	; select bank1
  8621  0450  00C9               	movwf	_i2c2_state^(0+128)
  8622                           
  8623                           ;i2c2.c: 329: }
  8624  0451  0008               	return
  8625  0452                     i1l3611:	
  8626                           
  8627                           ;i2c2.c: 330: else
  8628                           ;i2c2.c: 331: {
  8629                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
  8630  0452  3003               	movlw	3
  8631  0453  00F2               	movwf	??_I2C2_ISR
  8632  0454  0872               	movf	??_I2C2_ISR,w
  8633  0455  0021               	movlb	1	; select bank1
  8634  0456  00C9               	movwf	_i2c2_state^(0+128)
  8635                           
  8636                           ;i2c2.c: 334: }
  8637                           ;i2c2.c: 335: }
  8638                           ;i2c2.c: 337: break;
  8639  0457  0008               	return
  8640  0458                     i1l195:	
  8641                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
  8642                           
  8643                           
  8644                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
  8645  0458  0024               	movlb	4	; select bank4
  8646  0459  1F1E               	btfss	30,6	;volatile
  8647  045A  2C64               	goto	i1l196
  8648                           
  8649                           ;i2c2.c: 342: {
  8650                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
  8651  045B  3001               	movlw	1
  8652  045C  00F2               	movwf	??_I2C2_ISR
  8653  045D  0872               	movf	??_I2C2_ISR,w
  8654  045E  0020               	movlb	0	; select bank0
  8655  045F  07E4               	addwf	_i2c2_object+4,f
  8656                           
  8657                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  8658  0460  3004               	movlw	4
  8659  0461  318A  22B5         	fcall	_I2C2_Stop
  8660                           
  8661                           ;i2c2.c: 345: }
  8662  0463  0008               	return
  8663  0464                     i1l196:	
  8664                           
  8665                           ;i2c2.c: 346: else
  8666                           ;i2c2.c: 347: {
  8667                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
  8668  0464  149E               	bsf	30,1	;volatile
  8669                           
  8670                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
  8671  0465  0020               	movlb	0	; select bank0
  8672  0466  086E               	movf	I2C2_ISR@i2c_address+1,w
  8673  0467  00F3               	movwf	??_I2C2_ISR+1
  8674  0468  086D               	movf	I2C2_ISR@i2c_address,w
  8675  0469  00F2               	movwf	??_I2C2_ISR
  8676  046A  0873               	movf	??_I2C2_ISR+1,w
  8677  046B  00F2               	movwf	??_I2C2_ISR
  8678  046C  01F3               	clrf	??_I2C2_ISR+1
  8679  046D  3006               	movlw	6
  8680  046E  0572               	andwf	??_I2C2_ISR,w
  8681  046F  00F4               	movwf	??_I2C2_ISR+2
  8682  0470  3000               	movlw	0
  8683  0471  0573               	andwf	??_I2C2_ISR+1,w
  8684  0472  00F5               	movwf	??_I2C2_ISR+3
  8685  0473  30F0               	movlw	240
  8686  0474  0474               	iorwf	??_I2C2_ISR+2,w
  8687  0475  00ED               	movwf	I2C2_ISR@i2c_address
  8688  0476  3000               	movlw	0
  8689  0477  0475               	iorwf	??_I2C2_ISR+3,w
  8690  0478  00EE               	movwf	I2C2_ISR@i2c_address+1
  8691                           
  8692                           ;i2c2.c: 357: i2c_address |= 0x0001;
  8693  0479  146D               	bsf	I2C2_ISR@i2c_address,0
  8694                           
  8695                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
  8696  047A  0021               	movlb	1	; select bank1
  8697  047B  01C5               	clrf	I2C2_ISR@i2c_10bit_address_restart^(0+128)
  8698  047C  0AC5               	incf	I2C2_ISR@i2c_10bit_address_restart^(0+128),f
  8699                           
  8700                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
  8701  047D  3002               	movlw	2
  8702  047E  00F2               	movwf	??_I2C2_ISR
  8703  047F  0872               	movf	??_I2C2_ISR,w
  8704  0480  00C9               	movwf	_i2c2_state^(0+128)
  8705                           
  8706                           ;i2c2.c: 364: }
  8707                           ;i2c2.c: 366: break;
  8708  0481  0008               	return
  8709  0482                     i1l3625:	
  8710                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
  8711                           
  8712                           
  8713                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
  8714  0482  0345               	decf	I2C2_ISR@i2c_10bit_address_restart^(0+128),w
  8715  0483  1903               	btfsc	3,2
  8716  0484  2C9A               	goto	i1l3645
  8717                           
  8718                           ;i2c2.c: 382: {
  8719                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
  8720  0485  0020               	movlb	0	; select bank0
  8721  0486  086B               	movf	_p_i2c2_trb_current,w
  8722  0487  0086               	movwf	6
  8723  0488  0187               	clrf	7
  8724  0489  3F40               	moviw [0]fsr1
  8725  048A  00ED               	movwf	I2C2_ISR@i2c_address
  8726  048B  3F41               	moviw [1]fsr1
  8727  048C  00EE               	movwf	I2C2_ISR@i2c_address+1
  8728                           
  8729                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
  8730  048D  086B               	movf	_p_i2c2_trb_current,w
  8731  048E  0086               	movwf	6
  8732  048F  0187               	clrf	7
  8733  0490  3F43               	moviw [3]fsr1
  8734  0491  0021               	movlb	1	; select bank1
  8735  0492  00C7               	movwf	I2C2_ISR@pi2c_buf_ptr^(0+128)
  8736                           
  8737                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
  8738  0493  0020               	movlb	0	; select bank0
  8739  0494  086B               	movf	_p_i2c2_trb_current,w
  8740  0495  0086               	movwf	6
  8741  0496  0187               	clrf	7
  8742  0497  3F42               	moviw [2]fsr1
  8743  0498  0021               	movlb	1	; select bank1
  8744  0499  00C6               	movwf	I2C2_ISR@i2c_bytes_left^(0+128)
  8745  049A                     i1l3645:	
  8746                           ;i2c2.c: 407: }
  8747                           ;i2c2.c: 408: }
  8748                           
  8749                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
  8750                           
  8751                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
  8752                           
  8753                           ;i2c2.c: 400: else
  8754                           ;i2c2.c: 401: {
  8755                           ;i2c2.c: 403: SSP2BUF = i2c_address;
  8756                           
  8757                           ;i2c2.c: 399: }
  8758                           
  8759                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
  8760                           
  8761                           ;i2c2.c: 393: {
  8762                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
  8763                           
  8764                           ;i2c2.c: 391: {
  8765                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
  8766                           
  8767                           ;i2c2.c: 387: }
  8768                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
  8769                           
  8770                           
  8771                           ;i2c2.c: 409: else
  8772                           ;i2c2.c: 410: {
  8773                           ;i2c2.c: 412: SSP2BUF = i2c_address;
  8774  049A  0020               	movlb	0	; select bank0
  8775  049B  086D               	movf	I2C2_ISR@i2c_address,w
  8776  049C  0024               	movlb	4	; select bank4
  8777  049D  0099               	movwf	25	;volatile
  8778                           
  8779                           ;i2c2.c: 413: if(i2c_address & 0x01)
  8780  049E  0020               	movlb	0	; select bank0
  8781  049F  1C6D               	btfss	I2C2_ISR@i2c_address,0
  8782  04A0  2CA7               	goto	i1l3651
  8783                           
  8784                           ;i2c2.c: 414: {
  8785                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
  8786  04A1  3005               	movlw	5
  8787  04A2  00F2               	movwf	??_I2C2_ISR
  8788  04A3  0872               	movf	??_I2C2_ISR,w
  8789  04A4  0021               	movlb	1	; select bank1
  8790  04A5  00C9               	movwf	_i2c2_state^(0+128)
  8791                           
  8792                           ;i2c2.c: 417: }
  8793  04A6  0008               	return
  8794  04A7                     i1l3651:	
  8795                           
  8796                           ;i2c2.c: 418: else
  8797                           ;i2c2.c: 419: {
  8798                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
  8799  04A7  3003               	movlw	3
  8800  04A8  00F2               	movwf	??_I2C2_ISR
  8801  04A9  0872               	movf	??_I2C2_ISR,w
  8802  04AA  0021               	movlb	1	; select bank1
  8803  04AB  00C9               	movwf	_i2c2_state^(0+128)
  8804                           
  8805                           ;i2c2.c: 422: }
  8806                           ;i2c2.c: 423: }
  8807                           ;i2c2.c: 424: break;
  8808  04AC  0008               	return
  8809  04AD                     i1l206:	
  8810                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
  8811                           
  8812                           
  8813                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
  8814  04AD  0024               	movlb	4	; select bank4
  8815  04AE  1F1E               	btfss	30,6	;volatile
  8816  04AF  2CBB               	goto	i1l3659
  8817                           
  8818                           ;i2c2.c: 430: {
  8819                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
  8820  04B0  3001               	movlw	1
  8821  04B1  00F2               	movwf	??_I2C2_ISR
  8822  04B2  0872               	movf	??_I2C2_ISR,w
  8823  04B3  0020               	movlb	0	; select bank0
  8824  04B4  07E4               	addwf	_i2c2_object+4,f
  8825                           
  8826                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
  8827  04B5  0024               	movlb	4	; select bank4
  8828  04B6  131E               	bcf	30,6	;volatile
  8829                           
  8830                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
  8831  04B7  3005               	movlw	5
  8832  04B8  318A  22B5         	fcall	_I2C2_Stop
  8833                           
  8834                           ;i2c2.c: 440: }
  8835  04BA  0008               	return
  8836  04BB                     i1l3659:	
  8837                           
  8838                           ;i2c2.c: 441: else
  8839                           ;i2c2.c: 442: {
  8840                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
  8841  04BB  3001               	movlw	1
  8842  04BC  0021               	movlb	1	; select bank1
  8843  04BD  02C6               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
  8844  04BE  0A46               	incf	I2C2_ISR@i2c_bytes_left^(0+128),w
  8845  04BF  1D03               	btfss	3,2
  8846  04C0  2CD7               	goto	i1l3667
  8847                           
  8848                           ;i2c2.c: 445: {
  8849                           ;i2c2.c: 449: p_i2c2_trb_current++;
  8850  04C1  3004               	movlw	4
  8851  04C2  00F2               	movwf	??_I2C2_ISR
  8852  04C3  0872               	movf	??_I2C2_ISR,w
  8853  04C4  0020               	movlb	0	; select bank0
  8854  04C5  07EB               	addwf	_p_i2c2_trb_current,f
  8855                           
  8856                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
  8857  04C6  3001               	movlw	1
  8858  04C7  0021               	movlb	1	; select bank1
  8859  04C8  02C8               	subwf	_i2c2_trb_count^(0+128),f
  8860  04C9  1D03               	btfss	3,2
  8861  04CA  2CCF               	goto	i1l210
  8862                           
  8863                           ;i2c2.c: 453: {
  8864                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
  8865  04CB  3000               	movlw	0
  8866  04CC  318A  22B5         	fcall	_I2C2_Stop
  8867                           
  8868                           ;i2c2.c: 455: }
  8869  04CE  0008               	return
  8870  04CF                     i1l210:	
  8871                           
  8872                           ;i2c2.c: 456: else
  8873                           ;i2c2.c: 457: {
  8874                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
  8875  04CF  0024               	movlb	4	; select bank4
  8876  04D0  149E               	bsf	30,1	;volatile
  8877                           
  8878                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
  8879  04D1  3002               	movlw	2
  8880  04D2  00F2               	movwf	??_I2C2_ISR
  8881  04D3  0872               	movf	??_I2C2_ISR,w
  8882  04D4  0021               	movlb	1	; select bank1
  8883  04D5  00C9               	movwf	_i2c2_state^(0+128)
  8884                           
  8885                           ;i2c2.c: 469: }
  8886                           ;i2c2.c: 470: }
  8887  04D6  0008               	return
  8888  04D7                     i1l3667:	
  8889                           
  8890                           ;i2c2.c: 471: else
  8891                           ;i2c2.c: 472: {
  8892                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
  8893  04D7  0847               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
  8894  04D8  0086               	movwf	6
  8895  04D9  0187               	clrf	7
  8896  04DA  0801               	movf	1,w
  8897  04DB  0024               	movlb	4	; select bank4
  8898  04DC  0099               	movwf	25	;volatile
  8899  04DD  3001               	movlw	1
  8900  04DE  00F2               	movwf	??_I2C2_ISR
  8901  04DF  0872               	movf	??_I2C2_ISR,w
  8902  04E0  0021               	movlb	1	; select bank1
  8903  04E1  07C7               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
  8904                           
  8905                           ;i2c2.c: 475: }
  8906                           ;i2c2.c: 476: }
  8907                           ;i2c2.c: 477: break;
  8908  04E2  0008               	return
  8909  04E3                     i1l213:	
  8910                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
  8911                           
  8912                           
  8913                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
  8914  04E3  0024               	movlb	4	; select bank4
  8915  04E4  1F1E               	btfss	30,6	;volatile
  8916  04E5  2CF1               	goto	i1l214
  8917                           
  8918                           ;i2c2.c: 483: {
  8919                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
  8920  04E6  3001               	movlw	1
  8921  04E7  00F2               	movwf	??_I2C2_ISR
  8922  04E8  0872               	movf	??_I2C2_ISR,w
  8923  04E9  0020               	movlb	0	; select bank0
  8924  04EA  07E4               	addwf	_i2c2_object+4,f
  8925                           
  8926                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  8927  04EB  3004               	movlw	4
  8928  04EC  318A  22B5         	fcall	_I2C2_Stop
  8929                           
  8930                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
  8931  04EE  0024               	movlb	4	; select bank4
  8932  04EF  131E               	bcf	30,6	;volatile
  8933                           
  8934                           ;i2c2.c: 493: }
  8935  04F0  0008               	return
  8936  04F1                     i1l214:	
  8937                           
  8938                           ;i2c2.c: 494: else
  8939                           ;i2c2.c: 495: {
  8940                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
  8941  04F1  159E               	bsf	30,3	;volatile
  8942                           
  8943                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
  8944  04F2  3008               	movlw	8
  8945  04F3  00F2               	movwf	??_I2C2_ISR
  8946  04F4  0872               	movf	??_I2C2_ISR,w
  8947  04F5  0021               	movlb	1	; select bank1
  8948  04F6  00C9               	movwf	_i2c2_state^(0+128)
  8949                           
  8950                           ;i2c2.c: 498: }
  8951                           ;i2c2.c: 499: break;
  8952  04F7  0008               	return
  8953  04F8                     i1l3679:	
  8954                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
  8955                           
  8956                           
  8957                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
  8958  04F8  3008               	movlw	8
  8959  04F9  00F2               	movwf	??_I2C2_ISR
  8960  04FA  0872               	movf	??_I2C2_ISR,w
  8961  04FB  00C9               	movwf	_i2c2_state^(0+128)
  8962                           
  8963                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
  8964  04FC  0024               	movlb	4	; select bank4
  8965  04FD  159E               	bsf	30,3	;volatile
  8966                           
  8967                           ;i2c2.c: 511: break;
  8968  04FE  0008               	return
  8969  04FF                     i1l3683:	
  8970                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
  8971                           
  8972                           
  8973                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
  8974  04FF  0024               	movlb	4	; select bank4
  8975  0500  0819               	movf	25,w	;volatile
  8976  0501  00F2               	movwf	??_I2C2_ISR
  8977  0502  0021               	movlb	1	; select bank1
  8978  0503  0847               	movf	I2C2_ISR@pi2c_buf_ptr^(0+128),w
  8979  0504  0086               	movwf	6
  8980  0505  0187               	clrf	7
  8981  0506  0872               	movf	??_I2C2_ISR,w
  8982  0507  0081               	movwf	1
  8983  0508  3001               	movlw	1
  8984  0509  00F2               	movwf	??_I2C2_ISR
  8985  050A  0872               	movf	??_I2C2_ISR,w
  8986  050B  07C7               	addwf	I2C2_ISR@pi2c_buf_ptr^(0+128),f
  8987                           
  8988                           ;i2c2.c: 519: if(--i2c_bytes_left)
  8989  050C  3001               	movlw	1
  8990  050D  02C6               	subwf	I2C2_ISR@i2c_bytes_left^(0+128),f
  8991  050E  1903               	btfsc	3,2
  8992  050F  2D18               	goto	i1l218
  8993                           
  8994                           ;i2c2.c: 520: {
  8995                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
  8996  0510  0024               	movlb	4	; select bank4
  8997  0511  129E               	bcf	30,5	;volatile
  8998                           
  8999                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
  9000  0512  3006               	movlw	6
  9001  0513  00F2               	movwf	??_I2C2_ISR
  9002  0514  0872               	movf	??_I2C2_ISR,w
  9003  0515  0021               	movlb	1	; select bank1
  9004  0516  00C9               	movwf	_i2c2_state^(0+128)
  9005                           
  9006                           ;i2c2.c: 530: }
  9007  0517  2D1C               	goto	i1l3695
  9008  0518                     i1l218:	
  9009                           
  9010                           ;i2c2.c: 531: else
  9011                           ;i2c2.c: 532: {
  9012                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
  9013  0518  0024               	movlb	4	; select bank4
  9014  0519  169E               	bsf	30,5	;volatile
  9015                           
  9016                           ;i2c2.c: 538: I2C2_FunctionComplete();
  9017  051A  3187  27EE         	fcall	_I2C2_FunctionComplete
  9018  051C                     i1l3695:	
  9019                           
  9020                           ;i2c2.c: 539: }
  9021                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
  9022  051C  0024               	movlb	4	; select bank4
  9023  051D  161E               	bsf	30,4	;volatile
  9024                           
  9025                           ;i2c2.c: 543: break;
  9026  051E  0008               	return
  9027  051F                     i1l3697:	
  9028                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
  9029                           
  9030                           
  9031                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
  9032                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
  9033  051F  3000               	movlw	0
  9034  0520  318A  22B5         	fcall	_I2C2_Stop
  9035                           
  9036                           ;i2c2.c: 550: break;
  9037  0522  0008               	return
  9038  0523                     i1l3699:	
  9039                           ;i2c2.c: 552: default:
  9040                           
  9041                           
  9042                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
  9043  0523  3001               	movlw	1
  9044  0524  00F2               	movwf	??_I2C2_ISR
  9045  0525  0872               	movf	??_I2C2_ISR,w
  9046  0526  0020               	movlb	0	; select bank0
  9047  0527  07E4               	addwf	_i2c2_object+4,f
  9048                           
  9049                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
  9050  0528  3006               	movlw	6
  9051  0529  318A  22B5         	fcall	_I2C2_Stop
  9052                           
  9053                           ;i2c2.c: 560: }
  9054                           
  9055                           ;i2c2.c: 558: break;
  9056  052B  0008               	return
  9057  052C                     i1l3705:	
  9058  052C  0021               	movlb	1	; select bank1
  9059  052D  0849               	movf	_i2c2_state^(0+128),w
  9060                           
  9061                           ; Switch size 1, requested type "space"
  9062                           ; Number of cases is 11, Range of values is 0 to 11
  9063                           ; switch strategies available:
  9064                           ; Name         Instructions Cycles
  9065                           ; direct_byte           30     6 (fixed)
  9066                           ; simple_byte           34    18 (average)
  9067                           ; jumptable            260     6 (fixed)
  9068                           ;	Chosen strategy is direct_byte
  9069  052E  0084               	movwf	4
  9070  052F  300C               	movlw	12
  9071  0530  0204               	subwf	4,w
  9072  0531  1803               	skipnc
  9073  0532  2D23               	goto	i1l3699
  9074  0533  3188               	movlp	high i1S4713
  9075  0534  3504               	lslf	4,w
  9076  0535  3E00               	addlw	low i1S4713
  9077  0536  0082               	movwf	2
  9078  0537  0008               	return
  9079  0538                     __end_of_I2C2_ISR:	
  9080                           
  9081                           	psect	swtext1
  9082  0800                     __pswtext1:	
  9083  0800                     i1S4713:	
  9084  0800  3183  2BFD         	ljmp	i1l184
  9085  0802  3184  2C2B         	ljmp	i1l189
  9086  0804  3184  2C82         	ljmp	i1l3625
  9087  0806  3184  2CAD         	ljmp	i1l206
  9088  0808  3185  2D1F         	ljmp	i1l3697
  9089  080A  3184  2CE3         	ljmp	i1l213
  9090  080C  3184  2CF8         	ljmp	i1l3679
  9091  080E  3185  2D1F         	ljmp	i1l3697
  9092  0810  3184  2CFF         	ljmp	i1l3683
  9093  0812  3185  2D23         	ljmp	i1l3699
  9094  0814  3184  2C33         	ljmp	i1l190
  9095  0816  3184  2C58         	ljmp	i1l195
  9096                           
  9097                           	psect	text44
  9098  0AB5                     __ptext44:	
  9099 ;; *************** function _I2C2_Stop *****************
  9100 ;; Defined at:
  9101 ;;		line 581 in file "mcc_generated_files/i2c2.c"
  9102 ;; Parameters:    Size  Location     Type
  9103 ;;  completion_c    1    wreg     enum E2972
  9104 ;; Auto vars:     Size  Location     Type
  9105 ;;  completion_c    1    1[COMMON] enum E2972
  9106 ;; Return value:  Size  Location     Type
  9107 ;;                  1    wreg      void 
  9108 ;; Registers used:
  9109 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9110 ;; Tracked objects:
  9111 ;;		On entry : 0/0
  9112 ;;		On exit  : 0/0
  9113 ;;		Unchanged: 0/0
  9114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9116 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9117 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9118 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9119 ;;Total ram usage:        2 bytes
  9120 ;; Hardware stack levels used:    1
  9121 ;; This function calls:
  9122 ;;		Nothing
  9123 ;; This function is called by:
  9124 ;;		_I2C2_ISR
  9125 ;; This function uses a non-reentrant model
  9126 ;;
  9127                           
  9128                           
  9129                           ;psect for function _I2C2_Stop
  9130  0AB5                     _I2C2_Stop:	
  9131                           
  9132                           ;incstack = 0
  9133                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
  9134                           ;I2C2_Stop@completion_code stored from wreg
  9135  0AB5  00F1               	movwf	I2C2_Stop@completion_code
  9136                           
  9137                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
  9138  0AB6  0024               	movlb	4	; select bank4
  9139  0AB7  151E               	bsf	30,2	;volatile
  9140                           
  9141                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
  9142  0AB8  0020               	movlb	0	; select bank0
  9143  0AB9  086A               	movf	_p_i2c2_current,w
  9144  0ABA  3E02               	addlw	2
  9145  0ABB  0086               	movwf	6
  9146  0ABC  0187               	clrf	7
  9147  0ABD  0801               	movf	1,w
  9148  0ABE  1903               	btfsc	3,2
  9149  0ABF  2ACB               	goto	i1l3397
  9150                           
  9151                           ;i2c2.c: 588: {
  9152                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
  9153  0AC0  0871               	movf	I2C2_Stop@completion_code,w
  9154  0AC1  00F0               	movwf	??_I2C2_Stop
  9155  0AC2  086A               	movf	_p_i2c2_current,w
  9156  0AC3  3E02               	addlw	2
  9157  0AC4  0086               	movwf	6
  9158  0AC5  0187               	clrf	7
  9159  0AC6  0801               	movf	1,w
  9160  0AC7  0086               	movwf	6
  9161  0AC8  0187               	clrf	7
  9162  0AC9  0870               	movf	??_I2C2_Stop,w
  9163  0ACA  0081               	movwf	1
  9164  0ACB                     i1l3397:	
  9165                           
  9166                           ;i2c2.c: 591: }
  9167                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
  9168  0ACB  0021               	movlb	1	; select bank1
  9169  0ACC  01C9               	clrf	_i2c2_state^(0+128)
  9170  0ACD  0008               	return
  9171  0ACE                     __end_of_I2C2_Stop:	
  9172                           
  9173                           	psect	text45
  9174  07EE                     __ptext45:	
  9175 ;; *************** function _I2C2_FunctionComplete *****************
  9176 ;; Defined at:
  9177 ;;		line 563 in file "mcc_generated_files/i2c2.c"
  9178 ;; Parameters:    Size  Location     Type
  9179 ;;		None
  9180 ;; Auto vars:     Size  Location     Type
  9181 ;;		None
  9182 ;; Return value:  Size  Location     Type
  9183 ;;                  1    wreg      void 
  9184 ;; Registers used:
  9185 ;;		wreg, status,2, status,0
  9186 ;; Tracked objects:
  9187 ;;		On entry : 0/0
  9188 ;;		On exit  : 0/0
  9189 ;;		Unchanged: 0/0
  9190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9193 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9194 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9195 ;;Total ram usage:        1 bytes
  9196 ;; Hardware stack levels used:    1
  9197 ;; This function calls:
  9198 ;;		Nothing
  9199 ;; This function is called by:
  9200 ;;		_I2C2_ISR
  9201 ;; This function uses a non-reentrant model
  9202 ;;
  9203                           
  9204                           
  9205                           ;psect for function _I2C2_FunctionComplete
  9206  07EE                     _I2C2_FunctionComplete:	
  9207                           
  9208                           ;i2c2.c: 567: p_i2c2_trb_current++;
  9209                           
  9210                           ;incstack = 0
  9211                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
  9212  07EE  3004               	movlw	4
  9213  07EF  00F0               	movwf	??_I2C2_FunctionComplete
  9214  07F0  0870               	movf	??_I2C2_FunctionComplete,w
  9215  07F1  0020               	movlb	0	; select bank0
  9216  07F2  07EB               	addwf	_p_i2c2_trb_current,f
  9217                           
  9218                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
  9219  07F3  3001               	movlw	1
  9220  07F4  0021               	movlb	1	; select bank1
  9221  07F5  02C8               	subwf	_i2c2_trb_count^(0+128),f
  9222  07F6  1D03               	btfss	3,2
  9223  07F7  2FFD               	goto	i1l225
  9224                           
  9225                           ;i2c2.c: 571: {
  9226                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
  9227  07F8  3004               	movlw	4
  9228  07F9  00F0               	movwf	??_I2C2_FunctionComplete
  9229  07FA  0870               	movf	??_I2C2_FunctionComplete,w
  9230  07FB  00C9               	movwf	_i2c2_state^(0+128)
  9231                           
  9232                           ;i2c2.c: 573: }
  9233  07FC  0008               	return
  9234  07FD                     i1l225:	
  9235                           
  9236                           ;i2c2.c: 574: else
  9237                           ;i2c2.c: 575: {
  9238                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
  9239  07FD  01C9               	clrf	_i2c2_state^(0+128)
  9240  07FE  0AC9               	incf	_i2c2_state^(0+128),f
  9241  07FF  0008               	return
  9242  0800                     __end_of_I2C2_FunctionComplete:	
  9243                           
  9244                           	psect	text46
  9245  09F9                     __ptext46:	
  9246 ;; *************** function _I2C2_BusCollisionISR *****************
  9247 ;; Defined at:
  9248 ;;		line 728 in file "mcc_generated_files/i2c2.c"
  9249 ;; Parameters:    Size  Location     Type
  9250 ;;		None
  9251 ;; Auto vars:     Size  Location     Type
  9252 ;;		None
  9253 ;; Return value:  Size  Location     Type
  9254 ;;                  1    wreg      void 
  9255 ;; Registers used:
  9256 ;;		None
  9257 ;; Tracked objects:
  9258 ;;		On entry : 0/0
  9259 ;;		On exit  : 0/0
  9260 ;;		Unchanged: 0/0
  9261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;Total ram usage:        0 bytes
  9267 ;; Hardware stack levels used:    1
  9268 ;; This function calls:
  9269 ;;		Nothing
  9270 ;; This function is called by:
  9271 ;;		_INTERRUPT_InterruptManager
  9272 ;; This function uses a non-reentrant model
  9273 ;;
  9274                           
  9275                           
  9276                           ;psect for function _I2C2_BusCollisionISR
  9277  09F9                     _I2C2_BusCollisionISR:	
  9278                           
  9279                           ;incstack = 0
  9280                           ; Regs used in _I2C2_BusCollisionISR: []
  9281  09F9  0008               	return
  9282  09FA                     __end_of_I2C2_BusCollisionISR:	
  9283                           
  9284                           	psect	text47
  9285  0C3E                     __ptext47:	
  9286 ;; *************** function _I2C1_ISR *****************
  9287 ;; Defined at:
  9288 ;;		line 57 in file "mcc_generated_files/i2c1.c"
  9289 ;; Parameters:    Size  Location     Type
  9290 ;;		None
  9291 ;; Auto vars:     Size  Location     Type
  9292 ;;  i2c_data        1    9[COMMON] unsigned char 
  9293 ;; Return value:  Size  Location     Type
  9294 ;;                  1    wreg      void 
  9295 ;; Registers used:
  9296 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9297 ;; Tracked objects:
  9298 ;;		On entry : 0/0
  9299 ;;		On exit  : 0/0
  9300 ;;		Unchanged: 0/0
  9301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9303 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9304 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9305 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9306 ;;Total ram usage:        2 bytes
  9307 ;; Hardware stack levels used:    1
  9308 ;; Hardware stack levels required when called:    3
  9309 ;; This function calls:
  9310 ;;		_I2C1_StatusCallback
  9311 ;; This function is called by:
  9312 ;;		_INTERRUPT_InterruptManager
  9313 ;; This function uses a non-reentrant model
  9314 ;;
  9315                           
  9316                           
  9317                           ;psect for function _I2C1_ISR
  9318  0C3E                     _I2C1_ISR:	
  9319                           
  9320                           ;i2c1.c: 59: uint8_t i2c_data = 0x55;
  9321                           
  9322                           ;incstack = 0
  9323                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9324  0C3E  3055               	movlw	85
  9325  0C3F  00F8               	movwf	??_I2C1_ISR
  9326  0C40  0878               	movf	??_I2C1_ISR,w
  9327  0C41  00F9               	movwf	I2C1_ISR@i2c_data
  9328                           
  9329                           ;i2c1.c: 64: PIR1bits.SSP1IF = 0;
  9330  0C42  0020               	movlb	0	; select bank0
  9331  0C43  1191               	bcf	17,3	;volatile
  9332                           
  9333                           ;i2c1.c: 65: i2c_data = SSP1BUF;
  9334  0C44  0024               	movlb	4	; select bank4
  9335  0C45  0811               	movf	17,w	;volatile
  9336  0C46  00F8               	movwf	??_I2C1_ISR
  9337  0C47  0878               	movf	??_I2C1_ISR,w
  9338  0C48  00F9               	movwf	I2C1_ISR@i2c_data
  9339                           
  9340                           ;i2c1.c: 66: if(1 == SSP1STATbits.R_nW)
  9341  0C49  1D14               	btfss	20,2	;volatile
  9342  0C4A  2C52               	goto	i1l64
  9343                           
  9344                           ;i2c1.c: 67: {
  9345                           ;i2c1.c: 68: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
  9346  0C4B  1A94               	btfsc	20,5	;volatile
  9347  0C4C  1F16               	btfss	22,6	;volatile
  9348  0C4D  2C50               	goto	i1l3537
  9349                           
  9350                           ;i2c1.c: 69: {
  9351                           ;i2c1.c: 71: I2C1_StatusCallback(I2C1_SLAVE_READ_COMPLETED);
  9352  0C4E  3003               	movlw	3
  9353  0C4F  2C60               	goto	L3
  9354  0C50                     i1l3537:	
  9355                           ;i2c1.c: 72: }
  9356                           
  9357                           
  9358                           ;i2c1.c: 73: else
  9359                           ;i2c1.c: 74: {
  9360                           ;i2c1.c: 76: I2C1_StatusCallback(I2C1_SLAVE_READ_REQUEST);
  9361  0C50  3001               	movlw	1
  9362  0C51  2C60               	goto	L3
  9363  0C52                     i1l64:	
  9364                           ;i2c1.c: 77: }
  9365                           ;i2c1.c: 78: }
  9366                           
  9367                           
  9368                           ;i2c1.c: 79: else if(0 == SSP1STATbits.D_nA)
  9369  0C52  1A94               	btfsc	20,5	;volatile
  9370  0C53  2C5B               	goto	i1l3545
  9371                           
  9372                           ;i2c1.c: 80: {
  9373                           ;i2c1.c: 83: if(0x00 == i2c_data)
  9374  0C54  0879               	movf	I2C1_ISR@i2c_data,w
  9375  0C55  1D03               	btfss	3,2
  9376  0C56  2C59               	goto	i1l3543
  9377                           
  9378                           ;i2c1.c: 84: {
  9379                           ;i2c1.c: 86: I2C1_StatusCallback(I2C1_SLAVE_GENERAL_CALL_REQUEST);
  9380  0C57  3004               	movlw	4
  9381  0C58  2C60               	goto	L3
  9382  0C59                     i1l3543:	
  9383                           ;i2c1.c: 87: }
  9384                           
  9385                           
  9386                           ;i2c1.c: 88: else
  9387                           ;i2c1.c: 89: {
  9388                           ;i2c1.c: 91: I2C1_StatusCallback(I2C1_SLAVE_WRITE_REQUEST);
  9389  0C59  3000               	movlw	0
  9390  0C5A  2C60               	goto	L3
  9391  0C5B                     i1l3545:	
  9392                           ;i2c1.c: 92: }
  9393                           ;i2c1.c: 93: }
  9394                           
  9395                           
  9396                           ;i2c1.c: 94: else
  9397                           ;i2c1.c: 95: {
  9398                           ;i2c1.c: 96: I2C_slaveWriteData = i2c_data;
  9399  0C5B  0879               	movf	I2C1_ISR@i2c_data,w
  9400  0C5C  00F8               	movwf	??_I2C1_ISR
  9401  0C5D  0878               	movf	??_I2C1_ISR,w
  9402  0C5E  00FD               	movwf	_I2C_slaveWriteData	;volatile
  9403                           
  9404                           ;i2c1.c: 99: I2C1_StatusCallback(I2C1_SLAVE_WRITE_COMPLETED);
  9405  0C5F  3002               	movlw	2
  9406  0C60                     L3:	
  9407  0C60  3185  2538         	fcall	_I2C1_StatusCallback
  9408                           
  9409                           ;i2c1.c: 100: }
  9410                           ;i2c1.c: 102: SSP1CON1bits.CKP = 1;
  9411  0C62  0024               	movlb	4	; select bank4
  9412  0C63  1615               	bsf	21,4	;volatile
  9413  0C64  0008               	return
  9414  0C65                     __end_of_I2C1_ISR:	
  9415                           
  9416                           	psect	text48
  9417  0538                     __ptext48:	
  9418 ;; *************** function _I2C1_StatusCallback *****************
  9419 ;; Defined at:
  9420 ;;		line 106 in file "mcc_generated_files/i2c1.c"
  9421 ;; Parameters:    Size  Location     Type
  9422 ;;  i2c_bus_stat    1    wreg     enum E3053
  9423 ;; Auto vars:     Size  Location     Type
  9424 ;;  i2c_bus_stat    1    7[COMMON] enum E3053
  9425 ;;  pdata           2    5[COMMON] PTR unsigned char 
  9426 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  9427 ;;		 -> readbuf.type(1), readbuf(6), 
  9428 ;; Return value:  Size  Location     Type
  9429 ;;                  1    wreg      void 
  9430 ;; Registers used:
  9431 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9432 ;; Tracked objects:
  9433 ;;		On entry : 0/0
  9434 ;;		On exit  : 0/0
  9435 ;;		Unchanged: 0/0
  9436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;Total ram usage:        4 bytes
  9442 ;; Hardware stack levels used:    1
  9443 ;; Hardware stack levels required when called:    2
  9444 ;; This function calls:
  9445 ;;		_PROTOCOL_Backplane_Slave_Enabled
  9446 ;;		_PROTOCOL_I2C_GET
  9447 ;;		_PROTOCOL_I2C_SEN
  9448 ;;		_PROTOCOL_I2C_WHO
  9449 ;;		_PROTOCOL_INV
  9450 ;;		_PROTOCOL_RST
  9451 ;;		_PROTOCOL_Read_Lock
  9452 ;;		i1_PROTOCOL_EXT
  9453 ;;		i1_PROTOCOL_SAV
  9454 ;;		i1_PROTOCOL_SET
  9455 ;;		i1_PROTOCOL_STA
  9456 ;;		i1_PROTOCOL_STP
  9457 ;; This function is called by:
  9458 ;;		_I2C1_ISR
  9459 ;; This function uses a non-reentrant model
  9460 ;;
  9461                           
  9462                           
  9463                           ;psect for function _I2C1_StatusCallback
  9464  0538                     _I2C1_StatusCallback:	
  9465                           
  9466                           ;incstack = 0
  9467                           ; Regs used in _I2C1_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9468                           ;I2C1_StatusCallback@i2c_bus_state stored from wreg
  9469  0538  00F7               	movwf	I2C1_StatusCallback@i2c_bus_state
  9470                           
  9471                           ;i2c1.c: 109: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  9472                           ;i2c1.c: 110: static uint8_t next = 0x00;
  9473                           ;i2c1.c: 111: static uint8_t ext_len = 0;
  9474                           ;i2c1.c: 112: static uint8_t ext_cnt = 0;
  9475                           ;i2c1.c: 113: static char ext_buf[48];
  9476                           ;i2c1.c: 114: uint8_t *pdata;
  9477                           ;i2c1.c: 115: switch (i2c_bus_state)
  9478  0539  2DF8               	goto	i1l3369
  9479  053A                     i1l86:	
  9480                           ;i2c1.c: 116: {
  9481                           ;i2c1.c: 117: case I2C1_SLAVE_WRITE_REQUEST:
  9482                           
  9483                           
  9484                           ;i2c1.c: 118: slaveWriteType = SLAVE_DATA_ADDRESS;
  9485  053A  0021               	movlb	1	; select bank1
  9486  053B  01CC               	clrf	I2C1_StatusCallback@slaveWriteType^(0+128)
  9487  053C  0ACC               	incf	I2C1_StatusCallback@slaveWriteType^(0+128),f
  9488                           
  9489                           ;i2c1.c: 119: break;
  9490  053D  0008               	return
  9491  053E                     i1l3295:	
  9492                           ;i2c1.c: 121: case I2C1_SLAVE_GENERAL_CALL_REQUEST:
  9493                           
  9494                           
  9495                           ;i2c1.c: 123: slaveWriteType = SLAVE_GENERAL_CALL;
  9496  053E  3002               	movlw	2
  9497  053F  00F4               	movwf	??_I2C1_StatusCallback
  9498  0540  0874               	movf	??_I2C1_StatusCallback,w
  9499  0541  0021               	movlb	1	; select bank1
  9500  0542  00CC               	movwf	I2C1_StatusCallback@slaveWriteType^(0+128)
  9501                           
  9502                           ;i2c1.c: 124: break;
  9503  0543  0008               	return
  9504  0544                     i1l3297:	
  9505                           ;i2c1.c: 132: case 0x01:
  9506                           
  9507                           ;i2c1.c: 131: switch(next) {
  9508                           
  9509                           ;i2c1.c: 129: {
  9510                           ;i2c1.c: 130: case SLAVE_DATA_ADDRESS:
  9511                           
  9512                           ;i2c1.c: 128: switch(slaveWriteType)
  9513                           
  9514                           ;i2c1.c: 126: case I2C1_SLAVE_WRITE_COMPLETED:
  9515                           
  9516                           
  9517                           ;i2c1.c: 133: PROTOCOL_SET(I2C_slaveWriteData);
  9518  0544  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9519  0545  318A  2238  3185   	fcall	i1_PROTOCOL_SET
  9520  0548  2DB8               	goto	i1l3343
  9521  0549                     i1l3301:	
  9522                           ;i2c1.c: 138: case 0x04:
  9523                           
  9524                           ;i2c1.c: 137: switch(I2C_slaveWriteData) {
  9525                           
  9526                           ;i2c1.c: 136: case 0x00:
  9527                           
  9528                           ;i2c1.c: 135: break;
  9529                           
  9530                           ;i2c1.c: 134: next = 0x00;
  9531                           
  9532                           
  9533                           ;i2c1.c: 139: PROTOCOL_STA();
  9534  0549  318A  2217  3185   	fcall	i1_PROTOCOL_STA
  9535                           
  9536                           ;i2c1.c: 140: break;
  9537  054C  2DD1               	goto	i1l3353
  9538  054D                     i1l3303:	
  9539                           ;i2c1.c: 141: case 0x05:
  9540                           
  9541                           
  9542                           ;i2c1.c: 142: PROTOCOL_STP();
  9543  054D  318A  2203  3185   	fcall	i1_PROTOCOL_STP
  9544                           
  9545                           ;i2c1.c: 143: break;
  9546  0550  2DD1               	goto	i1l3353
  9547  0551                     i1l3305:	
  9548                           ;i2c1.c: 144: case 0x03:
  9549                           
  9550                           
  9551                           ;i2c1.c: 145: PROTOCOL_SAV();
  9552  0551  318A  2246  3185   	fcall	i1_PROTOCOL_SAV
  9553                           
  9554                           ;i2c1.c: 146: break;
  9555  0554  2DD1               	goto	i1l3353
  9556  0555                     i1l3307:	
  9557                           ;i2c1.c: 147: case 0x06:
  9558                           
  9559                           
  9560                           ;i2c1.c: 148: PROTOCOL_INV();
  9561  0555  318A  2213  3185   	fcall	_PROTOCOL_INV
  9562                           
  9563                           ;i2c1.c: 149: break;
  9564  0558  2DD1               	goto	i1l3353
  9565  0559                     i1l3309:	
  9566                           ;i2c1.c: 150: case 0x0c:
  9567                           
  9568                           
  9569                           ;i2c1.c: 151: PROTOCOL_RST();
  9570  0559  318A  2258  3185   	fcall	_PROTOCOL_RST
  9571                           
  9572                           ;i2c1.c: 152: break;
  9573  055C  2DD1               	goto	i1l3353
  9574  055D                     i1l103:	
  9575                           ;i2c1.c: 153: case 0x08:
  9576                           
  9577                           
  9578                           ;i2c1.c: 154: next = 0x01;
  9579  055D  01EC               	clrf	I2C1_StatusCallback@next
  9580  055E  0AEC               	incf	I2C1_StatusCallback@next,f
  9581                           
  9582                           ;i2c1.c: 155: break;
  9583  055F  2DD1               	goto	i1l3353
  9584  0560                     i1l3311:	
  9585                           ;i2c1.c: 156: case 0x0a:
  9586                           
  9587                           
  9588                           ;i2c1.c: 157: next = 0x02;
  9589  0560  3002               	movlw	2
  9590  0561  00F4               	movwf	??_I2C1_StatusCallback
  9591  0562  0874               	movf	??_I2C1_StatusCallback,w
  9592  0563  2D9A               	goto	L4
  9593  0564                     i1l3315:	
  9594                           ;i2c1.c: 159: }
  9595                           
  9596                           ;i2c1.c: 158: break;
  9597                           
  9598  0564  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9599                           
  9600                           ; Switch size 1, requested type "space"
  9601                           ; Number of cases is 7, Range of values is 3 to 12
  9602                           ; switch strategies available:
  9603                           ; Name         Instructions Cycles
  9604                           ; simple_byte           22    12 (average)
  9605                           ; direct_byte           29     9 (fixed)
  9606                           ; jumptable            263     9 (fixed)
  9607                           ;	Chosen strategy is simple_byte
  9608  0565  3A03               	xorlw	3	; case 3
  9609  0566  1903               	skipnz
  9610  0567  2D51               	goto	i1l3305
  9611  0568  3A07               	xorlw	7	; case 4
  9612  0569  1903               	skipnz
  9613  056A  2D49               	goto	i1l3301
  9614  056B  3A01               	xorlw	1	; case 5
  9615  056C  1903               	skipnz
  9616  056D  2D4D               	goto	i1l3303
  9617  056E  3A03               	xorlw	3	; case 6
  9618  056F  1903               	skipnz
  9619  0570  2D55               	goto	i1l3307
  9620  0571  3A0E               	xorlw	14	; case 8
  9621  0572  1903               	skipnz
  9622  0573  2D5D               	goto	i1l103
  9623  0574  3A02               	xorlw	2	; case 10
  9624  0575  1903               	skipnz
  9625  0576  2D60               	goto	i1l3311
  9626  0577  3A06               	xorlw	6	; case 12
  9627  0578  1903               	skipnz
  9628  0579  2D59               	goto	i1l3309
  9629  057A  2DD1               	goto	i1l3353
  9630                           
  9631                           ;i2c1.c: 161: }
  9632                           
  9633                           ;i2c1.c: 160: break;
  9634  057B  2DD1               	goto	i1l3353
  9635  057C                     i1l3319:	
  9636  057C  0020               	movlb	0	; select bank0
  9637  057D  086C               	movf	I2C1_StatusCallback@next,w
  9638                           
  9639                           ; Switch size 1, requested type "space"
  9640                           ; Number of cases is 2, Range of values is 0 to 1
  9641                           ; switch strategies available:
  9642                           ; Name         Instructions Cycles
  9643                           ; simple_byte            7     4 (average)
  9644                           ; direct_byte           10     6 (fixed)
  9645                           ; jumptable            260     6 (fixed)
  9646                           ;	Chosen strategy is simple_byte
  9647  057E  3A00               	xorlw	0	; case 0
  9648  057F  1903               	skipnz
  9649  0580  2D64               	goto	i1l3315
  9650  0581  3A01               	xorlw	1	; case 1
  9651  0582  1903               	skipnz
  9652  0583  2D44               	goto	i1l3297
  9653  0584  2DD1               	goto	i1l3353
  9654                           
  9655                           ;i2c1.c: 162: break;
  9656  0585  2DD1               	goto	i1l3353
  9657  0586                     i1l3321:	
  9658                           ;i2c1.c: 164: case SLAVE_GENERAL_CALL:
  9659                           
  9660                           
  9661                           ;i2c1.c: 165: if (I2C_slaveWriteData == 0x02) {
  9662  0586  3002               	movlw	2
  9663  0587  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
  9664  0588  1D03               	btfss	3,2
  9665  0589  2DD1               	goto	i1l3353
  9666                           
  9667                           ;i2c1.c: 166: SSP1CON2bits.GCEN = 0;
  9668  058A  0024               	movlb	4	; select bank4
  9669  058B  1396               	bcf	22,7	;volatile
  9670                           
  9671                           ;i2c1.c: 167: PROTOCOL_Backplane_Slave_Enabled();
  9672  058C  318A  220F  3185   	fcall	_PROTOCOL_Backplane_Slave_Enabled
  9673                           
  9674                           ;i2c1.c: 168: }
  9675                           ;i2c1.c: 169: break;
  9676  058F  2DD1               	goto	i1l3353
  9677  0590                     i1l3327:	
  9678                           ;i2c1.c: 173: case 0x02:
  9679                           
  9680                           ;i2c1.c: 172: switch(next) {
  9681                           
  9682                           ;i2c1.c: 171: case SLAVE_NORMAL_DATA:
  9683                           
  9684                           
  9685                           ;i2c1.c: 174: ext_len = I2C_slaveWriteData;
  9686  0590  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9687  0591  00F4               	movwf	??_I2C1_StatusCallback
  9688  0592  0874               	movf	??_I2C1_StatusCallback,w
  9689  0593  0021               	movlb	1	; select bank1
  9690  0594  00CB               	movwf	I2C1_StatusCallback@ext_len^(0+128)
  9691                           
  9692                           ;i2c1.c: 175: ext_cnt = 0;
  9693  0595  01CA               	clrf	I2C1_StatusCallback@ext_cnt^(0+128)
  9694                           
  9695                           ;i2c1.c: 176: next = 0x03;
  9696  0596  3003               	movlw	3
  9697  0597  00F4               	movwf	??_I2C1_StatusCallback
  9698  0598  0874               	movf	??_I2C1_StatusCallback,w
  9699  0599  0020               	movlb	0	; select bank0
  9700  059A                     L4:	
  9701  059A  00EC               	movwf	I2C1_StatusCallback@next
  9702                           
  9703                           ;i2c1.c: 177: break;
  9704  059B  2DD1               	goto	i1l3353
  9705  059C                     i1l3333:	
  9706                           ;i2c1.c: 178: case 0x03:
  9707                           
  9708                           
  9709                           ;i2c1.c: 179: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
  9710  059C  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9711  059D  00F4               	movwf	??_I2C1_StatusCallback
  9712  059E  0021               	movlb	1	; select bank1
  9713  059F  084A               	movf	I2C1_StatusCallback@ext_cnt^(0+128),w
  9714  05A0  3EA0               	addlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9715  05A1  0086               	movwf	6
  9716  05A2  3001               	movlw	1	; select bank3/4
  9717  05A3  0087               	movwf	7
  9718  05A4  0874               	movf	??_I2C1_StatusCallback,w
  9719  05A5  0081               	movwf	1
  9720  05A6  3001               	movlw	1
  9721  05A7  00F4               	movwf	??_I2C1_StatusCallback
  9722  05A8  0874               	movf	??_I2C1_StatusCallback,w
  9723  05A9  07CA               	addwf	I2C1_StatusCallback@ext_cnt^(0+128),f
  9724                           
  9725                           ;i2c1.c: 180: if (ext_cnt >= ext_len) {
  9726  05AA  084B               	movf	I2C1_StatusCallback@ext_len^(0+128),w
  9727  05AB  024A               	subwf	I2C1_StatusCallback@ext_cnt^(0+128),w
  9728  05AC  1C03               	skipc
  9729  05AD  2DD1               	goto	i1l3353
  9730                           
  9731                           ;i2c1.c: 181: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
  9732  05AE  318A  2200  3185   	fcall	_PROTOCOL_Read_Lock
  9733  05B1  3A00               	xorlw	0
  9734  05B2  1D03               	skipz
  9735  05B3  2DB8               	goto	i1l3343
  9736  05B4  30A0               	movlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9737  05B5  3189  21F8  3185   	fcall	i1_PROTOCOL_EXT
  9738  05B8                     i1l3343:	
  9739                           
  9740                           ;i2c1.c: 182: next = 0x00;
  9741  05B8  0020               	movlb	0	; select bank0
  9742  05B9  01EC               	clrf	I2C1_StatusCallback@next
  9743                           
  9744                           ;i2c1.c: 185: }
  9745                           
  9746                           ;i2c1.c: 183: }
  9747                           ;i2c1.c: 184: break;
  9748  05BA  2DD1               	goto	i1l3353
  9749  05BB                     i1l3347:	
  9750  05BB  0020               	movlb	0	; select bank0
  9751  05BC  086C               	movf	I2C1_StatusCallback@next,w
  9752                           
  9753                           ; Switch size 1, requested type "space"
  9754                           ; Number of cases is 2, Range of values is 2 to 3
  9755                           ; switch strategies available:
  9756                           ; Name         Instructions Cycles
  9757                           ; simple_byte            7     4 (average)
  9758                           ; direct_byte           13     9 (fixed)
  9759                           ; jumptable            263     9 (fixed)
  9760                           ;	Chosen strategy is simple_byte
  9761  05BD  3A02               	xorlw	2	; case 2
  9762  05BE  1903               	skipnz
  9763  05BF  2D90               	goto	i1l3327
  9764  05C0  3A01               	xorlw	1	; case 3
  9765  05C1  1903               	skipnz
  9766  05C2  2D9C               	goto	i1l3333
  9767  05C3  2DD1               	goto	i1l3353
  9768                           
  9769                           ;i2c1.c: 190: }
  9770                           
  9771                           ;i2c1.c: 188: break;
  9772                           
  9773                           ;i2c1.c: 187: default:
  9774                           
  9775                           ;i2c1.c: 186: break;
  9776  05C4  2DD1               	goto	i1l3353
  9777  05C5                     i1l3351:	
  9778  05C5  0021               	movlb	1	; select bank1
  9779  05C6  084C               	movf	I2C1_StatusCallback@slaveWriteType^(0+128),w
  9780                           
  9781                           ; Switch size 1, requested type "space"
  9782                           ; Number of cases is 3, Range of values is 0 to 2
  9783                           ; switch strategies available:
  9784                           ; Name         Instructions Cycles
  9785                           ; simple_byte           10     6 (average)
  9786                           ; direct_byte           12     6 (fixed)
  9787                           ; jumptable            260     6 (fixed)
  9788                           ;	Chosen strategy is simple_byte
  9789  05C7  3A00               	xorlw	0	; case 0
  9790  05C8  1903               	skipnz
  9791  05C9  2DBB               	goto	i1l3347
  9792  05CA  3A01               	xorlw	1	; case 1
  9793  05CB  1903               	skipnz
  9794  05CC  2D7C               	goto	i1l3319
  9795  05CD  3A03               	xorlw	3	; case 2
  9796  05CE  1903               	skipnz
  9797  05CF  2D86               	goto	i1l3321
  9798  05D0  2DD1               	goto	i1l3353
  9799  05D1                     i1l3353:	
  9800                           
  9801                           ;i2c1.c: 192: slaveWriteType = SLAVE_NORMAL_DATA;
  9802  05D1  0021               	movlb	1	; select bank1
  9803  05D2  01CC               	clrf	I2C1_StatusCallback@slaveWriteType^(0+128)
  9804                           
  9805                           ;i2c1.c: 193: break;
  9806  05D3  0008               	return
  9807  05D4                     i1l3355:	
  9808                           ;i2c1.c: 197: {
  9809                           ;i2c1.c: 198: case 0x01:
  9810                           
  9811                           ;i2c1.c: 196: switch (I2C_slaveWriteData)
  9812                           
  9813                           ;i2c1.c: 195: case I2C1_SLAVE_READ_REQUEST:
  9814                           
  9815                           
  9816                           ;i2c1.c: 199: SSP1BUF = PROTOCOL_I2C_WHO();
  9817  05D4  3189  21FD         	fcall	_PROTOCOL_I2C_WHO
  9818  05D6  0024               	movlb	4	; select bank4
  9819  05D7  0091               	movwf	17	;volatile
  9820                           
  9821                           ;i2c1.c: 200: break;
  9822  05D8  0008               	return
  9823  05D9                     i1l3357:	
  9824                           ;i2c1.c: 201: case 0x07:
  9825                           
  9826                           
  9827                           ;i2c1.c: 202: pdata = PROTOCOL_I2C_SEN();
  9828  05D9  318E  2632         	fcall	_PROTOCOL_I2C_SEN
  9829  05DB  0871               	movf	?_PROTOCOL_I2C_SEN+1,w
  9830  05DC  00F6               	movwf	I2C1_StatusCallback@pdata+1
  9831  05DD  0870               	movf	?_PROTOCOL_I2C_SEN,w
  9832  05DE  00F5               	movwf	I2C1_StatusCallback@pdata
  9833                           
  9834                           ;i2c1.c: 203: SSP1BUF = *pdata;
  9835  05DF  0875               	movf	I2C1_StatusCallback@pdata,w
  9836  05E0  0086               	movwf	6
  9837  05E1  0876               	movf	I2C1_StatusCallback@pdata+1,w
  9838  05E2  0087               	movwf	7
  9839  05E3  0801               	movf	1,w
  9840  05E4  0024               	movlb	4	; select bank4
  9841  05E5  0091               	movwf	17	;volatile
  9842                           
  9843                           ;i2c1.c: 204: break;
  9844  05E6  0008               	return
  9845  05E7                     i1l3361:	
  9846                           ;i2c1.c: 205: case 0x09:
  9847                           
  9848                           
  9849                           ;i2c1.c: 206: SSP1BUF = PROTOCOL_I2C_GET();
  9850  05E7  3189  21FA         	fcall	_PROTOCOL_I2C_GET
  9851  05E9  0024               	movlb	4	; select bank4
  9852  05EA  0091               	movwf	17	;volatile
  9853                           
  9854                           ;i2c1.c: 208: }
  9855                           
  9856                           ;i2c1.c: 207: break;
  9857  05EB  0008               	return
  9858  05EC                     i1l3365:	
  9859  05EC  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9860                           
  9861                           ; Switch size 1, requested type "space"
  9862                           ; Number of cases is 3, Range of values is 1 to 9
  9863                           ; switch strategies available:
  9864                           ; Name         Instructions Cycles
  9865                           ; simple_byte           10     6 (average)
  9866                           ; direct_byte           27     9 (fixed)
  9867                           ; jumptable            263     9 (fixed)
  9868                           ;	Chosen strategy is simple_byte
  9869  05ED  3A01               	xorlw	1	; case 1
  9870  05EE  1903               	skipnz
  9871  05EF  2DD4               	goto	i1l3355
  9872  05F0  3A06               	xorlw	6	; case 7
  9873  05F1  1903               	skipnz
  9874  05F2  2DD9               	goto	i1l3357
  9875  05F3  3A0E               	xorlw	14	; case 9
  9876  05F4  1903               	skipnz
  9877  05F5  2DE7               	goto	i1l3361
  9878  05F6  2E02               	goto	i1l124
  9879                           
  9880                           ;i2c1.c: 216: }
  9881                           
  9882                           ;i2c1.c: 214: break;
  9883                           
  9884                           ;i2c1.c: 213: default:
  9885                           
  9886                           ;i2c1.c: 212: break;
  9887                           
  9888                           ;i2c1.c: 211: case I2C1_SLAVE_READ_COMPLETED:
  9889                           
  9890                           ;i2c1.c: 209: break;
  9891  05F7  0008               	return
  9892  05F8                     i1l3369:	
  9893  05F8  0877               	movf	I2C1_StatusCallback@i2c_bus_state,w
  9894                           
  9895                           ; Switch size 1, requested type "space"
  9896                           ; Number of cases is 5, Range of values is 0 to 4
  9897                           ; switch strategies available:
  9898                           ; Name         Instructions Cycles
  9899                           ; direct_byte           16     6 (fixed)
  9900                           ; simple_byte           16     9 (average)
  9901                           ; jumptable            260     6 (fixed)
  9902                           ;	Chosen strategy is direct_byte
  9903  05F9  0084               	movwf	4
  9904  05FA  3005               	movlw	5
  9905  05FB  0204               	subwf	4,w
  9906  05FC  1803               	skipnc
  9907  05FD  0008               	return
  9908  05FE  3188               	movlp	high i1S4715
  9909  05FF  3504               	lslf	4,w
  9910  0600  3E18               	addlw	low i1S4715
  9911  0601  0082               	movwf	2
  9912  0602                     i1l124:	
  9913  0602  0008               	return
  9914  0603                     __end_of_I2C1_StatusCallback:	
  9915                           
  9916                           	psect	swtext2
  9917  0818                     __pswtext2:	
  9918  0818                     i1S4715:	
  9919  0818  3185  2D3A         	ljmp	i1l86
  9920  081A  3185  2DEC         	ljmp	i1l3365
  9921  081C  3185  2DC5         	ljmp	i1l3351
  9922  081E  3186  2E02         	ljmp	i1l124
  9923  0820  3185  2D3E         	ljmp	i1l3295
  9924                           
  9925                           	psect	text49
  9926  0A03                     __ptext49:	
  9927 ;; *************** function i1_PROTOCOL_STP *****************
  9928 ;; Defined at:
  9929 ;;		line 98 in file "protocol.c"
  9930 ;; Parameters:    Size  Location     Type
  9931 ;;		None
  9932 ;; Auto vars:     Size  Location     Type
  9933 ;;		None
  9934 ;; Return value:  Size  Location     Type
  9935 ;;                  1    wreg      void 
  9936 ;; Registers used:
  9937 ;;		wreg, status,2, status,0
  9938 ;; Tracked objects:
  9939 ;;		On entry : 0/0
  9940 ;;		On exit  : 0/0
  9941 ;;		Unchanged: 0/0
  9942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9947 ;;Total ram usage:        0 bytes
  9948 ;; Hardware stack levels used:    1
  9949 ;; This function calls:
  9950 ;;		Nothing
  9951 ;; This function is called by:
  9952 ;;		_I2C1_StatusCallback
  9953 ;; This function uses a non-reentrant model
  9954 ;;
  9955                           
  9956                           
  9957                           ;psect for function i1_PROTOCOL_STP
  9958  0A03                     i1_PROTOCOL_STP:	
  9959                           
  9960                           ;protocol.c: 100: running = 0;
  9961                           
  9962                           ;incstack = 0
  9963                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
  9964  0A03  0021               	movlb	1	; select bank1
  9965  0A04  01C0               	clrf	_running^(0+128)
  9966  0A05  0008               	return
  9967  0A06                     __end_ofi1_PROTOCOL_STP:	
  9968                           
  9969                           	psect	text50
  9970  0A17                     __ptext50:	
  9971 ;; *************** function i1_PROTOCOL_STA *****************
  9972 ;; Defined at:
  9973 ;;		line 93 in file "protocol.c"
  9974 ;; Parameters:    Size  Location     Type
  9975 ;;		None
  9976 ;; Auto vars:     Size  Location     Type
  9977 ;;		None
  9978 ;; Return value:  Size  Location     Type
  9979 ;;                  1    wreg      void 
  9980 ;; Registers used:
  9981 ;;		wreg, status,2, status,0
  9982 ;; Tracked objects:
  9983 ;;		On entry : 0/0
  9984 ;;		On exit  : 0/0
  9985 ;;		Unchanged: 0/0
  9986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9991 ;;Total ram usage:        0 bytes
  9992 ;; Hardware stack levels used:    1
  9993 ;; This function calls:
  9994 ;;		Nothing
  9995 ;; This function is called by:
  9996 ;;		_I2C1_StatusCallback
  9997 ;; This function uses a non-reentrant model
  9998 ;;
  9999                           
 10000                           
 10001                           ;psect for function i1_PROTOCOL_STA
 10002  0A17                     i1_PROTOCOL_STA:	
 10003                           
 10004                           ;protocol.c: 95: running = 1;
 10005                           
 10006                           ;incstack = 0
 10007                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
 10008  0A17  0021               	movlb	1	; select bank1
 10009  0A18  01C0               	clrf	_running^(0+128)
 10010  0A19  0AC0               	incf	_running^(0+128),f
 10011  0A1A  0008               	return
 10012  0A1B                     __end_ofi1_PROTOCOL_STA:	
 10013                           
 10014                           	psect	text51
 10015  0A38                     __ptext51:	
 10016 ;; *************** function i1_PROTOCOL_SET *****************
 10017 ;; Defined at:
 10018 ;;		line 111 in file "protocol.c"
 10019 ;; Parameters:    Size  Location     Type
 10020 ;;  value_          1    wreg     unsigned char 
 10021 ;; Auto vars:     Size  Location     Type
 10022 ;;  value_          1    1[COMMON] unsigned char 
 10023 ;; Return value:  Size  Location     Type
 10024 ;;                  1    wreg      void 
 10025 ;; Registers used:
 10026 ;;		wreg, status,2, status,0
 10027 ;; Tracked objects:
 10028 ;;		On entry : 0/0
 10029 ;;		On exit  : 0/0
 10030 ;;		Unchanged: 0/0
 10031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10033 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10034 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;Total ram usage:        2 bytes
 10037 ;; Hardware stack levels used:    1
 10038 ;; This function calls:
 10039 ;;		Nothing
 10040 ;; This function is called by:
 10041 ;;		_I2C1_StatusCallback
 10042 ;; This function uses a non-reentrant model
 10043 ;;
 10044                           
 10045                           
 10046                           ;psect for function i1_PROTOCOL_SET
 10047  0A38                     i1_PROTOCOL_SET:	
 10048                           
 10049                           ;incstack = 0
 10050                           ; Regs used in i1_PROTOCOL_SET: [wreg+status,2+status,0]
 10051                           ;i1PROTOCOL_SET@value_ stored from wreg
 10052  0A38  00F1               	movwf	i1PROTOCOL_SET@value_
 10053                           
 10054                           ;protocol.c: 112: value = value_;
 10055  0A39  0871               	movf	i1PROTOCOL_SET@value_,w
 10056  0A3A  00F0               	movwf	??i1_PROTOCOL_SET
 10057  0A3B  0870               	movf	??i1_PROTOCOL_SET,w
 10058  0A3C  0020               	movlb	0	; select bank0
 10059  0A3D  00E6               	movwf	_value
 10060  0A3E  0008               	return
 10061  0A3F                     __end_ofi1_PROTOCOL_SET:	
 10062                           
 10063                           	psect	text52
 10064  0A46                     __ptext52:	
 10065 ;; *************** function i1_PROTOCOL_SAV *****************
 10066 ;; Defined at:
 10067 ;;		line 107 in file "protocol.c"
 10068 ;; Parameters:    Size  Location     Type
 10069 ;;		None
 10070 ;; Auto vars:     Size  Location     Type
 10071 ;;		None
 10072 ;; Return value:  Size  Location     Type
 10073 ;;                  1    wreg      void 
 10074 ;; Registers used:
 10075 ;;		wreg, status,2, status,0, pclath, cstack
 10076 ;; Tracked objects:
 10077 ;;		On entry : 0/0
 10078 ;;		On exit  : 0/0
 10079 ;;		Unchanged: 0/0
 10080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10084 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10085 ;;Total ram usage:        1 bytes
 10086 ;; Hardware stack levels used:    1
 10087 ;; Hardware stack levels required when called:    1
 10088 ;; This function calls:
 10089 ;;		i1_DATAEE_WriteByte
 10090 ;; This function is called by:
 10091 ;;		_I2C1_StatusCallback
 10092 ;; This function uses a non-reentrant model
 10093 ;;
 10094                           
 10095                           
 10096                           ;psect for function i1_PROTOCOL_SAV
 10097  0A46                     i1_PROTOCOL_SAV:	
 10098                           
 10099                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
 10100                           
 10101                           ;incstack = 0
 10102                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
 10103  0A46  0020               	movlb	0	; select bank0
 10104  0A47  0866               	movf	_value,w
 10105  0A48  00F3               	movwf	??i1_PROTOCOL_SAV
 10106  0A49  0873               	movf	??i1_PROTOCOL_SAV,w
 10107  0A4A  00F0               	movwf	i1DATAEE_WriteByte@bData
 10108  0A4B  3001               	movlw	1
 10109  0A4C  318B  233A         	fcall	i1_DATAEE_WriteByte
 10110  0A4E  0008               	return
 10111  0A4F                     __end_ofi1_PROTOCOL_SAV:	
 10112                           
 10113                           	psect	text53
 10114  0B3A                     __ptext53:	
 10115 ;; *************** function i1_DATAEE_WriteByte *****************
 10116 ;; Defined at:
 10117 ;;		line 180 in file "mcc_generated_files/memory.c"
 10118 ;; Parameters:    Size  Location     Type
 10119 ;;  bAdd            1    wreg     unsigned char 
 10120 ;;  bData           1    0[COMMON] unsigned char 
 10121 ;; Auto vars:     Size  Location     Type
 10122 ;;  bAdd            1    1[COMMON] unsigned char 
 10123 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
 10124 ;; Return value:  Size  Location     Type
 10125 ;;                  1    wreg      void 
 10126 ;; Registers used:
 10127 ;;		wreg, status,2, status,0
 10128 ;; Tracked objects:
 10129 ;;		On entry : 0/0
 10130 ;;		On exit  : 0/0
 10131 ;;		Unchanged: 0/0
 10132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10133 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;Total ram usage:        3 bytes
 10138 ;; Hardware stack levels used:    1
 10139 ;; This function calls:
 10140 ;;		Nothing
 10141 ;; This function is called by:
 10142 ;;		i1_PROTOCOL_SAV
 10143 ;; This function uses a non-reentrant model
 10144 ;;
 10145                           
 10146                           
 10147                           ;psect for function i1_DATAEE_WriteByte
 10148  0B3A                     i1_DATAEE_WriteByte:	
 10149                           
 10150                           ;incstack = 0
 10151                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
 10152                           ;i1DATAEE_WriteByte@bAdd stored from wreg
 10153  0B3A  00F1               	movwf	i1DATAEE_WriteByte@bAdd
 10154                           
 10155                           ;memory.c: 182: uint8_t GIEBitValue = 0;
 10156  0B3B  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
 10157                           
 10158                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
 10159  0B3C  0871               	movf	i1DATAEE_WriteByte@bAdd,w
 10160  0B3D  0023               	movlb	3	; select bank3
 10161  0B3E  0091               	movwf	17	;volatile
 10162                           
 10163                           ;memory.c: 185: EEDATL = bData;
 10164  0B3F  0870               	movf	i1DATAEE_WriteByte@bData,w
 10165  0B40  0093               	movwf	19	;volatile
 10166                           
 10167                           ;memory.c: 186: EECON1bits.EEPGD = 0;
 10168  0B41  1395               	bcf	21,7	;volsfr
 10169                           
 10170                           ;memory.c: 187: EECON1bits.CFGS = 0;
 10171  0B42  1315               	bcf	21,6	;volsfr
 10172                           
 10173                           ;memory.c: 188: EECON1bits.WREN = 1;
 10174  0B43  1515               	bsf	21,2	;volsfr
 10175                           
 10176                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
 10177  0B44  3000               	movlw	0
 10178  0B45  1B8B               	btfsc	11,7	;volatile
 10179  0B46  3001               	movlw	1
 10180  0B47  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
 10181                           
 10182                           ;memory.c: 191: INTCONbits.GIE = 0;
 10183  0B48  138B               	bcf	11,7	;volatile
 10184                           
 10185                           ;memory.c: 192: EECON2 = 0x55;
 10186  0B49  3055               	movlw	85
 10187  0B4A  0096               	movwf	22	;volsfr
 10188                           
 10189                           ;memory.c: 193: EECON2 = 0xAA;
 10190  0B4B  30AA               	movlw	170
 10191  0B4C  0096               	movwf	22	;volsfr
 10192                           
 10193                           ;memory.c: 194: EECON1bits.WR = 1;
 10194  0B4D  1495               	bsf	21,1	;volsfr
 10195  0B4E                     i1l480:	
 10196                           ;memory.c: 197: {
 10197                           
 10198                           ;memory.c: 196: while (EECON1bits.WR)
 10199                           
 10200  0B4E  1895               	btfsc	21,1	;volsfr
 10201  0B4F  2B4E               	goto	i1l480
 10202                           
 10203                           ;memory.c: 198: }
 10204                           ;memory.c: 200: EECON1bits.WREN = 0;
 10205  0B50  1115               	bcf	21,2	;volsfr
 10206                           
 10207                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 10208  0B51  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
 10209  0B52  1C03               	skipc
 10210  0B53  138B               	bcf	11,7	;volatile
 10211  0B54  1803               	skipnc
 10212  0B55  178B               	bsf	11,7	;volatile
 10213  0B56  0008               	return
 10214  0B57                     __end_ofi1_DATAEE_WriteByte:	
 10215                           
 10216                           	psect	text54
 10217  09F8                     __ptext54:	
 10218 ;; *************** function i1_PROTOCOL_EXT *****************
 10219 ;; Defined at:
 10220 ;;		line 116 in file "protocol.c"
 10221 ;; Parameters:    Size  Location     Type
 10222 ;;  char_buf        1    wreg     PTR unsigned char 
 10223 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10224 ;; Auto vars:     Size  Location     Type
 10225 ;;  char_buf        1  (no storage) PTR unsigned char 
 10226 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10227 ;; Return value:  Size  Location     Type
 10228 ;;                  1    wreg      void 
 10229 ;; Registers used:
 10230 ;;		wreg, status,2, status,0
 10231 ;; Tracked objects:
 10232 ;;		On entry : 0/0
 10233 ;;		On exit  : 0/0
 10234 ;;		Unchanged: 0/0
 10235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10240 ;;Total ram usage:        0 bytes
 10241 ;; Hardware stack levels used:    1
 10242 ;; This function calls:
 10243 ;;		Nothing
 10244 ;; This function is called by:
 10245 ;;		_I2C1_StatusCallback
 10246 ;; This function uses a non-reentrant model
 10247 ;;
 10248                           
 10249                           
 10250                           ;psect for function i1_PROTOCOL_EXT
 10251  09F8                     i1_PROTOCOL_EXT:	
 10252                           
 10253                           ;incstack = 0
 10254                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0]
 10255  09F8  0008               	return
 10256  09F9                     __end_ofi1_PROTOCOL_EXT:	
 10257                           
 10258                           	psect	text55
 10259  0A00                     __ptext55:	
 10260 ;; *************** function _PROTOCOL_Read_Lock *****************
 10261 ;; Defined at:
 10262 ;;		line 124 in file "protocol.c"
 10263 ;; Parameters:    Size  Location     Type
 10264 ;;		None
 10265 ;; Auto vars:     Size  Location     Type
 10266 ;;		None
 10267 ;; Return value:  Size  Location     Type
 10268 ;;                  1    wreg      unsigned char 
 10269 ;; Registers used:
 10270 ;;		wreg
 10271 ;; Tracked objects:
 10272 ;;		On entry : 0/0
 10273 ;;		On exit  : 0/0
 10274 ;;		Unchanged: 0/0
 10275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10280 ;;Total ram usage:        0 bytes
 10281 ;; Hardware stack levels used:    1
 10282 ;; This function calls:
 10283 ;;		Nothing
 10284 ;; This function is called by:
 10285 ;;		_I2C1_StatusCallback
 10286 ;; This function uses a non-reentrant model
 10287 ;;
 10288                           
 10289                           
 10290                           ;psect for function _PROTOCOL_Read_Lock
 10291  0A00                     _PROTOCOL_Read_Lock:	
 10292                           
 10293                           ;protocol.c: 125: return locked;
 10294                           
 10295                           ;incstack = 0
 10296                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
 10297  0A00  0021               	movlb	1	; select bank1
 10298  0A01  0841               	movf	_locked^(0+128),w
 10299  0A02  0008               	return
 10300  0A03                     __end_of_PROTOCOL_Read_Lock:	
 10301                           
 10302                           	psect	text56
 10303  0A58                     __ptext56:	
 10304 ;; *************** function _PROTOCOL_RST *****************
 10305 ;; Defined at:
 10306 ;;		line 279 in file "protocol.c"
 10307 ;; Parameters:    Size  Location     Type
 10308 ;;		None
 10309 ;; Auto vars:     Size  Location     Type
 10310 ;;		None
 10311 ;; Return value:  Size  Location     Type
 10312 ;;                  1    wreg      void 
 10313 ;; Registers used:
 10314 ;;		wreg, status,2, status,0
 10315 ;; Tracked objects:
 10316 ;;		On entry : 0/0
 10317 ;;		On exit  : 0/0
 10318 ;;		Unchanged: 0/0
 10319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;Total ram usage:        1 bytes
 10325 ;; Hardware stack levels used:    1
 10326 ;; This function calls:
 10327 ;;		Nothing
 10328 ;; This function is called by:
 10329 ;;		_I2C1_StatusCallback
 10330 ;; This function uses a non-reentrant model
 10331 ;;
 10332                           
 10333                           
 10334                           ;psect for function _PROTOCOL_RST
 10335  0A58                     _PROTOCOL_RST:	
 10336                           
 10337                           ;protocol.c: 280: if (readbuf.status != TLV_SET) {
 10338                           
 10339                           ;incstack = 0
 10340                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
 10341  0A58  0021               	movlb	1	; select bank1
 10342  0A59  0851               	movf	(_readbuf^(0+128)+4),w
 10343  0A5A  1903               	btfsc	3,2
 10344  0A5B  0008               	return
 10345                           
 10346                           ;protocol.c: 281: readbuf.buf_cnt = 0;
 10347  0A5C  01D2               	clrf	(_readbuf^(0+128)+5)
 10348                           
 10349                           ;protocol.c: 282: readbuf.status = COMPLETE;
 10350  0A5D  3003               	movlw	3
 10351  0A5E  00F0               	movwf	??_PROTOCOL_RST
 10352  0A5F  0870               	movf	??_PROTOCOL_RST,w
 10353  0A60  00D1               	movwf	(_readbuf^(0+128)+4)
 10354  0A61  0008               	return
 10355  0A62                     __end_of_PROTOCOL_RST:	
 10356                           
 10357                           	psect	text57
 10358  0A13                     __ptext57:	
 10359 ;; *************** function _PROTOCOL_INV *****************
 10360 ;; Defined at:
 10361 ;;		line 103 in file "protocol.c"
 10362 ;; Parameters:    Size  Location     Type
 10363 ;;		None
 10364 ;; Auto vars:     Size  Location     Type
 10365 ;;		None
 10366 ;; Return value:  Size  Location     Type
 10367 ;;                  1    wreg      void 
 10368 ;; Registers used:
 10369 ;;		None
 10370 ;; Tracked objects:
 10371 ;;		On entry : 0/0
 10372 ;;		On exit  : 0/0
 10373 ;;		Unchanged: 0/0
 10374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;Total ram usage:        0 bytes
 10380 ;; Hardware stack levels used:    1
 10381 ;; This function calls:
 10382 ;;		Nothing
 10383 ;; This function is called by:
 10384 ;;		_I2C1_StatusCallback
 10385 ;; This function uses a non-reentrant model
 10386 ;;
 10387                           
 10388                           
 10389                           ;psect for function _PROTOCOL_INV
 10390  0A13                     _PROTOCOL_INV:	
 10391                           
 10392                           ;protocol.c: 104: invoked = 1;
 10393                           
 10394                           ;incstack = 0
 10395                           ; Regs used in _PROTOCOL_INV: []
 10396  0A13  0021               	movlb	1	; select bank1
 10397  0A14  01BF               	clrf	_invoked^(0+128)
 10398  0A15  0ABF               	incf	_invoked^(0+128),f
 10399  0A16  0008               	return
 10400  0A17                     __end_of_PROTOCOL_INV:	
 10401                           
 10402                           	psect	text58
 10403  09FD                     __ptext58:	
 10404 ;; *************** function _PROTOCOL_I2C_WHO *****************
 10405 ;; Defined at:
 10406 ;;		line 199 in file "protocol.c"
 10407 ;; Parameters:    Size  Location     Type
 10408 ;;		None
 10409 ;; Auto vars:     Size  Location     Type
 10410 ;;		None
 10411 ;; Return value:  Size  Location     Type
 10412 ;;                  1    wreg      unsigned char 
 10413 ;; Registers used:
 10414 ;;		wreg
 10415 ;; Tracked objects:
 10416 ;;		On entry : 0/0
 10417 ;;		On exit  : 0/0
 10418 ;;		Unchanged: 0/0
 10419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;Total ram usage:        0 bytes
 10425 ;; Hardware stack levels used:    1
 10426 ;; This function calls:
 10427 ;;		Nothing
 10428 ;; This function is called by:
 10429 ;;		_I2C1_StatusCallback
 10430 ;; This function uses a non-reentrant model
 10431 ;;
 10432                           
 10433                           
 10434                           ;psect for function _PROTOCOL_I2C_WHO
 10435  09FD                     _PROTOCOL_I2C_WHO:	
 10436                           
 10437                           ;protocol.c: 200: return slave_address;
 10438                           
 10439                           ;incstack = 0
 10440                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
 10441  09FD  0021               	movlb	1	; select bank1
 10442  09FE  0843               	movf	_slave_address^(0+128),w
 10443  09FF  0008               	return
 10444  0A00                     __end_of_PROTOCOL_I2C_WHO:	
 10445                           
 10446                           	psect	text59
 10447  0E32                     __ptext59:	
 10448 ;; *************** function _PROTOCOL_I2C_SEN *****************
 10449 ;; Defined at:
 10450 ;;		line 398 in file "protocol.c"
 10451 ;; Parameters:    Size  Location     Type
 10452 ;;		None
 10453 ;; Auto vars:     Size  Location     Type
 10454 ;;  pdata           2    2[COMMON] PTR unsigned char 
 10455 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
 10456 ;;		 -> readbuf.type(1), readbuf(6), 
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  2   52[None  ] PTR unsigned char 
 10459 ;; Registers used:
 10460 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;Total ram usage:        4 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; This function calls:
 10473 ;;		Nothing
 10474 ;; This function is called by:
 10475 ;;		_I2C1_StatusCallback
 10476 ;; This function uses a non-reentrant model
 10477 ;;
 10478                           
 10479                           
 10480                           ;psect for function _PROTOCOL_I2C_SEN
 10481  0E32                     _PROTOCOL_I2C_SEN:	
 10482                           
 10483                           ;protocol.c: 399: uint8_t *pdata;
 10484                           ;protocol.c: 400: switch(readbuf.status) {
 10485                           
 10486                           ;incstack = 0
 10487                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
 10488  0E32  2E61               	goto	i1l3131
 10489  0E33                     i1l3109:	
 10490                           ;protocol.c: 401: case TLV_SET:
 10491                           
 10492                           
 10493                           ;protocol.c: 402: pdata = &readbuf.type;
 10494  0E33  30CD               	movlw	low _readbuf
 10495  0E34  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10496  0E35  3000               	movlw	high _readbuf
 10497  0E36  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10498                           
 10499                           ;protocol.c: 403: readbuf.status = TYPE_SENT;
 10500  0E37  0021               	movlb	1	; select bank1
 10501  0E38  01D1               	clrf	(_readbuf^(0+128)+4)
 10502  0E39  0AD1               	incf	(_readbuf^(0+128)+4),f
 10503                           
 10504                           ;protocol.c: 404: break;
 10505  0E3A  2E70               	goto	i1l3133
 10506  0E3B                     i1l3113:	
 10507                           ;protocol.c: 405: case TYPE_SENT:
 10508                           
 10509                           
 10510                           ;protocol.c: 406: pdata = &readbuf.length;
 10511  0E3B  30CE               	movlw	low (_readbuf+1)
 10512  0E3C  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10513  0E3D  3000               	movlw	high (_readbuf+1)
 10514  0E3E  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10515                           
 10516                           ;protocol.c: 407: readbuf.status = LENGTH_SENT;
 10517  0E3F  3002               	movlw	2
 10518  0E40  2E58               	goto	L5
 10519  0E41                     i1l3117:	
 10520                           ;protocol.c: 409: case LENGTH_SENT:
 10521                           
 10522                           ;protocol.c: 408: break;
 10523                           
 10524                           
 10525                           ;protocol.c: 410: if (readbuf.buf_cnt < readbuf.length) {
 10526  0E41  084E               	movf	(_readbuf^(0+128)+1),w
 10527  0E42  0252               	subwf	(_readbuf^(0+128)+5),w
 10528  0E43  1803               	skipnc
 10529  0E44  2E52               	goto	i1l3121
 10530                           
 10531                           ;protocol.c: 411: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
 10532  0E45  0852               	movf	(_readbuf^(0+128)+5),w
 10533  0E46  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10534  0E47  01F1               	clrf	??_PROTOCOL_I2C_SEN+1
 10535  0E48  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10536  0E49  074F               	addwf	(low ((_readbuf| 0+2)))^(0+128),w
 10537  0E4A  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10538  0E4B  0871               	movf	??_PROTOCOL_I2C_SEN+1,w
 10539  0E4C  3D50               	addwfc	((low ((_readbuf| 0+2))+1))^(0+128),w
 10540  0E4D  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10541  0E4E  3001               	movlw	1
 10542  0E4F  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10543  0E50  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10544  0E51  07D2               	addwf	(_readbuf^(0+128)+5),f
 10545  0E52                     i1l3121:	
 10546                           
 10547                           ;protocol.c: 412: }
 10548                           ;protocol.c: 413: if (readbuf.buf_cnt == readbuf.length) {
 10549  0E52  0852               	movf	(_readbuf^(0+128)+5),w
 10550  0E53  064E               	xorwf	(_readbuf^(0+128)+1),w
 10551  0E54  1D03               	skipz
 10552  0E55  2E70               	goto	i1l3133
 10553                           
 10554                           ;protocol.c: 414: readbuf.buf_cnt = 0;
 10555  0E56  01D2               	clrf	(_readbuf^(0+128)+5)
 10556                           
 10557                           ;protocol.c: 415: readbuf.status = COMPLETE;
 10558  0E57  3003               	movlw	3
 10559  0E58                     L5:	
 10560  0E58  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10561  0E59  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10562  0E5A  00D1               	movwf	(_readbuf^(0+128)+4)
 10563                           
 10564                           ;protocol.c: 416: }
 10565                           ;protocol.c: 417: break;
 10566  0E5B  2E70               	goto	i1l3133
 10567  0E5C                     i1l3127:	
 10568                           ;protocol.c: 418: case COMPLETE:
 10569                           
 10570                           
 10571                           ;protocol.c: 419: pdata = &type_no_data;
 10572  0E5C  30EF               	movlw	low _type_no_data
 10573  0E5D  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10574  0E5E  3000               	movlw	high _type_no_data
 10575  0E5F  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10576                           
 10577                           ;protocol.c: 421: }
 10578                           
 10579                           ;protocol.c: 420: break;
 10580  0E60  2E70               	goto	i1l3133
 10581  0E61                     i1l3131:	
 10582  0E61  0021               	movlb	1	; select bank1
 10583  0E62  0851               	movf	(_readbuf^(0+128)+4),w
 10584                           
 10585                           ; Switch size 1, requested type "space"
 10586                           ; Number of cases is 4, Range of values is 0 to 3
 10587                           ; switch strategies available:
 10588                           ; Name         Instructions Cycles
 10589                           ; simple_byte           13     7 (average)
 10590                           ; direct_byte           14     6 (fixed)
 10591                           ; jumptable            260     6 (fixed)
 10592                           ;	Chosen strategy is simple_byte
 10593  0E63  3A00               	xorlw	0	; case 0
 10594  0E64  1903               	skipnz
 10595  0E65  2E33               	goto	i1l3109
 10596  0E66  3A01               	xorlw	1	; case 1
 10597  0E67  1903               	skipnz
 10598  0E68  2E3B               	goto	i1l3113
 10599  0E69  3A03               	xorlw	3	; case 2
 10600  0E6A  1903               	skipnz
 10601  0E6B  2E41               	goto	i1l3117
 10602  0E6C  3A01               	xorlw	1	; case 3
 10603  0E6D  1903               	skipnz
 10604  0E6E  2E5C               	goto	i1l3127
 10605  0E6F  2E70               	goto	i1l3133
 10606  0E70                     i1l3133:	
 10607                           
 10608                           ;protocol.c: 422: return pdata;
 10609  0E70  0873               	movf	PROTOCOL_I2C_SEN@pdata+1,w
 10610  0E71  00F1               	movwf	?_PROTOCOL_I2C_SEN+1
 10611  0E72  0872               	movf	PROTOCOL_I2C_SEN@pdata,w
 10612  0E73  00F0               	movwf	?_PROTOCOL_I2C_SEN
 10613  0E74  0008               	return
 10614  0E75                     __end_of_PROTOCOL_I2C_SEN:	
 10615                           
 10616                           	psect	text60
 10617  09FA                     __ptext60:	
 10618 ;; *************** function _PROTOCOL_I2C_GET *****************
 10619 ;; Defined at:
 10620 ;;		line 203 in file "protocol.c"
 10621 ;; Parameters:    Size  Location     Type
 10622 ;;		None
 10623 ;; Auto vars:     Size  Location     Type
 10624 ;;		None
 10625 ;; Return value:  Size  Location     Type
 10626 ;;                  1    wreg      unsigned char 
 10627 ;; Registers used:
 10628 ;;		wreg
 10629 ;; Tracked objects:
 10630 ;;		On entry : 0/0
 10631 ;;		On exit  : 0/0
 10632 ;;		Unchanged: 0/0
 10633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10638 ;;Total ram usage:        0 bytes
 10639 ;; Hardware stack levels used:    1
 10640 ;; This function calls:
 10641 ;;		Nothing
 10642 ;; This function is called by:
 10643 ;;		_I2C1_StatusCallback
 10644 ;; This function uses a non-reentrant model
 10645 ;;
 10646                           
 10647                           
 10648                           ;psect for function _PROTOCOL_I2C_GET
 10649  09FA                     _PROTOCOL_I2C_GET:	
 10650                           
 10651                           ;protocol.c: 204: return value;
 10652                           
 10653                           ;incstack = 0
 10654                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
 10655  09FA  0020               	movlb	0	; select bank0
 10656  09FB  0866               	movf	_value,w
 10657  09FC  0008               	return
 10658  09FD                     __end_of_PROTOCOL_I2C_GET:	
 10659                           
 10660                           	psect	text61
 10661  0A0F                     __ptext61:	
 10662 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
 10663 ;; Defined at:
 10664 ;;		line 195 in file "protocol.c"
 10665 ;; Parameters:    Size  Location     Type
 10666 ;;		None
 10667 ;; Auto vars:     Size  Location     Type
 10668 ;;		None
 10669 ;; Return value:  Size  Location     Type
 10670 ;;                  1    wreg      void 
 10671 ;; Registers used:
 10672 ;;		None
 10673 ;; Tracked objects:
 10674 ;;		On entry : 0/0
 10675 ;;		On exit  : 0/0
 10676 ;;		Unchanged: 0/0
 10677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10682 ;;Total ram usage:        0 bytes
 10683 ;; Hardware stack levels used:    1
 10684 ;; This function calls:
 10685 ;;		Nothing
 10686 ;; This function is called by:
 10687 ;;		_I2C1_StatusCallback
 10688 ;; This function uses a non-reentrant model
 10689 ;;
 10690                           
 10691                           
 10692                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
 10693  0A0F                     _PROTOCOL_Backplane_Slave_Enabled:	
 10694                           
 10695                           ;protocol.c: 196: backplane_slave_enabled = 1;
 10696                           
 10697                           ;incstack = 0
 10698                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
 10699  0A0F  0021               	movlb	1	; select bank1
 10700  0A10  01BA               	clrf	_backplane_slave_enabled^(0+128)
 10701  0A11  0ABA               	incf	_backplane_slave_enabled^(0+128),f
 10702  0A12  0008               	return
 10703  0A13                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
 10704                           
 10705                           	psect	text62
 10706  0B03                     __ptext62:	
 10707 ;; *************** function _EUSART_Transmit_ISR *****************
 10708 ;; Defined at:
 10709 ;;		line 165 in file "mcc_generated_files/eusart.c"
 10710 ;; Parameters:    Size  Location     Type
 10711 ;;		None
 10712 ;; Auto vars:     Size  Location     Type
 10713 ;;		None
 10714 ;; Return value:  Size  Location     Type
 10715 ;;                  1    wreg      void 
 10716 ;; Registers used:
 10717 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10718 ;; Tracked objects:
 10719 ;;		On entry : 0/0
 10720 ;;		On exit  : 0/0
 10721 ;;		Unchanged: 0/0
 10722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10725 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10726 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10727 ;;Total ram usage:        1 bytes
 10728 ;; Hardware stack levels used:    1
 10729 ;; This function calls:
 10730 ;;		Nothing
 10731 ;; This function is called by:
 10732 ;;		_INTERRUPT_InterruptManager
 10733 ;; This function uses a non-reentrant model
 10734 ;;
 10735                           
 10736                           
 10737                           ;psect for function _EUSART_Transmit_ISR
 10738  0B03                     _EUSART_Transmit_ISR:	
 10739                           
 10740                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 10741                           
 10742                           ;incstack = 0
 10743                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10744  0B03  3008               	movlw	8
 10745  0B04  027A               	subwf	_eusartTxBufferRemaining,w	;volatile
 10746  0B05  1803               	skipnc
 10747  0B06  2B1B               	goto	i1l395
 10748                           
 10749                           ;eusart.c: 170: {
 10750                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
 10751  0B07  087B               	movf	_eusartTxTail,w
 10752  0B08  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 10753  0B09  0086               	movwf	6
 10754  0B0A  0187               	clrf	7
 10755  0B0B  0801               	movf	1,w
 10756  0B0C  0023               	movlb	3	; select bank3
 10757  0B0D  009A               	movwf	26	;volatile
 10758  0B0E  3001               	movlw	1
 10759  0B0F  00F0               	movwf	??_EUSART_Transmit_ISR
 10760  0B10  0870               	movf	??_EUSART_Transmit_ISR,w
 10761  0B11  07FB               	addwf	_eusartTxTail,f	;volatile
 10762                           
 10763                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 10764  0B12  3008               	movlw	8
 10765  0B13  027B               	subwf	_eusartTxTail,w	;volatile
 10766  0B14  1803               	btfsc	3,0
 10767                           
 10768                           ;eusart.c: 173: {
 10769                           ;eusart.c: 174: eusartTxTail = 0;
 10770  0B15  01FB               	clrf	_eusartTxTail	;volatile
 10771                           
 10772                           ;eusart.c: 175: }
 10773                           ;eusart.c: 176: eusartTxBufferRemaining++;
 10774  0B16  3001               	movlw	1
 10775  0B17  00F0               	movwf	??_EUSART_Transmit_ISR
 10776  0B18  0870               	movf	??_EUSART_Transmit_ISR,w
 10777  0B19  07FA               	addwf	_eusartTxBufferRemaining,f	;volatile
 10778                           
 10779                           ;eusart.c: 177: }
 10780  0B1A  0008               	return
 10781  0B1B                     i1l395:	
 10782                           
 10783                           ;eusart.c: 178: else
 10784                           ;eusart.c: 179: {
 10785                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 10786  0B1B  0021               	movlb	1	; select bank1
 10787  0B1C  1211               	bcf	17,4	;volatile
 10788  0B1D  0008               	return
 10789  0B1E                     __end_of_EUSART_Transmit_ISR:	
 10790                           
 10791                           	psect	text63
 10792  0AE8                     __ptext63:	
 10793 ;; *************** function _EUSART_Receive_ISR *****************
 10794 ;; Defined at:
 10795 ;;		line 184 in file "mcc_generated_files/eusart.c"
 10796 ;; Parameters:    Size  Location     Type
 10797 ;;		None
 10798 ;; Auto vars:     Size  Location     Type
 10799 ;;		None
 10800 ;; Return value:  Size  Location     Type
 10801 ;;                  1    wreg      void 
 10802 ;; Registers used:
 10803 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10804 ;; Tracked objects:
 10805 ;;		On entry : 0/0
 10806 ;;		On exit  : 0/0
 10807 ;;		Unchanged: 0/0
 10808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10811 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10812 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10813 ;;Total ram usage:        1 bytes
 10814 ;; Hardware stack levels used:    1
 10815 ;; This function calls:
 10816 ;;		Nothing
 10817 ;; This function is called by:
 10818 ;;		_INTERRUPT_InterruptManager
 10819 ;; This function uses a non-reentrant model
 10820 ;;
 10821                           
 10822                           
 10823                           ;psect for function _EUSART_Receive_ISR
 10824  0AE8                     _EUSART_Receive_ISR:	
 10825                           
 10826                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
 10827                           
 10828                           ;incstack = 0
 10829                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10830  0AE8  0023               	movlb	3	; select bank3
 10831  0AE9  1C9D               	btfss	29,1	;volatile
 10832  0AEA  2AED               	goto	i1l3775
 10833                           
 10834                           ;eusart.c: 188: {
 10835                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 10836  0AEB  121D               	bcf	29,4	;volatile
 10837                           
 10838                           ;eusart.c: 192: RCSTAbits.CREN = 1;
 10839  0AEC  161D               	bsf	29,4	;volatile
 10840  0AED                     i1l3775:	
 10841                           
 10842                           ;eusart.c: 193: }
 10843                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
 10844  0AED  0819               	movf	25,w	;volatile
 10845  0AEE  00F0               	movwf	??_EUSART_Receive_ISR
 10846  0AEF  0020               	movlb	0	; select bank0
 10847  0AF0  0869               	movf	_eusartRxHead,w
 10848  0AF1  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 10849  0AF2  0086               	movwf	6
 10850  0AF3  0187               	clrf	7
 10851  0AF4  0870               	movf	??_EUSART_Receive_ISR,w
 10852  0AF5  0081               	movwf	1
 10853  0AF6  3001               	movlw	1
 10854  0AF7  00F0               	movwf	??_EUSART_Receive_ISR
 10855  0AF8  0870               	movf	??_EUSART_Receive_ISR,w
 10856  0AF9  07E9               	addwf	_eusartRxHead,f	;volatile
 10857                           
 10858                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10859  0AFA  3008               	movlw	8
 10860  0AFB  0269               	subwf	_eusartRxHead,w	;volatile
 10861  0AFC  1803               	btfsc	3,0
 10862                           
 10863                           ;eusart.c: 198: {
 10864                           ;eusart.c: 199: eusartRxHead = 0;
 10865  0AFD  01E9               	clrf	_eusartRxHead	;volatile
 10866                           
 10867                           ;eusart.c: 200: }
 10868                           ;eusart.c: 201: eusartRxCount++;
 10869  0AFE  3001               	movlw	1
 10870  0AFF  00F0               	movwf	??_EUSART_Receive_ISR
 10871  0B00  0870               	movf	??_EUSART_Receive_ISR,w
 10872  0B01  07E7               	addwf	_eusartRxCount,f	;volatile
 10873  0B02  0008               	return
 10874  0B03                     __end_of_EUSART_Receive_ISR:	
 10875  007E                     btemp	set	126	;btemp
 10876  007E                     int$flags	set	126
 10877  007E                     wtemp0	set	126


Data Sizes:
    Strings     185
    Constant    12
    Data        4
    BSS         201
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     64      79
    BANK1            80      0      80
    BANK2            80      2      68
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    i2c2_tr_queue.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_4(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    i2c2_read_no_reg_addr@pbuf	PTR unsigned char  size(1) Largest target is 6
		 -> inv_handler@measure(BANK0[6]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), 

    PROTOCOL_I2C_Send_int8_t@pbuffer	PTR char  size(1) Largest target is 2
		 -> PROTOCOL_Send_int8_t@pbuf(BANK1[1]), inv_handler@data(BANK0[2]), 

    PROTOCOL_I2C_Set_TLV@pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> inv_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), inv_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_1(CODE[10]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_1(CODE[10]), 

    S1029$pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), 

    readbuf.pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_10(CODE[4]), buf(BANK2[48]), STR_2(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_1(CODE[10]), I2C2_ISR@i2c_address(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[10]), STR_45(CODE[9]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> STR_36(CODE[14]), STR_35(CODE[9]), STR_34(CODE[10]), STR_33(CODE[9]), 
		 -> STR_32(CODE[10]), STR_31(CODE[9]), STR_30(CODE[7]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[9]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[10]), STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[8]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[9]), STR_17(CODE[6]), 
		 -> STR_16(CODE[10]), STR_13(CODE[10]), STR_9(CODE[10]), STR_5(CODE[10]), 
		 -> STR_3(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterReadTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 6
		 -> inv_handler@measure(BANK0[6]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    I2C2_MasterRead@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_read@status(COMMON[1]), 

    I2C2_MasterRead@pdata	PTR unsigned char  size(1) Largest target is 6
		 -> inv_handler@measure(BANK0[6]), 

    F3084.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_MasterWrite@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    I2C2_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    F3079.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 
		 -> I2C2_ISR@i2c_address(BANK0[2]), NULL(NULL[0]), 

    S264$pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 6
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[6]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    S276$pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    p_i2c2_current.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    S276$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), NULL(NULL[0]), 

    S287$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    S287$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), 

    I2C1_StatusCallback@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C2_ISR->_I2C2_Stop
    _I2C1_ISR->_I2C1_StatusCallback
    _I2C1_StatusCallback->_PROTOCOL_I2C_SEN
    _I2C1_StatusCallback->i1_PROTOCOL_SAV
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _PROTOCOL_Loop->_inv_handler
    _inv_handler->_PROTOCOL_I2C_Send_int8_t
    _i2c2_write->_I2C2_MasterWrite
    _I2C2_MasterWrite->_I2C2_MasterWriteTRBBuild
    _i2c2_read_no_reg_addr->_I2C2_MasterRead
    _I2C2_MasterRead->_I2C2_MasterReadTRBBuild
    ___aldiv->___lmul
    _PROTOCOL_I2C_Send_int8_t->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_PROTOCOL_Loop

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   22284
                                             63 BANK0      1     1      0
                  _EUSART_Initialize
                    _I2C1_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   21746
                                             61 BANK0      2     2      0
                                              0 BANK2      2     2      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                        _inv_handler *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    2040
                                              1 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) _inv_handler                                         22    22      0   12416
                                             39 BANK0     22    22      0
           _PROTOCOL_I2C_Send_int8_t
                            ___aldiv
                             ___lmul
              _i2c2_read_no_reg_addr
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (3) _i2c2_write                                          10     6      4    2338
                                             15 BANK0     10     6      4
                   _I2C2_MasterWrite
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterWrite                                     7     3      4    1771
                                              8 BANK0      7     3      4
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterWriteTRBBuild                             7     3      4     450
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _i2c2_read_no_reg_addr                                9     5      4    2153
                                             15 BANK0      9     5      4
                    _I2C2_MasterRead
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterRead                                      7     3      4    1598
                                              8 BANK0      7     3      4
            _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterTRBInsert                                 4     2      2     494
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterReadTRBBuild                              7     3      4     481
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     444
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     753
                                             13 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_I2C_Send_int8_t                             4     3      1    6401
                                             35 BANK0      4     3      1
               _PROTOCOL_I2C_Set_TLV
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    20      4    5341
                                             15 BANK0     20    16      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              3 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     386
                                              9 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     395
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _PROTOCOL_I2C_Set_TLV                                 6     3      3     737
                                              1 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2    1081
                                              7 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     582
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     315
                                              4 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     253
                                              4 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     253
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         1     1      0      99
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8     538
                                              2 BANK0     10     2      8
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C2_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C1_Initialize                                      2     2      0       0
                                              1 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0     255
                                              0 BANK0      1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _I2C1_ISR
               _I2C2_BusCollisionISR
                           _I2C2_ISR
 ---------------------------------------------------------------------------------
 (8) _I2C2_ISR                                             4     4      0      22
                                              2 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (9) _I2C2_Stop                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _I2C2_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _I2C2_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C1_ISR                                             2     2      0     233
                                              8 COMMON     2     2      0
                _I2C1_StatusCallback
 ---------------------------------------------------------------------------------
 (9) _I2C1_StatusCallback                                  4     4      0     187
                                              4 COMMON     4     4      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                 _PROTOCOL_Read_Lock
                     i1_PROTOCOL_EXT
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SET                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (11) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_EXT                                      1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Read_Lock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_SEN                                    4     4      0      26
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Initialize
   _I2C1_Initialize
     _PROTOCOL_Read_Device_Address
   _I2C2_Initialize
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _inv_handler *
       _PROTOCOL_I2C_Send_int8_t
         _PROTOCOL_I2C_Set_TLV
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
       ___aldiv
         ___lmul (ARG)
       ___lmul
       _i2c2_read_no_reg_addr
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
       _i2c2_write
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
     _strncmp *
   _TMR0_Initialize
   _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_ISR
     _I2C1_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       _PROTOCOL_Read_Lock
       i1_PROTOCOL_EXT
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     40      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      2      44       9       85.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     121      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     121      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Sep 20 08:39:20 2017

                                         _i 0065                                           _j 00B9  
                                         pc 0002                 i2c2_read_no_reg_addr@status 0037  
                    __end_ofi1_PROTOCOL_EXT 09F9                      __end_ofi1_PROTOCOL_SAV 0A4F  
                    __end_ofi1_PROTOCOL_SET 0A3F                      __end_ofi1_PROTOCOL_STA 0A1B  
                    __end_ofi1_PROTOCOL_STP 0A06             __end_of_TMR0_HasOverflowOccured 0A23  
                               __CFG_CP$OFF 0000                       ?_I2C2_MasterTRBInsert 0021  
              i2c2_read_no_reg_addr@timeout 0035                         ___wmul@multiplicand 0023  
                           _timer0ReloadVal 00C4              I2C2_MasterReadTRBBuild@address 0023  
                            inv_handler@s_t 0053                                 __CFG_LVP$ON 0000  
                                       l600 01CA                                         l383 0C27  
                                       l480 0C10                                         l617 0255  
                                       l565 00A7                                         l741 0256  
                                       l593 0154                                         l577 0174  
                                       l937 0C88                                __CFG_CPD$OFF 0000  
                                       _buf 0120                                         _cnt 00C2  
                              __CFG_BORV$LO 0000                                         wreg 0009  
                              __CFG_IESO$ON 0000                             inv_handler@data 005B  
                              ?_EUSART_Read 0070                             inv_handler@s_rh 0057  
                          __end_of_I2C1_ISR 0C65                            __end_of_I2C2_ISR 0538  
                                      l1117 0F8F                                        l1058 0B27  
                                      l4101 0D43                                        l4023 0EA2  
                                      l4105 0D4F                                        l4009 0C3B  
                                      l4033 0EB5                                        l4203 0199  
                                      l4131 00A2                                        l4027 0EA9  
                                      l4123 0CD5                                        l4053 0B21  
                                      l4109 0D58                                        l4029 0EAE  
                                      l4117 0CFD                                        l4047 0A7C  
                                      l4231 01F3                                        l4223 01E6  
                                      l4215 01BE                                        l4151 00F1  
                                      l4143 00C2                                _tmr_overflow 00BC  
                                      l4225 01E9                                        l4209 019F  
                                      l4137 00AC                                        l4313 0D28  
                                      l4083 0DE2                                        l4075 0DC4  
                                      l4243 0213                                        l4163 0107  
                                      l4139 00B5                                        l4331 0798  
                                      l4307 0D1E                                        l4421 0B77  
                                      l4501 0F3C                                        l4077 0DD0  
                                      l4253 0220                                        l4237 0202  
                                      l4181 014B                                        l4173 0124  
                                      l4165 0115                                        l4333 07B0  
                                      l4317 0D0B                                        l4511 0F79  
                                      l4503 0F40                                        l4087 0DEB  
                                      l4239 0206                                        l4247 021B  
                                      l4175 0133                                        l4159 0105  
                                      l4255 0086                                        l4343 07C0  
                                      l4335 07BC                                        l4319 0D2E  
                                      l4505 0F69                                        l4169 0122  
                                      l4345 07DC                                        l4353 0D9E  
                                      l4099 0D37                                        l4179 0140  
                                      l4187 0156                                        l4371 0FA0  
                                      l4291 0C7E                                        l4603 0391  
                                      l4381 0FBE                                        l4349 0D94  
                                      l4199 018E                                        l4471 0E26  
                                      l4615 03E4                                        l4393 0FE9  
                                      l4297 0C8A                                        l4609 03B5  
                                      l4545 0282                                        l4483 0F17  
                                      l4379 0FB0                                        l4467 0E0E  
                                      l4475 0DF0                                        l4547 0283  
                                      l4485 0F0F                                        l4397 0FF7  
                                      l4389 0FDE                                        l4477 0E2F  
                                      l4581 02F7                                        l4557 0291  
                                      l4495 0F34                                        l4487 0F1C  
                                      l4585 0310                                        l4577 02D2  
                                      l4595 034E                                        l4589 0329  
                                      l4599 036D                                        l3995 0C1C  
                                      STR_1 072B                                        STR_2 074E  
                                      STR_3 075B                                        STR_4 077C  
                                      STR_5 0703                                        STR_6 078C  
                                      STR_7 0774                                        STR_8 0780  
                                      STR_9 070D                                        _LATA 010C  
                                      _LATB 010D                                        _LATC 010E  
                                      u3325 0B28                                        u3405 0DE3  
                                      u3335 0B2D                                        u3435 0D3A  
                                      u3365 0DC7                                        u3455 0D49  
                                      u3615 01B4                                        u3385 0DD1  
                                      u3465 0D50                                        u3395 0DDB  
                                      u3555 011B                                        u4447 0BBA  
                                      u3655 01D9                                        u3935 0FB3  
                                      i1l64 0C52                                        u3955 0FBF  
                                      u3875 0D9F                                        u3965 0FD3  
                                      u3885 0DA6                                        i1l86 053A  
                                      u3975 0FDF                                        _TMR0 0015  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                                __CFG_WRT$OFF 0000  
                             __CFG_FCMEN$ON 0000                                        _data 00B8  
                                      _atoi 0F0D                                        _main 0D5D  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                 I2C2_MasterReadTRBBuild@ptrb 0027  
                             __CFG_BOREN$ON 0000                                        start 0048  
                             __CFG_MCLRE$ON 0000                         _I2C1_StatusCallback 0538  
                ??_PROTOCOL_I2C_Send_int8_t 0044                             ?i1_PROTOCOL_EXT 0070  
                           ?i1_PROTOCOL_SAV 0070                             ?i1_PROTOCOL_SET 0070  
                 __size_of_DATAEE_WriteByte 0023                             ?i1_PROTOCOL_STA 0070  
                           ?i1_PROTOCOL_STP 0070                     __end_of_TMR0_Initialize 0A8D  
                             __CFG_PLLEN$ON 0000                                  _i2c2_state 00C9  
                             ?_EUSART_Write 0070                                  _i2c2_write 0C65  
            __size_of_OSCILLATOR_Initialize 0005               __end_of_OSCILLATOR_Initialize 0A2C  
                   _I2C2_MasterReadTRBBuild 0C8C                             __end_of___aldiv 1000  
                                     ?_atoi 0027                                       ?_main 0070  
                                     STR_10 0778                                       STR_11 0788  
                                     STR_12 0784                                       STR_20 0760  
                                     STR_13 06EF                                       STR_14 0770  
                                     STR_22 0764                                       STR_30 0747  
                                     STR_15 076C                                       STR_40 06EB  
                                     STR_24 0721                                       STR_32 0717  
                                     STR_16 06E5                                       STR_17 0755  
                             __CFG_WDTE$OFF 0000                                       STR_18 073E  
                                     STR_34 06F9                                       STR_19 0768  
                                     STR_35 0735                                       STR_36 06D7  
                                     STR_39 0764                           __end_of_I2C2_Stop 0ACE  
                           __end_of___lwdiv 0DF0                                       i1l103 055D  
                                     i1l210 04CF                                       i1l124 0602  
            __size_of_I2C2_FunctionComplete 0012                                       i1l213 04E3  
                                     i1l214 04F1                                       i1l206 04AD  
                                     i1l225 07FD                                       i1l218 0518  
                                     i1l323 0015                                       i1l325 0021  
                                     i1l333 0043                                       i1l190 0433  
                                     i1l327 002D                                       i1l184 03FD  
                                     i1l329 0039                             __end_of___lwmod 0D5D  
                                     i1l195 0458                                       i1l196 0464  
                                     i1l189 042B                                       i1l480 0B4E  
                                     i1l395 0B1B                  PROTOCOL_I2C_Set_TLV@length 0021  
                                     _RCREG 0199               __end_of_I2C2_FunctionComplete 0800  
                                     _RCSTA 019D                      i2c2_write@write_status 0037  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E                                       _TXREG 019A  
                                     _TXSTA 019E                         ___lmul@multiplicand 0025  
              __size_of_PROTOCOL_Initialize 0051                  PROTOCOL_I2C_Set_TLV@status 0026  
                         ??_I2C1_Initialize 0021                        ?_I2C1_StatusCallback 0070  
                           _DATAEE_ReadByte 0A62             ??_PROTOCOL_Write_Device_Address 0024  
                           __end_of_dpowers 06D5                              _WDT_Initialize 0A23  
            PROTOCOL_Initialize@inv_handler 0027                             __end_of_isdigit 0A7E  
                              ?_inv_handler 0070                                       _value 0066  
                                     atoi@a 002C                                       atoi@s 002E  
                                     _putch 0A2C                I2C2_MasterReadTRBBuild@pdata 0021  
                    ?_i2c2_read_no_reg_addr 002F                                       pclath 000A  
                    ??_PROTOCOL_I2C_Set_TLV 0024                                       status 0003  
                                     wtemp0 007E                             __end_of_strncmp 0E32  
                         ??_I2C2_MasterRead 002C                           ??_I2C2_Initialize 0021  
                           __initialization 004A                                __end_of_atoi 0F7E  
                              __end_of_main 0D8B                      ??_I2C2_MasterTRBInsert 0023  
                            ??_EUSART_Write 0021                              i2c2_write@data 0032  
               ?_INTERRUPT_InterruptManager 0070            __end_of_I2C2_MasterWriteTRBBuild 0BB4  
          PROTOCOL_Initialize@start_handler 0024                                      ??_atoi 0029  
                                    ??_main 005F                                 _i2c2_object 0060  
                        _PROTOCOL_Read_Lock 0A00                           inv_handler@status 004C  
                    __end_of_WDT_Initialize 0A27                       ??_I2C1_StatusCallback 0074  
                __end_ofi1_DATAEE_WriteByte 0B57                                      i1S4713 0800  
                                    i1S4715 0818                                      _EEADRH 0192  
                                    _EEADRL 0191                                      _EEDATH 0194  
                                    _EEDATL 0193                                      _EECON2 0196  
                                    _ANSELA 018C                                      ?_putch 0070  
                                    _ANSELB 018D                                      _ANSELC 018E  
                       ?_PROTOCOL_Read_Lock 0070                          _PROTOCOL_Loop_Func 00B6  
              __end_of_I2C2_BusCollisionISR 09FA                                      i1l3121 0E52  
                                    i1l3113 0E3B                                      i1l3131 0E61  
                                    i1l3117 0E41                                      i1l3133 0E70  
                                    i1l3109 0E33                                      i1l3301 0549  
                                    i1l3127 0E5C                                      i1l3311 0560  
                                    i1l3303 054D                                      i1l3321 0586  
                                    i1l3305 0551                                      i1l3307 0555  
                                    i1l3315 0564                                      i1l3333 059C  
                                    i1l3309 0559                                      i1l3343 05B8  
                                    i1l3327 0590                                      i1l3319 057C  
                                    i1l3351 05C5                                      i1l3361 05E7  
                                    i1l3353 05D1                                      i1l3355 05D4  
                                    i1l3347 05BB                                      i1l3611 0452  
                                    i1l3357 05D9                                      i1l3365 05EC  
                                    i1l3605 043F                                      i1l3295 053E  
                                    i1l3543 0C59                                      i1l3297 0544  
                                    i1l3369 05F8                                      i1l3545 0C5B  
                                    i1l3537 0C50                                      i1l3625 0482  
                                    i1l3705 052C                                      i1l3651 04A7  
                                    i1l3397 0ACB                                      i1l3645 049A  
                                    i1l3593 041E                                      i1l3683 04FF  
                                    i1l3667 04D7                                      i1l3659 04BB  
                                    i1l3775 0AED                                      i1l3695 051C  
                                    i1l3679 04F8                                      i1l3697 051F  
                                    i1l3699 0523                                      _OSCCON 0099  
          __size_of_TMR0_HasOverflowOccured 0004                                      _TMR0IF 005A  
                                    _SPBRGH 019C                                      _SPBRGL 019B  
                                    _WDTCON 0097                       I2C2_MasterRead@length 0028  
            PROTOCOL_Initialize@set_handler 0026                              __CFG_PWRTE$OFF 0000  
                 PROTOCOL_Initialize@scaler 0029                                      ___lmul 0D8B  
                                 ??___aldiv 0035                                      ___wmul 0B1E  
                            _p_i2c2_current 006A                              __CFG_STVREN$ON 0000  
                 ??_I2C2_MasterReadTRBBuild 0025                                   ??___lwdiv 0025  
                      ??_PROTOCOL_Read_Lock 0070                                   ??___lwmod 002D  
                              _type_no_data 00EF                         _EUSART_Transmit_ISR 0B03  
                          ?_TMR0_Initialize 0070                                      _locked 00C1  
                                 ?_I2C1_ISR 0070                                   ?_I2C2_ISR 0070  
                               ?_i2c2_write 002F                    I2C2_Stop@completion_code 0071  
                                    _printf 0081                     __end_of_DATAEE_ReadByte 0A6F  
             I2C2_MasterReadTRBBuild@length 0022                                __pdataCOMMON 007D  
                                 ??_isdigit 0021                    __end_of_PROTOCOL_I2C_GET 09FD  
                  __end_of_PROTOCOL_I2C_SEN 0E75                    __end_of_PROTOCOL_I2C_WHO 0A00  
                           ?_WDT_Initialize 0070               i1DATAEE_WriteByte@GIEBitValue 0072  
                                 ??_strncmp 0026                   PROTOCOL_Send_uint8_t@pbuf 00E6  
                      ?_EUSART_Transmit_ISR 0070                        __size_of_EUSART_Read 001F  
                   __end_of__initialization 007D                           ?_I2C2_MasterWrite 0028  
                        ??_I2C2_MasterWrite 002C                              __pcstackCOMMON 0070  
                              __pidataBANK1 0A0C                            _DATAEE_WriteByte 0BF7  
                            _i2c2_trb_count 00C8                               __end_of_putch 0A32  
                                ??_I2C1_ISR 0078                                  ??_I2C2_ISR 0072  
                     __end_of_PROTOCOL_Loop 03E9                              _OPTION_REGbits 0095  
                  _I2C2_MasterWriteTRBBuild 0B94                I2C2_MasterWriteTRBBuild@ptrb 0027  
                   PROTOCOL_Send_float@pbuf 00DB                       ??_EUSART_Transmit_ISR 0070  
                                   ??_putch 0023                                  __pbssBANK0 0060  
                                __pbssBANK1 00A0                                  __pbssBANK2 0120  
                                __pbssBANK3 01A0                      i1DATAEE_WriteByte@bAdd 0071  
                        inv_handler@measure 004D                        __end_of_EUSART_Write 0C3E  
                      __size_of_inv_handler 00C8                         __size_of_i2c2_write 0027  
               __size_of_EUSART_Receive_ISR 001B                          i2c2_write@dev_addr 002F  
                          ??i1_PROTOCOL_EXT 0070                            ??i1_PROTOCOL_SAV 0073  
                          ??i1_PROTOCOL_SET 0070                            ??i1_PROTOCOL_STA 0070  
                          ??i1_PROTOCOL_STP 0070                         _PROTOCOL_Initialize 0EBC  
                                __pmaintext 0D5D                                     ?___lmul 0021  
                                   ?___wmul 0021                                  __pintentry 0004  
                           _I2C1_Initialize 0BB4                                     _BAUDCON 019F  
                            ___lmul@product 0029                                  _device_id_ 0160  
                        i2c2_write@reg_addr 0031                                     _APFCON0 011D  
                                   _APFCON1 011E                        _I2C2_BusCollisionISR 09F9  
                                   ?_printf 002F                   i2c2_read_no_reg_addr@pbuf 0031  
                I2C1_StatusCallback@ext_buf 01A0                  I2C1_StatusCallback@ext_cnt 00CA  
                I2C1_StatusCallback@ext_len 00CB                            ?_DATAEE_ReadByte 0070  
                             _eusartRxCount 0067           I2C1_StatusCallback@slaveWriteType 00CC  
                PROTOCOL_Send_uint16_t@pbuf 00E3                        ?_PROTOCOL_Initialize 0022  
         I2C2_ISR@i2c_10bit_address_restart 00C5                      I2C2_MasterRead@address 0029  
                                 _I2C2_Stop 0AB5                     ??_i2c2_read_no_reg_addr 0033  
                                   _OSCTUNE 0098                                     _SSP1ADD 0212  
                                   _SSP2ADD 021A                                     _SSP1BUF 0211  
                                   _SSP2BUF 0219                                     _SSP1MSK 0213  
                    _PROTOCOL_Start_Handler 00EB                             _I2C2_MasterRead 0CB4  
                           _I2C2_Initialize 0A9D                          __end_of_RESOLUTION 06D7  
                   _TMR0_HasOverflowOccured 0A1F                        DATAEE_WriteByte@bAdd 0022  
                    I2C2_MasterRead@trBlock 00D3                                     ___aldiv 0F7E  
                           __size_of___lmul 0030                               ?_PROTOCOL_INV 0070  
                             ?_PROTOCOL_EXT 0070                               ?_PROTOCOL_SAV 0070  
                             ?_PROTOCOL_SET 0070                               ?_PROTOCOL_STA 0070  
                             ?_PROTOCOL_RST 0070                               ?_PROTOCOL_STP 0070  
                           __size_of___wmul 001C                                     ___lwdiv 0DBB  
                                   ___lwmod 0D30                       ?_I2C2_BusCollisionISR 0070  
                 I2C2_MasterTRBInsert@count 0024                                     __ptext1 0A23  
                                   __ptext2 0A7E                                     __ptext3 0256  
                                   __ptext4 0DF0                                     __ptext5 0603  
                                   __ptext6 0C65                                     __ptext7 0CDC  
                                   __ptext8 0B94                                     __ptext9 0D04  
                 I2C2_MasterTRBInsert@pflag 0022                             __size_of_printf 01D5  
                                   _dpowers 06CB                       _OSCILLATOR_Initialize 0A27  
PROTOCOL_Write_Device_Address@device_id_i2c 0025                       ??_PROTOCOL_Initialize 002A  
                                   _isdigit 0A6F                                     _readbuf 00CD  
                                   _sec_cnt 00BE                                     _invoked 00BF  
                          ___aldiv@dividend 0031                    ??_PIN_MANAGER_Initialize 0021  
                                   _sendbuf 0150           __size_of_PROTOCOL_I2C_Send_int8_t 005E  
                                ?_I2C2_Stop 0070                       _I2C2_FunctionComplete 07EE  
                 ?_PROTOCOL_I2C_Send_int8_t 0043                                     _tmr_cnt 00BD  
                                   clrloop0 0A33                                     _running 00C0  
                                   _strncmp 0DF0                        end_of_initialization 007D  
                _PROTOCOL_Extension_Handler 00B4               __size_of_PROTOCOL_I2C_Set_TLV 0022  
                        i1_DATAEE_WriteByte 0B3A                           _EUSART_Initialize 0ACE  
                   __end_of_I2C1_Initialize 0BD5                          ?_EUSART_Initialize 0070  
                     I2C2_MasterWrite@pdata 002E                          _p_i2c2_trb_current 006B  
                                 _RCSTAbits 019D                       I2C2_MasterWrite@pflag 002B  
                                   printf@c 0042                                     printf@f 002F  
                          ___aldiv@quotient 0038                              ??_PROTOCOL_INV 0070  
                            ??_PROTOCOL_EXT 0021                              ??_PROTOCOL_SAV 0024  
                            ??_PROTOCOL_SET 0021                              ??_PROTOCOL_STA 0021  
                            ??_PROTOCOL_RST 0070                              ??_PROTOCOL_STP 0021  
                    I2C2_ISR@i2c_bytes_left 00C6                         ?i1_DATAEE_WriteByte 0070  
                              __pstringtext 06CB               __size_of_I2C2_MasterTRBInsert 0047  
                              ??_i2c2_write 0033                         ??_EUSART_Initialize 0021  
               __end_of_I2C1_StatusCallback 0603                            ??_WDT_Initialize 0021  
                         __size_of_I2C1_ISR 0027                           __size_of_I2C2_ISR 014F  
                   __end_of_I2C2_MasterRead 0CDC                            __CFG_FOSC$INTOSC 0000  
                   __end_of_I2C2_Initialize 0AB5                           ?_PROTOCOL_I2C_GET 0070  
                         ?_PROTOCOL_I2C_SEN 0070                           ?_PROTOCOL_I2C_WHO 0070  
                     __size_of_EUSART_Write 0024                   ??_TMR0_HasOverflowOccured 0021  
                        ??_PROTOCOL_I2C_GET 0070                          ??_PROTOCOL_I2C_SEN 0070  
                        ??_PROTOCOL_I2C_WHO 0070                        ??i1_DATAEE_WriteByte 0071  
                                _tmr_scaler 00ED                    __end_of_DATAEE_WriteByte 0C1A  
                 __end_of_EUSART_Initialize 0AE8                                 printf@width 0040  
                        __end_of_i2c2_write 0C8C                        i1PROTOCOL_SET@value_ 0071  
                    ??_I2C2_BusCollisionISR 0070                    I2C1_StatusCallback@pdata 0075  
                            __end_of___lmul 0DBB                 __size_of_PROTOCOL_Read_Lock 0003  
                ??_I2C2_MasterWriteTRBBuild 0025                              __end_of___wmul 0B3A  
                             __pidataCOMMON 0003                                _EUSART_Write 0C1A  
                    ?_OSCILLATOR_Initialize 0070                   __size_of_I2C2_MasterWrite 0028  
                            __end_of_printf 0256                      ?_I2C2_FunctionComplete 0070  
                            PROTOCOL_Loop@c 0162                         start_initialization 004A  
                               ??_I2C2_Stop 0070                    __size_of_TMR0_Initialize 000F  
           __size_of_PIN_MANAGER_Initialize 001E                               ??_EUSART_Read 0021  
                             i2c2_write@buf 0035               i2c2_read_no_reg_addr@dev_addr 002F  
                               putch@txData 0023                         DATAEE_ReadByte@bAdd 0021  
           I2C2_MasterWriteTRBBuild@address 0023                            i2c2_write@status 0038  
                      I2C2_MasterRead@pdata 002E                    ?_I2C2_MasterReadTRBBuild 0021  
                      I2C2_MasterRead@pflag 002B                            ?_I2C1_Initialize 0070  
                                  ??___lmul 0029                            I2C1_ISR@i2c_data 0079  
                                  ??___wmul 0025               I2C2_MasterWriteTRBBuild@pdata 0021  
                      I2C2_ISR@pi2c_buf_ptr 00C7                    PROTOCOL_Send_int8_t@pbuf 00E5  
      __end_of_PROTOCOL_Read_Device_Address 0A09       __size_of_PROTOCOL_Read_Device_Address 0003  
              _PROTOCOL_Read_Device_Address 0A06                                 __pdataBANK1 00ED  
                                  ??_printf 0033                     i1DATAEE_WriteByte@bData 0070  
               __end_of_EUSART_Transmit_ISR 0B1E                            ?_I2C2_MasterRead 0028  
                               __pbssCOMMON 007A                            ?_I2C2_Initialize 0070  
                                 ___latbits 0002                               __pcstackBANK0 0020  
                             __pcstackBANK2 0162            I2C1_StatusCallback@i2c_bus_state 0077  
                      _PROTOCOL_Inv_Handler 00B2                                _isdigit$1477 0021  
                             ??_inv_handler 0047                        __end_of_PROTOCOL_INV 0A17  
                      __end_of_PROTOCOL_EXT 0003                        __end_of_PROTOCOL_SAV 0A58  
                      __end_of_PROTOCOL_SET 0A46                        __end_of_PROTOCOL_STA 0A1F  
            __size_of_i2c2_read_no_reg_addr 002C                        __end_of_PROTOCOL_RST 0A62  
                      __end_of_PROTOCOL_STP 0A0C               __end_of_i2c2_read_no_reg_addr 0D30  
                             _i2c2_tr_queue 00DE                  __end_of_EUSART_Receive_ISR 0B03  
           PROTOCOL_Initialize@stop_handler 0025                  __size_of_EUSART_Initialize 001A  
                       __end_of_EUSART_Read 0B94                      __size_of_PROTOCOL_Loop 0193  
                                 __pnvBANK1 00E7                                   __pnvBANK2 0160  
     __end_of_PROTOCOL_Write_Device_Address 0A9D      __size_of_PROTOCOL_Write_Device_Address 0010  
             _PROTOCOL_Write_Device_Address 0A8D                            ___lwdiv@dividend 0023  
                    _PIN_MANAGER_Initialize 0B57                        EUSART_Read@readValue 0022  
                                  ?___aldiv 002D            __end_of_PROTOCOL_I2C_Send_int8_t 07EE  
                                  ?___lwdiv 0021                                    ?___lwmod 0029  
                              _eusartRxHead 0069                                _eusartTxHead 007C  
                              _eusartRxTail 0068                                _eusartTxTail 007B  
                                  _I2C1_ISR 0C3E                                    _I2C2_ISR 03E9  
             ?_PROTOCOL_Read_Device_Address 0070                ??_INTERRUPT_InterruptManager 0020  
                 PROTOCOL_Send_int16_t@pbuf 00E1                                   __pswtext1 0800  
                                 __pswtext2 0818                     _eusartTxBufferRemaining 007A  
                                  ?_isdigit 0070                            ___lwdiv@quotient 0027  
                  __size_of_DATAEE_ReadByte 000D                                    ?_strncmp 0021  
                            __size_of_putch 0006                              _eusartRxBuffer 00A0  
           __end_of_I2C2_MasterReadTRBBuild 0CB4                             ___aldiv@divisor 002D  
                         ??_TMR0_Initialize 0021                              _eusartTxBuffer 00A8  
                           ___aldiv@counter 0036                              ___wmul@product 0025  
                                  _LATCbits 010E                        _PROTOCOL_Set_Handler 00E7  
          i2c2_read_no_reg_addr@read_status 0036                                   clear_ram0 0A32  
                       __end_of_inv_handler 06CB                                    _PIE1bits 0091  
                                  _PIE4bits 0094                       PROTOCOL_I2C_SEN@pdata 0072  
                  PROTOCOL_I2C_Set_TLV@type 0025         __size_of_INTERRUPT_InterruptManager 0044  
                                  _PIR1bits 0011                                    _PIR4bits 0014  
                                  _SSP1CON1 0215                                    _SSP1CON2 0216  
                                  _SSP1CON3 0217                PROTOCOL_Initialize@device_id 0022  
                                  _SSP2CON1 021D                                    _SSP2CON3 021F  
                                  _SSP1STAT 0214                                    _SSP2STAT 021C  
                            _readbuf_status 00BB                       _PROTOCOL_Stop_Handler 00E9  
               __end_of_PROTOCOL_Initialize 0F0D               I2C2_MasterTRBInsert@ptrb_list 0021  
                   __size_ofi1_PROTOCOL_EXT 0001                     __size_ofi1_PROTOCOL_SAV 0009  
                   __size_ofi1_PROTOCOL_SET 0007                     __size_ofi1_PROTOCOL_STA 0004  
                   __size_ofi1_PROTOCOL_STP 0003                           ___wmul@multiplier 0021  
              __end_of_PROTOCOL_I2C_Set_TLV 0BF7                            _I2C2_MasterWrite 0CDC  
                             _PROTOCOL_Loop 0256                                  printf@flag 003F  
                                printf@prec 0037                       DATAEE_WriteByte@bData 0021  
                   I2C1_StatusCallback@next 006C                                 _EUSART_Read 0B75  
                         ___lmul@multiplier 0021                __end_of_I2C2_MasterTRBInsert 0EBC  
               PROTOCOL_I2C_Set_TLV@pbuffer 0022                           ?_DATAEE_WriteByte 0021  
  __end_of_PROTOCOL_Backplane_Slave_Enabled 0A13   __size_of_PROTOCOL_Backplane_Slave_Enabled 0004  
        ??_PROTOCOL_Backplane_Slave_Enabled 0070           ?_PROTOCOL_Backplane_Slave_Enabled 0070  
          _PROTOCOL_Backplane_Slave_Enabled 0A0F                          ??_DATAEE_WriteByte 0022  
                             _slave_address 00C3                                  _EECON1bits 0195  
                        PROTOCOL_SET@value_ 0022                   __size_of_PROTOCOL_I2C_GET 0003  
                 __size_of_PROTOCOL_I2C_SEN 0043                   __size_of_PROTOCOL_I2C_WHO 0003  
            I2C2_MasterWriteTRBBuild@length 0022                     ??_OSCILLATOR_Initialize 0021  
            ?_PROTOCOL_Write_Device_Address 0070                            __size_of___aldiv 0082  
                          __size_of___lwdiv 0035                            __size_of___lwmod 002D  
                   ??_I2C2_FunctionComplete 0070                              ?_PROTOCOL_Loop 0070  
                  _PROTOCOL_I2C_Send_int8_t 0790                       __size_of_PROTOCOL_INV 0004  
                     __size_of_PROTOCOL_EXT 0001                       __size_of_PROTOCOL_SAV 0009  
                     __size_of_PROTOCOL_SET 0007                       __size_of_PROTOCOL_STA 0004  
                     __size_of_PROTOCOL_RST 000A                       __size_of_PROTOCOL_STP 0003  
            ??_PROTOCOL_Read_Device_Address 0021                            __size_of_isdigit 000F  
                           ___lwdiv@divisor 0021                __size_of_I2C1_StatusCallback 00CB  
                           ___lwdiv@counter 0026                                    __ptext10 0CB4  
                                  __ptext11 0E75                                    __ptext20 0DBB  
                                  __ptext12 0C8C                                    __ptext21 0BD5  
                                  __ptext13 0D8B                                    __ptext30 0A4F  
                                  __ptext22 0F0D                                    __ptext14 0F7E  
                                  __ptext31 0BF7                                    __ptext23 0A6F  
                                  __ptext15 0790                                    __ptext40 0A06  
                                  __ptext32 0002                                    __ptext24 0B1E  
                                  __ptext16 0081                                    __ptext41 0ACE  
                                  __ptext33 0B75                                    __ptext25 0A1F  
                                  __ptext17 0A2C                                    __ptext50 0A17  
                                  __ptext34 0EBC                                    __ptext26 0A8D  
                                  __ptext18 0C1A                                    __ptext51 0A38  
                                  __ptext43 03E9                                    __ptext35 0A62  
                                  __ptext27 0A09                                    __ptext19 0D30  
                                  __ptext60 09FA                                    __ptext52 0A46  
                                  __ptext44 0AB5                                    __ptext36 0B57  
                                  __ptext28 0A1B                                    __ptext61 0A0F  
                                  __ptext53 0B3A                                    __ptext45 07EE  
                                  __ptext37 0A27                                    __ptext29 0A3F  
                                  __ptext62 0B03                                    __ptext54 09F8  
                                  __ptext46 09F9                                    __ptext38 0A9D  
                                  __ptext63 0AE8                                    __ptext55 0A00  
                                  __ptext47 0C3E                                    __ptext39 0BB4  
                                  __ptext56 0A58                                    __ptext48 0538  
                                  __ptext57 0A13                                    __ptext49 0A03  
                                  __ptext58 09FD                                    __ptext59 0E32  
                              _SSP1CON1bits 0215                                _SSP1CON2bits 0216  
                                  _float100 00B0                 __size_ofi1_DATAEE_WriteByte 001D  
                               _inv_handler 0603                                _SSP2CON1bits 021D  
                              _SSP2CON2bits 021E                 DATAEE_WriteByte@GIEBitValue 0023  
                          __size_of_strncmp 0042                               __size_of_atoi 0071  
                             __size_of_main 002E                                  strncmp@len 0024  
                         ??_DATAEE_ReadByte 0021                     I2C2_MasterWrite@address 0029  
                   _BACKPLANE_SLAVE_ADDRESS 00EE                  __end_of_PROTOCOL_Read_Lock 0A03  
                                  int$flags 007E                                    atoi@sign 002B  
           PROTOCOL_I2C_Send_int8_t@pbuffer 0043                                _PROTOCOL_INV 0A13  
                              _PROTOCOL_EXT 0002                                _PROTOCOL_SAV 0A4F  
                              _PROTOCOL_SET 0A3F                                _PROTOCOL_STA 0A1B  
                              _PROTOCOL_RST 0A58                                _PROTOCOL_STP 0A09  
        __end_of_INTERRUPT_InterruptManager 0048                  _INTERRUPT_InterruptManager 0004  
                                 printf@len 003D                                   printf@val 003B  
                   I2C2_MasterWrite@trBlock 00D7                                _SSP1STATbits 0214  
                  i2c2_read_no_reg_addr@len 0032               __size_of_I2C2_BusCollisionISR 0001  
          __size_of_I2C2_MasterReadTRBBuild 0028                    ?_TMR0_HasOverflowOccured 0070  
                        _I2C_slaveWriteData 007D                                  _INTCONbits 000B  
                                  isdigit@c 0022                     __size_of_WDT_Initialize 0004  
         __size_of_I2C2_MasterWriteTRBBuild 0020                   ?_I2C2_MasterWriteTRBBuild 0021  
                                  intlevel1 0000                            ___lwmod@dividend 002B  
                       I2C2_ISR@i2c_address 006D                     ?_PIN_MANAGER_Initialize 0070  
                         __CFG_CLKOUTEN$OFF 0000                        _PROTOCOL_I2C_Set_TLV 0BD5  
                                 strncmp@s1 0021                                   strncmp@s2 0023  
                   _backplane_slave_enabled 00BA              PROTOCOL_I2C_Send_int8_t@length 0046  
                                _RESOLUTION 06D5                      I2C2_MasterWrite@length 0028  
                                  printf@ap 003A                                    printf@cp 0038  
                        _EUSART_Receive_ISR 0AE8                             ??_PROTOCOL_Loop 005D  
                      _I2C2_MasterTRBInsert 0E75                    __size_of_I2C1_Initialize 0021  
                            i1_PROTOCOL_EXT 09F8                              i1_PROTOCOL_SAV 0A46  
                            i1_PROTOCOL_SET 0A38                              i1_PROTOCOL_STA 0A17  
                            i1_PROTOCOL_STP 0A03                                  _OPTION_REG 0095  
                       ?_EUSART_Receive_ISR 0070                             ___lwmod@divisor 0029  
                           _TMR0_Initialize 0A7E                             ___lwmod@counter 002E  
                              ___aldiv@sign 0037                 PROTOCOL_Loop@device_address 0163  
                      PROTOCOL_EXT@char_buf 0021                          EUSART_Write@txData 0022  
              __size_of_EUSART_Transmit_ISR 001B              __end_of_PIN_MANAGER_Initialize 0B75  
                  __size_of_I2C2_MasterRead 0028                    __size_of_I2C2_Initialize 0018  
                     _i2c2_read_no_reg_addr 0D04                          __size_of_I2C2_Stop 0019  
                      ??_EUSART_Receive_ISR 0070                       ?_PROTOCOL_I2C_Set_TLV 0021  
                  __end_of_I2C2_MasterWrite 0D04                            _PROTOCOL_I2C_GET 09FA  
                          _PROTOCOL_I2C_SEN 0E32                            _PROTOCOL_I2C_WHO 09FD  
