

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Sep 20 08:35:25 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2,group=4
    30                           	psect	text11,local,class=CODE,merge=1,delta=2,group=4
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2,group=4
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2,group=4
    43                           	psect	text24,local,class=CODE,merge=1,delta=2,group=4
    44                           	psect	text25,local,class=CODE,merge=1,delta=2,group=4
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	intentry,global,class=CODE,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	swtext1,local,class=CONST,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	swtext2,local,class=CONST,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
    84                           	psect	text63,local,class=CODE,merge=1,delta=2,group=1
    85                           	psect	text64,local,class=CODE,merge=1,delta=2,group=1
    86                           	psect	text65,local,class=CODE,merge=1,delta=2,group=1
    87                           	psect	text66,local,class=CODE,merge=1,delta=2,group=1
    88                           	psect	text67,local,class=CODE,merge=1,delta=2,group=1
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	dabs	1,0x7E,2
    92  0000                     
    93                           ; Version 1.41 (B)
    94                           ; Generated 21/02/2017 GMT
    95                           ; 
    96                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    97                           ; All rights reserved.
    98                           ; 
    99                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   100                           ; 
   101                           ; Redistribution and use in source and binary forms, with or without modification, are
   102                           ; permitted provided that the following conditions are met:
   103                           ; 
   104                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   105                           ;        conditions and the following disclaimer.
   106                           ; 
   107                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   108                           ;        of conditions and the following disclaimer in the documentation and/or other
   109                           ;        materials provided with the distribution.
   110                           ; 
   111                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   112                           ;        software without specific prior written permission.
   113                           ; 
   114                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   115                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   116                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   117                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   118                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   119                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   120                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   121                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   122                           ; 
   123                           ; 
   124                           ; Code-generator required, PIC16F1829 Definitions
   125                           ; 
   126                           ; SFR Addresses
   127  0000                     	;# 
   128  0001                     	;# 
   129  0002                     	;# 
   130  0003                     	;# 
   131  0004                     	;# 
   132  0005                     	;# 
   133  0006                     	;# 
   134  0007                     	;# 
   135  0008                     	;# 
   136  0009                     	;# 
   137  000A                     	;# 
   138  000B                     	;# 
   139  000C                     	;# 
   140  000D                     	;# 
   141  000E                     	;# 
   142  0011                     	;# 
   143  0012                     	;# 
   144  0013                     	;# 
   145  0014                     	;# 
   146  0015                     	;# 
   147  0016                     	;# 
   148  0016                     	;# 
   149  0017                     	;# 
   150  0018                     	;# 
   151  0019                     	;# 
   152  001A                     	;# 
   153  001B                     	;# 
   154  001C                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  008C                     	;# 
   158  008D                     	;# 
   159  008E                     	;# 
   160  0091                     	;# 
   161  0092                     	;# 
   162  0093                     	;# 
   163  0094                     	;# 
   164  0095                     	;# 
   165  0096                     	;# 
   166  0097                     	;# 
   167  0098                     	;# 
   168  0099                     	;# 
   169  009A                     	;# 
   170  009B                     	;# 
   171  009B                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  010C                     	;# 
   176  010D                     	;# 
   177  010E                     	;# 
   178  0111                     	;# 
   179  0112                     	;# 
   180  0113                     	;# 
   181  0114                     	;# 
   182  0115                     	;# 
   183  0116                     	;# 
   184  0117                     	;# 
   185  0118                     	;# 
   186  0119                     	;# 
   187  011A                     	;# 
   188  011B                     	;# 
   189  011D                     	;# 
   190  011E                     	;# 
   191  018C                     	;# 
   192  018D                     	;# 
   193  018E                     	;# 
   194  0191                     	;# 
   195  0191                     	;# 
   196  0192                     	;# 
   197  0193                     	;# 
   198  0193                     	;# 
   199  0193                     	;# 
   200  0194                     	;# 
   201  0195                     	;# 
   202  0196                     	;# 
   203  0199                     	;# 
   204  019A                     	;# 
   205  019B                     	;# 
   206  019B                     	;# 
   207  019C                     	;# 
   208  019D                     	;# 
   209  019E                     	;# 
   210  019F                     	;# 
   211  020C                     	;# 
   212  020D                     	;# 
   213  020E                     	;# 
   214  0211                     	;# 
   215  0211                     	;# 
   216  0212                     	;# 
   217  0212                     	;# 
   218  0213                     	;# 
   219  0213                     	;# 
   220  0214                     	;# 
   221  0214                     	;# 
   222  0215                     	;# 
   223  0215                     	;# 
   224  0215                     	;# 
   225  0216                     	;# 
   226  0216                     	;# 
   227  0217                     	;# 
   228  0217                     	;# 
   229  0219                     	;# 
   230  021A                     	;# 
   231  021B                     	;# 
   232  021C                     	;# 
   233  021D                     	;# 
   234  021E                     	;# 
   235  021F                     	;# 
   236  0291                     	;# 
   237  0291                     	;# 
   238  0292                     	;# 
   239  0293                     	;# 
   240  0294                     	;# 
   241  0295                     	;# 
   242  0295                     	;# 
   243  0296                     	;# 
   244  0298                     	;# 
   245  0298                     	;# 
   246  0299                     	;# 
   247  029A                     	;# 
   248  029B                     	;# 
   249  029C                     	;# 
   250  029D                     	;# 
   251  029E                     	;# 
   252  0311                     	;# 
   253  0311                     	;# 
   254  0312                     	;# 
   255  0313                     	;# 
   256  0318                     	;# 
   257  0318                     	;# 
   258  0319                     	;# 
   259  031A                     	;# 
   260  038C                     	;# 
   261  038D                     	;# 
   262  038E                     	;# 
   263  0391                     	;# 
   264  0392                     	;# 
   265  0393                     	;# 
   266  0394                     	;# 
   267  0395                     	;# 
   268  0396                     	;# 
   269  039A                     	;# 
   270  039C                     	;# 
   271  039D                     	;# 
   272  039E                     	;# 
   273  039F                     	;# 
   274  0415                     	;# 
   275  0416                     	;# 
   276  0417                     	;# 
   277  041C                     	;# 
   278  041D                     	;# 
   279  041E                     	;# 
   280  0FE4                     	;# 
   281  0FE5                     	;# 
   282  0FE6                     	;# 
   283  0FE7                     	;# 
   284  0FE8                     	;# 
   285  0FE9                     	;# 
   286  0FEA                     	;# 
   287  0FEB                     	;# 
   288  0FED                     	;# 
   289  0FEE                     	;# 
   290  0FEF                     	;# 
   291  0000                     	;# 
   292  0001                     	;# 
   293  0002                     	;# 
   294  0003                     	;# 
   295  0004                     	;# 
   296  0005                     	;# 
   297  0006                     	;# 
   298  0007                     	;# 
   299  0008                     	;# 
   300  0009                     	;# 
   301  000A                     	;# 
   302  000B                     	;# 
   303  000C                     	;# 
   304  000D                     	;# 
   305  000E                     	;# 
   306  0011                     	;# 
   307  0012                     	;# 
   308  0013                     	;# 
   309  0014                     	;# 
   310  0015                     	;# 
   311  0016                     	;# 
   312  0016                     	;# 
   313  0017                     	;# 
   314  0018                     	;# 
   315  0019                     	;# 
   316  001A                     	;# 
   317  001B                     	;# 
   318  001C                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  008C                     	;# 
   322  008D                     	;# 
   323  008E                     	;# 
   324  0091                     	;# 
   325  0092                     	;# 
   326  0093                     	;# 
   327  0094                     	;# 
   328  0095                     	;# 
   329  0096                     	;# 
   330  0097                     	;# 
   331  0098                     	;# 
   332  0099                     	;# 
   333  009A                     	;# 
   334  009B                     	;# 
   335  009B                     	;# 
   336  009C                     	;# 
   337  009D                     	;# 
   338  009E                     	;# 
   339  010C                     	;# 
   340  010D                     	;# 
   341  010E                     	;# 
   342  0111                     	;# 
   343  0112                     	;# 
   344  0113                     	;# 
   345  0114                     	;# 
   346  0115                     	;# 
   347  0116                     	;# 
   348  0117                     	;# 
   349  0118                     	;# 
   350  0119                     	;# 
   351  011A                     	;# 
   352  011B                     	;# 
   353  011D                     	;# 
   354  011E                     	;# 
   355  018C                     	;# 
   356  018D                     	;# 
   357  018E                     	;# 
   358  0191                     	;# 
   359  0191                     	;# 
   360  0192                     	;# 
   361  0193                     	;# 
   362  0193                     	;# 
   363  0193                     	;# 
   364  0194                     	;# 
   365  0195                     	;# 
   366  0196                     	;# 
   367  0199                     	;# 
   368  019A                     	;# 
   369  019B                     	;# 
   370  019B                     	;# 
   371  019C                     	;# 
   372  019D                     	;# 
   373  019E                     	;# 
   374  019F                     	;# 
   375  020C                     	;# 
   376  020D                     	;# 
   377  020E                     	;# 
   378  0211                     	;# 
   379  0211                     	;# 
   380  0212                     	;# 
   381  0212                     	;# 
   382  0213                     	;# 
   383  0213                     	;# 
   384  0214                     	;# 
   385  0214                     	;# 
   386  0215                     	;# 
   387  0215                     	;# 
   388  0215                     	;# 
   389  0216                     	;# 
   390  0216                     	;# 
   391  0217                     	;# 
   392  0217                     	;# 
   393  0219                     	;# 
   394  021A                     	;# 
   395  021B                     	;# 
   396  021C                     	;# 
   397  021D                     	;# 
   398  021E                     	;# 
   399  021F                     	;# 
   400  0291                     	;# 
   401  0291                     	;# 
   402  0292                     	;# 
   403  0293                     	;# 
   404  0294                     	;# 
   405  0295                     	;# 
   406  0295                     	;# 
   407  0296                     	;# 
   408  0298                     	;# 
   409  0298                     	;# 
   410  0299                     	;# 
   411  029A                     	;# 
   412  029B                     	;# 
   413  029C                     	;# 
   414  029D                     	;# 
   415  029E                     	;# 
   416  0311                     	;# 
   417  0311                     	;# 
   418  0312                     	;# 
   419  0313                     	;# 
   420  0318                     	;# 
   421  0318                     	;# 
   422  0319                     	;# 
   423  031A                     	;# 
   424  038C                     	;# 
   425  038D                     	;# 
   426  038E                     	;# 
   427  0391                     	;# 
   428  0392                     	;# 
   429  0393                     	;# 
   430  0394                     	;# 
   431  0395                     	;# 
   432  0396                     	;# 
   433  039A                     	;# 
   434  039C                     	;# 
   435  039D                     	;# 
   436  039E                     	;# 
   437  039F                     	;# 
   438  0415                     	;# 
   439  0416                     	;# 
   440  0417                     	;# 
   441  041C                     	;# 
   442  041D                     	;# 
   443  041E                     	;# 
   444  0FE4                     	;# 
   445  0FE5                     	;# 
   446  0FE6                     	;# 
   447  0FE7                     	;# 
   448  0FE8                     	;# 
   449  0FE9                     	;# 
   450  0FEA                     	;# 
   451  0FEB                     	;# 
   452  0FED                     	;# 
   453  0FEE                     	;# 
   454  0FEF                     	;# 
   455  0000                     	;# 
   456  0001                     	;# 
   457  0002                     	;# 
   458  0003                     	;# 
   459  0004                     	;# 
   460  0005                     	;# 
   461  0006                     	;# 
   462  0007                     	;# 
   463  0008                     	;# 
   464  0009                     	;# 
   465  000A                     	;# 
   466  000B                     	;# 
   467  000C                     	;# 
   468  000D                     	;# 
   469  000E                     	;# 
   470  0011                     	;# 
   471  0012                     	;# 
   472  0013                     	;# 
   473  0014                     	;# 
   474  0015                     	;# 
   475  0016                     	;# 
   476  0016                     	;# 
   477  0017                     	;# 
   478  0018                     	;# 
   479  0019                     	;# 
   480  001A                     	;# 
   481  001B                     	;# 
   482  001C                     	;# 
   483  001E                     	;# 
   484  001F                     	;# 
   485  008C                     	;# 
   486  008D                     	;# 
   487  008E                     	;# 
   488  0091                     	;# 
   489  0092                     	;# 
   490  0093                     	;# 
   491  0094                     	;# 
   492  0095                     	;# 
   493  0096                     	;# 
   494  0097                     	;# 
   495  0098                     	;# 
   496  0099                     	;# 
   497  009A                     	;# 
   498  009B                     	;# 
   499  009B                     	;# 
   500  009C                     	;# 
   501  009D                     	;# 
   502  009E                     	;# 
   503  010C                     	;# 
   504  010D                     	;# 
   505  010E                     	;# 
   506  0111                     	;# 
   507  0112                     	;# 
   508  0113                     	;# 
   509  0114                     	;# 
   510  0115                     	;# 
   511  0116                     	;# 
   512  0117                     	;# 
   513  0118                     	;# 
   514  0119                     	;# 
   515  011A                     	;# 
   516  011B                     	;# 
   517  011D                     	;# 
   518  011E                     	;# 
   519  018C                     	;# 
   520  018D                     	;# 
   521  018E                     	;# 
   522  0191                     	;# 
   523  0191                     	;# 
   524  0192                     	;# 
   525  0193                     	;# 
   526  0193                     	;# 
   527  0193                     	;# 
   528  0194                     	;# 
   529  0195                     	;# 
   530  0196                     	;# 
   531  0199                     	;# 
   532  019A                     	;# 
   533  019B                     	;# 
   534  019B                     	;# 
   535  019C                     	;# 
   536  019D                     	;# 
   537  019E                     	;# 
   538  019F                     	;# 
   539  020C                     	;# 
   540  020D                     	;# 
   541  020E                     	;# 
   542  0211                     	;# 
   543  0211                     	;# 
   544  0212                     	;# 
   545  0212                     	;# 
   546  0213                     	;# 
   547  0213                     	;# 
   548  0214                     	;# 
   549  0214                     	;# 
   550  0215                     	;# 
   551  0215                     	;# 
   552  0215                     	;# 
   553  0216                     	;# 
   554  0216                     	;# 
   555  0217                     	;# 
   556  0217                     	;# 
   557  0219                     	;# 
   558  021A                     	;# 
   559  021B                     	;# 
   560  021C                     	;# 
   561  021D                     	;# 
   562  021E                     	;# 
   563  021F                     	;# 
   564  0291                     	;# 
   565  0291                     	;# 
   566  0292                     	;# 
   567  0293                     	;# 
   568  0294                     	;# 
   569  0295                     	;# 
   570  0295                     	;# 
   571  0296                     	;# 
   572  0298                     	;# 
   573  0298                     	;# 
   574  0299                     	;# 
   575  029A                     	;# 
   576  029B                     	;# 
   577  029C                     	;# 
   578  029D                     	;# 
   579  029E                     	;# 
   580  0311                     	;# 
   581  0311                     	;# 
   582  0312                     	;# 
   583  0313                     	;# 
   584  0318                     	;# 
   585  0318                     	;# 
   586  0319                     	;# 
   587  031A                     	;# 
   588  038C                     	;# 
   589  038D                     	;# 
   590  038E                     	;# 
   591  0391                     	;# 
   592  0392                     	;# 
   593  0393                     	;# 
   594  0394                     	;# 
   595  0395                     	;# 
   596  0396                     	;# 
   597  039A                     	;# 
   598  039C                     	;# 
   599  039D                     	;# 
   600  039E                     	;# 
   601  039F                     	;# 
   602  0415                     	;# 
   603  0416                     	;# 
   604  0417                     	;# 
   605  041C                     	;# 
   606  041D                     	;# 
   607  041E                     	;# 
   608  0FE4                     	;# 
   609  0FE5                     	;# 
   610  0FE6                     	;# 
   611  0FE7                     	;# 
   612  0FE8                     	;# 
   613  0FE9                     	;# 
   614  0FEA                     	;# 
   615  0FEB                     	;# 
   616  0FED                     	;# 
   617  0FEE                     	;# 
   618  0FEF                     	;# 
   619  0000                     	;# 
   620  0001                     	;# 
   621  0002                     	;# 
   622  0003                     	;# 
   623  0004                     	;# 
   624  0005                     	;# 
   625  0006                     	;# 
   626  0007                     	;# 
   627  0008                     	;# 
   628  0009                     	;# 
   629  000A                     	;# 
   630  000B                     	;# 
   631  000C                     	;# 
   632  000D                     	;# 
   633  000E                     	;# 
   634  0011                     	;# 
   635  0012                     	;# 
   636  0013                     	;# 
   637  0014                     	;# 
   638  0015                     	;# 
   639  0016                     	;# 
   640  0016                     	;# 
   641  0017                     	;# 
   642  0018                     	;# 
   643  0019                     	;# 
   644  001A                     	;# 
   645  001B                     	;# 
   646  001C                     	;# 
   647  001E                     	;# 
   648  001F                     	;# 
   649  008C                     	;# 
   650  008D                     	;# 
   651  008E                     	;# 
   652  0091                     	;# 
   653  0092                     	;# 
   654  0093                     	;# 
   655  0094                     	;# 
   656  0095                     	;# 
   657  0096                     	;# 
   658  0097                     	;# 
   659  0098                     	;# 
   660  0099                     	;# 
   661  009A                     	;# 
   662  009B                     	;# 
   663  009B                     	;# 
   664  009C                     	;# 
   665  009D                     	;# 
   666  009E                     	;# 
   667  010C                     	;# 
   668  010D                     	;# 
   669  010E                     	;# 
   670  0111                     	;# 
   671  0112                     	;# 
   672  0113                     	;# 
   673  0114                     	;# 
   674  0115                     	;# 
   675  0116                     	;# 
   676  0117                     	;# 
   677  0118                     	;# 
   678  0119                     	;# 
   679  011A                     	;# 
   680  011B                     	;# 
   681  011D                     	;# 
   682  011E                     	;# 
   683  018C                     	;# 
   684  018D                     	;# 
   685  018E                     	;# 
   686  0191                     	;# 
   687  0191                     	;# 
   688  0192                     	;# 
   689  0193                     	;# 
   690  0193                     	;# 
   691  0193                     	;# 
   692  0194                     	;# 
   693  0195                     	;# 
   694  0196                     	;# 
   695  0199                     	;# 
   696  019A                     	;# 
   697  019B                     	;# 
   698  019B                     	;# 
   699  019C                     	;# 
   700  019D                     	;# 
   701  019E                     	;# 
   702  019F                     	;# 
   703  020C                     	;# 
   704  020D                     	;# 
   705  020E                     	;# 
   706  0211                     	;# 
   707  0211                     	;# 
   708  0212                     	;# 
   709  0212                     	;# 
   710  0213                     	;# 
   711  0213                     	;# 
   712  0214                     	;# 
   713  0214                     	;# 
   714  0215                     	;# 
   715  0215                     	;# 
   716  0215                     	;# 
   717  0216                     	;# 
   718  0216                     	;# 
   719  0217                     	;# 
   720  0217                     	;# 
   721  0219                     	;# 
   722  021A                     	;# 
   723  021B                     	;# 
   724  021C                     	;# 
   725  021D                     	;# 
   726  021E                     	;# 
   727  021F                     	;# 
   728  0291                     	;# 
   729  0291                     	;# 
   730  0292                     	;# 
   731  0293                     	;# 
   732  0294                     	;# 
   733  0295                     	;# 
   734  0295                     	;# 
   735  0296                     	;# 
   736  0298                     	;# 
   737  0298                     	;# 
   738  0299                     	;# 
   739  029A                     	;# 
   740  029B                     	;# 
   741  029C                     	;# 
   742  029D                     	;# 
   743  029E                     	;# 
   744  0311                     	;# 
   745  0311                     	;# 
   746  0312                     	;# 
   747  0313                     	;# 
   748  0318                     	;# 
   749  0318                     	;# 
   750  0319                     	;# 
   751  031A                     	;# 
   752  038C                     	;# 
   753  038D                     	;# 
   754  038E                     	;# 
   755  0391                     	;# 
   756  0392                     	;# 
   757  0393                     	;# 
   758  0394                     	;# 
   759  0395                     	;# 
   760  0396                     	;# 
   761  039A                     	;# 
   762  039C                     	;# 
   763  039D                     	;# 
   764  039E                     	;# 
   765  039F                     	;# 
   766  0415                     	;# 
   767  0416                     	;# 
   768  0417                     	;# 
   769  041C                     	;# 
   770  041D                     	;# 
   771  041E                     	;# 
   772  0FE4                     	;# 
   773  0FE5                     	;# 
   774  0FE6                     	;# 
   775  0FE7                     	;# 
   776  0FE8                     	;# 
   777  0FE9                     	;# 
   778  0FEA                     	;# 
   779  0FEB                     	;# 
   780  0FED                     	;# 
   781  0FEE                     	;# 
   782  0FEF                     	;# 
   783  0000                     	;# 
   784  0001                     	;# 
   785  0002                     	;# 
   786  0003                     	;# 
   787  0004                     	;# 
   788  0005                     	;# 
   789  0006                     	;# 
   790  0007                     	;# 
   791  0008                     	;# 
   792  0009                     	;# 
   793  000A                     	;# 
   794  000B                     	;# 
   795  000C                     	;# 
   796  000D                     	;# 
   797  000E                     	;# 
   798  0011                     	;# 
   799  0012                     	;# 
   800  0013                     	;# 
   801  0014                     	;# 
   802  0015                     	;# 
   803  0016                     	;# 
   804  0016                     	;# 
   805  0017                     	;# 
   806  0018                     	;# 
   807  0019                     	;# 
   808  001A                     	;# 
   809  001B                     	;# 
   810  001C                     	;# 
   811  001E                     	;# 
   812  001F                     	;# 
   813  008C                     	;# 
   814  008D                     	;# 
   815  008E                     	;# 
   816  0091                     	;# 
   817  0092                     	;# 
   818  0093                     	;# 
   819  0094                     	;# 
   820  0095                     	;# 
   821  0096                     	;# 
   822  0097                     	;# 
   823  0098                     	;# 
   824  0099                     	;# 
   825  009A                     	;# 
   826  009B                     	;# 
   827  009B                     	;# 
   828  009C                     	;# 
   829  009D                     	;# 
   830  009E                     	;# 
   831  010C                     	;# 
   832  010D                     	;# 
   833  010E                     	;# 
   834  0111                     	;# 
   835  0112                     	;# 
   836  0113                     	;# 
   837  0114                     	;# 
   838  0115                     	;# 
   839  0116                     	;# 
   840  0117                     	;# 
   841  0118                     	;# 
   842  0119                     	;# 
   843  011A                     	;# 
   844  011B                     	;# 
   845  011D                     	;# 
   846  011E                     	;# 
   847  018C                     	;# 
   848  018D                     	;# 
   849  018E                     	;# 
   850  0191                     	;# 
   851  0191                     	;# 
   852  0192                     	;# 
   853  0193                     	;# 
   854  0193                     	;# 
   855  0193                     	;# 
   856  0194                     	;# 
   857  0195                     	;# 
   858  0196                     	;# 
   859  0199                     	;# 
   860  019A                     	;# 
   861  019B                     	;# 
   862  019B                     	;# 
   863  019C                     	;# 
   864  019D                     	;# 
   865  019E                     	;# 
   866  019F                     	;# 
   867  020C                     	;# 
   868  020D                     	;# 
   869  020E                     	;# 
   870  0211                     	;# 
   871  0211                     	;# 
   872  0212                     	;# 
   873  0212                     	;# 
   874  0213                     	;# 
   875  0213                     	;# 
   876  0214                     	;# 
   877  0214                     	;# 
   878  0215                     	;# 
   879  0215                     	;# 
   880  0215                     	;# 
   881  0216                     	;# 
   882  0216                     	;# 
   883  0217                     	;# 
   884  0217                     	;# 
   885  0219                     	;# 
   886  021A                     	;# 
   887  021B                     	;# 
   888  021C                     	;# 
   889  021D                     	;# 
   890  021E                     	;# 
   891  021F                     	;# 
   892  0291                     	;# 
   893  0291                     	;# 
   894  0292                     	;# 
   895  0293                     	;# 
   896  0294                     	;# 
   897  0295                     	;# 
   898  0295                     	;# 
   899  0296                     	;# 
   900  0298                     	;# 
   901  0298                     	;# 
   902  0299                     	;# 
   903  029A                     	;# 
   904  029B                     	;# 
   905  029C                     	;# 
   906  029D                     	;# 
   907  029E                     	;# 
   908  0311                     	;# 
   909  0311                     	;# 
   910  0312                     	;# 
   911  0313                     	;# 
   912  0318                     	;# 
   913  0318                     	;# 
   914  0319                     	;# 
   915  031A                     	;# 
   916  038C                     	;# 
   917  038D                     	;# 
   918  038E                     	;# 
   919  0391                     	;# 
   920  0392                     	;# 
   921  0393                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  039A                     	;# 
   926  039C                     	;# 
   927  039D                     	;# 
   928  039E                     	;# 
   929  039F                     	;# 
   930  0415                     	;# 
   931  0416                     	;# 
   932  0417                     	;# 
   933  041C                     	;# 
   934  041D                     	;# 
   935  041E                     	;# 
   936  0FE4                     	;# 
   937  0FE5                     	;# 
   938  0FE6                     	;# 
   939  0FE7                     	;# 
   940  0FE8                     	;# 
   941  0FE9                     	;# 
   942  0FEA                     	;# 
   943  0FEB                     	;# 
   944  0FED                     	;# 
   945  0FEE                     	;# 
   946  0FEF                     	;# 
   947  0000                     	;# 
   948  0001                     	;# 
   949  0002                     	;# 
   950  0003                     	;# 
   951  0004                     	;# 
   952  0005                     	;# 
   953  0006                     	;# 
   954  0007                     	;# 
   955  0008                     	;# 
   956  0009                     	;# 
   957  000A                     	;# 
   958  000B                     	;# 
   959  000C                     	;# 
   960  000D                     	;# 
   961  000E                     	;# 
   962  0011                     	;# 
   963  0012                     	;# 
   964  0013                     	;# 
   965  0014                     	;# 
   966  0015                     	;# 
   967  0016                     	;# 
   968  0016                     	;# 
   969  0017                     	;# 
   970  0018                     	;# 
   971  0019                     	;# 
   972  001A                     	;# 
   973  001B                     	;# 
   974  001C                     	;# 
   975  001E                     	;# 
   976  001F                     	;# 
   977  008C                     	;# 
   978  008D                     	;# 
   979  008E                     	;# 
   980  0091                     	;# 
   981  0092                     	;# 
   982  0093                     	;# 
   983  0094                     	;# 
   984  0095                     	;# 
   985  0096                     	;# 
   986  0097                     	;# 
   987  0098                     	;# 
   988  0099                     	;# 
   989  009A                     	;# 
   990  009B                     	;# 
   991  009B                     	;# 
   992  009C                     	;# 
   993  009D                     	;# 
   994  009E                     	;# 
   995  010C                     	;# 
   996  010D                     	;# 
   997  010E                     	;# 
   998  0111                     	;# 
   999  0112                     	;# 
  1000  0113                     	;# 
  1001  0114                     	;# 
  1002  0115                     	;# 
  1003  0116                     	;# 
  1004  0117                     	;# 
  1005  0118                     	;# 
  1006  0119                     	;# 
  1007  011A                     	;# 
  1008  011B                     	;# 
  1009  011D                     	;# 
  1010  011E                     	;# 
  1011  018C                     	;# 
  1012  018D                     	;# 
  1013  018E                     	;# 
  1014  0191                     	;# 
  1015  0191                     	;# 
  1016  0192                     	;# 
  1017  0193                     	;# 
  1018  0193                     	;# 
  1019  0193                     	;# 
  1020  0194                     	;# 
  1021  0195                     	;# 
  1022  0196                     	;# 
  1023  0199                     	;# 
  1024  019A                     	;# 
  1025  019B                     	;# 
  1026  019B                     	;# 
  1027  019C                     	;# 
  1028  019D                     	;# 
  1029  019E                     	;# 
  1030  019F                     	;# 
  1031  020C                     	;# 
  1032  020D                     	;# 
  1033  020E                     	;# 
  1034  0211                     	;# 
  1035  0211                     	;# 
  1036  0212                     	;# 
  1037  0212                     	;# 
  1038  0213                     	;# 
  1039  0213                     	;# 
  1040  0214                     	;# 
  1041  0214                     	;# 
  1042  0215                     	;# 
  1043  0215                     	;# 
  1044  0215                     	;# 
  1045  0216                     	;# 
  1046  0216                     	;# 
  1047  0217                     	;# 
  1048  0217                     	;# 
  1049  0219                     	;# 
  1050  021A                     	;# 
  1051  021B                     	;# 
  1052  021C                     	;# 
  1053  021D                     	;# 
  1054  021E                     	;# 
  1055  021F                     	;# 
  1056  0291                     	;# 
  1057  0291                     	;# 
  1058  0292                     	;# 
  1059  0293                     	;# 
  1060  0294                     	;# 
  1061  0295                     	;# 
  1062  0295                     	;# 
  1063  0296                     	;# 
  1064  0298                     	;# 
  1065  0298                     	;# 
  1066  0299                     	;# 
  1067  029A                     	;# 
  1068  029B                     	;# 
  1069  029C                     	;# 
  1070  029D                     	;# 
  1071  029E                     	;# 
  1072  0311                     	;# 
  1073  0311                     	;# 
  1074  0312                     	;# 
  1075  0313                     	;# 
  1076  0318                     	;# 
  1077  0318                     	;# 
  1078  0319                     	;# 
  1079  031A                     	;# 
  1080  038C                     	;# 
  1081  038D                     	;# 
  1082  038E                     	;# 
  1083  0391                     	;# 
  1084  0392                     	;# 
  1085  0393                     	;# 
  1086  0394                     	;# 
  1087  0395                     	;# 
  1088  0396                     	;# 
  1089  039A                     	;# 
  1090  039C                     	;# 
  1091  039D                     	;# 
  1092  039E                     	;# 
  1093  039F                     	;# 
  1094  0415                     	;# 
  1095  0416                     	;# 
  1096  0417                     	;# 
  1097  041C                     	;# 
  1098  041D                     	;# 
  1099  041E                     	;# 
  1100  0FE4                     	;# 
  1101  0FE5                     	;# 
  1102  0FE6                     	;# 
  1103  0FE7                     	;# 
  1104  0FE8                     	;# 
  1105  0FE9                     	;# 
  1106  0FEA                     	;# 
  1107  0FEB                     	;# 
  1108  0FED                     	;# 
  1109  0FEE                     	;# 
  1110  0FEF                     	;# 
  1111  0000                     	;# 
  1112  0001                     	;# 
  1113  0002                     	;# 
  1114  0003                     	;# 
  1115  0004                     	;# 
  1116  0005                     	;# 
  1117  0006                     	;# 
  1118  0007                     	;# 
  1119  0008                     	;# 
  1120  0009                     	;# 
  1121  000A                     	;# 
  1122  000B                     	;# 
  1123  000C                     	;# 
  1124  000D                     	;# 
  1125  000E                     	;# 
  1126  0011                     	;# 
  1127  0012                     	;# 
  1128  0013                     	;# 
  1129  0014                     	;# 
  1130  0015                     	;# 
  1131  0016                     	;# 
  1132  0016                     	;# 
  1133  0017                     	;# 
  1134  0018                     	;# 
  1135  0019                     	;# 
  1136  001A                     	;# 
  1137  001B                     	;# 
  1138  001C                     	;# 
  1139  001E                     	;# 
  1140  001F                     	;# 
  1141  008C                     	;# 
  1142  008D                     	;# 
  1143  008E                     	;# 
  1144  0091                     	;# 
  1145  0092                     	;# 
  1146  0093                     	;# 
  1147  0094                     	;# 
  1148  0095                     	;# 
  1149  0096                     	;# 
  1150  0097                     	;# 
  1151  0098                     	;# 
  1152  0099                     	;# 
  1153  009A                     	;# 
  1154  009B                     	;# 
  1155  009B                     	;# 
  1156  009C                     	;# 
  1157  009D                     	;# 
  1158  009E                     	;# 
  1159  010C                     	;# 
  1160  010D                     	;# 
  1161  010E                     	;# 
  1162  0111                     	;# 
  1163  0112                     	;# 
  1164  0113                     	;# 
  1165  0114                     	;# 
  1166  0115                     	;# 
  1167  0116                     	;# 
  1168  0117                     	;# 
  1169  0118                     	;# 
  1170  0119                     	;# 
  1171  011A                     	;# 
  1172  011B                     	;# 
  1173  011D                     	;# 
  1174  011E                     	;# 
  1175  018C                     	;# 
  1176  018D                     	;# 
  1177  018E                     	;# 
  1178  0191                     	;# 
  1179  0191                     	;# 
  1180  0192                     	;# 
  1181  0193                     	;# 
  1182  0193                     	;# 
  1183  0193                     	;# 
  1184  0194                     	;# 
  1185  0195                     	;# 
  1186  0196                     	;# 
  1187  0199                     	;# 
  1188  019A                     	;# 
  1189  019B                     	;# 
  1190  019B                     	;# 
  1191  019C                     	;# 
  1192  019D                     	;# 
  1193  019E                     	;# 
  1194  019F                     	;# 
  1195  020C                     	;# 
  1196  020D                     	;# 
  1197  020E                     	;# 
  1198  0211                     	;# 
  1199  0211                     	;# 
  1200  0212                     	;# 
  1201  0212                     	;# 
  1202  0213                     	;# 
  1203  0213                     	;# 
  1204  0214                     	;# 
  1205  0214                     	;# 
  1206  0215                     	;# 
  1207  0215                     	;# 
  1208  0215                     	;# 
  1209  0216                     	;# 
  1210  0216                     	;# 
  1211  0217                     	;# 
  1212  0217                     	;# 
  1213  0219                     	;# 
  1214  021A                     	;# 
  1215  021B                     	;# 
  1216  021C                     	;# 
  1217  021D                     	;# 
  1218  021E                     	;# 
  1219  021F                     	;# 
  1220  0291                     	;# 
  1221  0291                     	;# 
  1222  0292                     	;# 
  1223  0293                     	;# 
  1224  0294                     	;# 
  1225  0295                     	;# 
  1226  0295                     	;# 
  1227  0296                     	;# 
  1228  0298                     	;# 
  1229  0298                     	;# 
  1230  0299                     	;# 
  1231  029A                     	;# 
  1232  029B                     	;# 
  1233  029C                     	;# 
  1234  029D                     	;# 
  1235  029E                     	;# 
  1236  0311                     	;# 
  1237  0311                     	;# 
  1238  0312                     	;# 
  1239  0313                     	;# 
  1240  0318                     	;# 
  1241  0318                     	;# 
  1242  0319                     	;# 
  1243  031A                     	;# 
  1244  038C                     	;# 
  1245  038D                     	;# 
  1246  038E                     	;# 
  1247  0391                     	;# 
  1248  0392                     	;# 
  1249  0393                     	;# 
  1250  0394                     	;# 
  1251  0395                     	;# 
  1252  0396                     	;# 
  1253  039A                     	;# 
  1254  039C                     	;# 
  1255  039D                     	;# 
  1256  039E                     	;# 
  1257  039F                     	;# 
  1258  0415                     	;# 
  1259  0416                     	;# 
  1260  0417                     	;# 
  1261  041C                     	;# 
  1262  041D                     	;# 
  1263  041E                     	;# 
  1264  0FE4                     	;# 
  1265  0FE5                     	;# 
  1266  0FE6                     	;# 
  1267  0FE7                     	;# 
  1268  0FE8                     	;# 
  1269  0FE9                     	;# 
  1270  0FEA                     	;# 
  1271  0FEB                     	;# 
  1272  0FED                     	;# 
  1273  0FEE                     	;# 
  1274  0FEF                     	;# 
  1275  0000                     	;# 
  1276  0001                     	;# 
  1277  0002                     	;# 
  1278  0003                     	;# 
  1279  0004                     	;# 
  1280  0005                     	;# 
  1281  0006                     	;# 
  1282  0007                     	;# 
  1283  0008                     	;# 
  1284  0009                     	;# 
  1285  000A                     	;# 
  1286  000B                     	;# 
  1287  000C                     	;# 
  1288  000D                     	;# 
  1289  000E                     	;# 
  1290  0011                     	;# 
  1291  0012                     	;# 
  1292  0013                     	;# 
  1293  0014                     	;# 
  1294  0015                     	;# 
  1295  0016                     	;# 
  1296  0016                     	;# 
  1297  0017                     	;# 
  1298  0018                     	;# 
  1299  0019                     	;# 
  1300  001A                     	;# 
  1301  001B                     	;# 
  1302  001C                     	;# 
  1303  001E                     	;# 
  1304  001F                     	;# 
  1305  008C                     	;# 
  1306  008D                     	;# 
  1307  008E                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0093                     	;# 
  1311  0094                     	;# 
  1312  0095                     	;# 
  1313  0096                     	;# 
  1314  0097                     	;# 
  1315  0098                     	;# 
  1316  0099                     	;# 
  1317  009A                     	;# 
  1318  009B                     	;# 
  1319  009B                     	;# 
  1320  009C                     	;# 
  1321  009D                     	;# 
  1322  009E                     	;# 
  1323  010C                     	;# 
  1324  010D                     	;# 
  1325  010E                     	;# 
  1326  0111                     	;# 
  1327  0112                     	;# 
  1328  0113                     	;# 
  1329  0114                     	;# 
  1330  0115                     	;# 
  1331  0116                     	;# 
  1332  0117                     	;# 
  1333  0118                     	;# 
  1334  0119                     	;# 
  1335  011A                     	;# 
  1336  011B                     	;# 
  1337  011D                     	;# 
  1338  011E                     	;# 
  1339  018C                     	;# 
  1340  018D                     	;# 
  1341  018E                     	;# 
  1342  0191                     	;# 
  1343  0191                     	;# 
  1344  0192                     	;# 
  1345  0193                     	;# 
  1346  0193                     	;# 
  1347  0193                     	;# 
  1348  0194                     	;# 
  1349  0195                     	;# 
  1350  0196                     	;# 
  1351  0199                     	;# 
  1352  019A                     	;# 
  1353  019B                     	;# 
  1354  019B                     	;# 
  1355  019C                     	;# 
  1356  019D                     	;# 
  1357  019E                     	;# 
  1358  019F                     	;# 
  1359  020C                     	;# 
  1360  020D                     	;# 
  1361  020E                     	;# 
  1362  0211                     	;# 
  1363  0211                     	;# 
  1364  0212                     	;# 
  1365  0212                     	;# 
  1366  0213                     	;# 
  1367  0213                     	;# 
  1368  0214                     	;# 
  1369  0214                     	;# 
  1370  0215                     	;# 
  1371  0215                     	;# 
  1372  0215                     	;# 
  1373  0216                     	;# 
  1374  0216                     	;# 
  1375  0217                     	;# 
  1376  0217                     	;# 
  1377  0219                     	;# 
  1378  021A                     	;# 
  1379  021B                     	;# 
  1380  021C                     	;# 
  1381  021D                     	;# 
  1382  021E                     	;# 
  1383  021F                     	;# 
  1384  0291                     	;# 
  1385  0291                     	;# 
  1386  0292                     	;# 
  1387  0293                     	;# 
  1388  0294                     	;# 
  1389  0295                     	;# 
  1390  0295                     	;# 
  1391  0296                     	;# 
  1392  0298                     	;# 
  1393  0298                     	;# 
  1394  0299                     	;# 
  1395  029A                     	;# 
  1396  029B                     	;# 
  1397  029C                     	;# 
  1398  029D                     	;# 
  1399  029E                     	;# 
  1400  0311                     	;# 
  1401  0311                     	;# 
  1402  0312                     	;# 
  1403  0313                     	;# 
  1404  0318                     	;# 
  1405  0318                     	;# 
  1406  0319                     	;# 
  1407  031A                     	;# 
  1408  038C                     	;# 
  1409  038D                     	;# 
  1410  038E                     	;# 
  1411  0391                     	;# 
  1412  0392                     	;# 
  1413  0393                     	;# 
  1414  0394                     	;# 
  1415  0395                     	;# 
  1416  0396                     	;# 
  1417  039A                     	;# 
  1418  039C                     	;# 
  1419  039D                     	;# 
  1420  039E                     	;# 
  1421  039F                     	;# 
  1422  0415                     	;# 
  1423  0416                     	;# 
  1424  0417                     	;# 
  1425  041C                     	;# 
  1426  041D                     	;# 
  1427  041E                     	;# 
  1428  0FE4                     	;# 
  1429  0FE5                     	;# 
  1430  0FE6                     	;# 
  1431  0FE7                     	;# 
  1432  0FE8                     	;# 
  1433  0FE9                     	;# 
  1434  0FEA                     	;# 
  1435  0FEB                     	;# 
  1436  0FED                     	;# 
  1437  0FEE                     	;# 
  1438  0FEF                     	;# 
  1439  0000                     	;# 
  1440  0001                     	;# 
  1441  0002                     	;# 
  1442  0003                     	;# 
  1443  0004                     	;# 
  1444  0005                     	;# 
  1445  0006                     	;# 
  1446  0007                     	;# 
  1447  0008                     	;# 
  1448  0009                     	;# 
  1449  000A                     	;# 
  1450  000B                     	;# 
  1451  000C                     	;# 
  1452  000D                     	;# 
  1453  000E                     	;# 
  1454  0011                     	;# 
  1455  0012                     	;# 
  1456  0013                     	;# 
  1457  0014                     	;# 
  1458  0015                     	;# 
  1459  0016                     	;# 
  1460  0016                     	;# 
  1461  0017                     	;# 
  1462  0018                     	;# 
  1463  0019                     	;# 
  1464  001A                     	;# 
  1465  001B                     	;# 
  1466  001C                     	;# 
  1467  001E                     	;# 
  1468  001F                     	;# 
  1469  008C                     	;# 
  1470  008D                     	;# 
  1471  008E                     	;# 
  1472  0091                     	;# 
  1473  0092                     	;# 
  1474  0093                     	;# 
  1475  0094                     	;# 
  1476  0095                     	;# 
  1477  0096                     	;# 
  1478  0097                     	;# 
  1479  0098                     	;# 
  1480  0099                     	;# 
  1481  009A                     	;# 
  1482  009B                     	;# 
  1483  009B                     	;# 
  1484  009C                     	;# 
  1485  009D                     	;# 
  1486  009E                     	;# 
  1487  010C                     	;# 
  1488  010D                     	;# 
  1489  010E                     	;# 
  1490  0111                     	;# 
  1491  0112                     	;# 
  1492  0113                     	;# 
  1493  0114                     	;# 
  1494  0115                     	;# 
  1495  0116                     	;# 
  1496  0117                     	;# 
  1497  0118                     	;# 
  1498  0119                     	;# 
  1499  011A                     	;# 
  1500  011B                     	;# 
  1501  011D                     	;# 
  1502  011E                     	;# 
  1503  018C                     	;# 
  1504  018D                     	;# 
  1505  018E                     	;# 
  1506  0191                     	;# 
  1507  0191                     	;# 
  1508  0192                     	;# 
  1509  0193                     	;# 
  1510  0193                     	;# 
  1511  0193                     	;# 
  1512  0194                     	;# 
  1513  0195                     	;# 
  1514  0196                     	;# 
  1515  0199                     	;# 
  1516  019A                     	;# 
  1517  019B                     	;# 
  1518  019B                     	;# 
  1519  019C                     	;# 
  1520  019D                     	;# 
  1521  019E                     	;# 
  1522  019F                     	;# 
  1523  020C                     	;# 
  1524  020D                     	;# 
  1525  020E                     	;# 
  1526  0211                     	;# 
  1527  0211                     	;# 
  1528  0212                     	;# 
  1529  0212                     	;# 
  1530  0213                     	;# 
  1531  0213                     	;# 
  1532  0214                     	;# 
  1533  0214                     	;# 
  1534  0215                     	;# 
  1535  0215                     	;# 
  1536  0215                     	;# 
  1537  0216                     	;# 
  1538  0216                     	;# 
  1539  0217                     	;# 
  1540  0217                     	;# 
  1541  0219                     	;# 
  1542  021A                     	;# 
  1543  021B                     	;# 
  1544  021C                     	;# 
  1545  021D                     	;# 
  1546  021E                     	;# 
  1547  021F                     	;# 
  1548  0291                     	;# 
  1549  0291                     	;# 
  1550  0292                     	;# 
  1551  0293                     	;# 
  1552  0294                     	;# 
  1553  0295                     	;# 
  1554  0295                     	;# 
  1555  0296                     	;# 
  1556  0298                     	;# 
  1557  0298                     	;# 
  1558  0299                     	;# 
  1559  029A                     	;# 
  1560  029B                     	;# 
  1561  029C                     	;# 
  1562  029D                     	;# 
  1563  029E                     	;# 
  1564  0311                     	;# 
  1565  0311                     	;# 
  1566  0312                     	;# 
  1567  0313                     	;# 
  1568  0318                     	;# 
  1569  0318                     	;# 
  1570  0319                     	;# 
  1571  031A                     	;# 
  1572  038C                     	;# 
  1573  038D                     	;# 
  1574  038E                     	;# 
  1575  0391                     	;# 
  1576  0392                     	;# 
  1577  0393                     	;# 
  1578  0394                     	;# 
  1579  0395                     	;# 
  1580  0396                     	;# 
  1581  039A                     	;# 
  1582  039C                     	;# 
  1583  039D                     	;# 
  1584  039E                     	;# 
  1585  039F                     	;# 
  1586  0415                     	;# 
  1587  0416                     	;# 
  1588  0417                     	;# 
  1589  041C                     	;# 
  1590  041D                     	;# 
  1591  041E                     	;# 
  1592  0FE4                     	;# 
  1593  0FE5                     	;# 
  1594  0FE6                     	;# 
  1595  0FE7                     	;# 
  1596  0FE8                     	;# 
  1597  0FE9                     	;# 
  1598  0FEA                     	;# 
  1599  0FEB                     	;# 
  1600  0FED                     	;# 
  1601  0FEE                     	;# 
  1602  0FEF                     	;# 
  1603  0000                     	;# 
  1604  0001                     	;# 
  1605  0002                     	;# 
  1606  0003                     	;# 
  1607  0004                     	;# 
  1608  0005                     	;# 
  1609  0006                     	;# 
  1610  0007                     	;# 
  1611  0008                     	;# 
  1612  0009                     	;# 
  1613  000A                     	;# 
  1614  000B                     	;# 
  1615  000C                     	;# 
  1616  000D                     	;# 
  1617  000E                     	;# 
  1618  0011                     	;# 
  1619  0012                     	;# 
  1620  0013                     	;# 
  1621  0014                     	;# 
  1622  0015                     	;# 
  1623  0016                     	;# 
  1624  0016                     	;# 
  1625  0017                     	;# 
  1626  0018                     	;# 
  1627  0019                     	;# 
  1628  001A                     	;# 
  1629  001B                     	;# 
  1630  001C                     	;# 
  1631  001E                     	;# 
  1632  001F                     	;# 
  1633  008C                     	;# 
  1634  008D                     	;# 
  1635  008E                     	;# 
  1636  0091                     	;# 
  1637  0092                     	;# 
  1638  0093                     	;# 
  1639  0094                     	;# 
  1640  0095                     	;# 
  1641  0096                     	;# 
  1642  0097                     	;# 
  1643  0098                     	;# 
  1644  0099                     	;# 
  1645  009A                     	;# 
  1646  009B                     	;# 
  1647  009B                     	;# 
  1648  009C                     	;# 
  1649  009D                     	;# 
  1650  009E                     	;# 
  1651  010C                     	;# 
  1652  010D                     	;# 
  1653  010E                     	;# 
  1654  0111                     	;# 
  1655  0112                     	;# 
  1656  0113                     	;# 
  1657  0114                     	;# 
  1658  0115                     	;# 
  1659  0116                     	;# 
  1660  0117                     	;# 
  1661  0118                     	;# 
  1662  0119                     	;# 
  1663  011A                     	;# 
  1664  011B                     	;# 
  1665  011D                     	;# 
  1666  011E                     	;# 
  1667  018C                     	;# 
  1668  018D                     	;# 
  1669  018E                     	;# 
  1670  0191                     	;# 
  1671  0191                     	;# 
  1672  0192                     	;# 
  1673  0193                     	;# 
  1674  0193                     	;# 
  1675  0193                     	;# 
  1676  0194                     	;# 
  1677  0195                     	;# 
  1678  0196                     	;# 
  1679  0199                     	;# 
  1680  019A                     	;# 
  1681  019B                     	;# 
  1682  019B                     	;# 
  1683  019C                     	;# 
  1684  019D                     	;# 
  1685  019E                     	;# 
  1686  019F                     	;# 
  1687  020C                     	;# 
  1688  020D                     	;# 
  1689  020E                     	;# 
  1690  0211                     	;# 
  1691  0211                     	;# 
  1692  0212                     	;# 
  1693  0212                     	;# 
  1694  0213                     	;# 
  1695  0213                     	;# 
  1696  0214                     	;# 
  1697  0214                     	;# 
  1698  0215                     	;# 
  1699  0215                     	;# 
  1700  0215                     	;# 
  1701  0216                     	;# 
  1702  0216                     	;# 
  1703  0217                     	;# 
  1704  0217                     	;# 
  1705  0219                     	;# 
  1706  021A                     	;# 
  1707  021B                     	;# 
  1708  021C                     	;# 
  1709  021D                     	;# 
  1710  021E                     	;# 
  1711  021F                     	;# 
  1712  0291                     	;# 
  1713  0291                     	;# 
  1714  0292                     	;# 
  1715  0293                     	;# 
  1716  0294                     	;# 
  1717  0295                     	;# 
  1718  0295                     	;# 
  1719  0296                     	;# 
  1720  0298                     	;# 
  1721  0298                     	;# 
  1722  0299                     	;# 
  1723  029A                     	;# 
  1724  029B                     	;# 
  1725  029C                     	;# 
  1726  029D                     	;# 
  1727  029E                     	;# 
  1728  0311                     	;# 
  1729  0311                     	;# 
  1730  0312                     	;# 
  1731  0313                     	;# 
  1732  0318                     	;# 
  1733  0318                     	;# 
  1734  0319                     	;# 
  1735  031A                     	;# 
  1736  038C                     	;# 
  1737  038D                     	;# 
  1738  038E                     	;# 
  1739  0391                     	;# 
  1740  0392                     	;# 
  1741  0393                     	;# 
  1742  0394                     	;# 
  1743  0395                     	;# 
  1744  0396                     	;# 
  1745  039A                     	;# 
  1746  039C                     	;# 
  1747  039D                     	;# 
  1748  039E                     	;# 
  1749  039F                     	;# 
  1750  0415                     	;# 
  1751  0416                     	;# 
  1752  0417                     	;# 
  1753  041C                     	;# 
  1754  041D                     	;# 
  1755  041E                     	;# 
  1756  0FE4                     	;# 
  1757  0FE5                     	;# 
  1758  0FE6                     	;# 
  1759  0FE7                     	;# 
  1760  0FE8                     	;# 
  1761  0FE9                     	;# 
  1762  0FEA                     	;# 
  1763  0FEB                     	;# 
  1764  0FED                     	;# 
  1765  0FEE                     	;# 
  1766  0FEF                     	;# 
  1767  0000                     	;# 
  1768  0001                     	;# 
  1769  0002                     	;# 
  1770  0003                     	;# 
  1771  0004                     	;# 
  1772  0005                     	;# 
  1773  0006                     	;# 
  1774  0007                     	;# 
  1775  0008                     	;# 
  1776  0009                     	;# 
  1777  000A                     	;# 
  1778  000B                     	;# 
  1779  000C                     	;# 
  1780  000D                     	;# 
  1781  000E                     	;# 
  1782  0011                     	;# 
  1783  0012                     	;# 
  1784  0013                     	;# 
  1785  0014                     	;# 
  1786  0015                     	;# 
  1787  0016                     	;# 
  1788  0016                     	;# 
  1789  0017                     	;# 
  1790  0018                     	;# 
  1791  0019                     	;# 
  1792  001A                     	;# 
  1793  001B                     	;# 
  1794  001C                     	;# 
  1795  001E                     	;# 
  1796  001F                     	;# 
  1797  008C                     	;# 
  1798  008D                     	;# 
  1799  008E                     	;# 
  1800  0091                     	;# 
  1801  0092                     	;# 
  1802  0093                     	;# 
  1803  0094                     	;# 
  1804  0095                     	;# 
  1805  0096                     	;# 
  1806  0097                     	;# 
  1807  0098                     	;# 
  1808  0099                     	;# 
  1809  009A                     	;# 
  1810  009B                     	;# 
  1811  009B                     	;# 
  1812  009C                     	;# 
  1813  009D                     	;# 
  1814  009E                     	;# 
  1815  010C                     	;# 
  1816  010D                     	;# 
  1817  010E                     	;# 
  1818  0111                     	;# 
  1819  0112                     	;# 
  1820  0113                     	;# 
  1821  0114                     	;# 
  1822  0115                     	;# 
  1823  0116                     	;# 
  1824  0117                     	;# 
  1825  0118                     	;# 
  1826  0119                     	;# 
  1827  011A                     	;# 
  1828  011B                     	;# 
  1829  011D                     	;# 
  1830  011E                     	;# 
  1831  018C                     	;# 
  1832  018D                     	;# 
  1833  018E                     	;# 
  1834  0191                     	;# 
  1835  0191                     	;# 
  1836  0192                     	;# 
  1837  0193                     	;# 
  1838  0193                     	;# 
  1839  0193                     	;# 
  1840  0194                     	;# 
  1841  0195                     	;# 
  1842  0196                     	;# 
  1843  0199                     	;# 
  1844  019A                     	;# 
  1845  019B                     	;# 
  1846  019B                     	;# 
  1847  019C                     	;# 
  1848  019D                     	;# 
  1849  019E                     	;# 
  1850  019F                     	;# 
  1851  020C                     	;# 
  1852  020D                     	;# 
  1853  020E                     	;# 
  1854  0211                     	;# 
  1855  0211                     	;# 
  1856  0212                     	;# 
  1857  0212                     	;# 
  1858  0213                     	;# 
  1859  0213                     	;# 
  1860  0214                     	;# 
  1861  0214                     	;# 
  1862  0215                     	;# 
  1863  0215                     	;# 
  1864  0215                     	;# 
  1865  0216                     	;# 
  1866  0216                     	;# 
  1867  0217                     	;# 
  1868  0217                     	;# 
  1869  0219                     	;# 
  1870  021A                     	;# 
  1871  021B                     	;# 
  1872  021C                     	;# 
  1873  021D                     	;# 
  1874  021E                     	;# 
  1875  021F                     	;# 
  1876  0291                     	;# 
  1877  0291                     	;# 
  1878  0292                     	;# 
  1879  0293                     	;# 
  1880  0294                     	;# 
  1881  0295                     	;# 
  1882  0295                     	;# 
  1883  0296                     	;# 
  1884  0298                     	;# 
  1885  0298                     	;# 
  1886  0299                     	;# 
  1887  029A                     	;# 
  1888  029B                     	;# 
  1889  029C                     	;# 
  1890  029D                     	;# 
  1891  029E                     	;# 
  1892  0311                     	;# 
  1893  0311                     	;# 
  1894  0312                     	;# 
  1895  0313                     	;# 
  1896  0318                     	;# 
  1897  0318                     	;# 
  1898  0319                     	;# 
  1899  031A                     	;# 
  1900  038C                     	;# 
  1901  038D                     	;# 
  1902  038E                     	;# 
  1903  0391                     	;# 
  1904  0392                     	;# 
  1905  0393                     	;# 
  1906  0394                     	;# 
  1907  0395                     	;# 
  1908  0396                     	;# 
  1909  039A                     	;# 
  1910  039C                     	;# 
  1911  039D                     	;# 
  1912  039E                     	;# 
  1913  039F                     	;# 
  1914  0415                     	;# 
  1915  0416                     	;# 
  1916  0417                     	;# 
  1917  041C                     	;# 
  1918  041D                     	;# 
  1919  041E                     	;# 
  1920  0FE4                     	;# 
  1921  0FE5                     	;# 
  1922  0FE6                     	;# 
  1923  0FE7                     	;# 
  1924  0FE8                     	;# 
  1925  0FE9                     	;# 
  1926  0FEA                     	;# 
  1927  0FEB                     	;# 
  1928  0FED                     	;# 
  1929  0FEE                     	;# 
  1930  0FEF                     	;# 
  1931                           
  1932                           	psect	idataCOMMON
  1933  0003                     __pidataCOMMON:	
  1934                           
  1935                           ;initializer for _I2C_slaveWriteData
  1936  0003  3455               	retlw	85
  1937                           
  1938                           	psect	idataBANK0
  1939  1754                     __pidataBANK0:	
  1940                           
  1941                           ;initializer for _tmr_scaler
  1942  1754  3401               	retlw	1
  1943                           
  1944                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1945  1755  3401               	retlw	1
  1946                           
  1947                           ;initializer for _type_no_data
  1948  1756  3406               	retlw	6
  1949                           
  1950                           	psect	stringtext
  1951  0727                     __pstringtext:	
  1952  0727                     _dpowers:	
  1953  0727  3401               	retlw	1
  1954  0728  3400               	retlw	0
  1955  0729  340A               	retlw	10
  1956  072A  3400               	retlw	0
  1957  072B  3464               	retlw	100
  1958  072C  3400               	retlw	0
  1959  072D  34E8               	retlw	232
  1960  072E  3403               	retlw	3
  1961  072F  3410               	retlw	16
  1962  0730  3427               	retlw	39
  1963  0731                     __end_of_dpowers:	
  1964  0731                     STR_16:	
  1965  0731  3441               	retlw	65	;'A'
  1966  0732  3451               	retlw	81	;'Q'
  1967  0733  344D               	retlw	77	;'M'
  1968  0734  3431               	retlw	49	;'1'
  1969  0735  3436               	retlw	54	;'6'
  1970  0736  3430               	retlw	48	;'0'
  1971  0737  3432               	retlw	50	;'2'
  1972  0738  3458               	retlw	88	;'X'
  1973  0739  3441               	retlw	65	;'A'
  1974  073A  342D               	retlw	45	;'-'
  1975  073B  3452               	retlw	82	;'R'
  1976  073C  344E               	retlw	78	;'N'
  1977  073D  342D               	retlw	45	;'-'
  1978  073E  3447               	retlw	71	;'G'
  1979  073F  3442               	retlw	66	;'B'
  1980  0740  3457               	retlw	87	;'W'
  1981  0741  3400               	retlw	0
  1982  0742                     STR_51:	
  1983  0742  3449               	retlw	73	;'I'
  1984  0743  344C               	retlw	76	;'L'
  1985  0744  344C               	retlw	76	;'L'
  1986  0745  3445               	retlw	69	;'E'
  1987  0746  3447               	retlw	71	;'G'
  1988  0747  3441               	retlw	65	;'A'
  1989  0748  344C               	retlw	76	;'L'
  1990  0749  345F               	retlw	95	;'_'
  1991  074A  3454               	retlw	84	;'T'
  1992  074B  3459               	retlw	89	;'Y'
  1993  074C  3450               	retlw	80	;'P'
  1994  074D  3445               	retlw	69	;'E'
  1995  074E  340A               	retlw	10
  1996  074F  3400               	retlw	0
  1997  0750                     STR_31:	
  1998  0750  3424               	retlw	36	;'$'
  1999  0751  343A               	retlw	58	;':'
  2000  0752  3452               	retlw	82	;'R'
  2001  0753  3444               	retlw	68	;'D'
  2002  0754  3441               	retlw	65	;'A'
  2003  0755  343A               	retlw	58	;':'
  2004  0756  3425               	retlw	37	;'%'
  2005  0757  3464               	retlw	100	;'d'
  2006  0758  340A               	retlw	10
  2007  0759  3400               	retlw	0
  2008  075A                     STR_28:	
  2009  075A  3424               	retlw	36	;'$'
  2010  075B  343A               	retlw	58	;':'
  2011  075C  3447               	retlw	71	;'G'
  2012  075D  3445               	retlw	69	;'E'
  2013  075E  3454               	retlw	84	;'T'
  2014  075F  343A               	retlw	58	;':'
  2015  0760  3425               	retlw	37	;'%'
  2016  0761  3464               	retlw	100	;'d'
  2017  0762  340A               	retlw	10
  2018  0763  3400               	retlw	0
  2019  0764                     STR_49:	
  2020  0764  342D               	retlw	45	;'-'
  2021  0765  3425               	retlw	37	;'%'
  2022  0766  3464               	retlw	100	;'d'
  2023  0767  342E               	retlw	46	;'.'
  2024  0768  3425               	retlw	37	;'%'
  2025  0769  3430               	retlw	48	;'0'
  2026  076A  3432               	retlw	50	;'2'
  2027  076B  3464               	retlw	100	;'d'
  2028  076C  340A               	retlw	10
  2029  076D  3400               	retlw	0
  2030  076E                     STR_20:	
  2031  076E  3424               	retlw	36	;'$'
  2032  076F  343A               	retlw	58	;':'
  2033  0770  3457               	retlw	87	;'W'
  2034  0771  3448               	retlw	72	;'H'
  2035  0772  344F               	retlw	79	;'O'
  2036  0773  343A               	retlw	58	;':'
  2037  0774  3425               	retlw	37	;'%'
  2038  0775  3473               	retlw	115	;'s'
  2039  0776  340A               	retlw	10
  2040  0777  3400               	retlw	0
  2041  0778                     STR_24:	
  2042  0778  342A               	retlw	42	;'*'
  2043  0779  343A               	retlw	58	;':'
  2044  077A  3453               	retlw	83	;'S'
  2045  077B  3454               	retlw	84	;'T'
  2046  077C  3450               	retlw	80	;'P'
  2047  077D  343A               	retlw	58	;':'
  2048  077E  3425               	retlw	37	;'%'
  2049  077F  3473               	retlw	115	;'s'
  2050  0780  340A               	retlw	10
  2051  0781  3400               	retlw	0
  2052  0782                     STR_47:	
  2053  0782  342D               	retlw	45	;'-'
  2054  0783  3425               	retlw	37	;'%'
  2055  0784  3464               	retlw	100	;'d'
  2056  0785  342E               	retlw	46	;'.'
  2057  0786  3425               	retlw	37	;'%'
  2058  0787  3430               	retlw	48	;'0'
  2059  0788  3432               	retlw	50	;'2'
  2060  0789  3464               	retlw	100	;'d'
  2061  078A  342C               	retlw	44	;','
  2062  078B  3400               	retlw	0
  2063  078C                     STR_39:	
  2064  078C  3455               	retlw	85	;'U'
  2065  078D  3449               	retlw	73	;'I'
  2066  078E  344E               	retlw	78	;'N'
  2067  078F  3454               	retlw	84	;'T'
  2068  0790  3431               	retlw	49	;'1'
  2069  0791  3436               	retlw	54	;'6'
  2070  0792  345F               	retlw	95	;'_'
  2071  0793  3454               	retlw	84	;'T'
  2072  0794  343A               	retlw	58	;':'
  2073  0795  3400               	retlw	0
  2074  0796                     STR_50:	
  2075  0796  344E               	retlw	78	;'N'
  2076  0797  344F               	retlw	79	;'O'
  2077  0798  345F               	retlw	95	;'_'
  2078  0799  3444               	retlw	68	;'D'
  2079  079A  3441               	retlw	65	;'A'
  2080  079B  3454               	retlw	84	;'T'
  2081  079C  3441               	retlw	65	;'A'
  2082  079D  340A               	retlw	10
  2083  079E  3400               	retlw	0
  2084  079F                     STR_33:	
  2085  079F  3455               	retlw	85	;'U'
  2086  07A0  3449               	retlw	73	;'I'
  2087  07A1  344E               	retlw	78	;'N'
  2088  07A2  3454               	retlw	84	;'T'
  2089  07A3  3438               	retlw	56	;'8'
  2090  07A4  345F               	retlw	95	;'_'
  2091  07A5  3454               	retlw	84	;'T'
  2092  07A6  343A               	retlw	58	;':'
  2093  07A7  3400               	retlw	0
  2094  07A8                     STR_45:	
  2095  07A8  3446               	retlw	70	;'F'
  2096  07A9  344C               	retlw	76	;'L'
  2097  07AA  344F               	retlw	79	;'O'
  2098  07AB  3441               	retlw	65	;'A'
  2099  07AC  3454               	retlw	84	;'T'
  2100  07AD  343A               	retlw	58	;':'
  2101  07AE  3400               	retlw	0
  2102  07AF                     STR_17:	
  2103  07AF  3428               	retlw	40	;'('
  2104  07B0  346E               	retlw	110	;'n'
  2105  07B1  3475               	retlw	117	;'u'
  2106  07B2  346C               	retlw	108	;'l'
  2107  07B3  346C               	retlw	108	;'l'
  2108  07B4  3429               	retlw	41	;')'
  2109  07B5  3400               	retlw	0
  2110  07B6                     STR_32:	
  2111  07B6  3425               	retlw	37	;'%'
  2112  07B7  3425               	retlw	37	;'%'
  2113  07B8  3425               	retlw	37	;'%'
  2114  07B9  3464               	retlw	100	;'d'
  2115  07BA  343A               	retlw	58	;':'
  2116  07BB  3400               	retlw	0
  2117  07BC                     STR_18:	
  2118  07BC  3423               	retlw	35	;'#'
  2119  07BD  3425               	retlw	37	;'%'
  2120  07BE  3473               	retlw	115	;'s'
  2121  07BF  340A               	retlw	10
  2122  07C0  3400               	retlw	0
  2123  07C1                     STR_35:	
  2124  07C1  3425               	retlw	37	;'%'
  2125  07C2  3475               	retlw	117	;'u'
  2126  07C3  340A               	retlw	10
  2127  07C4  3400               	retlw	0
  2128  07C5                     STR_37:	
  2129  07C5  3425               	retlw	37	;'%'
  2130  07C6  3464               	retlw	100	;'d'
  2131  07C7  342C               	retlw	44	;','
  2132  07C8  3400               	retlw	0
  2133  07C9                     STR_34:	
  2134  07C9  3425               	retlw	37	;'%'
  2135  07CA  3475               	retlw	117	;'u'
  2136  07CB  342C               	retlw	44	;','
  2137  07CC  3400               	retlw	0
  2138  07CD                     STR_30:	
  2139  07CD  3452               	retlw	82	;'R'
  2140  07CE  3444               	retlw	68	;'D'
  2141  07CF  3441               	retlw	65	;'A'
  2142  07D0  3400               	retlw	0
  2143  07D1                     STR_29:	
  2144  07D1  3457               	retlw	87	;'W'
  2145  07D2  3444               	retlw	68	;'D'
  2146  07D3  3441               	retlw	65	;'A'
  2147  07D4  3400               	retlw	0
  2148  07D5                     STR_22:	
  2149  07D5  3453               	retlw	83	;'S'
  2150  07D6  3454               	retlw	84	;'T'
  2151  07D7  3441               	retlw	65	;'A'
  2152  07D8  3400               	retlw	0
  2153  07D9                     STR_25:	
  2154  07D9  3441               	retlw	65	;'A'
  2155  07DA  3443               	retlw	67	;'C'
  2156  07DB  344B               	retlw	75	;'K'
  2157  07DC  3400               	retlw	0
  2158  07DD                     STR_19:	
  2159  07DD  3457               	retlw	87	;'W'
  2160  07DE  3448               	retlw	72	;'H'
  2161  07DF  344F               	retlw	79	;'O'
  2162  07E0  3400               	retlw	0
  2163  07E1                     STR_23:	
  2164  07E1  3453               	retlw	83	;'S'
  2165  07E2  3454               	retlw	84	;'T'
  2166  07E3  3450               	retlw	80	;'P'
  2167  07E4  3400               	retlw	0
  2168  07E5                     STR_27:	
  2169  07E5  3447               	retlw	71	;'G'
  2170  07E6  3445               	retlw	69	;'E'
  2171  07E7  3454               	retlw	84	;'T'
  2172  07E8  3400               	retlw	0
  2173  07E9                     STR_26:	
  2174  07E9  3453               	retlw	83	;'S'
  2175  07EA  3445               	retlw	69	;'E'
  2176  07EB  3454               	retlw	84	;'T'
  2177  07EC  3400               	retlw	0
  2178  07ED                     STR_21:	
  2179  07ED  3453               	retlw	83	;'S'
  2180  07EE  3441               	retlw	65	;'A'
  2181  07EF  3456               	retlw	86	;'V'
  2182  07F0  3400               	retlw	0
  2183  07F1                     STR_13:	
  2184  07F1  344C               	retlw	76	;'L'
  2185  07F2  3445               	retlw	69	;'E'
  2186  07F3  3444               	retlw	68	;'D'
  2187  07F4  3400               	retlw	0
  2188  07F5                     STR_2:	
  2189  07F5  3443               	retlw	67	;'C'
  2190  07F6  344D               	retlw	77	;'M'
  2191  07F7  3444               	retlw	68	;'D'
  2192  07F8  3400               	retlw	0
  2193  07F9                     STR_15:	
  2194  07F9  344F               	retlw	79	;'O'
  2195  07FA  3446               	retlw	70	;'F'
  2196  07FB  3446               	retlw	70	;'F'
  2197  07FC  3400               	retlw	0
  2198  07FD                     STR_1:	
  2199  07FD  3449               	retlw	73	;'I'
  2200  07FE  344E               	retlw	78	;'N'
  2201  07FF  3449               	retlw	73	;'I'
  2202  0800  3400               	retlw	0
  2203  0801                     STR_8:	
  2204  0801  3443               	retlw	67	;'C'
  2205  0802  3455               	retlw	85	;'U'
  2206  0803  344C               	retlw	76	;'L'
  2207  0804  3400               	retlw	0
  2208  0805                     STR_10:	
  2209  0805  344E               	retlw	78	;'N'
  2210  0806  3457               	retlw	87	;'W'
  2211  0807  344C               	retlw	76	;'L'
  2212  0808  3400               	retlw	0
  2213  0809                     STR_11:	
  2214  0809  3448               	retlw	72	;'H'
  2215  080A  344F               	retlw	79	;'O'
  2216  080B  344D               	retlw	77	;'M'
  2217  080C  3400               	retlw	0
  2218  080D                     STR_7:	
  2219  080D  3444               	retlw	68	;'D'
  2220  080E  3453               	retlw	83	;'S'
  2221  080F  3450               	retlw	80	;'P'
  2222  0810  3400               	retlw	0
  2223  0811                     STR_4:	
  2224  0811  3443               	retlw	67	;'C'
  2225  0812  344C               	retlw	76	;'L'
  2226  0813  3452               	retlw	82	;'R'
  2227  0814  3400               	retlw	0
  2228  0815                     STR_5:	
  2229  0815  3453               	retlw	83	;'S'
  2230  0816  3454               	retlw	84	;'T'
  2231  0817  3452               	retlw	82	;'R'
  2232  0818  3400               	retlw	0
  2233  0819                     STR_9:	
  2234  0819  3443               	retlw	67	;'C'
  2235  081A  3455               	retlw	85	;'U'
  2236  081B  3452               	retlw	82	;'R'
  2237  081C  3400               	retlw	0
  2238  081D                     STR_3:	
  2239  081D  3444               	retlw	68	;'D'
  2240  081E  3441               	retlw	65	;'A'
  2241  081F  3454               	retlw	84	;'T'
  2242  0820  3400               	retlw	0
  2243  0821                     STR_12:	
  2244  0821  3443               	retlw	67	;'C'
  2245  0822  344E               	retlw	78	;'N'
  2246  0823  3454               	retlw	84	;'T'
  2247  0824  3400               	retlw	0
  2248  0825                     STR_6:	
  2249  0825  3448               	retlw	72	;'H'
  2250  0826  3453               	retlw	83	;'S'
  2251  0827  3454               	retlw	84	;'T'
  2252  0828  3400               	retlw	0
  2253  0829                     STR_14:	
  2254  0829  344F               	retlw	79	;'O'
  2255  082A  344E               	retlw	78	;'N'
  2256  082B  3400               	retlw	0
  2257  0756                     
  2258                           ; #config settings
  2259  0000                     
  2260                           	psect	nvBANK1
  2261  00E2                     __pnvBANK1:	
  2262  00E2                     _device_id_:	
  2263  00E2                     	ds	2
  2264  00E4                     _PROTOCOL_Set_Handler:	
  2265  00E4                     	ds	2
  2266  00E6                     _PROTOCOL_Stop_Handler:	
  2267  00E6                     	ds	2
  2268  00E8                     _PROTOCOL_Start_Handler:	
  2269  00E8                     	ds	2
  2270  0015                     _TMR0	set	21
  2271  000B                     _INTCONbits	set	11
  2272  0014                     _PIR4bits	set	20
  2273  0011                     _PIR1bits	set	17
  2274  005A                     _TMR0IF	set	90
  2275  0095                     _OPTION_REG	set	149
  2276  0095                     _OPTION_REGbits	set	149
  2277  008E                     _TRISC	set	142
  2278  008D                     _TRISB	set	141
  2279  008C                     _TRISA	set	140
  2280  0097                     _WDTCON	set	151
  2281  0098                     _OSCTUNE	set	152
  2282  0099                     _OSCCON	set	153
  2283  0094                     _PIE4bits	set	148
  2284  0091                     _PIE1bits	set	145
  2285  010E                     _LATCbits	set	270
  2286  011D                     _APFCON0	set	285
  2287  011E                     _APFCON1	set	286
  2288  010E                     _LATC	set	270
  2289  010D                     _LATB	set	269
  2290  010C                     _LATA	set	268
  2291  0196                     _EECON2	set	406
  2292  0193                     _EEDATL	set	403
  2293  0194                     _EEDATH	set	404
  2294  0195                     _EECON1bits	set	405
  2295  0192                     _EEADRH	set	402
  2296  0191                     _EEADRL	set	401
  2297  018C                     _ANSELA	set	396
  2298  018D                     _ANSELB	set	397
  2299  018E                     _ANSELC	set	398
  2300  0199                     _RCREG	set	409
  2301  019D                     _RCSTAbits	set	413
  2302  019A                     _TXREG	set	410
  2303  019C                     _SPBRGH	set	412
  2304  019B                     _SPBRGL	set	411
  2305  019E                     _TXSTA	set	414
  2306  019D                     _RCSTA	set	413
  2307  019F                     _BAUDCON	set	415
  2308  020E                     _WPUC	set	526
  2309  020C                     _WPUA	set	524
  2310  020D                     _WPUB	set	525
  2311  0219                     _SSP2BUF	set	537
  2312  021E                     _SSP2CON2bits	set	542
  2313  021D                     _SSP2CON1bits	set	541
  2314  021A                     _SSP2ADD	set	538
  2315  021F                     _SSP2CON3	set	543
  2316  021D                     _SSP2CON1	set	541
  2317  021C                     _SSP2STAT	set	540
  2318  0215                     _SSP1CON1bits	set	533
  2319  0216                     _SSP1CON2bits	set	534
  2320  0214                     _SSP1STATbits	set	532
  2321  0211                     _SSP1BUF	set	529
  2322  0212                     _SSP1ADD	set	530
  2323  0213                     _SSP1MSK	set	531
  2324  0217                     _SSP1CON3	set	535
  2325  0216                     _SSP1CON2	set	534
  2326  0215                     _SSP1CON1	set	533
  2327  0214                     _SSP1STAT	set	532
  2328                           
  2329                           	psect	cinit
  2330  004A                     start_initialization:	
  2331  004A                     __initialization:	
  2332                           
  2333                           ; Initialize objects allocated to COMMON
  2334  004A  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  2335  004D  00FD               	movwf	__pdataCOMMON& (0+127)
  2336                           
  2337                           ; Initialize objects allocated to BANK0
  2338  004E  3197  2754  3180   	fcall	__pidataBANK0	;fetch initializer
  2339  0051  00ED               	movwf	__pdataBANK0& (0+127)
  2340  0052  3197  2755  3180   	fcall	__pidataBANK0+1	;fetch initializer
  2341  0055  00EE               	movwf	(__pdataBANK0+1)& (0+127)
  2342  0056  3197  2756  3180   	fcall	__pidataBANK0+2	;fetch initializer
  2343  0059  00EF               	movwf	(__pdataBANK0+2)& (0+127)
  2344                           
  2345                           ; Clear objects allocated to COMMON
  2346  005A  01FC               	clrf	__pbssCOMMON& (0+127)
  2347                           
  2348                           ; Clear objects allocated to BANK0
  2349  005B  3047               	movlw	low __pbssBANK0
  2350  005C  0084               	movwf	4
  2351  005D  3000               	movlw	high __pbssBANK0
  2352  005E  0085               	movwf	5
  2353  005F  3026               	movlw	38
  2354  0060  3197  2780  3180   	fcall	clear_ram0
  2355                           
  2356                           ; Clear objects allocated to BANK1
  2357  0063  30A0               	movlw	low __pbssBANK1
  2358  0064  0084               	movwf	4
  2359  0065  3000               	movlw	high __pbssBANK1
  2360  0066  0085               	movwf	5
  2361  0067  3042               	movlw	66
  2362  0068  3197  2780  3180   	fcall	clear_ram0
  2363                           
  2364                           ; Clear objects allocated to BANK2
  2365  006B  3020               	movlw	low __pbssBANK2
  2366  006C  0084               	movwf	4
  2367  006D  3001               	movlw	high __pbssBANK2
  2368  006E  0085               	movwf	5
  2369  006F  3030               	movlw	48
  2370  0070  3197  2780  3180   	fcall	clear_ram0
  2371                           
  2372                           ; Clear objects allocated to BANK3
  2373  0073  30A0               	movlw	low __pbssBANK3
  2374  0074  0084               	movwf	4
  2375  0075  3001               	movlw	high __pbssBANK3
  2376  0076  0085               	movwf	5
  2377  0077  3030               	movlw	48
  2378  0078  3197  2780         	fcall	clear_ram0
  2379  007A                     end_of_initialization:	
  2380                           ;End of C runtime variable initialization code
  2381                           
  2382  007A                     __end_of__initialization:	
  2383  007A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2384  007B  0020               	movlb	0
  2385  007C  318B  2BB7         	ljmp	_main	;jump to C main() function
  2386                           
  2387                           	psect	bssCOMMON
  2388  007C                     __pbssCOMMON:	
  2389  007C                     _eusartTxHead:	
  2390  007C                     	ds	1
  2391                           
  2392                           	psect	dataCOMMON
  2393  007D                     __pdataCOMMON:	
  2394  007D                     _I2C_slaveWriteData:	
  2395  007D                     	ds	1
  2396                           
  2397                           	psect	bssBANK0
  2398  0047                     __pbssBANK0:	
  2399  0047                     _i2c2_object:	
  2400  0047                     	ds	5
  2401  004C                     _PROTOCOL_Extension_Handler:	
  2402  004C                     	ds	2
  2403  004E                     _backplane_slave_enabled:	
  2404  004E                     	ds	1
  2405  004F                     _readbuf_status:	
  2406  004F                     	ds	1
  2407  0050                     _tmr_overflow:	
  2408  0050                     	ds	1
  2409  0051                     _tmr_cnt:	
  2410  0051                     	ds	1
  2411  0052                     _sec_cnt:	
  2412  0052                     	ds	1
  2413  0053                     _invoked:	
  2414  0053                     	ds	1
  2415  0054                     _running:	
  2416  0054                     	ds	1
  2417  0055                     _locked:	
  2418  0055                     	ds	1
  2419  0056                     _value:	
  2420  0056                     	ds	1
  2421  0057                     _cnt:	
  2422  0057                     	ds	1
  2423  0058                     _slave_address:	
  2424  0058                     	ds	1
  2425  0059                     _pbuf:	
  2426  0059                     	ds	1
  2427  005A                     _timer0ReloadVal:	
  2428  005A                     	ds	1
  2429  005B                     _eusartRxCount:	
  2430  005B                     	ds	1
  2431  005C                     _eusartRxTail:	
  2432  005C                     	ds	1
  2433  005D                     _eusartRxHead:	
  2434  005D                     	ds	1
  2435  005E                     _eusartTxBufferRemaining:	
  2436  005E                     	ds	1
  2437  005F                     _eusartTxTail:	
  2438  005F                     	ds	1
  2439  0060                     I2C2_ISR@i2c_10bit_address_restart:	
  2440  0060                     	ds	1
  2441  0061                     I2C2_ISR@i2c_bytes_left:	
  2442  0061                     	ds	1
  2443  0062                     I2C2_ISR@pi2c_buf_ptr:	
  2444  0062                     	ds	1
  2445  0063                     _p_i2c2_current:	
  2446  0063                     	ds	1
  2447  0064                     _p_i2c2_trb_current:	
  2448  0064                     	ds	1
  2449  0065                     _i2c2_trb_count:	
  2450  0065                     	ds	1
  2451  0066                     _i2c2_state:	
  2452  0066                     	ds	1
  2453  0067                     I2C1_StatusCallback@ext_cnt:	
  2454  0067                     	ds	1
  2455  0068                     I2C1_StatusCallback@ext_len:	
  2456  0068                     	ds	1
  2457  0069                     I2C1_StatusCallback@next:	
  2458  0069                     	ds	1
  2459  006A                     I2C1_StatusCallback@slaveWriteType:	
  2460  006A                     	ds	1
  2461  006B                     I2C2_ISR@i2c_address:	
  2462  006B                     	ds	2
  2463                           
  2464                           	psect	dataBANK0
  2465  006D                     __pdataBANK0:	
  2466  006D                     _tmr_scaler:	
  2467  006D                     	ds	1
  2468  006E                     _BACKPLANE_SLAVE_ADDRESS:	
  2469  006E                     	ds	1
  2470  006F                     _type_no_data:	
  2471  006F                     	ds	1
  2472                           
  2473                           	psect	bssBANK1
  2474  00A0                     __pbssBANK1:	
  2475  00A0                     _eusartRxBuffer:	
  2476  00A0                     	ds	8
  2477  00A8                     _eusartTxBuffer:	
  2478  00A8                     	ds	8
  2479  00B0                     _float100:	
  2480  00B0                     	ds	2
  2481  00B2                     _PROTOCOL_Inv_Handler:	
  2482  00B2                     	ds	2
  2483  00B4                     _PROTOCOL_Loop_Func:	
  2484  00B4                     	ds	2
  2485  00B6                     _data:	
  2486  00B6                     	ds	1
  2487  00B7                     _j:	
  2488  00B7                     	ds	1
  2489  00B8                     _i:	
  2490  00B8                     	ds	1
  2491  00B9                     _sendbuf:	
  2492  00B9                     	ds	16
  2493  00C9                     _readbuf:	
  2494  00C9                     	ds	5
  2495  00CE                     I2C2_MasterRead@trBlock:	
  2496  00CE                     	ds	4
  2497  00D2                     I2C2_MasterWrite@trBlock:	
  2498  00D2                     	ds	4
  2499  00D6                     PROTOCOL_Send_float@pbuf:	
  2500  00D6                     	ds	3
  2501  00D9                     _i2c2_tr_queue:	
  2502  00D9                     	ds	3
  2503  00DC                     PROTOCOL_Send_int16_t@pbuf:	
  2504  00DC                     	ds	2
  2505  00DE                     PROTOCOL_Send_uint16_t@pbuf:	
  2506  00DE                     	ds	2
  2507  00E0                     PROTOCOL_Send_int8_t@pbuf:	
  2508  00E0                     	ds	1
  2509  00E1                     PROTOCOL_Send_uint8_t@pbuf:	
  2510  00E1                     	ds	1
  2511                           
  2512                           	psect	bssBANK2
  2513  0120                     __pbssBANK2:	
  2514  0120                     _buf:	
  2515  0120                     	ds	48
  2516                           
  2517                           	psect	bssBANK3
  2518  01A0                     __pbssBANK3:	
  2519  01A0                     I2C1_StatusCallback@ext_buf:	
  2520  01A0                     	ds	48
  2521                           
  2522                           	psect	clrtext
  2523  1780                     clear_ram0:	
  2524                           ;	Called with FSR0 containing the base address, and
  2525                           ;	WREG with the size to clear
  2526                           
  2527  1780  0064               	clrwdt	;clear the watchdog before getting into this loop
  2528  1781                     clrloop0:	
  2529  1781  0180               	clrf	0	;clear RAM location pointed to by FSR
  2530  1782  3101               	addfsr 0,1
  2531  1783  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2532  1784  2F81               	goto	clrloop0	;have we reached the end yet?
  2533  1785  3400               	retlw	0	;all done for this memory range, return
  2534                           
  2535                           	psect	cstackCOMMON
  2536  0070                     __pcstackCOMMON:	
  2537  0070                     ?_isdigit:	
  2538  0070                     ?_PROTOCOL_Read_Device_Address:	
  2539                           ; 1 bit 
  2540                           
  2541  0070                     ?_I2C1_StatusCallback:	
  2542                           ; 1 bytes @ 0x0
  2543                           
  2544  0070                     ?_PROTOCOL_SET:	
  2545                           ; 1 bytes @ 0x0
  2546                           
  2547  0070                     ?_PROTOCOL_STA:	
  2548                           ; 1 bytes @ 0x0
  2549                           
  2550  0070                     ?_PROTOCOL_STP:	
  2551                           ; 1 bytes @ 0x0
  2552                           
  2553  0070                     ?_PROTOCOL_SAV:	
  2554                           ; 1 bytes @ 0x0
  2555                           
  2556  0070                     ?_PROTOCOL_INV:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559  0070                     ??_PROTOCOL_INV:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  0070                     ?_PROTOCOL_RST:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565  0070                     ??_PROTOCOL_RST:	
  2566                           ; 1 bytes @ 0x0
  2567                           
  2568  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2569                           ; 1 bytes @ 0x0
  2570                           
  2571  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2572                           ; 1 bytes @ 0x0
  2573                           
  2574  0070                     ?_PROTOCOL_Read_Lock:	
  2575                           ; 1 bytes @ 0x0
  2576                           
  2577  0070                     ?_PROTOCOL_EXT:	
  2578                           ; 1 bytes @ 0x0
  2579                           
  2580  0070                     ?_PROTOCOL_I2C_WHO:	
  2581                           ; 1 bytes @ 0x0
  2582                           
  2583  0070                     ??_PROTOCOL_I2C_WHO:	
  2584                           ; 1 bytes @ 0x0
  2585                           
  2586  0070                     ?_PROTOCOL_I2C_SEN:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589  0070                     ??_PROTOCOL_I2C_SEN:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592  0070                     ?_PROTOCOL_I2C_GET:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595  0070                     ??_PROTOCOL_I2C_GET:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0070                     ?_I2C2_Stop:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0070                     ??_I2C2_Stop:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0070                     ?_I2C2_FunctionComplete:	
  2605                           ; 1 bytes @ 0x0
  2606                           
  2607  0070                     ??_I2C2_FunctionComplete:	
  2608                           ; 1 bytes @ 0x0
  2609                           
  2610  0070                     ?_PIN_MANAGER_Initialize:	
  2611                           ; 1 bytes @ 0x0
  2612                           
  2613  0070                     ?_OSCILLATOR_Initialize:	
  2614                           ; 1 bytes @ 0x0
  2615                           
  2616  0070                     ?_WDT_Initialize:	
  2617                           ; 1 bytes @ 0x0
  2618                           
  2619  0070                     ?_TMR0_Initialize:	
  2620                           ; 1 bytes @ 0x0
  2621                           
  2622  0070                     ?_EUSART_Initialize:	
  2623                           ; 1 bytes @ 0x0
  2624                           
  2625  0070                     ?_EUSART_Transmit_ISR:	
  2626                           ; 1 bytes @ 0x0
  2627                           
  2628  0070                     ??_EUSART_Transmit_ISR:	
  2629                           ; 1 bytes @ 0x0
  2630                           
  2631  0070                     ?_EUSART_Receive_ISR:	
  2632                           ; 1 bytes @ 0x0
  2633                           
  2634  0070                     ??_EUSART_Receive_ISR:	
  2635                           ; 1 bytes @ 0x0
  2636                           
  2637  0070                     ?_PROTOCOL_Set_Lock:	
  2638                           ; 1 bytes @ 0x0
  2639                           
  2640  0070                     ?_PROTOCOL_Loop:	
  2641                           ; 1 bytes @ 0x0
  2642                           
  2643  0070                     ?_I2C1_Initialize:	
  2644                           ; 1 bytes @ 0x0
  2645                           
  2646  0070                     ?_I2C1_ISR:	
  2647                           ; 1 bytes @ 0x0
  2648                           
  2649  0070                     ?_I2C2_Initialize:	
  2650                           ; 1 bytes @ 0x0
  2651                           
  2652  0070                     ?_I2C2_ISR:	
  2653                           ; 1 bytes @ 0x0
  2654                           
  2655  0070                     ?_I2C2_BusCollisionISR:	
  2656                           ; 1 bytes @ 0x0
  2657                           
  2658  0070                     ??_I2C2_BusCollisionISR:	
  2659                           ; 1 bytes @ 0x0
  2660                           
  2661  0070                     ?_INTERRUPT_InterruptManager:	
  2662                           ; 1 bytes @ 0x0
  2663                           
  2664  0070                     ?_EUSART_Read:	
  2665                           ; 1 bytes @ 0x0
  2666                           
  2667  0070                     ?_EUSART_Write:	
  2668                           ; 1 bytes @ 0x0
  2669                           
  2670  0070                     ?_putch:	
  2671                           ; 1 bytes @ 0x0
  2672                           
  2673  0070                     ?_DATAEE_ReadByte:	
  2674                           ; 1 bytes @ 0x0
  2675                           
  2676  0070                     ?_TMR0_HasOverflowOccured:	
  2677                           ; 1 bytes @ 0x0
  2678                           
  2679  0070                     ?_lcd_init:	
  2680                           ; 1 bytes @ 0x0
  2681                           
  2682  0070                     ?_lcd_clear:	
  2683                           ; 1 bytes @ 0x0
  2684                           
  2685  0070                     ?_lcd_string:	
  2686                           ; 1 bytes @ 0x0
  2687                           
  2688  0070                     ?_lcd_string_2lines:	
  2689                           ; 1 bytes @ 0x0
  2690                           
  2691  0070                     ?_lcd_contrast:	
  2692                           ; 1 bytes @ 0x0
  2693                           
  2694  0070                     ?_lcd_test:	
  2695                           ; 1 bytes @ 0x0
  2696                           
  2697  0070                     ?_loop_func:	
  2698                           ; 1 bytes @ 0x0
  2699                           
  2700  0070                     ?_main:	
  2701                           ; 1 bytes @ 0x0
  2702                           
  2703  0070                     ?_PROTOCOL_Write_Device_Address:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706  0070                     ?i1_DATAEE_WriteByte:	
  2707                           ; 1 bytes @ 0x0
  2708                           
  2709  0070                     ?i1_PROTOCOL_STA:	
  2710                           ; 1 bytes @ 0x0
  2711                           
  2712  0070                     ??i1_PROTOCOL_STA:	
  2713                           ; 1 bytes @ 0x0
  2714                           
  2715  0070                     ?i1_PROTOCOL_STP:	
  2716                           ; 1 bytes @ 0x0
  2717                           
  2718  0070                     ??i1_PROTOCOL_STP:	
  2719                           ; 1 bytes @ 0x0
  2720                           
  2721  0070                     ?i1_PROTOCOL_SAV:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724  0070                     ?i1_PROTOCOL_SET:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0070                     ??i1_PROTOCOL_SET:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0070                     ?i1_PROTOCOL_EXT:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0070                     ?i1_PROTOCOL_Set_Lock:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736  0070                     ??i1_PROTOCOL_Set_Lock:	
  2737                           ; 1 bytes @ 0x0
  2738                           
  2739  0070                     ?i1_PROTOCOL_Read_Lock:	
  2740                           ; 1 bytes @ 0x0
  2741                           
  2742  0070                     ??i1_PROTOCOL_Read_Lock:	
  2743                           ; 1 bytes @ 0x0
  2744                           
  2745  0070                     i1DATAEE_WriteByte@bData:	
  2746                           ; 1 bytes @ 0x0
  2747                           
  2748                           
  2749                           ; 1 bytes @ 0x0
  2750  0070                     	ds	1
  2751  0071                     ??i1_DATAEE_WriteByte:	
  2752  0071                     I2C2_Stop@completion_code:	
  2753                           ; 1 bytes @ 0x1
  2754                           
  2755  0071                     PROTOCOL_I2C_SEN@pdata:	
  2756                           ; 1 bytes @ 0x1
  2757                           
  2758  0071                     i1DATAEE_WriteByte@bAdd:	
  2759                           ; 1 bytes @ 0x1
  2760                           
  2761  0071                     i1PROTOCOL_SET@value_:	
  2762                           ; 1 bytes @ 0x1
  2763                           
  2764  0071                     i1PROTOCOL_Set_Lock@lock:	
  2765                           ; 1 bytes @ 0x1
  2766                           
  2767                           
  2768                           ; 1 bytes @ 0x1
  2769  0071                     	ds	1
  2770  0072                     ??_I2C2_ISR:	
  2771  0072                     ?i1_extension_handler:	
  2772                           ; 1 bytes @ 0x2
  2773                           
  2774  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2775                           ; 1 bytes @ 0x2
  2776                           
  2777  0072                     i1extension_handler@buf:	
  2778                           ; 1 bytes @ 0x2
  2779                           
  2780                           
  2781                           ; 1 bytes @ 0x2
  2782  0072                     	ds	1
  2783  0073                     ??i1_extension_handler:	
  2784  0073                     ??i1_PROTOCOL_SAV:	
  2785                           ; 1 bytes @ 0x3
  2786                           
  2787                           
  2788                           ; 1 bytes @ 0x3
  2789  0073                     	ds	1
  2790  0074                     ??i1_PROTOCOL_EXT:	
  2791                           
  2792                           ; 1 bytes @ 0x4
  2793  0074                     	ds	1
  2794  0075                     i1PROTOCOL_EXT@char_buf:	
  2795                           
  2796                           ; 1 bytes @ 0x5
  2797  0075                     	ds	1
  2798  0076                     ??_I2C1_StatusCallback:	
  2799                           
  2800                           ; 1 bytes @ 0x6
  2801  0076                     	ds	1
  2802  0077                     I2C1_StatusCallback@i2c_bus_state:	
  2803                           
  2804                           ; 1 bytes @ 0x7
  2805  0077                     	ds	1
  2806  0078                     I2C1_StatusCallback@pdata:	
  2807                           
  2808                           ; 1 bytes @ 0x8
  2809  0078                     	ds	1
  2810  0079                     ??_I2C1_ISR:	
  2811                           
  2812                           ; 1 bytes @ 0x9
  2813  0079                     	ds	1
  2814  007A                     I2C1_ISR@i2c_data:	
  2815                           
  2816                           ; 1 bytes @ 0xA
  2817  007A                     	ds	1
  2818  007B                     ??_INTERRUPT_InterruptManager:	
  2819                           
  2820                           ; 1 bytes @ 0xB
  2821  007B                     	ds	1
  2822                           
  2823                           	psect	cstackBANK0
  2824  0020                     __pcstackBANK0:	
  2825  0020                     ??_PROTOCOL_Read_Device_Address:	
  2826  0020                     ??_PROTOCOL_SET:	
  2827                           ; 1 bytes @ 0x0
  2828                           
  2829  0020                     ??_PROTOCOL_STA:	
  2830                           ; 1 bytes @ 0x0
  2831                           
  2832  0020                     ??_PROTOCOL_STP:	
  2833                           ; 1 bytes @ 0x0
  2834                           
  2835  0020                     ??_PROTOCOL_Read_Lock:	
  2836                           ; 1 bytes @ 0x0
  2837                           
  2838  0020                     ?_I2C2_MasterWriteTRBBuild:	
  2839                           ; 1 bytes @ 0x0
  2840                           
  2841  0020                     ?_I2C2_MasterTRBInsert:	
  2842                           ; 1 bytes @ 0x0
  2843                           
  2844  0020                     ??_PIN_MANAGER_Initialize:	
  2845                           ; 1 bytes @ 0x0
  2846                           
  2847  0020                     ??_OSCILLATOR_Initialize:	
  2848                           ; 1 bytes @ 0x0
  2849                           
  2850  0020                     ??_WDT_Initialize:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853  0020                     ??_TMR0_Initialize:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856  0020                     ??_EUSART_Initialize:	
  2857                           ; 1 bytes @ 0x0
  2858                           
  2859  0020                     ??_PROTOCOL_Set_Lock:	
  2860                           ; 1 bytes @ 0x0
  2861                           
  2862  0020                     ?_PROTOCOL_Set_Extension_Handler:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0020                     ?_PROTOCOL_Set_Func:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0020                     ??_isdigit:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0020                     ??_I2C1_Initialize:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0020                     ??_I2C2_Initialize:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0020                     ??_EUSART_Read:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0020                     ??_EUSART_Write:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0020                     ?_DATAEE_WriteByte:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0020                     ??_DATAEE_ReadByte:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0020                     ??_TMR0_HasOverflowOccured:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0020                     ?_strncmp:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0020                     ?___wmul:	
  2896                           ; 2 bytes @ 0x0
  2897                           
  2898  0020                     ?___lwdiv:	
  2899                           ; 2 bytes @ 0x0
  2900                           
  2901  0020                     I2C2_MasterTRBInsert@ptrb_list:	
  2902                           ; 2 bytes @ 0x0
  2903                           
  2904  0020                     I2C2_MasterWriteTRBBuild@pdata:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0020                     DATAEE_WriteByte@bData:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0020                     DATAEE_ReadByte@bAdd:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0020                     _isdigit$1515:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0020                     PROTOCOL_Set_Func@loop_func:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0020                     PROTOCOL_Set_Extension_Handler@extension_handler:	
  2920                           ; 2 bytes @ 0x0
  2921                           
  2922  0020                     ___wmul@multiplier:	
  2923                           ; 2 bytes @ 0x0
  2924                           
  2925  0020                     ___lwdiv@divisor:	
  2926                           ; 2 bytes @ 0x0
  2927                           
  2928  0020                     strncmp@s1:	
  2929                           ; 2 bytes @ 0x0
  2930                           
  2931                           
  2932                           ; 2 bytes @ 0x0
  2933  0020                     	ds	1
  2934  0021                     ?_PROTOCOL_Initialize:	
  2935  0021                     ??_DATAEE_WriteByte:	
  2936                           ; 1 bytes @ 0x1
  2937                           
  2938  0021                     I2C2_MasterTRBInsert@pflag:	
  2939                           ; 1 bytes @ 0x1
  2940                           
  2941  0021                     I2C2_MasterWriteTRBBuild@length:	
  2942                           ; 1 bytes @ 0x1
  2943                           
  2944  0021                     EUSART_Read@readValue:	
  2945                           ; 1 bytes @ 0x1
  2946                           
  2947  0021                     EUSART_Write@txData:	
  2948                           ; 1 bytes @ 0x1
  2949                           
  2950  0021                     DATAEE_WriteByte@bAdd:	
  2951                           ; 1 bytes @ 0x1
  2952                           
  2953  0021                     PROTOCOL_SET@value_:	
  2954                           ; 1 bytes @ 0x1
  2955                           
  2956  0021                     PROTOCOL_Set_Lock@lock:	
  2957                           ; 1 bytes @ 0x1
  2958                           
  2959  0021                     isdigit@c:	
  2960                           ; 1 bytes @ 0x1
  2961                           
  2962  0021                     PROTOCOL_Initialize@device_id:	
  2963                           ; 1 bytes @ 0x1
  2964                           
  2965                           
  2966                           ; 2 bytes @ 0x1
  2967  0021                     	ds	1
  2968  0022                     ??_I2C2_MasterTRBInsert:	
  2969  0022                     ??_PROTOCOL_Set_Extension_Handler:	
  2970                           ; 1 bytes @ 0x2
  2971                           
  2972  0022                     ??_PROTOCOL_Set_Func:	
  2973                           ; 1 bytes @ 0x2
  2974                           
  2975  0022                     ??_putch:	
  2976                           ; 1 bytes @ 0x2
  2977                           
  2978  0022                     ?_extension_handler:	
  2979                           ; 1 bytes @ 0x2
  2980                           
  2981  0022                     putch@txData:	
  2982                           ; 1 bytes @ 0x2
  2983                           
  2984  0022                     DATAEE_WriteByte@GIEBitValue:	
  2985                           ; 1 bytes @ 0x2
  2986                           
  2987  0022                     extension_handler@buf:	
  2988                           ; 1 bytes @ 0x2
  2989                           
  2990  0022                     strncmp@s2:	
  2991                           ; 1 bytes @ 0x2
  2992                           
  2993  0022                     I2C2_MasterWriteTRBBuild@address:	
  2994                           ; 1 bytes @ 0x2
  2995                           
  2996  0022                     ___wmul@multiplicand:	
  2997                           ; 2 bytes @ 0x2
  2998                           
  2999  0022                     ___lwdiv@dividend:	
  3000                           ; 2 bytes @ 0x2
  3001                           
  3002                           
  3003                           ; 2 bytes @ 0x2
  3004  0022                     	ds	1
  3005  0023                     ??_PROTOCOL_SAV:	
  3006  0023                     ??_extension_handler:	
  3007                           ; 1 bytes @ 0x3
  3008                           
  3009  0023                     ??_PROTOCOL_Write_Device_Address:	
  3010                           ; 1 bytes @ 0x3
  3011                           
  3012  0023                     I2C2_MasterTRBInsert@count:	
  3013                           ; 1 bytes @ 0x3
  3014                           
  3015  0023                     PROTOCOL_Initialize@start_handler:	
  3016                           ; 1 bytes @ 0x3
  3017                           
  3018  0023                     strncmp@len:	
  3019                           ; 1 bytes @ 0x3
  3020                           
  3021                           
  3022                           ; 2 bytes @ 0x3
  3023  0023                     	ds	1
  3024  0024                     ??_PROTOCOL_EXT:	
  3025  0024                     ??_I2C2_MasterWriteTRBBuild:	
  3026                           ; 1 bytes @ 0x4
  3027                           
  3028  0024                     ??___wmul:	
  3029                           ; 1 bytes @ 0x4
  3030                           
  3031  0024                     ??___lwdiv:	
  3032                           ; 1 bytes @ 0x4
  3033                           
  3034  0024                     PROTOCOL_Initialize@stop_handler:	
  3035                           ; 1 bytes @ 0x4
  3036                           
  3037  0024                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  3038                           ; 1 bytes @ 0x4
  3039                           
  3040  0024                     ___wmul@product:	
  3041                           ; 1 bytes @ 0x4
  3042                           
  3043                           
  3044                           ; 2 bytes @ 0x4
  3045  0024                     	ds	1
  3046  0025                     ??_strncmp:	
  3047  0025                     PROTOCOL_Initialize@set_handler:	
  3048                           ; 1 bytes @ 0x5
  3049                           
  3050  0025                     PROTOCOL_EXT@char_buf:	
  3051                           ; 1 bytes @ 0x5
  3052                           
  3053  0025                     ___lwdiv@quotient:	
  3054                           ; 1 bytes @ 0x5
  3055                           
  3056                           
  3057                           ; 2 bytes @ 0x5
  3058  0025                     	ds	1
  3059  0026                     ?_atoi:	
  3060  0026                     I2C2_MasterWriteTRBBuild@ptrb:	
  3061                           ; 2 bytes @ 0x6
  3062                           
  3063  0026                     PROTOCOL_Initialize@inv_handler:	
  3064                           ; 1 bytes @ 0x6
  3065                           
  3066                           
  3067                           ; 1 bytes @ 0x6
  3068  0026                     	ds	1
  3069  0027                     ?_I2C2_MasterWrite:	
  3070  0027                     I2C2_MasterWrite@length:	
  3071                           ; 1 bytes @ 0x7
  3072                           
  3073  0027                     PROTOCOL_Initialize@scaler:	
  3074                           ; 1 bytes @ 0x7
  3075                           
  3076  0027                     ___lwdiv@counter:	
  3077                           ; 1 bytes @ 0x7
  3078                           
  3079                           
  3080                           ; 1 bytes @ 0x7
  3081  0027                     	ds	1
  3082  0028                     ??_atoi:	
  3083  0028                     ??_PROTOCOL_Initialize:	
  3084                           ; 1 bytes @ 0x8
  3085                           
  3086  0028                     ?___lwmod:	
  3087                           ; 1 bytes @ 0x8
  3088                           
  3089  0028                     I2C2_MasterWrite@address:	
  3090                           ; 2 bytes @ 0x8
  3091                           
  3092  0028                     ___lwmod@divisor:	
  3093                           ; 2 bytes @ 0x8
  3094                           
  3095                           
  3096                           ; 2 bytes @ 0x8
  3097  0028                     	ds	2
  3098  002A                     I2C2_MasterWrite@pflag:	
  3099  002A                     atoi@sign:	
  3100                           ; 1 bytes @ 0xA
  3101                           
  3102  002A                     ___lwmod@dividend:	
  3103                           ; 1 bytes @ 0xA
  3104                           
  3105                           
  3106                           ; 2 bytes @ 0xA
  3107  002A                     	ds	1
  3108  002B                     ??_I2C2_MasterWrite:	
  3109  002B                     atoi@a:	
  3110                           ; 1 bytes @ 0xB
  3111                           
  3112                           
  3113                           ; 2 bytes @ 0xB
  3114  002B                     	ds	1
  3115  002C                     ??___lwmod:	
  3116                           
  3117                           ; 1 bytes @ 0xC
  3118  002C                     	ds	1
  3119  002D                     I2C2_MasterWrite@pdata:	
  3120  002D                     atoi@s:	
  3121                           ; 1 bytes @ 0xD
  3122                           
  3123  002D                     ___lwmod@counter:	
  3124                           ; 1 bytes @ 0xD
  3125                           
  3126                           
  3127                           ; 1 bytes @ 0xD
  3128  002D                     	ds	1
  3129  002E                     ?_i2c2_write:	
  3130  002E                     ?_printf:	
  3131                           ; 1 bytes @ 0xE
  3132                           
  3133  002E                     printf@f:	
  3134                           ; 2 bytes @ 0xE
  3135                           
  3136  002E                     i2c2_write@dev_addr:	
  3137                           ; 2 bytes @ 0xE
  3138                           
  3139                           
  3140                           ; 2 bytes @ 0xE
  3141  002E                     	ds	2
  3142  0030                     i2c2_write@reg_addr:	
  3143                           
  3144                           ; 1 bytes @ 0x10
  3145  0030                     	ds	1
  3146  0031                     i2c2_write@data:	
  3147                           
  3148                           ; 1 bytes @ 0x11
  3149  0031                     	ds	1
  3150  0032                     ??_i2c2_write:	
  3151  0032                     ??_printf:	
  3152                           ; 1 bytes @ 0x12
  3153                           
  3154                           
  3155                           ; 1 bytes @ 0x12
  3156  0032                     	ds	2
  3157  0034                     i2c2_write@write_status:	
  3158                           
  3159                           ; 1 bytes @ 0x14
  3160  0034                     	ds	1
  3161  0035                     i2c2_write@buf:	
  3162                           
  3163                           ; 2 bytes @ 0x15
  3164  0035                     	ds	1
  3165  0036                     printf@prec:	
  3166                           
  3167                           ; 1 bytes @ 0x16
  3168  0036                     	ds	1
  3169  0037                     i2c2_write@status:	
  3170  0037                     printf@cp:	
  3171                           ; 1 bytes @ 0x17
  3172                           
  3173                           
  3174                           ; 2 bytes @ 0x17
  3175  0037                     	ds	1
  3176  0038                     ??_lcd_init:	
  3177  0038                     ??_lcd_clear:	
  3178                           ; 1 bytes @ 0x18
  3179                           
  3180  0038                     ??_lcd_string:	
  3181                           ; 1 bytes @ 0x18
  3182                           
  3183  0038                     ??_lcd_string_2lines:	
  3184                           ; 1 bytes @ 0x18
  3185                           
  3186  0038                     ??_lcd_contrast:	
  3187                           ; 1 bytes @ 0x18
  3188                           
  3189  0038                     ??_lcd_test:	
  3190                           ; 1 bytes @ 0x18
  3191                           
  3192                           
  3193                           ; 1 bytes @ 0x18
  3194  0038                     	ds	1
  3195  0039                     printf@ap:	
  3196                           
  3197                           ; 1 bytes @ 0x19
  3198  0039                     	ds	1
  3199  003A                     lcd_contrast@contrast:	
  3200  003A                     printf@val:	
  3201                           ; 1 bytes @ 0x1A
  3202                           
  3203                           
  3204                           ; 2 bytes @ 0x1A
  3205  003A                     	ds	1
  3206  003B                     lcd_string@i:	
  3207  003B                     lcd_string_2lines@i:	
  3208                           ; 1 bytes @ 0x1B
  3209                           
  3210                           
  3211                           ; 1 bytes @ 0x1B
  3212  003B                     	ds	1
  3213  003C                     ??_loop_func:	
  3214  003C                     printf@len:	
  3215                           ; 1 bytes @ 0x1C
  3216                           
  3217                           
  3218                           ; 2 bytes @ 0x1C
  3219  003C                     	ds	2
  3220  003E                     loop_func@value:	
  3221  003E                     printf@flag:	
  3222                           ; 1 bytes @ 0x1E
  3223                           
  3224                           
  3225                           ; 1 bytes @ 0x1E
  3226  003E                     	ds	1
  3227  003F                     printf@width:	
  3228                           
  3229                           ; 2 bytes @ 0x1F
  3230  003F                     	ds	2
  3231  0041                     printf@c:	
  3232                           
  3233                           ; 1 bytes @ 0x21
  3234  0041                     	ds	1
  3235  0042                     ??_PROTOCOL_Loop:	
  3236                           
  3237                           ; 1 bytes @ 0x22
  3238  0042                     	ds	2
  3239  0044                     PROTOCOL_Loop@c:	
  3240                           
  3241                           ; 1 bytes @ 0x24
  3242  0044                     	ds	1
  3243  0045                     PROTOCOL_Loop@device_address:	
  3244                           
  3245                           ; 1 bytes @ 0x25
  3246  0045                     	ds	1
  3247  0046                     ??_main:	
  3248                           
  3249                           ; 1 bytes @ 0x26
  3250  0046                     	ds	1
  3251                           
  3252                           	psect	maintext
  3253  0BB7                     __pmaintext:	
  3254 ;;
  3255 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3256 ;;
  3257 ;; *************** function _main *****************
  3258 ;; Defined at:
  3259 ;;		line 166 in file "main.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;		None
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;		None
  3264 ;; Return value:  Size  Location     Type
  3265 ;;                  1    wreg      void 
  3266 ;; Registers used:
  3267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3268 ;; Tracked objects:
  3269 ;;		On entry : B1F/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3275 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3276 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3277 ;;Total ram usage:        1 bytes
  3278 ;; Hardware stack levels required when called:   12
  3279 ;; This function calls:
  3280 ;;		_EUSART_Initialize
  3281 ;;		_I2C1_Initialize
  3282 ;;		_I2C2_Initialize
  3283 ;;		_OSCILLATOR_Initialize
  3284 ;;		_PIN_MANAGER_Initialize
  3285 ;;		_PROTOCOL_Initialize
  3286 ;;		_PROTOCOL_Loop
  3287 ;;		_PROTOCOL_Set_Extension_Handler
  3288 ;;		_PROTOCOL_Set_Func
  3289 ;;		_TMR0_Initialize
  3290 ;;		_WDT_Initialize
  3291 ;;		_lcd_init
  3292 ;;		_lcd_test
  3293 ;; This function is called by:
  3294 ;;		Startup code after reset
  3295 ;; This function uses a non-reentrant model
  3296 ;;
  3297                           
  3298                           
  3299                           ;psect for function _main
  3300  0BB7                     _main:	
  3301                           
  3302                           ;main.c: 169: PROTOCOL_Initialize("AQM1602XA-RN-GBW", (0), (0), (0), (0), 250);
  3303                           
  3304                           ;incstack = 0
  3305                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3306  0BB7  3031               	movlw	low (STR_16| (0+32768))
  3307  0BB8  0020               	movlb	0	; select bank0
  3308  0BB9  00A1               	movwf	PROTOCOL_Initialize@device_id
  3309  0BBA  3087               	movlw	high (STR_16| (0+32768))
  3310  0BBB  00A2               	movwf	PROTOCOL_Initialize@device_id+1
  3311  0BBC  01A3               	clrf	PROTOCOL_Initialize@start_handler
  3312  0BBD  01A4               	clrf	PROTOCOL_Initialize@stop_handler
  3313  0BBE  01A5               	clrf	PROTOCOL_Initialize@set_handler
  3314  0BBF  01A6               	clrf	PROTOCOL_Initialize@inv_handler
  3315  0BC0  30FA               	movlw	250
  3316  0BC1  00C6               	movwf	??_main
  3317  0BC2  0846               	movf	??_main,w
  3318  0BC3  00A7               	movwf	PROTOCOL_Initialize@scaler
  3319  0BC4  318C  24D4  318B   	fcall	_PROTOCOL_Initialize
  3320                           
  3321                           ;main.c: 170: PROTOCOL_Set_Extension_Handler(extension_handler);
  3322  0BC7  309F               	movlw	low _extension_handler
  3323  0BC8  0020               	movlb	0	; select bank0
  3324  0BC9  00A0               	movwf	PROTOCOL_Set_Extension_Handler@extension_handler
  3325  0BCA  3008               	movlw	high _extension_handler
  3326  0BCB  00A1               	movwf	PROTOCOL_Set_Extension_Handler@extension_handler+1
  3327  0BCC  3197  277A  318B   	fcall	_PROTOCOL_Set_Extension_Handler
  3328                           
  3329                           ;main.c: 171: PROTOCOL_Set_Func(loop_func);
  3330  0BCF  307E               	movlw	low _loop_func
  3331  0BD0  0020               	movlb	0	; select bank0
  3332  0BD1  00A0               	movwf	PROTOCOL_Set_Func@loop_func
  3333  0BD2  3000               	movlw	high _loop_func
  3334  0BD3  00A1               	movwf	PROTOCOL_Set_Func@loop_func+1
  3335  0BD4  3197  27B4  318B   	fcall	_PROTOCOL_Set_Func
  3336                           
  3337                           ;main.c: 174: PIN_MANAGER_Initialize();
  3338  0BD7  3189  216D  318B   	fcall	_PIN_MANAGER_Initialize
  3339                           
  3340                           ;main.c: 175: OSCILLATOR_Initialize();
  3341  0BDA  3197  276F  318B   	fcall	_OSCILLATOR_Initialize
  3342                           
  3343                           ;main.c: 176: WDT_Initialize();
  3344  0BDD  3197  276B  318B   	fcall	_WDT_Initialize
  3345                           
  3346                           ;main.c: 177: TMR0_Initialize();
  3347  0BE0  3197  27D4  318B   	fcall	_TMR0_Initialize
  3348                           
  3349                           ;main.c: 180: (INTCONbits.GIE = 1);
  3350  0BE3  178B               	bsf	11,7	;volatile
  3351                           
  3352                           ;main.c: 181: (INTCONbits.PEIE = 1);
  3353  0BE4  170B               	bsf	11,6	;volatile
  3354                           
  3355                           ;main.c: 184: I2C2_Initialize();
  3356  0BE5  3188  20CA  318B   	fcall	_I2C2_Initialize
  3357                           
  3358                           ;main.c: 185: lcd_init();
  3359  0BE8  318D  2597  318B   	fcall	_lcd_init
  3360                           
  3361                           ;main.c: 187: lcd_test();
  3362  0BEB  318F  2712  318B   	fcall	_lcd_test
  3363                           
  3364                           ;main.c: 190: LATCbits.LATC7 = 1;
  3365  0BEE  0022               	movlb	2	; select bank2
  3366  0BEF  178E               	bsf	14,7	;volatile
  3367                           
  3368                           ;main.c: 193: EUSART_Initialize();
  3369  0BF0  3188  20E2  318B   	fcall	_EUSART_Initialize
  3370                           
  3371                           ;main.c: 196: I2C1_Initialize();
  3372  0BF3  3189  21CA  318B   	fcall	_I2C1_Initialize
  3373                           
  3374                           ;main.c: 199: PROTOCOL_Loop();
  3375  0BF6  3184  2460         	fcall	_PROTOCOL_Loop
  3376  0BF8  3180  2848         	ljmp	start
  3377  0BFA                     __end_of_main:	
  3378                           
  3379                           	psect	text1
  3380  0F12                     __ptext1:	
  3381 ;; *************** function _lcd_test *****************
  3382 ;; Defined at:
  3383 ;;		line 98 in file "main.c"
  3384 ;; Parameters:    Size  Location     Type
  3385 ;;		None
  3386 ;; Auto vars:     Size  Location     Type
  3387 ;;		None
  3388 ;; Return value:  Size  Location     Type
  3389 ;;                  1    wreg      void 
  3390 ;; Registers used:
  3391 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3392 ;; Tracked objects:
  3393 ;;		On entry : 0/0
  3394 ;;		On exit  : 0/0
  3395 ;;		Unchanged: 0/0
  3396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3399 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3400 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3401 ;;Total ram usage:        2 bytes
  3402 ;; Hardware stack levels used:    1
  3403 ;; Hardware stack levels required when called:    9
  3404 ;; This function calls:
  3405 ;;		_i2c2_write
  3406 ;; This function is called by:
  3407 ;;		_main
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           
  3412                           ;psect for function _lcd_test
  3413  0F12                     _lcd_test:	
  3414                           
  3415                           ;main.c: 99: i2c2_write(0x3e, 0x40, 0x33); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  3416                           
  3417                           ;incstack = 0
  3418                           ; Regs used in _lcd_test: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3419  0F12  303E               	movlw	62
  3420  0F13  0020               	movlb	0	; select bank0
  3421  0F14  00AE               	movwf	i2c2_write@dev_addr
  3422  0F15  3000               	movlw	0
  3423  0F16  00AF               	movwf	i2c2_write@dev_addr+1
  3424  0F17  3040               	movlw	64
  3425  0F18  00B8               	movwf	??_lcd_test
  3426  0F19  0838               	movf	??_lcd_test,w
  3427  0F1A  00B0               	movwf	i2c2_write@reg_addr
  3428  0F1B  3033               	movlw	51
  3429  0F1C  00B9               	movwf	??_lcd_test+1
  3430  0F1D  0839               	movf	??_lcd_test+1,w
  3431  0F1E  00B1               	movwf	i2c2_write@data
  3432  0F1F  318A  2232  318F   	fcall	_i2c2_write
  3433  0F22  30C8               	movlw	200
  3434  0F23                     u5037:	
  3435  0F23  3200               	nop2
  3436  0F24  0B89               	decfsz	9,f
  3437  0F25  2F23               	goto	u5037
  3438                           
  3439                           ;main.c: 100: i2c2_write(0x3e, 0x40, 0x37); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3440  0F26  303E               	movlw	62
  3441  0F27  0020               	movlb	0	; select bank0
  3442  0F28  00AE               	movwf	i2c2_write@dev_addr
  3443  0F29  3000               	movlw	0
  3444  0F2A  00AF               	movwf	i2c2_write@dev_addr+1
  3445  0F2B  3040               	movlw	64
  3446  0F2C  00B8               	movwf	??_lcd_test
  3447  0F2D  0838               	movf	??_lcd_test,w
  3448  0F2E  00B0               	movwf	i2c2_write@reg_addr
  3449  0F2F  3037               	movlw	55
  3450  0F30  00B9               	movwf	??_lcd_test+1
  3451  0F31  0839               	movf	??_lcd_test+1,w
  3452  0F32  00B1               	movwf	i2c2_write@data
  3453  0F33  318A  2232  318F   	fcall	_i2c2_write
  3454  0F36  30C8               	movlw	200
  3455  0F37                     u5047:	
  3456  0F37  3200               	nop2
  3457  0F38  0B89               	decfsz	9,f
  3458  0F39  2F37               	goto	u5047
  3459                           
  3460                           ;main.c: 101: i2c2_write(0x3e, 0x40, 0x2e); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3461  0F3A  303E               	movlw	62
  3462  0F3B  0020               	movlb	0	; select bank0
  3463  0F3C  00AE               	movwf	i2c2_write@dev_addr
  3464  0F3D  3000               	movlw	0
  3465  0F3E  00AF               	movwf	i2c2_write@dev_addr+1
  3466  0F3F  3040               	movlw	64
  3467  0F40  00B8               	movwf	??_lcd_test
  3468  0F41  0838               	movf	??_lcd_test,w
  3469  0F42  00B0               	movwf	i2c2_write@reg_addr
  3470  0F43  302E               	movlw	46
  3471  0F44  00B9               	movwf	??_lcd_test+1
  3472  0F45  0839               	movf	??_lcd_test+1,w
  3473  0F46  00B1               	movwf	i2c2_write@data
  3474  0F47  318A  2232  318F   	fcall	_i2c2_write
  3475  0F4A  30C8               	movlw	200
  3476  0F4B                     u5057:	
  3477  0F4B  3200               	nop2
  3478  0F4C  0B89               	decfsz	9,f
  3479  0F4D  2F4B               	goto	u5057
  3480                           
  3481                           ;main.c: 102: i2c2_write(0x3e, 0x40, 0x30); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3482  0F4E  303E               	movlw	62
  3483  0F4F  0020               	movlb	0	; select bank0
  3484  0F50  00AE               	movwf	i2c2_write@dev_addr
  3485  0F51  3000               	movlw	0
  3486  0F52  00AF               	movwf	i2c2_write@dev_addr+1
  3487  0F53  3040               	movlw	64
  3488  0F54  00B8               	movwf	??_lcd_test
  3489  0F55  0838               	movf	??_lcd_test,w
  3490  0F56  00B0               	movwf	i2c2_write@reg_addr
  3491  0F57  3030               	movlw	48
  3492  0F58  00B9               	movwf	??_lcd_test+1
  3493  0F59  0839               	movf	??_lcd_test+1,w
  3494  0F5A  00B1               	movwf	i2c2_write@data
  3495  0F5B  318A  2232  318F   	fcall	_i2c2_write
  3496  0F5E  30C8               	movlw	200
  3497  0F5F                     u5067:	
  3498  0F5F  3200               	nop2
  3499  0F60  0B89               	decfsz	9,f
  3500  0F61  2F5F               	goto	u5067
  3501                           
  3502                           ;main.c: 103: i2c2_write(0x3e, 0x40, 0xf2); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3503  0F62  303E               	movlw	62
  3504  0F63  0020               	movlb	0	; select bank0
  3505  0F64  00AE               	movwf	i2c2_write@dev_addr
  3506  0F65  3000               	movlw	0
  3507  0F66  00AF               	movwf	i2c2_write@dev_addr+1
  3508  0F67  3040               	movlw	64
  3509  0F68  00B8               	movwf	??_lcd_test
  3510  0F69  0838               	movf	??_lcd_test,w
  3511  0F6A  00B0               	movwf	i2c2_write@reg_addr
  3512  0F6B  30F2               	movlw	242
  3513  0F6C  00B9               	movwf	??_lcd_test+1
  3514  0F6D  0839               	movf	??_lcd_test+1,w
  3515  0F6E  00B1               	movwf	i2c2_write@data
  3516  0F6F  318A  2232  318F   	fcall	_i2c2_write
  3517  0F72  30C8               	movlw	200
  3518  0F73                     u5077:	
  3519  0F73  3200               	nop2
  3520  0F74  0B89               	decfsz	9,f
  3521  0F75  2F73               	goto	u5077
  3522                           
  3523                           ;main.c: 104: i2c2_write(0x3e, 0x40, 0x43); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3524  0F76  303E               	movlw	62
  3525  0F77  0020               	movlb	0	; select bank0
  3526  0F78  00AE               	movwf	i2c2_write@dev_addr
  3527  0F79  3000               	movlw	0
  3528  0F7A  00AF               	movwf	i2c2_write@dev_addr+1
  3529  0F7B  3040               	movlw	64
  3530  0F7C  00B8               	movwf	??_lcd_test
  3531  0F7D  0838               	movf	??_lcd_test,w
  3532  0F7E  00B0               	movwf	i2c2_write@reg_addr
  3533  0F7F  3043               	movlw	67
  3534  0F80  00B9               	movwf	??_lcd_test+1
  3535  0F81  0839               	movf	??_lcd_test+1,w
  3536  0F82  00B1               	movwf	i2c2_write@data
  3537  0F83  318A  2232  318F   	fcall	_i2c2_write
  3538  0F86  30C8               	movlw	200
  3539  0F87                     u5087:	
  3540  0F87  3200               	nop2
  3541  0F88  0B89               	decfsz	9,f
  3542  0F89  2F87               	goto	u5087
  3543                           
  3544                           ;main.c: 105: i2c2_write(0x3e, 0x00, 0xc0); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3545  0F8A  303E               	movlw	62
  3546  0F8B  0020               	movlb	0	; select bank0
  3547  0F8C  00AE               	movwf	i2c2_write@dev_addr
  3548  0F8D  3000               	movlw	0
  3549  0F8E  00AF               	movwf	i2c2_write@dev_addr+1
  3550  0F8F  01B0               	clrf	i2c2_write@reg_addr
  3551  0F90  30C0               	movlw	192
  3552  0F91  00B8               	movwf	??_lcd_test
  3553  0F92  0838               	movf	??_lcd_test,w
  3554  0F93  00B1               	movwf	i2c2_write@data
  3555  0F94  318A  2232  318F   	fcall	_i2c2_write
  3556  0F97  30C8               	movlw	200
  3557  0F98                     u5097:	
  3558  0F98  3200               	nop2
  3559  0F99  0B89               	decfsz	9,f
  3560  0F9A  2F98               	goto	u5097
  3561                           
  3562                           ;main.c: 106: i2c2_write(0x3e, 0x40, 0x28); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3563  0F9B  303E               	movlw	62
  3564  0F9C  0020               	movlb	0	; select bank0
  3565  0F9D  00AE               	movwf	i2c2_write@dev_addr
  3566  0F9E  3000               	movlw	0
  3567  0F9F  00AF               	movwf	i2c2_write@dev_addr+1
  3568  0FA0  3040               	movlw	64
  3569  0FA1  00B8               	movwf	??_lcd_test
  3570  0FA2  0838               	movf	??_lcd_test,w
  3571  0FA3  00B0               	movwf	i2c2_write@reg_addr
  3572  0FA4  3028               	movlw	40
  3573  0FA5  00B9               	movwf	??_lcd_test+1
  3574  0FA6  0839               	movf	??_lcd_test+1,w
  3575  0FA7  00B1               	movwf	i2c2_write@data
  3576  0FA8  318A  2232  318F   	fcall	_i2c2_write
  3577  0FAB  30C8               	movlw	200
  3578  0FAC                     u5107:	
  3579  0FAC  3200               	nop2
  3580  0FAD  0B89               	decfsz	9,f
  3581  0FAE  2FAC               	goto	u5107
  3582                           
  3583                           ;main.c: 107: i2c2_write(0x3e, 0x40, 0x5e); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3584  0FAF  303E               	movlw	62
  3585  0FB0  0020               	movlb	0	; select bank0
  3586  0FB1  00AE               	movwf	i2c2_write@dev_addr
  3587  0FB2  3000               	movlw	0
  3588  0FB3  00AF               	movwf	i2c2_write@dev_addr+1
  3589  0FB4  3040               	movlw	64
  3590  0FB5  00B8               	movwf	??_lcd_test
  3591  0FB6  0838               	movf	??_lcd_test,w
  3592  0FB7  00B0               	movwf	i2c2_write@reg_addr
  3593  0FB8  305E               	movlw	94
  3594  0FB9  00B9               	movwf	??_lcd_test+1
  3595  0FBA  0839               	movf	??_lcd_test+1,w
  3596  0FBB  00B1               	movwf	i2c2_write@data
  3597  0FBC  318A  2232  318F   	fcall	_i2c2_write
  3598  0FBF  30C8               	movlw	200
  3599  0FC0                     u5117:	
  3600  0FC0  3200               	nop2
  3601  0FC1  0B89               	decfsz	9,f
  3602  0FC2  2FC0               	goto	u5117
  3603                           
  3604                           ;main.c: 108: i2c2_write(0x3e, 0x40, 0x2d); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3605  0FC3  303E               	movlw	62
  3606  0FC4  0020               	movlb	0	; select bank0
  3607  0FC5  00AE               	movwf	i2c2_write@dev_addr
  3608  0FC6  3000               	movlw	0
  3609  0FC7  00AF               	movwf	i2c2_write@dev_addr+1
  3610  0FC8  3040               	movlw	64
  3611  0FC9  00B8               	movwf	??_lcd_test
  3612  0FCA  0838               	movf	??_lcd_test,w
  3613  0FCB  00B0               	movwf	i2c2_write@reg_addr
  3614  0FCC  302D               	movlw	45
  3615  0FCD  00B9               	movwf	??_lcd_test+1
  3616  0FCE  0839               	movf	??_lcd_test+1,w
  3617  0FCF  00B1               	movwf	i2c2_write@data
  3618  0FD0  318A  2232  318F   	fcall	_i2c2_write
  3619  0FD3  30C8               	movlw	200
  3620  0FD4                     u5127:	
  3621  0FD4  3200               	nop2
  3622  0FD5  0B89               	decfsz	9,f
  3623  0FD6  2FD4               	goto	u5127
  3624                           
  3625                           ;main.c: 109: i2c2_write(0x3e, 0x40, 0x5e); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3626  0FD7  303E               	movlw	62
  3627  0FD8  0020               	movlb	0	; select bank0
  3628  0FD9  00AE               	movwf	i2c2_write@dev_addr
  3629  0FDA  3000               	movlw	0
  3630  0FDB  00AF               	movwf	i2c2_write@dev_addr+1
  3631  0FDC  3040               	movlw	64
  3632  0FDD  00B8               	movwf	??_lcd_test
  3633  0FDE  0838               	movf	??_lcd_test,w
  3634  0FDF  00B0               	movwf	i2c2_write@reg_addr
  3635  0FE0  305E               	movlw	94
  3636  0FE1  00B9               	movwf	??_lcd_test+1
  3637  0FE2  0839               	movf	??_lcd_test+1,w
  3638  0FE3  00B1               	movwf	i2c2_write@data
  3639  0FE4  318A  2232  318F   	fcall	_i2c2_write
  3640  0FE7  30C8               	movlw	200
  3641  0FE8                     u5137:	
  3642  0FE8  3200               	nop2
  3643  0FE9  0B89               	decfsz	9,f
  3644  0FEA  2FE8               	goto	u5137
  3645                           
  3646                           ;main.c: 110: i2c2_write(0x3e, 0x40, 0x29); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  3647  0FEB  303E               	movlw	62
  3648  0FEC  0020               	movlb	0	; select bank0
  3649  0FED  00AE               	movwf	i2c2_write@dev_addr
  3650  0FEE  3000               	movlw	0
  3651  0FEF  00AF               	movwf	i2c2_write@dev_addr+1
  3652  0FF0  3040               	movlw	64
  3653  0FF1  00B8               	movwf	??_lcd_test
  3654  0FF2  0838               	movf	??_lcd_test,w
  3655  0FF3  00B0               	movwf	i2c2_write@reg_addr
  3656  0FF4  3029               	movlw	41
  3657  0FF5  00B9               	movwf	??_lcd_test+1
  3658  0FF6  0839               	movf	??_lcd_test+1,w
  3659  0FF7  00B1               	movwf	i2c2_write@data
  3660  0FF8  318A  2232  318F   	fcall	_i2c2_write
  3661  0FFB  30C8               	movlw	200
  3662  0FFC                     u5147:	
  3663  0FFC  3200               	nop2
  3664  0FFD  0B89               	decfsz	9,f
  3665  0FFE  2FFC               	goto	u5147
  3666  0FFF  0008               	return
  3667  1000                     __end_of_lcd_test:	
  3668                           
  3669                           	psect	text2
  3670  176B                     __ptext2:	
  3671 ;; *************** function _WDT_Initialize *****************
  3672 ;; Defined at:
  3673 ;;		line 89 in file "mcc_generated_files/mcc.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;		None
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;		None
  3678 ;; Return value:  Size  Location     Type
  3679 ;;                  1    wreg      void 
  3680 ;; Registers used:
  3681 ;;		wreg
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3691 ;;Total ram usage:        0 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:    6
  3694 ;; This function calls:
  3695 ;;		Nothing
  3696 ;; This function is called by:
  3697 ;;		_main
  3698 ;;		_SYSTEM_Initialize
  3699 ;; This function uses a non-reentrant model
  3700 ;;
  3701                           
  3702                           
  3703                           ;psect for function _WDT_Initialize
  3704  176B                     _WDT_Initialize:	
  3705                           
  3706                           ;mcc.c: 92: WDTCON = 0x16;
  3707                           
  3708                           ;incstack = 0
  3709                           ; Regs used in _WDT_Initialize: [wreg]
  3710  176B  3016               	movlw	22
  3711  176C  0021               	movlb	1	; select bank1
  3712  176D  0097               	movwf	23	;volatile
  3713  176E  0008               	return
  3714  176F                     __end_of_WDT_Initialize:	
  3715                           
  3716                           	psect	text3
  3717  17D4                     __ptext3:	
  3718 ;; *************** function _TMR0_Initialize *****************
  3719 ;; Defined at:
  3720 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3721 ;; Parameters:    Size  Location     Type
  3722 ;;		None
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;		None
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  1    wreg      void 
  3727 ;; Registers used:
  3728 ;;		wreg, status,2
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3737 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3738 ;;Total ram usage:        1 bytes
  3739 ;; Hardware stack levels used:    1
  3740 ;; Hardware stack levels required when called:    6
  3741 ;; This function calls:
  3742 ;;		Nothing
  3743 ;; This function is called by:
  3744 ;;		_main
  3745 ;;		_SYSTEM_Initialize
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749                           
  3750                           ;psect for function _TMR0_Initialize
  3751  17D4                     _TMR0_Initialize:	
  3752                           
  3753                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD5 & 0x3F;
  3754                           
  3755                           ;incstack = 0
  3756                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3757  17D4  0021               	movlb	1	; select bank1
  3758  17D5  0815               	movf	21,w	;volatile
  3759  17D6  39C0               	andlw	192
  3760  17D7  3815               	iorlw	21
  3761  17D8  0095               	movwf	21	;volatile
  3762                           
  3763                           ;tmr0.c: 70: TMR0 = 0x83;
  3764  17D9  3083               	movlw	131
  3765  17DA  0020               	movlb	0	; select bank0
  3766  17DB  0095               	movwf	21	;volatile
  3767                           
  3768                           ;tmr0.c: 73: timer0ReloadVal= 131;
  3769  17DC  3083               	movlw	131
  3770  17DD  00A0               	movwf	??_TMR0_Initialize
  3771  17DE  0820               	movf	??_TMR0_Initialize,w
  3772  17DF  00DA               	movwf	_timer0ReloadVal	;volatile
  3773                           
  3774                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3775  17E0  110B               	bcf	11,2	;volatile
  3776  17E1  0008               	return
  3777  17E2                     __end_of_TMR0_Initialize:	
  3778                           
  3779                           	psect	text4
  3780  17B4                     __ptext4:	
  3781 ;; *************** function _PROTOCOL_Set_Func *****************
  3782 ;; Defined at:
  3783 ;;		line 76 in file "protocol.c"
  3784 ;; Parameters:    Size  Location     Type
  3785 ;;  loop_func       2    0[BANK0 ] PTR void 
  3786 ;;		 -> loop_func(1), 
  3787 ;; Auto vars:     Size  Location     Type
  3788 ;;		None
  3789 ;; Return value:  Size  Location     Type
  3790 ;;                  1    wreg      void 
  3791 ;; Registers used:
  3792 ;;		wreg
  3793 ;; Tracked objects:
  3794 ;;		On entry : 0/0
  3795 ;;		On exit  : 0/0
  3796 ;;		Unchanged: 0/0
  3797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3798 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3801 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3802 ;;Total ram usage:        2 bytes
  3803 ;; Hardware stack levels used:    1
  3804 ;; Hardware stack levels required when called:    6
  3805 ;; This function calls:
  3806 ;;		Nothing
  3807 ;; This function is called by:
  3808 ;;		_main
  3809 ;; This function uses a non-reentrant model
  3810 ;;
  3811                           
  3812                           
  3813                           ;psect for function _PROTOCOL_Set_Func
  3814  17B4                     _PROTOCOL_Set_Func:	
  3815                           
  3816                           ;protocol.c: 77: PROTOCOL_Loop_Func = loop_func;
  3817                           
  3818                           ;incstack = 0
  3819                           ; Regs used in _PROTOCOL_Set_Func: [wreg]
  3820  17B4  0020               	movlb	0	; select bank0
  3821  17B5  0821               	movf	PROTOCOL_Set_Func@loop_func+1,w
  3822  17B6  0021               	movlb	1	; select bank1
  3823  17B7  00B5               	movwf	(_PROTOCOL_Loop_Func+1)^(0+128)
  3824  17B8  0020               	movlb	0	; select bank0
  3825  17B9  0820               	movf	PROTOCOL_Set_Func@loop_func,w
  3826  17BA  0021               	movlb	1	; select bank1
  3827  17BB  00B4               	movwf	_PROTOCOL_Loop_Func^(0+128)
  3828  17BC  0008               	return
  3829  17BD                     __end_of_PROTOCOL_Set_Func:	
  3830                           
  3831                           	psect	text5
  3832  177A                     __ptext5:	
  3833 ;; *************** function _PROTOCOL_Set_Extension_Handler *****************
  3834 ;; Defined at:
  3835 ;;		line 80 in file "protocol.c"
  3836 ;; Parameters:    Size  Location     Type
  3837 ;;  extension_ha    2    0[BANK0 ] PTR void 
  3838 ;;		 -> extension_handler(1), 
  3839 ;; Auto vars:     Size  Location     Type
  3840 ;;		None
  3841 ;; Return value:  Size  Location     Type
  3842 ;;                  1    wreg      void 
  3843 ;; Registers used:
  3844 ;;		wreg
  3845 ;; Tracked objects:
  3846 ;;		On entry : 0/0
  3847 ;;		On exit  : 0/0
  3848 ;;		Unchanged: 0/0
  3849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3850 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3853 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3854 ;;Total ram usage:        2 bytes
  3855 ;; Hardware stack levels used:    1
  3856 ;; Hardware stack levels required when called:    6
  3857 ;; This function calls:
  3858 ;;		Nothing
  3859 ;; This function is called by:
  3860 ;;		_main
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           
  3865                           ;psect for function _PROTOCOL_Set_Extension_Handler
  3866  177A                     _PROTOCOL_Set_Extension_Handler:	
  3867                           
  3868                           ;protocol.c: 81: PROTOCOL_Extension_Handler = extension_handler;
  3869                           
  3870                           ;incstack = 0
  3871                           ; Regs used in _PROTOCOL_Set_Extension_Handler: [wreg]
  3872  177A  0020               	movlb	0	; select bank0
  3873  177B  0821               	movf	PROTOCOL_Set_Extension_Handler@extension_handler+1,w
  3874  177C  00CD               	movwf	_PROTOCOL_Extension_Handler+1
  3875  177D  0820               	movf	PROTOCOL_Set_Extension_Handler@extension_handler,w
  3876  177E  00CC               	movwf	_PROTOCOL_Extension_Handler
  3877  177F  0008               	return
  3878  1780                     __end_of_PROTOCOL_Set_Extension_Handler:	
  3879                           
  3880                           	psect	text6
  3881  0460                     __ptext6:	
  3882 ;; *************** function _PROTOCOL_Loop *****************
  3883 ;; Defined at:
  3884 ;;		line 131 in file "protocol.c"
  3885 ;; Parameters:    Size  Location     Type
  3886 ;;		None
  3887 ;; Auto vars:     Size  Location     Type
  3888 ;;  device_addre    1   37[BANK0 ] unsigned char 
  3889 ;;  c               1   36[BANK0 ] unsigned char 
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  1    wreg      void 
  3892 ;; Registers used:
  3893 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3900 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3901 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3902 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3903 ;;Total ram usage:        4 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:   11
  3906 ;; This function calls:
  3907 ;;		Absolute function
  3908 ;;		_EUSART_Read
  3909 ;;		_PROTOCOL_EXT
  3910 ;;		_PROTOCOL_Read_Device_Address
  3911 ;;		_PROTOCOL_SAV
  3912 ;;		_PROTOCOL_SET
  3913 ;;		_PROTOCOL_STA
  3914 ;;		_PROTOCOL_STP
  3915 ;;		_PROTOCOL_Write_Device_Address
  3916 ;;		_TMR0_HasOverflowOccured
  3917 ;;		_atoi
  3918 ;;		_loop_func
  3919 ;;		_printf
  3920 ;;		_strncmp
  3921 ;; This function is called by:
  3922 ;;		_main
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           
  3927                           ;psect for function _PROTOCOL_Loop
  3928  0460                     _PROTOCOL_Loop:	
  3929  0460                     l812:	
  3930                           ;incstack = 0
  3931                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3932                           ;protocol.c: 132: uint8_t device_address;
  3933                           ;protocol.c: 133: uint8_t c;
  3934                           ;protocol.c: 134: while (1) {
  3935                           
  3936                           
  3937                           ;protocol.c: 135: tmr_overflow = TMR0_HasOverflowOccured();
  3938  0460  3197  2767  3184   	fcall	_TMR0_HasOverflowOccured
  3939  0463  0020               	movlb	0	; select bank0
  3940  0464  00C2               	movwf	??_PROTOCOL_Loop
  3941  0465  0842               	movf	??_PROTOCOL_Loop,w
  3942  0466  00D0               	movwf	_tmr_overflow
  3943                           
  3944                           ;protocol.c: 136: if (tmr_overflow) {
  3945  0467  0850               	movf	_tmr_overflow,w
  3946  0468  1903               	btfsc	3,2
  3947  0469  2C88               	goto	l5320
  3948                           
  3949                           ;protocol.c: 137: TMR0IF = 0;
  3950  046A  110B               	bcf	11,2	;volatile
  3951                           
  3952                           ;protocol.c: 138: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3953  046B  0021               	movlb	1	; select bank1
  3954  046C  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3955  046D  0433               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3956  046E  1903               	btfsc	3,2
  3957  046F  2C88               	goto	l5320
  3958  0470  3001               	movlw	1
  3959  0471  0020               	movlb	0	; select bank0
  3960  0472  00C2               	movwf	??_PROTOCOL_Loop
  3961  0473  0842               	movf	??_PROTOCOL_Loop,w
  3962  0474  07D1               	addwf	_tmr_cnt,f
  3963  0475  0856               	movf	_value,w
  3964  0476  0251               	subwf	_tmr_cnt,w
  3965  0477  1C03               	skipc
  3966  0478  2C88               	goto	l5320
  3967                           
  3968                           ;protocol.c: 139: tmr_cnt = 0;
  3969  0479  01D1               	clrf	_tmr_cnt
  3970                           
  3971                           ;protocol.c: 140: if (++sec_cnt >= tmr_scaler) {
  3972  047A  3001               	movlw	1
  3973  047B  00C2               	movwf	??_PROTOCOL_Loop
  3974  047C  0842               	movf	??_PROTOCOL_Loop,w
  3975  047D  07D2               	addwf	_sec_cnt,f
  3976  047E  086D               	movf	_tmr_scaler,w
  3977  047F  0252               	subwf	_sec_cnt,w
  3978  0480  1C03               	skipc
  3979  0481  2C88               	goto	l5320
  3980                           
  3981                           ;protocol.c: 141: if (running) invoked = 1;
  3982  0482  0854               	movf	_running,w
  3983  0483  1903               	btfsc	3,2
  3984  0484  2C87               	goto	l5318
  3985  0485  01D3               	clrf	_invoked
  3986  0486  0AD3               	incf	_invoked,f
  3987  0487                     l5318:	
  3988                           
  3989                           ;protocol.c: 142: sec_cnt = 0;
  3990  0487  01D2               	clrf	_sec_cnt
  3991  0488                     l5320:	
  3992                           
  3993                           ;protocol.c: 143: }
  3994                           ;protocol.c: 144: }
  3995                           ;protocol.c: 145: }
  3996                           ;protocol.c: 146: if (invoked && PROTOCOL_Inv_Handler) {
  3997  0488  0020               	movlb	0	; select bank0
  3998  0489  0853               	movf	_invoked,w
  3999  048A  1903               	btfsc	3,2
  4000  048B  2C93               	goto	l5326
  4001                           
  4002                           ;protocol.c: 147: PROTOCOL_Inv_Handler();
  4003  048C  0021               	movlb	1	; select bank1
  4004  048D  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  4005  048E  0433               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  4006  048F  1903               	btfsc	3,2
  4007  0490  2C93               	goto	l5326
  4008                           
  4009                           ;protocol.c: 148: invoked = 0;
  4010  0491  0020               	movlb	0	; select bank0
  4011  0492  01D3               	clrf	_invoked
  4012  0493                     l5326:	
  4013                           
  4014                           ;protocol.c: 149: }
  4015                           ;protocol.c: 150: if (PROTOCOL_Loop_Func) PROTOCOL_Loop_Func();
  4016  0493  0021               	movlb	1	; select bank1
  4017  0494  0834               	movf	_PROTOCOL_Loop_Func^(0+128),w
  4018  0495  0435               	iorwf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  4019  0496  1903               	btfsc	3,2
  4020  0497  2C9D               	goto	l5330
  4021  0498  0835               	movf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  4022  0499  008A               	movwf	10
  4023  049A  0834               	movf	_PROTOCOL_Loop_Func^(0+128),w
  4024  049B  000A               	callw
  4025  049C  3184               	pagesel	$
  4026  049D                     l5330:	
  4027                           
  4028                           ;protocol.c: 151: if ((eusartRxCount)) {
  4029  049D  0020               	movlb	0	; select bank0
  4030  049E  085B               	movf	_eusartRxCount,w	;volatile
  4031  049F  1903               	btfsc	3,2
  4032  04A0  2C60               	goto	l812
  4033                           
  4034                           ;protocol.c: 152: c = EUSART_Read();
  4035  04A1  3189  218B  3184   	fcall	_EUSART_Read
  4036  04A4  0020               	movlb	0	; select bank0
  4037  04A5  00C2               	movwf	??_PROTOCOL_Loop
  4038  04A6  0842               	movf	??_PROTOCOL_Loop,w
  4039  04A7  00C4               	movwf	PROTOCOL_Loop@c
  4040                           
  4041                           ;protocol.c: 153: buf[cnt++] = c;
  4042  04A8  0844               	movf	PROTOCOL_Loop@c,w
  4043  04A9  00C2               	movwf	??_PROTOCOL_Loop
  4044  04AA  0857               	movf	_cnt,w
  4045  04AB  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  4046  04AC  0086               	movwf	6
  4047  04AD  3001               	movlw	1	; select bank2/3
  4048  04AE  0087               	movwf	7
  4049  04AF  0842               	movf	??_PROTOCOL_Loop,w
  4050  04B0  0081               	movwf	1
  4051  04B1  3001               	movlw	1
  4052  04B2  00C2               	movwf	??_PROTOCOL_Loop
  4053  04B3  0842               	movf	??_PROTOCOL_Loop,w
  4054  04B4  07D7               	addwf	_cnt,f
  4055                           
  4056                           ;protocol.c: 154: if (c == '\n') {
  4057  04B5  300A               	movlw	10
  4058  04B6  0644               	xorwf	PROTOCOL_Loop@c,w
  4059  04B7  1D03               	btfss	3,2
  4060  04B8  2C60               	goto	l812
  4061                           
  4062                           ;protocol.c: 155: buf[--cnt] = '\0';
  4063  04B9  3001               	movlw	1
  4064  04BA  02D7               	subwf	_cnt,f
  4065  04BB  0857               	movf	_cnt,w
  4066  04BC  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  4067  04BD  0086               	movwf	6
  4068  04BE  3001               	movlw	1	; select bank2/3
  4069  04BF  0087               	movwf	7
  4070  04C0  0181               	clrf	1
  4071                           
  4072                           ;protocol.c: 156: cnt = 0;
  4073  04C1  01D7               	clrf	_cnt
  4074                           
  4075                           ;protocol.c: 157: printf("#%s\n", buf);
  4076  04C2  30BC               	movlw	low (STR_18| (0+32768))
  4077  04C3  00AE               	movwf	printf@f
  4078  04C4  3087               	movlw	high (STR_18| (0+32768))
  4079  04C5  00AF               	movwf	printf@f+1
  4080  04C6  3020               	movlw	low _buf
  4081  04C7  00B0               	movwf	low ((?_printf| 0+2))
  4082  04C8  3001               	movlw	high _buf
  4083  04C9  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4084  04CA  3182  228B  3184   	fcall	_printf
  4085                           
  4086                           ;protocol.c: 158: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  4087  04CD  0020               	movlb	0	; select bank0
  4088  04CE  036E               	decf	_BACKPLANE_SLAVE_ADDRESS,w
  4089  04CF  1903               	btfsc	3,2
  4090  04D0  2CD6               	goto	l5350
  4091                           
  4092                           ;protocol.c: 159: PROTOCOL_EXT(buf);
  4093  04D1  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4094  04D2  3188  206E  3184   	fcall	_PROTOCOL_EXT
  4095                           
  4096                           ;protocol.c: 160: } else if (!strncmp(("WHO"), (buf), 3)) {
  4097  04D5  2C60               	goto	l812
  4098  04D6                     l5350:	
  4099  04D6  30DD               	movlw	low (STR_19| (0+32768))
  4100  04D7  0020               	movlb	0	; select bank0
  4101  04D8  00A0               	movwf	strncmp@s1
  4102  04D9  3087               	movlw	high (STR_19| (0+32768))
  4103  04DA  00A1               	movwf	strncmp@s1+1
  4104  04DB  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4105  04DC  00C2               	movwf	??_PROTOCOL_Loop
  4106  04DD  0842               	movf	??_PROTOCOL_Loop,w
  4107  04DE  00A2               	movwf	strncmp@s2
  4108  04DF  3003               	movlw	3
  4109  04E0  00A3               	movwf	strncmp@len
  4110  04E1  3000               	movlw	0
  4111  04E2  00A4               	movwf	strncmp@len+1
  4112  04E3  318B  2375  3184   	fcall	_strncmp
  4113  04E6  0020               	movlb	0	; select bank0
  4114  04E7  0820               	movf	?_strncmp,w
  4115  04E8  0421               	iorwf	?_strncmp+1,w
  4116  04E9  1D03               	btfss	3,2
  4117  04EA  2CFB               	goto	l5354
  4118                           
  4119                           ;protocol.c: 161: printf("$:WHO:%s\n", device_id_);
  4120  04EB  306E               	movlw	low (STR_20| (0+32768))
  4121  04EC  00AE               	movwf	printf@f
  4122  04ED  3087               	movlw	high (STR_20| (0+32768))
  4123  04EE  00AF               	movwf	printf@f+1
  4124  04EF  0021               	movlb	1	; select bank1
  4125  04F0  0863               	movf	(_device_id_+1)^(0+128),w
  4126  04F1  0020               	movlb	0	; select bank0
  4127  04F2  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4128  04F3  0021               	movlb	1	; select bank1
  4129  04F4  0862               	movf	_device_id_^(0+128),w
  4130  04F5  0020               	movlb	0	; select bank0
  4131  04F6  00B0               	movwf	low ((?_printf| 0+2))
  4132  04F7  3182  228B  3184   	fcall	_printf
  4133                           
  4134                           ;protocol.c: 162: } else if (!strncmp(("SAV"), (buf), 3)) {
  4135  04FA  2C60               	goto	l812
  4136  04FB                     l5354:	
  4137  04FB  30ED               	movlw	low (STR_21| (0+32768))
  4138  04FC  0020               	movlb	0	; select bank0
  4139  04FD  00A0               	movwf	strncmp@s1
  4140  04FE  3087               	movlw	high (STR_21| (0+32768))
  4141  04FF  00A1               	movwf	strncmp@s1+1
  4142  0500  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4143  0501  00C2               	movwf	??_PROTOCOL_Loop
  4144  0502  0842               	movf	??_PROTOCOL_Loop,w
  4145  0503  00A2               	movwf	strncmp@s2
  4146  0504  3003               	movlw	3
  4147  0505  00A3               	movwf	strncmp@len
  4148  0506  3000               	movlw	0
  4149  0507  00A4               	movwf	strncmp@len+1
  4150  0508  318B  2375  3184   	fcall	_strncmp
  4151  050B  0020               	movlb	0	; select bank0
  4152  050C  0820               	movf	?_strncmp,w
  4153  050D  0421               	iorwf	?_strncmp+1,w
  4154  050E  1D03               	btfss	3,2
  4155  050F  2D14               	goto	l5358
  4156                           
  4157                           ;protocol.c: 163: PROTOCOL_SAV();
  4158  0510  3197  27AB  3184   	fcall	_PROTOCOL_SAV
  4159                           
  4160                           ;protocol.c: 164: } else if (!strncmp(("STA"), (buf), 3)) {
  4161  0513  2C60               	goto	l812
  4162  0514                     l5358:	
  4163  0514  30D5               	movlw	low (STR_22| (0+32768))
  4164  0515  0020               	movlb	0	; select bank0
  4165  0516  00A0               	movwf	strncmp@s1
  4166  0517  3087               	movlw	high (STR_22| (0+32768))
  4167  0518  00A1               	movwf	strncmp@s1+1
  4168  0519  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4169  051A  00C2               	movwf	??_PROTOCOL_Loop
  4170  051B  0842               	movf	??_PROTOCOL_Loop,w
  4171  051C  00A2               	movwf	strncmp@s2
  4172  051D  3003               	movlw	3
  4173  051E  00A3               	movwf	strncmp@len
  4174  051F  3000               	movlw	0
  4175  0520  00A4               	movwf	strncmp@len+1
  4176  0521  318B  2375  3184   	fcall	_strncmp
  4177  0524  0020               	movlb	0	; select bank0
  4178  0525  0820               	movf	?_strncmp,w
  4179  0526  0421               	iorwf	?_strncmp+1,w
  4180  0527  1D03               	btfss	3,2
  4181  0528  2D2D               	goto	l5362
  4182                           
  4183                           ;protocol.c: 165: PROTOCOL_STA();
  4184  0529  3197  2763  3184   	fcall	_PROTOCOL_STA
  4185                           
  4186                           ;protocol.c: 166: } else if (!strncmp(("STP"), (buf), 3)) {
  4187  052C  2C60               	goto	l812
  4188  052D                     l5362:	
  4189  052D  30E1               	movlw	low (STR_23| (0+32768))
  4190  052E  0020               	movlb	0	; select bank0
  4191  052F  00A0               	movwf	strncmp@s1
  4192  0530  3087               	movlw	high (STR_23| (0+32768))
  4193  0531  00A1               	movwf	strncmp@s1+1
  4194  0532  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4195  0533  00C2               	movwf	??_PROTOCOL_Loop
  4196  0534  0842               	movf	??_PROTOCOL_Loop,w
  4197  0535  00A2               	movwf	strncmp@s2
  4198  0536  3003               	movlw	3
  4199  0537  00A3               	movwf	strncmp@len
  4200  0538  3000               	movlw	0
  4201  0539  00A4               	movwf	strncmp@len+1
  4202  053A  318B  2375  3184   	fcall	_strncmp
  4203  053D  0020               	movlb	0	; select bank0
  4204  053E  0820               	movf	?_strncmp,w
  4205  053F  0421               	iorwf	?_strncmp+1,w
  4206  0540  1D03               	btfss	3,2
  4207  0541  2D52               	goto	l5368
  4208                           
  4209                           ;protocol.c: 167: PROTOCOL_STP();
  4210  0542  3197  2751  3184   	fcall	_PROTOCOL_STP
  4211                           
  4212                           ;protocol.c: 168: printf("*:STP:%s\n", "ACK");
  4213  0545  3078               	movlw	low (STR_24| (0+32768))
  4214  0546  0020               	movlb	0	; select bank0
  4215  0547  00AE               	movwf	printf@f
  4216  0548  3087               	movlw	high (STR_24| (0+32768))
  4217  0549  00AF               	movwf	printf@f+1
  4218  054A  30D9               	movlw	low (STR_25| (0+32768))
  4219  054B  00B0               	movwf	low ((?_printf| 0+2))
  4220  054C  3087               	movlw	high (STR_25| (0+32768))
  4221  054D  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4222  054E  3182  228B  3184   	fcall	_printf
  4223                           
  4224                           ;protocol.c: 169: } else if (!strncmp(("SET"), (buf), 3)) {
  4225  0551  2C60               	goto	l812
  4226  0552                     l5368:	
  4227  0552  30E9               	movlw	low (STR_26| (0+32768))
  4228  0553  0020               	movlb	0	; select bank0
  4229  0554  00A0               	movwf	strncmp@s1
  4230  0555  3087               	movlw	high (STR_26| (0+32768))
  4231  0556  00A1               	movwf	strncmp@s1+1
  4232  0557  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4233  0558  00C2               	movwf	??_PROTOCOL_Loop
  4234  0559  0842               	movf	??_PROTOCOL_Loop,w
  4235  055A  00A2               	movwf	strncmp@s2
  4236  055B  3003               	movlw	3
  4237  055C  00A3               	movwf	strncmp@len
  4238  055D  3000               	movlw	0
  4239  055E  00A4               	movwf	strncmp@len+1
  4240  055F  318B  2375  3184   	fcall	_strncmp
  4241  0562  0020               	movlb	0	; select bank0
  4242  0563  0820               	movf	?_strncmp,w
  4243  0564  0421               	iorwf	?_strncmp+1,w
  4244  0565  1D03               	btfss	3,2
  4245  0566  2D71               	goto	l5372
  4246                           
  4247                           ;protocol.c: 170: PROTOCOL_SET(atoi(&buf[4]));
  4248  0567  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  4249  0568  318D  2526  3184   	fcall	_atoi
  4250  056B  0020               	movlb	0	; select bank0
  4251  056C  0826               	movf	?_atoi,w
  4252  056D  3197  279B  3184   	fcall	_PROTOCOL_SET
  4253                           
  4254                           ;protocol.c: 171: } else if (!strncmp(("GET"), (buf), 3)) {
  4255  0570  2C60               	goto	l812
  4256  0571                     l5372:	
  4257  0571  30E5               	movlw	low (STR_27| (0+32768))
  4258  0572  0020               	movlb	0	; select bank0
  4259  0573  00A0               	movwf	strncmp@s1
  4260  0574  3087               	movlw	high (STR_27| (0+32768))
  4261  0575  00A1               	movwf	strncmp@s1+1
  4262  0576  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4263  0577  00C2               	movwf	??_PROTOCOL_Loop
  4264  0578  0842               	movf	??_PROTOCOL_Loop,w
  4265  0579  00A2               	movwf	strncmp@s2
  4266  057A  3003               	movlw	3
  4267  057B  00A3               	movwf	strncmp@len
  4268  057C  3000               	movlw	0
  4269  057D  00A4               	movwf	strncmp@len+1
  4270  057E  318B  2375  3184   	fcall	_strncmp
  4271  0581  0020               	movlb	0	; select bank0
  4272  0582  0820               	movf	?_strncmp,w
  4273  0583  0421               	iorwf	?_strncmp+1,w
  4274  0584  1D03               	btfss	3,2
  4275  0585  2D95               	goto	l5376
  4276                           
  4277                           ;protocol.c: 172: printf("$:GET:%d\n", value);
  4278  0586  305A               	movlw	low (STR_28| (0+32768))
  4279  0587  00AE               	movwf	printf@f
  4280  0588  3087               	movlw	high (STR_28| (0+32768))
  4281  0589  00AF               	movwf	printf@f+1
  4282  058A  0856               	movf	_value,w
  4283  058B  00C2               	movwf	??_PROTOCOL_Loop
  4284  058C  01C3               	clrf	??_PROTOCOL_Loop+1
  4285  058D  0842               	movf	??_PROTOCOL_Loop,w
  4286  058E  00B0               	movwf	?_printf+2
  4287  058F  0843               	movf	??_PROTOCOL_Loop+1,w
  4288  0590  00B1               	movwf	?_printf+3
  4289  0591  3182  228B  3184   	fcall	_printf
  4290                           
  4291                           ;protocol.c: 173: } else if (!strncmp(("WDA"), (buf), 3)) {
  4292  0594  2C60               	goto	l812
  4293  0595                     l5376:	
  4294  0595  30D1               	movlw	low (STR_29| (0+32768))
  4295  0596  0020               	movlb	0	; select bank0
  4296  0597  00A0               	movwf	strncmp@s1
  4297  0598  3087               	movlw	high (STR_29| (0+32768))
  4298  0599  00A1               	movwf	strncmp@s1+1
  4299  059A  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4300  059B  00C2               	movwf	??_PROTOCOL_Loop
  4301  059C  0842               	movf	??_PROTOCOL_Loop,w
  4302  059D  00A2               	movwf	strncmp@s2
  4303  059E  3003               	movlw	3
  4304  059F  00A3               	movwf	strncmp@len
  4305  05A0  3000               	movlw	0
  4306  05A1  00A4               	movwf	strncmp@len+1
  4307  05A2  318B  2375  3184   	fcall	_strncmp
  4308  05A5  0020               	movlb	0	; select bank0
  4309  05A6  0820               	movf	?_strncmp,w
  4310  05A7  0421               	iorwf	?_strncmp+1,w
  4311  05A8  1D03               	btfss	3,2
  4312  05A9  2DB8               	goto	l5382
  4313                           
  4314                           ;protocol.c: 174: device_address = atoi(&buf[4]);
  4315  05AA  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  4316  05AB  318D  2526  3184   	fcall	_atoi
  4317  05AE  0020               	movlb	0	; select bank0
  4318  05AF  0826               	movf	?_atoi,w
  4319  05B0  00C2               	movwf	??_PROTOCOL_Loop
  4320  05B1  0842               	movf	??_PROTOCOL_Loop,w
  4321  05B2  00C5               	movwf	PROTOCOL_Loop@device_address
  4322                           
  4323                           ;protocol.c: 175: PROTOCOL_Write_Device_Address(device_address);
  4324  05B3  0845               	movf	PROTOCOL_Loop@device_address,w
  4325  05B4  3197  27F1  3184   	fcall	_PROTOCOL_Write_Device_Address
  4326                           
  4327                           ;protocol.c: 176: } else if (!strncmp(("RDA"), (buf), 3)) {
  4328  05B7  2C60               	goto	l812
  4329  05B8                     l5382:	
  4330  05B8  30CD               	movlw	low (STR_30| (0+32768))
  4331  05B9  0020               	movlb	0	; select bank0
  4332  05BA  00A0               	movwf	strncmp@s1
  4333  05BB  3087               	movlw	high (STR_30| (0+32768))
  4334  05BC  00A1               	movwf	strncmp@s1+1
  4335  05BD  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4336  05BE  00C2               	movwf	??_PROTOCOL_Loop
  4337  05BF  0842               	movf	??_PROTOCOL_Loop,w
  4338  05C0  00A2               	movwf	strncmp@s2
  4339  05C1  3003               	movlw	3
  4340  05C2  00A3               	movwf	strncmp@len
  4341  05C3  3000               	movlw	0
  4342  05C4  00A4               	movwf	strncmp@len+1
  4343  05C5  318B  2375  3184   	fcall	_strncmp
  4344  05C8  0020               	movlb	0	; select bank0
  4345  05C9  0820               	movf	?_strncmp,w
  4346  05CA  0421               	iorwf	?_strncmp+1,w
  4347  05CB  1D03               	btfss	3,2
  4348  05CC  2DE3               	goto	l5388
  4349                           
  4350                           ;protocol.c: 177: device_address = PROTOCOL_Read_Device_Address();
  4351  05CD  3197  274B  3184   	fcall	_PROTOCOL_Read_Device_Address
  4352  05D0  0020               	movlb	0	; select bank0
  4353  05D1  00C2               	movwf	??_PROTOCOL_Loop
  4354  05D2  0842               	movf	??_PROTOCOL_Loop,w
  4355  05D3  00C5               	movwf	PROTOCOL_Loop@device_address
  4356                           
  4357                           ;protocol.c: 178: printf("$:RDA:%d\n", device_address);
  4358  05D4  3050               	movlw	low (STR_31| (0+32768))
  4359  05D5  00AE               	movwf	printf@f
  4360  05D6  3087               	movlw	high (STR_31| (0+32768))
  4361  05D7  00AF               	movwf	printf@f+1
  4362  05D8  0845               	movf	PROTOCOL_Loop@device_address,w
  4363  05D9  00C2               	movwf	??_PROTOCOL_Loop
  4364  05DA  01C3               	clrf	??_PROTOCOL_Loop+1
  4365  05DB  0842               	movf	??_PROTOCOL_Loop,w
  4366  05DC  00B0               	movwf	?_printf+2
  4367  05DD  0843               	movf	??_PROTOCOL_Loop+1,w
  4368  05DE  00B1               	movwf	?_printf+3
  4369  05DF  3182  228B  3184   	fcall	_printf
  4370                           
  4371                           ;protocol.c: 179: } else {
  4372  05E2  2C60               	goto	l812
  4373  05E3                     l5388:	
  4374                           
  4375                           ;protocol.c: 180: PROTOCOL_EXT(buf);
  4376  05E3  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  4377  05E4  3188  206E  3184   	fcall	_PROTOCOL_EXT
  4378  05E7  2C60               	goto	l812
  4379  05E8                     __end_of_PROTOCOL_Loop:	
  4380                           
  4381                           	psect	text7
  4382  028B                     __ptext7:	
  4383 ;; *************** function _printf *****************
  4384 ;; Defined at:
  4385 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4388 ;;		 -> STR_63(10), STR_62(9), STR_61(10), STR_60(9), 
  4389 ;;		 -> STR_59(4), STR_58(4), STR_57(4), STR_56(4), 
  4390 ;;		 -> STR_55(4), STR_54(4), STR_53(4), STR_52(4), 
  4391 ;;		 -> STR_51(14), STR_50(9), STR_49(10), STR_48(9), 
  4392 ;;		 -> STR_47(10), STR_46(9), STR_45(7), STR_44(4), 
  4393 ;;		 -> STR_43(4), STR_42(9), STR_41(4), STR_40(4), 
  4394 ;;		 -> STR_39(10), STR_38(4), STR_37(4), STR_36(8), 
  4395 ;;		 -> STR_35(4), STR_34(4), STR_33(9), STR_32(6), 
  4396 ;;		 -> STR_31(10), STR_28(10), STR_24(10), STR_20(10), 
  4397 ;;		 -> STR_18(5), 
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;  tmpval          4    0        struct .
  4400 ;;  width           2   31[BANK0 ] int 
  4401 ;;  len             2   28[BANK0 ] unsigned int 
  4402 ;;  val             2   26[BANK0 ] unsigned int 
  4403 ;;  cp              2   23[BANK0 ] PTR const unsigned char 
  4404 ;;		 -> STR_25(4), buf(48), STR_17(7), ROM(8192), 
  4405 ;;		 -> printf@c(1), STR_16(17), 
  4406 ;;  c               1   33[BANK0 ] char 
  4407 ;;  flag            1   30[BANK0 ] unsigned char 
  4408 ;;  ap              1   25[BANK0 ] PTR void [1]
  4409 ;;		 -> ?_printf(2), 
  4410 ;;  prec            1   22[BANK0 ] char 
  4411 ;; Return value:  Size  Location     Type
  4412 ;;                  2   14[BANK0 ] int 
  4413 ;; Registers used:
  4414 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4415 ;; Tracked objects:
  4416 ;;		On entry : 0/0
  4417 ;;		On exit  : 0/0
  4418 ;;		Unchanged: 0/0
  4419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4420 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4421 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4422 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4423 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4424 ;;Total ram usage:       20 bytes
  4425 ;; Hardware stack levels used:    1
  4426 ;; Hardware stack levels required when called:    8
  4427 ;; This function calls:
  4428 ;;		___lwdiv
  4429 ;;		___lwmod
  4430 ;;		___wmul
  4431 ;;		_isdigit
  4432 ;;		_putch
  4433 ;; This function is called by:
  4434 ;;		_PROTOCOL_Loop
  4435 ;; This function uses a non-reentrant model
  4436 ;;
  4437                           
  4438                           
  4439                           ;psect for function _printf
  4440  028B                     _printf:	
  4441                           
  4442                           ;doprnt.c: 466: va_list ap;
  4443                           ;doprnt.c: 499: signed char c;
  4444                           ;doprnt.c: 501: int width;
  4445                           ;doprnt.c: 506: signed char prec;
  4446                           ;doprnt.c: 508: unsigned char flag;
  4447                           ;doprnt.c: 523: union {
  4448                           ;doprnt.c: 524: unsigned long vd;
  4449                           ;doprnt.c: 525: double integ;
  4450                           ;doprnt.c: 526: } tmpval;
  4451                           ;doprnt.c: 528: unsigned int val;
  4452                           ;doprnt.c: 529: unsigned len;
  4453                           ;doprnt.c: 530: const char * cp;
  4454                           ;doprnt.c: 533: *ap = __va_start();
  4455                           
  4456                           ;incstack = 0
  4457                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4458  028B  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4459  028C  0020               	movlb	0	; select bank0
  4460  028D  00B2               	movwf	??_printf
  4461  028E  0832               	movf	??_printf,w
  4462  028F  00B9               	movwf	printf@ap
  4463  0290                     l3724:	
  4464                           ;doprnt.c: 536: while(c = *f++) {
  4465                           
  4466  0290  0020               	movlb	0	; select bank0
  4467  0291  082F               	movf	printf@f+1,w
  4468  0292  00B3               	movwf	??_printf+1
  4469  0293  082E               	movf	printf@f,w
  4470  0294  00B2               	movwf	??_printf
  4471  0295  0AAE               	incf	printf@f,f
  4472  0296  1903               	skipnz
  4473  0297  0AAF               	incf	printf@f+1,f
  4474  0298  0832               	movf	??_printf,w
  4475  0299  0084               	movwf	4
  4476  029A  0833               	movf	??_printf+1,w
  4477  029B  0085               	movwf	5
  4478  029C  0800               	movf	0,w	;code access
  4479  029D  00B4               	movwf	??_printf+2
  4480  029E  0834               	movf	??_printf+2,w
  4481  029F  00C1               	movwf	printf@c
  4482  02A0  0841               	movf	printf@c,w
  4483  02A1  1903               	btfsc	3,2
  4484  02A2  0008               	return
  4485                           
  4486                           ;doprnt.c: 538: if(c != '%')
  4487  02A3  3025               	movlw	37
  4488  02A4  0641               	xorwf	printf@c,w
  4489  02A5  1903               	btfsc	3,2
  4490  02A6  2AAC               	goto	l3600
  4491                           
  4492                           ;doprnt.c: 540: {
  4493                           ;doprnt.c: 541: (putch(c) );
  4494  02A7  0841               	movf	printf@c,w
  4495  02A8  3197  2774  3182   	fcall	_putch
  4496                           
  4497                           ;doprnt.c: 542: continue;
  4498  02AB  2A90               	goto	l3724
  4499  02AC                     l3600:	
  4500                           
  4501                           ;doprnt.c: 543: }
  4502                           ;doprnt.c: 546: width = 0;
  4503  02AC  0020               	movlb	0	; select bank0
  4504  02AD  01BF               	clrf	printf@width
  4505  02AE  01C0               	clrf	printf@width+1
  4506                           
  4507                           ;doprnt.c: 548: flag = 0;
  4508  02AF  01BE               	clrf	printf@flag
  4509                           
  4510                           ;doprnt.c: 551: switch(*f) {
  4511                           
  4512                           ;doprnt.c: 550: for(;;) {
  4513  02B0  2AB6               	goto	l3606
  4514  02B1                     l636:	
  4515                           ;doprnt.c: 579: case '0':
  4516                           
  4517                           
  4518                           ;doprnt.c: 580: flag |= 0x04;
  4519  02B1  153E               	bsf	printf@flag,2
  4520                           
  4521                           ;doprnt.c: 581: f++;
  4522  02B2  3001               	movlw	1
  4523  02B3  07AE               	addwf	printf@f,f
  4524  02B4  3000               	movlw	0
  4525  02B5  3DAF               	addwfc	printf@f+1,f
  4526  02B6                     l3606:	
  4527                           ;doprnt.c: 584: }
  4528                           
  4529                           ;doprnt.c: 582: continue;
  4530                           
  4531  02B6  082E               	movf	printf@f,w
  4532  02B7  0084               	movwf	4
  4533  02B8  082F               	movf	printf@f+1,w
  4534  02B9  0085               	movwf	5
  4535  02BA  0800               	movf	0,w	;code access
  4536                           
  4537                           ; Switch size 1, requested type "space"
  4538                           ; Number of cases is 1, Range of values is 48 to 48
  4539                           ; switch strategies available:
  4540                           ; Name         Instructions Cycles
  4541                           ; simple_byte            4     3 (average)
  4542                           ; direct_byte           11     9 (fixed)
  4543                           ; jumptable            263     9 (fixed)
  4544                           ;	Chosen strategy is simple_byte
  4545  02BB  3A30               	xorlw	48	; case 48
  4546  02BC  1903               	skipnz
  4547  02BD  2AB1               	goto	l636
  4548  02BE  2ABF               	goto	l3608
  4549  02BF                     l3608:	
  4550                           ;doprnt.c: 586: }
  4551                           
  4552                           ;doprnt.c: 585: break;
  4553                           
  4554                           
  4555                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4556  02BF  082E               	movf	printf@f,w
  4557  02C0  0084               	movwf	4
  4558  02C1  082F               	movf	printf@f+1,w
  4559  02C2  0085               	movwf	5
  4560  02C3  0800               	movf	0,w	;code access
  4561  02C4  3188  204F  3182   	fcall	_isdigit
  4562  02C7  1C03               	btfss	3,0
  4563  02C8  2B60               	goto	l3656
  4564                           
  4565                           ;doprnt.c: 598: width = 0;
  4566  02C9  0020               	movlb	0	; select bank0
  4567  02CA  01BF               	clrf	printf@width
  4568  02CB  01C0               	clrf	printf@width+1
  4569  02CC                     l3612:	
  4570                           ;doprnt.c: 599: do {
  4571                           
  4572                           
  4573                           ;doprnt.c: 600: width *= 10;
  4574  02CC  300A               	movlw	10
  4575  02CD  0020               	movlb	0	; select bank0
  4576  02CE  00A0               	movwf	___wmul@multiplier
  4577  02CF  3000               	movlw	0
  4578  02D0  00A1               	movwf	___wmul@multiplier+1
  4579  02D1  0840               	movf	printf@width+1,w
  4580  02D2  00A3               	movwf	___wmul@multiplicand+1
  4581  02D3  083F               	movf	printf@width,w
  4582  02D4  00A2               	movwf	___wmul@multiplicand
  4583  02D5  3189  2117  3182   	fcall	___wmul
  4584  02D8  0020               	movlb	0	; select bank0
  4585  02D9  0821               	movf	?___wmul+1,w
  4586  02DA  00C0               	movwf	printf@width+1
  4587  02DB  0820               	movf	?___wmul,w
  4588  02DC  00BF               	movwf	printf@width
  4589                           
  4590                           ;doprnt.c: 601: width += *f++ - '0';
  4591  02DD  082E               	movf	printf@f,w
  4592  02DE  0084               	movwf	4
  4593  02DF  082F               	movf	printf@f+1,w
  4594  02E0  0085               	movwf	5
  4595  02E1  0800               	movf	0,w	;code access
  4596  02E2  3ED0               	addlw	208
  4597  02E3  00B2               	movwf	??_printf
  4598  02E4  30FF               	movlw	255
  4599  02E5  1803               	skipnc
  4600  02E6  3000               	movlw	0
  4601  02E7  00B3               	movwf	??_printf+1
  4602  02E8  0832               	movf	??_printf,w
  4603  02E9  07BF               	addwf	printf@width,f
  4604  02EA  0833               	movf	??_printf+1,w
  4605  02EB  3DC0               	addwfc	printf@width+1,f
  4606  02EC  3001               	movlw	1
  4607  02ED  07AE               	addwf	printf@f,f
  4608  02EE  3000               	movlw	0
  4609  02EF  3DAF               	addwfc	printf@f+1,f
  4610                           
  4611                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4612  02F0  082E               	movf	printf@f,w
  4613  02F1  0084               	movwf	4
  4614  02F2  082F               	movf	printf@f+1,w
  4615  02F3  0085               	movwf	5
  4616  02F4  0800               	movf	0,w	;code access
  4617  02F5  3188  204F  3182   	fcall	_isdigit
  4618  02F8  1C03               	btfss	3,0
  4619  02F9  2B60               	goto	l3656
  4620  02FA  2ACC               	goto	l3612
  4621  02FB                     l3620:	
  4622                           ;doprnt.c: 728: case 's':
  4623                           
  4624                           ;doprnt.c: 698: case 'i':
  4625                           ;doprnt.c: 699: break;
  4626                           
  4627                           ;doprnt.c: 697: case 'd':
  4628                           
  4629                           ;doprnt.c: 638: goto alldone;
  4630                           
  4631                           ;doprnt.c: 637: case 0:
  4632                           
  4633                           ;doprnt.c: 608: }
  4634                           ;doprnt.c: 635: switch(c = *f++) {
  4635                           
  4636                           
  4637                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4638  02FB  0020               	movlb	0	; select bank0
  4639  02FC  0839               	movf	printf@ap,w
  4640  02FD  0086               	movwf	6
  4641  02FE  0187               	clrf	7
  4642  02FF  3F40               	moviw [0]fsr1
  4643  0300  00B7               	movwf	printf@cp
  4644  0301  3F41               	moviw [1]fsr1
  4645  0302  00B8               	movwf	printf@cp+1
  4646  0303  3002               	movlw	2
  4647  0304  00B2               	movwf	??_printf
  4648  0305  0832               	movf	??_printf,w
  4649  0306  07B9               	addwf	printf@ap,f
  4650                           
  4651                           ;doprnt.c: 740: if(!cp)
  4652  0307  0837               	movf	printf@cp,w
  4653  0308  0438               	iorwf	printf@cp+1,w
  4654  0309  1D03               	btfss	3,2
  4655  030A  2B0F               	goto	l3628
  4656                           
  4657                           ;doprnt.c: 741: cp = "(null)";
  4658  030B  30AF               	movlw	low (STR_17| (0+32768))
  4659  030C  00B7               	movwf	printf@cp
  4660  030D  3087               	movlw	high (STR_17| (0+32768))
  4661  030E  00B8               	movwf	printf@cp+1
  4662  030F                     l3628:	
  4663                           
  4664                           ;doprnt.c: 745: len = 0;
  4665  030F  01BC               	clrf	printf@len
  4666  0310  01BD               	clrf	printf@len+1
  4667  0311                     l3632:	
  4668                           ;doprnt.c: 746: while(cp[len])
  4669                           
  4670  0311  0837               	movf	printf@cp,w
  4671  0312  073C               	addwf	printf@len,w
  4672  0313  0084               	movwf	4
  4673  0314  0838               	movf	printf@cp+1,w
  4674  0315  3D3D               	addwfc	printf@len+1,w
  4675  0316  0085               	movwf	5
  4676  0317  0012               	moviw fsr0++
  4677  0318  1903               	btfsc	3,2
  4678  0319  2B1F               	goto	l3634
  4679                           
  4680                           ;doprnt.c: 747: len++;
  4681  031A  3001               	movlw	1
  4682  031B  07BC               	addwf	printf@len,f
  4683  031C  3000               	movlw	0
  4684  031D  3DBD               	addwfc	printf@len+1,f
  4685  031E  2B11               	goto	l3632
  4686  031F                     l3634:	
  4687                           ;doprnt.c: 750: dostring:
  4688                           
  4689                           
  4690                           ;doprnt.c: 757: if(width > len)
  4691  031F  0840               	movf	printf@width+1,w
  4692  0320  023D               	subwf	printf@len+1,w
  4693  0321  1D03               	skipz
  4694  0322  2B25               	goto	u2475
  4695  0323  083F               	movf	printf@width,w
  4696  0324  023C               	subwf	printf@len,w
  4697  0325                     u2475:	
  4698  0325  1803               	skipnc
  4699  0326  2B2C               	goto	l3638
  4700                           
  4701                           ;doprnt.c: 758: width -= len;
  4702  0327  083C               	movf	printf@len,w
  4703  0328  02BF               	subwf	printf@width,f
  4704  0329  083D               	movf	printf@len+1,w
  4705  032A  3BC0               	subwfb	printf@width+1,f
  4706  032B  2B2E               	goto	l3642
  4707  032C                     l3638:	
  4708                           
  4709                           ;doprnt.c: 759: else
  4710                           ;doprnt.c: 760: width = 0;
  4711  032C  01BF               	clrf	printf@width
  4712  032D  01C0               	clrf	printf@width+1
  4713  032E                     l3642:	
  4714                           ;doprnt.c: 764: while(width--)
  4715                           
  4716  032E  30FF               	movlw	255
  4717  032F  0020               	movlb	0	; select bank0
  4718  0330  07BF               	addwf	printf@width,f
  4719  0331  30FF               	movlw	255
  4720  0332  3DC0               	addwfc	printf@width+1,f
  4721  0333  0A3F               	incf	printf@width,w
  4722  0334  1903               	btfsc	3,2
  4723  0335  0A40               	incf	printf@width+1,w
  4724  0336  1903               	btfsc	3,2
  4725  0337  2B4A               	goto	l3648
  4726                           
  4727                           ;doprnt.c: 765: (putch(' ') );
  4728  0338  3020               	movlw	32
  4729  0339  3197  2774  3182   	fcall	_putch
  4730  033C  2B2E               	goto	l3642
  4731  033D                     l3644:	
  4732                           ;doprnt.c: 767: while(len--)
  4733                           
  4734                           
  4735                           ;doprnt.c: 768: (putch(*cp++) );
  4736  033D  0837               	movf	printf@cp,w
  4737  033E  0084               	movwf	4
  4738  033F  0838               	movf	printf@cp+1,w
  4739  0340  0085               	movwf	5
  4740  0341  0800               	movf	0,w	;code access
  4741  0342  3197  2774  3182   	fcall	_putch
  4742  0345  3001               	movlw	1
  4743  0346  0020               	movlb	0	; select bank0
  4744  0347  07B7               	addwf	printf@cp,f
  4745  0348  3000               	movlw	0
  4746  0349  3DB8               	addwfc	printf@cp+1,f
  4747  034A                     l3648:	
  4748  034A  3001               	movlw	1
  4749  034B  02BC               	subwf	printf@len,f
  4750  034C  3000               	movlw	0
  4751  034D  3BBD               	subwfb	printf@len+1,f
  4752  034E  0A3C               	incf	printf@len,w
  4753  034F  1D03               	skipz
  4754  0350  2B3D               	goto	l3644
  4755  0351  0A3D               	incf	printf@len+1,w
  4756  0352  1903               	btfsc	3,2
  4757  0353  2A90               	goto	l3724
  4758  0354  2B3D               	goto	l3644
  4759  0355                     l3650:	
  4760                           ;doprnt.c: 802: default:
  4761                           
  4762                           ;doprnt.c: 774: continue;
  4763                           
  4764                           
  4765                           ;doprnt.c: 805: cp = (char *)&c;
  4766  0355  3041               	movlw	low printf@c
  4767  0356  00B7               	movwf	printf@cp
  4768  0357  3000               	movlw	high printf@c
  4769  0358  00B8               	movwf	printf@cp+1
  4770                           
  4771                           ;doprnt.c: 806: len = 1;
  4772  0359  3001               	movlw	1
  4773  035A  00BC               	movwf	printf@len
  4774  035B  3000               	movlw	0
  4775  035C  00BD               	movwf	printf@len+1
  4776                           
  4777                           ;doprnt.c: 807: goto dostring;
  4778  035D  2B1F               	goto	l3634
  4779  035E                     l664:	
  4780                           ;doprnt.c: 817: case 'u':
  4781                           
  4782                           
  4783                           ;doprnt.c: 818: flag |= 0x40;
  4784  035E  173E               	bsf	printf@flag,6
  4785                           
  4786                           ;doprnt.c: 822: }
  4787                           
  4788                           ;doprnt.c: 819: break;
  4789  035F  2B7E               	goto	l648
  4790  0360                     l3656:	
  4791  0360  0020               	movlb	0	; select bank0
  4792  0361  082F               	movf	printf@f+1,w
  4793  0362  00B3               	movwf	??_printf+1
  4794  0363  082E               	movf	printf@f,w
  4795  0364  00B2               	movwf	??_printf
  4796  0365  0AAE               	incf	printf@f,f
  4797  0366  1903               	skipnz
  4798  0367  0AAF               	incf	printf@f+1,f
  4799  0368  0832               	movf	??_printf,w
  4800  0369  0084               	movwf	4
  4801  036A  0833               	movf	??_printf+1,w
  4802  036B  0085               	movwf	5
  4803  036C  0800               	movf	0,w	;code access
  4804  036D  00C1               	movwf	printf@c
  4805                           
  4806                           ; Switch size 1, requested type "space"
  4807                           ; Number of cases is 5, Range of values is 0 to 117
  4808                           ; switch strategies available:
  4809                           ; Name         Instructions Cycles
  4810                           ; simple_byte           16     9 (average)
  4811                           ; direct_byte          242     6 (fixed)
  4812                           ; jumptable            260     6 (fixed)
  4813                           ;	Chosen strategy is simple_byte
  4814  036E  3A00               	xorlw	0	; case 0
  4815  036F  1903               	skipnz
  4816  0370  2C5F               	goto	l688
  4817  0371  3A64               	xorlw	100	; case 100
  4818  0372  1903               	skipnz
  4819  0373  2B7E               	goto	l648
  4820  0374  3A0D               	xorlw	13	; case 105
  4821  0375  1903               	skipnz
  4822  0376  2B7E               	goto	l648
  4823  0377  3A1A               	xorlw	26	; case 115
  4824  0378  1903               	skipnz
  4825  0379  2AFB               	goto	l3620
  4826  037A  3A06               	xorlw	6	; case 117
  4827  037B  1903               	skipnz
  4828  037C  2B5E               	goto	l664
  4829  037D  2B55               	goto	l3650
  4830  037E                     l648:	
  4831                           
  4832                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  4833  037E  0020               	movlb	0	; select bank0
  4834  037F  1B3E               	btfsc	printf@flag,6
  4835  0380  2B98               	goto	l3668
  4836                           
  4837                           ;doprnt.c: 1253: {
  4838                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4839  0381  0839               	movf	printf@ap,w
  4840  0382  0086               	movwf	6
  4841  0383  0187               	clrf	7
  4842  0384  3F40               	moviw [0]fsr1
  4843  0385  00BA               	movwf	printf@val
  4844  0386  3F41               	moviw [1]fsr1
  4845  0387  00BB               	movwf	printf@val+1
  4846  0388  3002               	movlw	2
  4847  0389  00B2               	movwf	??_printf
  4848  038A  0832               	movf	??_printf,w
  4849  038B  07B9               	addwf	printf@ap,f
  4850                           
  4851                           ;doprnt.c: 1261: if((int)val < 0) {
  4852  038C  1FBB               	btfss	printf@val+1,7
  4853  038D  2BA3               	goto	l3672
  4854                           
  4855                           ;doprnt.c: 1262: flag |= 0x03;
  4856  038E  3003               	movlw	3
  4857  038F  00B2               	movwf	??_printf
  4858  0390  0832               	movf	??_printf,w
  4859  0391  04BE               	iorwf	printf@flag,f
  4860                           
  4861                           ;doprnt.c: 1263: val = -val;
  4862  0392  09BA               	comf	printf@val,f
  4863  0393  09BB               	comf	printf@val+1,f
  4864  0394  0ABA               	incf	printf@val,f
  4865  0395  1903               	skipnz
  4866  0396  0ABB               	incf	printf@val+1,f
  4867                           
  4868                           ;doprnt.c: 1264: }
  4869                           ;doprnt.c: 1266: }
  4870  0397  2BA3               	goto	l3672
  4871  0398                     l3668:	
  4872                           
  4873                           ;doprnt.c: 1268: else
  4874                           ;doprnt.c: 1273: {
  4875                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4876  0398  0839               	movf	printf@ap,w
  4877  0399  0086               	movwf	6
  4878  039A  0187               	clrf	7
  4879  039B  3F40               	moviw [0]fsr1
  4880  039C  00BA               	movwf	printf@val
  4881  039D  3F41               	moviw [1]fsr1
  4882  039E  00BB               	movwf	printf@val+1
  4883  039F  3002               	movlw	2
  4884  03A0  00B2               	movwf	??_printf
  4885  03A1  0832               	movf	??_printf,w
  4886  03A2  07B9               	addwf	printf@ap,f
  4887  03A3                     l3672:	
  4888                           
  4889                           ;doprnt.c: 1287: }
  4890                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4891  03A3  01C1               	clrf	printf@c
  4892  03A4  0AC1               	incf	printf@c,f
  4893  03A5  3005               	movlw	5
  4894  03A6  0641               	xorwf	printf@c,w
  4895  03A7  1903               	btfsc	3,2
  4896  03A8  2BC8               	goto	l3684
  4897  03A9                     l3678:	
  4898                           
  4899                           ;doprnt.c: 1306: if(val < dpowers[c])
  4900  03A9  0841               	movf	printf@c,w
  4901  03AA  00B2               	movwf	??_printf
  4902  03AB  01B3               	clrf	??_printf+1
  4903  03AC  35B2               	lslf	??_printf,f
  4904  03AD  0DB3               	rlf	??_printf+1,f
  4905  03AE  3027               	movlw	low (_dpowers| (0+32768))
  4906  03AF  0732               	addwf	??_printf,w
  4907  03B0  0084               	movwf	4
  4908  03B1  3087               	movlw	high (_dpowers| (0+32768))
  4909  03B2  3D33               	addwfc	??_printf+1,w
  4910  03B3  0085               	movwf	5
  4911  03B4  3F00               	moviw [0]fsr0
  4912  03B5  00B4               	movwf	??_printf+2
  4913  03B6  3F01               	moviw [1]fsr0
  4914  03B7  00B5               	movwf	??_printf+3
  4915  03B8  0835               	movf	??_printf+3,w
  4916  03B9  023B               	subwf	printf@val+1,w
  4917  03BA  1D03               	skipz
  4918  03BB  2BBE               	goto	u2535
  4919  03BC  0834               	movf	??_printf+2,w
  4920  03BD  023A               	subwf	printf@val,w
  4921  03BE                     u2535:	
  4922  03BE  1C03               	btfss	3,0
  4923  03BF  2BC8               	goto	l3684
  4924                           
  4925                           ;doprnt.c: 1307: break;
  4926  03C0  3001               	movlw	1
  4927  03C1  00B2               	movwf	??_printf
  4928  03C2  0832               	movf	??_printf,w
  4929  03C3  07C1               	addwf	printf@c,f
  4930  03C4  3005               	movlw	5
  4931  03C5  0641               	xorwf	printf@c,w
  4932  03C6  1D03               	btfss	3,2
  4933  03C7  2BA9               	goto	l3678
  4934  03C8                     l3684:	
  4935                           
  4936                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4937  03C8  083F               	movf	printf@width,w
  4938  03C9  0440               	iorwf	printf@width+1,w
  4939  03CA  1903               	btfsc	3,2
  4940  03CB  2BD4               	goto	l671
  4941  03CC  083E               	movf	printf@flag,w
  4942  03CD  3903               	andlw	3
  4943  03CE  1903               	btfsc	3,2
  4944  03CF  2BD4               	goto	l671
  4945                           
  4946                           ;doprnt.c: 1346: width--;
  4947  03D0  30FF               	movlw	255
  4948  03D1  07BF               	addwf	printf@width,f
  4949  03D2  30FF               	movlw	255
  4950  03D3  3DC0               	addwfc	printf@width+1,f
  4951  03D4                     l671:	
  4952                           
  4953                           ;doprnt.c: 1381: if(width > c)
  4954  03D4  0841               	movf	printf@c,w
  4955  03D5  00B2               	movwf	??_printf
  4956  03D6  01B3               	clrf	??_printf+1
  4957  03D7  1BB2               	btfsc	??_printf,7
  4958  03D8  03B3               	decf	??_printf+1,f
  4959  03D9  0833               	movf	??_printf+1,w
  4960  03DA  3A80               	xorlw	128
  4961  03DB  00B4               	movwf	??_printf+2
  4962  03DC  0840               	movf	printf@width+1,w
  4963  03DD  3A80               	xorlw	128
  4964  03DE  0234               	subwf	??_printf+2,w
  4965  03DF  1D03               	skipz
  4966  03E0  2BE3               	goto	u2575
  4967  03E1  083F               	movf	printf@width,w
  4968  03E2  0232               	subwf	??_printf,w
  4969  03E3                     u2575:	
  4970  03E3  1803               	skipnc
  4971  03E4  2BF0               	goto	l3692
  4972                           
  4973                           ;doprnt.c: 1382: width -= c;
  4974  03E5  0020               	movlb	0	; select bank0
  4975  03E6  0841               	movf	printf@c,w
  4976  03E7  00B2               	movwf	??_printf
  4977  03E8  01B3               	clrf	??_printf+1
  4978  03E9  1BB2               	btfsc	??_printf,7
  4979  03EA  03B3               	decf	??_printf+1,f
  4980  03EB  0832               	movf	??_printf,w
  4981  03EC  02BF               	subwf	printf@width,f
  4982  03ED  0833               	movf	??_printf+1,w
  4983  03EE  3BC0               	subwfb	printf@width+1,f
  4984  03EF  2BF3               	goto	l3694
  4985  03F0                     l3692:	
  4986                           
  4987                           ;doprnt.c: 1383: else
  4988                           ;doprnt.c: 1384: width = 0;
  4989  03F0  0020               	movlb	0	; select bank0
  4990  03F1  01BF               	clrf	printf@width
  4991  03F2  01C0               	clrf	printf@width+1
  4992  03F3                     l3694:	
  4993                           
  4994                           ;doprnt.c: 1387: if(flag & 0x04) {
  4995  03F3  1D3E               	btfss	printf@flag,2
  4996  03F4  2C0C               	goto	l3706
  4997                           
  4998                           ;doprnt.c: 1392: if(flag & 0x03)
  4999  03F5  083E               	movf	printf@flag,w
  5000  03F6  3903               	andlw	3
  5001  03F7  1903               	btfsc	3,2
  5002  03F8  2BFD               	goto	l3700
  5003                           
  5004                           ;doprnt.c: 1393: (putch('-') );
  5005  03F9  302D               	movlw	45
  5006  03FA  3197  2774  3182   	fcall	_putch
  5007  03FD                     l3700:	
  5008                           
  5009                           ;doprnt.c: 1415: if(width)
  5010  03FD  0020               	movlb	0	; select bank0
  5011  03FE                     L2:	
  5012  03FE  083F               	movf	printf@width,w
  5013  03FF  0440               	iorwf	printf@width+1,w
  5014  0400  1903               	btfsc	3,2
  5015  0401  2C25               	goto	l3716
  5016                           
  5017                           ;doprnt.c: 1417: (putch('0') );
  5018                           
  5019                           ;doprnt.c: 1416: do
  5020  0402  3030               	movlw	48
  5021  0403  3197  2774  3182   	fcall	_putch
  5022                           
  5023                           ;doprnt.c: 1418: while(--width);
  5024  0406  30FF               	movlw	255
  5025  0407  0020               	movlb	0	; select bank0
  5026  0408  07BF               	addwf	printf@width,f
  5027  0409  30FF               	movlw	255
  5028  040A  3DC0               	addwfc	printf@width+1,f
  5029  040B  2BFE               	goto	L2
  5030  040C                     l3706:	
  5031                           ;doprnt.c: 1420: } else
  5032                           
  5033                           
  5034                           ;doprnt.c: 1422: {
  5035                           ;doprnt.c: 1424: if(width
  5036                           ;doprnt.c: 1428: )
  5037  040C  083F               	movf	printf@width,w
  5038  040D  0440               	iorwf	printf@width+1,w
  5039  040E  1903               	btfsc	3,2
  5040  040F  2C1D               	goto	l3712
  5041  0410                     l3708:	
  5042                           ;doprnt.c: 1429: do
  5043                           
  5044                           
  5045                           ;doprnt.c: 1430: (putch(' ') );
  5046  0410  3020               	movlw	32
  5047  0411  3197  2774  3182   	fcall	_putch
  5048                           
  5049                           ;doprnt.c: 1431: while(--width);
  5050  0414  30FF               	movlw	255
  5051  0415  0020               	movlb	0	; select bank0
  5052  0416  07BF               	addwf	printf@width,f
  5053  0417  30FF               	movlw	255
  5054  0418  3DC0               	addwfc	printf@width+1,f
  5055  0419  083F               	movf	printf@width,w
  5056  041A  0440               	iorwf	printf@width+1,w
  5057  041B  1D03               	btfss	3,2
  5058  041C  2C10               	goto	l3708
  5059  041D                     l3712:	
  5060                           
  5061                           ;doprnt.c: 1438: if(flag & 0x03)
  5062  041D  083E               	movf	printf@flag,w
  5063  041E  3903               	andlw	3
  5064  041F  1903               	btfsc	3,2
  5065  0420  2C25               	goto	l3716
  5066                           
  5067                           ;doprnt.c: 1439: (putch('-') );
  5068  0421  302D               	movlw	45
  5069  0422  3197  2774  3182   	fcall	_putch
  5070  0425                     l3716:	
  5071                           
  5072                           ;doprnt.c: 1469: }
  5073                           ;doprnt.c: 1472: prec = c;
  5074  0425  0020               	movlb	0	; select bank0
  5075  0426  0841               	movf	printf@c,w
  5076  0427  00B2               	movwf	??_printf
  5077  0428  0832               	movf	??_printf,w
  5078  0429  00B6               	movwf	printf@prec
  5079  042A                     l3722:	
  5080                           ;doprnt.c: 1474: while(prec--) {
  5081                           
  5082  042A  30FF               	movlw	255
  5083  042B  0020               	movlb	0	; select bank0
  5084  042C  00B2               	movwf	??_printf
  5085  042D  0832               	movf	??_printf,w
  5086  042E  07B6               	addwf	printf@prec,f
  5087  042F  0A36               	incf	printf@prec,w
  5088  0430  1903               	btfsc	3,2
  5089  0431  2A90               	goto	l3724
  5090                           
  5091                           ;doprnt.c: 1478: {
  5092                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5093  0432  300A               	movlw	10
  5094  0433  00A8               	movwf	___lwmod@divisor
  5095  0434  3000               	movlw	0
  5096  0435  00A9               	movwf	___lwmod@divisor+1
  5097  0436  0836               	movf	printf@prec,w
  5098  0437  00B2               	movwf	??_printf
  5099  0438  01B3               	clrf	??_printf+1
  5100  0439  35B2               	lslf	??_printf,f
  5101  043A  0DB3               	rlf	??_printf+1,f
  5102  043B  3027               	movlw	low (_dpowers| (0+32768))
  5103  043C  0732               	addwf	??_printf,w
  5104  043D  0084               	movwf	4
  5105  043E  3087               	movlw	high (_dpowers| (0+32768))
  5106  043F  3D33               	addwfc	??_printf+1,w
  5107  0440  0085               	movwf	5
  5108  0441  3F00               	moviw [0]fsr0
  5109  0442  00A0               	movwf	___lwdiv@divisor
  5110  0443  3F01               	moviw [1]fsr0
  5111  0444  00A1               	movwf	___lwdiv@divisor+1
  5112  0445  083B               	movf	printf@val+1,w
  5113  0446  00A3               	movwf	___lwdiv@dividend+1
  5114  0447  083A               	movf	printf@val,w
  5115  0448  00A2               	movwf	___lwdiv@dividend
  5116  0449  318B  2304  3182   	fcall	___lwdiv
  5117  044C  0020               	movlb	0	; select bank0
  5118  044D  0821               	movf	?___lwdiv+1,w
  5119  044E  00AB               	movwf	___lwmod@dividend+1
  5120  044F  0820               	movf	?___lwdiv,w
  5121  0450  00AA               	movwf	___lwmod@dividend
  5122  0451  318A  22A7  3182   	fcall	___lwmod
  5123  0454  0020               	movlb	0	; select bank0
  5124  0455  0828               	movf	?___lwmod,w
  5125  0456  3E30               	addlw	48
  5126  0457  00B4               	movwf	??_printf+2
  5127  0458  0834               	movf	??_printf+2,w
  5128  0459  00C1               	movwf	printf@c
  5129                           
  5130                           ;doprnt.c: 1523: }
  5131                           ;doprnt.c: 1524: (putch(c) );
  5132  045A  0841               	movf	printf@c,w
  5133  045B  3197  2774  3182   	fcall	_putch
  5134  045E  2C2A               	goto	l3722
  5135  045F                     l688:	
  5136                           ;doprnt.c: 1540: return 0;
  5137                           ;	Return value of _printf is never used
  5138                           
  5139                           ;doprnt.c: 1525: }
  5140                           ;doprnt.c: 1533: }
  5141                           ;doprnt.c: 1535: alldone:
  5142                           
  5143  045F  0008               	return
  5144  0460                     __end_of_printf:	
  5145                           
  5146                           	psect	text8
  5147  1774                     __ptext8:	
  5148 ;; *************** function _putch *****************
  5149 ;; Defined at:
  5150 ;;		line 160 in file "mcc_generated_files/eusart.c"
  5151 ;; Parameters:    Size  Location     Type
  5152 ;;  txData          1    wreg     unsigned char 
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;  txData          1    2[BANK0 ] unsigned char 
  5155 ;; Return value:  Size  Location     Type
  5156 ;;                  1    wreg      void 
  5157 ;; Registers used:
  5158 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5165 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5167 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5168 ;;Total ram usage:        1 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:    7
  5171 ;; This function calls:
  5172 ;;		_EUSART_Write
  5173 ;; This function is called by:
  5174 ;;		_printf
  5175 ;; This function uses a non-reentrant model
  5176 ;;
  5177                           
  5178                           
  5179                           ;psect for function _putch
  5180  1774                     _putch:	
  5181                           
  5182                           ;incstack = 0
  5183                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5184                           ;putch@txData stored from wreg
  5185  1774  0020               	movlb	0	; select bank0
  5186  1775  00A2               	movwf	putch@txData
  5187                           
  5188                           ;eusart.c: 162: EUSART_Write(txData);
  5189  1776  0822               	movf	putch@txData,w
  5190  1777  318A  220E         	fcall	_EUSART_Write
  5191  1779  0008               	return
  5192  177A                     __end_of_putch:	
  5193                           
  5194                           	psect	text9
  5195  0A0E                     __ptext9:	
  5196 ;; *************** function _EUSART_Write *****************
  5197 ;; Defined at:
  5198 ;;		line 132 in file "mcc_generated_files/eusart.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;  txData          1    wreg     unsigned char 
  5201 ;; Auto vars:     Size  Location     Type
  5202 ;;  txData          1    1[BANK0 ] unsigned char 
  5203 ;; Return value:  Size  Location     Type
  5204 ;;                  1    wreg      void 
  5205 ;; Registers used:
  5206 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5207 ;; Tracked objects:
  5208 ;;		On entry : 0/0
  5209 ;;		On exit  : 0/0
  5210 ;;		Unchanged: 0/0
  5211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5214 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5215 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5216 ;;Total ram usage:        2 bytes
  5217 ;; Hardware stack levels used:    1
  5218 ;; Hardware stack levels required when called:    6
  5219 ;; This function calls:
  5220 ;;		Nothing
  5221 ;; This function is called by:
  5222 ;;		_putch
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           
  5227                           ;psect for function _EUSART_Write
  5228  0A0E                     _EUSART_Write:	
  5229                           
  5230                           ;incstack = 0
  5231                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5232                           ;EUSART_Write@txData stored from wreg
  5233  0A0E  0020               	movlb	0	; select bank0
  5234  0A0F  00A1               	movwf	EUSART_Write@txData
  5235  0A10                     l3012:	
  5236                           ;eusart.c: 135: {
  5237                           
  5238                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  5239                           
  5240  0A10  085E               	movf	_eusartTxBufferRemaining,w	;volatile
  5241  0A11  1903               	btfsc	3,2
  5242  0A12  2A10               	goto	l3012
  5243                           
  5244                           ;eusart.c: 136: }
  5245                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  5246  0A13  0021               	movlb	1	; select bank1
  5247  0A14  1A11               	btfsc	17,4	;volatile
  5248  0A15  2A1B               	goto	l383
  5249                           
  5250                           ;eusart.c: 139: {
  5251                           ;eusart.c: 140: TXREG = txData;
  5252  0A16  0020               	movlb	0	; select bank0
  5253  0A17  0821               	movf	EUSART_Write@txData,w
  5254  0A18  0023               	movlb	3	; select bank3
  5255  0A19  009A               	movwf	26	;volatile
  5256                           
  5257                           ;eusart.c: 141: }
  5258  0A1A  2A2F               	goto	l3026
  5259  0A1B                     l383:	
  5260                           
  5261                           ;eusart.c: 142: else
  5262                           ;eusart.c: 143: {
  5263                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  5264  0A1B  1211               	bcf	17,4	;volatile
  5265                           
  5266                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  5267  0A1C  0020               	movlb	0	; select bank0
  5268  0A1D  0821               	movf	EUSART_Write@txData,w
  5269  0A1E  00A0               	movwf	??_EUSART_Write
  5270  0A1F  087C               	movf	_eusartTxHead,w
  5271  0A20  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5272  0A21  0086               	movwf	6
  5273  0A22  0187               	clrf	7
  5274  0A23  0820               	movf	??_EUSART_Write,w
  5275  0A24  0081               	movwf	1
  5276  0A25  3001               	movlw	1
  5277  0A26  00A0               	movwf	??_EUSART_Write
  5278  0A27  0820               	movf	??_EUSART_Write,w
  5279  0A28  07FC               	addwf	_eusartTxHead,f	;volatile
  5280                           
  5281                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5282  0A29  3008               	movlw	8
  5283  0A2A  027C               	subwf	_eusartTxHead,w	;volatile
  5284  0A2B  1803               	btfsc	3,0
  5285                           
  5286                           ;eusart.c: 147: {
  5287                           ;eusart.c: 148: eusartTxHead = 0;
  5288  0A2C  01FC               	clrf	_eusartTxHead	;volatile
  5289                           
  5290                           ;eusart.c: 149: }
  5291                           ;eusart.c: 150: eusartTxBufferRemaining--;
  5292  0A2D  3001               	movlw	1
  5293  0A2E  02DE               	subwf	_eusartTxBufferRemaining,f	;volatile
  5294  0A2F                     l3026:	
  5295                           
  5296                           ;eusart.c: 151: }
  5297                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  5298  0A2F  0021               	movlb	1	; select bank1
  5299  0A30  1611               	bsf	17,4	;volatile
  5300  0A31  0008               	return
  5301  0A32                     __end_of_EUSART_Write:	
  5302                           
  5303                           	psect	text10
  5304  0AA7                     __ptext10:	
  5305 ;; *************** function ___lwmod *****************
  5306 ;; Defined at:
  5307 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  5308 ;; Parameters:    Size  Location     Type
  5309 ;;  divisor         2    8[BANK0 ] unsigned int 
  5310 ;;  dividend        2   10[BANK0 ] unsigned int 
  5311 ;; Auto vars:     Size  Location     Type
  5312 ;;  counter         1   13[BANK0 ] unsigned char 
  5313 ;; Return value:  Size  Location     Type
  5314 ;;                  2    8[BANK0 ] unsigned int 
  5315 ;; Registers used:
  5316 ;;		wreg, status,2, status,0
  5317 ;; Tracked objects:
  5318 ;;		On entry : 0/0
  5319 ;;		On exit  : 0/0
  5320 ;;		Unchanged: 0/0
  5321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5322 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5324 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5325 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;Total ram usage:        6 bytes
  5327 ;; Hardware stack levels used:    1
  5328 ;; Hardware stack levels required when called:    6
  5329 ;; This function calls:
  5330 ;;		Nothing
  5331 ;; This function is called by:
  5332 ;;		_printf
  5333 ;; This function uses a non-reentrant model
  5334 ;;
  5335                           
  5336                           
  5337                           ;psect for function ___lwmod
  5338  0AA7                     ___lwmod:	
  5339                           
  5340                           ;incstack = 0
  5341                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5342  0AA7  0020               	movlb	0	; select bank0
  5343  0AA8  0828               	movf	___lwmod@divisor,w
  5344  0AA9  0429               	iorwf	___lwmod@divisor+1,w
  5345  0AAA  1903               	btfsc	3,2
  5346  0AAB  2ACF               	goto	l3332
  5347  0AAC  01AD               	clrf	___lwmod@counter
  5348  0AAD  0AAD               	incf	___lwmod@counter,f
  5349  0AAE                     l3322:	
  5350  0AAE  1BA9               	btfsc	___lwmod@divisor+1,7
  5351  0AAF  2ABA               	goto	l3324
  5352  0AB0  3001               	movlw	1
  5353  0AB1                     u2125:	
  5354  0AB1  35A8               	lslf	___lwmod@divisor,f
  5355  0AB2  0DA9               	rlf	___lwmod@divisor+1,f
  5356  0AB3  0B89               	decfsz	9,f
  5357  0AB4  2AB1               	goto	u2125
  5358  0AB5  3001               	movlw	1
  5359  0AB6  00AC               	movwf	??___lwmod
  5360  0AB7  082C               	movf	??___lwmod,w
  5361  0AB8  07AD               	addwf	___lwmod@counter,f
  5362  0AB9  2AAE               	goto	l3322
  5363  0ABA                     l3324:	
  5364  0ABA  0829               	movf	___lwmod@divisor+1,w
  5365  0ABB  022B               	subwf	___lwmod@dividend+1,w
  5366  0ABC  1D03               	skipz
  5367  0ABD  2AC0               	goto	u2145
  5368  0ABE  0828               	movf	___lwmod@divisor,w
  5369  0ABF  022A               	subwf	___lwmod@dividend,w
  5370  0AC0                     u2145:	
  5371  0AC0  1C03               	skipc
  5372  0AC1  2AC6               	goto	l3328
  5373  0AC2  0828               	movf	___lwmod@divisor,w
  5374  0AC3  02AA               	subwf	___lwmod@dividend,f
  5375  0AC4  0829               	movf	___lwmod@divisor+1,w
  5376  0AC5  3BAB               	subwfb	___lwmod@dividend+1,f
  5377  0AC6                     l3328:	
  5378  0AC6  3001               	movlw	1
  5379  0AC7                     u2155:	
  5380  0AC7  36A9               	lsrf	___lwmod@divisor+1,f
  5381  0AC8  0CA8               	rrf	___lwmod@divisor,f
  5382  0AC9  0B89               	decfsz	9,f
  5383  0ACA  2AC7               	goto	u2155
  5384  0ACB  3001               	movlw	1
  5385  0ACC  02AD               	subwf	___lwmod@counter,f
  5386  0ACD  1D03               	btfss	3,2
  5387  0ACE  2ABA               	goto	l3324
  5388  0ACF                     l3332:	
  5389  0ACF  082B               	movf	___lwmod@dividend+1,w
  5390  0AD0  00A9               	movwf	?___lwmod+1
  5391  0AD1  082A               	movf	___lwmod@dividend,w
  5392  0AD2  00A8               	movwf	?___lwmod
  5393  0AD3  0008               	return
  5394  0AD4                     __end_of___lwmod:	
  5395                           
  5396                           	psect	text11
  5397  0B04                     __ptext11:	
  5398 ;; *************** function ___lwdiv *****************
  5399 ;; Defined at:
  5400 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5401 ;; Parameters:    Size  Location     Type
  5402 ;;  divisor         2    0[BANK0 ] unsigned int 
  5403 ;;  dividend        2    2[BANK0 ] unsigned int 
  5404 ;; Auto vars:     Size  Location     Type
  5405 ;;  quotient        2    5[BANK0 ] unsigned int 
  5406 ;;  counter         1    7[BANK0 ] unsigned char 
  5407 ;; Return value:  Size  Location     Type
  5408 ;;                  2    0[BANK0 ] unsigned int 
  5409 ;; Registers used:
  5410 ;;		wreg, status,2, status,0
  5411 ;; Tracked objects:
  5412 ;;		On entry : 0/0
  5413 ;;		On exit  : 0/0
  5414 ;;		Unchanged: 0/0
  5415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5416 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5417 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5418 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5419 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5420 ;;Total ram usage:        8 bytes
  5421 ;; Hardware stack levels used:    1
  5422 ;; Hardware stack levels required when called:    6
  5423 ;; This function calls:
  5424 ;;		Nothing
  5425 ;; This function is called by:
  5426 ;;		_printf
  5427 ;; This function uses a non-reentrant model
  5428 ;;
  5429                           
  5430                           
  5431                           ;psect for function ___lwdiv
  5432  0B04                     ___lwdiv:	
  5433                           
  5434                           ;incstack = 0
  5435                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5436  0B04  0020               	movlb	0	; select bank0
  5437  0B05  01A5               	clrf	___lwdiv@quotient
  5438  0B06  01A6               	clrf	___lwdiv@quotient+1
  5439  0B07  0820               	movf	___lwdiv@divisor,w
  5440  0B08  0421               	iorwf	___lwdiv@divisor+1,w
  5441  0B09  1903               	btfsc	3,2
  5442  0B0A  2B34               	goto	l3310
  5443  0B0B  01A7               	clrf	___lwdiv@counter
  5444  0B0C  0AA7               	incf	___lwdiv@counter,f
  5445  0B0D                     l3298:	
  5446  0B0D  1BA1               	btfsc	___lwdiv@divisor+1,7
  5447  0B0E  2B19               	goto	l3300
  5448  0B0F  3001               	movlw	1
  5449  0B10                     u2055:	
  5450  0B10  35A0               	lslf	___lwdiv@divisor,f
  5451  0B11  0DA1               	rlf	___lwdiv@divisor+1,f
  5452  0B12  0B89               	decfsz	9,f
  5453  0B13  2B10               	goto	u2055
  5454  0B14  3001               	movlw	1
  5455  0B15  00A4               	movwf	??___lwdiv
  5456  0B16  0824               	movf	??___lwdiv,w
  5457  0B17  07A7               	addwf	___lwdiv@counter,f
  5458  0B18  2B0D               	goto	l3298
  5459  0B19                     l3300:	
  5460  0B19  3001               	movlw	1
  5461  0B1A                     u2075:	
  5462  0B1A  35A5               	lslf	___lwdiv@quotient,f
  5463  0B1B  0DA6               	rlf	___lwdiv@quotient+1,f
  5464  0B1C  0B89               	decfsz	9,f
  5465  0B1D  2B1A               	goto	u2075
  5466  0B1E  0821               	movf	___lwdiv@divisor+1,w
  5467  0B1F  0223               	subwf	___lwdiv@dividend+1,w
  5468  0B20  1D03               	skipz
  5469  0B21  2B24               	goto	u2085
  5470  0B22  0820               	movf	___lwdiv@divisor,w
  5471  0B23  0222               	subwf	___lwdiv@dividend,w
  5472  0B24                     u2085:	
  5473  0B24  1C03               	skipc
  5474  0B25  2B2B               	goto	l3306
  5475  0B26  0820               	movf	___lwdiv@divisor,w
  5476  0B27  02A2               	subwf	___lwdiv@dividend,f
  5477  0B28  0821               	movf	___lwdiv@divisor+1,w
  5478  0B29  3BA3               	subwfb	___lwdiv@dividend+1,f
  5479  0B2A  1425               	bsf	___lwdiv@quotient,0
  5480  0B2B                     l3306:	
  5481  0B2B  3001               	movlw	1
  5482  0B2C                     u2095:	
  5483  0B2C  36A1               	lsrf	___lwdiv@divisor+1,f
  5484  0B2D  0CA0               	rrf	___lwdiv@divisor,f
  5485  0B2E  0B89               	decfsz	9,f
  5486  0B2F  2B2C               	goto	u2095
  5487  0B30  3001               	movlw	1
  5488  0B31  02A7               	subwf	___lwdiv@counter,f
  5489  0B32  1D03               	btfss	3,2
  5490  0B33  2B19               	goto	l3300
  5491  0B34                     l3310:	
  5492  0B34  0826               	movf	___lwdiv@quotient+1,w
  5493  0B35  00A1               	movwf	?___lwdiv+1
  5494  0B36  0825               	movf	___lwdiv@quotient,w
  5495  0B37  00A0               	movwf	?___lwdiv
  5496  0B38  0008               	return
  5497  0B39                     __end_of___lwdiv:	
  5498                           
  5499                           	psect	text12
  5500  007E                     __ptext12:	
  5501 ;; *************** function _loop_func *****************
  5502 ;; Defined at:
  5503 ;;		line 121 in file "main.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;		None
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;  value           1   30[BANK0 ] unsigned char 
  5508 ;; Return value:  Size  Location     Type
  5509 ;;                  1    wreg      void 
  5510 ;; Registers used:
  5511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5518 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5519 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;Total ram usage:        3 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:   10
  5524 ;; This function calls:
  5525 ;;		_PROTOCOL_Read_Lock
  5526 ;;		_PROTOCOL_Set_Lock
  5527 ;;		_atoi
  5528 ;;		_i2c2_write
  5529 ;;		_lcd_clear
  5530 ;;		_lcd_contrast
  5531 ;;		_lcd_init
  5532 ;;		_lcd_string
  5533 ;;		_lcd_string_2lines
  5534 ;;		_strncmp
  5535 ;; This function is called by:
  5536 ;;		_main
  5537 ;;		_PROTOCOL_Loop
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           
  5542                           ;psect for function _loop_func
  5543  007E                     _loop_func:	
  5544                           
  5545                           ;main.c: 122: uint8_t value;
  5546                           ;main.c: 123: if(PROTOCOL_Read_Lock()) {
  5547                           
  5548                           ;incstack = 0
  5549                           ; Regs used in _loop_func: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5550  007E  3197  274E  3180   	fcall	_PROTOCOL_Read_Lock
  5551  0081  3A00               	xorlw	0
  5552  0082  1903               	skipnz
  5553  0083  0008               	return
  5554                           
  5555                           ;main.c: 125: if (!strncmp(("INI"), (pbuf), 3)) {
  5556  0084  30FD               	movlw	low (STR_1| (0+32768))
  5557  0085  0020               	movlb	0	; select bank0
  5558  0086  00A0               	movwf	strncmp@s1
  5559  0087  3087               	movlw	high (STR_1| (0+32768))
  5560  0088  00A1               	movwf	strncmp@s1+1
  5561  0089  0859               	movf	_pbuf,w
  5562  008A  00BC               	movwf	??_loop_func
  5563  008B  083C               	movf	??_loop_func,w
  5564  008C  00A2               	movwf	strncmp@s2
  5565  008D  3003               	movlw	3
  5566  008E  00A3               	movwf	strncmp@len
  5567  008F  3000               	movlw	0
  5568  0090  00A4               	movwf	strncmp@len+1
  5569  0091  318B  2375  3180   	fcall	_strncmp
  5570  0094  0020               	movlb	0	; select bank0
  5571  0095  0820               	movf	?_strncmp,w
  5572  0096  0421               	iorwf	?_strncmp+1,w
  5573  0097  1D03               	btfss	3,2
  5574  0098  289D               	goto	l3516
  5575                           
  5576                           ;main.c: 126: lcd_init();
  5577  0099  318D  2597  3180   	fcall	_lcd_init
  5578                           
  5579                           ;main.c: 127: } else if (!strncmp(("CMD"), (pbuf), 3)) {
  5580  009C  2A85               	goto	l3590
  5581  009D                     l3516:	
  5582  009D  30F5               	movlw	low (STR_2| (0+32768))
  5583  009E  0020               	movlb	0	; select bank0
  5584  009F  00A0               	movwf	strncmp@s1
  5585  00A0  3087               	movlw	high (STR_2| (0+32768))
  5586  00A1  00A1               	movwf	strncmp@s1+1
  5587  00A2  0859               	movf	_pbuf,w
  5588  00A3  00BC               	movwf	??_loop_func
  5589  00A4  083C               	movf	??_loop_func,w
  5590  00A5  00A2               	movwf	strncmp@s2
  5591  00A6  3003               	movlw	3
  5592  00A7  00A3               	movwf	strncmp@len
  5593  00A8  3000               	movlw	0
  5594  00A9  00A4               	movwf	strncmp@len+1
  5595  00AA  318B  2375  3180   	fcall	_strncmp
  5596  00AD  0020               	movlb	0	; select bank0
  5597  00AE  0820               	movf	?_strncmp,w
  5598  00AF  0421               	iorwf	?_strncmp+1,w
  5599  00B0  1D03               	btfss	3,2
  5600  00B1  28CD               	goto	l3522
  5601                           
  5602                           ;main.c: 128: value = atoi(&pbuf[4]);
  5603  00B2  0859               	movf	_pbuf,w
  5604  00B3  3E04               	addlw	4
  5605  00B4  318D  2526  3180   	fcall	_atoi
  5606  00B7  0020               	movlb	0	; select bank0
  5607  00B8  0826               	movf	?_atoi,w
  5608  00B9  00BC               	movwf	??_loop_func
  5609  00BA  083C               	movf	??_loop_func,w
  5610  00BB  00BE               	movwf	loop_func@value
  5611                           
  5612                           ;main.c: 129: i2c2_write(0x3e, 0x00, value); _delay((unsigned long)((1)*(4000000/4000.0)
      +                          ));;
  5613  00BC  303E               	movlw	62
  5614  00BD  00AE               	movwf	i2c2_write@dev_addr
  5615  00BE  3000               	movlw	0
  5616  00BF  00AF               	movwf	i2c2_write@dev_addr+1
  5617  00C0  01B0               	clrf	i2c2_write@reg_addr
  5618  00C1  083E               	movf	loop_func@value,w
  5619  00C2  00BC               	movwf	??_loop_func
  5620  00C3  083C               	movf	??_loop_func,w
  5621  00C4  00B1               	movwf	i2c2_write@data
  5622  00C5  318A  2232  3180   	fcall	_i2c2_write
  5623  00C8  30C8               	movlw	200
  5624  00C9                     u5157:	
  5625  00C9  3200               	nop2
  5626  00CA  0B89               	decfsz	9,f
  5627  00CB  28C9               	goto	u5157
  5628                           
  5629                           ;main.c: 130: } else if (!strncmp(("DAT"), (pbuf), 3)) {
  5630  00CC  2A85               	goto	l3590
  5631  00CD                     l3522:	
  5632  00CD  301D               	movlw	low (STR_3| (0+32768))
  5633  00CE  0020               	movlb	0	; select bank0
  5634  00CF  00A0               	movwf	strncmp@s1
  5635  00D0  3088               	movlw	high (STR_3| (0+32768))
  5636  00D1  00A1               	movwf	strncmp@s1+1
  5637  00D2  0859               	movf	_pbuf,w
  5638  00D3  00BC               	movwf	??_loop_func
  5639  00D4  083C               	movf	??_loop_func,w
  5640  00D5  00A2               	movwf	strncmp@s2
  5641  00D6  3003               	movlw	3
  5642  00D7  00A3               	movwf	strncmp@len
  5643  00D8  3000               	movlw	0
  5644  00D9  00A4               	movwf	strncmp@len+1
  5645  00DA  318B  2375  3180   	fcall	_strncmp
  5646  00DD  0020               	movlb	0	; select bank0
  5647  00DE  0820               	movf	?_strncmp,w
  5648  00DF  0421               	iorwf	?_strncmp+1,w
  5649  00E0  1D03               	btfss	3,2
  5650  00E1  2900               	goto	l3528
  5651                           
  5652                           ;main.c: 131: value = atoi(&pbuf[4]);
  5653  00E2  0859               	movf	_pbuf,w
  5654  00E3  3E04               	addlw	4
  5655  00E4  318D  2526  3180   	fcall	_atoi
  5656  00E7  0020               	movlb	0	; select bank0
  5657  00E8  0826               	movf	?_atoi,w
  5658  00E9  00BC               	movwf	??_loop_func
  5659  00EA  083C               	movf	??_loop_func,w
  5660  00EB  00BE               	movwf	loop_func@value
  5661                           
  5662                           ;main.c: 132: i2c2_write(0x3e, 0x40, value); _delay((unsigned long)((1)*(4000000/4000.0)
      +                          ));;
  5663  00EC  303E               	movlw	62
  5664  00ED  00AE               	movwf	i2c2_write@dev_addr
  5665  00EE  3000               	movlw	0
  5666  00EF  00AF               	movwf	i2c2_write@dev_addr+1
  5667  00F0  3040               	movlw	64
  5668  00F1  00BC               	movwf	??_loop_func
  5669  00F2  083C               	movf	??_loop_func,w
  5670  00F3  00B0               	movwf	i2c2_write@reg_addr
  5671  00F4  083E               	movf	loop_func@value,w
  5672  00F5  00BD               	movwf	??_loop_func+1
  5673  00F6  083D               	movf	??_loop_func+1,w
  5674  00F7  00B1               	movwf	i2c2_write@data
  5675  00F8  318A  2232  3180   	fcall	_i2c2_write
  5676  00FB  30C8               	movlw	200
  5677  00FC                     u5167:	
  5678  00FC  3200               	nop2
  5679  00FD  0B89               	decfsz	9,f
  5680  00FE  28FC               	goto	u5167
  5681                           
  5682                           ;main.c: 133: } else if (!strncmp(("CLR"), (pbuf), 3)) {
  5683  00FF  2A85               	goto	l3590
  5684  0100                     l3528:	
  5685  0100  3011               	movlw	low (STR_4| (0+32768))
  5686  0101  0020               	movlb	0	; select bank0
  5687  0102  00A0               	movwf	strncmp@s1
  5688  0103  3088               	movlw	high (STR_4| (0+32768))
  5689  0104  00A1               	movwf	strncmp@s1+1
  5690  0105  0859               	movf	_pbuf,w
  5691  0106  00BC               	movwf	??_loop_func
  5692  0107  083C               	movf	??_loop_func,w
  5693  0108  00A2               	movwf	strncmp@s2
  5694  0109  3003               	movlw	3
  5695  010A  00A3               	movwf	strncmp@len
  5696  010B  3000               	movlw	0
  5697  010C  00A4               	movwf	strncmp@len+1
  5698  010D  318B  2375  3180   	fcall	_strncmp
  5699  0110  0020               	movlb	0	; select bank0
  5700  0111  0820               	movf	?_strncmp,w
  5701  0112  0421               	iorwf	?_strncmp+1,w
  5702  0113  1D03               	btfss	3,2
  5703  0114  2919               	goto	l3532
  5704                           
  5705                           ;main.c: 134: lcd_clear();
  5706  0115  3188  207E  3180   	fcall	_lcd_clear
  5707                           
  5708                           ;main.c: 135: } else if (!strncmp(("STR"), (pbuf), 3)) {
  5709  0118  2A85               	goto	l3590
  5710  0119                     l3532:	
  5711  0119  3015               	movlw	low (STR_5| (0+32768))
  5712  011A  0020               	movlb	0	; select bank0
  5713  011B  00A0               	movwf	strncmp@s1
  5714  011C  3088               	movlw	high (STR_5| (0+32768))
  5715  011D  00A1               	movwf	strncmp@s1+1
  5716  011E  0859               	movf	_pbuf,w
  5717  011F  00BC               	movwf	??_loop_func
  5718  0120  083C               	movf	??_loop_func,w
  5719  0121  00A2               	movwf	strncmp@s2
  5720  0122  3003               	movlw	3
  5721  0123  00A3               	movwf	strncmp@len
  5722  0124  3000               	movlw	0
  5723  0125  00A4               	movwf	strncmp@len+1
  5724  0126  318B  2375  3180   	fcall	_strncmp
  5725  0129  0020               	movlb	0	; select bank0
  5726  012A  0820               	movf	?_strncmp,w
  5727  012B  0421               	iorwf	?_strncmp+1,w
  5728  012C  1D03               	btfss	3,2
  5729  012D  2932               	goto	l3536
  5730                           
  5731                           ;main.c: 136: lcd_string();
  5732  012E  318A  22D4  3180   	fcall	_lcd_string
  5733                           
  5734                           ;main.c: 137: } else if (!strncmp(("HST"), (pbuf), 3)) {
  5735  0131  2A85               	goto	l3590
  5736  0132                     l3536:	
  5737  0132  3025               	movlw	low (STR_6| (0+32768))
  5738  0133  0020               	movlb	0	; select bank0
  5739  0134  00A0               	movwf	strncmp@s1
  5740  0135  3088               	movlw	high (STR_6| (0+32768))
  5741  0136  00A1               	movwf	strncmp@s1+1
  5742  0137  0859               	movf	_pbuf,w
  5743  0138  00BC               	movwf	??_loop_func
  5744  0139  083C               	movf	??_loop_func,w
  5745  013A  00A2               	movwf	strncmp@s2
  5746  013B  3003               	movlw	3
  5747  013C  00A3               	movwf	strncmp@len
  5748  013D  3000               	movlw	0
  5749  013E  00A4               	movwf	strncmp@len+1
  5750  013F  318B  2375  3180   	fcall	_strncmp
  5751  0142  0020               	movlb	0	; select bank0
  5752  0143  0820               	movf	?_strncmp,w
  5753  0144  0421               	iorwf	?_strncmp+1,w
  5754  0145  1D03               	btfss	3,2
  5755  0146  295B               	goto	l3544
  5756                           
  5757                           ;main.c: 138: i2c2_write(0x3e, 0x00, 0x02); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  5758  0147  303E               	movlw	62
  5759  0148  00AE               	movwf	i2c2_write@dev_addr
  5760  0149  3000               	movlw	0
  5761  014A  00AF               	movwf	i2c2_write@dev_addr+1
  5762  014B  01B0               	clrf	i2c2_write@reg_addr
  5763  014C  3002               	movlw	2
  5764  014D  00BC               	movwf	??_loop_func
  5765  014E  083C               	movf	??_loop_func,w
  5766  014F  00B1               	movwf	i2c2_write@data
  5767  0150  318A  2232  3180   	fcall	_i2c2_write
  5768  0153  30C8               	movlw	200
  5769  0154                     u5177:	
  5770  0154  3200               	nop2
  5771  0155  0B89               	decfsz	9,f
  5772  0156  2954               	goto	u5177
  5773                           
  5774                           ;main.c: 139: lcd_string();
  5775  0157  318A  22D4  3180   	fcall	_lcd_string
  5776                           
  5777                           ;main.c: 140: } else if (!strncmp(("DSP"), (pbuf), 3)) {
  5778  015A  2A85               	goto	l3590
  5779  015B                     l3544:	
  5780  015B  300D               	movlw	low (STR_7| (0+32768))
  5781  015C  0020               	movlb	0	; select bank0
  5782  015D  00A0               	movwf	strncmp@s1
  5783  015E  3088               	movlw	high (STR_7| (0+32768))
  5784  015F  00A1               	movwf	strncmp@s1+1
  5785  0160  0859               	movf	_pbuf,w
  5786  0161  00BC               	movwf	??_loop_func
  5787  0162  083C               	movf	??_loop_func,w
  5788  0163  00A2               	movwf	strncmp@s2
  5789  0164  3003               	movlw	3
  5790  0165  00A3               	movwf	strncmp@len
  5791  0166  3000               	movlw	0
  5792  0167  00A4               	movwf	strncmp@len+1
  5793  0168  318B  2375  3180   	fcall	_strncmp
  5794  016B  0020               	movlb	0	; select bank0
  5795  016C  0820               	movf	?_strncmp,w
  5796  016D  0421               	iorwf	?_strncmp+1,w
  5797  016E  1D03               	btfss	3,2
  5798  016F  2984               	goto	l3552
  5799                           
  5800                           ;main.c: 141: i2c2_write(0x3e, 0x00, 0x02); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  5801  0170  303E               	movlw	62
  5802  0171  00AE               	movwf	i2c2_write@dev_addr
  5803  0172  3000               	movlw	0
  5804  0173  00AF               	movwf	i2c2_write@dev_addr+1
  5805  0174  01B0               	clrf	i2c2_write@reg_addr
  5806  0175  3002               	movlw	2
  5807  0176  00BC               	movwf	??_loop_func
  5808  0177  083C               	movf	??_loop_func,w
  5809  0178  00B1               	movwf	i2c2_write@data
  5810  0179  318A  2232  3180   	fcall	_i2c2_write
  5811  017C  30C8               	movlw	200
  5812  017D                     u5187:	
  5813  017D  3200               	nop2
  5814  017E  0B89               	decfsz	9,f
  5815  017F  297D               	goto	u5187
  5816                           
  5817                           ;main.c: 142: lcd_string_2lines();
  5818  0180  318C  243F  3180   	fcall	_lcd_string_2lines
  5819                           
  5820                           ;main.c: 143: } else if (!strncmp(("CUL"), (pbuf), 3)) {
  5821  0183  2A85               	goto	l3590
  5822  0184                     l3552:	
  5823  0184  3001               	movlw	low (STR_8| (0+32768))
  5824  0185  0020               	movlb	0	; select bank0
  5825  0186  00A0               	movwf	strncmp@s1
  5826  0187  3088               	movlw	high (STR_8| (0+32768))
  5827  0188  00A1               	movwf	strncmp@s1+1
  5828  0189  0859               	movf	_pbuf,w
  5829  018A  00BC               	movwf	??_loop_func
  5830  018B  083C               	movf	??_loop_func,w
  5831  018C  00A2               	movwf	strncmp@s2
  5832  018D  3003               	movlw	3
  5833  018E  00A3               	movwf	strncmp@len
  5834  018F  3000               	movlw	0
  5835  0190  00A4               	movwf	strncmp@len+1
  5836  0191  318B  2375  3180   	fcall	_strncmp
  5837  0194  0020               	movlb	0	; select bank0
  5838  0195  0820               	movf	?_strncmp,w
  5839  0196  0421               	iorwf	?_strncmp+1,w
  5840  0197  1D03               	btfss	3,2
  5841  0198  29AA               	goto	l3558
  5842                           
  5843                           ;main.c: 144: i2c2_write(0x3e, 0x00, 0x10); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  5844  0199  303E               	movlw	62
  5845  019A  00AE               	movwf	i2c2_write@dev_addr
  5846  019B  3000               	movlw	0
  5847  019C  00AF               	movwf	i2c2_write@dev_addr+1
  5848  019D  01B0               	clrf	i2c2_write@reg_addr
  5849  019E  3010               	movlw	16
  5850  019F  00BC               	movwf	??_loop_func
  5851  01A0  083C               	movf	??_loop_func,w
  5852  01A1  00B1               	movwf	i2c2_write@data
  5853  01A2  318A  2232  3180   	fcall	_i2c2_write
  5854  01A5  30C8               	movlw	200
  5855  01A6                     u5197:	
  5856  01A6  3200               	nop2
  5857  01A7  0B89               	decfsz	9,f
  5858  01A8  29A6               	goto	u5197
  5859                           
  5860                           ;main.c: 145: } else if (!strncmp(("CUR"), (pbuf), 3)) {
  5861  01A9  2A85               	goto	l3590
  5862  01AA                     l3558:	
  5863  01AA  3019               	movlw	low (STR_9| (0+32768))
  5864  01AB  0020               	movlb	0	; select bank0
  5865  01AC  00A0               	movwf	strncmp@s1
  5866  01AD  3088               	movlw	high (STR_9| (0+32768))
  5867  01AE  00A1               	movwf	strncmp@s1+1
  5868  01AF  0859               	movf	_pbuf,w
  5869  01B0  00BC               	movwf	??_loop_func
  5870  01B1  083C               	movf	??_loop_func,w
  5871  01B2  00A2               	movwf	strncmp@s2
  5872  01B3  3003               	movlw	3
  5873  01B4  00A3               	movwf	strncmp@len
  5874  01B5  3000               	movlw	0
  5875  01B6  00A4               	movwf	strncmp@len+1
  5876  01B7  318B  2375  3180   	fcall	_strncmp
  5877  01BA  0020               	movlb	0	; select bank0
  5878  01BB  0820               	movf	?_strncmp,w
  5879  01BC  0421               	iorwf	?_strncmp+1,w
  5880  01BD  1D03               	btfss	3,2
  5881  01BE  29D0               	goto	l3564
  5882                           
  5883                           ;main.c: 146: i2c2_write(0x3e, 0x00, 0x14); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  5884  01BF  303E               	movlw	62
  5885  01C0  00AE               	movwf	i2c2_write@dev_addr
  5886  01C1  3000               	movlw	0
  5887  01C2  00AF               	movwf	i2c2_write@dev_addr+1
  5888  01C3  01B0               	clrf	i2c2_write@reg_addr
  5889  01C4  3014               	movlw	20
  5890  01C5  00BC               	movwf	??_loop_func
  5891  01C6  083C               	movf	??_loop_func,w
  5892  01C7  00B1               	movwf	i2c2_write@data
  5893  01C8  318A  2232  3180   	fcall	_i2c2_write
  5894  01CB  30C8               	movlw	200
  5895  01CC                     u5207:	
  5896  01CC  3200               	nop2
  5897  01CD  0B89               	decfsz	9,f
  5898  01CE  29CC               	goto	u5207
  5899                           
  5900                           ;main.c: 147: } else if (!strncmp(("NWL"), (pbuf), 3)) {
  5901  01CF  2A85               	goto	l3590
  5902  01D0                     l3564:	
  5903  01D0  3005               	movlw	low (STR_10| (0+32768))
  5904  01D1  0020               	movlb	0	; select bank0
  5905  01D2  00A0               	movwf	strncmp@s1
  5906  01D3  3088               	movlw	high (STR_10| (0+32768))
  5907  01D4  00A1               	movwf	strncmp@s1+1
  5908  01D5  0859               	movf	_pbuf,w
  5909  01D6  00BC               	movwf	??_loop_func
  5910  01D7  083C               	movf	??_loop_func,w
  5911  01D8  00A2               	movwf	strncmp@s2
  5912  01D9  3003               	movlw	3
  5913  01DA  00A3               	movwf	strncmp@len
  5914  01DB  3000               	movlw	0
  5915  01DC  00A4               	movwf	strncmp@len+1
  5916  01DD  318B  2375  3180   	fcall	_strncmp
  5917  01E0  0020               	movlb	0	; select bank0
  5918  01E1  0820               	movf	?_strncmp,w
  5919  01E2  0421               	iorwf	?_strncmp+1,w
  5920  01E3  1D03               	btfss	3,2
  5921  01E4  29F6               	goto	l3570
  5922                           
  5923                           ;main.c: 148: i2c2_write(0x3e, 0x00, 0xc0); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  5924  01E5  303E               	movlw	62
  5925  01E6  00AE               	movwf	i2c2_write@dev_addr
  5926  01E7  3000               	movlw	0
  5927  01E8  00AF               	movwf	i2c2_write@dev_addr+1
  5928  01E9  01B0               	clrf	i2c2_write@reg_addr
  5929  01EA  30C0               	movlw	192
  5930  01EB  00BC               	movwf	??_loop_func
  5931  01EC  083C               	movf	??_loop_func,w
  5932  01ED  00B1               	movwf	i2c2_write@data
  5933  01EE  318A  2232  3180   	fcall	_i2c2_write
  5934  01F1  30C8               	movlw	200
  5935  01F2                     u5217:	
  5936  01F2  3200               	nop2
  5937  01F3  0B89               	decfsz	9,f
  5938  01F4  29F2               	goto	u5217
  5939                           
  5940                           ;main.c: 149: } else if (!strncmp(("HOM"), (pbuf), 3)) {
  5941  01F5  2A85               	goto	l3590
  5942  01F6                     l3570:	
  5943  01F6  3009               	movlw	low (STR_11| (0+32768))
  5944  01F7  0020               	movlb	0	; select bank0
  5945  01F8  00A0               	movwf	strncmp@s1
  5946  01F9  3088               	movlw	high (STR_11| (0+32768))
  5947  01FA  00A1               	movwf	strncmp@s1+1
  5948  01FB  0859               	movf	_pbuf,w
  5949  01FC  00BC               	movwf	??_loop_func
  5950  01FD  083C               	movf	??_loop_func,w
  5951  01FE  00A2               	movwf	strncmp@s2
  5952  01FF  3003               	movlw	3
  5953  0200  00A3               	movwf	strncmp@len
  5954  0201  3000               	movlw	0
  5955  0202  00A4               	movwf	strncmp@len+1
  5956  0203  318B  2375  3180   	fcall	_strncmp
  5957  0206  0020               	movlb	0	; select bank0
  5958  0207  0820               	movf	?_strncmp,w
  5959  0208  0421               	iorwf	?_strncmp+1,w
  5960  0209  1D03               	btfss	3,2
  5961  020A  2A1C               	goto	l3576
  5962                           
  5963                           ;main.c: 150: i2c2_write(0x3e, 0x00, 0x02); _delay((unsigned long)((1)*(4000000/4000.0))
      +                          );;
  5964  020B  303E               	movlw	62
  5965  020C  00AE               	movwf	i2c2_write@dev_addr
  5966  020D  3000               	movlw	0
  5967  020E  00AF               	movwf	i2c2_write@dev_addr+1
  5968  020F  01B0               	clrf	i2c2_write@reg_addr
  5969  0210  3002               	movlw	2
  5970  0211  00BC               	movwf	??_loop_func
  5971  0212  083C               	movf	??_loop_func,w
  5972  0213  00B1               	movwf	i2c2_write@data
  5973  0214  318A  2232  3180   	fcall	_i2c2_write
  5974  0217  30C8               	movlw	200
  5975  0218                     u5227:	
  5976  0218  3200               	nop2
  5977  0219  0B89               	decfsz	9,f
  5978  021A  2A18               	goto	u5227
  5979                           
  5980                           ;main.c: 151: } else if (!strncmp(("CNT"), (pbuf), 3)) {
  5981  021B  2A85               	goto	l3590
  5982  021C                     l3576:	
  5983  021C  3021               	movlw	low (STR_12| (0+32768))
  5984  021D  0020               	movlb	0	; select bank0
  5985  021E  00A0               	movwf	strncmp@s1
  5986  021F  3088               	movlw	high (STR_12| (0+32768))
  5987  0220  00A1               	movwf	strncmp@s1+1
  5988  0221  0859               	movf	_pbuf,w
  5989  0222  00BC               	movwf	??_loop_func
  5990  0223  083C               	movf	??_loop_func,w
  5991  0224  00A2               	movwf	strncmp@s2
  5992  0225  3003               	movlw	3
  5993  0226  00A3               	movwf	strncmp@len
  5994  0227  3000               	movlw	0
  5995  0228  00A4               	movwf	strncmp@len+1
  5996  0229  318B  2375  3180   	fcall	_strncmp
  5997  022C  0020               	movlb	0	; select bank0
  5998  022D  0820               	movf	?_strncmp,w
  5999  022E  0421               	iorwf	?_strncmp+1,w
  6000  022F  1D03               	btfss	3,2
  6001  0230  2A40               	goto	l3580
  6002                           
  6003                           ;main.c: 152: value = atoi(&pbuf[4]);
  6004  0231  0859               	movf	_pbuf,w
  6005  0232  3E04               	addlw	4
  6006  0233  318D  2526  3180   	fcall	_atoi
  6007  0236  0020               	movlb	0	; select bank0
  6008  0237  0826               	movf	?_atoi,w
  6009  0238  00BC               	movwf	??_loop_func
  6010  0239  083C               	movf	??_loop_func,w
  6011  023A  00BE               	movwf	loop_func@value
  6012                           
  6013                           ;main.c: 153: lcd_contrast(value);
  6014  023B  083E               	movf	loop_func@value,w
  6015  023C  318C  2484  3180   	fcall	_lcd_contrast
  6016                           
  6017                           ;main.c: 154: } else if (!strncmp(("LED"), (pbuf), 3)) {
  6018  023F  2A85               	goto	l3590
  6019  0240                     l3580:	
  6020  0240  30F1               	movlw	low (STR_13| (0+32768))
  6021  0241  0020               	movlb	0	; select bank0
  6022  0242  00A0               	movwf	strncmp@s1
  6023  0243  3087               	movlw	high (STR_13| (0+32768))
  6024  0244  00A1               	movwf	strncmp@s1+1
  6025  0245  0859               	movf	_pbuf,w
  6026  0246  00BC               	movwf	??_loop_func
  6027  0247  083C               	movf	??_loop_func,w
  6028  0248  00A2               	movwf	strncmp@s2
  6029  0249  3003               	movlw	3
  6030  024A  00A3               	movwf	strncmp@len
  6031  024B  3000               	movlw	0
  6032  024C  00A4               	movwf	strncmp@len+1
  6033  024D  318B  2375  3180   	fcall	_strncmp
  6034  0250  0020               	movlb	0	; select bank0
  6035  0251  0820               	movf	?_strncmp,w
  6036  0252  0421               	iorwf	?_strncmp+1,w
  6037  0253  1D03               	btfss	3,2
  6038  0254  2A85               	goto	l3590
  6039                           
  6040                           ;main.c: 155: if (!strncmp("ON", &pbuf[4], 2)) {
  6041  0255  3029               	movlw	low (STR_14| (0+32768))
  6042  0256  00A0               	movwf	strncmp@s1
  6043  0257  3088               	movlw	high (STR_14| (0+32768))
  6044  0258  00A1               	movwf	strncmp@s1+1
  6045  0259  0859               	movf	_pbuf,w
  6046  025A  3E04               	addlw	4
  6047  025B  00BC               	movwf	??_loop_func
  6048  025C  083C               	movf	??_loop_func,w
  6049  025D  00A2               	movwf	strncmp@s2
  6050  025E  3002               	movlw	2
  6051  025F  00A3               	movwf	strncmp@len
  6052  0260  3000               	movlw	0
  6053  0261  00A4               	movwf	strncmp@len+1
  6054  0262  318B  2375  3180   	fcall	_strncmp
  6055  0265  0020               	movlb	0	; select bank0
  6056  0266  0820               	movf	?_strncmp,w
  6057  0267  0421               	iorwf	?_strncmp+1,w
  6058  0268  1D03               	btfss	3,2
  6059  0269  2A6D               	goto	l3586
  6060                           
  6061                           ;main.c: 156: LATCbits.LATC7 = 0;
  6062  026A  0022               	movlb	2	; select bank2
  6063  026B  138E               	bcf	14,7	;volatile
  6064                           
  6065                           ;main.c: 157: } else if (!strncmp("OFF", &pbuf[4], 3)) {
  6066  026C  2A85               	goto	l3590
  6067  026D                     l3586:	
  6068  026D  30F9               	movlw	low (STR_15| (0+32768))
  6069  026E  0020               	movlb	0	; select bank0
  6070  026F  00A0               	movwf	strncmp@s1
  6071  0270  3087               	movlw	high (STR_15| (0+32768))
  6072  0271  00A1               	movwf	strncmp@s1+1
  6073  0272  0859               	movf	_pbuf,w
  6074  0273  3E04               	addlw	4
  6075  0274  00BC               	movwf	??_loop_func
  6076  0275  083C               	movf	??_loop_func,w
  6077  0276  00A2               	movwf	strncmp@s2
  6078  0277  3003               	movlw	3
  6079  0278  00A3               	movwf	strncmp@len
  6080  0279  3000               	movlw	0
  6081  027A  00A4               	movwf	strncmp@len+1
  6082  027B  318B  2375  3180   	fcall	_strncmp
  6083  027E  0020               	movlb	0	; select bank0
  6084  027F  0820               	movf	?_strncmp,w
  6085  0280  0421               	iorwf	?_strncmp+1,w
  6086  0281  1D03               	btfss	3,2
  6087  0282  2A85               	goto	l3590
  6088                           
  6089                           ;main.c: 158: LATCbits.LATC7 = 1;
  6090  0283  0022               	movlb	2	; select bank2
  6091  0284  178E               	bsf	14,7	;volatile
  6092  0285                     l3590:	
  6093                           
  6094                           ;main.c: 159: }
  6095                           ;main.c: 160: }
  6096                           ;main.c: 161: pbuf = (0);
  6097  0285  0020               	movlb	0	; select bank0
  6098  0286  01D9               	clrf	_pbuf
  6099                           
  6100                           ;main.c: 162: PROTOCOL_Set_Lock(0);
  6101  0287  3000               	movlw	0
  6102  0288  3197  2794         	fcall	_PROTOCOL_Set_Lock
  6103  028A  0008               	return
  6104  028B                     __end_of_loop_func:	
  6105                           
  6106                           	psect	text13
  6107  0B75                     __ptext13:	
  6108 ;; *************** function _strncmp *****************
  6109 ;; Defined at:
  6110 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  6111 ;; Parameters:    Size  Location     Type
  6112 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  6113 ;;		 -> STR_30(4), STR_29(4), STR_27(4), STR_26(4), 
  6114 ;;		 -> STR_23(4), STR_22(4), STR_21(4), STR_19(4), 
  6115 ;;		 -> STR_15(4), STR_14(3), STR_13(4), STR_12(4), 
  6116 ;;		 -> STR_11(4), STR_10(4), STR_9(4), STR_8(4), 
  6117 ;;		 -> STR_7(4), STR_6(4), STR_5(4), STR_4(4), 
  6118 ;;		 -> STR_3(4), STR_2(4), STR_1(4), 
  6119 ;;  s2              1    2[BANK0 ] PTR const unsigned char 
  6120 ;;		 -> buf(48), NULL(0), I2C1_StatusCallback@ext_buf(48), 
  6121 ;;  len             2    3[BANK0 ] unsigned int 
  6122 ;; Auto vars:     Size  Location     Type
  6123 ;;		None
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  2    0[BANK0 ] int 
  6126 ;; Registers used:
  6127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  6128 ;; Tracked objects:
  6129 ;;		On entry : 0/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6133 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;Total ram usage:        7 bytes
  6138 ;; Hardware stack levels used:    1
  6139 ;; Hardware stack levels required when called:    6
  6140 ;; This function calls:
  6141 ;;		Nothing
  6142 ;; This function is called by:
  6143 ;;		_loop_func
  6144 ;;		_PROTOCOL_Loop
  6145 ;; This function uses a non-reentrant model
  6146 ;;
  6147                           
  6148                           
  6149                           ;psect for function _strncmp
  6150  0B75                     _strncmp:	
  6151  0B75                     l3248:	
  6152                           ;incstack = 0
  6153                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  6154                           
  6155  0B75  3001               	movlw	1
  6156  0B76  0020               	movlb	0	; select bank0
  6157  0B77  02A3               	subwf	strncmp@len,f
  6158  0B78  3000               	movlw	0
  6159  0B79  3BA4               	subwfb	strncmp@len+1,f
  6160  0B7A  0A23               	incf	strncmp@len,w
  6161  0B7B  1903               	btfsc	3,2
  6162  0B7C  0A24               	incf	strncmp@len+1,w
  6163  0B7D  1903               	btfsc	3,2
  6164  0B7E  2BB4               	goto	l3250
  6165  0B7F  0020               	movlb	0	; select bank0
  6166  0B80  0820               	movf	strncmp@s1,w
  6167  0B81  0084               	movwf	4
  6168  0B82  0821               	movf	strncmp@s1+1,w
  6169  0B83  0085               	movwf	5
  6170  0B84  0012               	moviw fsr0++
  6171  0B85  1903               	btfsc	3,2
  6172  0B86  2B93               	goto	l3240
  6173  0B87  0822               	movf	strncmp@s2,w
  6174  0B88  0086               	movwf	6
  6175  0B89  3001               	movlw	1	; select bank2/3
  6176  0B8A  0087               	movwf	7
  6177  0B8B  0820               	movf	strncmp@s1,w
  6178  0B8C  0084               	movwf	4
  6179  0B8D  0821               	movf	strncmp@s1+1,w
  6180  0B8E  0085               	movwf	5
  6181  0B8F  0800               	movf	0,w	;code access
  6182  0B90  0601               	xorwf	1,w
  6183  0B91  1903               	skipnz
  6184  0B92  2BAB               	goto	l3244
  6185  0B93                     l3240:	
  6186  0B93  0822               	movf	strncmp@s2,w
  6187  0B94  0086               	movwf	6
  6188  0B95  3001               	movlw	1	; select bank2/3
  6189  0B96  0087               	movwf	7
  6190  0B97  0801               	movf	1,w
  6191  0B98  00A5               	movwf	??_strncmp
  6192  0B99  01A6               	clrf	??_strncmp+1
  6193  0B9A  09A5               	comf	??_strncmp,f
  6194  0B9B  09A6               	comf	??_strncmp+1,f
  6195  0B9C  0AA5               	incf	??_strncmp,f
  6196  0B9D  1903               	skipnz
  6197  0B9E  0AA6               	incf	??_strncmp+1,f
  6198  0B9F  0820               	movf	strncmp@s1,w
  6199  0BA0  0084               	movwf	4
  6200  0BA1  0821               	movf	strncmp@s1+1,w
  6201  0BA2  0085               	movwf	5
  6202  0BA3  0800               	movf	0,w	;code access
  6203  0BA4  0725               	addwf	??_strncmp,w
  6204  0BA5  00A0               	movwf	?_strncmp
  6205  0BA6  0826               	movf	??_strncmp+1,w
  6206  0BA7  1803               	skipnc
  6207  0BA8  0A26               	incf	??_strncmp+1,w
  6208  0BA9  00A1               	movwf	?_strncmp+1
  6209  0BAA  0008               	return
  6210  0BAB                     l3244:	
  6211  0BAB  3001               	movlw	1
  6212  0BAC  07A0               	addwf	strncmp@s1,f
  6213  0BAD  3000               	movlw	0
  6214  0BAE  3DA1               	addwfc	strncmp@s1+1,f
  6215  0BAF  3001               	movlw	1
  6216  0BB0  00A5               	movwf	??_strncmp
  6217  0BB1  0825               	movf	??_strncmp,w
  6218  0BB2  07A2               	addwf	strncmp@s2,f
  6219  0BB3  2B75               	goto	l3248
  6220  0BB4                     l3250:	
  6221  0BB4  01A0               	clrf	?_strncmp
  6222  0BB5  01A1               	clrf	?_strncmp+1
  6223  0BB6  0008               	return
  6224  0BB7                     __end_of_strncmp:	
  6225                           
  6226                           	psect	text14
  6227  0C3F                     __ptext14:	
  6228 ;; *************** function _lcd_string_2lines *****************
  6229 ;; Defined at:
  6230 ;;		line 70 in file "main.c"
  6231 ;; Parameters:    Size  Location     Type
  6232 ;;		None
  6233 ;; Auto vars:     Size  Location     Type
  6234 ;;  i               1   27[BANK0 ] unsigned char 
  6235 ;; Return value:  Size  Location     Type
  6236 ;;                  1    wreg      void 
  6237 ;; Registers used:
  6238 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6239 ;; Tracked objects:
  6240 ;;		On entry : 0/0
  6241 ;;		On exit  : 0/0
  6242 ;;		Unchanged: 0/0
  6243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6245 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6247 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6248 ;;Total ram usage:        4 bytes
  6249 ;; Hardware stack levels used:    1
  6250 ;; Hardware stack levels required when called:    9
  6251 ;; This function calls:
  6252 ;;		_i2c2_write
  6253 ;; This function is called by:
  6254 ;;		_loop_func
  6255 ;; This function uses a non-reentrant model
  6256 ;;
  6257                           
  6258                           
  6259                           ;psect for function _lcd_string_2lines
  6260  0C3F                     _lcd_string_2lines:	
  6261                           
  6262                           ;main.c: 71: uint8_t i = 4;
  6263                           
  6264                           ;incstack = 0
  6265                           ; Regs used in _lcd_string_2lines: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6266  0C3F  3004               	movlw	4
  6267  0C40  0020               	movlb	0	; select bank0
  6268  0C41  00B8               	movwf	??_lcd_string_2lines
  6269  0C42  0838               	movf	??_lcd_string_2lines,w
  6270  0C43  00BB               	movwf	lcd_string_2lines@i
  6271  0C44                     l3214:	
  6272                           ;main.c: 72: while (pbuf[i] != '\0') {
  6273                           
  6274  0C44  0020               	movlb	0	; select bank0
  6275  0C45  083B               	movf	lcd_string_2lines@i,w
  6276  0C46  0759               	addwf	_pbuf,w
  6277  0C47  00B8               	movwf	??_lcd_string_2lines
  6278  0C48  0838               	movf	??_lcd_string_2lines,w
  6279  0C49  0086               	movwf	6
  6280  0C4A  3001               	movlw	1	; select bank2/3
  6281  0C4B  0087               	movwf	7
  6282  0C4C  0801               	movf	1,w
  6283  0C4D  1903               	btfsc	3,2
  6284  0C4E  0008               	return
  6285                           
  6286                           ;main.c: 73: i2c2_write(0x3e, 0x40, pbuf[i++]); _delay((unsigned long)((1)*(4000000/4000
      +                          .0)));;
  6287  0C4F  303E               	movlw	62
  6288  0C50  00AE               	movwf	i2c2_write@dev_addr
  6289  0C51  3000               	movlw	0
  6290  0C52  00AF               	movwf	i2c2_write@dev_addr+1
  6291  0C53  3040               	movlw	64
  6292  0C54  00B8               	movwf	??_lcd_string_2lines
  6293  0C55  0838               	movf	??_lcd_string_2lines,w
  6294  0C56  00B0               	movwf	i2c2_write@reg_addr
  6295  0C57  083B               	movf	lcd_string_2lines@i,w
  6296  0C58  0759               	addwf	_pbuf,w
  6297  0C59  00B9               	movwf	??_lcd_string_2lines+1
  6298  0C5A  0839               	movf	??_lcd_string_2lines+1,w
  6299  0C5B  0086               	movwf	6
  6300  0C5C  3001               	movlw	1	; select bank2/3
  6301  0C5D  0087               	movwf	7
  6302  0C5E  0801               	movf	1,w
  6303  0C5F  00BA               	movwf	??_lcd_string_2lines+2
  6304  0C60  083A               	movf	??_lcd_string_2lines+2,w
  6305  0C61  00B1               	movwf	i2c2_write@data
  6306  0C62  318A  2232  318C   	fcall	_i2c2_write
  6307  0C65  3001               	movlw	1
  6308  0C66  0020               	movlb	0	; select bank0
  6309  0C67  00B8               	movwf	??_lcd_string_2lines
  6310  0C68  0838               	movf	??_lcd_string_2lines,w
  6311  0C69  07BB               	addwf	lcd_string_2lines@i,f
  6312  0C6A  30C8               	movlw	200
  6313  0C6B                     u5237:	
  6314  0C6B  3200               	nop2
  6315  0C6C  0B89               	decfsz	9,f
  6316  0C6D  2C6B               	goto	u5237
  6317                           
  6318                           ;main.c: 74: if (i == 20) i2c2_write(0x3e, 0x00, 0xc0); _delay((unsigned long)((1)*(4000
      +                          000/4000.0)));;
  6319  0C6E  3014               	movlw	20
  6320  0C6F  0020               	movlb	0	; select bank0
  6321  0C70  063B               	xorwf	lcd_string_2lines@i,w
  6322  0C71  1D03               	btfss	3,2
  6323  0C72  2C7F               	goto	l3212
  6324  0C73  303E               	movlw	62
  6325  0C74  00AE               	movwf	i2c2_write@dev_addr
  6326  0C75  3000               	movlw	0
  6327  0C76  00AF               	movwf	i2c2_write@dev_addr+1
  6328  0C77  01B0               	clrf	i2c2_write@reg_addr
  6329  0C78  30C0               	movlw	192
  6330  0C79  00B8               	movwf	??_lcd_string_2lines
  6331  0C7A  0838               	movf	??_lcd_string_2lines,w
  6332  0C7B  00B1               	movwf	i2c2_write@data
  6333  0C7C  318A  2232  318C   	fcall	_i2c2_write
  6334  0C7F                     l3212:	
  6335  0C7F  30C8               	movlw	200
  6336  0C80                     u5247:	
  6337  0C80  3200               	nop2
  6338  0C81  0B89               	decfsz	9,f
  6339  0C82  2C80               	goto	u5247
  6340  0C83  2C44               	goto	l3214
  6341  0C84                     __end_of_lcd_string_2lines:	
  6342                           
  6343                           	psect	text15
  6344  0AD4                     __ptext15:	
  6345 ;; *************** function _lcd_string *****************
  6346 ;; Defined at:
  6347 ;;		line 58 in file "main.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;		None
  6350 ;; Auto vars:     Size  Location     Type
  6351 ;;  i               1   27[BANK0 ] unsigned char 
  6352 ;; Return value:  Size  Location     Type
  6353 ;;                  1    wreg      void 
  6354 ;; Registers used:
  6355 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6356 ;; Tracked objects:
  6357 ;;		On entry : 0/0
  6358 ;;		On exit  : 0/0
  6359 ;;		Unchanged: 0/0
  6360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6362 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6363 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6364 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6365 ;;Total ram usage:        4 bytes
  6366 ;; Hardware stack levels used:    1
  6367 ;; Hardware stack levels required when called:    9
  6368 ;; This function calls:
  6369 ;;		_i2c2_write
  6370 ;; This function is called by:
  6371 ;;		_loop_func
  6372 ;; This function uses a non-reentrant model
  6373 ;;
  6374                           
  6375                           
  6376                           ;psect for function _lcd_string
  6377  0AD4                     _lcd_string:	
  6378                           
  6379                           ;main.c: 59: uint8_t i = 4;
  6380                           
  6381                           ;incstack = 0
  6382                           ; Regs used in _lcd_string: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6383  0AD4  3004               	movlw	4
  6384  0AD5  0020               	movlb	0	; select bank0
  6385  0AD6  00B8               	movwf	??_lcd_string
  6386  0AD7  0838               	movf	??_lcd_string,w
  6387  0AD8  00BB               	movwf	lcd_string@i
  6388  0AD9                     l3198:	
  6389                           ;main.c: 60: while (pbuf[i] != '\0') {
  6390                           
  6391  0AD9  0020               	movlb	0	; select bank0
  6392  0ADA  083B               	movf	lcd_string@i,w
  6393  0ADB  0759               	addwf	_pbuf,w
  6394  0ADC  00B8               	movwf	??_lcd_string
  6395  0ADD  0838               	movf	??_lcd_string,w
  6396  0ADE  0086               	movwf	6
  6397  0ADF  3001               	movlw	1	; select bank2/3
  6398  0AE0  0087               	movwf	7
  6399  0AE1  0801               	movf	1,w
  6400  0AE2  1903               	btfsc	3,2
  6401  0AE3  0008               	return
  6402                           
  6403                           ;main.c: 61: i2c2_write(0x3e, 0x40, pbuf[i++]); _delay((unsigned long)((1)*(4000000/4000
      +                          .0)));;
  6404  0AE4  303E               	movlw	62
  6405  0AE5  00AE               	movwf	i2c2_write@dev_addr
  6406  0AE6  3000               	movlw	0
  6407  0AE7  00AF               	movwf	i2c2_write@dev_addr+1
  6408  0AE8  3040               	movlw	64
  6409  0AE9  00B8               	movwf	??_lcd_string
  6410  0AEA  0838               	movf	??_lcd_string,w
  6411  0AEB  00B0               	movwf	i2c2_write@reg_addr
  6412  0AEC  083B               	movf	lcd_string@i,w
  6413  0AED  0759               	addwf	_pbuf,w
  6414  0AEE  00B9               	movwf	??_lcd_string+1
  6415  0AEF  0839               	movf	??_lcd_string+1,w
  6416  0AF0  0086               	movwf	6
  6417  0AF1  3001               	movlw	1	; select bank2/3
  6418  0AF2  0087               	movwf	7
  6419  0AF3  0801               	movf	1,w
  6420  0AF4  00BA               	movwf	??_lcd_string+2
  6421  0AF5  083A               	movf	??_lcd_string+2,w
  6422  0AF6  00B1               	movwf	i2c2_write@data
  6423  0AF7  318A  2232  318A   	fcall	_i2c2_write
  6424  0AFA  3001               	movlw	1
  6425  0AFB  0020               	movlb	0	; select bank0
  6426  0AFC  00B8               	movwf	??_lcd_string
  6427  0AFD  0838               	movf	??_lcd_string,w
  6428  0AFE  07BB               	addwf	lcd_string@i,f
  6429  0AFF  30C8               	movlw	200
  6430  0B00                     u5257:	
  6431  0B00  3200               	nop2
  6432  0B01  0B89               	decfsz	9,f
  6433  0B02  2B00               	goto	u5257
  6434  0B03  2AD9               	goto	l3198
  6435  0B04                     __end_of_lcd_string:	
  6436                           
  6437                           	psect	text16
  6438  0D97                     __ptext16:	
  6439 ;; *************** function _lcd_init *****************
  6440 ;; Defined at:
  6441 ;;		line 39 in file "main.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;		None
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;		None
  6446 ;; Return value:  Size  Location     Type
  6447 ;;                  1    wreg      void 
  6448 ;; Registers used:
  6449 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6450 ;; Tracked objects:
  6451 ;;		On entry : 0/0
  6452 ;;		On exit  : 0/0
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6457 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6458 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;Total ram usage:        2 bytes
  6460 ;; Hardware stack levels used:    1
  6461 ;; Hardware stack levels required when called:    9
  6462 ;; This function calls:
  6463 ;;		_i2c2_write
  6464 ;; This function is called by:
  6465 ;;		_loop_func
  6466 ;;		_main
  6467 ;; This function uses a non-reentrant model
  6468 ;;
  6469                           
  6470                           
  6471                           ;psect for function _lcd_init
  6472  0D97                     _lcd_init:	
  6473                           
  6474                           ;main.c: 40: _delay((unsigned long)((50)*(4000000/4000.0)));
  6475                           
  6476                           ;incstack = 0
  6477                           ; Regs used in _lcd_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6478  0D97  3041               	movlw	65
  6479  0D98  0020               	movlb	0	; select bank0
  6480  0D99  00B8               	movwf	??_lcd_init
  6481  0D9A  30EE               	movlw	238
  6482  0D9B                     u5267:	
  6483  0D9B  0B89               	decfsz	9,f
  6484  0D9C  2D9B               	goto	u5267
  6485  0D9D  0BB8               	decfsz	??_lcd_init,f
  6486  0D9E  2D9B               	goto	u5267
  6487  0D9F  0000               	nop
  6488                           
  6489                           ;main.c: 41: i2c2_write(0x3e, 0x00, 0x38); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6490  0DA0  303E               	movlw	62
  6491  0DA1  0020               	movlb	0	; select bank0
  6492  0DA2  00AE               	movwf	i2c2_write@dev_addr
  6493  0DA3  3000               	movlw	0
  6494  0DA4  00AF               	movwf	i2c2_write@dev_addr+1
  6495  0DA5  01B0               	clrf	i2c2_write@reg_addr
  6496  0DA6  3038               	movlw	56
  6497  0DA7  00B8               	movwf	??_lcd_init
  6498  0DA8  0838               	movf	??_lcd_init,w
  6499  0DA9  00B1               	movwf	i2c2_write@data
  6500  0DAA  318A  2232  318D   	fcall	_i2c2_write
  6501  0DAD  30C8               	movlw	200
  6502  0DAE                     u5277:	
  6503  0DAE  3200               	nop2
  6504  0DAF  0B89               	decfsz	9,f
  6505  0DB0  2DAE               	goto	u5277
  6506                           
  6507                           ;main.c: 42: i2c2_write(0x3e, 0x00, 0x39); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6508  0DB1  303E               	movlw	62
  6509  0DB2  0020               	movlb	0	; select bank0
  6510  0DB3  00AE               	movwf	i2c2_write@dev_addr
  6511  0DB4  3000               	movlw	0
  6512  0DB5  00AF               	movwf	i2c2_write@dev_addr+1
  6513  0DB6  01B0               	clrf	i2c2_write@reg_addr
  6514  0DB7  3039               	movlw	57
  6515  0DB8  00B8               	movwf	??_lcd_init
  6516  0DB9  0838               	movf	??_lcd_init,w
  6517  0DBA  00B1               	movwf	i2c2_write@data
  6518  0DBB  318A  2232  318D   	fcall	_i2c2_write
  6519  0DBE  30C8               	movlw	200
  6520  0DBF                     u5287:	
  6521  0DBF  3200               	nop2
  6522  0DC0  0B89               	decfsz	9,f
  6523  0DC1  2DBF               	goto	u5287
  6524                           
  6525                           ;main.c: 43: i2c2_write(0x3e, 0x00, 0x14); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6526  0DC2  303E               	movlw	62
  6527  0DC3  0020               	movlb	0	; select bank0
  6528  0DC4  00AE               	movwf	i2c2_write@dev_addr
  6529  0DC5  3000               	movlw	0
  6530  0DC6  00AF               	movwf	i2c2_write@dev_addr+1
  6531  0DC7  01B0               	clrf	i2c2_write@reg_addr
  6532  0DC8  3014               	movlw	20
  6533  0DC9  00B8               	movwf	??_lcd_init
  6534  0DCA  0838               	movf	??_lcd_init,w
  6535  0DCB  00B1               	movwf	i2c2_write@data
  6536  0DCC  318A  2232  318D   	fcall	_i2c2_write
  6537  0DCF  30C8               	movlw	200
  6538  0DD0                     u5297:	
  6539  0DD0  3200               	nop2
  6540  0DD1  0B89               	decfsz	9,f
  6541  0DD2  2DD0               	goto	u5297
  6542                           
  6543                           ;main.c: 44: i2c2_write(0x3e, 0x00, 0x73); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6544  0DD3  303E               	movlw	62
  6545  0DD4  0020               	movlb	0	; select bank0
  6546  0DD5  00AE               	movwf	i2c2_write@dev_addr
  6547  0DD6  3000               	movlw	0
  6548  0DD7  00AF               	movwf	i2c2_write@dev_addr+1
  6549  0DD8  01B0               	clrf	i2c2_write@reg_addr
  6550  0DD9  3073               	movlw	115
  6551  0DDA  00B8               	movwf	??_lcd_init
  6552  0DDB  0838               	movf	??_lcd_init,w
  6553  0DDC  00B1               	movwf	i2c2_write@data
  6554  0DDD  318A  2232  318D   	fcall	_i2c2_write
  6555  0DE0  30C8               	movlw	200
  6556  0DE1                     u5307:	
  6557  0DE1  3200               	nop2
  6558  0DE2  0B89               	decfsz	9,f
  6559  0DE3  2DE1               	goto	u5307
  6560                           
  6561                           ;main.c: 45: i2c2_write(0x3e, 0x00, 0x52); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6562  0DE4  303E               	movlw	62
  6563  0DE5  0020               	movlb	0	; select bank0
  6564  0DE6  00AE               	movwf	i2c2_write@dev_addr
  6565  0DE7  3000               	movlw	0
  6566  0DE8  00AF               	movwf	i2c2_write@dev_addr+1
  6567  0DE9  01B0               	clrf	i2c2_write@reg_addr
  6568  0DEA  3052               	movlw	82
  6569  0DEB  00B8               	movwf	??_lcd_init
  6570  0DEC  0838               	movf	??_lcd_init,w
  6571  0DED  00B1               	movwf	i2c2_write@data
  6572  0DEE  318A  2232  318D   	fcall	_i2c2_write
  6573  0DF1  30C8               	movlw	200
  6574  0DF2                     u5317:	
  6575  0DF2  3200               	nop2
  6576  0DF3  0B89               	decfsz	9,f
  6577  0DF4  2DF2               	goto	u5317
  6578                           
  6579                           ;main.c: 46: i2c2_write(0x3e, 0x00, 0x6c); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6580  0DF5  303E               	movlw	62
  6581  0DF6  0020               	movlb	0	; select bank0
  6582  0DF7  00AE               	movwf	i2c2_write@dev_addr
  6583  0DF8  3000               	movlw	0
  6584  0DF9  00AF               	movwf	i2c2_write@dev_addr+1
  6585  0DFA  01B0               	clrf	i2c2_write@reg_addr
  6586  0DFB  306C               	movlw	108
  6587  0DFC  00B8               	movwf	??_lcd_init
  6588  0DFD  0838               	movf	??_lcd_init,w
  6589  0DFE  00B1               	movwf	i2c2_write@data
  6590  0DFF  318A  2232  318D   	fcall	_i2c2_write
  6591  0E02  30C8               	movlw	200
  6592  0E03                     u5327:	
  6593  0E03  3200               	nop2
  6594  0E04  0B89               	decfsz	9,f
  6595  0E05  2E03               	goto	u5327
  6596                           
  6597                           ;main.c: 47: _delay((unsigned long)((250)*(4000000/4000.0)));
  6598  0E06  3002               	movlw	2
  6599  0E07  0020               	movlb	0	; select bank0
  6600  0E08  00B9               	movwf	??_lcd_init+1
  6601  0E09  3045               	movlw	69
  6602  0E0A  00B8               	movwf	??_lcd_init
  6603  0E0B  30A9               	movlw	169
  6604  0E0C                     u5337:	
  6605  0E0C  0B89               	decfsz	9,f
  6606  0E0D  2E0C               	goto	u5337
  6607  0E0E  0BB8               	decfsz	??_lcd_init,f
  6608  0E0F  2E0C               	goto	u5337
  6609  0E10  0BB9               	decfsz	??_lcd_init+1,f
  6610  0E11  2E0C               	goto	u5337
  6611  0E12  3200               	nop2
  6612                           
  6613                           ;main.c: 48: i2c2_write(0x3e, 0x00, 0x38); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6614  0E13  303E               	movlw	62
  6615  0E14  0020               	movlb	0	; select bank0
  6616  0E15  00AE               	movwf	i2c2_write@dev_addr
  6617  0E16  3000               	movlw	0
  6618  0E17  00AF               	movwf	i2c2_write@dev_addr+1
  6619  0E18  01B0               	clrf	i2c2_write@reg_addr
  6620  0E19  3038               	movlw	56
  6621  0E1A  00B8               	movwf	??_lcd_init
  6622  0E1B  0838               	movf	??_lcd_init,w
  6623  0E1C  00B1               	movwf	i2c2_write@data
  6624  0E1D  318A  2232  318D   	fcall	_i2c2_write
  6625  0E20  30C8               	movlw	200
  6626  0E21                     u5347:	
  6627  0E21  3200               	nop2
  6628  0E22  0B89               	decfsz	9,f
  6629  0E23  2E21               	goto	u5347
  6630                           
  6631                           ;main.c: 49: i2c2_write(0x3e, 0x00, 0x01); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6632  0E24  303E               	movlw	62
  6633  0E25  0020               	movlb	0	; select bank0
  6634  0E26  00AE               	movwf	i2c2_write@dev_addr
  6635  0E27  3000               	movlw	0
  6636  0E28  00AF               	movwf	i2c2_write@dev_addr+1
  6637  0E29  01B0               	clrf	i2c2_write@reg_addr
  6638  0E2A  01B1               	clrf	i2c2_write@data
  6639  0E2B  0AB1               	incf	i2c2_write@data,f
  6640  0E2C  318A  2232  318D   	fcall	_i2c2_write
  6641  0E2F  30C8               	movlw	200
  6642  0E30                     u5357:	
  6643  0E30  3200               	nop2
  6644  0E31  0B89               	decfsz	9,f
  6645  0E32  2E30               	goto	u5357
  6646                           
  6647                           ;main.c: 50: i2c2_write(0x3e, 0x00, 0x0c); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6648  0E33  303E               	movlw	62
  6649  0E34  0020               	movlb	0	; select bank0
  6650  0E35  00AE               	movwf	i2c2_write@dev_addr
  6651  0E36  3000               	movlw	0
  6652  0E37  00AF               	movwf	i2c2_write@dev_addr+1
  6653  0E38  01B0               	clrf	i2c2_write@reg_addr
  6654  0E39  300C               	movlw	12
  6655  0E3A  00B8               	movwf	??_lcd_init
  6656  0E3B  0838               	movf	??_lcd_init,w
  6657  0E3C  00B1               	movwf	i2c2_write@data
  6658  0E3D  318A  2232  318D   	fcall	_i2c2_write
  6659  0E40  30C8               	movlw	200
  6660  0E41                     u5367:	
  6661  0E41  3200               	nop2
  6662  0E42  0B89               	decfsz	9,f
  6663  0E43  2E41               	goto	u5367
  6664                           
  6665                           ;main.c: 51: _delay((unsigned long)((50)*(4000000/4000.0)));
  6666  0E44  3041               	movlw	65
  6667  0E45  0020               	movlb	0	; select bank0
  6668  0E46  00B8               	movwf	??_lcd_init
  6669  0E47  30EE               	movlw	238
  6670  0E48                     u5377:	
  6671  0E48  0B89               	decfsz	9,f
  6672  0E49  2E48               	goto	u5377
  6673  0E4A  0BB8               	decfsz	??_lcd_init,f
  6674  0E4B  2E48               	goto	u5377
  6675  0E4C  0000               	nop
  6676  0E4D  0008               	return
  6677  0E4E                     __end_of_lcd_init:	
  6678                           
  6679                           	psect	text17
  6680  0C84                     __ptext17:	
  6681 ;; *************** function _lcd_contrast *****************
  6682 ;; Defined at:
  6683 ;;		line 84 in file "main.c"
  6684 ;; Parameters:    Size  Location     Type
  6685 ;;  contrast        1    wreg     unsigned char 
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;  contrast        1   26[BANK0 ] unsigned char 
  6688 ;; Return value:  Size  Location     Type
  6689 ;;                  1    wreg      void 
  6690 ;; Registers used:
  6691 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6698 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;Total ram usage:        3 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:    9
  6704 ;; This function calls:
  6705 ;;		_i2c2_write
  6706 ;; This function is called by:
  6707 ;;		_loop_func
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           
  6712                           ;psect for function _lcd_contrast
  6713  0C84                     _lcd_contrast:	
  6714                           
  6715                           ;incstack = 0
  6716                           ; Regs used in _lcd_contrast: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6717                           ;lcd_contrast@contrast stored from wreg
  6718  0C84  0020               	movlb	0	; select bank0
  6719  0C85  00BA               	movwf	lcd_contrast@contrast
  6720                           
  6721                           ;main.c: 85: i2c2_write(0x3e, 0x00, 0x39); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6722  0C86  303E               	movlw	62
  6723  0C87  00AE               	movwf	i2c2_write@dev_addr
  6724  0C88  3000               	movlw	0
  6725  0C89  00AF               	movwf	i2c2_write@dev_addr+1
  6726  0C8A  01B0               	clrf	i2c2_write@reg_addr
  6727  0C8B  3039               	movlw	57
  6728  0C8C  00B8               	movwf	??_lcd_contrast
  6729  0C8D  0838               	movf	??_lcd_contrast,w
  6730  0C8E  00B1               	movwf	i2c2_write@data
  6731  0C8F  318A  2232  318C   	fcall	_i2c2_write
  6732  0C92  30C8               	movlw	200
  6733  0C93                     u5387:	
  6734  0C93  3200               	nop2
  6735  0C94  0B89               	decfsz	9,f
  6736  0C95  2C93               	goto	u5387
  6737                           
  6738                           ;main.c: 86: i2c2_write(0x3e, 0x00, 0x70 | (contrast & 0b00001111)); _delay((unsigned lo
      +                          ng)((1)*(4000000/4000.0)));;
  6739  0C96  303E               	movlw	62
  6740  0C97  0020               	movlb	0	; select bank0
  6741  0C98  00AE               	movwf	i2c2_write@dev_addr
  6742  0C99  3000               	movlw	0
  6743  0C9A  00AF               	movwf	i2c2_write@dev_addr+1
  6744  0C9B  01B0               	clrf	i2c2_write@reg_addr
  6745  0C9C  083A               	movf	lcd_contrast@contrast,w
  6746  0C9D  390F               	andlw	15
  6747  0C9E  3870               	iorlw	112
  6748  0C9F  00B8               	movwf	??_lcd_contrast
  6749  0CA0  0838               	movf	??_lcd_contrast,w
  6750  0CA1  00B1               	movwf	i2c2_write@data
  6751  0CA2  318A  2232  318C   	fcall	_i2c2_write
  6752  0CA5  30C8               	movlw	200
  6753  0CA6                     u5397:	
  6754  0CA6  3200               	nop2
  6755  0CA7  0B89               	decfsz	9,f
  6756  0CA8  2CA6               	goto	u5397
  6757                           
  6758                           ;main.c: 87: i2c2_write(0x3e, 0x00, 0x50 | ((contrast >> 4) & 0b00000111)); _delay((unsi
      +                          gned long)((1)*(4000000/4000.0)));;
  6759  0CA9  303E               	movlw	62
  6760  0CAA  0020               	movlb	0	; select bank0
  6761  0CAB  00AE               	movwf	i2c2_write@dev_addr
  6762  0CAC  3000               	movlw	0
  6763  0CAD  00AF               	movwf	i2c2_write@dev_addr+1
  6764  0CAE  01B0               	clrf	i2c2_write@reg_addr
  6765  0CAF  083A               	movf	lcd_contrast@contrast,w
  6766  0CB0  00B8               	movwf	??_lcd_contrast
  6767  0CB1  3004               	movlw	4
  6768  0CB2                     u1935:	
  6769  0CB2  36B8               	lsrf	??_lcd_contrast,f
  6770  0CB3  0B89               	decfsz	9,f
  6771  0CB4  2CB2               	goto	u1935
  6772  0CB5  0838               	movf	??_lcd_contrast,w
  6773  0CB6  3907               	andlw	7
  6774  0CB7  3850               	iorlw	80
  6775  0CB8  00B9               	movwf	??_lcd_contrast+1
  6776  0CB9  0839               	movf	??_lcd_contrast+1,w
  6777  0CBA  00B1               	movwf	i2c2_write@data
  6778  0CBB  318A  2232  318C   	fcall	_i2c2_write
  6779  0CBE  30C8               	movlw	200
  6780  0CBF                     u5407:	
  6781  0CBF  3200               	nop2
  6782  0CC0  0B89               	decfsz	9,f
  6783  0CC1  2CBF               	goto	u5407
  6784                           
  6785                           ;main.c: 88: i2c2_write(0x3e, 0x00, 0x38); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6786  0CC2  303E               	movlw	62
  6787  0CC3  0020               	movlb	0	; select bank0
  6788  0CC4  00AE               	movwf	i2c2_write@dev_addr
  6789  0CC5  3000               	movlw	0
  6790  0CC6  00AF               	movwf	i2c2_write@dev_addr+1
  6791  0CC7  01B0               	clrf	i2c2_write@reg_addr
  6792  0CC8  3038               	movlw	56
  6793  0CC9  00B8               	movwf	??_lcd_contrast
  6794  0CCA  0838               	movf	??_lcd_contrast,w
  6795  0CCB  00B1               	movwf	i2c2_write@data
  6796  0CCC  318A  2232  318C   	fcall	_i2c2_write
  6797  0CCF  30C8               	movlw	200
  6798  0CD0                     u5417:	
  6799  0CD0  3200               	nop2
  6800  0CD1  0B89               	decfsz	9,f
  6801  0CD2  2CD0               	goto	u5417
  6802  0CD3  0008               	return
  6803  0CD4                     __end_of_lcd_contrast:	
  6804                           
  6805                           	psect	text18
  6806  087E                     __ptext18:	
  6807 ;; *************** function _lcd_clear *****************
  6808 ;; Defined at:
  6809 ;;		line 54 in file "main.c"
  6810 ;; Parameters:    Size  Location     Type
  6811 ;;		None
  6812 ;; Auto vars:     Size  Location     Type
  6813 ;;		None
  6814 ;; Return value:  Size  Location     Type
  6815 ;;                  1    wreg      void 
  6816 ;; Registers used:
  6817 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6818 ;; Tracked objects:
  6819 ;;		On entry : 0/0
  6820 ;;		On exit  : 0/0
  6821 ;;		Unchanged: 0/0
  6822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6827 ;;Total ram usage:        0 bytes
  6828 ;; Hardware stack levels used:    1
  6829 ;; Hardware stack levels required when called:    9
  6830 ;; This function calls:
  6831 ;;		_i2c2_write
  6832 ;; This function is called by:
  6833 ;;		_loop_func
  6834 ;; This function uses a non-reentrant model
  6835 ;;
  6836                           
  6837                           
  6838                           ;psect for function _lcd_clear
  6839  087E                     _lcd_clear:	
  6840                           
  6841                           ;main.c: 55: i2c2_write(0x3e, 0x00, 0x01); _delay((unsigned long)((1)*(4000000/4000.0)))
      +                          ;;
  6842                           
  6843                           ;incstack = 0
  6844                           ; Regs used in _lcd_clear: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6845  087E  303E               	movlw	62
  6846  087F  0020               	movlb	0	; select bank0
  6847  0880  00AE               	movwf	i2c2_write@dev_addr
  6848  0881  3000               	movlw	0
  6849  0882  00AF               	movwf	i2c2_write@dev_addr+1
  6850  0883  01B0               	clrf	i2c2_write@reg_addr
  6851  0884  01B1               	clrf	i2c2_write@data
  6852  0885  0AB1               	incf	i2c2_write@data,f
  6853  0886  318A  2232  3188   	fcall	_i2c2_write
  6854  0889  30C8               	movlw	200
  6855  088A                     u5427:	
  6856  088A  3200               	nop2
  6857  088B  0B89               	decfsz	9,f
  6858  088C  288A               	goto	u5427
  6859  088D  0008               	return
  6860  088E                     __end_of_lcd_clear:	
  6861                           
  6862                           	psect	text19
  6863  0A32                     __ptext19:	
  6864 ;; *************** function _i2c2_write *****************
  6865 ;; Defined at:
  6866 ;;		line 13 in file "i2c2_util.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;  dev_addr        2   14[BANK0 ] unsigned int 
  6869 ;;  reg_addr        1   16[BANK0 ] unsigned char 
  6870 ;;  data            1   17[BANK0 ] unsigned char 
  6871 ;; Auto vars:     Size  Location     Type
  6872 ;;  buf             2   21[BANK0 ] unsigned char [2]
  6873 ;;  status          1   23[BANK0 ] enum E2979
  6874 ;;  write_status    1   20[BANK0 ] unsigned char 
  6875 ;; Return value:  Size  Location     Type
  6876 ;;                  1    wreg      unsigned char 
  6877 ;; Registers used:
  6878 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6879 ;; Tracked objects:
  6880 ;;		On entry : 0/0
  6881 ;;		On exit  : 0/0
  6882 ;;		Unchanged: 0/0
  6883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6884 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6885 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6886 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6887 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6888 ;;Total ram usage:       10 bytes
  6889 ;; Hardware stack levels used:    1
  6890 ;; Hardware stack levels required when called:    8
  6891 ;; This function calls:
  6892 ;;		_I2C2_MasterWrite
  6893 ;; This function is called by:
  6894 ;;		_lcd_init
  6895 ;;		_lcd_clear
  6896 ;;		_lcd_string
  6897 ;;		_lcd_string_2lines
  6898 ;;		_lcd_contrast
  6899 ;;		_lcd_test
  6900 ;;		_loop_func
  6901 ;;		_lcd_arao
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905                           
  6906                           ;psect for function _i2c2_write
  6907  0A32                     _i2c2_write:	
  6908                           
  6909                           ;i2c2_util.c: 15: uint8_t buf[2];
  6910                           ;i2c2_util.c: 16: I2C2_MESSAGE_STATUS status;
  6911                           ;i2c2_util.c: 17: uint8_t write_status;
  6912                           ;i2c2_util.c: 18: buf[0] = reg_addr;
  6913                           
  6914                           ;incstack = 0
  6915                           ; Regs used in _i2c2_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6916  0A32  0020               	movlb	0	; select bank0
  6917  0A33  0830               	movf	i2c2_write@reg_addr,w
  6918  0A34  00B2               	movwf	??_i2c2_write
  6919  0A35  0832               	movf	??_i2c2_write,w
  6920  0A36  00B5               	movwf	i2c2_write@buf
  6921                           
  6922                           ;i2c2_util.c: 19: buf[1] = data;
  6923  0A37  0831               	movf	i2c2_write@data,w
  6924  0A38  00B2               	movwf	??_i2c2_write
  6925  0A39  0832               	movf	??_i2c2_write,w
  6926  0A3A  00B6               	movwf	i2c2_write@buf+1
  6927                           
  6928                           ;i2c2_util.c: 20: I2C2_MasterWrite(buf, 2, dev_addr, &status);
  6929  0A3B  3002               	movlw	2
  6930  0A3C  00B2               	movwf	??_i2c2_write
  6931  0A3D  0832               	movf	??_i2c2_write,w
  6932  0A3E  00A7               	movwf	I2C2_MasterWrite@length
  6933  0A3F  082F               	movf	i2c2_write@dev_addr+1,w
  6934  0A40  00A9               	movwf	I2C2_MasterWrite@address+1
  6935  0A41  082E               	movf	i2c2_write@dev_addr,w
  6936  0A42  00A8               	movwf	I2C2_MasterWrite@address
  6937  0A43  3037               	movlw	(low (i2c2_write@status| 0))& (0+255)
  6938  0A44  00B3               	movwf	??_i2c2_write+1
  6939  0A45  0833               	movf	??_i2c2_write+1,w
  6940  0A46  00AA               	movwf	I2C2_MasterWrite@pflag
  6941  0A47  3035               	movlw	(low (i2c2_write@buf| 0))& (0+255)
  6942  0A48  318A  227F  318A   	fcall	_I2C2_MasterWrite
  6943  0A4B                     l3032:	
  6944                           ;i2c2_util.c: 21: while (status == I2C2_MESSAGE_PENDING);
  6945                           
  6946  0A4B  3002               	movlw	2
  6947  0A4C  0020               	movlb	0	; select bank0
  6948  0A4D  0637               	xorwf	i2c2_write@status,w
  6949  0A4E  1903               	btfsc	3,2
  6950  0A4F  2A4B               	goto	l3032
  6951                           
  6952                           ;i2c2_util.c: 22: if (status == I2C2_MESSAGE_COMPLETE) {
  6953  0A50  0837               	movf	i2c2_write@status,w
  6954  0A51  1D03               	btfss	3,2
  6955  0A52  2A55               	goto	l1008
  6956                           
  6957                           ;i2c2_util.c: 23: write_status = 0;
  6958  0A53  01B4               	clrf	i2c2_write@write_status
  6959                           
  6960                           ;i2c2_util.c: 24: } else {
  6961  0A54  0008               	return
  6962  0A55                     l1008:	
  6963                           
  6964                           ;i2c2_util.c: 25: write_status = 1;
  6965  0A55  01B4               	clrf	i2c2_write@write_status
  6966  0A56  0AB4               	incf	i2c2_write@write_status,f
  6967  0A57  0008               	return
  6968  0A58                     __end_of_i2c2_write:	
  6969                           ;i2c2_util.c: 26: }
  6970                           ;i2c2_util.c: 27: return write_status;
  6971                           ;	Return value of _i2c2_write is never used
  6972                           
  6973                           
  6974                           	psect	text20
  6975  0A7F                     __ptext20:	
  6976 ;; *************** function _I2C2_MasterWrite *****************
  6977 ;; Defined at:
  6978 ;;		line 598 in file "mcc_generated_files/i2c2.c"
  6979 ;; Parameters:    Size  Location     Type
  6980 ;;  pdata           1    wreg     PTR unsigned char 
  6981 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  6982 ;;  length          1    7[BANK0 ] unsigned char 
  6983 ;;  address         2    8[BANK0 ] unsigned int 
  6984 ;;  pflag           1   10[BANK0 ] PTR enum E2972
  6985 ;;		 -> i2c2_write_no_data@status(1), i2c2_read@status(1), i2c2_write@status(1), 
  6986 ;; Auto vars:     Size  Location     Type
  6987 ;;  pdata           1   13[BANK0 ] PTR unsigned char 
  6988 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  6989 ;; Return value:  Size  Location     Type
  6990 ;;                  1    wreg      void 
  6991 ;; Registers used:
  6992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6993 ;; Tracked objects:
  6994 ;;		On entry : 0/0
  6995 ;;		On exit  : 0/0
  6996 ;;		Unchanged: 0/0
  6997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6998 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7000 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7001 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7002 ;;Total ram usage:        7 bytes
  7003 ;; Hardware stack levels used:    1
  7004 ;; Hardware stack levels required when called:    7
  7005 ;; This function calls:
  7006 ;;		_I2C2_MasterTRBInsert
  7007 ;;		_I2C2_MasterWriteTRBBuild
  7008 ;; This function is called by:
  7009 ;;		_i2c2_write
  7010 ;; This function uses a non-reentrant model
  7011 ;;
  7012                           
  7013                           
  7014                           ;psect for function _I2C2_MasterWrite
  7015  0A7F                     _I2C2_MasterWrite:	
  7016                           
  7017                           ;incstack = 0
  7018                           ; Regs used in _I2C2_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7019                           ;I2C2_MasterWrite@pdata stored from wreg
  7020  0A7F  0020               	movlb	0	; select bank0
  7021  0A80  00AD               	movwf	I2C2_MasterWrite@pdata
  7022                           
  7023                           ;i2c2.c: 604: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
  7024                           ;i2c2.c: 607: if (i2c2_object.trStatus.s.full != 1)
  7025  0A81  1849               	btfsc	_i2c2_object+2,0
  7026  0A82  2AA0               	goto	l2998
  7027                           
  7028                           ;i2c2.c: 608: {
  7029                           ;i2c2.c: 609: I2C2_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  7030  0A83  082D               	movf	I2C2_MasterWrite@pdata,w
  7031  0A84  00AB               	movwf	??_I2C2_MasterWrite
  7032  0A85  082B               	movf	??_I2C2_MasterWrite,w
  7033  0A86  00A0               	movwf	I2C2_MasterWriteTRBBuild@pdata
  7034  0A87  0827               	movf	I2C2_MasterWrite@length,w
  7035  0A88  00AC               	movwf	??_I2C2_MasterWrite+1
  7036  0A89  082C               	movf	??_I2C2_MasterWrite+1,w
  7037  0A8A  00A1               	movwf	I2C2_MasterWriteTRBBuild@length
  7038  0A8B  0829               	movf	I2C2_MasterWrite@address+1,w
  7039  0A8C  00A3               	movwf	I2C2_MasterWriteTRBBuild@address+1
  7040  0A8D  0828               	movf	I2C2_MasterWrite@address,w
  7041  0A8E  00A2               	movwf	I2C2_MasterWriteTRBBuild@address
  7042  0A8F  30D2               	movlw	(low (I2C2_MasterWrite@trBlock| 0))& (0+255)
  7043  0A90  3189  21AA  318A   	fcall	_I2C2_MasterWriteTRBBuild
  7044                           
  7045                           ;i2c2.c: 610: I2C2_MasterTRBInsert(1, &trBlock, pflag);
  7046  0A93  30D2               	movlw	(low (I2C2_MasterWrite@trBlock| 0))& (0+255)
  7047  0A94  0020               	movlb	0	; select bank0
  7048  0A95  00AB               	movwf	??_I2C2_MasterWrite
  7049  0A96  082B               	movf	??_I2C2_MasterWrite,w
  7050  0A97  00A0               	movwf	I2C2_MasterTRBInsert@ptrb_list
  7051  0A98  082A               	movf	I2C2_MasterWrite@pflag,w
  7052  0A99  00AC               	movwf	??_I2C2_MasterWrite+1
  7053  0A9A  082C               	movf	??_I2C2_MasterWrite+1,w
  7054  0A9B  00A1               	movwf	I2C2_MasterTRBInsert@pflag
  7055  0A9C  3001               	movlw	1
  7056  0A9D  318B  23FA         	fcall	_I2C2_MasterTRBInsert
  7057                           
  7058                           ;i2c2.c: 611: }
  7059  0A9F  0008               	return
  7060  0AA0                     l2998:	
  7061                           
  7062                           ;i2c2.c: 612: else
  7063                           ;i2c2.c: 613: {
  7064                           ;i2c2.c: 614: *pflag = I2C2_MESSAGE_FAIL;
  7065  0AA0  0020               	movlb	0	; select bank0
  7066  0AA1  082A               	movf	I2C2_MasterWrite@pflag,w
  7067  0AA2  0086               	movwf	6
  7068  0AA3  0187               	clrf	7
  7069  0AA4  0181               	clrf	1
  7070  0AA5  0A81               	incf	1,f
  7071  0AA6  0008               	return
  7072  0AA7                     __end_of_I2C2_MasterWrite:	
  7073                           
  7074                           	psect	text21
  7075  09AA                     __ptext21:	
  7076 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
  7077 ;; Defined at:
  7078 ;;		line 707 in file "mcc_generated_files/i2c2.c"
  7079 ;; Parameters:    Size  Location     Type
  7080 ;;  ptrb            1    wreg     PTR struct .
  7081 ;;		 -> I2C2_MasterWrite@trBlock(4), 
  7082 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
  7083 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  7084 ;;  length          1    1[BANK0 ] unsigned char 
  7085 ;;  address         2    2[BANK0 ] unsigned int 
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;  ptrb            1    6[BANK0 ] PTR struct .
  7088 ;;		 -> I2C2_MasterWrite@trBlock(4), 
  7089 ;; Return value:  Size  Location     Type
  7090 ;;                  1    wreg      void 
  7091 ;; Registers used:
  7092 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7093 ;; Tracked objects:
  7094 ;;		On entry : 0/0
  7095 ;;		On exit  : 0/0
  7096 ;;		Unchanged: 0/0
  7097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7098 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7099 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7100 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7101 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7102 ;;Total ram usage:        7 bytes
  7103 ;; Hardware stack levels used:    1
  7104 ;; Hardware stack levels required when called:    6
  7105 ;; This function calls:
  7106 ;;		Nothing
  7107 ;; This function is called by:
  7108 ;;		_I2C2_MasterWrite
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           
  7113                           ;psect for function _I2C2_MasterWriteTRBBuild
  7114  09AA                     _I2C2_MasterWriteTRBBuild:	
  7115                           
  7116                           ;incstack = 0
  7117                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  7118                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
  7119  09AA  0020               	movlb	0	; select bank0
  7120  09AB  00A6               	movwf	I2C2_MasterWriteTRBBuild@ptrb
  7121                           
  7122                           ;i2c2.c: 713: ptrb->address = address << 1;
  7123  09AC  0823               	movf	I2C2_MasterWriteTRBBuild@address+1,w
  7124  09AD  00A5               	movwf	??_I2C2_MasterWriteTRBBuild+1
  7125  09AE  0822               	movf	I2C2_MasterWriteTRBBuild@address,w
  7126  09AF  00A4               	movwf	??_I2C2_MasterWriteTRBBuild
  7127  09B0  35A4               	lslf	??_I2C2_MasterWriteTRBBuild,f
  7128  09B1  0DA5               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
  7129  09B2  0826               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  7130  09B3  0086               	movwf	6
  7131  09B4  0187               	clrf	7
  7132  09B5  0824               	movf	??_I2C2_MasterWriteTRBBuild,w
  7133  09B6  3FC0               	movwi [0]fsr1
  7134  09B7  0825               	movf	??_I2C2_MasterWriteTRBBuild+1,w
  7135  09B8  3FC1               	movwi [1]fsr1
  7136                           
  7137                           ;i2c2.c: 714: ptrb->length = length;
  7138  09B9  0821               	movf	I2C2_MasterWriteTRBBuild@length,w
  7139  09BA  00A4               	movwf	??_I2C2_MasterWriteTRBBuild
  7140  09BB  0826               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  7141  09BC  3E02               	addlw	2
  7142  09BD  0086               	movwf	6
  7143  09BE  0187               	clrf	7
  7144  09BF  0824               	movf	??_I2C2_MasterWriteTRBBuild,w
  7145  09C0  0081               	movwf	1
  7146                           
  7147                           ;i2c2.c: 715: ptrb->pbuffer = pdata;
  7148  09C1  0820               	movf	I2C2_MasterWriteTRBBuild@pdata,w
  7149  09C2  00A4               	movwf	??_I2C2_MasterWriteTRBBuild
  7150  09C3  0826               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  7151  09C4  3E03               	addlw	3
  7152  09C5  0086               	movwf	6
  7153  09C6  0187               	clrf	7
  7154  09C7  0824               	movf	??_I2C2_MasterWriteTRBBuild,w
  7155  09C8  0081               	movwf	1
  7156  09C9  0008               	return
  7157  09CA                     __end_of_I2C2_MasterWriteTRBBuild:	
  7158                           
  7159                           	psect	text22
  7160  0BFA                     __ptext22:	
  7161 ;; *************** function _I2C2_MasterTRBInsert *****************
  7162 ;; Defined at:
  7163 ;;		line 641 in file "mcc_generated_files/i2c2.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;  count           1    wreg     unsigned char 
  7166 ;;  ptrb_list       1    0[BANK0 ] PTR struct .
  7167 ;;		 -> I2C2_MasterRead@trBlock(4), I2C2_MasterWrite@trBlock(4), 
  7168 ;;  pflag           1    1[BANK0 ] PTR enum E2972
  7169 ;;		 -> i2c2_read_no_reg_addr@status(1), i2c2_write_no_data@status(1), i2c2_read@status(1), i2c2_write@status(1), 
  7170 ;; Auto vars:     Size  Location     Type
  7171 ;;  count           1    3[BANK0 ] unsigned char 
  7172 ;; Return value:  Size  Location     Type
  7173 ;;                  1    wreg      void 
  7174 ;; Registers used:
  7175 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7176 ;; Tracked objects:
  7177 ;;		On entry : 0/0
  7178 ;;		On exit  : 0/0
  7179 ;;		Unchanged: 0/0
  7180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7181 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7182 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;Total ram usage:        4 bytes
  7186 ;; Hardware stack levels used:    1
  7187 ;; Hardware stack levels required when called:    6
  7188 ;; This function calls:
  7189 ;;		Nothing
  7190 ;; This function is called by:
  7191 ;;		_I2C2_MasterWrite
  7192 ;;		_I2C2_MasterRead
  7193 ;; This function uses a non-reentrant model
  7194 ;;
  7195                           
  7196                           
  7197                           ;psect for function _I2C2_MasterTRBInsert
  7198  0BFA                     _I2C2_MasterTRBInsert:	
  7199                           
  7200                           ;incstack = 0
  7201                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  7202                           ;I2C2_MasterTRBInsert@count stored from wreg
  7203  0BFA  0020               	movlb	0	; select bank0
  7204  0BFB  00A3               	movwf	I2C2_MasterTRBInsert@count
  7205                           
  7206                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
  7207  0BFC  1849               	btfsc	_i2c2_object+2,0
  7208  0BFD  2C2E               	goto	l2986
  7209                           
  7210                           ;i2c2.c: 649: {
  7211                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
  7212  0BFE  3002               	movlw	2
  7213  0BFF  00A2               	movwf	??_I2C2_MasterTRBInsert
  7214  0C00  0821               	movf	I2C2_MasterTRBInsert@pflag,w
  7215  0C01  0086               	movwf	6
  7216  0C02  0187               	clrf	7
  7217  0C03  0822               	movf	??_I2C2_MasterTRBInsert,w
  7218  0C04  0081               	movwf	1
  7219                           
  7220                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
  7221  0C05  0820               	movf	I2C2_MasterTRBInsert@ptrb_list,w
  7222  0C06  00A2               	movwf	??_I2C2_MasterTRBInsert
  7223  0C07  0A47               	incf	_i2c2_object,w
  7224  0C08  0086               	movwf	6
  7225  0C09  0187               	clrf	7
  7226  0C0A  0822               	movf	??_I2C2_MasterTRBInsert,w
  7227  0C0B  0081               	movwf	1
  7228                           
  7229                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
  7230  0C0C  0823               	movf	I2C2_MasterTRBInsert@count,w
  7231  0C0D  00A2               	movwf	??_I2C2_MasterTRBInsert
  7232  0C0E  0847               	movf	_i2c2_object,w
  7233  0C0F  0086               	movwf	6
  7234  0C10  0187               	clrf	7
  7235  0C11  0822               	movf	??_I2C2_MasterTRBInsert,w
  7236  0C12  0081               	movwf	1
  7237                           
  7238                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
  7239  0C13  0821               	movf	I2C2_MasterTRBInsert@pflag,w
  7240  0C14  00A2               	movwf	??_I2C2_MasterTRBInsert
  7241  0C15  0847               	movf	_i2c2_object,w
  7242  0C16  3E02               	addlw	2
  7243  0C17  0086               	movwf	6
  7244  0C18  0187               	clrf	7
  7245  0C19  0822               	movf	??_I2C2_MasterTRBInsert,w
  7246  0C1A  0081               	movwf	1
  7247                           
  7248                           ;i2c2.c: 655: i2c2_object.pTrTail++;
  7249  0C1B  3003               	movlw	3
  7250  0C1C  00A2               	movwf	??_I2C2_MasterTRBInsert
  7251  0C1D  0822               	movf	??_I2C2_MasterTRBInsert,w
  7252  0C1E  07C7               	addwf	_i2c2_object,f
  7253                           
  7254                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
  7255  0C1F  0847               	movf	_i2c2_object,w
  7256  0C20  3ADC               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
  7257  0C21  1D03               	skipz
  7258  0C22  2C27               	goto	l2982
  7259                           
  7260                           ;i2c2.c: 659: {
  7261                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
  7262  0C23  30D9               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  7263  0C24  00A2               	movwf	??_I2C2_MasterTRBInsert
  7264  0C25  0822               	movf	??_I2C2_MasterTRBInsert,w
  7265  0C26  00C7               	movwf	_i2c2_object
  7266  0C27                     l2982:	
  7267                           
  7268                           ;i2c2.c: 662: }
  7269                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
  7270  0C27  10C9               	bcf	_i2c2_object+2,1
  7271                           
  7272                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
  7273  0C28  0848               	movf	low ((_i2c2_object| 0+1)),w
  7274  0C29  0647               	xorwf	_i2c2_object,w
  7275  0C2A  1D03               	skipz
  7276  0C2B  2C33               	goto	l2988
  7277                           
  7278                           ;i2c2.c: 670: {
  7279                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
  7280  0C2C  1449               	bsf	_i2c2_object+2,0
  7281                           
  7282                           ;i2c2.c: 673: }
  7283                           ;i2c2.c: 675: }
  7284  0C2D  2C33               	goto	l2988
  7285  0C2E                     l2986:	
  7286                           
  7287                           ;i2c2.c: 676: else
  7288                           ;i2c2.c: 677: {
  7289                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
  7290  0C2E  0821               	movf	I2C2_MasterTRBInsert@pflag,w
  7291  0C2F  0086               	movwf	6
  7292  0C30  0187               	clrf	7
  7293  0C31  0181               	clrf	1
  7294  0C32  0A81               	incf	1,f
  7295  0C33                     l2988:	
  7296                           
  7297                           ;i2c2.c: 679: }
  7298                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
  7299  0C33  0821               	movf	I2C2_MasterTRBInsert@pflag,w
  7300  0C34  0086               	movwf	6
  7301  0C35  0187               	clrf	7
  7302  0C36  3002               	movlw	2
  7303  0C37  0601               	xorwf	1,w
  7304  0C38  1D03               	btfss	3,2
  7305  0C39  0008               	return
  7306  0C3A                     l2992:	
  7307                           ;i2c2.c: 683: {
  7308                           ;i2c2.c: 684: while(i2c2_state != S_MASTER_IDLE);
  7309                           
  7310  0C3A  0866               	movf	_i2c2_state,w
  7311  0C3B  1D03               	btfss	3,2
  7312  0C3C  2C3A               	goto	l2992
  7313                           
  7314                           ;i2c2.c: 685: {
  7315                           ;i2c2.c: 688: PIR4bits.SSP2IF = 1;
  7316  0C3D  1414               	bsf	20,0	;volatile
  7317  0C3E  0008               	return
  7318  0C3F                     __end_of_I2C2_MasterTRBInsert:	
  7319                           
  7320                           	psect	text23
  7321  0D26                     __ptext23:	
  7322 ;; *************** function _atoi *****************
  7323 ;; Defined at:
  7324 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  7325 ;; Parameters:    Size  Location     Type
  7326 ;;  s               1    wreg     PTR const unsigned char 
  7327 ;;		 -> buf(48), NULL(0), I2C1_StatusCallback@ext_buf(48), 
  7328 ;; Auto vars:     Size  Location     Type
  7329 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  7330 ;;		 -> buf(48), NULL(0), I2C1_StatusCallback@ext_buf(48), 
  7331 ;;  a               2   11[BANK0 ] int 
  7332 ;;  sign            1   10[BANK0 ] unsigned char 
  7333 ;; Return value:  Size  Location     Type
  7334 ;;                  2    6[BANK0 ] int 
  7335 ;; Registers used:
  7336 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7337 ;; Tracked objects:
  7338 ;;		On entry : 0/0
  7339 ;;		On exit  : 0/0
  7340 ;;		Unchanged: 0/0
  7341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7342 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7343 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7344 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7345 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7346 ;;Total ram usage:        8 bytes
  7347 ;; Hardware stack levels used:    1
  7348 ;; Hardware stack levels required when called:    7
  7349 ;; This function calls:
  7350 ;;		___wmul
  7351 ;;		_isdigit
  7352 ;; This function is called by:
  7353 ;;		_loop_func
  7354 ;;		_PROTOCOL_Loop
  7355 ;; This function uses a non-reentrant model
  7356 ;;
  7357                           
  7358                           
  7359                           ;psect for function _atoi
  7360  0D26                     _atoi:	
  7361                           
  7362                           ;incstack = 0
  7363                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7364                           ;atoi@s stored from wreg
  7365  0D26  0020               	movlb	0	; select bank0
  7366  0D27  00AD               	movwf	atoi@s
  7367  0D28                     l3258:	
  7368  0D28  082D               	movf	atoi@s,w
  7369  0D29  0086               	movwf	6
  7370  0D2A  3001               	movlw	1	; select bank2/3
  7371  0D2B  0087               	movwf	7
  7372  0D2C  3020               	movlw	32
  7373  0D2D  0601               	xorwf	1,w
  7374  0D2E  1D03               	btfss	3,2
  7375  0D2F  2D35               	goto	l3260
  7376  0D30                     l3256:	
  7377  0D30  3001               	movlw	1
  7378  0D31  00A8               	movwf	??_atoi
  7379  0D32  0828               	movf	??_atoi,w
  7380  0D33  07AD               	addwf	atoi@s,f
  7381  0D34  2D28               	goto	l3258
  7382  0D35                     l3260:	
  7383  0D35  082D               	movf	atoi@s,w
  7384  0D36  0086               	movwf	6
  7385  0D37  3001               	movlw	1	; select bank2/3
  7386  0D38  0087               	movwf	7
  7387  0D39  3009               	movlw	9
  7388  0D3A  0601               	xorwf	1,w
  7389  0D3B  1903               	btfsc	3,2
  7390  0D3C  2D30               	goto	l3256
  7391  0D3D  01AB               	clrf	atoi@a
  7392  0D3E  01AC               	clrf	atoi@a+1
  7393  0D3F  01AA               	clrf	atoi@sign
  7394  0D40  082D               	movf	atoi@s,w
  7395  0D41  0086               	movwf	6
  7396  0D42  3001               	movlw	1	; select bank2/3
  7397  0D43  0087               	movwf	7
  7398  0D44  302D               	movlw	45
  7399  0D45  0601               	xorwf	1,w
  7400  0D46  1D03               	btfss	3,2
  7401  0D47  2D4D               	goto	l3268
  7402  0D48  3001               	movlw	1
  7403  0D49  00A8               	movwf	??_atoi
  7404  0D4A  0828               	movf	??_atoi,w
  7405  0D4B  07AA               	addwf	atoi@sign,f
  7406  0D4C  2D55               	goto	l3274
  7407  0D4D                     l3268:	
  7408  0D4D  082D               	movf	atoi@s,w
  7409  0D4E  0086               	movwf	6
  7410  0D4F  3001               	movlw	1	; select bank2/3
  7411  0D50  0087               	movwf	7
  7412  0D51  302B               	movlw	43
  7413  0D52  0601               	xorwf	1,w
  7414  0D53  1D03               	btfss	3,2
  7415  0D54  2D59               	goto	l3276
  7416  0D55                     l3274:	
  7417  0D55  3001               	movlw	1
  7418  0D56  00A8               	movwf	??_atoi
  7419  0D57  0828               	movf	??_atoi,w
  7420  0D58  07AD               	addwf	atoi@s,f
  7421  0D59                     l3276:	
  7422  0D59  082D               	movf	atoi@s,w
  7423  0D5A  0086               	movwf	6
  7424  0D5B  3001               	movlw	1	; select bank2/3
  7425  0D5C  0087               	movwf	7
  7426  0D5D  0801               	movf	1,w
  7427  0D5E  3188  204F  318D   	fcall	_isdigit
  7428  0D61  1C03               	btfss	3,0
  7429  0D62  2D82               	goto	l3278
  7430  0D63  0020               	movlb	0	; select bank0
  7431  0D64  082C               	movf	atoi@a+1,w
  7432  0D65  00A1               	movwf	___wmul@multiplier+1
  7433  0D66  082B               	movf	atoi@a,w
  7434  0D67  00A0               	movwf	___wmul@multiplier
  7435  0D68  300A               	movlw	10
  7436  0D69  00A2               	movwf	___wmul@multiplicand
  7437  0D6A  3000               	movlw	0
  7438  0D6B  00A3               	movwf	___wmul@multiplicand+1
  7439  0D6C  3189  2117  318D   	fcall	___wmul
  7440  0D6F  0020               	movlb	0	; select bank0
  7441  0D70  082D               	movf	atoi@s,w
  7442  0D71  0086               	movwf	6
  7443  0D72  3001               	movlw	1	; select bank2/3
  7444  0D73  0087               	movwf	7
  7445  0D74  0801               	movf	1,w
  7446  0D75  0720               	addwf	?___wmul,w
  7447  0D76  00A8               	movwf	??_atoi
  7448  0D77  0821               	movf	?___wmul+1,w
  7449  0D78  1803               	skipnc
  7450  0D79  0A21               	incf	?___wmul+1,w
  7451  0D7A  00A9               	movwf	??_atoi+1
  7452  0D7B  0828               	movf	??_atoi,w
  7453  0D7C  3ED0               	addlw	208
  7454  0D7D  00AB               	movwf	atoi@a
  7455  0D7E  30FF               	movlw	255
  7456  0D7F  3D29               	addwfc	??_atoi+1,w
  7457  0D80  00AC               	movwf	atoi@a+1
  7458  0D81  2D55               	goto	l3274
  7459  0D82                     l3278:	
  7460  0D82  0020               	movlb	0	; select bank0
  7461  0D83  082A               	movf	atoi@sign,w
  7462  0D84  1903               	btfsc	3,2
  7463  0D85  2D92               	goto	l3284
  7464  0D86  092B               	comf	atoi@a,w
  7465  0D87  00A8               	movwf	??_atoi
  7466  0D88  092C               	comf	atoi@a+1,w
  7467  0D89  00A9               	movwf	??_atoi+1
  7468  0D8A  0AA8               	incf	??_atoi,f
  7469  0D8B  1903               	skipnz
  7470  0D8C  0AA9               	incf	??_atoi+1,f
  7471  0D8D  0828               	movf	??_atoi,w
  7472  0D8E  00A6               	movwf	?_atoi
  7473  0D8F  0829               	movf	??_atoi+1,w
  7474  0D90  00A7               	movwf	?_atoi+1
  7475  0D91  0008               	return
  7476  0D92                     l3284:	
  7477  0D92  082C               	movf	atoi@a+1,w
  7478  0D93  00A7               	movwf	?_atoi+1
  7479  0D94  082B               	movf	atoi@a,w
  7480  0D95  00A6               	movwf	?_atoi
  7481  0D96  0008               	return
  7482  0D97                     __end_of_atoi:	
  7483                           
  7484                           	psect	text24
  7485  084F                     __ptext24:	
  7486 ;; *************** function _isdigit *****************
  7487 ;; Defined at:
  7488 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;  c               1    wreg     unsigned char 
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;  c               1    1[BANK0 ] unsigned char 
  7493 ;; Return value:  Size  Location     Type
  7494 ;;		None               void
  7495 ;; Registers used:
  7496 ;;		wreg, status,2, status,0
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7503 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7505 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7506 ;;Total ram usage:        2 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; Hardware stack levels required when called:    6
  7509 ;; This function calls:
  7510 ;;		Nothing
  7511 ;; This function is called by:
  7512 ;;		_printf
  7513 ;;		_atoi
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           
  7518                           ;psect for function _isdigit
  7519  084F                     _isdigit:	
  7520                           
  7521                           ;incstack = 0
  7522                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7523                           ;isdigit@c stored from wreg
  7524  084F  0020               	movlb	0	; select bank0
  7525  0850  00A1               	movwf	isdigit@c
  7526  0851  01A0               	clrf	_isdigit$1515
  7527  0852  303A               	movlw	58
  7528  0853  0221               	subwf	isdigit@c,w
  7529  0854  1803               	skipnc
  7530  0855  285C               	goto	l3048
  7531  0856  3030               	movlw	48
  7532  0857  0221               	subwf	isdigit@c,w
  7533  0858  1C03               	skipc
  7534  0859  285C               	goto	l3048
  7535  085A  01A0               	clrf	_isdigit$1515
  7536  085B  0AA0               	incf	_isdigit$1515,f
  7537  085C                     l3048:	
  7538  085C  0C20               	rrf	_isdigit$1515,w
  7539  085D  0008               	return
  7540  085E                     __end_of_isdigit:	
  7541                           
  7542                           	psect	text25
  7543  0917                     __ptext25:	
  7544 ;; *************** function ___wmul *****************
  7545 ;; Defined at:
  7546 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7549 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7550 ;; Auto vars:     Size  Location     Type
  7551 ;;  product         2    4[BANK0 ] unsigned int 
  7552 ;; Return value:  Size  Location     Type
  7553 ;;                  2    0[BANK0 ] unsigned int 
  7554 ;; Registers used:
  7555 ;;		wreg, status,2, status,0
  7556 ;; Tracked objects:
  7557 ;;		On entry : 0/0
  7558 ;;		On exit  : 0/0
  7559 ;;		Unchanged: 0/0
  7560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7561 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7562 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7564 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7565 ;;Total ram usage:        6 bytes
  7566 ;; Hardware stack levels used:    1
  7567 ;; Hardware stack levels required when called:    6
  7568 ;; This function calls:
  7569 ;;		Nothing
  7570 ;; This function is called by:
  7571 ;;		_printf
  7572 ;;		_atoi
  7573 ;; This function uses a non-reentrant model
  7574 ;;
  7575                           
  7576                           
  7577                           ;psect for function ___wmul
  7578  0917                     ___wmul:	
  7579                           
  7580                           ;incstack = 0
  7581                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7582  0917  0020               	movlb	0	; select bank0
  7583  0918  01A4               	clrf	___wmul@product
  7584  0919  01A5               	clrf	___wmul@product+1
  7585  091A                     l3054:	
  7586  091A  1C20               	btfss	___wmul@multiplier,0
  7587  091B  2920               	goto	l1129
  7588  091C  0822               	movf	___wmul@multiplicand,w
  7589  091D  07A4               	addwf	___wmul@product,f
  7590  091E  0823               	movf	___wmul@multiplicand+1,w
  7591  091F  3DA5               	addwfc	___wmul@product+1,f
  7592  0920                     l1129:	
  7593  0920  3001               	movlw	1
  7594  0921                     u1815:	
  7595  0921  35A2               	lslf	___wmul@multiplicand,f
  7596  0922  0DA3               	rlf	___wmul@multiplicand+1,f
  7597  0923  0B89               	decfsz	9,f
  7598  0924  2921               	goto	u1815
  7599  0925  3001               	movlw	1
  7600  0926                     u1825:	
  7601  0926  36A1               	lsrf	___wmul@multiplier+1,f
  7602  0927  0CA0               	rrf	___wmul@multiplier,f
  7603  0928  0B89               	decfsz	9,f
  7604  0929  2926               	goto	u1825
  7605  092A  0820               	movf	___wmul@multiplier,w
  7606  092B  0421               	iorwf	___wmul@multiplier+1,w
  7607  092C  1D03               	btfss	3,2
  7608  092D  291A               	goto	l3054
  7609  092E  0825               	movf	___wmul@product+1,w
  7610  092F  00A1               	movwf	?___wmul+1
  7611  0930  0824               	movf	___wmul@product,w
  7612  0931  00A0               	movwf	?___wmul
  7613  0932  0008               	return
  7614  0933                     __end_of___wmul:	
  7615                           
  7616                           	psect	text26
  7617  1767                     __ptext26:	
  7618 ;; *************** function _TMR0_HasOverflowOccured *****************
  7619 ;; Defined at:
  7620 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  7621 ;; Parameters:    Size  Location     Type
  7622 ;;		None
  7623 ;; Auto vars:     Size  Location     Type
  7624 ;;		None
  7625 ;; Return value:  Size  Location     Type
  7626 ;;                  1    wreg      unsigned char 
  7627 ;; Registers used:
  7628 ;;		wreg, status,2, status,0
  7629 ;; Tracked objects:
  7630 ;;		On entry : 0/0
  7631 ;;		On exit  : 0/0
  7632 ;;		Unchanged: 0/0
  7633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7638 ;;Total ram usage:        0 bytes
  7639 ;; Hardware stack levels used:    1
  7640 ;; Hardware stack levels required when called:    6
  7641 ;; This function calls:
  7642 ;;		Nothing
  7643 ;; This function is called by:
  7644 ;;		_PROTOCOL_Loop
  7645 ;; This function uses a non-reentrant model
  7646 ;;
  7647                           
  7648                           
  7649                           ;psect for function _TMR0_HasOverflowOccured
  7650  1767                     _TMR0_HasOverflowOccured:	
  7651                           
  7652                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  7653                           
  7654                           ;incstack = 0
  7655                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  7656  1767  0C0B               	rrf	11,w	;volatile
  7657  1768  0C89               	rrf	9,f
  7658  1769  3901               	andlw	1
  7659  176A  0008               	return
  7660  176B                     __end_of_TMR0_HasOverflowOccured:	
  7661                           
  7662                           	psect	text27
  7663  17F1                     __ptext27:	
  7664 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  7665 ;; Defined at:
  7666 ;;		line 84 in file "protocol.c"
  7667 ;; Parameters:    Size  Location     Type
  7668 ;;  device_id_i2    1    wreg     unsigned char 
  7669 ;; Auto vars:     Size  Location     Type
  7670 ;;  device_id_i2    1    4[BANK0 ] unsigned char 
  7671 ;; Return value:  Size  Location     Type
  7672 ;;                  1    wreg      void 
  7673 ;; Registers used:
  7674 ;;		wreg, status,2, status,0, pclath, cstack
  7675 ;; Tracked objects:
  7676 ;;		On entry : 0/0
  7677 ;;		On exit  : 0/0
  7678 ;;		Unchanged: 0/0
  7679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7683 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7684 ;;Total ram usage:        2 bytes
  7685 ;; Hardware stack levels used:    1
  7686 ;; Hardware stack levels required when called:    7
  7687 ;; This function calls:
  7688 ;;		_DATAEE_WriteByte
  7689 ;; This function is called by:
  7690 ;;		_PROTOCOL_Loop
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           
  7695                           ;psect for function _PROTOCOL_Write_Device_Address
  7696  17F1                     _PROTOCOL_Write_Device_Address:	
  7697                           
  7698                           ;incstack = 0
  7699                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  7700                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  7701  17F1  0020               	movlb	0	; select bank0
  7702  17F2  00A4               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  7703                           
  7704                           ;protocol.c: 85: DATAEE_WriteByte(0, device_id_i2c);
  7705  17F3  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7706  17F4  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  7707  17F5  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  7708  17F6  00A0               	movwf	DATAEE_WriteByte@bData
  7709  17F7  3000               	movlw	0
  7710  17F8  3189  21EB         	fcall	_DATAEE_WriteByte
  7711                           
  7712                           ;protocol.c: 86: slave_address = device_id_i2c;
  7713  17FA  0020               	movlb	0	; select bank0
  7714  17FB  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7715  17FC  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  7716  17FD  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  7717  17FE  00D8               	movwf	_slave_address
  7718  17FF  0008               	return
  7719  1800                     __end_of_PROTOCOL_Write_Device_Address:	
  7720                           
  7721                           	psect	text28
  7722  1751                     __ptext28:	
  7723 ;; *************** function _PROTOCOL_STP *****************
  7724 ;; Defined at:
  7725 ;;		line 98 in file "protocol.c"
  7726 ;; Parameters:    Size  Location     Type
  7727 ;;		None
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;		None
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  1    wreg      void 
  7732 ;; Registers used:
  7733 ;;		wreg, status,2, status,0
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7743 ;;Total ram usage:        0 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; Hardware stack levels required when called:    6
  7746 ;; This function calls:
  7747 ;;		Nothing
  7748 ;; This function is called by:
  7749 ;;		_PROTOCOL_Loop
  7750 ;; This function uses a non-reentrant model
  7751 ;;
  7752                           
  7753                           
  7754                           ;psect for function _PROTOCOL_STP
  7755  1751                     _PROTOCOL_STP:	
  7756                           
  7757                           ;protocol.c: 100: running = 0;
  7758                           
  7759                           ;incstack = 0
  7760                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  7761  1751  0020               	movlb	0	; select bank0
  7762  1752  01D4               	clrf	_running
  7763  1753  0008               	return
  7764  1754                     __end_of_PROTOCOL_STP:	
  7765                           
  7766                           	psect	text29
  7767  1763                     __ptext29:	
  7768 ;; *************** function _PROTOCOL_STA *****************
  7769 ;; Defined at:
  7770 ;;		line 93 in file "protocol.c"
  7771 ;; Parameters:    Size  Location     Type
  7772 ;;		None
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;		None
  7775 ;; Return value:  Size  Location     Type
  7776 ;;                  1    wreg      void 
  7777 ;; Registers used:
  7778 ;;		wreg, status,2, status,0
  7779 ;; Tracked objects:
  7780 ;;		On entry : 0/0
  7781 ;;		On exit  : 0/0
  7782 ;;		Unchanged: 0/0
  7783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;Total ram usage:        0 bytes
  7789 ;; Hardware stack levels used:    1
  7790 ;; Hardware stack levels required when called:    6
  7791 ;; This function calls:
  7792 ;;		Nothing
  7793 ;; This function is called by:
  7794 ;;		_PROTOCOL_Loop
  7795 ;; This function uses a non-reentrant model
  7796 ;;
  7797                           
  7798                           
  7799                           ;psect for function _PROTOCOL_STA
  7800  1763                     _PROTOCOL_STA:	
  7801                           
  7802                           ;protocol.c: 95: running = 1;
  7803                           
  7804                           ;incstack = 0
  7805                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  7806  1763  0020               	movlb	0	; select bank0
  7807  1764  01D4               	clrf	_running
  7808  1765  0AD4               	incf	_running,f
  7809  1766  0008               	return
  7810  1767                     __end_of_PROTOCOL_STA:	
  7811                           
  7812                           	psect	text30
  7813  179B                     __ptext30:	
  7814 ;; *************** function _PROTOCOL_SET *****************
  7815 ;; Defined at:
  7816 ;;		line 111 in file "protocol.c"
  7817 ;; Parameters:    Size  Location     Type
  7818 ;;  value_          1    wreg     unsigned char 
  7819 ;; Auto vars:     Size  Location     Type
  7820 ;;  value_          1    1[BANK0 ] unsigned char 
  7821 ;; Return value:  Size  Location     Type
  7822 ;;                  1    wreg      void 
  7823 ;; Registers used:
  7824 ;;		wreg, status,2, status,0
  7825 ;; Tracked objects:
  7826 ;;		On entry : 0/0
  7827 ;;		On exit  : 0/0
  7828 ;;		Unchanged: 0/0
  7829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;Total ram usage:        2 bytes
  7835 ;; Hardware stack levels used:    1
  7836 ;; Hardware stack levels required when called:    6
  7837 ;; This function calls:
  7838 ;;		Nothing
  7839 ;; This function is called by:
  7840 ;;		_PROTOCOL_Loop
  7841 ;; This function uses a non-reentrant model
  7842 ;;
  7843                           
  7844                           
  7845                           ;psect for function _PROTOCOL_SET
  7846  179B                     _PROTOCOL_SET:	
  7847                           
  7848                           ;incstack = 0
  7849                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  7850                           ;PROTOCOL_SET@value_ stored from wreg
  7851  179B  0020               	movlb	0	; select bank0
  7852  179C  00A1               	movwf	PROTOCOL_SET@value_
  7853                           
  7854                           ;protocol.c: 112: value = value_;
  7855  179D  0821               	movf	PROTOCOL_SET@value_,w
  7856  179E  00A0               	movwf	??_PROTOCOL_SET
  7857  179F  0820               	movf	??_PROTOCOL_SET,w
  7858  17A0  00D6               	movwf	_value
  7859  17A1  0008               	return
  7860  17A2                     __end_of_PROTOCOL_SET:	
  7861                           
  7862                           	psect	text31
  7863  17AB                     __ptext31:	
  7864 ;; *************** function _PROTOCOL_SAV *****************
  7865 ;; Defined at:
  7866 ;;		line 107 in file "protocol.c"
  7867 ;; Parameters:    Size  Location     Type
  7868 ;;		None
  7869 ;; Auto vars:     Size  Location     Type
  7870 ;;		None
  7871 ;; Return value:  Size  Location     Type
  7872 ;;                  1    wreg      void 
  7873 ;; Registers used:
  7874 ;;		wreg, status,2, status,0, pclath, cstack
  7875 ;; Tracked objects:
  7876 ;;		On entry : 0/0
  7877 ;;		On exit  : 0/0
  7878 ;;		Unchanged: 0/0
  7879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7882 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7883 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7884 ;;Total ram usage:        1 bytes
  7885 ;; Hardware stack levels used:    1
  7886 ;; Hardware stack levels required when called:    7
  7887 ;; This function calls:
  7888 ;;		_DATAEE_WriteByte
  7889 ;; This function is called by:
  7890 ;;		_PROTOCOL_Loop
  7891 ;; This function uses a non-reentrant model
  7892 ;;
  7893                           
  7894                           
  7895                           ;psect for function _PROTOCOL_SAV
  7896  17AB                     _PROTOCOL_SAV:	
  7897                           
  7898                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
  7899                           
  7900                           ;incstack = 0
  7901                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  7902  17AB  0020               	movlb	0	; select bank0
  7903  17AC  0856               	movf	_value,w
  7904  17AD  00A3               	movwf	??_PROTOCOL_SAV
  7905  17AE  0823               	movf	??_PROTOCOL_SAV,w
  7906  17AF  00A0               	movwf	DATAEE_WriteByte@bData
  7907  17B0  3001               	movlw	1
  7908  17B1  3189  21EB         	fcall	_DATAEE_WriteByte
  7909  17B3  0008               	return
  7910  17B4                     __end_of_PROTOCOL_SAV:	
  7911                           
  7912                           	psect	text32
  7913  09EB                     __ptext32:	
  7914 ;; *************** function _DATAEE_WriteByte *****************
  7915 ;; Defined at:
  7916 ;;		line 180 in file "mcc_generated_files/memory.c"
  7917 ;; Parameters:    Size  Location     Type
  7918 ;;  bAdd            1    wreg     unsigned char 
  7919 ;;  bData           1    0[BANK0 ] unsigned char 
  7920 ;; Auto vars:     Size  Location     Type
  7921 ;;  bAdd            1    1[BANK0 ] unsigned char 
  7922 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  7923 ;; Return value:  Size  Location     Type
  7924 ;;                  1    wreg      void 
  7925 ;; Registers used:
  7926 ;;		wreg, status,2, status,0
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7932 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7933 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7935 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7936 ;;Total ram usage:        3 bytes
  7937 ;; Hardware stack levels used:    1
  7938 ;; Hardware stack levels required when called:    6
  7939 ;; This function calls:
  7940 ;;		Nothing
  7941 ;; This function is called by:
  7942 ;;		_PROTOCOL_Write_Device_Address
  7943 ;;		_PROTOCOL_SAV
  7944 ;; This function uses a non-reentrant model
  7945 ;;
  7946                           
  7947                           
  7948                           ;psect for function _DATAEE_WriteByte
  7949  09EB                     _DATAEE_WriteByte:	
  7950                           
  7951                           ;incstack = 0
  7952                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  7953                           ;DATAEE_WriteByte@bAdd stored from wreg
  7954  09EB  0020               	movlb	0	; select bank0
  7955  09EC  00A1               	movwf	DATAEE_WriteByte@bAdd
  7956                           
  7957                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  7958  09ED  01A2               	clrf	DATAEE_WriteByte@GIEBitValue
  7959                           
  7960                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  7961  09EE  0821               	movf	DATAEE_WriteByte@bAdd,w
  7962  09EF  0023               	movlb	3	; select bank3
  7963  09F0  0091               	movwf	17	;volatile
  7964                           
  7965                           ;memory.c: 185: EEDATL = bData;
  7966  09F1  0020               	movlb	0	; select bank0
  7967  09F2  0820               	movf	DATAEE_WriteByte@bData,w
  7968  09F3  0023               	movlb	3	; select bank3
  7969  09F4  0093               	movwf	19	;volatile
  7970                           
  7971                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  7972  09F5  1395               	bcf	21,7	;volsfr
  7973                           
  7974                           ;memory.c: 187: EECON1bits.CFGS = 0;
  7975  09F6  1315               	bcf	21,6	;volsfr
  7976                           
  7977                           ;memory.c: 188: EECON1bits.WREN = 1;
  7978  09F7  1515               	bsf	21,2	;volsfr
  7979                           
  7980                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  7981  09F8  3000               	movlw	0
  7982  09F9  1B8B               	btfsc	11,7	;volatile
  7983  09FA  3001               	movlw	1
  7984  09FB  0020               	movlb	0	; select bank0
  7985  09FC  00A2               	movwf	DATAEE_WriteByte@GIEBitValue
  7986                           
  7987                           ;memory.c: 191: INTCONbits.GIE = 0;
  7988  09FD  138B               	bcf	11,7	;volatile
  7989                           
  7990                           ;memory.c: 192: EECON2 = 0x55;
  7991  09FE  3055               	movlw	85
  7992  09FF  0023               	movlb	3	; select bank3
  7993  0A00  0096               	movwf	22	;volsfr
  7994                           
  7995                           ;memory.c: 193: EECON2 = 0xAA;
  7996  0A01  30AA               	movlw	170
  7997  0A02  0096               	movwf	22	;volsfr
  7998                           
  7999                           ;memory.c: 194: EECON1bits.WR = 1;
  8000  0A03  1495               	bsf	21,1	;volsfr
  8001  0A04                     l480:	
  8002                           ;memory.c: 197: {
  8003                           
  8004                           ;memory.c: 196: while (EECON1bits.WR)
  8005                           
  8006  0A04  1895               	btfsc	21,1	;volsfr
  8007  0A05  2A04               	goto	l480
  8008                           
  8009                           ;memory.c: 198: }
  8010                           ;memory.c: 200: EECON1bits.WREN = 0;
  8011  0A06  1115               	bcf	21,2	;volsfr
  8012                           
  8013                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  8014  0A07  0020               	movlb	0	; select bank0
  8015  0A08  0C22               	rrf	DATAEE_WriteByte@GIEBitValue,w
  8016  0A09  1C03               	skipc
  8017  0A0A  138B               	bcf	11,7	;volatile
  8018  0A0B  1803               	skipnc
  8019  0A0C  178B               	bsf	11,7	;volatile
  8020  0A0D  0008               	return
  8021  0A0E                     __end_of_DATAEE_WriteByte:	
  8022                           
  8023                           	psect	text33
  8024  086E                     __ptext33:	
  8025 ;; *************** function _PROTOCOL_EXT *****************
  8026 ;; Defined at:
  8027 ;;		line 116 in file "protocol.c"
  8028 ;; Parameters:    Size  Location     Type
  8029 ;;  char_buf        1    wreg     PTR unsigned char 
  8030 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;  char_buf        1    5[BANK0 ] PTR unsigned char 
  8033 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8034 ;; Return value:  Size  Location     Type
  8035 ;;                  1    wreg      void 
  8036 ;; Registers used:
  8037 ;;		wreg, status,2, status,0, pclath, cstack
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;Total ram usage:        2 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; Hardware stack levels required when called:    8
  8050 ;; This function calls:
  8051 ;;		Absolute function
  8052 ;;		_extension_handler
  8053 ;; This function is called by:
  8054 ;;		_PROTOCOL_Loop
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           
  8059                           ;psect for function _PROTOCOL_EXT
  8060  086E                     _PROTOCOL_EXT:	
  8061                           
  8062                           ;incstack = 0
  8063                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0+pclath+cstack]
  8064                           ;PROTOCOL_EXT@char_buf stored from wreg
  8065  086E  0020               	movlb	0	; select bank0
  8066  086F  00A5               	movwf	PROTOCOL_EXT@char_buf
  8067                           
  8068                           ;protocol.c: 117: if (PROTOCOL_Extension_Handler) PROTOCOL_Extension_Handler(char_buf);
  8069  0870  084C               	movf	_PROTOCOL_Extension_Handler,w
  8070  0871  044D               	iorwf	_PROTOCOL_Extension_Handler+1,w
  8071  0872  1903               	btfsc	3,2
  8072  0873  0008               	return
  8073  0874  0825               	movf	PROTOCOL_EXT@char_buf,w
  8074  0875  00A4               	movwf	??_PROTOCOL_EXT
  8075  0876  0824               	movf	??_PROTOCOL_EXT,w
  8076  0877  00A2               	movwf	extension_handler@buf
  8077  0878  084D               	movf	_PROTOCOL_Extension_Handler+1,w
  8078  0879  008A               	movwf	10
  8079  087A  084C               	movf	_PROTOCOL_Extension_Handler,w
  8080  087B  000A               	callw
  8081  087C  3188               	pagesel	$
  8082  087D  0008               	return
  8083  087E                     __end_of_PROTOCOL_EXT:	
  8084                           
  8085                           	psect	text34
  8086  089F                     __ptext34:	
  8087 ;; *************** function _extension_handler *****************
  8088 ;; Defined at:
  8089 ;;		line 113 in file "main.c"
  8090 ;; Parameters:    Size  Location     Type
  8091 ;;  buf             1    2[BANK0 ] PTR unsigned char 
  8092 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8093 ;; Auto vars:     Size  Location     Type
  8094 ;;  value           1    0        unsigned char 
  8095 ;; Return value:  Size  Location     Type
  8096 ;;                  1    wreg      void 
  8097 ;; Registers used:
  8098 ;;		wreg, status,2, status,0, pclath, cstack
  8099 ;; Tracked objects:
  8100 ;;		On entry : 0/0
  8101 ;;		On exit  : 0/0
  8102 ;;		Unchanged: 0/0
  8103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8104 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8107 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8108 ;;Total ram usage:        2 bytes
  8109 ;; Hardware stack levels used:    1
  8110 ;; Hardware stack levels required when called:    7
  8111 ;; This function calls:
  8112 ;;		_PROTOCOL_Read_Lock
  8113 ;;		_PROTOCOL_Set_Lock
  8114 ;; This function is called by:
  8115 ;;		_main
  8116 ;;		i1_PROTOCOL_EXT
  8117 ;;		_PROTOCOL_EXT
  8118 ;; This function uses a non-reentrant model
  8119 ;;
  8120                           
  8121                           
  8122                           ;psect for function _extension_handler
  8123  089F                     _extension_handler:	
  8124                           
  8125                           ;Skip over the trampoline to the duplicate function for level 1
  8126  089F  1C7E               	btfss	126,0
  8127  08A0  28A3               	goto	l3228
  8128  08A1  3197  2FE2         	ljmp	i1l3086
  8129  08A3                     _extension_handler$intlevel0:	
  8130  08A3                     l3228:	
  8131                           ;incstack = 0
  8132                           ; Regs used in _extension_handler: [wreg+status,2+status,0+pclath+cstack]
  8133                           
  8134                           
  8135                           ;main.c: 114: uint8_t value;
  8136                           ;main.c: 115: if (!PROTOCOL_Read_Lock()) {
  8137  08A3  3197  274E  3188   	fcall	_PROTOCOL_Read_Lock
  8138  08A6  3A00               	xorlw	0
  8139  08A7  1D03               	skipz
  8140  08A8  0008               	return
  8141                           
  8142                           ;main.c: 116: pbuf = buf;
  8143  08A9  0020               	movlb	0	; select bank0
  8144  08AA  0822               	movf	extension_handler@buf,w
  8145  08AB  00A3               	movwf	??_extension_handler
  8146  08AC  0823               	movf	??_extension_handler,w
  8147  08AD  00D9               	movwf	_pbuf
  8148                           
  8149                           ;main.c: 117: PROTOCOL_Set_Lock(1);
  8150  08AE  3001               	movlw	1
  8151  08AF  3197  2794         	fcall	_PROTOCOL_Set_Lock
  8152  08B1  0008               	return
  8153  08B2                     __end_of_extension_handler:	
  8154                           
  8155                           	psect	text35
  8156  1794                     __ptext35:	
  8157 ;; *************** function _PROTOCOL_Set_Lock *****************
  8158 ;; Defined at:
  8159 ;;		line 120 in file "protocol.c"
  8160 ;; Parameters:    Size  Location     Type
  8161 ;;  lock            1    wreg     unsigned char 
  8162 ;; Auto vars:     Size  Location     Type
  8163 ;;  lock            1    1[BANK0 ] unsigned char 
  8164 ;; Return value:  Size  Location     Type
  8165 ;;                  1    wreg      void 
  8166 ;; Registers used:
  8167 ;;		wreg
  8168 ;; Tracked objects:
  8169 ;;		On entry : 0/0
  8170 ;;		On exit  : 0/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8174 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8176 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;Total ram usage:        2 bytes
  8178 ;; Hardware stack levels used:    1
  8179 ;; Hardware stack levels required when called:    6
  8180 ;; This function calls:
  8181 ;;		Nothing
  8182 ;; This function is called by:
  8183 ;;		_extension_handler
  8184 ;;		_loop_func
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           
  8189                           ;psect for function _PROTOCOL_Set_Lock
  8190  1794                     _PROTOCOL_Set_Lock:	
  8191                           
  8192                           ;incstack = 0
  8193                           ; Regs used in _PROTOCOL_Set_Lock: [wreg]
  8194                           ;PROTOCOL_Set_Lock@lock stored from wreg
  8195  1794  0020               	movlb	0	; select bank0
  8196  1795  00A1               	movwf	PROTOCOL_Set_Lock@lock
  8197                           
  8198                           ;protocol.c: 121: locked = lock;
  8199  1796  0821               	movf	PROTOCOL_Set_Lock@lock,w
  8200  1797  00A0               	movwf	??_PROTOCOL_Set_Lock
  8201  1798  0820               	movf	??_PROTOCOL_Set_Lock,w
  8202  1799  00D5               	movwf	_locked
  8203  179A  0008               	return
  8204  179B                     __end_of_PROTOCOL_Set_Lock:	
  8205                           
  8206                           	psect	text36
  8207  174E                     __ptext36:	
  8208 ;; *************** function _PROTOCOL_Read_Lock *****************
  8209 ;; Defined at:
  8210 ;;		line 124 in file "protocol.c"
  8211 ;; Parameters:    Size  Location     Type
  8212 ;;		None
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;		None
  8215 ;; Return value:  Size  Location     Type
  8216 ;;                  1    wreg      unsigned char 
  8217 ;; Registers used:
  8218 ;;		wreg
  8219 ;; Tracked objects:
  8220 ;;		On entry : 0/0
  8221 ;;		On exit  : 0/0
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;Total ram usage:        0 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; Hardware stack levels required when called:    6
  8231 ;; This function calls:
  8232 ;;		Nothing
  8233 ;; This function is called by:
  8234 ;;		_extension_handler
  8235 ;;		_loop_func
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           
  8240                           ;psect for function _PROTOCOL_Read_Lock
  8241  174E                     _PROTOCOL_Read_Lock:	
  8242                           
  8243                           ;protocol.c: 125: return locked;
  8244                           
  8245                           ;incstack = 0
  8246                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
  8247  174E  0020               	movlb	0	; select bank0
  8248  174F  0855               	movf	_locked,w
  8249  1750  0008               	return
  8250  1751                     __end_of_PROTOCOL_Read_Lock:	
  8251                           
  8252                           	psect	text37
  8253  098B                     __ptext37:	
  8254 ;; *************** function _EUSART_Read *****************
  8255 ;; Defined at:
  8256 ;;		line 112 in file "mcc_generated_files/eusart.c"
  8257 ;; Parameters:    Size  Location     Type
  8258 ;;		None
  8259 ;; Auto vars:     Size  Location     Type
  8260 ;;  readValue       1    1[BANK0 ] unsigned char 
  8261 ;; Return value:  Size  Location     Type
  8262 ;;                  1    wreg      unsigned char 
  8263 ;; Registers used:
  8264 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8265 ;; Tracked objects:
  8266 ;;		On entry : 0/0
  8267 ;;		On exit  : 0/0
  8268 ;;		Unchanged: 0/0
  8269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8271 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8272 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8273 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8274 ;;Total ram usage:        2 bytes
  8275 ;; Hardware stack levels used:    1
  8276 ;; Hardware stack levels required when called:    6
  8277 ;; This function calls:
  8278 ;;		Nothing
  8279 ;; This function is called by:
  8280 ;;		_PROTOCOL_Loop
  8281 ;;		_getch
  8282 ;; This function uses a non-reentrant model
  8283 ;;
  8284                           
  8285                           
  8286                           ;psect for function _EUSART_Read
  8287  098B                     _EUSART_Read:	
  8288                           
  8289                           ;eusart.c: 114: uint8_t readValue = 0;
  8290                           
  8291                           ;incstack = 0
  8292                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  8293  098B  0020               	movlb	0	; select bank0
  8294  098C  01A1               	clrf	EUSART_Read@readValue
  8295  098D                     l3472:	
  8296                           ;eusart.c: 117: {
  8297                           
  8298                           ;eusart.c: 116: while(0 == eusartRxCount)
  8299                           
  8300  098D  085B               	movf	_eusartRxCount,w	;volatile
  8301  098E  1903               	btfsc	3,2
  8302  098F  298D               	goto	l3472
  8303                           
  8304                           ;eusart.c: 118: }
  8305                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  8306  0990  085C               	movf	_eusartRxTail,w
  8307  0991  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  8308  0992  0086               	movwf	6
  8309  0993  0187               	clrf	7
  8310  0994  0801               	movf	1,w
  8311  0995  00A0               	movwf	??_EUSART_Read
  8312  0996  0820               	movf	??_EUSART_Read,w
  8313  0997  00A1               	movwf	EUSART_Read@readValue
  8314  0998  3001               	movlw	1
  8315  0999  00A0               	movwf	??_EUSART_Read
  8316  099A  0820               	movf	??_EUSART_Read,w
  8317  099B  07DC               	addwf	_eusartRxTail,f	;volatile
  8318                           
  8319                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  8320  099C  3008               	movlw	8
  8321  099D  025C               	subwf	_eusartRxTail,w	;volatile
  8322  099E  1803               	btfsc	3,0
  8323                           
  8324                           ;eusart.c: 122: {
  8325                           ;eusart.c: 123: eusartRxTail = 0;
  8326  099F  01DC               	clrf	_eusartRxTail	;volatile
  8327                           
  8328                           ;eusart.c: 124: }
  8329                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  8330  09A0  0021               	movlb	1	; select bank1
  8331  09A1  1291               	bcf	17,5	;volatile
  8332                           
  8333                           ;eusart.c: 126: eusartRxCount--;
  8334  09A2  3001               	movlw	1
  8335  09A3  0020               	movlb	0	; select bank0
  8336  09A4  02DB               	subwf	_eusartRxCount,f	;volatile
  8337                           
  8338                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  8339  09A5  0021               	movlb	1	; select bank1
  8340  09A6  1691               	bsf	17,5	;volatile
  8341                           
  8342                           ;eusart.c: 129: return readValue;
  8343  09A7  0020               	movlb	0	; select bank0
  8344  09A8  0821               	movf	EUSART_Read@readValue,w
  8345  09A9  0008               	return
  8346  09AA                     __end_of_EUSART_Read:	
  8347                           
  8348                           	psect	text38
  8349  0CD4                     __ptext38:	
  8350 ;; *************** function _PROTOCOL_Initialize *****************
  8351 ;; Defined at:
  8352 ;;		line 59 in file "protocol.c"
  8353 ;; Parameters:    Size  Location     Type
  8354 ;;  device_id       2    1[BANK0 ] PTR const unsigned char 
  8355 ;;		 -> STR_16(17), 
  8356 ;;  start_handle    1    3[BANK0 ] PTR void 
  8357 ;;		 -> NULL(0), 
  8358 ;;  stop_handler    1    4[BANK0 ] PTR void 
  8359 ;;		 -> NULL(0), 
  8360 ;;  set_handler     1    5[BANK0 ] PTR void 
  8361 ;;		 -> NULL(0), 
  8362 ;;  inv_handler     1    6[BANK0 ] PTR void 
  8363 ;;		 -> NULL(0), 
  8364 ;;  scaler          1    7[BANK0 ] unsigned char 
  8365 ;; Auto vars:     Size  Location     Type
  8366 ;;		None
  8367 ;; Return value:  Size  Location     Type
  8368 ;;                  1    wreg      void 
  8369 ;; Registers used:
  8370 ;;		wreg, status,2, status,0, pclath, cstack
  8371 ;; Tracked objects:
  8372 ;;		On entry : 0/0
  8373 ;;		On exit  : 0/0
  8374 ;;		Unchanged: 0/0
  8375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8376 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8378 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8379 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8380 ;;Total ram usage:        9 bytes
  8381 ;; Hardware stack levels used:    1
  8382 ;; Hardware stack levels required when called:    7
  8383 ;; This function calls:
  8384 ;;		_DATAEE_ReadByte
  8385 ;; This function is called by:
  8386 ;;		_main
  8387 ;; This function uses a non-reentrant model
  8388 ;;
  8389                           
  8390                           
  8391                           ;psect for function _PROTOCOL_Initialize
  8392  0CD4                     _PROTOCOL_Initialize:	
  8393                           
  8394                           ;protocol.c: 60: device_id_ = device_id;
  8395                           
  8396                           ;incstack = 0
  8397                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8398  0CD4  0020               	movlb	0	; select bank0
  8399  0CD5  0822               	movf	PROTOCOL_Initialize@device_id+1,w
  8400  0CD6  0021               	movlb	1	; select bank1
  8401  0CD7  00E3               	movwf	(_device_id_+1)^(0+128)
  8402  0CD8  0020               	movlb	0	; select bank0
  8403  0CD9  0821               	movf	PROTOCOL_Initialize@device_id,w
  8404  0CDA  0021               	movlb	1	; select bank1
  8405  0CDB  00E2               	movwf	_device_id_^(0+128)
  8406                           
  8407                           ;protocol.c: 61: PROTOCOL_Start_Handler = start_handler;
  8408  0CDC  0020               	movlb	0	; select bank0
  8409  0CDD  0823               	movf	PROTOCOL_Initialize@start_handler,w
  8410  0CDE  00A8               	movwf	??_PROTOCOL_Initialize
  8411  0CDF  3000               	movlw	0
  8412  0CE0  00A9               	movwf	??_PROTOCOL_Initialize+1
  8413  0CE1  0828               	movf	??_PROTOCOL_Initialize,w
  8414  0CE2  0021               	movlb	1	; select bank1
  8415  0CE3  00E8               	movwf	_PROTOCOL_Start_Handler^(0+128)
  8416  0CE4  0020               	movlb	0	; select bank0
  8417  0CE5  0829               	movf	??_PROTOCOL_Initialize+1,w
  8418  0CE6  0021               	movlb	1	; select bank1
  8419  0CE7  00E9               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  8420                           
  8421                           ;protocol.c: 62: PROTOCOL_Stop_Handler = stop_handler;
  8422  0CE8  0020               	movlb	0	; select bank0
  8423  0CE9  0824               	movf	PROTOCOL_Initialize@stop_handler,w
  8424  0CEA  00A8               	movwf	??_PROTOCOL_Initialize
  8425  0CEB  3000               	movlw	0
  8426  0CEC  00A9               	movwf	??_PROTOCOL_Initialize+1
  8427  0CED  0828               	movf	??_PROTOCOL_Initialize,w
  8428  0CEE  0021               	movlb	1	; select bank1
  8429  0CEF  00E6               	movwf	_PROTOCOL_Stop_Handler^(0+128)
  8430  0CF0  0020               	movlb	0	; select bank0
  8431  0CF1  0829               	movf	??_PROTOCOL_Initialize+1,w
  8432  0CF2  0021               	movlb	1	; select bank1
  8433  0CF3  00E7               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+128)
  8434                           
  8435                           ;protocol.c: 63: PROTOCOL_Set_Handler = set_handler;
  8436  0CF4  0020               	movlb	0	; select bank0
  8437  0CF5  0825               	movf	PROTOCOL_Initialize@set_handler,w
  8438  0CF6  00A8               	movwf	??_PROTOCOL_Initialize
  8439  0CF7  3000               	movlw	0
  8440  0CF8  00A9               	movwf	??_PROTOCOL_Initialize+1
  8441  0CF9  0828               	movf	??_PROTOCOL_Initialize,w
  8442  0CFA  0021               	movlb	1	; select bank1
  8443  0CFB  00E4               	movwf	_PROTOCOL_Set_Handler^(0+128)
  8444  0CFC  0020               	movlb	0	; select bank0
  8445  0CFD  0829               	movf	??_PROTOCOL_Initialize+1,w
  8446  0CFE  0021               	movlb	1	; select bank1
  8447  0CFF  00E5               	movwf	(_PROTOCOL_Set_Handler+1)^(0+128)
  8448                           
  8449                           ;protocol.c: 66: value = DATAEE_ReadByte(1);
  8450  0D00  3001               	movlw	1
  8451  0D01  3197  27C7  318C   	fcall	_DATAEE_ReadByte
  8452  0D04  0020               	movlb	0	; select bank0
  8453  0D05  00A8               	movwf	??_PROTOCOL_Initialize
  8454  0D06  0828               	movf	??_PROTOCOL_Initialize,w
  8455  0D07  00D6               	movwf	_value
  8456                           
  8457                           ;protocol.c: 68: slave_address = DATAEE_ReadByte(0);
  8458  0D08  3000               	movlw	0
  8459  0D09  3197  27C7         	fcall	_DATAEE_ReadByte
  8460  0D0B  0020               	movlb	0	; select bank0
  8461  0D0C  00A8               	movwf	??_PROTOCOL_Initialize
  8462  0D0D  0828               	movf	??_PROTOCOL_Initialize,w
  8463  0D0E  00D8               	movwf	_slave_address
  8464                           
  8465                           ;protocol.c: 71: readbuf.status = COMPLETE;
  8466  0D0F  3003               	movlw	3
  8467  0D10  00A8               	movwf	??_PROTOCOL_Initialize
  8468  0D11  0828               	movf	??_PROTOCOL_Initialize,w
  8469  0D12  0021               	movlb	1	; select bank1
  8470  0D13  00CC               	movwf	(_readbuf^(0+128)+3)
  8471                           
  8472                           ;protocol.c: 72: PROTOCOL_Inv_Handler = inv_handler;
  8473  0D14  0020               	movlb	0	; select bank0
  8474  0D15  0826               	movf	PROTOCOL_Initialize@inv_handler,w
  8475  0D16  00A8               	movwf	??_PROTOCOL_Initialize
  8476  0D17  3000               	movlw	0
  8477  0D18  00A9               	movwf	??_PROTOCOL_Initialize+1
  8478  0D19  0828               	movf	??_PROTOCOL_Initialize,w
  8479  0D1A  0021               	movlb	1	; select bank1
  8480  0D1B  00B2               	movwf	_PROTOCOL_Inv_Handler^(0+128)
  8481  0D1C  0020               	movlb	0	; select bank0
  8482  0D1D  0829               	movf	??_PROTOCOL_Initialize+1,w
  8483  0D1E  0021               	movlb	1	; select bank1
  8484  0D1F  00B3               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+128)
  8485                           
  8486                           ;protocol.c: 73: tmr_scaler = scaler;
  8487  0D20  0020               	movlb	0	; select bank0
  8488  0D21  0827               	movf	PROTOCOL_Initialize@scaler,w
  8489  0D22  00A8               	movwf	??_PROTOCOL_Initialize
  8490  0D23  0828               	movf	??_PROTOCOL_Initialize,w
  8491  0D24  00ED               	movwf	_tmr_scaler
  8492  0D25  0008               	return
  8493  0D26                     __end_of_PROTOCOL_Initialize:	
  8494                           
  8495                           	psect	text39
  8496  17C7                     __ptext39:	
  8497 ;; *************** function _DATAEE_ReadByte *****************
  8498 ;; Defined at:
  8499 ;;		line 204 in file "mcc_generated_files/memory.c"
  8500 ;; Parameters:    Size  Location     Type
  8501 ;;  bAdd            1    wreg     unsigned char 
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;  bAdd            1    0[BANK0 ] unsigned char 
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  1    wreg      unsigned char 
  8506 ;; Registers used:
  8507 ;;		wreg
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8514 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8516 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8517 ;;Total ram usage:        1 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:    6
  8520 ;; This function calls:
  8521 ;;		Nothing
  8522 ;; This function is called by:
  8523 ;;		_PROTOCOL_Initialize
  8524 ;; This function uses a non-reentrant model
  8525 ;;
  8526                           
  8527                           
  8528                           ;psect for function _DATAEE_ReadByte
  8529  17C7                     _DATAEE_ReadByte:	
  8530                           
  8531                           ;incstack = 0
  8532                           ; Regs used in _DATAEE_ReadByte: [wreg]
  8533                           ;DATAEE_ReadByte@bAdd stored from wreg
  8534  17C7  0020               	movlb	0	; select bank0
  8535  17C8  00A0               	movwf	DATAEE_ReadByte@bAdd
  8536                           
  8537                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  8538  17C9  0820               	movf	DATAEE_ReadByte@bAdd,w
  8539  17CA  0023               	movlb	3	; select bank3
  8540  17CB  0091               	movwf	17	;volatile
  8541                           
  8542                           ;memory.c: 207: EECON1bits.CFGS = 0;
  8543  17CC  1315               	bcf	21,6	;volsfr
  8544                           
  8545                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  8546  17CD  1395               	bcf	21,7	;volsfr
  8547                           
  8548                           ;memory.c: 209: EECON1bits.RD = 1;
  8549  17CE  1415               	bsf	21,0	;volsfr
  8550                           
  8551                           ;memory.c: 210: __nop();
  8552  17CF  0000               	nop
  8553                           
  8554                           ;memory.c: 211: __nop();
  8555  17D0  0000               	nop
  8556                           
  8557                           ;memory.c: 213: return (EEDATL);
  8558  17D1  0023               	movlb	3	; select bank3
  8559  17D2  0813               	movf	19,w	;volatile
  8560  17D3  0008               	return
  8561  17D4                     __end_of_DATAEE_ReadByte:	
  8562                           
  8563                           	psect	text40
  8564  096D                     __ptext40:	
  8565 ;; *************** function _PIN_MANAGER_Initialize *****************
  8566 ;; Defined at:
  8567 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  8568 ;; Parameters:    Size  Location     Type
  8569 ;;		None
  8570 ;; Auto vars:     Size  Location     Type
  8571 ;;		None
  8572 ;; Return value:  Size  Location     Type
  8573 ;;                  1    wreg      void 
  8574 ;; Registers used:
  8575 ;;		wreg, status,2
  8576 ;; Tracked objects:
  8577 ;;		On entry : 0/0
  8578 ;;		On exit  : 0/0
  8579 ;;		Unchanged: 0/0
  8580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8585 ;;Total ram usage:        0 bytes
  8586 ;; Hardware stack levels used:    1
  8587 ;; Hardware stack levels required when called:    6
  8588 ;; This function calls:
  8589 ;;		Nothing
  8590 ;; This function is called by:
  8591 ;;		_main
  8592 ;;		_SYSTEM_Initialize
  8593 ;; This function uses a non-reentrant model
  8594 ;;
  8595                           
  8596                           
  8597                           ;psect for function _PIN_MANAGER_Initialize
  8598  096D                     _PIN_MANAGER_Initialize:	
  8599                           
  8600                           ;pin_manager.c: 56: LATA = 0x00;
  8601                           
  8602                           ;incstack = 0
  8603                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8604  096D  0022               	movlb	2	; select bank2
  8605  096E  018C               	clrf	12	;volatile
  8606                           
  8607                           ;pin_manager.c: 57: LATB = 0x00;
  8608  096F  018D               	clrf	13	;volatile
  8609                           
  8610                           ;pin_manager.c: 58: LATC = 0x00;
  8611  0970  018E               	clrf	14	;volatile
  8612                           
  8613                           ;pin_manager.c: 63: TRISA = 0x3F;
  8614  0971  303F               	movlw	63
  8615  0972  0021               	movlb	1	; select bank1
  8616  0973  008C               	movwf	12	;volatile
  8617                           
  8618                           ;pin_manager.c: 64: TRISB = 0xF0;
  8619  0974  30F0               	movlw	240
  8620  0975  008D               	movwf	13	;volatile
  8621                           
  8622                           ;pin_manager.c: 65: TRISC = 0x7F;
  8623  0976  307F               	movlw	127
  8624  0977  008E               	movwf	14	;volatile
  8625                           
  8626                           ;pin_manager.c: 70: ANSELC = 0x4F;
  8627  0978  304F               	movlw	79
  8628  0979  0023               	movlb	3	; select bank3
  8629  097A  008E               	movwf	14	;volatile
  8630                           
  8631                           ;pin_manager.c: 71: ANSELB = 0x00;
  8632  097B  018D               	clrf	13	;volatile
  8633                           
  8634                           ;pin_manager.c: 72: ANSELA = 0x17;
  8635  097C  3017               	movlw	23
  8636  097D  008C               	movwf	12	;volatile
  8637                           
  8638                           ;pin_manager.c: 77: WPUB = 0x00;
  8639  097E  0024               	movlb	4	; select bank4
  8640  097F  018D               	clrf	13	;volatile
  8641                           
  8642                           ;pin_manager.c: 78: WPUA = 0x3F;
  8643  0980  303F               	movlw	63
  8644  0981  008C               	movwf	12	;volatile
  8645                           
  8646                           ;pin_manager.c: 79: WPUC = 0x3F;
  8647  0982  303F               	movlw	63
  8648  0983  008E               	movwf	14	;volatile
  8649                           
  8650                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  8651  0984  0021               	movlb	1	; select bank1
  8652  0985  1395               	bcf	21,7	;volatile
  8653                           
  8654                           ;pin_manager.c: 86: APFCON1 = 0x00;
  8655  0986  0022               	movlb	2	; select bank2
  8656  0987  019E               	clrf	30	;volatile
  8657                           
  8658                           ;pin_manager.c: 87: APFCON0 = 0x84;
  8659  0988  3084               	movlw	132
  8660  0989  009D               	movwf	29	;volatile
  8661  098A  0008               	return
  8662  098B                     __end_of_PIN_MANAGER_Initialize:	
  8663                           
  8664                           	psect	text41
  8665  176F                     __ptext41:	
  8666 ;; *************** function _OSCILLATOR_Initialize *****************
  8667 ;; Defined at:
  8668 ;;		line 81 in file "mcc_generated_files/mcc.c"
  8669 ;; Parameters:    Size  Location     Type
  8670 ;;		None
  8671 ;; Auto vars:     Size  Location     Type
  8672 ;;		None
  8673 ;; Return value:  Size  Location     Type
  8674 ;;                  1    wreg      void 
  8675 ;; Registers used:
  8676 ;;		wreg, status,2
  8677 ;; Tracked objects:
  8678 ;;		On entry : 0/0
  8679 ;;		On exit  : 0/0
  8680 ;;		Unchanged: 0/0
  8681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8686 ;;Total ram usage:        0 bytes
  8687 ;; Hardware stack levels used:    1
  8688 ;; Hardware stack levels required when called:    6
  8689 ;; This function calls:
  8690 ;;		Nothing
  8691 ;; This function is called by:
  8692 ;;		_main
  8693 ;;		_SYSTEM_Initialize
  8694 ;; This function uses a non-reentrant model
  8695 ;;
  8696                           
  8697                           
  8698                           ;psect for function _OSCILLATOR_Initialize
  8699  176F                     _OSCILLATOR_Initialize:	
  8700                           
  8701                           ;mcc.c: 84: OSCCON = 0x68;
  8702                           
  8703                           ;incstack = 0
  8704                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8705  176F  3068               	movlw	104
  8706  1770  0021               	movlb	1	; select bank1
  8707  1771  0099               	movwf	25	;volatile
  8708                           
  8709                           ;mcc.c: 86: OSCTUNE = 0x00;
  8710  1772  0198               	clrf	24	;volatile
  8711  1773  0008               	return
  8712  1774                     __end_of_OSCILLATOR_Initialize:	
  8713                           
  8714                           	psect	text42
  8715  08CA                     __ptext42:	
  8716 ;; *************** function _I2C2_Initialize *****************
  8717 ;; Defined at:
  8718 ;;		line 198 in file "mcc_generated_files/i2c2.c"
  8719 ;; Parameters:    Size  Location     Type
  8720 ;;		None
  8721 ;; Auto vars:     Size  Location     Type
  8722 ;;		None
  8723 ;; Return value:  Size  Location     Type
  8724 ;;                  1    wreg      void 
  8725 ;; Registers used:
  8726 ;;		wreg, status,2
  8727 ;; Tracked objects:
  8728 ;;		On entry : 0/0
  8729 ;;		On exit  : 0/0
  8730 ;;		Unchanged: 0/0
  8731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8735 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8736 ;;Total ram usage:        1 bytes
  8737 ;; Hardware stack levels used:    1
  8738 ;; Hardware stack levels required when called:    6
  8739 ;; This function calls:
  8740 ;;		Nothing
  8741 ;; This function is called by:
  8742 ;;		_main
  8743 ;;		_SYSTEM_Initialize
  8744 ;; This function uses a non-reentrant model
  8745 ;;
  8746                           
  8747                           
  8748                           ;psect for function _I2C2_Initialize
  8749  08CA                     _I2C2_Initialize:	
  8750                           
  8751                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
  8752                           
  8753                           ;incstack = 0
  8754                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
  8755  08CA  30D9               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  8756  08CB  0020               	movlb	0	; select bank0
  8757  08CC  00A0               	movwf	??_I2C2_Initialize
  8758  08CD  0820               	movf	??_I2C2_Initialize,w
  8759  08CE  00C8               	movwf	low ((_i2c2_object| 0+1))
  8760                           
  8761                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
  8762  08CF  30D9               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  8763  08D0  00A0               	movwf	??_I2C2_Initialize
  8764  08D1  0820               	movf	??_I2C2_Initialize,w
  8765  08D2  00C7               	movwf	_i2c2_object
  8766                           
  8767                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
  8768  08D3  14C9               	bsf	_i2c2_object+2,1
  8769                           
  8770                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
  8771  08D4  1049               	bcf	_i2c2_object+2,0
  8772                           
  8773                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
  8774  08D5  01CB               	clrf	_i2c2_object+4
  8775                           
  8776                           ;i2c2.c: 208: SSP2STAT = 0x00;
  8777  08D6  0024               	movlb	4	; select bank4
  8778  08D7  019C               	clrf	28	;volatile
  8779                           
  8780                           ;i2c2.c: 210: SSP2CON1 = 0x28;
  8781  08D8  3028               	movlw	40
  8782  08D9  009D               	movwf	29	;volatile
  8783                           
  8784                           ;i2c2.c: 212: SSP2CON3 = 0x00;
  8785  08DA  019F               	clrf	31	;volatile
  8786                           
  8787                           ;i2c2.c: 214: SSP2ADD = 0x09;
  8788  08DB  3009               	movlw	9
  8789  08DC  009A               	movwf	26	;volatile
  8790                           
  8791                           ;i2c2.c: 218: PIR4bits.SSP2IF = 0;
  8792  08DD  0020               	movlb	0	; select bank0
  8793  08DE  1014               	bcf	20,0	;volatile
  8794                           
  8795                           ;i2c2.c: 220: PIE4bits.SSP2IE = 1;
  8796  08DF  0021               	movlb	1	; select bank1
  8797  08E0  1414               	bsf	20,0	;volatile
  8798  08E1  0008               	return
  8799  08E2                     __end_of_I2C2_Initialize:	
  8800                           
  8801                           	psect	text43
  8802  09CA                     __ptext43:	
  8803 ;; *************** function _I2C1_Initialize *****************
  8804 ;; Defined at:
  8805 ;;		line 30 in file "mcc_generated_files/i2c1.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;		None
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;		None
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  1    wreg      void 
  8812 ;; Registers used:
  8813 ;;		wreg, status,2, status,0, pclath, cstack
  8814 ;; Tracked objects:
  8815 ;;		On entry : 0/0
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;Total ram usage:        2 bytes
  8824 ;; Hardware stack levels used:    1
  8825 ;; Hardware stack levels required when called:    7
  8826 ;; This function calls:
  8827 ;;		_PROTOCOL_Read_Device_Address
  8828 ;; This function is called by:
  8829 ;;		_main
  8830 ;;		_SYSTEM_Initialize
  8831 ;; This function uses a non-reentrant model
  8832 ;;
  8833                           
  8834                           
  8835                           ;psect for function _I2C1_Initialize
  8836  09CA                     _I2C1_Initialize:	
  8837                           
  8838                           ;i2c1.c: 34: _delay((unsigned long)((2000)*(4000000/4000.0)));
  8839                           
  8840                           ;incstack = 0
  8841                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8842  09CA  300B               	movlw	11
  8843  09CB  0020               	movlb	0	; select bank0
  8844  09CC  00A1               	movwf	??_I2C1_Initialize+1
  8845  09CD  3026               	movlw	38
  8846  09CE  00A0               	movwf	??_I2C1_Initialize
  8847  09CF  305D               	movlw	93
  8848  09D0                     u5437:	
  8849  09D0  0B89               	decfsz	9,f
  8850  09D1  29D0               	goto	u5437
  8851  09D2  0BA0               	decfsz	??_I2C1_Initialize,f
  8852  09D3  29D0               	goto	u5437
  8853  09D4  0BA1               	decfsz	??_I2C1_Initialize+1,f
  8854  09D5  29D0               	goto	u5437
  8855  09D6  3200               	nop2
  8856                           
  8857                           ;i2c1.c: 38: SSP1STAT = 0x80;
  8858  09D7  3080               	movlw	128
  8859  09D8  0024               	movlb	4	; select bank4
  8860  09D9  0094               	movwf	20	;volatile
  8861                           
  8862                           ;i2c1.c: 40: SSP1CON1 = 0x26;
  8863  09DA  3026               	movlw	38
  8864  09DB  0095               	movwf	21	;volatile
  8865                           
  8866                           ;i2c1.c: 42: SSP1CON2 = 0x81;
  8867  09DC  3081               	movlw	129
  8868  09DD  0096               	movwf	22	;volatile
  8869                           
  8870                           ;i2c1.c: 44: SSP1CON3 = 0x00;
  8871  09DE  0197               	clrf	23	;volatile
  8872                           
  8873                           ;i2c1.c: 46: SSP1MSK = (0x7F << 1);
  8874  09DF  30FE               	movlw	254
  8875  09E0  0093               	movwf	19	;volatile
  8876                           
  8877                           ;i2c1.c: 48: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  8878  09E1  3197  274B         	fcall	_PROTOCOL_Read_Device_Address
  8879  09E3  0709               	addwf	9,w
  8880  09E4  0024               	movlb	4	; select bank4
  8881  09E5  0092               	movwf	18	;volatile
  8882                           
  8883                           ;i2c1.c: 51: PIR1bits.SSP1IF = 0;
  8884  09E6  0020               	movlb	0	; select bank0
  8885  09E7  1191               	bcf	17,3	;volatile
  8886                           
  8887                           ;i2c1.c: 53: PIE1bits.SSP1IE = 1;
  8888  09E8  0021               	movlb	1	; select bank1
  8889  09E9  1591               	bsf	17,3	;volatile
  8890  09EA  0008               	return
  8891  09EB                     __end_of_I2C1_Initialize:	
  8892                           
  8893                           	psect	text44
  8894  174B                     __ptext44:	
  8895 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  8896 ;; Defined at:
  8897 ;;		line 89 in file "protocol.c"
  8898 ;; Parameters:    Size  Location     Type
  8899 ;;		None
  8900 ;; Auto vars:     Size  Location     Type
  8901 ;;		None
  8902 ;; Return value:  Size  Location     Type
  8903 ;;                  1    wreg      unsigned char 
  8904 ;; Registers used:
  8905 ;;		wreg
  8906 ;; Tracked objects:
  8907 ;;		On entry : 0/0
  8908 ;;		On exit  : 0/0
  8909 ;;		Unchanged: 0/0
  8910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;Total ram usage:        0 bytes
  8916 ;; Hardware stack levels used:    1
  8917 ;; Hardware stack levels required when called:    6
  8918 ;; This function calls:
  8919 ;;		Nothing
  8920 ;; This function is called by:
  8921 ;;		_I2C1_Initialize
  8922 ;;		_PROTOCOL_Loop
  8923 ;; This function uses a non-reentrant model
  8924 ;;
  8925                           
  8926                           
  8927                           ;psect for function _PROTOCOL_Read_Device_Address
  8928  174B                     _PROTOCOL_Read_Device_Address:	
  8929                           
  8930                           ;protocol.c: 90: return slave_address;
  8931                           
  8932                           ;incstack = 0
  8933                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  8934  174B  0020               	movlb	0	; select bank0
  8935  174C  0858               	movf	_slave_address,w
  8936  174D  0008               	return
  8937  174E                     __end_of_PROTOCOL_Read_Device_Address:	
  8938                           
  8939                           	psect	text45
  8940  08E2                     __ptext45:	
  8941 ;; *************** function _EUSART_Initialize *****************
  8942 ;; Defined at:
  8943 ;;		line 75 in file "mcc_generated_files/eusart.c"
  8944 ;; Parameters:    Size  Location     Type
  8945 ;;		None
  8946 ;; Auto vars:     Size  Location     Type
  8947 ;;		None
  8948 ;; Return value:  Size  Location     Type
  8949 ;;                  1    wreg      void 
  8950 ;; Registers used:
  8951 ;;		wreg, status,2
  8952 ;; Tracked objects:
  8953 ;;		On entry : 0/0
  8954 ;;		On exit  : 0/0
  8955 ;;		Unchanged: 0/0
  8956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8959 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8960 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8961 ;;Total ram usage:        1 bytes
  8962 ;; Hardware stack levels used:    1
  8963 ;; Hardware stack levels required when called:    6
  8964 ;; This function calls:
  8965 ;;		Nothing
  8966 ;; This function is called by:
  8967 ;;		_main
  8968 ;;		_SYSTEM_Initialize
  8969 ;; This function uses a non-reentrant model
  8970 ;;
  8971                           
  8972                           
  8973                           ;psect for function _EUSART_Initialize
  8974  08E2                     _EUSART_Initialize:	
  8975                           
  8976                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  8977                           
  8978                           ;incstack = 0
  8979                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8980  08E2  0021               	movlb	1	; select bank1
  8981  08E3  1291               	bcf	17,5	;volatile
  8982                           
  8983                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  8984  08E4  1211               	bcf	17,4	;volatile
  8985                           
  8986                           ;eusart.c: 84: BAUDCON = 0x08;
  8987  08E5  3008               	movlw	8
  8988  08E6  0023               	movlb	3	; select bank3
  8989  08E7  009F               	movwf	31	;volatile
  8990                           
  8991                           ;eusart.c: 87: RCSTA = 0x90;
  8992  08E8  3090               	movlw	144
  8993  08E9  009D               	movwf	29	;volatile
  8994                           
  8995                           ;eusart.c: 90: TXSTA = 0x24;
  8996  08EA  3024               	movlw	36
  8997  08EB  009E               	movwf	30	;volatile
  8998                           
  8999                           ;eusart.c: 93: SPBRGL = 0x67;
  9000  08EC  3067               	movlw	103
  9001  08ED  009B               	movwf	27	;volatile
  9002                           
  9003                           ;eusart.c: 96: SPBRGH = 0x00;
  9004  08EE  019C               	clrf	28	;volatile
  9005                           
  9006                           ;eusart.c: 100: eusartTxHead = 0;
  9007  08EF  01FC               	clrf	_eusartTxHead	;volatile
  9008                           
  9009                           ;eusart.c: 101: eusartTxTail = 0;
  9010  08F0  0020               	movlb	0	; select bank0
  9011  08F1  01DF               	clrf	_eusartTxTail	;volatile
  9012                           
  9013                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  9014  08F2  3008               	movlw	8
  9015  08F3  00A0               	movwf	??_EUSART_Initialize
  9016  08F4  0820               	movf	??_EUSART_Initialize,w
  9017  08F5  00DE               	movwf	_eusartTxBufferRemaining	;volatile
  9018                           
  9019                           ;eusart.c: 104: eusartRxHead = 0;
  9020  08F6  01DD               	clrf	_eusartRxHead	;volatile
  9021                           
  9022                           ;eusart.c: 105: eusartRxTail = 0;
  9023  08F7  01DC               	clrf	_eusartRxTail	;volatile
  9024                           
  9025                           ;eusart.c: 106: eusartRxCount = 0;
  9026  08F8  01DB               	clrf	_eusartRxCount	;volatile
  9027                           
  9028                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  9029  08F9  0021               	movlb	1	; select bank1
  9030  08FA  1691               	bsf	17,5	;volatile
  9031  08FB  0008               	return
  9032  08FC                     __end_of_EUSART_Initialize:	
  9033                           
  9034                           	psect	intentry
  9035  0004                     __pintentry:	
  9036 ;; *************** function _INTERRUPT_InterruptManager *****************
  9037 ;; Defined at:
  9038 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9039 ;; Parameters:    Size  Location     Type
  9040 ;;		None
  9041 ;; Auto vars:     Size  Location     Type
  9042 ;;		None
  9043 ;; Return value:  Size  Location     Type
  9044 ;;                  1    wreg      void 
  9045 ;; Registers used:
  9046 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9047 ;; Tracked objects:
  9048 ;;		On entry : 0/0
  9049 ;;		On exit  : 0/0
  9050 ;;		Unchanged: 0/0
  9051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9054 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;Total ram usage:        1 bytes
  9057 ;; Hardware stack levels used:    1
  9058 ;; Hardware stack levels required when called:    5
  9059 ;; This function calls:
  9060 ;;		_EUSART_Receive_ISR
  9061 ;;		_EUSART_Transmit_ISR
  9062 ;;		_I2C1_ISR
  9063 ;;		_I2C2_BusCollisionISR
  9064 ;;		_I2C2_ISR
  9065 ;; This function is called by:
  9066 ;;		Interrupt level 1
  9067 ;; This function uses a non-reentrant model
  9068 ;;
  9069                           
  9070  0004                     _INTERRUPT_InterruptManager:	
  9071                           
  9072                           ;incstack = 0
  9073  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9074                           
  9075                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9076  0005  3180               	pagesel	$
  9077  0006  0020               	movlb	0	; select bank0
  9078  0007  087F               	movf	127,w
  9079  0008  00FB               	movwf	??_INTERRUPT_InterruptManager
  9080                           
  9081                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  9082  0009  1F0B               	btfss	11,6	;volatile
  9083  000A  2815               	goto	i1l323
  9084  000B  0021               	movlb	1	; select bank1
  9085  000C  1E11               	btfss	17,4	;volatile
  9086  000D  2815               	goto	i1l323
  9087  000E  0020               	movlb	0	; select bank0
  9088  000F  1E11               	btfss	17,4	;volatile
  9089  0010  2815               	goto	i1l323
  9090                           
  9091                           ;interrupt_manager.c: 55: {
  9092                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  9093  0011  3189  2133  3180   	fcall	_EUSART_Transmit_ISR
  9094                           
  9095                           ;interrupt_manager.c: 57: }
  9096  0014  2843               	goto	i1l333
  9097  0015                     i1l323:	
  9098                           
  9099                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  9100  0015  1F0B               	btfss	11,6	;volatile
  9101  0016  2821               	goto	i1l325
  9102  0017  0021               	movlb	1	; select bank1
  9103  0018  1E91               	btfss	17,5	;volatile
  9104  0019  2821               	goto	i1l325
  9105  001A  0020               	movlb	0	; select bank0
  9106  001B  1E91               	btfss	17,5	;volatile
  9107  001C  2821               	goto	i1l325
  9108                           
  9109                           ;interrupt_manager.c: 59: {
  9110                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  9111  001D  3188  20FC  3180   	fcall	_EUSART_Receive_ISR
  9112                           
  9113                           ;interrupt_manager.c: 61: }
  9114  0020  2843               	goto	i1l333
  9115  0021                     i1l325:	
  9116                           
  9117                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  9118  0021  1F0B               	btfss	11,6	;volatile
  9119  0022  282D               	goto	i1l327
  9120  0023  0021               	movlb	1	; select bank1
  9121  0024  1D91               	btfss	17,3	;volatile
  9122  0025  282D               	goto	i1l327
  9123  0026  0020               	movlb	0	; select bank0
  9124  0027  1D91               	btfss	17,3	;volatile
  9125  0028  282D               	goto	i1l327
  9126                           
  9127                           ;interrupt_manager.c: 63: {
  9128                           ;interrupt_manager.c: 64: I2C1_ISR();
  9129  0029  318A  2258  3180   	fcall	_I2C1_ISR
  9130                           
  9131                           ;interrupt_manager.c: 65: }
  9132  002C  2843               	goto	i1l333
  9133  002D                     i1l327:	
  9134                           
  9135                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE4bits.BCL2IE == 1 && PIR4bi
      +                          ts.BCL2IF == 1)
  9136  002D  1F0B               	btfss	11,6	;volatile
  9137  002E  2839               	goto	i1l329
  9138  002F  0021               	movlb	1	; select bank1
  9139  0030  1C94               	btfss	20,1	;volatile
  9140  0031  2839               	goto	i1l329
  9141  0032  0020               	movlb	0	; select bank0
  9142  0033  1C94               	btfss	20,1	;volatile
  9143  0034  2839               	goto	i1l329
  9144                           
  9145                           ;interrupt_manager.c: 67: {
  9146                           ;interrupt_manager.c: 68: I2C2_BusCollisionISR();
  9147  0035  3180  2002  3180   	fcall	_I2C2_BusCollisionISR
  9148                           
  9149                           ;interrupt_manager.c: 69: }
  9150  0038  2843               	goto	i1l333
  9151  0039                     i1l329:	
  9152                           
  9153                           ;interrupt_manager.c: 70: else if(INTCONbits.PEIE == 1 && PIE4bits.SSP2IE == 1 && PIR4bi
      +                          ts.SSP2IF == 1)
  9154  0039  1F0B               	btfss	11,6	;volatile
  9155  003A  2843               	goto	i1l333
  9156  003B  0021               	movlb	1	; select bank1
  9157  003C  1C14               	btfss	20,0	;volatile
  9158  003D  2843               	goto	i1l333
  9159  003E  0020               	movlb	0	; select bank0
  9160  003F  1C14               	btfss	20,0	;volatile
  9161  0040  2843               	goto	i1l333
  9162                           
  9163                           ;interrupt_manager.c: 71: {
  9164                           ;interrupt_manager.c: 72: I2C2_ISR();
  9165  0041  3185  25E8         	fcall	_I2C2_ISR
  9166  0043                     i1l333:	
  9167                           ;interrupt_manager.c: 74: else
  9168                           ;interrupt_manager.c: 75: {
  9169                           
  9170                           ;interrupt_manager.c: 73: }
  9171                           
  9172  0043  087B               	movf	??_INTERRUPT_InterruptManager,w
  9173  0044  0020               	movlb	0	; select bank0
  9174  0045  00FF               	movwf	127
  9175  0046  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9176  0047  0009               	retfie
  9177  0048                     __end_of_INTERRUPT_InterruptManager:	
  9178                           
  9179                           	psect	text47
  9180  05E8                     __ptext47:	
  9181 ;; *************** function _I2C2_ISR *****************
  9182 ;; Defined at:
  9183 ;;		line 233 in file "mcc_generated_files/i2c2.c"
  9184 ;; Parameters:    Size  Location     Type
  9185 ;;		None
  9186 ;; Auto vars:     Size  Location     Type
  9187 ;;		None
  9188 ;; Return value:  Size  Location     Type
  9189 ;;                  1    wreg      void 
  9190 ;; Registers used:
  9191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9192 ;; Tracked objects:
  9193 ;;		On entry : 0/0
  9194 ;;		On exit  : 0/0
  9195 ;;		Unchanged: 0/0
  9196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9199 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;Total ram usage:        4 bytes
  9202 ;; Hardware stack levels used:    1
  9203 ;; Hardware stack levels required when called:    1
  9204 ;; This function calls:
  9205 ;;		_I2C2_FunctionComplete
  9206 ;;		_I2C2_Stop
  9207 ;; This function is called by:
  9208 ;;		_INTERRUPT_InterruptManager
  9209 ;; This function uses a non-reentrant model
  9210 ;;
  9211                           
  9212                           
  9213                           ;psect for function _I2C2_ISR
  9214  05E8                     _I2C2_ISR:	
  9215                           
  9216                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
  9217                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
  9218                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
  9219                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
  9220                           ;i2c2.c: 241: PIR4bits.SSP2IF = 0;
  9221                           
  9222                           ;incstack = 0
  9223                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9224  05E8  0020               	movlb	0	; select bank0
  9225  05E9  1014               	bcf	20,0	;volatile
  9226                           
  9227                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
  9228  05EA  0024               	movlb	4	; select bank4
  9229  05EB  1F9D               	btfss	29,7	;volatile
  9230  05EC  2F1B               	goto	i1l3922
  9231                           
  9232                           ;i2c2.c: 246: {
  9233                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
  9234  05ED  139D               	bcf	29,7	;volatile
  9235                           
  9236                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
  9237  05EE  0020               	movlb	0	; select bank0
  9238  05EF  01E6               	clrf	_i2c2_state
  9239                           
  9240                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
  9241  05F0  0863               	movf	_p_i2c2_current,w
  9242  05F1  3E02               	addlw	2
  9243  05F2  0086               	movwf	6
  9244  05F3  0187               	clrf	7
  9245  05F4  0801               	movf	1,w
  9246  05F5  0086               	movwf	6
  9247  05F6  0187               	clrf	7
  9248  05F7  0181               	clrf	1
  9249  05F8  0A81               	incf	1,f
  9250                           
  9251                           ;i2c2.c: 253: p_i2c2_current = (0);
  9252  05F9  01E3               	clrf	_p_i2c2_current
  9253                           
  9254                           ;i2c2.c: 255: return;
  9255  05FA  0008               	return
  9256  05FB                     i1l184:	
  9257                           ;i2c2.c: 260: {
  9258                           ;i2c2.c: 261: case S_MASTER_IDLE:
  9259                           
  9260                           ;i2c2.c: 256: }
  9261                           ;i2c2.c: 259: switch(i2c2_state)
  9262                           
  9263                           
  9264                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
  9265  05FB  18C9               	btfsc	_i2c2_object+2,1
  9266  05FC  0008               	return
  9267                           
  9268                           ;i2c2.c: 264: {
  9269                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
  9270  05FD  0848               	movf	low ((_i2c2_object| 0+1)),w
  9271  05FE  00F2               	movwf	??_I2C2_ISR
  9272  05FF  0872               	movf	??_I2C2_ISR,w
  9273  0600  00E3               	movwf	_p_i2c2_current
  9274                           
  9275                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
  9276  0601  0848               	movf	low ((_i2c2_object| 0+1)),w
  9277  0602  0086               	movwf	6
  9278  0603  0187               	clrf	7
  9279  0604  0801               	movf	1,w
  9280  0605  00F2               	movwf	??_I2C2_ISR
  9281  0606  0872               	movf	??_I2C2_ISR,w
  9282  0607  00E5               	movwf	_i2c2_trb_count
  9283                           
  9284                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
  9285  0608  0848               	movf	low ((_i2c2_object| 0+1)),w
  9286  0609  0086               	movwf	6
  9287  060A  0187               	clrf	7
  9288  060B  3F41               	moviw [1]fsr1
  9289  060C  00E4               	movwf	_p_i2c2_trb_current
  9290                           
  9291                           ;i2c2.c: 270: i2c2_object.pTrHead++;
  9292  060D  3003               	movlw	3
  9293  060E  00F2               	movwf	??_I2C2_ISR
  9294  060F  0872               	movf	??_I2C2_ISR,w
  9295  0610  07C8               	addwf	low ((_i2c2_object| 0+1)),f
  9296                           
  9297                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
  9298  0611  0848               	movf	low ((_i2c2_object| 0+1)),w
  9299  0612  3ADC               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
  9300  0613  1D03               	skipz
  9301  0614  2E19               	goto	i1l3810
  9302                           
  9303                           ;i2c2.c: 274: {
  9304                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
  9305  0615  30D9               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  9306  0616  00F2               	movwf	??_I2C2_ISR
  9307  0617  0872               	movf	??_I2C2_ISR,w
  9308  0618  00C8               	movwf	low ((_i2c2_object| 0+1))
  9309  0619                     i1l3810:	
  9310                           
  9311                           ;i2c2.c: 277: }
  9312                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
  9313  0619  1049               	bcf	_i2c2_object+2,0
  9314                           
  9315                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
  9316  061A  0848               	movf	low ((_i2c2_object| 0+1)),w
  9317  061B  0647               	xorwf	_i2c2_object,w
  9318  061C  1903               	btfsc	3,2
  9319                           
  9320                           ;i2c2.c: 285: {
  9321                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
  9322  061D  14C9               	bsf	_i2c2_object+2,1
  9323                           
  9324                           ;i2c2.c: 288: }
  9325                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
  9326  061E  0024               	movlb	4	; select bank4
  9327  061F  141E               	bsf	30,0	;volatile
  9328                           
  9329                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
  9330  0620  3002               	movlw	2
  9331  0621  00F2               	movwf	??_I2C2_ISR
  9332  0622  0872               	movf	??_I2C2_ISR,w
  9333  0623  0020               	movlb	0	; select bank0
  9334  0624  00E6               	movwf	_i2c2_state
  9335                           
  9336                           ;i2c2.c: 295: }
  9337                           ;i2c2.c: 297: break;
  9338  0625  0008               	return
  9339  0626                     i1l189:	
  9340                           ;i2c2.c: 299: case S_MASTER_RESTART:
  9341                           
  9342                           
  9343                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
  9344  0626  0024               	movlb	4	; select bank4
  9345  0627  149E               	bsf	30,1	;volatile
  9346                           
  9347                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
  9348  0628  3002               	movlw	2
  9349  0629  00F2               	movwf	??_I2C2_ISR
  9350  062A  0872               	movf	??_I2C2_ISR,w
  9351  062B  0020               	movlb	0	; select bank0
  9352  062C  00E6               	movwf	_i2c2_state
  9353                           
  9354                           ;i2c2.c: 309: break;
  9355  062D  0008               	return
  9356  062E                     i1l190:	
  9357                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
  9358                           
  9359                           
  9360                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
  9361  062E  0024               	movlb	4	; select bank4
  9362  062F  1F1E               	btfss	30,6	;volatile
  9363  0630  2E3A               	goto	i1l3822
  9364                           
  9365                           ;i2c2.c: 314: {
  9366                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
  9367  0631  3001               	movlw	1
  9368  0632  00F2               	movwf	??_I2C2_ISR
  9369  0633  0872               	movf	??_I2C2_ISR,w
  9370  0634  0020               	movlb	0	; select bank0
  9371  0635  07CB               	addwf	_i2c2_object+4,f
  9372                           
  9373                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  9374  0636  3004               	movlw	4
  9375  0637  3188  20B2         	fcall	_I2C2_Stop
  9376                           
  9377                           ;i2c2.c: 317: }
  9378  0639  0008               	return
  9379  063A                     i1l3822:	
  9380                           
  9381                           ;i2c2.c: 318: else
  9382                           ;i2c2.c: 319: {
  9383                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
  9384  063A  0020               	movlb	0	; select bank0
  9385  063B  086C               	movf	I2C2_ISR@i2c_address+1,w
  9386  063C  00F3               	movwf	??_I2C2_ISR+1
  9387  063D  086B               	movf	I2C2_ISR@i2c_address,w
  9388  063E  00F2               	movwf	??_I2C2_ISR
  9389  063F  36F3               	lsrf	??_I2C2_ISR+1,f
  9390  0640  0CF2               	rrf	??_I2C2_ISR,f
  9391  0641  0872               	movf	??_I2C2_ISR,w
  9392  0642  0024               	movlb	4	; select bank4
  9393  0643  0099               	movwf	25	;volatile
  9394                           
  9395                           ;i2c2.c: 324: if(i2c_address & 0x01)
  9396  0644  0020               	movlb	0	; select bank0
  9397  0645  1C6B               	btfss	I2C2_ISR@i2c_address,0
  9398  0646  2E4C               	goto	i1l3828
  9399                           
  9400                           ;i2c2.c: 325: {
  9401                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
  9402  0647  300B               	movlw	11
  9403  0648  00F2               	movwf	??_I2C2_ISR
  9404  0649  0872               	movf	??_I2C2_ISR,w
  9405  064A  00E6               	movwf	_i2c2_state
  9406                           
  9407                           ;i2c2.c: 329: }
  9408  064B  0008               	return
  9409  064C                     i1l3828:	
  9410                           
  9411                           ;i2c2.c: 330: else
  9412                           ;i2c2.c: 331: {
  9413                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
  9414  064C  3003               	movlw	3
  9415  064D  00F2               	movwf	??_I2C2_ISR
  9416  064E  0872               	movf	??_I2C2_ISR,w
  9417  064F  00E6               	movwf	_i2c2_state
  9418                           
  9419                           ;i2c2.c: 334: }
  9420                           ;i2c2.c: 335: }
  9421                           ;i2c2.c: 337: break;
  9422  0650  0008               	return
  9423  0651                     i1l195:	
  9424                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
  9425                           
  9426                           
  9427                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
  9428  0651  0024               	movlb	4	; select bank4
  9429  0652  1F1E               	btfss	30,6	;volatile
  9430  0653  2E5D               	goto	i1l196
  9431                           
  9432                           ;i2c2.c: 342: {
  9433                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
  9434  0654  3001               	movlw	1
  9435  0655  00F2               	movwf	??_I2C2_ISR
  9436  0656  0872               	movf	??_I2C2_ISR,w
  9437  0657  0020               	movlb	0	; select bank0
  9438  0658  07CB               	addwf	_i2c2_object+4,f
  9439                           
  9440                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  9441  0659  3004               	movlw	4
  9442  065A  3188  20B2         	fcall	_I2C2_Stop
  9443                           
  9444                           ;i2c2.c: 345: }
  9445  065C  0008               	return
  9446  065D                     i1l196:	
  9447                           
  9448                           ;i2c2.c: 346: else
  9449                           ;i2c2.c: 347: {
  9450                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
  9451  065D  149E               	bsf	30,1	;volatile
  9452                           
  9453                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
  9454  065E  0020               	movlb	0	; select bank0
  9455  065F  086C               	movf	I2C2_ISR@i2c_address+1,w
  9456  0660  00F3               	movwf	??_I2C2_ISR+1
  9457  0661  086B               	movf	I2C2_ISR@i2c_address,w
  9458  0662  00F2               	movwf	??_I2C2_ISR
  9459  0663  0873               	movf	??_I2C2_ISR+1,w
  9460  0664  00F2               	movwf	??_I2C2_ISR
  9461  0665  01F3               	clrf	??_I2C2_ISR+1
  9462  0666  3006               	movlw	6
  9463  0667  0572               	andwf	??_I2C2_ISR,w
  9464  0668  00F4               	movwf	??_I2C2_ISR+2
  9465  0669  3000               	movlw	0
  9466  066A  0573               	andwf	??_I2C2_ISR+1,w
  9467  066B  00F5               	movwf	??_I2C2_ISR+3
  9468  066C  30F0               	movlw	240
  9469  066D  0474               	iorwf	??_I2C2_ISR+2,w
  9470  066E  00EB               	movwf	I2C2_ISR@i2c_address
  9471  066F  3000               	movlw	0
  9472  0670  0475               	iorwf	??_I2C2_ISR+3,w
  9473  0671  00EC               	movwf	I2C2_ISR@i2c_address+1
  9474                           
  9475                           ;i2c2.c: 357: i2c_address |= 0x0001;
  9476  0672  146B               	bsf	I2C2_ISR@i2c_address,0
  9477                           
  9478                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
  9479  0673  01E0               	clrf	I2C2_ISR@i2c_10bit_address_restart
  9480  0674  0AE0               	incf	I2C2_ISR@i2c_10bit_address_restart,f
  9481                           
  9482                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
  9483  0675  3002               	movlw	2
  9484  0676  00F2               	movwf	??_I2C2_ISR
  9485  0677  0872               	movf	??_I2C2_ISR,w
  9486  0678  00E6               	movwf	_i2c2_state
  9487                           
  9488                           ;i2c2.c: 364: }
  9489                           ;i2c2.c: 366: break;
  9490  0679  0008               	return
  9491  067A                     i1l3842:	
  9492                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
  9493                           
  9494                           
  9495                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
  9496  067A  0360               	decf	I2C2_ISR@i2c_10bit_address_restart,w
  9497  067B  1903               	btfsc	3,2
  9498  067C  2E8E               	goto	i1l3862
  9499                           
  9500                           ;i2c2.c: 382: {
  9501                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
  9502  067D  0864               	movf	_p_i2c2_trb_current,w
  9503  067E  0086               	movwf	6
  9504  067F  0187               	clrf	7
  9505  0680  3F40               	moviw [0]fsr1
  9506  0681  00EB               	movwf	I2C2_ISR@i2c_address
  9507  0682  3F41               	moviw [1]fsr1
  9508  0683  00EC               	movwf	I2C2_ISR@i2c_address+1
  9509                           
  9510                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
  9511  0684  0864               	movf	_p_i2c2_trb_current,w
  9512  0685  0086               	movwf	6
  9513  0686  0187               	clrf	7
  9514  0687  3F43               	moviw [3]fsr1
  9515  0688  00E2               	movwf	I2C2_ISR@pi2c_buf_ptr
  9516                           
  9517                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
  9518  0689  0864               	movf	_p_i2c2_trb_current,w
  9519  068A  0086               	movwf	6
  9520  068B  0187               	clrf	7
  9521  068C  3F42               	moviw [2]fsr1
  9522  068D  00E1               	movwf	I2C2_ISR@i2c_bytes_left
  9523  068E                     i1l3862:	
  9524                           ;i2c2.c: 407: }
  9525                           ;i2c2.c: 408: }
  9526                           
  9527                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
  9528                           
  9529                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
  9530                           
  9531                           ;i2c2.c: 400: else
  9532                           ;i2c2.c: 401: {
  9533                           ;i2c2.c: 403: SSP2BUF = i2c_address;
  9534                           
  9535                           ;i2c2.c: 399: }
  9536                           
  9537                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
  9538                           
  9539                           ;i2c2.c: 393: {
  9540                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
  9541                           
  9542                           ;i2c2.c: 391: {
  9543                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
  9544                           
  9545                           ;i2c2.c: 387: }
  9546                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
  9547                           
  9548                           
  9549                           ;i2c2.c: 409: else
  9550                           ;i2c2.c: 410: {
  9551                           ;i2c2.c: 412: SSP2BUF = i2c_address;
  9552  068E  086B               	movf	I2C2_ISR@i2c_address,w
  9553  068F  0024               	movlb	4	; select bank4
  9554  0690  0099               	movwf	25	;volatile
  9555                           
  9556                           ;i2c2.c: 413: if(i2c_address & 0x01)
  9557  0691  0020               	movlb	0	; select bank0
  9558  0692  1C6B               	btfss	I2C2_ISR@i2c_address,0
  9559  0693  2E99               	goto	i1l3868
  9560                           
  9561                           ;i2c2.c: 414: {
  9562                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
  9563  0694  3005               	movlw	5
  9564  0695  00F2               	movwf	??_I2C2_ISR
  9565  0696  0872               	movf	??_I2C2_ISR,w
  9566  0697  00E6               	movwf	_i2c2_state
  9567                           
  9568                           ;i2c2.c: 417: }
  9569  0698  0008               	return
  9570  0699                     i1l3868:	
  9571                           
  9572                           ;i2c2.c: 418: else
  9573                           ;i2c2.c: 419: {
  9574                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
  9575  0699  3003               	movlw	3
  9576  069A  00F2               	movwf	??_I2C2_ISR
  9577  069B  0872               	movf	??_I2C2_ISR,w
  9578  069C  00E6               	movwf	_i2c2_state
  9579                           
  9580                           ;i2c2.c: 422: }
  9581                           ;i2c2.c: 423: }
  9582                           ;i2c2.c: 424: break;
  9583  069D  0008               	return
  9584  069E                     i1l206:	
  9585                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
  9586                           
  9587                           
  9588                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
  9589  069E  0024               	movlb	4	; select bank4
  9590  069F  1F1E               	btfss	30,6	;volatile
  9591  06A0  2EAC               	goto	i1l3876
  9592                           
  9593                           ;i2c2.c: 430: {
  9594                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
  9595  06A1  3001               	movlw	1
  9596  06A2  00F2               	movwf	??_I2C2_ISR
  9597  06A3  0872               	movf	??_I2C2_ISR,w
  9598  06A4  0020               	movlb	0	; select bank0
  9599  06A5  07CB               	addwf	_i2c2_object+4,f
  9600                           
  9601                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
  9602  06A6  0024               	movlb	4	; select bank4
  9603  06A7  131E               	bcf	30,6	;volatile
  9604                           
  9605                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
  9606  06A8  3005               	movlw	5
  9607  06A9  3188  20B2         	fcall	_I2C2_Stop
  9608                           
  9609                           ;i2c2.c: 440: }
  9610  06AB  0008               	return
  9611  06AC                     i1l3876:	
  9612                           
  9613                           ;i2c2.c: 441: else
  9614                           ;i2c2.c: 442: {
  9615                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
  9616  06AC  3001               	movlw	1
  9617  06AD  0020               	movlb	0	; select bank0
  9618  06AE  02E1               	subwf	I2C2_ISR@i2c_bytes_left,f
  9619  06AF  0A61               	incf	I2C2_ISR@i2c_bytes_left,w
  9620  06B0  1D03               	btfss	3,2
  9621  06B1  2EC6               	goto	i1l3884
  9622                           
  9623                           ;i2c2.c: 445: {
  9624                           ;i2c2.c: 449: p_i2c2_trb_current++;
  9625  06B2  3004               	movlw	4
  9626  06B3  00F2               	movwf	??_I2C2_ISR
  9627  06B4  0872               	movf	??_I2C2_ISR,w
  9628  06B5  07E4               	addwf	_p_i2c2_trb_current,f
  9629                           
  9630                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
  9631  06B6  3001               	movlw	1
  9632  06B7  02E5               	subwf	_i2c2_trb_count,f
  9633  06B8  1D03               	btfss	3,2
  9634  06B9  2EBE               	goto	i1l210
  9635                           
  9636                           ;i2c2.c: 453: {
  9637                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
  9638  06BA  3000               	movlw	0
  9639  06BB  3188  20B2         	fcall	_I2C2_Stop
  9640                           
  9641                           ;i2c2.c: 455: }
  9642  06BD  0008               	return
  9643  06BE                     i1l210:	
  9644                           
  9645                           ;i2c2.c: 456: else
  9646                           ;i2c2.c: 457: {
  9647                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
  9648  06BE  0024               	movlb	4	; select bank4
  9649  06BF  149E               	bsf	30,1	;volatile
  9650                           
  9651                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
  9652  06C0  3002               	movlw	2
  9653  06C1  00F2               	movwf	??_I2C2_ISR
  9654  06C2  0872               	movf	??_I2C2_ISR,w
  9655  06C3  0020               	movlb	0	; select bank0
  9656  06C4  00E6               	movwf	_i2c2_state
  9657                           
  9658                           ;i2c2.c: 469: }
  9659                           ;i2c2.c: 470: }
  9660  06C5  0008               	return
  9661  06C6                     i1l3884:	
  9662                           
  9663                           ;i2c2.c: 471: else
  9664                           ;i2c2.c: 472: {
  9665                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
  9666  06C6  0862               	movf	I2C2_ISR@pi2c_buf_ptr,w
  9667  06C7  0086               	movwf	6
  9668  06C8  0187               	clrf	7
  9669  06C9  0801               	movf	1,w
  9670  06CA  0024               	movlb	4	; select bank4
  9671  06CB  0099               	movwf	25	;volatile
  9672  06CC  3001               	movlw	1
  9673  06CD  00F2               	movwf	??_I2C2_ISR
  9674  06CE  0872               	movf	??_I2C2_ISR,w
  9675  06CF  0020               	movlb	0	; select bank0
  9676  06D0  07E2               	addwf	I2C2_ISR@pi2c_buf_ptr,f
  9677                           
  9678                           ;i2c2.c: 475: }
  9679                           ;i2c2.c: 476: }
  9680                           ;i2c2.c: 477: break;
  9681  06D1  0008               	return
  9682  06D2                     i1l213:	
  9683                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
  9684                           
  9685                           
  9686                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
  9687  06D2  0024               	movlb	4	; select bank4
  9688  06D3  1F1E               	btfss	30,6	;volatile
  9689  06D4  2EE0               	goto	i1l214
  9690                           
  9691                           ;i2c2.c: 483: {
  9692                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
  9693  06D5  3001               	movlw	1
  9694  06D6  00F2               	movwf	??_I2C2_ISR
  9695  06D7  0872               	movf	??_I2C2_ISR,w
  9696  06D8  0020               	movlb	0	; select bank0
  9697  06D9  07CB               	addwf	_i2c2_object+4,f
  9698                           
  9699                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  9700  06DA  3004               	movlw	4
  9701  06DB  3188  20B2         	fcall	_I2C2_Stop
  9702                           
  9703                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
  9704  06DD  0024               	movlb	4	; select bank4
  9705  06DE  131E               	bcf	30,6	;volatile
  9706                           
  9707                           ;i2c2.c: 493: }
  9708  06DF  0008               	return
  9709  06E0                     i1l214:	
  9710                           
  9711                           ;i2c2.c: 494: else
  9712                           ;i2c2.c: 495: {
  9713                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
  9714  06E0  159E               	bsf	30,3	;volatile
  9715                           
  9716                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
  9717  06E1  3008               	movlw	8
  9718  06E2  00F2               	movwf	??_I2C2_ISR
  9719  06E3  0872               	movf	??_I2C2_ISR,w
  9720  06E4  0020               	movlb	0	; select bank0
  9721  06E5  00E6               	movwf	_i2c2_state
  9722                           
  9723                           ;i2c2.c: 498: }
  9724                           ;i2c2.c: 499: break;
  9725  06E6  0008               	return
  9726  06E7                     i1l3896:	
  9727                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
  9728                           
  9729                           
  9730                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
  9731  06E7  3008               	movlw	8
  9732  06E8  00F2               	movwf	??_I2C2_ISR
  9733  06E9  0872               	movf	??_I2C2_ISR,w
  9734  06EA  00E6               	movwf	_i2c2_state
  9735                           
  9736                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
  9737  06EB  0024               	movlb	4	; select bank4
  9738  06EC  159E               	bsf	30,3	;volatile
  9739                           
  9740                           ;i2c2.c: 511: break;
  9741  06ED  0008               	return
  9742  06EE                     i1l3900:	
  9743                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
  9744                           
  9745                           
  9746                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
  9747  06EE  0024               	movlb	4	; select bank4
  9748  06EF  0819               	movf	25,w	;volatile
  9749  06F0  00F2               	movwf	??_I2C2_ISR
  9750  06F1  0020               	movlb	0	; select bank0
  9751  06F2  0862               	movf	I2C2_ISR@pi2c_buf_ptr,w
  9752  06F3  0086               	movwf	6
  9753  06F4  0187               	clrf	7
  9754  06F5  0872               	movf	??_I2C2_ISR,w
  9755  06F6  0081               	movwf	1
  9756  06F7  3001               	movlw	1
  9757  06F8  00F2               	movwf	??_I2C2_ISR
  9758  06F9  0872               	movf	??_I2C2_ISR,w
  9759  06FA  07E2               	addwf	I2C2_ISR@pi2c_buf_ptr,f
  9760                           
  9761                           ;i2c2.c: 519: if(--i2c_bytes_left)
  9762  06FB  3001               	movlw	1
  9763  06FC  02E1               	subwf	I2C2_ISR@i2c_bytes_left,f
  9764  06FD  1903               	btfsc	3,2
  9765  06FE  2F07               	goto	i1l218
  9766                           
  9767                           ;i2c2.c: 520: {
  9768                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
  9769  06FF  0024               	movlb	4	; select bank4
  9770  0700  129E               	bcf	30,5	;volatile
  9771                           
  9772                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
  9773  0701  3006               	movlw	6
  9774  0702  00F2               	movwf	??_I2C2_ISR
  9775  0703  0872               	movf	??_I2C2_ISR,w
  9776  0704  0020               	movlb	0	; select bank0
  9777  0705  00E6               	movwf	_i2c2_state
  9778                           
  9779                           ;i2c2.c: 530: }
  9780  0706  2F0B               	goto	i1l3912
  9781  0707                     i1l218:	
  9782                           
  9783                           ;i2c2.c: 531: else
  9784                           ;i2c2.c: 532: {
  9785                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
  9786  0707  0024               	movlb	4	; select bank4
  9787  0708  169E               	bsf	30,5	;volatile
  9788                           
  9789                           ;i2c2.c: 538: I2C2_FunctionComplete();
  9790  0709  3188  208E         	fcall	_I2C2_FunctionComplete
  9791  070B                     i1l3912:	
  9792                           
  9793                           ;i2c2.c: 539: }
  9794                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
  9795  070B  0024               	movlb	4	; select bank4
  9796  070C  161E               	bsf	30,4	;volatile
  9797                           
  9798                           ;i2c2.c: 543: break;
  9799  070D  0008               	return
  9800  070E                     i1l3914:	
  9801                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
  9802                           
  9803                           
  9804                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
  9805                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
  9806  070E  3000               	movlw	0
  9807  070F  3188  20B2         	fcall	_I2C2_Stop
  9808                           
  9809                           ;i2c2.c: 550: break;
  9810  0711  0008               	return
  9811  0712                     i1l3916:	
  9812                           ;i2c2.c: 552: default:
  9813                           
  9814                           
  9815                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
  9816  0712  3001               	movlw	1
  9817  0713  00F2               	movwf	??_I2C2_ISR
  9818  0714  0872               	movf	??_I2C2_ISR,w
  9819  0715  0020               	movlb	0	; select bank0
  9820  0716  07CB               	addwf	_i2c2_object+4,f
  9821                           
  9822                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
  9823  0717  3006               	movlw	6
  9824  0718  3188  20B2         	fcall	_I2C2_Stop
  9825                           
  9826                           ;i2c2.c: 560: }
  9827                           
  9828                           ;i2c2.c: 558: break;
  9829  071A  0008               	return
  9830  071B                     i1l3922:	
  9831  071B  0020               	movlb	0	; select bank0
  9832  071C  0866               	movf	_i2c2_state,w
  9833                           
  9834                           ; Switch size 1, requested type "space"
  9835                           ; Number of cases is 11, Range of values is 0 to 11
  9836                           ; switch strategies available:
  9837                           ; Name         Instructions Cycles
  9838                           ; direct_byte           30     6 (fixed)
  9839                           ; simple_byte           34    18 (average)
  9840                           ; jumptable            260     6 (fixed)
  9841                           ;	Chosen strategy is direct_byte
  9842  071D  0084               	movwf	4
  9843  071E  300C               	movlw	12
  9844  071F  0204               	subwf	4,w
  9845  0720  1803               	skipnc
  9846  0721  2F12               	goto	i1l3916
  9847  0722  3188               	movlp	high i1S5486
  9848  0723  3504               	lslf	4,w
  9849  0724  3E2C               	addlw	low i1S5486
  9850  0725  0082               	movwf	2
  9851  0726  0008               	return
  9852  0727                     __end_of_I2C2_ISR:	
  9853                           
  9854                           	psect	swtext1
  9855  082C                     __pswtext1:	
  9856  082C                     i1S5486:	
  9857  082C  3185  2DFB         	ljmp	i1l184
  9858  082E  3186  2E26         	ljmp	i1l189
  9859  0830  3186  2E7A         	ljmp	i1l3842
  9860  0832  3186  2E9E         	ljmp	i1l206
  9861  0834  3187  2F0E         	ljmp	i1l3914
  9862  0836  3186  2ED2         	ljmp	i1l213
  9863  0838  3186  2EE7         	ljmp	i1l3896
  9864  083A  3187  2F0E         	ljmp	i1l3914
  9865  083C  3186  2EEE         	ljmp	i1l3900
  9866  083E  3187  2F12         	ljmp	i1l3916
  9867  0840  3186  2E2E         	ljmp	i1l190
  9868  0842  3186  2E51         	ljmp	i1l195
  9869                           
  9870                           	psect	text48
  9871  08B2                     __ptext48:	
  9872 ;; *************** function _I2C2_Stop *****************
  9873 ;; Defined at:
  9874 ;;		line 581 in file "mcc_generated_files/i2c2.c"
  9875 ;; Parameters:    Size  Location     Type
  9876 ;;  completion_c    1    wreg     enum E2972
  9877 ;; Auto vars:     Size  Location     Type
  9878 ;;  completion_c    1    1[COMMON] enum E2972
  9879 ;; Return value:  Size  Location     Type
  9880 ;;                  1    wreg      void 
  9881 ;; Registers used:
  9882 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9883 ;; Tracked objects:
  9884 ;;		On entry : 0/0
  9885 ;;		On exit  : 0/0
  9886 ;;		Unchanged: 0/0
  9887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;Total ram usage:        2 bytes
  9893 ;; Hardware stack levels used:    1
  9894 ;; This function calls:
  9895 ;;		Nothing
  9896 ;; This function is called by:
  9897 ;;		_I2C2_ISR
  9898 ;; This function uses a non-reentrant model
  9899 ;;
  9900                           
  9901                           
  9902                           ;psect for function _I2C2_Stop
  9903  08B2                     _I2C2_Stop:	
  9904                           
  9905                           ;incstack = 0
  9906                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
  9907                           ;I2C2_Stop@completion_code stored from wreg
  9908  08B2  00F1               	movwf	I2C2_Stop@completion_code
  9909                           
  9910                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
  9911  08B3  0024               	movlb	4	; select bank4
  9912  08B4  151E               	bsf	30,2	;volatile
  9913                           
  9914                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
  9915  08B5  0020               	movlb	0	; select bank0
  9916  08B6  0863               	movf	_p_i2c2_current,w
  9917  08B7  3E02               	addlw	2
  9918  08B8  0086               	movwf	6
  9919  08B9  0187               	clrf	7
  9920  08BA  0801               	movf	1,w
  9921  08BB  1903               	btfsc	3,2
  9922  08BC  28C8               	goto	i1l3462
  9923                           
  9924                           ;i2c2.c: 588: {
  9925                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
  9926  08BD  0871               	movf	I2C2_Stop@completion_code,w
  9927  08BE  00F0               	movwf	??_I2C2_Stop
  9928  08BF  0863               	movf	_p_i2c2_current,w
  9929  08C0  3E02               	addlw	2
  9930  08C1  0086               	movwf	6
  9931  08C2  0187               	clrf	7
  9932  08C3  0801               	movf	1,w
  9933  08C4  0086               	movwf	6
  9934  08C5  0187               	clrf	7
  9935  08C6  0870               	movf	??_I2C2_Stop,w
  9936  08C7  0081               	movwf	1
  9937  08C8                     i1l3462:	
  9938                           
  9939                           ;i2c2.c: 591: }
  9940                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
  9941  08C8  01E6               	clrf	_i2c2_state
  9942  08C9  0008               	return
  9943  08CA                     __end_of_I2C2_Stop:	
  9944                           
  9945                           	psect	text49
  9946  088E                     __ptext49:	
  9947 ;; *************** function _I2C2_FunctionComplete *****************
  9948 ;; Defined at:
  9949 ;;		line 563 in file "mcc_generated_files/i2c2.c"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;		None
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;		None
  9954 ;; Return value:  Size  Location     Type
  9955 ;;                  1    wreg      void 
  9956 ;; Registers used:
  9957 ;;		wreg, status,2, status,0
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;Total ram usage:        1 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; This function calls:
  9970 ;;		Nothing
  9971 ;; This function is called by:
  9972 ;;		_I2C2_ISR
  9973 ;; This function uses a non-reentrant model
  9974 ;;
  9975                           
  9976                           
  9977                           ;psect for function _I2C2_FunctionComplete
  9978  088E                     _I2C2_FunctionComplete:	
  9979                           
  9980                           ;i2c2.c: 567: p_i2c2_trb_current++;
  9981                           
  9982                           ;incstack = 0
  9983                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
  9984  088E  3004               	movlw	4
  9985  088F  00F0               	movwf	??_I2C2_FunctionComplete
  9986  0890  0870               	movf	??_I2C2_FunctionComplete,w
  9987  0891  0020               	movlb	0	; select bank0
  9988  0892  07E4               	addwf	_p_i2c2_trb_current,f
  9989                           
  9990                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
  9991  0893  3001               	movlw	1
  9992  0894  02E5               	subwf	_i2c2_trb_count,f
  9993  0895  1D03               	btfss	3,2
  9994  0896  289C               	goto	i1l225
  9995                           
  9996                           ;i2c2.c: 571: {
  9997                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
  9998  0897  3004               	movlw	4
  9999  0898  00F0               	movwf	??_I2C2_FunctionComplete
 10000  0899  0870               	movf	??_I2C2_FunctionComplete,w
 10001  089A  00E6               	movwf	_i2c2_state
 10002                           
 10003                           ;i2c2.c: 573: }
 10004  089B  0008               	return
 10005  089C                     i1l225:	
 10006                           
 10007                           ;i2c2.c: 574: else
 10008                           ;i2c2.c: 575: {
 10009                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
 10010  089C  01E6               	clrf	_i2c2_state
 10011  089D  0AE6               	incf	_i2c2_state,f
 10012  089E  0008               	return
 10013  089F                     __end_of_I2C2_FunctionComplete:	
 10014                           
 10015                           	psect	text50
 10016  0002                     __ptext50:	
 10017 ;; *************** function _I2C2_BusCollisionISR *****************
 10018 ;; Defined at:
 10019 ;;		line 728 in file "mcc_generated_files/i2c2.c"
 10020 ;; Parameters:    Size  Location     Type
 10021 ;;		None
 10022 ;; Auto vars:     Size  Location     Type
 10023 ;;		None
 10024 ;; Return value:  Size  Location     Type
 10025 ;;                  1    wreg      void 
 10026 ;; Registers used:
 10027 ;;		None
 10028 ;; Tracked objects:
 10029 ;;		On entry : 0/0
 10030 ;;		On exit  : 0/0
 10031 ;;		Unchanged: 0/0
 10032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;Total ram usage:        0 bytes
 10038 ;; Hardware stack levels used:    1
 10039 ;; This function calls:
 10040 ;;		Nothing
 10041 ;; This function is called by:
 10042 ;;		_INTERRUPT_InterruptManager
 10043 ;; This function uses a non-reentrant model
 10044 ;;
 10045                           
 10046                           
 10047                           ;psect for function _I2C2_BusCollisionISR
 10048  0002                     _I2C2_BusCollisionISR:	
 10049                           
 10050                           ;incstack = 0
 10051                           ; Regs used in _I2C2_BusCollisionISR: []
 10052  0002  0008               	return
 10053  0003                     __end_of_I2C2_BusCollisionISR:	
 10054                           
 10055                           	psect	text51
 10056  0A58                     __ptext51:	
 10057 ;; *************** function _I2C1_ISR *****************
 10058 ;; Defined at:
 10059 ;;		line 57 in file "mcc_generated_files/i2c1.c"
 10060 ;; Parameters:    Size  Location     Type
 10061 ;;		None
 10062 ;; Auto vars:     Size  Location     Type
 10063 ;;  i2c_data        1   10[COMMON] unsigned char 
 10064 ;; Return value:  Size  Location     Type
 10065 ;;                  1    wreg      void 
 10066 ;; Registers used:
 10067 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10068 ;; Tracked objects:
 10069 ;;		On entry : 0/0
 10070 ;;		On exit  : 0/0
 10071 ;;		Unchanged: 0/0
 10072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10074 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10075 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10076 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10077 ;;Total ram usage:        2 bytes
 10078 ;; Hardware stack levels used:    1
 10079 ;; Hardware stack levels required when called:    4
 10080 ;; This function calls:
 10081 ;;		_I2C1_StatusCallback
 10082 ;; This function is called by:
 10083 ;;		_INTERRUPT_InterruptManager
 10084 ;; This function uses a non-reentrant model
 10085 ;;
 10086                           
 10087                           
 10088                           ;psect for function _I2C1_ISR
 10089  0A58                     _I2C1_ISR:	
 10090                           
 10091                           ;i2c1.c: 59: uint8_t i2c_data = 0x55;
 10092                           
 10093                           ;incstack = 0
 10094                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10095  0A58  3055               	movlw	85
 10096  0A59  00F9               	movwf	??_I2C1_ISR
 10097  0A5A  0879               	movf	??_I2C1_ISR,w
 10098  0A5B  00FA               	movwf	I2C1_ISR@i2c_data
 10099                           
 10100                           ;i2c1.c: 64: PIR1bits.SSP1IF = 0;
 10101  0A5C  0020               	movlb	0	; select bank0
 10102  0A5D  1191               	bcf	17,3	;volatile
 10103                           
 10104                           ;i2c1.c: 65: i2c_data = SSP1BUF;
 10105  0A5E  0024               	movlb	4	; select bank4
 10106  0A5F  0811               	movf	17,w	;volatile
 10107  0A60  00F9               	movwf	??_I2C1_ISR
 10108  0A61  0879               	movf	??_I2C1_ISR,w
 10109  0A62  00FA               	movwf	I2C1_ISR@i2c_data
 10110                           
 10111                           ;i2c1.c: 66: if(1 == SSP1STATbits.R_nW)
 10112  0A63  1D14               	btfss	20,2	;volatile
 10113  0A64  2A6C               	goto	i1l64
 10114                           
 10115                           ;i2c1.c: 67: {
 10116                           ;i2c1.c: 68: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
 10117  0A65  1A94               	btfsc	20,5	;volatile
 10118  0A66  1F16               	btfss	22,6	;volatile
 10119  0A67  2A6A               	goto	i1l5286
 10120                           
 10121                           ;i2c1.c: 69: {
 10122                           ;i2c1.c: 71: I2C1_StatusCallback(I2C1_SLAVE_READ_COMPLETED);
 10123  0A68  3003               	movlw	3
 10124  0A69  2A7A               	goto	L3
 10125  0A6A                     i1l5286:	
 10126                           ;i2c1.c: 72: }
 10127                           
 10128                           
 10129                           ;i2c1.c: 73: else
 10130                           ;i2c1.c: 74: {
 10131                           ;i2c1.c: 76: I2C1_StatusCallback(I2C1_SLAVE_READ_REQUEST);
 10132  0A6A  3001               	movlw	1
 10133  0A6B  2A7A               	goto	L3
 10134  0A6C                     i1l64:	
 10135                           ;i2c1.c: 77: }
 10136                           ;i2c1.c: 78: }
 10137                           
 10138                           
 10139                           ;i2c1.c: 79: else if(0 == SSP1STATbits.D_nA)
 10140  0A6C  1A94               	btfsc	20,5	;volatile
 10141  0A6D  2A75               	goto	i1l5294
 10142                           
 10143                           ;i2c1.c: 80: {
 10144                           ;i2c1.c: 83: if(0x00 == i2c_data)
 10145  0A6E  087A               	movf	I2C1_ISR@i2c_data,w
 10146  0A6F  1D03               	btfss	3,2
 10147  0A70  2A73               	goto	i1l5292
 10148                           
 10149                           ;i2c1.c: 84: {
 10150                           ;i2c1.c: 86: I2C1_StatusCallback(I2C1_SLAVE_GENERAL_CALL_REQUEST);
 10151  0A71  3004               	movlw	4
 10152  0A72  2A7A               	goto	L3
 10153  0A73                     i1l5292:	
 10154                           ;i2c1.c: 87: }
 10155                           
 10156                           
 10157                           ;i2c1.c: 88: else
 10158                           ;i2c1.c: 89: {
 10159                           ;i2c1.c: 91: I2C1_StatusCallback(I2C1_SLAVE_WRITE_REQUEST);
 10160  0A73  3000               	movlw	0
 10161  0A74  2A7A               	goto	L3
 10162  0A75                     i1l5294:	
 10163                           ;i2c1.c: 92: }
 10164                           ;i2c1.c: 93: }
 10165                           
 10166                           
 10167                           ;i2c1.c: 94: else
 10168                           ;i2c1.c: 95: {
 10169                           ;i2c1.c: 96: I2C_slaveWriteData = i2c_data;
 10170  0A75  087A               	movf	I2C1_ISR@i2c_data,w
 10171  0A76  00F9               	movwf	??_I2C1_ISR
 10172  0A77  0879               	movf	??_I2C1_ISR,w
 10173  0A78  00FD               	movwf	_I2C_slaveWriteData	;volatile
 10174                           
 10175                           ;i2c1.c: 99: I2C1_StatusCallback(I2C1_SLAVE_WRITE_COMPLETED);
 10176  0A79  3002               	movlw	2
 10177  0A7A                     L3:	
 10178  0A7A  318E  264E         	fcall	_I2C1_StatusCallback
 10179                           
 10180                           ;i2c1.c: 100: }
 10181                           ;i2c1.c: 102: SSP1CON1bits.CKP = 1;
 10182  0A7C  0024               	movlb	4	; select bank4
 10183  0A7D  1615               	bsf	21,4	;volatile
 10184  0A7E  0008               	return
 10185  0A7F                     __end_of_I2C1_ISR:	
 10186                           
 10187                           	psect	text52
 10188  0E4E                     __ptext52:	
 10189 ;; *************** function _I2C1_StatusCallback *****************
 10190 ;; Defined at:
 10191 ;;		line 106 in file "mcc_generated_files/i2c1.c"
 10192 ;; Parameters:    Size  Location     Type
 10193 ;;  i2c_bus_stat    1    wreg     enum E2989
 10194 ;; Auto vars:     Size  Location     Type
 10195 ;;  i2c_bus_stat    1    7[COMMON] enum E2989
 10196 ;;  pdata           1    8[COMMON] PTR unsigned char 
 10197 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
 10198 ;;		 -> readbuf.type(1), readbuf(5), 
 10199 ;; Return value:  Size  Location     Type
 10200 ;;                  1    wreg      void 
 10201 ;; Registers used:
 10202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10203 ;; Tracked objects:
 10204 ;;		On entry : 0/0
 10205 ;;		On exit  : 0/0
 10206 ;;		Unchanged: 0/0
 10207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10209 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10210 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;Total ram usage:        3 bytes
 10213 ;; Hardware stack levels used:    1
 10214 ;; Hardware stack levels required when called:    3
 10215 ;; This function calls:
 10216 ;;		_PROTOCOL_Backplane_Slave_Enabled
 10217 ;;		_PROTOCOL_I2C_GET
 10218 ;;		_PROTOCOL_I2C_SEN
 10219 ;;		_PROTOCOL_I2C_WHO
 10220 ;;		_PROTOCOL_INV
 10221 ;;		_PROTOCOL_RST
 10222 ;;		i1_PROTOCOL_EXT
 10223 ;;		i1_PROTOCOL_Read_Lock
 10224 ;;		i1_PROTOCOL_SAV
 10225 ;;		i1_PROTOCOL_SET
 10226 ;;		i1_PROTOCOL_STA
 10227 ;;		i1_PROTOCOL_STP
 10228 ;; This function is called by:
 10229 ;;		_I2C1_ISR
 10230 ;; This function uses a non-reentrant model
 10231 ;;
 10232                           
 10233                           
 10234                           ;psect for function _I2C1_StatusCallback
 10235  0E4E                     _I2C1_StatusCallback:	
 10236                           
 10237                           ;incstack = 0
 10238                           ; Regs used in _I2C1_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10239                           ;I2C1_StatusCallback@i2c_bus_state stored from wreg
 10240  0E4E  00F7               	movwf	I2C1_StatusCallback@i2c_bus_state
 10241                           
 10242                           ;i2c1.c: 109: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
 10243                           ;i2c1.c: 110: static uint8_t next = 0x00;
 10244                           ;i2c1.c: 111: static uint8_t ext_len = 0;
 10245                           ;i2c1.c: 112: static uint8_t ext_cnt = 0;
 10246                           ;i2c1.c: 113: static char ext_buf[48];
 10247                           ;i2c1.c: 114: uint8_t *pdata;
 10248                           ;i2c1.c: 115: switch (i2c_bus_state)
 10249  0E4F  2F07               	goto	i1l5262
 10250  0E50                     i1l86:	
 10251                           ;i2c1.c: 116: {
 10252                           ;i2c1.c: 117: case I2C1_SLAVE_WRITE_REQUEST:
 10253                           
 10254                           
 10255                           ;i2c1.c: 118: slaveWriteType = SLAVE_DATA_ADDRESS;
 10256  0E50  0020               	movlb	0	; select bank0
 10257  0E51  01EA               	clrf	I2C1_StatusCallback@slaveWriteType
 10258  0E52  0AEA               	incf	I2C1_StatusCallback@slaveWriteType,f
 10259                           
 10260                           ;i2c1.c: 119: break;
 10261  0E53  0008               	return
 10262  0E54                     i1l5188:	
 10263                           ;i2c1.c: 121: case I2C1_SLAVE_GENERAL_CALL_REQUEST:
 10264                           
 10265                           
 10266                           ;i2c1.c: 123: slaveWriteType = SLAVE_GENERAL_CALL;
 10267  0E54  3002               	movlw	2
 10268  0E55  00F6               	movwf	??_I2C1_StatusCallback
 10269  0E56  0876               	movf	??_I2C1_StatusCallback,w
 10270  0E57  0020               	movlb	0	; select bank0
 10271  0E58  00EA               	movwf	I2C1_StatusCallback@slaveWriteType
 10272                           
 10273                           ;i2c1.c: 124: break;
 10274  0E59  0008               	return
 10275  0E5A                     i1l5190:	
 10276                           ;i2c1.c: 132: case 0x01:
 10277                           
 10278                           ;i2c1.c: 131: switch(next) {
 10279                           
 10280                           ;i2c1.c: 129: {
 10281                           ;i2c1.c: 130: case SLAVE_DATA_ADDRESS:
 10282                           
 10283                           ;i2c1.c: 128: switch(slaveWriteType)
 10284                           
 10285                           ;i2c1.c: 126: case I2C1_SLAVE_WRITE_COMPLETED:
 10286                           
 10287                           
 10288                           ;i2c1.c: 133: PROTOCOL_SET(I2C_slaveWriteData);
 10289  0E5A  087D               	movf	_I2C_slaveWriteData,w	;volatile
 10290  0E5B  3197  278D  318E   	fcall	i1_PROTOCOL_SET
 10291  0E5E  2EC9               	goto	i1l5236
 10292  0E5F                     i1l5194:	
 10293                           ;i2c1.c: 138: case 0x04:
 10294                           
 10295                           ;i2c1.c: 137: switch(I2C_slaveWriteData) {
 10296                           
 10297                           ;i2c1.c: 136: case 0x00:
 10298                           
 10299                           ;i2c1.c: 135: break;
 10300                           
 10301                           ;i2c1.c: 134: next = 0x00;
 10302                           
 10303                           
 10304                           ;i2c1.c: 139: PROTOCOL_STA();
 10305  0E5F  3197  275F  318E   	fcall	i1_PROTOCOL_STA
 10306                           
 10307                           ;i2c1.c: 140: break;
 10308  0E62  2EE2               	goto	i1l5246
 10309  0E63                     i1l5196:	
 10310                           ;i2c1.c: 141: case 0x05:
 10311                           
 10312                           
 10313                           ;i2c1.c: 142: PROTOCOL_STP();
 10314  0E63  3197  2748  318E   	fcall	i1_PROTOCOL_STP
 10315                           
 10316                           ;i2c1.c: 143: break;
 10317  0E66  2EE2               	goto	i1l5246
 10318  0E67                     i1l5198:	
 10319                           ;i2c1.c: 144: case 0x03:
 10320                           
 10321                           
 10322                           ;i2c1.c: 145: PROTOCOL_SAV();
 10323  0E67  3197  27A2  318E   	fcall	i1_PROTOCOL_SAV
 10324                           
 10325                           ;i2c1.c: 146: break;
 10326  0E6A  2EE2               	goto	i1l5246
 10327  0E6B                     i1l5200:	
 10328                           ;i2c1.c: 147: case 0x06:
 10329                           
 10330                           
 10331                           ;i2c1.c: 148: PROTOCOL_INV();
 10332  0E6B  3197  275B  318E   	fcall	_PROTOCOL_INV
 10333                           
 10334                           ;i2c1.c: 149: break;
 10335  0E6E  2EE2               	goto	i1l5246
 10336  0E6F                     i1l5202:	
 10337                           ;i2c1.c: 150: case 0x0c:
 10338                           
 10339                           
 10340                           ;i2c1.c: 151: PROTOCOL_RST();
 10341  0E6F  3197  27BD  318E   	fcall	_PROTOCOL_RST
 10342                           
 10343                           ;i2c1.c: 152: break;
 10344  0E72  2EE2               	goto	i1l5246
 10345  0E73                     i1l103:	
 10346                           ;i2c1.c: 153: case 0x08:
 10347                           
 10348                           
 10349                           ;i2c1.c: 154: next = 0x01;
 10350  0E73  01E9               	clrf	I2C1_StatusCallback@next
 10351  0E74  0AE9               	incf	I2C1_StatusCallback@next,f
 10352                           
 10353                           ;i2c1.c: 155: break;
 10354  0E75  2EE2               	goto	i1l5246
 10355  0E76                     i1l5204:	
 10356                           ;i2c1.c: 156: case 0x0a:
 10357                           
 10358                           
 10359                           ;i2c1.c: 157: next = 0x02;
 10360  0E76  3002               	movlw	2
 10361  0E77  2EAA               	goto	L4
 10362  0E78                     i1l5208:	
 10363                           ;i2c1.c: 159: }
 10364                           
 10365                           ;i2c1.c: 158: break;
 10366                           
 10367  0E78  087D               	movf	_I2C_slaveWriteData,w	;volatile
 10368                           
 10369                           ; Switch size 1, requested type "space"
 10370                           ; Number of cases is 7, Range of values is 3 to 12
 10371                           ; switch strategies available:
 10372                           ; Name         Instructions Cycles
 10373                           ; simple_byte           22    12 (average)
 10374                           ; direct_byte           29     9 (fixed)
 10375                           ; jumptable            263     9 (fixed)
 10376                           ;	Chosen strategy is simple_byte
 10377  0E79  3A03               	xorlw	3	; case 3
 10378  0E7A  1903               	skipnz
 10379  0E7B  2E67               	goto	i1l5198
 10380  0E7C  3A07               	xorlw	7	; case 4
 10381  0E7D  1903               	skipnz
 10382  0E7E  2E5F               	goto	i1l5194
 10383  0E7F  3A01               	xorlw	1	; case 5
 10384  0E80  1903               	skipnz
 10385  0E81  2E63               	goto	i1l5196
 10386  0E82  3A03               	xorlw	3	; case 6
 10387  0E83  1903               	skipnz
 10388  0E84  2E6B               	goto	i1l5200
 10389  0E85  3A0E               	xorlw	14	; case 8
 10390  0E86  1903               	skipnz
 10391  0E87  2E73               	goto	i1l103
 10392  0E88  3A02               	xorlw	2	; case 10
 10393  0E89  1903               	skipnz
 10394  0E8A  2E76               	goto	i1l5204
 10395  0E8B  3A06               	xorlw	6	; case 12
 10396  0E8C  1903               	skipnz
 10397  0E8D  2E6F               	goto	i1l5202
 10398  0E8E  2EE2               	goto	i1l5246
 10399                           
 10400                           ;i2c1.c: 161: }
 10401                           
 10402                           ;i2c1.c: 160: break;
 10403  0E8F  2EE2               	goto	i1l5246
 10404  0E90                     i1l5212:	
 10405  0E90  0869               	movf	I2C1_StatusCallback@next,w
 10406                           
 10407                           ; Switch size 1, requested type "space"
 10408                           ; Number of cases is 2, Range of values is 0 to 1
 10409                           ; switch strategies available:
 10410                           ; Name         Instructions Cycles
 10411                           ; simple_byte            7     4 (average)
 10412                           ; direct_byte           10     6 (fixed)
 10413                           ; jumptable            260     6 (fixed)
 10414                           ;	Chosen strategy is simple_byte
 10415  0E91  3A00               	xorlw	0	; case 0
 10416  0E92  1903               	skipnz
 10417  0E93  2E78               	goto	i1l5208
 10418  0E94  3A01               	xorlw	1	; case 1
 10419  0E95  1903               	skipnz
 10420  0E96  2E5A               	goto	i1l5190
 10421  0E97  2EE2               	goto	i1l5246
 10422                           
 10423                           ;i2c1.c: 162: break;
 10424  0E98  2EE2               	goto	i1l5246
 10425  0E99                     i1l5214:	
 10426                           ;i2c1.c: 164: case SLAVE_GENERAL_CALL:
 10427                           
 10428                           
 10429                           ;i2c1.c: 165: if (I2C_slaveWriteData == 0x02) {
 10430  0E99  3002               	movlw	2
 10431  0E9A  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
 10432  0E9B  1D03               	btfss	3,2
 10433  0E9C  2EE2               	goto	i1l5246
 10434                           
 10435                           ;i2c1.c: 166: SSP1CON2bits.GCEN = 0;
 10436  0E9D  0024               	movlb	4	; select bank4
 10437  0E9E  1396               	bcf	22,7	;volatile
 10438                           
 10439                           ;i2c1.c: 167: PROTOCOL_Backplane_Slave_Enabled();
 10440  0E9F  3197  2757  318E   	fcall	_PROTOCOL_Backplane_Slave_Enabled
 10441                           
 10442                           ;i2c1.c: 168: }
 10443                           ;i2c1.c: 169: break;
 10444  0EA2  2EE2               	goto	i1l5246
 10445  0EA3                     i1l5220:	
 10446                           ;i2c1.c: 173: case 0x02:
 10447                           
 10448                           ;i2c1.c: 172: switch(next) {
 10449                           
 10450                           ;i2c1.c: 171: case SLAVE_NORMAL_DATA:
 10451                           
 10452                           
 10453                           ;i2c1.c: 174: ext_len = I2C_slaveWriteData;
 10454  0EA3  087D               	movf	_I2C_slaveWriteData,w	;volatile
 10455  0EA4  00F6               	movwf	??_I2C1_StatusCallback
 10456  0EA5  0876               	movf	??_I2C1_StatusCallback,w
 10457  0EA6  0020               	movlb	0	; select bank0
 10458  0EA7  00E8               	movwf	I2C1_StatusCallback@ext_len
 10459                           
 10460                           ;i2c1.c: 175: ext_cnt = 0;
 10461  0EA8  01E7               	clrf	I2C1_StatusCallback@ext_cnt
 10462                           
 10463                           ;i2c1.c: 176: next = 0x03;
 10464  0EA9  3003               	movlw	3
 10465  0EAA                     L4:	
 10466  0EAA  00F6               	movwf	??_I2C1_StatusCallback
 10467  0EAB  0876               	movf	??_I2C1_StatusCallback,w
 10468  0EAC  00E9               	movwf	I2C1_StatusCallback@next
 10469                           
 10470                           ;i2c1.c: 177: break;
 10471  0EAD  2EE2               	goto	i1l5246
 10472  0EAE                     i1l5226:	
 10473                           ;i2c1.c: 178: case 0x03:
 10474                           
 10475                           
 10476                           ;i2c1.c: 179: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
 10477  0EAE  087D               	movf	_I2C_slaveWriteData,w	;volatile
 10478  0EAF  00F6               	movwf	??_I2C1_StatusCallback
 10479  0EB0  0867               	movf	I2C1_StatusCallback@ext_cnt,w
 10480  0EB1  3EA0               	addlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
 10481  0EB2  0086               	movwf	6
 10482  0EB3  3001               	movlw	1	; select bank3/4
 10483  0EB4  0087               	movwf	7
 10484  0EB5  0876               	movf	??_I2C1_StatusCallback,w
 10485  0EB6  0081               	movwf	1
 10486  0EB7  3001               	movlw	1
 10487  0EB8  00F6               	movwf	??_I2C1_StatusCallback
 10488  0EB9  0876               	movf	??_I2C1_StatusCallback,w
 10489  0EBA  07E7               	addwf	I2C1_StatusCallback@ext_cnt,f
 10490                           
 10491                           ;i2c1.c: 180: if (ext_cnt >= ext_len) {
 10492  0EBB  0868               	movf	I2C1_StatusCallback@ext_len,w
 10493  0EBC  0267               	subwf	I2C1_StatusCallback@ext_cnt,w
 10494  0EBD  1C03               	skipc
 10495  0EBE  2EE2               	goto	i1l5246
 10496                           
 10497                           ;i2c1.c: 181: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
 10498  0EBF  3197  2745  318E   	fcall	i1_PROTOCOL_Read_Lock
 10499  0EC2  3A00               	xorlw	0
 10500  0EC3  1D03               	skipz
 10501  0EC4  2EC9               	goto	i1l5236
 10502  0EC5  30A0               	movlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
 10503  0EC6  3188  205E  318E   	fcall	i1_PROTOCOL_EXT
 10504  0EC9                     i1l5236:	
 10505                           
 10506                           ;i2c1.c: 182: next = 0x00;
 10507  0EC9  0020               	movlb	0	; select bank0
 10508  0ECA  01E9               	clrf	I2C1_StatusCallback@next
 10509                           
 10510                           ;i2c1.c: 185: }
 10511                           
 10512                           ;i2c1.c: 183: }
 10513                           ;i2c1.c: 184: break;
 10514  0ECB  2EE2               	goto	i1l5246
 10515  0ECC                     i1l5240:	
 10516  0ECC  0020               	movlb	0	; select bank0
 10517  0ECD  0869               	movf	I2C1_StatusCallback@next,w
 10518                           
 10519                           ; Switch size 1, requested type "space"
 10520                           ; Number of cases is 2, Range of values is 2 to 3
 10521                           ; switch strategies available:
 10522                           ; Name         Instructions Cycles
 10523                           ; simple_byte            7     4 (average)
 10524                           ; direct_byte           13     9 (fixed)
 10525                           ; jumptable            263     9 (fixed)
 10526                           ;	Chosen strategy is simple_byte
 10527  0ECE  3A02               	xorlw	2	; case 2
 10528  0ECF  1903               	skipnz
 10529  0ED0  2EA3               	goto	i1l5220
 10530  0ED1  3A01               	xorlw	1	; case 3
 10531  0ED2  1903               	skipnz
 10532  0ED3  2EAE               	goto	i1l5226
 10533  0ED4  2EE2               	goto	i1l5246
 10534                           
 10535                           ;i2c1.c: 190: }
 10536                           
 10537                           ;i2c1.c: 188: break;
 10538                           
 10539                           ;i2c1.c: 187: default:
 10540                           
 10541                           ;i2c1.c: 186: break;
 10542  0ED5  2EE2               	goto	i1l5246
 10543  0ED6                     i1l5244:	
 10544  0ED6  0020               	movlb	0	; select bank0
 10545  0ED7  086A               	movf	I2C1_StatusCallback@slaveWriteType,w
 10546                           
 10547                           ; Switch size 1, requested type "space"
 10548                           ; Number of cases is 3, Range of values is 0 to 2
 10549                           ; switch strategies available:
 10550                           ; Name         Instructions Cycles
 10551                           ; simple_byte           10     6 (average)
 10552                           ; direct_byte           12     6 (fixed)
 10553                           ; jumptable            260     6 (fixed)
 10554                           ;	Chosen strategy is simple_byte
 10555  0ED8  3A00               	xorlw	0	; case 0
 10556  0ED9  1903               	skipnz
 10557  0EDA  2ECC               	goto	i1l5240
 10558  0EDB  3A01               	xorlw	1	; case 1
 10559  0EDC  1903               	skipnz
 10560  0EDD  2E90               	goto	i1l5212
 10561  0EDE  3A03               	xorlw	3	; case 2
 10562  0EDF  1903               	skipnz
 10563  0EE0  2E99               	goto	i1l5214
 10564  0EE1  2EE2               	goto	i1l5246
 10565  0EE2                     i1l5246:	
 10566                           
 10567                           ;i2c1.c: 192: slaveWriteType = SLAVE_NORMAL_DATA;
 10568  0EE2  0020               	movlb	0	; select bank0
 10569  0EE3  01EA               	clrf	I2C1_StatusCallback@slaveWriteType
 10570                           
 10571                           ;i2c1.c: 193: break;
 10572  0EE4  0008               	return
 10573  0EE5                     i1l5248:	
 10574                           ;i2c1.c: 197: {
 10575                           ;i2c1.c: 198: case 0x01:
 10576                           
 10577                           ;i2c1.c: 196: switch (I2C_slaveWriteData)
 10578                           
 10579                           ;i2c1.c: 195: case I2C1_SLAVE_READ_REQUEST:
 10580                           
 10581                           
 10582                           ;i2c1.c: 199: SSP1BUF = PROTOCOL_I2C_WHO();
 10583  0EE5  3197  2742         	fcall	_PROTOCOL_I2C_WHO
 10584  0EE7  0024               	movlb	4	; select bank4
 10585  0EE8  0091               	movwf	17	;volatile
 10586                           
 10587                           ;i2c1.c: 200: break;
 10588  0EE9  0008               	return
 10589  0EEA                     i1l5250:	
 10590                           ;i2c1.c: 201: case 0x07:
 10591                           
 10592                           
 10593                           ;i2c1.c: 202: pdata = PROTOCOL_I2C_SEN();
 10594  0EEA  318B  2339         	fcall	_PROTOCOL_I2C_SEN
 10595  0EEC  00F6               	movwf	??_I2C1_StatusCallback
 10596  0EED  0876               	movf	??_I2C1_StatusCallback,w
 10597  0EEE  00F8               	movwf	I2C1_StatusCallback@pdata
 10598                           
 10599                           ;i2c1.c: 203: SSP1BUF = *pdata;
 10600  0EEF  0878               	movf	I2C1_StatusCallback@pdata,w
 10601  0EF0  0086               	movwf	6
 10602  0EF1  0187               	clrf	7
 10603  0EF2  0801               	movf	1,w
 10604  0EF3  0024               	movlb	4	; select bank4
 10605  0EF4  0091               	movwf	17	;volatile
 10606                           
 10607                           ;i2c1.c: 204: break;
 10608  0EF5  0008               	return
 10609  0EF6                     i1l5254:	
 10610                           ;i2c1.c: 205: case 0x09:
 10611                           
 10612                           
 10613                           ;i2c1.c: 206: SSP1BUF = PROTOCOL_I2C_GET();
 10614  0EF6  3197  273F         	fcall	_PROTOCOL_I2C_GET
 10615  0EF8  0024               	movlb	4	; select bank4
 10616  0EF9  0091               	movwf	17	;volatile
 10617                           
 10618                           ;i2c1.c: 208: }
 10619                           
 10620                           ;i2c1.c: 207: break;
 10621  0EFA  0008               	return
 10622  0EFB                     i1l5258:	
 10623  0EFB  087D               	movf	_I2C_slaveWriteData,w	;volatile
 10624                           
 10625                           ; Switch size 1, requested type "space"
 10626                           ; Number of cases is 3, Range of values is 1 to 9
 10627                           ; switch strategies available:
 10628                           ; Name         Instructions Cycles
 10629                           ; simple_byte           10     6 (average)
 10630                           ; direct_byte           27     9 (fixed)
 10631                           ; jumptable            263     9 (fixed)
 10632                           ;	Chosen strategy is simple_byte
 10633  0EFC  3A01               	xorlw	1	; case 1
 10634  0EFD  1903               	skipnz
 10635  0EFE  2EE5               	goto	i1l5248
 10636  0EFF  3A06               	xorlw	6	; case 7
 10637  0F00  1903               	skipnz
 10638  0F01  2EEA               	goto	i1l5250
 10639  0F02  3A0E               	xorlw	14	; case 9
 10640  0F03  1903               	skipnz
 10641  0F04  2EF6               	goto	i1l5254
 10642  0F05  2F11               	goto	i1l124
 10643                           
 10644                           ;i2c1.c: 216: }
 10645                           
 10646                           ;i2c1.c: 214: break;
 10647                           
 10648                           ;i2c1.c: 213: default:
 10649                           
 10650                           ;i2c1.c: 212: break;
 10651                           
 10652                           ;i2c1.c: 211: case I2C1_SLAVE_READ_COMPLETED:
 10653                           
 10654                           ;i2c1.c: 209: break;
 10655  0F06  0008               	return
 10656  0F07                     i1l5262:	
 10657  0F07  0877               	movf	I2C1_StatusCallback@i2c_bus_state,w
 10658                           
 10659                           ; Switch size 1, requested type "space"
 10660                           ; Number of cases is 5, Range of values is 0 to 4
 10661                           ; switch strategies available:
 10662                           ; Name         Instructions Cycles
 10663                           ; direct_byte           16     6 (fixed)
 10664                           ; simple_byte           16     9 (average)
 10665                           ; jumptable            260     6 (fixed)
 10666                           ;	Chosen strategy is direct_byte
 10667  0F08  0084               	movwf	4
 10668  0F09  3005               	movlw	5
 10669  0F0A  0204               	subwf	4,w
 10670  0F0B  1803               	skipnc
 10671  0F0C  0008               	return
 10672  0F0D  3188               	movlp	high i1S5488
 10673  0F0E  3504               	lslf	4,w
 10674  0F0F  3E44               	addlw	low i1S5488
 10675  0F10  0082               	movwf	2
 10676  0F11                     i1l124:	
 10677  0F11  0008               	return
 10678  0F12                     __end_of_I2C1_StatusCallback:	
 10679                           
 10680                           	psect	swtext2
 10681  0844                     __pswtext2:	
 10682  0844                     i1S5488:	
 10683  0844  318E  2E50         	ljmp	i1l86
 10684  0846  318E  2EFB         	ljmp	i1l5258
 10685  0848  318E  2ED6         	ljmp	i1l5244
 10686  084A  318F  2F11         	ljmp	i1l124
 10687  084C  318E  2E54         	ljmp	i1l5188
 10688                           
 10689                           	psect	text53
 10690  1748                     __ptext53:	
 10691 ;; *************** function i1_PROTOCOL_STP *****************
 10692 ;; Defined at:
 10693 ;;		line 98 in file "protocol.c"
 10694 ;; Parameters:    Size  Location     Type
 10695 ;;		None
 10696 ;; Auto vars:     Size  Location     Type
 10697 ;;		None
 10698 ;; Return value:  Size  Location     Type
 10699 ;;                  1    wreg      void 
 10700 ;; Registers used:
 10701 ;;		wreg, status,2, status,0
 10702 ;; Tracked objects:
 10703 ;;		On entry : 0/0
 10704 ;;		On exit  : 0/0
 10705 ;;		Unchanged: 0/0
 10706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10711 ;;Total ram usage:        0 bytes
 10712 ;; Hardware stack levels used:    1
 10713 ;; This function calls:
 10714 ;;		Nothing
 10715 ;; This function is called by:
 10716 ;;		_I2C1_StatusCallback
 10717 ;; This function uses a non-reentrant model
 10718 ;;
 10719                           
 10720                           
 10721                           ;psect for function i1_PROTOCOL_STP
 10722  1748                     i1_PROTOCOL_STP:	
 10723                           
 10724                           ;protocol.c: 100: running = 0;
 10725                           
 10726                           ;incstack = 0
 10727                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
 10728  1748  0020               	movlb	0	; select bank0
 10729  1749  01D4               	clrf	_running
 10730  174A  0008               	return
 10731  174B                     __end_ofi1_PROTOCOL_STP:	
 10732                           
 10733                           	psect	text54
 10734  175F                     __ptext54:	
 10735 ;; *************** function i1_PROTOCOL_STA *****************
 10736 ;; Defined at:
 10737 ;;		line 93 in file "protocol.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;		None
 10740 ;; Auto vars:     Size  Location     Type
 10741 ;;		None
 10742 ;; Return value:  Size  Location     Type
 10743 ;;                  1    wreg      void 
 10744 ;; Registers used:
 10745 ;;		wreg, status,2, status,0
 10746 ;; Tracked objects:
 10747 ;;		On entry : 0/0
 10748 ;;		On exit  : 0/0
 10749 ;;		Unchanged: 0/0
 10750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;Total ram usage:        0 bytes
 10756 ;; Hardware stack levels used:    1
 10757 ;; This function calls:
 10758 ;;		Nothing
 10759 ;; This function is called by:
 10760 ;;		_I2C1_StatusCallback
 10761 ;; This function uses a non-reentrant model
 10762 ;;
 10763                           
 10764                           
 10765                           ;psect for function i1_PROTOCOL_STA
 10766  175F                     i1_PROTOCOL_STA:	
 10767                           
 10768                           ;protocol.c: 95: running = 1;
 10769                           
 10770                           ;incstack = 0
 10771                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
 10772  175F  0020               	movlb	0	; select bank0
 10773  1760  01D4               	clrf	_running
 10774  1761  0AD4               	incf	_running,f
 10775  1762  0008               	return
 10776  1763                     __end_ofi1_PROTOCOL_STA:	
 10777                           
 10778                           	psect	text55
 10779  178D                     __ptext55:	
 10780 ;; *************** function i1_PROTOCOL_SET *****************
 10781 ;; Defined at:
 10782 ;;		line 111 in file "protocol.c"
 10783 ;; Parameters:    Size  Location     Type
 10784 ;;  value_          1    wreg     unsigned char 
 10785 ;; Auto vars:     Size  Location     Type
 10786 ;;  value_          1    1[COMMON] unsigned char 
 10787 ;; Return value:  Size  Location     Type
 10788 ;;                  1    wreg      void 
 10789 ;; Registers used:
 10790 ;;		wreg, status,2, status,0
 10791 ;; Tracked objects:
 10792 ;;		On entry : 0/0
 10793 ;;		On exit  : 0/0
 10794 ;;		Unchanged: 0/0
 10795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10797 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10798 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10799 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10800 ;;Total ram usage:        2 bytes
 10801 ;; Hardware stack levels used:    1
 10802 ;; This function calls:
 10803 ;;		Nothing
 10804 ;; This function is called by:
 10805 ;;		_I2C1_StatusCallback
 10806 ;; This function uses a non-reentrant model
 10807 ;;
 10808                           
 10809                           
 10810                           ;psect for function i1_PROTOCOL_SET
 10811  178D                     i1_PROTOCOL_SET:	
 10812                           
 10813                           ;incstack = 0
 10814                           ; Regs used in i1_PROTOCOL_SET: [wreg+status,2+status,0]
 10815                           ;i1PROTOCOL_SET@value_ stored from wreg
 10816  178D  00F1               	movwf	i1PROTOCOL_SET@value_
 10817                           
 10818                           ;protocol.c: 112: value = value_;
 10819  178E  0871               	movf	i1PROTOCOL_SET@value_,w
 10820  178F  00F0               	movwf	??i1_PROTOCOL_SET
 10821  1790  0870               	movf	??i1_PROTOCOL_SET,w
 10822  1791  0020               	movlb	0	; select bank0
 10823  1792  00D6               	movwf	_value
 10824  1793  0008               	return
 10825  1794                     __end_ofi1_PROTOCOL_SET:	
 10826                           
 10827                           	psect	text56
 10828  17A2                     __ptext56:	
 10829 ;; *************** function i1_PROTOCOL_SAV *****************
 10830 ;; Defined at:
 10831 ;;		line 107 in file "protocol.c"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;		None
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;		None
 10836 ;; Return value:  Size  Location     Type
 10837 ;;                  1    wreg      void 
 10838 ;; Registers used:
 10839 ;;		wreg, status,2, status,0, pclath, cstack
 10840 ;; Tracked objects:
 10841 ;;		On entry : 0/0
 10842 ;;		On exit  : 0/0
 10843 ;;		Unchanged: 0/0
 10844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10847 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;Total ram usage:        1 bytes
 10850 ;; Hardware stack levels used:    1
 10851 ;; Hardware stack levels required when called:    1
 10852 ;; This function calls:
 10853 ;;		i1_DATAEE_WriteByte
 10854 ;; This function is called by:
 10855 ;;		_I2C1_StatusCallback
 10856 ;; This function uses a non-reentrant model
 10857 ;;
 10858                           
 10859                           
 10860                           ;psect for function i1_PROTOCOL_SAV
 10861  17A2                     i1_PROTOCOL_SAV:	
 10862                           
 10863                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
 10864                           
 10865                           ;incstack = 0
 10866                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
 10867  17A2  0020               	movlb	0	; select bank0
 10868  17A3  0856               	movf	_value,w
 10869  17A4  00F3               	movwf	??i1_PROTOCOL_SAV
 10870  17A5  0873               	movf	??i1_PROTOCOL_SAV,w
 10871  17A6  00F0               	movwf	i1DATAEE_WriteByte@bData
 10872  17A7  3001               	movlw	1
 10873  17A8  3189  2150         	fcall	i1_DATAEE_WriteByte
 10874  17AA  0008               	return
 10875  17AB                     __end_ofi1_PROTOCOL_SAV:	
 10876                           
 10877                           	psect	text57
 10878  0950                     __ptext57:	
 10879 ;; *************** function i1_DATAEE_WriteByte *****************
 10880 ;; Defined at:
 10881 ;;		line 180 in file "mcc_generated_files/memory.c"
 10882 ;; Parameters:    Size  Location     Type
 10883 ;;  bAdd            1    wreg     unsigned char 
 10884 ;;  bData           1    0[COMMON] unsigned char 
 10885 ;; Auto vars:     Size  Location     Type
 10886 ;;  bAdd            1    1[COMMON] unsigned char 
 10887 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
 10888 ;; Return value:  Size  Location     Type
 10889 ;;                  1    wreg      void 
 10890 ;; Registers used:
 10891 ;;		wreg, status,2, status,0
 10892 ;; Tracked objects:
 10893 ;;		On entry : 0/0
 10894 ;;		On exit  : 0/0
 10895 ;;		Unchanged: 0/0
 10896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10897 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10898 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10899 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10900 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10901 ;;Total ram usage:        3 bytes
 10902 ;; Hardware stack levels used:    1
 10903 ;; This function calls:
 10904 ;;		Nothing
 10905 ;; This function is called by:
 10906 ;;		i1_PROTOCOL_SAV
 10907 ;; This function uses a non-reentrant model
 10908 ;;
 10909                           
 10910                           
 10911                           ;psect for function i1_DATAEE_WriteByte
 10912  0950                     i1_DATAEE_WriteByte:	
 10913                           
 10914                           ;incstack = 0
 10915                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
 10916                           ;i1DATAEE_WriteByte@bAdd stored from wreg
 10917  0950  00F1               	movwf	i1DATAEE_WriteByte@bAdd
 10918                           
 10919                           ;memory.c: 182: uint8_t GIEBitValue = 0;
 10920  0951  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
 10921                           
 10922                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
 10923  0952  0871               	movf	i1DATAEE_WriteByte@bAdd,w
 10924  0953  0023               	movlb	3	; select bank3
 10925  0954  0091               	movwf	17	;volatile
 10926                           
 10927                           ;memory.c: 185: EEDATL = bData;
 10928  0955  0870               	movf	i1DATAEE_WriteByte@bData,w
 10929  0956  0093               	movwf	19	;volatile
 10930                           
 10931                           ;memory.c: 186: EECON1bits.EEPGD = 0;
 10932  0957  1395               	bcf	21,7	;volsfr
 10933                           
 10934                           ;memory.c: 187: EECON1bits.CFGS = 0;
 10935  0958  1315               	bcf	21,6	;volsfr
 10936                           
 10937                           ;memory.c: 188: EECON1bits.WREN = 1;
 10938  0959  1515               	bsf	21,2	;volsfr
 10939                           
 10940                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
 10941  095A  3000               	movlw	0
 10942  095B  1B8B               	btfsc	11,7	;volatile
 10943  095C  3001               	movlw	1
 10944  095D  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
 10945                           
 10946                           ;memory.c: 191: INTCONbits.GIE = 0;
 10947  095E  138B               	bcf	11,7	;volatile
 10948                           
 10949                           ;memory.c: 192: EECON2 = 0x55;
 10950  095F  3055               	movlw	85
 10951  0960  0096               	movwf	22	;volsfr
 10952                           
 10953                           ;memory.c: 193: EECON2 = 0xAA;
 10954  0961  30AA               	movlw	170
 10955  0962  0096               	movwf	22	;volsfr
 10956                           
 10957                           ;memory.c: 194: EECON1bits.WR = 1;
 10958  0963  1495               	bsf	21,1	;volsfr
 10959  0964                     i1l480:	
 10960                           ;memory.c: 197: {
 10961                           
 10962                           ;memory.c: 196: while (EECON1bits.WR)
 10963                           
 10964  0964  1895               	btfsc	21,1	;volsfr
 10965  0965  2964               	goto	i1l480
 10966                           
 10967                           ;memory.c: 198: }
 10968                           ;memory.c: 200: EECON1bits.WREN = 0;
 10969  0966  1115               	bcf	21,2	;volsfr
 10970                           
 10971                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 10972  0967  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
 10973  0968  1C03               	skipc
 10974  0969  138B               	bcf	11,7	;volatile
 10975  096A  1803               	skipnc
 10976  096B  178B               	bsf	11,7	;volatile
 10977  096C  0008               	return
 10978  096D                     __end_ofi1_DATAEE_WriteByte:	
 10979                           
 10980                           	psect	text58
 10981  085E                     __ptext58:	
 10982 ;; *************** function i1_PROTOCOL_EXT *****************
 10983 ;; Defined at:
 10984 ;;		line 116 in file "protocol.c"
 10985 ;; Parameters:    Size  Location     Type
 10986 ;;  char_buf        1    wreg     PTR unsigned char 
 10987 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10988 ;; Auto vars:     Size  Location     Type
 10989 ;;  char_buf        1    5[COMMON] PTR unsigned char 
 10990 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10991 ;; Return value:  Size  Location     Type
 10992 ;;                  1    wreg      void 
 10993 ;; Registers used:
 10994 ;;		wreg, status,2, status,0, pclath, cstack
 10995 ;; Tracked objects:
 10996 ;;		On entry : 0/0
 10997 ;;		On exit  : 0/0
 10998 ;;		Unchanged: 0/0
 10999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11004 ;;Total ram usage:        2 bytes
 11005 ;; Hardware stack levels used:    1
 11006 ;; Hardware stack levels required when called:    2
 11007 ;; This function calls:
 11008 ;;		Absolute function
 11009 ;;		i1_extension_handler
 11010 ;; This function is called by:
 11011 ;;		_I2C1_StatusCallback
 11012 ;; This function uses a non-reentrant model
 11013 ;;
 11014                           
 11015                           
 11016                           ;psect for function i1_PROTOCOL_EXT
 11017  085E                     i1_PROTOCOL_EXT:	
 11018                           
 11019                           ;incstack = 0
 11020                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0+pclath+cstack]
 11021                           ;i1PROTOCOL_EXT@char_buf stored from wreg
 11022  085E  00F5               	movwf	i1PROTOCOL_EXT@char_buf
 11023                           
 11024                           ;protocol.c: 117: if (PROTOCOL_Extension_Handler) PROTOCOL_Extension_Handler(char_buf);
 11025  085F  0020               	movlb	0	; select bank0
 11026  0860  084C               	movf	_PROTOCOL_Extension_Handler,w
 11027  0861  044D               	iorwf	_PROTOCOL_Extension_Handler+1,w
 11028  0862  1903               	btfsc	3,2
 11029  0863  0008               	return
 11030  0864  0875               	movf	i1PROTOCOL_EXT@char_buf,w
 11031  0865  00F4               	movwf	??i1_PROTOCOL_EXT
 11032  0866  0874               	movf	??i1_PROTOCOL_EXT,w
 11033  0867  00F2               	movwf	i1extension_handler@buf
 11034  0868  084D               	movf	_PROTOCOL_Extension_Handler+1,w
 11035  0869  008A               	movwf	10
 11036  086A  084C               	movf	_PROTOCOL_Extension_Handler,w
 11037  086B  000A               	callw
 11038  086C  3188               	pagesel	$
 11039  086D  0008               	return
 11040  086E                     __end_ofi1_PROTOCOL_EXT:	
 11041                           
 11042                           	psect	text59
 11043  17E2                     __ptext59:	
 11044 ;; *************** function i1_extension_handler *****************
 11045 ;; Defined at:
 11046 ;;		line 113 in file "main.c"
 11047 ;; Parameters:    Size  Location     Type
 11048 ;;  buf             1    2[COMMON] PTR unsigned char 
 11049 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 11050 ;; Auto vars:     Size  Location     Type
 11051 ;;  extension_ha    1    0        unsigned char 
 11052 ;; Return value:  Size  Location     Type
 11053 ;;                  1    wreg      void 
 11054 ;; Registers used:
 11055 ;;		wreg, status,2, status,0, pclath, cstack
 11056 ;; Tracked objects:
 11057 ;;		On entry : 0/0
 11058 ;;		On exit  : 0/0
 11059 ;;		Unchanged: 0/0
 11060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11061 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11063 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11064 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11065 ;;Total ram usage:        2 bytes
 11066 ;; Hardware stack levels used:    1
 11067 ;; Hardware stack levels required when called:    1
 11068 ;; This function calls:
 11069 ;;		i1_PROTOCOL_Read_Lock
 11070 ;;		i1_PROTOCOL_Set_Lock
 11071 ;; This function is called by:
 11072 ;; This function uses a non-reentrant model
 11073 ;;
 11074                           
 11075                           
 11076                           ;psect for function i1_extension_handler
 11077  17E2                     i1_extension_handler:	
 11078  17E2                     i1l3086:	
 11079                           ;incstack = 0
 11080                           ; Regs used in i1_extension_handler: [wreg+status,2+status,0+pclath+cstack]
 11081                           
 11082                           
 11083                           ;main.c: 114: uint8_t value;
 11084                           ;main.c: 115: if (!PROTOCOL_Read_Lock()) {
 11085  17E2  3197  2745  3197   	fcall	i1_PROTOCOL_Read_Lock
 11086  17E5  3A00               	xorlw	0
 11087  17E6  1D03               	skipz
 11088  17E7  0008               	return
 11089                           
 11090                           ;main.c: 116: pbuf = buf;
 11091  17E8  0872               	movf	i1extension_handler@buf,w
 11092  17E9  00F3               	movwf	??i1_extension_handler
 11093  17EA  0873               	movf	??i1_extension_handler,w
 11094  17EB  0020               	movlb	0	; select bank0
 11095  17EC  00D9               	movwf	_pbuf
 11096                           
 11097                           ;main.c: 117: PROTOCOL_Set_Lock(1);
 11098  17ED  3001               	movlw	1
 11099  17EE  3197  2786         	fcall	i1_PROTOCOL_Set_Lock
 11100  17F0  0008               	return
 11101  17F1                     __end_ofi1_extension_handler:	
 11102                           
 11103                           	psect	text60
 11104  1786                     __ptext60:	
 11105 ;; *************** function i1_PROTOCOL_Set_Lock *****************
 11106 ;; Defined at:
 11107 ;;		line 120 in file "protocol.c"
 11108 ;; Parameters:    Size  Location     Type
 11109 ;;  lock            1    wreg     unsigned char 
 11110 ;; Auto vars:     Size  Location     Type
 11111 ;;  lock            1    1[COMMON] unsigned char 
 11112 ;; Return value:  Size  Location     Type
 11113 ;;                  1    wreg      void 
 11114 ;; Registers used:
 11115 ;;		wreg
 11116 ;; Tracked objects:
 11117 ;;		On entry : 0/0
 11118 ;;		On exit  : 0/0
 11119 ;;		Unchanged: 0/0
 11120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11122 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11123 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11125 ;;Total ram usage:        2 bytes
 11126 ;; Hardware stack levels used:    1
 11127 ;; This function calls:
 11128 ;;		Nothing
 11129 ;; This function is called by:
 11130 ;;		i1_extension_handler
 11131 ;; This function uses a non-reentrant model
 11132 ;;
 11133                           
 11134                           
 11135                           ;psect for function i1_PROTOCOL_Set_Lock
 11136  1786                     i1_PROTOCOL_Set_Lock:	
 11137                           
 11138                           ;incstack = 0
 11139                           ; Regs used in i1_PROTOCOL_Set_Lock: [wreg]
 11140                           ;i1PROTOCOL_Set_Lock@lock stored from wreg
 11141  1786  00F1               	movwf	i1PROTOCOL_Set_Lock@lock
 11142                           
 11143                           ;protocol.c: 121: locked = lock;
 11144  1787  0871               	movf	i1PROTOCOL_Set_Lock@lock,w
 11145  1788  00F0               	movwf	??i1_PROTOCOL_Set_Lock
 11146  1789  0870               	movf	??i1_PROTOCOL_Set_Lock,w
 11147  178A  0020               	movlb	0	; select bank0
 11148  178B  00D5               	movwf	_locked
 11149  178C  0008               	return
 11150  178D                     __end_ofi1_PROTOCOL_Set_Lock:	
 11151                           
 11152                           	psect	text61
 11153  1745                     __ptext61:	
 11154 ;; *************** function i1_PROTOCOL_Read_Lock *****************
 11155 ;; Defined at:
 11156 ;;		line 124 in file "protocol.c"
 11157 ;; Parameters:    Size  Location     Type
 11158 ;;		None
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;		None
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  1    wreg      unsigned char 
 11163 ;; Registers used:
 11164 ;;		wreg
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;Total ram usage:        0 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; This function calls:
 11177 ;;		Nothing
 11178 ;; This function is called by:
 11179 ;;		_I2C1_StatusCallback
 11180 ;;		i1_extension_handler
 11181 ;; This function uses a non-reentrant model
 11182 ;;
 11183                           
 11184                           
 11185                           ;psect for function i1_PROTOCOL_Read_Lock
 11186  1745                     i1_PROTOCOL_Read_Lock:	
 11187                           
 11188                           ;protocol.c: 125: return locked;
 11189                           
 11190                           ;incstack = 0
 11191                           ; Regs used in i1_PROTOCOL_Read_Lock: [wreg]
 11192  1745  0020               	movlb	0	; select bank0
 11193  1746  0855               	movf	_locked,w
 11194  1747  0008               	return
 11195  1748                     __end_ofi1_PROTOCOL_Read_Lock:	
 11196                           
 11197                           	psect	text62
 11198  17BD                     __ptext62:	
 11199 ;; *************** function _PROTOCOL_RST *****************
 11200 ;; Defined at:
 11201 ;;		line 279 in file "protocol.c"
 11202 ;; Parameters:    Size  Location     Type
 11203 ;;		None
 11204 ;; Auto vars:     Size  Location     Type
 11205 ;;		None
 11206 ;; Return value:  Size  Location     Type
 11207 ;;                  1    wreg      void 
 11208 ;; Registers used:
 11209 ;;		wreg, status,2, status,0
 11210 ;; Tracked objects:
 11211 ;;		On entry : 0/0
 11212 ;;		On exit  : 0/0
 11213 ;;		Unchanged: 0/0
 11214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11218 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;Total ram usage:        1 bytes
 11220 ;; Hardware stack levels used:    1
 11221 ;; This function calls:
 11222 ;;		Nothing
 11223 ;; This function is called by:
 11224 ;;		_I2C1_StatusCallback
 11225 ;; This function uses a non-reentrant model
 11226 ;;
 11227                           
 11228                           
 11229                           ;psect for function _PROTOCOL_RST
 11230  17BD                     _PROTOCOL_RST:	
 11231                           
 11232                           ;protocol.c: 280: if (readbuf.status != TLV_SET) {
 11233                           
 11234                           ;incstack = 0
 11235                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
 11236  17BD  0021               	movlb	1	; select bank1
 11237  17BE  084C               	movf	(_readbuf^(0+128)+3),w
 11238  17BF  1903               	btfsc	3,2
 11239  17C0  0008               	return
 11240                           
 11241                           ;protocol.c: 281: readbuf.buf_cnt = 0;
 11242  17C1  01CD               	clrf	(_readbuf^(0+128)+4)
 11243                           
 11244                           ;protocol.c: 282: readbuf.status = COMPLETE;
 11245  17C2  3003               	movlw	3
 11246  17C3  00F0               	movwf	??_PROTOCOL_RST
 11247  17C4  0870               	movf	??_PROTOCOL_RST,w
 11248  17C5  00CC               	movwf	(_readbuf^(0+128)+3)
 11249  17C6  0008               	return
 11250  17C7                     __end_of_PROTOCOL_RST:	
 11251                           
 11252                           	psect	text63
 11253  175B                     __ptext63:	
 11254 ;; *************** function _PROTOCOL_INV *****************
 11255 ;; Defined at:
 11256 ;;		line 103 in file "protocol.c"
 11257 ;; Parameters:    Size  Location     Type
 11258 ;;		None
 11259 ;; Auto vars:     Size  Location     Type
 11260 ;;		None
 11261 ;; Return value:  Size  Location     Type
 11262 ;;                  1    wreg      void 
 11263 ;; Registers used:
 11264 ;;		None
 11265 ;; Tracked objects:
 11266 ;;		On entry : 0/0
 11267 ;;		On exit  : 0/0
 11268 ;;		Unchanged: 0/0
 11269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11274 ;;Total ram usage:        0 bytes
 11275 ;; Hardware stack levels used:    1
 11276 ;; This function calls:
 11277 ;;		Nothing
 11278 ;; This function is called by:
 11279 ;;		_I2C1_StatusCallback
 11280 ;; This function uses a non-reentrant model
 11281 ;;
 11282                           
 11283                           
 11284                           ;psect for function _PROTOCOL_INV
 11285  175B                     _PROTOCOL_INV:	
 11286                           
 11287                           ;protocol.c: 104: invoked = 1;
 11288                           
 11289                           ;incstack = 0
 11290                           ; Regs used in _PROTOCOL_INV: []
 11291  175B  0020               	movlb	0	; select bank0
 11292  175C  01D3               	clrf	_invoked
 11293  175D  0AD3               	incf	_invoked,f
 11294  175E  0008               	return
 11295  175F                     __end_of_PROTOCOL_INV:	
 11296                           
 11297                           	psect	text64
 11298  1742                     __ptext64:	
 11299 ;; *************** function _PROTOCOL_I2C_WHO *****************
 11300 ;; Defined at:
 11301 ;;		line 199 in file "protocol.c"
 11302 ;; Parameters:    Size  Location     Type
 11303 ;;		None
 11304 ;; Auto vars:     Size  Location     Type
 11305 ;;		None
 11306 ;; Return value:  Size  Location     Type
 11307 ;;                  1    wreg      unsigned char 
 11308 ;; Registers used:
 11309 ;;		wreg
 11310 ;; Tracked objects:
 11311 ;;		On entry : 0/0
 11312 ;;		On exit  : 0/0
 11313 ;;		Unchanged: 0/0
 11314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11319 ;;Total ram usage:        0 bytes
 11320 ;; Hardware stack levels used:    1
 11321 ;; This function calls:
 11322 ;;		Nothing
 11323 ;; This function is called by:
 11324 ;;		_I2C1_StatusCallback
 11325 ;; This function uses a non-reentrant model
 11326 ;;
 11327                           
 11328                           
 11329                           ;psect for function _PROTOCOL_I2C_WHO
 11330  1742                     _PROTOCOL_I2C_WHO:	
 11331                           
 11332                           ;protocol.c: 200: return slave_address;
 11333                           
 11334                           ;incstack = 0
 11335                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
 11336  1742  0020               	movlb	0	; select bank0
 11337  1743  0858               	movf	_slave_address,w
 11338  1744  0008               	return
 11339  1745                     __end_of_PROTOCOL_I2C_WHO:	
 11340                           
 11341                           	psect	text65
 11342  0B39                     __ptext65:	
 11343 ;; *************** function _PROTOCOL_I2C_SEN *****************
 11344 ;; Defined at:
 11345 ;;		line 398 in file "protocol.c"
 11346 ;; Parameters:    Size  Location     Type
 11347 ;;		None
 11348 ;; Auto vars:     Size  Location     Type
 11349 ;;  pdata           1    1[COMMON] PTR unsigned char 
 11350 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
 11351 ;;		 -> readbuf.type(1), readbuf(5), 
 11352 ;; Return value:  Size  Location     Type
 11353 ;;                  1    wreg      PTR unsigned char 
 11354 ;; Registers used:
 11355 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11356 ;; Tracked objects:
 11357 ;;		On entry : 0/0
 11358 ;;		On exit  : 0/0
 11359 ;;		Unchanged: 0/0
 11360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11362 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11363 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11364 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11365 ;;Total ram usage:        2 bytes
 11366 ;; Hardware stack levels used:    1
 11367 ;; This function calls:
 11368 ;;		Nothing
 11369 ;; This function is called by:
 11370 ;;		_I2C1_StatusCallback
 11371 ;; This function uses a non-reentrant model
 11372 ;;
 11373                           
 11374                           
 11375                           ;psect for function _PROTOCOL_I2C_SEN
 11376  0B39                     _PROTOCOL_I2C_SEN:	
 11377                           
 11378                           ;protocol.c: 399: uint8_t *pdata;
 11379                           ;protocol.c: 400: switch(readbuf.status) {
 11380                           
 11381                           ;incstack = 0
 11382                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
 11383  0B39  2B64               	goto	i1l3128
 11384  0B3A                     i1l3108:	
 11385                           ;protocol.c: 401: case TLV_SET:
 11386                           
 11387                           
 11388                           ;protocol.c: 402: pdata = &readbuf.type;
 11389  0B3A  30C9               	movlw	(low (_readbuf| 0))& (0+255)
 11390  0B3B  00F0               	movwf	??_PROTOCOL_I2C_SEN
 11391  0B3C  0870               	movf	??_PROTOCOL_I2C_SEN,w
 11392  0B3D  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 11393                           
 11394                           ;protocol.c: 403: readbuf.status = TYPE_SENT;
 11395  0B3E  0021               	movlb	1	; select bank1
 11396  0B3F  01CC               	clrf	(_readbuf^(0+128)+3)
 11397  0B40  0ACC               	incf	(_readbuf^(0+128)+3),f
 11398                           
 11399                           ;protocol.c: 404: break;
 11400  0B41  2B73               	goto	i1l3130
 11401  0B42                     i1l3112:	
 11402                           ;protocol.c: 405: case TYPE_SENT:
 11403                           
 11404                           
 11405                           ;protocol.c: 406: pdata = &readbuf.length;
 11406  0B42  30CA               	movlw	(low ((_readbuf| 0+1)))& (0+255)
 11407  0B43  00F0               	movwf	??_PROTOCOL_I2C_SEN
 11408  0B44  0870               	movf	??_PROTOCOL_I2C_SEN,w
 11409  0B45  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 11410                           
 11411                           ;protocol.c: 407: readbuf.status = LENGTH_SENT;
 11412  0B46  3002               	movlw	2
 11413  0B47  2B5B               	goto	L5
 11414  0B48                     i1l3114:	
 11415                           ;protocol.c: 409: case LENGTH_SENT:
 11416                           
 11417                           ;protocol.c: 408: break;
 11418                           
 11419                           
 11420                           ;protocol.c: 410: if (readbuf.buf_cnt < readbuf.length) {
 11421  0B48  084A               	movf	(_readbuf^(0+128)+1),w
 11422  0B49  024D               	subwf	(_readbuf^(0+128)+4),w
 11423  0B4A  1803               	skipnc
 11424  0B4B  2B55               	goto	i1l3118
 11425                           
 11426                           ;protocol.c: 411: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
 11427  0B4C  084B               	movf	(low ((_readbuf| 0+2)))^(0+128),w
 11428  0B4D  074D               	addwf	(_readbuf^(0+128)+4),w
 11429  0B4E  00F0               	movwf	??_PROTOCOL_I2C_SEN
 11430  0B4F  0870               	movf	??_PROTOCOL_I2C_SEN,w
 11431  0B50  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 11432  0B51  3001               	movlw	1
 11433  0B52  00F0               	movwf	??_PROTOCOL_I2C_SEN
 11434  0B53  0870               	movf	??_PROTOCOL_I2C_SEN,w
 11435  0B54  07CD               	addwf	(_readbuf^(0+128)+4),f
 11436  0B55                     i1l3118:	
 11437                           
 11438                           ;protocol.c: 412: }
 11439                           ;protocol.c: 413: if (readbuf.buf_cnt == readbuf.length) {
 11440  0B55  084D               	movf	(_readbuf^(0+128)+4),w
 11441  0B56  064A               	xorwf	(_readbuf^(0+128)+1),w
 11442  0B57  1D03               	skipz
 11443  0B58  2B73               	goto	i1l3130
 11444                           
 11445                           ;protocol.c: 414: readbuf.buf_cnt = 0;
 11446  0B59  01CD               	clrf	(_readbuf^(0+128)+4)
 11447                           
 11448                           ;protocol.c: 415: readbuf.status = COMPLETE;
 11449  0B5A  3003               	movlw	3
 11450  0B5B                     L5:	
 11451  0B5B  00F0               	movwf	??_PROTOCOL_I2C_SEN
 11452  0B5C  0870               	movf	??_PROTOCOL_I2C_SEN,w
 11453  0B5D  00CC               	movwf	(_readbuf^(0+128)+3)
 11454                           
 11455                           ;protocol.c: 416: }
 11456                           ;protocol.c: 417: break;
 11457  0B5E  2B73               	goto	i1l3130
 11458  0B5F                     i1l3124:	
 11459                           ;protocol.c: 418: case COMPLETE:
 11460                           
 11461                           
 11462                           ;protocol.c: 419: pdata = &type_no_data;
 11463  0B5F  306F               	movlw	(low (_type_no_data| 0))& (0+255)
 11464  0B60  00F0               	movwf	??_PROTOCOL_I2C_SEN
 11465  0B61  0870               	movf	??_PROTOCOL_I2C_SEN,w
 11466  0B62  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 11467                           
 11468                           ;protocol.c: 421: }
 11469                           
 11470                           ;protocol.c: 420: break;
 11471  0B63  2B73               	goto	i1l3130
 11472  0B64                     i1l3128:	
 11473  0B64  0021               	movlb	1	; select bank1
 11474  0B65  084C               	movf	(_readbuf^(0+128)+3),w
 11475                           
 11476                           ; Switch size 1, requested type "space"
 11477                           ; Number of cases is 4, Range of values is 0 to 3
 11478                           ; switch strategies available:
 11479                           ; Name         Instructions Cycles
 11480                           ; simple_byte           13     7 (average)
 11481                           ; direct_byte           14     6 (fixed)
 11482                           ; jumptable            260     6 (fixed)
 11483                           ;	Chosen strategy is simple_byte
 11484  0B66  3A00               	xorlw	0	; case 0
 11485  0B67  1903               	skipnz
 11486  0B68  2B3A               	goto	i1l3108
 11487  0B69  3A01               	xorlw	1	; case 1
 11488  0B6A  1903               	skipnz
 11489  0B6B  2B42               	goto	i1l3112
 11490  0B6C  3A03               	xorlw	3	; case 2
 11491  0B6D  1903               	skipnz
 11492  0B6E  2B48               	goto	i1l3114
 11493  0B6F  3A01               	xorlw	1	; case 3
 11494  0B70  1903               	skipnz
 11495  0B71  2B5F               	goto	i1l3124
 11496  0B72  2B73               	goto	i1l3130
 11497  0B73                     i1l3130:	
 11498                           
 11499                           ;protocol.c: 422: return pdata;
 11500  0B73  0871               	movf	PROTOCOL_I2C_SEN@pdata,w
 11501  0B74  0008               	return
 11502  0B75                     __end_of_PROTOCOL_I2C_SEN:	
 11503                           
 11504                           	psect	text66
 11505  173F                     __ptext66:	
 11506 ;; *************** function _PROTOCOL_I2C_GET *****************
 11507 ;; Defined at:
 11508 ;;		line 203 in file "protocol.c"
 11509 ;; Parameters:    Size  Location     Type
 11510 ;;		None
 11511 ;; Auto vars:     Size  Location     Type
 11512 ;;		None
 11513 ;; Return value:  Size  Location     Type
 11514 ;;                  1    wreg      unsigned char 
 11515 ;; Registers used:
 11516 ;;		wreg
 11517 ;; Tracked objects:
 11518 ;;		On entry : 0/0
 11519 ;;		On exit  : 0/0
 11520 ;;		Unchanged: 0/0
 11521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11526 ;;Total ram usage:        0 bytes
 11527 ;; Hardware stack levels used:    1
 11528 ;; This function calls:
 11529 ;;		Nothing
 11530 ;; This function is called by:
 11531 ;;		_I2C1_StatusCallback
 11532 ;; This function uses a non-reentrant model
 11533 ;;
 11534                           
 11535                           
 11536                           ;psect for function _PROTOCOL_I2C_GET
 11537  173F                     _PROTOCOL_I2C_GET:	
 11538                           
 11539                           ;protocol.c: 204: return value;
 11540                           
 11541                           ;incstack = 0
 11542                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
 11543  173F  0020               	movlb	0	; select bank0
 11544  1740  0856               	movf	_value,w
 11545  1741  0008               	return
 11546  1742                     __end_of_PROTOCOL_I2C_GET:	
 11547                           
 11548                           	psect	text67
 11549  1757                     __ptext67:	
 11550 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
 11551 ;; Defined at:
 11552 ;;		line 195 in file "protocol.c"
 11553 ;; Parameters:    Size  Location     Type
 11554 ;;		None
 11555 ;; Auto vars:     Size  Location     Type
 11556 ;;		None
 11557 ;; Return value:  Size  Location     Type
 11558 ;;                  1    wreg      void 
 11559 ;; Registers used:
 11560 ;;		None
 11561 ;; Tracked objects:
 11562 ;;		On entry : 0/0
 11563 ;;		On exit  : 0/0
 11564 ;;		Unchanged: 0/0
 11565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11570 ;;Total ram usage:        0 bytes
 11571 ;; Hardware stack levels used:    1
 11572 ;; This function calls:
 11573 ;;		Nothing
 11574 ;; This function is called by:
 11575 ;;		_I2C1_StatusCallback
 11576 ;; This function uses a non-reentrant model
 11577 ;;
 11578                           
 11579                           
 11580                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
 11581  1757                     _PROTOCOL_Backplane_Slave_Enabled:	
 11582                           
 11583                           ;protocol.c: 196: backplane_slave_enabled = 1;
 11584                           
 11585                           ;incstack = 0
 11586                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
 11587  1757  0020               	movlb	0	; select bank0
 11588  1758  01CE               	clrf	_backplane_slave_enabled
 11589  1759  0ACE               	incf	_backplane_slave_enabled,f
 11590  175A  0008               	return
 11591  175B                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
 11592                           
 11593                           	psect	text68
 11594  0933                     __ptext68:	
 11595 ;; *************** function _EUSART_Transmit_ISR *****************
 11596 ;; Defined at:
 11597 ;;		line 165 in file "mcc_generated_files/eusart.c"
 11598 ;; Parameters:    Size  Location     Type
 11599 ;;		None
 11600 ;; Auto vars:     Size  Location     Type
 11601 ;;		None
 11602 ;; Return value:  Size  Location     Type
 11603 ;;                  1    wreg      void 
 11604 ;; Registers used:
 11605 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11606 ;; Tracked objects:
 11607 ;;		On entry : 0/0
 11608 ;;		On exit  : 0/0
 11609 ;;		Unchanged: 0/0
 11610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11613 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11614 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11615 ;;Total ram usage:        1 bytes
 11616 ;; Hardware stack levels used:    1
 11617 ;; This function calls:
 11618 ;;		Nothing
 11619 ;; This function is called by:
 11620 ;;		_INTERRUPT_InterruptManager
 11621 ;; This function uses a non-reentrant model
 11622 ;;
 11623                           
 11624                           
 11625                           ;psect for function _EUSART_Transmit_ISR
 11626  0933                     _EUSART_Transmit_ISR:	
 11627                           
 11628                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 11629                           
 11630                           ;incstack = 0
 11631                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 11632  0933  3008               	movlw	8
 11633  0934  0020               	movlb	0	; select bank0
 11634  0935  025E               	subwf	_eusartTxBufferRemaining,w	;volatile
 11635  0936  1803               	skipnc
 11636  0937  294D               	goto	i1l395
 11637                           
 11638                           ;eusart.c: 170: {
 11639                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
 11640  0938  085F               	movf	_eusartTxTail,w
 11641  0939  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 11642  093A  0086               	movwf	6
 11643  093B  0187               	clrf	7
 11644  093C  0801               	movf	1,w
 11645  093D  0023               	movlb	3	; select bank3
 11646  093E  009A               	movwf	26	;volatile
 11647  093F  3001               	movlw	1
 11648  0940  00F0               	movwf	??_EUSART_Transmit_ISR
 11649  0941  0870               	movf	??_EUSART_Transmit_ISR,w
 11650  0942  0020               	movlb	0	; select bank0
 11651  0943  07DF               	addwf	_eusartTxTail,f	;volatile
 11652                           
 11653                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 11654  0944  3008               	movlw	8
 11655  0945  025F               	subwf	_eusartTxTail,w	;volatile
 11656  0946  1803               	btfsc	3,0
 11657                           
 11658                           ;eusart.c: 173: {
 11659                           ;eusart.c: 174: eusartTxTail = 0;
 11660  0947  01DF               	clrf	_eusartTxTail	;volatile
 11661                           
 11662                           ;eusart.c: 175: }
 11663                           ;eusart.c: 176: eusartTxBufferRemaining++;
 11664  0948  3001               	movlw	1
 11665  0949  00F0               	movwf	??_EUSART_Transmit_ISR
 11666  094A  0870               	movf	??_EUSART_Transmit_ISR,w
 11667  094B  07DE               	addwf	_eusartTxBufferRemaining,f	;volatile
 11668                           
 11669                           ;eusart.c: 177: }
 11670  094C  0008               	return
 11671  094D                     i1l395:	
 11672                           
 11673                           ;eusart.c: 178: else
 11674                           ;eusart.c: 179: {
 11675                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 11676  094D  0021               	movlb	1	; select bank1
 11677  094E  1211               	bcf	17,4	;volatile
 11678  094F  0008               	return
 11679  0950                     __end_of_EUSART_Transmit_ISR:	
 11680                           
 11681                           	psect	text69
 11682  08FC                     __ptext69:	
 11683 ;; *************** function _EUSART_Receive_ISR *****************
 11684 ;; Defined at:
 11685 ;;		line 184 in file "mcc_generated_files/eusart.c"
 11686 ;; Parameters:    Size  Location     Type
 11687 ;;		None
 11688 ;; Auto vars:     Size  Location     Type
 11689 ;;		None
 11690 ;; Return value:  Size  Location     Type
 11691 ;;                  1    wreg      void 
 11692 ;; Registers used:
 11693 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11694 ;; Tracked objects:
 11695 ;;		On entry : 0/0
 11696 ;;		On exit  : 0/0
 11697 ;;		Unchanged: 0/0
 11698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11701 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11702 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11703 ;;Total ram usage:        1 bytes
 11704 ;; Hardware stack levels used:    1
 11705 ;; This function calls:
 11706 ;;		Nothing
 11707 ;; This function is called by:
 11708 ;;		_INTERRUPT_InterruptManager
 11709 ;; This function uses a non-reentrant model
 11710 ;;
 11711                           
 11712                           
 11713                           ;psect for function _EUSART_Receive_ISR
 11714  08FC                     _EUSART_Receive_ISR:	
 11715                           
 11716                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
 11717                           
 11718                           ;incstack = 0
 11719                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 11720  08FC  0023               	movlb	3	; select bank3
 11721  08FD  1C9D               	btfss	29,1	;volatile
 11722  08FE  2901               	goto	i1l3998
 11723                           
 11724                           ;eusart.c: 188: {
 11725                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 11726  08FF  121D               	bcf	29,4	;volatile
 11727                           
 11728                           ;eusart.c: 192: RCSTAbits.CREN = 1;
 11729  0900  161D               	bsf	29,4	;volatile
 11730  0901                     i1l3998:	
 11731                           
 11732                           ;eusart.c: 193: }
 11733                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
 11734  0901  0819               	movf	25,w	;volatile
 11735  0902  00F0               	movwf	??_EUSART_Receive_ISR
 11736  0903  0020               	movlb	0	; select bank0
 11737  0904  085D               	movf	_eusartRxHead,w
 11738  0905  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 11739  0906  0086               	movwf	6
 11740  0907  0187               	clrf	7
 11741  0908  0870               	movf	??_EUSART_Receive_ISR,w
 11742  0909  0081               	movwf	1
 11743  090A  3001               	movlw	1
 11744  090B  00F0               	movwf	??_EUSART_Receive_ISR
 11745  090C  0870               	movf	??_EUSART_Receive_ISR,w
 11746  090D  07DD               	addwf	_eusartRxHead,f	;volatile
 11747                           
 11748                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 11749  090E  3008               	movlw	8
 11750  090F  025D               	subwf	_eusartRxHead,w	;volatile
 11751  0910  1803               	btfsc	3,0
 11752                           
 11753                           ;eusart.c: 198: {
 11754                           ;eusart.c: 199: eusartRxHead = 0;
 11755  0911  01DD               	clrf	_eusartRxHead	;volatile
 11756                           
 11757                           ;eusart.c: 200: }
 11758                           ;eusart.c: 201: eusartRxCount++;
 11759  0912  3001               	movlw	1
 11760  0913  00F0               	movwf	??_EUSART_Receive_ISR
 11761  0914  0870               	movf	??_EUSART_Receive_ISR,w
 11762  0915  07DB               	addwf	_eusartRxCount,f	;volatile
 11763  0916  0008               	return
 11764  0917                     __end_of_EUSART_Receive_ISR:	
 11765  007E                     btemp	set	126	;btemp
 11766  007E                     int$flags	set	126
 11767  007E                     wtemp0	set	126


Data Sizes:
    Strings     251
    Constant    10
    Data        4
    BSS         201
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     39      80
    BANK1            80      0      74
    BANK2            80      0      48
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    i2c2_tr_queue.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(COMMON[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), NULL(NULL[0]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_30(CODE[4]), STR_29(CODE[4]), STR_27(CODE[4]), STR_26(CODE[4]), 
		 -> STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[4]), STR_19(CODE[4]), 
		 -> STR_15(CODE[4]), STR_14(CODE[3]), STR_13(CODE[4]), STR_12(CODE[4]), 
		 -> STR_11(CODE[4]), STR_10(CODE[4]), STR_9(CODE[4]), STR_8(CODE[4]), 
		 -> STR_7(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), NULL(NULL[0]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_Set_Extension_Handler@extension_handler	PTR void  size(2) Largest target is 1
		 -> extension_handler(), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), extension_handler(), 

    PROTOCOL_Set_Func@loop_func	PTR void  size(2) Largest target is 1
		 -> loop_func(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), loop_func(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_16(CODE[17]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_16(CODE[17]), 

    S1076$pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    readbuf.pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_25(CODE[4]), buf(BANK2[48]), STR_17(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_16(CODE[17]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_63(CODE[10]), STR_62(CODE[9]), STR_61(CODE[10]), STR_60(CODE[9]), 
		 -> STR_59(CODE[4]), STR_58(CODE[4]), STR_57(CODE[4]), STR_56(CODE[4]), 
		 -> STR_55(CODE[4]), STR_54(CODE[4]), STR_53(CODE[4]), STR_52(CODE[4]), 
		 -> STR_51(CODE[14]), STR_50(CODE[9]), STR_49(CODE[10]), STR_48(CODE[9]), 
		 -> STR_47(CODE[10]), STR_46(CODE[9]), STR_45(CODE[7]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[9]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[10]), STR_38(CODE[4]), STR_37(CODE[4]), STR_36(CODE[8]), 
		 -> STR_35(CODE[4]), STR_34(CODE[4]), STR_33(CODE[9]), STR_32(CODE[6]), 
		 -> STR_31(CODE[10]), STR_28(CODE[10]), STR_24(CODE[10]), STR_20(CODE[10]), 
		 -> STR_18(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    extension_handler@buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    pbuf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), NULL(NULL[0]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(COMMON[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(COMMON[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    F3084.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    I2C2_MasterWrite@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    I2C2_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    F3079.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), I2C2_ISR@i2c_address(BANK0[2]), 
		 -> NULL(NULL[0]), 

    S264$pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(COMMON[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(COMMON[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    S276$pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(COMMON[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    p_i2c2_current.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(COMMON[1]), i2c2_write_no_data@status(COMMON[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    S276$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), NULL(NULL[0]), 

    S287$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    S287$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), 

    I2C1_StatusCallback@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C2_ISR->_I2C2_Stop
    _I2C1_ISR->_I2C1_StatusCallback
    _I2C1_StatusCallback->i1_PROTOCOL_EXT
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte
    i1_PROTOCOL_EXT->i1_extension_handler
    i1_extension_handler->i1_PROTOCOL_Set_Lock

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _lcd_test->_i2c2_write
    _PROTOCOL_Loop->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _loop_func->_lcd_string
    _loop_func->_lcd_string_2lines
    _lcd_string_2lines->_i2c2_write
    _lcd_string->_i2c2_write
    _lcd_init->_i2c2_write
    _lcd_contrast->_i2c2_write
    _lcd_clear->_i2c2_write
    _i2c2_write->_I2C2_MasterWrite
    _I2C2_MasterWrite->_I2C2_MasterWriteTRBBuild
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_EXT->_extension_handler
    _extension_handler->_PROTOCOL_Set_Lock
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   91743
                                             38 BANK0      1     1      0
                  _EUSART_Initialize
                    _I2C1_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
     _PROTOCOL_Set_Extension_Handler
                  _PROTOCOL_Set_Func
                    _TMR0_Initialize
                     _WDT_Initialize
                           _lcd_init
                           _lcd_test
 ---------------------------------------------------------------------------------
 (1) _lcd_test                                             2     2      0    9321
                                             24 BANK0      2     2      0
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Func                                    2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Extension_Handler                       2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   72391
                                             34 BANK0      4     4      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                          _loop_func *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    20      4    4186
                                             14 BANK0     20    16      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      66
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _loop_func                                            3     3      0   61645
                                             28 BANK0      3     3      0
                 _PROTOCOL_Read_Lock
                  _PROTOCOL_Set_Lock
                               _atoi
                         _i2c2_write
                          _lcd_clear
                       _lcd_contrast
                           _lcd_init
                         _lcd_string
                  _lcd_string_2lines
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    4550
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (3) _lcd_string_2lines                                    4     4      0    9389
                                             24 BANK0      4     4      0
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (3) _lcd_string                                           4     4      0    9367
                                             24 BANK0      4     4      0
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0    9321
                                             24 BANK0      2     2      0
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (3) _lcd_contrast                                         3     3      0    9365
                                             24 BANK0      3     3      0
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (3) _lcd_clear                                            0     0      0    9321
                         _i2c2_write
 ---------------------------------------------------------------------------------
 (2) _i2c2_write                                          10     6      4    9321
                                             14 BANK0     10     6      4
                   _I2C2_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _I2C2_MasterWrite                                     7     3      4    1440
                                              7 BANK0      7     3      4
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterWriteTRBBuild                             7     3      4     354
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterTRBInsert                                 4     2      2     388
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 8     6      2     920
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     474
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     240
                                              3 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     196
                                              3 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     196
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         2     2      0     283
                                              4 BANK0      2     2      0
                   Absolute function *
                  _extension_handler *
 ---------------------------------------------------------------------------------
 (3) _extension_handler                                    3     2      1      87
                                              2 BANK0      2     1      1
                 _PROTOCOL_Read_Lock
                  _PROTOCOL_Set_Lock
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_Set_Lock                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_Read_Lock                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                  9     2      7     538
                                              1 BANK0      9     2      7
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C2_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C1_Initialize                                      2     2      0       0
                                              0 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0     629
                                             11 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _I2C1_ISR
               _I2C2_BusCollisionISR
                           _I2C2_ISR
 ---------------------------------------------------------------------------------
 (8) _I2C2_ISR                                             4     4      0      22
                                              2 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (9) _I2C2_Stop                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _I2C2_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _I2C2_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C1_ISR                                             2     2      0     607
                                              9 COMMON     2     2      0
                _I2C1_StatusCallback
 ---------------------------------------------------------------------------------
 (9) _I2C1_StatusCallback                                  3     3      0     437
                                              6 COMMON     3     3      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                     i1_PROTOCOL_EXT
               i1_PROTOCOL_Read_Lock
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SET                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (11) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_EXT                                      2     2      0     140
                                              4 COMMON     2     2      0
                   Absolute function *
                i1_extension_handler *
 ---------------------------------------------------------------------------------
 (11) i1_extension_handler                                 3     2      1      70
                                              2 COMMON     2     1      1
               i1_PROTOCOL_Read_Lock
                i1_PROTOCOL_Set_Lock
 ---------------------------------------------------------------------------------
 (12) i1_PROTOCOL_Set_Lock                                 2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_Read_Lock                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_SEN                                    2     2      0      26
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Initialize
   _I2C1_Initialize
     _PROTOCOL_Read_Device_Address
   _I2C2_Initialize
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
       Absolute function(Fake) *
       _extension_handler *
         _PROTOCOL_Read_Lock
         _PROTOCOL_Set_Lock
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _loop_func *
       _PROTOCOL_Read_Lock
       _PROTOCOL_Set_Lock
       _atoi
         ___wmul
         _isdigit
       _i2c2_write
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
       _lcd_clear
         _i2c2_write
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
       _lcd_contrast
         _i2c2_write
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
       _lcd_init
         _i2c2_write
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
       _lcd_string
         _i2c2_write
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
       _lcd_string_2lines
         _i2c2_write
           _I2C2_MasterWrite
             _I2C2_MasterTRBInsert
             _I2C2_MasterWriteTRBBuild
       _strncmp
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
     _strncmp *
   _PROTOCOL_Set_Extension_Handler
   _PROTOCOL_Set_Func
   _TMR0_Initialize
   _WDT_Initialize
   _lcd_init
     _i2c2_write
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild
   _lcd_test
     _i2c2_write
       _I2C2_MasterWrite
         _I2C2_MasterTRBInsert
         _I2C2_MasterWriteTRBBuild

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_ISR
     _I2C1_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       i1_PROTOCOL_EXT
         Absolute function(Fake) *
         i1_extension_handler *
           i1_PROTOCOL_Read_Lock
           i1_PROTOCOL_Set_Lock
       i1_PROTOCOL_Read_Lock
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     27      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4A       7       92.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      30       9       60.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     108      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     108      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Sep 20 08:35:25 2017

                                              _i 00B8                                                _j 00B7  
                                              pc 0002                           __end_ofi1_PROTOCOL_EXT 086E  
                         __end_ofi1_PROTOCOL_SAV 17AB                           __end_ofi1_PROTOCOL_SET 1794  
                         __end_ofi1_PROTOCOL_STA 1763                           __end_ofi1_PROTOCOL_STP 174B  
                     __size_of_lcd_string_2lines 0045                  __end_of_TMR0_HasOverflowOccured 176B  
                                    __CFG_CP$OFF 0000                            ?_I2C2_MasterTRBInsert 0020  
                            ___wmul@multiplicand 0022                                  _timer0ReloadVal 005A  
                                    __CFG_LVP$ON 0000                                              l383 0A1B  
                                            l480 0A04                                              l636 02B1  
                                            l812 0460                                              l671 03D4  
                                            l664 035E                                              l648 037E  
                                            l688 045F                                     __CFG_CPD$OFF 0000  
                                            _buf 0120                                              _cnt 0057  
         __end_of_PROTOCOL_Set_Extension_Handler 1780          __size_of_PROTOCOL_Set_Extension_Handler 0006  
                 _PROTOCOL_Set_Extension_Handler 177A                                     __CFG_BORV$LO 0000  
                                            wreg 0009                                     __CFG_IESO$ON 0000  
                                   ?_EUSART_Read 0070                                 __end_of_I2C1_ISR 0A7F  
                               __end_of_I2C2_ISR 0727                                             l1008 0A55  
                                           l1129 0920                                             l3012 0A10  
                                           l3032 0A4B                                             l3026 0A2F  
                                           l3212 0C7F                                             l3300 0B19  
                                           l3054 091A                                             l3214 0C44  
                                           l3310 0B34                                             l3048 085C  
                                           l3240 0B93                                             l3250 0BB4  
                                           l3306 0B2B                                             l3322 0AAE  
                                           l3228 08A3                                             l3260 0D35  
                                           l3244 0BAB                                             l3324 0ABA  
                                           l3332 0ACF                                     _tmr_overflow 0050  
                                           l3256 0D30                                             l3248 0B75  
                                           l3328 0AC6                                             l3600 02AC  
                                           l3274 0D55                                             l3258 0D28  
                                           l3522 00CD                                             l3284 0D92  
                                           l3276 0D59                                             l3268 0D4D  
                                           l3532 0119                                             l3516 009D  
                                           l3700 03FD                                             l3620 02FB  
                                           l3612 02CC                                             l3278 0D82  
                                           l3198 0AD9                                             l3606 02B6  
                                           l3472 098D                                             l3552 0184  
                                           l3544 015B                                             l3536 0132  
                                           l3528 0100                                             l3712 041D  
                                           l3632 0311                                             l3608 02BF  
                                           l5320 0488                                             l3570 01F6  
                                           l3298 0B0D                                             l3722 042A  
                                           l3706 040C                                             l3650 0355  
                                           l3642 032E                                             l3634 031F  
                                           l5330 049D                                             l3580 0240  
                                           l3564 01D0                                             l3708 0410  
                                           l3716 0425                                             l3644 033D  
                                           l3628 030F                                             l3724 0290  
                                           l3558 01AA                                             l3590 0285  
                                           l3638 032C                                             l5350 04D6  
                                           l5326 0493                                             l5318 0487  
                                           l3576 021C                                             l3672 03A3  
                                           l3648 034A                                             l3656 0360  
                                           l3586 026D                                             l5362 052D  
                                           l5354 04FB                                             l3692 03F0  
                                           l3684 03C8                                             l3668 0398  
                                           l5372 0571                                             l2982 0C27  
                                           l3694 03F3                                             l3678 03A9  
                                           l5382 05B8                                             l5358 0514  
                                           l2992 0C3A                                             l5376 0595  
                                           l5368 0552                                             l2986 0C2E  
                                           l2988 0C33                                             l5388 05E3  
                                           l2998 0AA0                                             STR_1 07FD  
                                           STR_2 07F5                                             STR_3 081D  
                                           STR_4 0811                                             STR_5 0815  
                                           STR_6 0825                                             STR_7 080D  
                                           STR_8 0801                                             STR_9 0819  
                                           u2125 0AB1                                             _LATA 010C  
                                           _LATB 010D                                             u2055 0B10  
                                           _LATC 010E                                             u2145 0AC0  
                                           u2075 0B1A                                             u2155 0AC7  
                                           u2085 0B24                                             u2095 0B2C  
                                           u1815 0921                                             u2535 03BE  
                                           u1825 0926                                             u2475 0325  
                                           u5107 0FAC                                             u5117 0FC0  
                                           u5037 0F23                                             u1935 0CB2  
                                           u5207 01CC                                             u2575 03E3  
                                           u5127 0FD4                                             u5047 0F37  
                                           u5217 01F2                                             u5137 0FE8  
                                           u5057 0F4B                                             u5307 0DE1  
                                           u5227 0218                                             u5147 0FFC  
                                           u5067 0F5F                                             u5317 0DF2  
                                           u5237 0C6B                                             u5157 00C9  
                                           u5077 0F73                                             u5407 0CBF  
                                           u5327 0E03                                             u5247 0C80  
                                           u5167 00FC                                             u5087 0F87  
                                           u5417 0CD0                                             u5337 0E0C  
                                           u5257 0B00                                             u5177 0154  
                                           u5097 0F98                                             u5427 088A  
                                           u5347 0E21                                             u5267 0D9B  
                                           u5187 017D                                             u5437 09D0  
                                           u5357 0E30                                             u5277 0DAE  
                                           u5197 01A6                                             u5367 0E41  
                                           u5287 0DBF                                             i1l64 0A6C  
                                           u5377 0E48                                             u5297 0DD0  
                                           u5387 0C93                                             u5397 0CA6  
                                           i1l86 0E50                                             _TMR0 0015  
                                           _WPUA 020C                                             _WPUB 020D  
                                           _WPUC 020E                                     __CFG_WRT$OFF 0000  
                                  __CFG_FCMEN$ON 0000                                             _data 00B6  
                                 ??_lcd_contrast 0038                                             _atoi 0D26  
                                           _main 0BB7                                             _pbuf 0059  
                                           fsr0h 0005                                             fsr1h 0007  
                                           indf0 0000                                             fsr0l 0004  
                                           indf1 0001                                             fsr1l 0006  
                                           btemp 007E                            PROTOCOL_Set_Lock@lock 0021  
                                  __CFG_BOREN$ON 0000                                             start 0048  
                                    lcd_string@i 003B                                    __CFG_MCLRE$ON 0000  
                            _I2C1_StatusCallback 0E4E                                  ?i1_PROTOCOL_EXT 0070  
                                ?i1_PROTOCOL_SAV 0070                                  ?i1_PROTOCOL_SET 0070  
                      __size_of_DATAEE_WriteByte 0023                                  ?i1_PROTOCOL_STA 0070  
                                ?i1_PROTOCOL_STP 0070                          __end_of_TMR0_Initialize 17E2  
                    __end_ofi1_extension_handler 17F1                                    __CFG_PLLEN$ON 0000  
                                     _i2c2_state 0066                                    ?_EUSART_Write 0070  
                                     _i2c2_write 0A32                   __size_of_OSCILLATOR_Initialize 0005  
                  __end_of_OSCILLATOR_Initialize 1774                           ??i1_PROTOCOL_Read_Lock 0070  
                                          ?_atoi 0026                                            ?_main 0070  
                                          STR_10 0805                                            STR_11 0809  
                                          STR_12 0821                                            STR_20 076E  
                                          STR_13 07F1                                            STR_21 07ED  
                                          STR_14 0829                                            STR_22 07D5  
                                          STR_30 07CD                                            STR_15 07F9  
                                          STR_23 07E1                                            STR_31 0750  
                                          STR_32 07B6                                            STR_24 0778  
                                          STR_16 0731                                            STR_25 07D9  
                                          STR_17 07AF                                            STR_33 079F  
                                  __CFG_WDTE$OFF 0000                                            STR_26 07E9  
                                          STR_34 07C9                                            STR_18 07BC  
                                          STR_50 0796                                            STR_27 07E5  
                                          STR_19 07DD                                            STR_35 07C1  
                                          STR_51 0742                                            STR_28 075A  
                                          STR_29 07D1                                            STR_37 07C5  
                                          STR_45 07A8                                            STR_39 078C  
                                          STR_47 0782                                            STR_49 0764  
                              __end_of_I2C2_Stop 08CA                                  __end_of___lwdiv 0B39  
                                          i1l103 0E73                                            i1l210 06BE  
                                          i1l124 0F11                   __size_of_I2C2_FunctionComplete 0011  
                                          i1l213 06D2                                            i1l214 06E0  
                                          i1l206 069E                                            i1l225 089C  
                                          i1l218 0707                                            i1l323 0015  
                                          i1l325 0021                                            i1l333 0043  
                                          i1l190 062E                                            i1l327 002D  
                                          i1l184 05FB                                            i1l329 0039  
                                __end_of___lwmod 0AD4                                            i1l195 0651  
                                          i1l196 065D                                            i1l189 0626  
                                          i1l480 0964                                            i1l395 094D  
                              _PROTOCOL_Set_Func 17B4                                            _RCREG 0199  
                              _PROTOCOL_Set_Lock 1794                    __end_of_I2C2_FunctionComplete 089F  
                                          _RCSTA 019D                           i2c2_write@write_status 0034  
                                          _TRISA 008C                                            _TRISB 008D  
                                          _TRISC 008E                                            _TXREG 019A  
                                          _TXSTA 019E                     __size_of_PROTOCOL_Initialize 0052  
                             ?_PROTOCOL_Set_Func 0020                               ?_PROTOCOL_Set_Lock 0070  
                              ??_I2C1_Initialize 0020                             ?_I2C1_StatusCallback 0070  
                                _DATAEE_ReadByte 17C7                  ??_PROTOCOL_Write_Device_Address 0023  
                                __end_of_dpowers 0731                                   _WDT_Initialize 176B  
                 PROTOCOL_Initialize@inv_handler 0026                                  __end_of_isdigit 085E  
                                          _value 0056                                            atoi@a 002B  
                                          atoi@s 002D                                            _putch 1774  
                                          pclath 000A                              ??_PROTOCOL_Set_Func 0022  
                            ??_PROTOCOL_Set_Lock 0020                                            status 0003  
                                          wtemp0 007E                                  __end_of_strncmp 0BB7  
                              ??_I2C2_Initialize 0020                                  __initialization 004A  
                                   __end_of_atoi 0D97                                     __end_of_main 0BFA  
                         ??_I2C2_MasterTRBInsert 0022                                   ??_EUSART_Write 0020  
                                 i2c2_write@data 0031                      ?_INTERRUPT_InterruptManager 0070  
                      __end_of_PROTOCOL_Set_Func 17BD                        __end_of_PROTOCOL_Set_Lock 179B  
               __end_of_I2C2_MasterWriteTRBBuild 09CA                 PROTOCOL_Initialize@start_handler 0023  
                                         ??_atoi 0028                                           ??_main 0046  
                                    _i2c2_object 0047                               _PROTOCOL_Read_Lock 174E  
                         __end_of_WDT_Initialize 176F                            ??_I2C1_StatusCallback 0076  
                     __end_ofi1_DATAEE_WriteByte 096D                                           i1S5486 082C  
                                         i1S5488 0844                                           _EEADRH 0192  
                                         _EEADRL 0191                                           _EEDATH 0194  
                                         _EEDATL 0193                                           _EECON2 0196  
                                         _ANSELA 018C                                           ?_putch 0070  
                                         _ANSELB 018D                                           _ANSELC 018E  
                            ?_PROTOCOL_Read_Lock 0070                               _PROTOCOL_Loop_Func 00B4  
                   __end_of_I2C2_BusCollisionISR 0003                                           i1l3112 0B42  
                                         i1l3114 0B48                                           i1l3130 0B73  
                                         i1l3124 0B5F                                           i1l3108 0B3A  
                                         i1l3118 0B55                                           i1l3128 0B64  
                                         i1l3086 17E2                                           i1l5200 0E6B  
                                         i1l5202 0E6F                                           i1l5220 0EA3  
                                         i1l5204 0E76                                           i1l5212 0E90  
                                         i1l5214 0E99                                           i1l3462 08C8  
                                         i1l5240 0ECC                                           i1l5208 0E78  
                                         i1l5250 0EEA                                           i1l5226 0EAE  
                                         i1l3810 0619                                           i1l5236 0EC9  
                                         i1l5244 0ED6                                           i1l3900 06EE  
                                         i1l5254 0EF6                                           i1l5246 0EE2  
                                         i1l5190 0E5A                                           i1l5262 0F07  
                                         i1l3822 063A                                           i1l5248 0EE5  
                                         i1l3912 070B                                           i1l5258 0EFB  
                                         i1l5194 0E5F                                           i1l3914 070E  
                                         i1l3842 067A                                           i1l3922 071B  
                                         i1l5196 0E63                                           i1l5188 0E54  
                                         i1l5292 0A73                                           i1l3916 0712  
                                         i1l3828 064C                                           i1l5198 0E67  
                                         i1l5294 0A75                                           i1l5286 0A6A  
                                         i1l3862 068E                                           i1l3884 06C6  
                                         i1l3876 06AC                                           i1l3868 0699  
                                         i1l3896 06E7                                           i1l3998 0901  
                                         _OSCCON 0099                 __size_of_TMR0_HasOverflowOccured 0004  
                                         _TMR0IF 005A                                           _SPBRGH 019C  
                                         _SPBRGL 019B                                           _WDTCON 0097  
                 PROTOCOL_Initialize@set_handler 0025                                   __CFG_PWRTE$OFF 0000  
                      PROTOCOL_Initialize@scaler 0027                                 __end_of_lcd_init 0E4E  
                               __end_of_lcd_test 1000                                           ___wmul 0917  
                                 _p_i2c2_current 0063                                   __CFG_STVREN$ON 0000  
                                      ??___lwdiv 0024                             ??_PROTOCOL_Read_Lock 0020  
                                      ??___lwmod 002C                                     _type_no_data 006F  
                            _EUSART_Transmit_ISR 0933                                 ?_TMR0_Initialize 0070  
                                         _locked 0055                                        ?_I2C1_ISR 0070  
                                      ?_I2C2_ISR 0070                                      ?_i2c2_write 002E  
                       I2C2_Stop@completion_code 0071                                           _printf 028B  
                        __end_of_DATAEE_ReadByte 17D4                             __end_of_lcd_contrast 0CD4  
                   __size_ofi1_PROTOCOL_Set_Lock 0007                                     __pdataCOMMON 007D  
                                      ??_isdigit 0020                         __end_of_PROTOCOL_I2C_GET 1742  
                       __end_of_PROTOCOL_I2C_SEN 0B75                         __end_of_PROTOCOL_I2C_WHO 1745  
                                ?_WDT_Initialize 0070                    i1DATAEE_WriteByte@GIEBitValue 0072  
                                      ??_strncmp 0025                        PROTOCOL_Send_uint8_t@pbuf 00E1  
                           ?_EUSART_Transmit_ISR 0070                             __size_of_EUSART_Read 001F  
                        __end_of__initialization 007A  PROTOCOL_Set_Extension_Handler@extension_handler 0020  
                              ?_I2C2_MasterWrite 0027                               ??_I2C2_MasterWrite 002B  
                                 __pcstackCOMMON 0070                                     __pidataBANK0 1754  
                         i1extension_handler@buf 0072                                 _DATAEE_WriteByte 09EB  
                                 _i2c2_trb_count 0065                                    __end_of_putch 177A  
                                     ??_I2C1_ISR 0079                                       ??_I2C2_ISR 0072  
                     __size_of_PROTOCOL_Set_Func 0009                       __size_of_PROTOCOL_Set_Lock 0007  
                          __end_of_PROTOCOL_Loop 05E8                                   _OPTION_REGbits 0095  
                              _extension_handler 089F                               __size_of_lcd_clear 0010  
                       _I2C2_MasterWriteTRBBuild 09AA                     I2C2_MasterWriteTRBBuild@ptrb 0026  
                        PROTOCOL_Send_float@pbuf 00D6                               ?_extension_handler 0022  
                          ??_EUSART_Transmit_ISR 0070                                          ??_putch 0022  
                                     __pbssBANK0 0047                                       __pbssBANK1 00A0  
                                     __pbssBANK2 0120                                       __pbssBANK3 01A0  
                         i1DATAEE_WriteByte@bAdd 0071                             __end_of_EUSART_Write 0A32  
                            __size_of_i2c2_write 0026                              ??_extension_handler 0023  
               ??_PROTOCOL_Set_Extension_Handler 0022                  ?_PROTOCOL_Set_Extension_Handler 0020  
                    __size_of_EUSART_Receive_ISR 001B                               i2c2_write@dev_addr 002E  
                               ??i1_PROTOCOL_EXT 0074                                 ??i1_PROTOCOL_SAV 0073  
                               ??i1_PROTOCOL_SET 0070                                 ??i1_PROTOCOL_STA 0070  
                               ??i1_PROTOCOL_STP 0070                              _PROTOCOL_Initialize 0CD4  
                                     __pmaintext 0BB7                                          ?___wmul 0020  
                                     __pintentry 0004                                  _I2C1_Initialize 09CA  
                             __size_of_loop_func 020D                             extension_handler@buf 0022  
                                        _BAUDCON 019F                                       _device_id_ 00E2  
                             i2c2_write@reg_addr 0030                                          _APFCON0 011D  
                                        _APFCON1 011E                             _I2C2_BusCollisionISR 0002  
                                        ?_printf 002E                       I2C1_StatusCallback@ext_buf 01A0  
                     I2C1_StatusCallback@ext_cnt 0067                       I2C1_StatusCallback@ext_len 0068  
                               ?_DATAEE_ReadByte 0070                        __end_of_extension_handler 08B2  
                                  _eusartRxCount 005B                I2C1_StatusCallback@slaveWriteType 006A  
                     PROTOCOL_Send_uint16_t@pbuf 00DE                             ?_PROTOCOL_Initialize 0021  
              I2C2_ISR@i2c_10bit_address_restart 0060                                        _I2C2_Stop 08B2  
                                        _OSCTUNE 0098                                          _SSP1ADD 0212  
                                        _SSP2ADD 021A                                          _SSP1BUF 0211  
                                        _SSP2BUF 0219                                          _SSP1MSK 0213  
                                     _lcd_string 0AD4                           _PROTOCOL_Start_Handler 00E8  
                                      ?_lcd_init 0070                                        ?_lcd_test 0070  
                                _I2C2_Initialize 08CA                          _TMR0_HasOverflowOccured 1767  
                           DATAEE_WriteByte@bAdd 0021                           I2C2_MasterRead@trBlock 00CE  
                              __end_of_lcd_clear 088E                                    ?_PROTOCOL_INV 0070  
                                  ?_PROTOCOL_EXT 0070                                    ?_PROTOCOL_SAV 0070  
                                  ?_PROTOCOL_SET 0070                                    ?_PROTOCOL_STA 0070  
                                  ?_PROTOCOL_RST 0070                                    ?_PROTOCOL_STP 0070  
                          __size_of_lcd_contrast 0050                                  __size_of___wmul 001C  
                                        ___lwdiv 0B04                                          ___lwmod 0AA7  
                          ?_I2C2_BusCollisionISR 0070                        I2C2_MasterTRBInsert@count 0023  
                                        __ptext1 0F12                                          __ptext2 176B  
                                        __ptext3 17D4                                          __ptext4 17B4  
                                        __ptext5 177A                                          __ptext6 0460  
                                        __ptext7 028B                                          __ptext8 1774  
                                        __ptext9 0A0E                        I2C2_MasterTRBInsert@pflag 0021  
                                __size_of_printf 01D5                                          _dpowers 0727  
                          _OSCILLATOR_Initialize 176F       PROTOCOL_Write_Device_Address@device_id_i2c 0024  
                          ??_PROTOCOL_Initialize 0028                                          _isdigit 084F  
                  __size_ofi1_PROTOCOL_Read_Lock 0003                                          _readbuf 00C9  
                                        _sec_cnt 0052                                          _invoked 0053  
                       ??_PIN_MANAGER_Initialize 0020                     __size_ofi1_extension_handler 000F  
                                        _sendbuf 00B9                                       ?_I2C2_Stop 0070  
                          _I2C2_FunctionComplete 088E                                          _tmr_cnt 0051  
                                        clrloop0 1781                                          _running 0054  
                                     ??_lcd_init 0038                                       ??_lcd_test 0038  
                                        _strncmp 0B75                             end_of_initialization 007A  
                              __end_of_loop_func 028B                       _PROTOCOL_Extension_Handler 004C  
                            i1_PROTOCOL_Set_Lock 1786                                     _lcd_contrast 0C84  
                             i1_DATAEE_WriteByte 0950                                _EUSART_Initialize 08E2  
                        __end_of_I2C1_Initialize 09EB                               ?_EUSART_Initialize 0070  
                          I2C2_MasterWrite@pdata 002D                               _p_i2c2_trb_current 0064  
                                      _RCSTAbits 019D                            I2C2_MasterWrite@pflag 002A  
                                        printf@c 0041                                          printf@f 002E  
                                 ??_PROTOCOL_INV 0070                                   ??_PROTOCOL_EXT 0024  
                                 ??_PROTOCOL_SAV 0023                                   ??_PROTOCOL_SET 0020  
                                 ??_PROTOCOL_STA 0020                                   ??_PROTOCOL_RST 0070  
                                 ??_PROTOCOL_STP 0020                           I2C2_ISR@i2c_bytes_left 0061  
                            ?i1_DATAEE_WriteByte 0070                                     __pstringtext 0727  
                  __size_of_I2C2_MasterTRBInsert 0045                                     ??_i2c2_write 0032  
                            ??_EUSART_Initialize 0020                      __end_of_I2C1_StatusCallback 0F12  
                               ??_WDT_Initialize 0020                             ?i1_PROTOCOL_Set_Lock 0070  
                              __size_of_I2C1_ISR 0027                       __size_of_extension_handler 0013  
                              __size_of_I2C2_ISR 013F                                 __CFG_FOSC$INTOSC 0000  
                        __end_of_I2C2_Initialize 08E2                                ?_PROTOCOL_I2C_GET 0070  
                              ?_PROTOCOL_I2C_SEN 0070                                ?_PROTOCOL_I2C_WHO 0070  
                          __size_of_EUSART_Write 0024                        ??_TMR0_HasOverflowOccured 0020  
                             ??_PROTOCOL_I2C_GET 0070                               ??_PROTOCOL_I2C_SEN 0070  
                             ??_PROTOCOL_I2C_WHO 0070                                      ?_lcd_string 0070  
                           ??i1_DATAEE_WriteByte 0071                                       _tmr_scaler 006D  
                       __end_of_DATAEE_WriteByte 0A0E                        __end_of_EUSART_Initialize 08FC  
                                    printf@width 003F                               __end_of_i2c2_write 0A58  
                           i1PROTOCOL_SET@value_ 0071                           ??_I2C2_BusCollisionISR 0070  
                       I2C1_StatusCallback@pdata 0078                      __size_of_PROTOCOL_Read_Lock 0003  
                     ??_I2C2_MasterWriteTRBBuild 0024                                   __end_of___wmul 0933  
                                  __pidataCOMMON 0003                                     _EUSART_Write 0A0E  
                          ??i1_PROTOCOL_Set_Lock 0070                           ?_OSCILLATOR_Initialize 0070  
                      __size_of_I2C2_MasterWrite 0028                                   __end_of_printf 0460  
                         ?_I2C2_FunctionComplete 0070                                   PROTOCOL_Loop@c 0044  
                            start_initialization 004A                                      ??_I2C2_Stop 0070  
                       __size_of_TMR0_Initialize 000E                  __size_of_PIN_MANAGER_Initialize 001E  
                                  ??_EUSART_Read 0020                                    i2c2_write@buf 0035  
                                    putch@txData 0022                              DATAEE_ReadByte@bAdd 0020  
                I2C2_MasterWriteTRBBuild@address 0022                                 i2c2_write@status 0037  
                               ?_I2C1_Initialize 0070                                 I2C1_ISR@i2c_data 007A  
                                       ??___wmul 0024                    I2C2_MasterWriteTRBBuild@pdata 0020  
                           I2C2_ISR@pi2c_buf_ptr 0062                         PROTOCOL_Send_int8_t@pbuf 00E0  
           __end_of_PROTOCOL_Read_Device_Address 174E            __size_of_PROTOCOL_Read_Device_Address 0003  
                   _PROTOCOL_Read_Device_Address 174B                                      __pdataBANK0 006D  
                            __size_of_lcd_string 0030                                         ??_printf 0032  
                        i1DATAEE_WriteByte@bData 0070                      __end_of_EUSART_Transmit_ISR 0950  
                                    __pbssCOMMON 007C                                 ?_I2C2_Initialize 0070  
                                      ___latbits 0002                                    __pcstackBANK0 0020  
               I2C1_StatusCallback@i2c_bus_state 0077                             _PROTOCOL_Inv_Handler 00B2  
                                   _isdigit$1515 0020                             __end_of_PROTOCOL_INV 175F  
                           __end_of_PROTOCOL_EXT 087E                             __end_of_PROTOCOL_SAV 17B4  
                           __end_of_PROTOCOL_SET 17A2                             __end_of_PROTOCOL_STA 1767  
                           __end_of_PROTOCOL_RST 17C7                             __end_of_PROTOCOL_STP 1754  
                                  _i2c2_tr_queue 00D9                       __end_of_EUSART_Receive_ISR 0917  
                PROTOCOL_Initialize@stop_handler 0024                       __size_of_EUSART_Initialize 001A  
                              __size_of_lcd_init 00B7                                __size_of_lcd_test 00EE  
                            __end_of_EUSART_Read 09AA                           __size_of_PROTOCOL_Loop 0188  
                                      __pnvBANK1 00E2            __end_of_PROTOCOL_Write_Device_Address 1800  
         __size_of_PROTOCOL_Write_Device_Address 000F                    _PROTOCOL_Write_Device_Address 17F1  
                               ___lwdiv@dividend 0022                           _PIN_MANAGER_Initialize 096D  
                            i1_extension_handler 17E2                             EUSART_Read@readValue 0021  
                                       ?___lwdiv 0020                                         ?___lwmod 0028  
                                   _eusartRxHead 005D                                     _eusartTxHead 007C  
                                   _eusartRxTail 005C                                        _lcd_clear 087E  
                                   _eusartTxTail 005F                                         _I2C1_ISR 0A58  
                                       _I2C2_ISR 05E8                    ?_PROTOCOL_Read_Device_Address 0070  
                   ??_INTERRUPT_InterruptManager 007B                        PROTOCOL_Send_int16_t@pbuf 00DC  
                                      __pswtext1 082C                                        __pswtext2 0844  
                        _eusartTxBufferRemaining 005E                                         ?_isdigit 0070  
                           ?i1_extension_handler 0072                                 ___lwdiv@quotient 0025  
                       __size_of_DATAEE_ReadByte 000D                                         ?_strncmp 0020  
                                 __size_of_putch 0006                                   _eusartRxBuffer 00A0  
                              ??_TMR0_Initialize 0020                                   _eusartTxBuffer 00A8  
                                 ___wmul@product 0024                                         _LATCbits 010E  
                           _PROTOCOL_Set_Handler 00E4                     __end_ofi1_PROTOCOL_Read_Lock 1748  
                                      clear_ram0 1780                                         _PIE1bits 0091  
                                      _loop_func 007E                                         _PIE4bits 0094  
                          PROTOCOL_I2C_SEN@pdata 0071              __size_of_INTERRUPT_InterruptManager 0044  
                                       _PIR1bits 0011                                         _PIR4bits 0014  
                                       _SSP1CON1 0215                                         _SSP1CON2 0216  
                                       _SSP1CON3 0217                     PROTOCOL_Initialize@device_id 0021  
                                       _SSP2CON1 021D                                         _SSP2CON3 021F  
                                       _SSP1STAT 0214                                         _SSP2STAT 021C  
                                 _readbuf_status 004F                            _PROTOCOL_Stop_Handler 00E6  
                    __end_of_PROTOCOL_Initialize 0D26                                       ?_lcd_clear 0070  
                  I2C2_MasterTRBInsert@ptrb_list 0020                          __size_ofi1_PROTOCOL_EXT 0010  
                        __size_ofi1_PROTOCOL_SAV 0009                          __size_ofi1_PROTOCOL_SET 0007  
                        __size_ofi1_PROTOCOL_STA 0004                          __size_ofi1_PROTOCOL_STP 0003  
                              ___wmul@multiplier 0020                                 _I2C2_MasterWrite 0A7F  
                                  _PROTOCOL_Loop 0460                                       printf@flag 003E  
                                     printf@prec 0036                            ??i1_extension_handler 0073  
                          DATAEE_WriteByte@bData 0020                          I2C1_StatusCallback@next 0069  
                                   ??_lcd_string 0038                                      _EUSART_Read 098B  
                   __end_of_I2C2_MasterTRBInsert 0C3F                                ?_DATAEE_WriteByte 0020  
       __end_of_PROTOCOL_Backplane_Slave_Enabled 175B        __size_of_PROTOCOL_Backplane_Slave_Enabled 0004  
             ??_PROTOCOL_Backplane_Slave_Enabled 0070                ?_PROTOCOL_Backplane_Slave_Enabled 0070  
               _PROTOCOL_Backplane_Slave_Enabled 1757                               ??_DATAEE_WriteByte 0021  
                                  _slave_address 0058                                       _EECON1bits 0195  
                             PROTOCOL_SET@value_ 0021                                       ?_loop_func 0070  
                           lcd_contrast@contrast 003A                        __size_of_PROTOCOL_I2C_GET 0003  
                      __size_of_PROTOCOL_I2C_SEN 003C                        __size_of_PROTOCOL_I2C_WHO 0003  
                 I2C2_MasterWriteTRBBuild@length 0021                          ??_OSCILLATOR_Initialize 0020  
                     PROTOCOL_Set_Func@loop_func 0020                   ?_PROTOCOL_Write_Device_Address 0070  
                               __size_of___lwdiv 0035                               __end_of_lcd_string 0B04  
                               __size_of___lwmod 002D                          ??_I2C2_FunctionComplete 0070  
                              _lcd_string_2lines 0C3F                                   ?_PROTOCOL_Loop 0070  
                             ?_lcd_string_2lines 0070                            __size_of_PROTOCOL_INV 0004  
                          __size_of_PROTOCOL_EXT 0010                            __size_of_PROTOCOL_SAV 0009  
                          __size_of_PROTOCOL_SET 0007                            __size_of_PROTOCOL_STA 0004  
                          __size_of_PROTOCOL_RST 000A                            __size_of_PROTOCOL_STP 0003  
                 ??_PROTOCOL_Read_Device_Address 0020                                 __size_of_isdigit 000F  
                                ___lwdiv@divisor 0020                     __size_of_I2C1_StatusCallback 00C4  
                                ___lwdiv@counter 0027                                         __ptext10 0AA7  
                                       __ptext11 0B04                                         __ptext20 0A7F  
                                       __ptext12 007E                                         __ptext21 09AA  
                                       __ptext13 0B75                                         __ptext30 179B  
                                       __ptext22 0BFA                                         __ptext14 0C3F  
                                       __ptext31 17AB                                         __ptext23 0D26  
                                       __ptext15 0AD4                                         __ptext40 096D  
                                       __ptext32 09EB                                         __ptext24 084F  
                                       __ptext16 0D97                                         __ptext41 176F  
                                       __ptext33 086E                                         __ptext25 0917  
                                       __ptext17 0C84                                         __ptext50 0002  
                                       __ptext42 08CA                                         __ptext34 089F  
                                       __ptext26 1767                                         __ptext18 087E  
                                       __ptext51 0A58                                         __ptext43 09CA  
                                       __ptext35 1794                                         __ptext27 17F1  
                                       __ptext19 0A32                                         __ptext60 1786  
                                       __ptext52 0E4E                                         __ptext44 174B  
                                       __ptext36 174E                                         __ptext28 1751  
                                       __ptext61 1745                                         __ptext53 1748  
                                       __ptext45 08E2                                         __ptext37 098B  
                                       __ptext29 1763                                         __ptext62 17BD  
                                       __ptext54 175F                                         __ptext38 0CD4  
                                       __ptext63 175B                                         __ptext55 178D  
                                       __ptext47 05E8                                         __ptext39 17C7  
                                       __ptext64 1742                                         __ptext56 17A2  
                                       __ptext48 08B2                                         __ptext65 0B39  
                                       __ptext57 0950                                         __ptext49 088E  
                                       __ptext66 173F                                         __ptext58 085E  
                                       __ptext67 1757                                         __ptext59 17E2  
                                       __ptext68 0933                                         __ptext69 08FC  
                                   _SSP1CON1bits 0215                                     _SSP1CON2bits 0216  
                                       _float100 00B0                                         _lcd_init 0D97  
                            ??_lcd_string_2lines 0038                      __size_ofi1_DATAEE_WriteByte 001D  
                                       _lcd_test 0F12                                     _SSP2CON1bits 021D  
                                   _SSP2CON2bits 021E                      DATAEE_WriteByte@GIEBitValue 0022  
                               __size_of_strncmp 0042                                    __size_of_atoi 0071  
                                  __size_of_main 0043                                       strncmp@len 0023  
                              ??_DATAEE_ReadByte 0020                          I2C2_MasterWrite@address 0028  
                        _BACKPLANE_SLAVE_ADDRESS 006E                       __end_of_PROTOCOL_Read_Lock 1751  
                    __end_ofi1_PROTOCOL_Set_Lock 178D                                         int$flags 007E  
                                       atoi@sign 002A                                     _PROTOCOL_INV 175B  
                                   _PROTOCOL_EXT 086E                        __end_of_lcd_string_2lines 0C84  
                                   _PROTOCOL_SAV 17AB                                     _PROTOCOL_SET 179B  
                                   _PROTOCOL_STA 1763                                     _PROTOCOL_RST 17BD  
                                   _PROTOCOL_STP 1751               __end_of_INTERRUPT_InterruptManager 0048  
                     _INTERRUPT_InterruptManager 0004                                        printf@len 003C  
                                    ??_lcd_clear 0038                                        printf@val 003A  
                        I2C2_MasterWrite@trBlock 00D2                                     _SSP1STATbits 0214  
                  __size_of_I2C2_BusCollisionISR 0001                         ?_TMR0_HasOverflowOccured 0070  
                             _I2C_slaveWriteData 007D                             i1_PROTOCOL_Read_Lock 1745  
                                     _INTCONbits 000B                                         isdigit@c 0021  
                         i1PROTOCOL_EXT@char_buf 0075                          __size_of_WDT_Initialize 0004  
              __size_of_I2C2_MasterWriteTRBBuild 0020                        ?_I2C2_MasterWriteTRBBuild 0020  
                                       intlevel1 0000                               lcd_string_2lines@i 003B  
                        i1PROTOCOL_Set_Lock@lock 0071                                 ___lwmod@dividend 002A  
                            I2C2_ISR@i2c_address 006B                          ?_PIN_MANAGER_Initialize 0070  
                              __CFG_CLKOUTEN$OFF 0000                                      ??_loop_func 003C  
                                      strncmp@s1 0020                                        strncmp@s2 0022  
                        _backplane_slave_enabled 004E                           I2C2_MasterWrite@length 0027  
                                       printf@ap 0039                                         printf@cp 0037  
                             _EUSART_Receive_ISR 08FC                                  ??_PROTOCOL_Loop 0042  
                           _I2C2_MasterTRBInsert 0BFA                         __size_of_I2C1_Initialize 0021  
                                 i1_PROTOCOL_EXT 085E                                   i1_PROTOCOL_SAV 17A2  
                                 i1_PROTOCOL_SET 178D                                   i1_PROTOCOL_STA 175F  
                                 i1_PROTOCOL_STP 1748                                       _OPTION_REG 0095  
                            ?_EUSART_Receive_ISR 0070                            ?i1_PROTOCOL_Read_Lock 0070  
                                ___lwmod@divisor 0028                                  _TMR0_Initialize 17D4  
                                ___lwmod@counter 002D                      PROTOCOL_Loop@device_address 0045  
                           PROTOCOL_EXT@char_buf 0025                               EUSART_Write@txData 0021  
                   __size_of_EUSART_Transmit_ISR 001D                   __end_of_PIN_MANAGER_Initialize 098B  
                    _extension_handler$intlevel0 08A3                         __size_of_I2C2_Initialize 0018  
                             __size_of_I2C2_Stop 0018                                   loop_func@value 003E  
                           ??_EUSART_Receive_ISR 0070                                    ?_lcd_contrast 0070  
                       __end_of_I2C2_MasterWrite 0AA7                                 _PROTOCOL_I2C_GET 173F  
                               _PROTOCOL_I2C_SEN 0B39                                 _PROTOCOL_I2C_WHO 1742  
