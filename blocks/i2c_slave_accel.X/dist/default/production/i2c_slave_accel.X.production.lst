

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Sep 20 08:33:47 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text4,local,class=CODE,merge=1,delta=2,group=4
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2,group=4
    29                           	psect	text8,local,class=CODE,merge=1,delta=2,group=4
    30                           	psect	text9,local,class=CODE,merge=1,delta=2,group=4
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2,group=4
    40                           	psect	text19,local,class=CODE,merge=1,delta=2,group=4
    41                           	psect	text20,local,class=CODE,merge=1,delta=2,group=4
    42                           	psect	text21,local,class=CODE,merge=1,delta=2,group=4
    43                           	psect	text22,local,class=CODE,merge=1,delta=2,group=4
    44                           	psect	text23,local,class=CODE,merge=1,delta=2,group=4
    45                           	psect	text24,local,class=CODE,merge=1,delta=2,group=4
    46                           	psect	text25,local,class=CODE,merge=1,delta=2,group=4
    47                           	psect	text26,local,class=CODE,merge=1,delta=2,group=4
    48                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text28,local,class=CODE,merge=1,delta=2,group=4
    50                           	psect	text29,local,class=CODE,merge=1,delta=2,group=4
    51                           	psect	text30,local,class=CODE,merge=1,delta=2,group=4
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	intentry,global,class=CODE,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	swtext1,local,class=CONST,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
    81                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
    82                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
    83                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
    84                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
    85                           	psect	text63,local,class=CODE,merge=1,delta=2,group=1
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	psect	text65,local,class=CODE,merge=1,delta=2
    88                           	dabs	1,0x7E,2
    89  0000                     
    90                           ; Version 1.41 (B)
    91                           ; Generated 21/02/2017 GMT
    92                           ; 
    93                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    94                           ; All rights reserved.
    95                           ; 
    96                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    97                           ; 
    98                           ; Redistribution and use in source and binary forms, with or without modification, are
    99                           ; permitted provided that the following conditions are met:
   100                           ; 
   101                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   102                           ;        conditions and the following disclaimer.
   103                           ; 
   104                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   105                           ;        of conditions and the following disclaimer in the documentation and/or other
   106                           ;        materials provided with the distribution.
   107                           ; 
   108                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   109                           ;        software without specific prior written permission.
   110                           ; 
   111                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   112                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   113                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   114                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   115                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   116                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   117                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   118                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   119                           ; 
   120                           ; 
   121                           ; Code-generator required, PIC16F1829 Definitions
   122                           ; 
   123                           ; SFR Addresses
   124  0000                     	;# 
   125  0001                     	;# 
   126  0002                     	;# 
   127  0003                     	;# 
   128  0004                     	;# 
   129  0005                     	;# 
   130  0006                     	;# 
   131  0007                     	;# 
   132  0008                     	;# 
   133  0009                     	;# 
   134  000A                     	;# 
   135  000B                     	;# 
   136  000C                     	;# 
   137  000D                     	;# 
   138  000E                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001B                     	;# 
   151  001C                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0095                     	;# 
   162  0096                     	;# 
   163  0097                     	;# 
   164  0098                     	;# 
   165  0099                     	;# 
   166  009A                     	;# 
   167  009B                     	;# 
   168  009B                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  0111                     	;# 
   176  0112                     	;# 
   177  0113                     	;# 
   178  0114                     	;# 
   179  0115                     	;# 
   180  0116                     	;# 
   181  0117                     	;# 
   182  0118                     	;# 
   183  0119                     	;# 
   184  011A                     	;# 
   185  011B                     	;# 
   186  011D                     	;# 
   187  011E                     	;# 
   188  018C                     	;# 
   189  018D                     	;# 
   190  018E                     	;# 
   191  0191                     	;# 
   192  0191                     	;# 
   193  0192                     	;# 
   194  0193                     	;# 
   195  0193                     	;# 
   196  0193                     	;# 
   197  0194                     	;# 
   198  0195                     	;# 
   199  0196                     	;# 
   200  0199                     	;# 
   201  019A                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019C                     	;# 
   205  019D                     	;# 
   206  019E                     	;# 
   207  019F                     	;# 
   208  020C                     	;# 
   209  020D                     	;# 
   210  020E                     	;# 
   211  0211                     	;# 
   212  0211                     	;# 
   213  0212                     	;# 
   214  0212                     	;# 
   215  0213                     	;# 
   216  0213                     	;# 
   217  0214                     	;# 
   218  0214                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0216                     	;# 
   223  0216                     	;# 
   224  0217                     	;# 
   225  0217                     	;# 
   226  0219                     	;# 
   227  021A                     	;# 
   228  021B                     	;# 
   229  021C                     	;# 
   230  021D                     	;# 
   231  021E                     	;# 
   232  021F                     	;# 
   233  0291                     	;# 
   234  0291                     	;# 
   235  0292                     	;# 
   236  0293                     	;# 
   237  0294                     	;# 
   238  0295                     	;# 
   239  0295                     	;# 
   240  0296                     	;# 
   241  0298                     	;# 
   242  0298                     	;# 
   243  0299                     	;# 
   244  029A                     	;# 
   245  029B                     	;# 
   246  029C                     	;# 
   247  029D                     	;# 
   248  029E                     	;# 
   249  0311                     	;# 
   250  0311                     	;# 
   251  0312                     	;# 
   252  0313                     	;# 
   253  0318                     	;# 
   254  0318                     	;# 
   255  0319                     	;# 
   256  031A                     	;# 
   257  038C                     	;# 
   258  038D                     	;# 
   259  038E                     	;# 
   260  0391                     	;# 
   261  0392                     	;# 
   262  0393                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  039A                     	;# 
   267  039C                     	;# 
   268  039D                     	;# 
   269  039E                     	;# 
   270  039F                     	;# 
   271  0415                     	;# 
   272  0416                     	;# 
   273  0417                     	;# 
   274  041C                     	;# 
   275  041D                     	;# 
   276  041E                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEB                     	;# 
   285  0FED                     	;# 
   286  0FEE                     	;# 
   287  0FEF                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000D                     	;# 
   302  000E                     	;# 
   303  0011                     	;# 
   304  0012                     	;# 
   305  0013                     	;# 
   306  0014                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0016                     	;# 
   310  0017                     	;# 
   311  0018                     	;# 
   312  0019                     	;# 
   313  001A                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  001E                     	;# 
   317  001F                     	;# 
   318  008C                     	;# 
   319  008D                     	;# 
   320  008E                     	;# 
   321  0091                     	;# 
   322  0092                     	;# 
   323  0093                     	;# 
   324  0094                     	;# 
   325  0095                     	;# 
   326  0096                     	;# 
   327  0097                     	;# 
   328  0098                     	;# 
   329  0099                     	;# 
   330  009A                     	;# 
   331  009B                     	;# 
   332  009B                     	;# 
   333  009C                     	;# 
   334  009D                     	;# 
   335  009E                     	;# 
   336  010C                     	;# 
   337  010D                     	;# 
   338  010E                     	;# 
   339  0111                     	;# 
   340  0112                     	;# 
   341  0113                     	;# 
   342  0114                     	;# 
   343  0115                     	;# 
   344  0116                     	;# 
   345  0117                     	;# 
   346  0118                     	;# 
   347  0119                     	;# 
   348  011A                     	;# 
   349  011B                     	;# 
   350  011D                     	;# 
   351  011E                     	;# 
   352  018C                     	;# 
   353  018D                     	;# 
   354  018E                     	;# 
   355  0191                     	;# 
   356  0191                     	;# 
   357  0192                     	;# 
   358  0193                     	;# 
   359  0193                     	;# 
   360  0193                     	;# 
   361  0194                     	;# 
   362  0195                     	;# 
   363  0196                     	;# 
   364  0199                     	;# 
   365  019A                     	;# 
   366  019B                     	;# 
   367  019B                     	;# 
   368  019C                     	;# 
   369  019D                     	;# 
   370  019E                     	;# 
   371  019F                     	;# 
   372  020C                     	;# 
   373  020D                     	;# 
   374  020E                     	;# 
   375  0211                     	;# 
   376  0211                     	;# 
   377  0212                     	;# 
   378  0212                     	;# 
   379  0213                     	;# 
   380  0213                     	;# 
   381  0214                     	;# 
   382  0214                     	;# 
   383  0215                     	;# 
   384  0215                     	;# 
   385  0215                     	;# 
   386  0216                     	;# 
   387  0216                     	;# 
   388  0217                     	;# 
   389  0217                     	;# 
   390  0219                     	;# 
   391  021A                     	;# 
   392  021B                     	;# 
   393  021C                     	;# 
   394  021D                     	;# 
   395  021E                     	;# 
   396  021F                     	;# 
   397  0291                     	;# 
   398  0291                     	;# 
   399  0292                     	;# 
   400  0293                     	;# 
   401  0294                     	;# 
   402  0295                     	;# 
   403  0295                     	;# 
   404  0296                     	;# 
   405  0298                     	;# 
   406  0298                     	;# 
   407  0299                     	;# 
   408  029A                     	;# 
   409  029B                     	;# 
   410  029C                     	;# 
   411  029D                     	;# 
   412  029E                     	;# 
   413  0311                     	;# 
   414  0311                     	;# 
   415  0312                     	;# 
   416  0313                     	;# 
   417  0318                     	;# 
   418  0318                     	;# 
   419  0319                     	;# 
   420  031A                     	;# 
   421  038C                     	;# 
   422  038D                     	;# 
   423  038E                     	;# 
   424  0391                     	;# 
   425  0392                     	;# 
   426  0393                     	;# 
   427  0394                     	;# 
   428  0395                     	;# 
   429  0396                     	;# 
   430  039A                     	;# 
   431  039C                     	;# 
   432  039D                     	;# 
   433  039E                     	;# 
   434  039F                     	;# 
   435  0415                     	;# 
   436  0416                     	;# 
   437  0417                     	;# 
   438  041C                     	;# 
   439  041D                     	;# 
   440  041E                     	;# 
   441  0FE4                     	;# 
   442  0FE5                     	;# 
   443  0FE6                     	;# 
   444  0FE7                     	;# 
   445  0FE8                     	;# 
   446  0FE9                     	;# 
   447  0FEA                     	;# 
   448  0FEB                     	;# 
   449  0FED                     	;# 
   450  0FEE                     	;# 
   451  0FEF                     	;# 
   452  0000                     	;# 
   453  0001                     	;# 
   454  0002                     	;# 
   455  0003                     	;# 
   456  0004                     	;# 
   457  0005                     	;# 
   458  0006                     	;# 
   459  0007                     	;# 
   460  0008                     	;# 
   461  0009                     	;# 
   462  000A                     	;# 
   463  000B                     	;# 
   464  000C                     	;# 
   465  000D                     	;# 
   466  000E                     	;# 
   467  0011                     	;# 
   468  0012                     	;# 
   469  0013                     	;# 
   470  0014                     	;# 
   471  0015                     	;# 
   472  0016                     	;# 
   473  0016                     	;# 
   474  0017                     	;# 
   475  0018                     	;# 
   476  0019                     	;# 
   477  001A                     	;# 
   478  001B                     	;# 
   479  001C                     	;# 
   480  001E                     	;# 
   481  001F                     	;# 
   482  008C                     	;# 
   483  008D                     	;# 
   484  008E                     	;# 
   485  0091                     	;# 
   486  0092                     	;# 
   487  0093                     	;# 
   488  0094                     	;# 
   489  0095                     	;# 
   490  0096                     	;# 
   491  0097                     	;# 
   492  0098                     	;# 
   493  0099                     	;# 
   494  009A                     	;# 
   495  009B                     	;# 
   496  009B                     	;# 
   497  009C                     	;# 
   498  009D                     	;# 
   499  009E                     	;# 
   500  010C                     	;# 
   501  010D                     	;# 
   502  010E                     	;# 
   503  0111                     	;# 
   504  0112                     	;# 
   505  0113                     	;# 
   506  0114                     	;# 
   507  0115                     	;# 
   508  0116                     	;# 
   509  0117                     	;# 
   510  0118                     	;# 
   511  0119                     	;# 
   512  011A                     	;# 
   513  011B                     	;# 
   514  011D                     	;# 
   515  011E                     	;# 
   516  018C                     	;# 
   517  018D                     	;# 
   518  018E                     	;# 
   519  0191                     	;# 
   520  0191                     	;# 
   521  0192                     	;# 
   522  0193                     	;# 
   523  0193                     	;# 
   524  0193                     	;# 
   525  0194                     	;# 
   526  0195                     	;# 
   527  0196                     	;# 
   528  0199                     	;# 
   529  019A                     	;# 
   530  019B                     	;# 
   531  019B                     	;# 
   532  019C                     	;# 
   533  019D                     	;# 
   534  019E                     	;# 
   535  019F                     	;# 
   536  020C                     	;# 
   537  020D                     	;# 
   538  020E                     	;# 
   539  0211                     	;# 
   540  0211                     	;# 
   541  0212                     	;# 
   542  0212                     	;# 
   543  0213                     	;# 
   544  0213                     	;# 
   545  0214                     	;# 
   546  0214                     	;# 
   547  0215                     	;# 
   548  0215                     	;# 
   549  0215                     	;# 
   550  0216                     	;# 
   551  0216                     	;# 
   552  0217                     	;# 
   553  0217                     	;# 
   554  0219                     	;# 
   555  021A                     	;# 
   556  021B                     	;# 
   557  021C                     	;# 
   558  021D                     	;# 
   559  021E                     	;# 
   560  021F                     	;# 
   561  0291                     	;# 
   562  0291                     	;# 
   563  0292                     	;# 
   564  0293                     	;# 
   565  0294                     	;# 
   566  0295                     	;# 
   567  0295                     	;# 
   568  0296                     	;# 
   569  0298                     	;# 
   570  0298                     	;# 
   571  0299                     	;# 
   572  029A                     	;# 
   573  029B                     	;# 
   574  029C                     	;# 
   575  029D                     	;# 
   576  029E                     	;# 
   577  0311                     	;# 
   578  0311                     	;# 
   579  0312                     	;# 
   580  0313                     	;# 
   581  0318                     	;# 
   582  0318                     	;# 
   583  0319                     	;# 
   584  031A                     	;# 
   585  038C                     	;# 
   586  038D                     	;# 
   587  038E                     	;# 
   588  0391                     	;# 
   589  0392                     	;# 
   590  0393                     	;# 
   591  0394                     	;# 
   592  0395                     	;# 
   593  0396                     	;# 
   594  039A                     	;# 
   595  039C                     	;# 
   596  039D                     	;# 
   597  039E                     	;# 
   598  039F                     	;# 
   599  0415                     	;# 
   600  0416                     	;# 
   601  0417                     	;# 
   602  041C                     	;# 
   603  041D                     	;# 
   604  041E                     	;# 
   605  0FE4                     	;# 
   606  0FE5                     	;# 
   607  0FE6                     	;# 
   608  0FE7                     	;# 
   609  0FE8                     	;# 
   610  0FE9                     	;# 
   611  0FEA                     	;# 
   612  0FEB                     	;# 
   613  0FED                     	;# 
   614  0FEE                     	;# 
   615  0FEF                     	;# 
   616  0000                     	;# 
   617  0001                     	;# 
   618  0002                     	;# 
   619  0003                     	;# 
   620  0004                     	;# 
   621  0005                     	;# 
   622  0006                     	;# 
   623  0007                     	;# 
   624  0008                     	;# 
   625  0009                     	;# 
   626  000A                     	;# 
   627  000B                     	;# 
   628  000C                     	;# 
   629  000D                     	;# 
   630  000E                     	;# 
   631  0011                     	;# 
   632  0012                     	;# 
   633  0013                     	;# 
   634  0014                     	;# 
   635  0015                     	;# 
   636  0016                     	;# 
   637  0016                     	;# 
   638  0017                     	;# 
   639  0018                     	;# 
   640  0019                     	;# 
   641  001A                     	;# 
   642  001B                     	;# 
   643  001C                     	;# 
   644  001E                     	;# 
   645  001F                     	;# 
   646  008C                     	;# 
   647  008D                     	;# 
   648  008E                     	;# 
   649  0091                     	;# 
   650  0092                     	;# 
   651  0093                     	;# 
   652  0094                     	;# 
   653  0095                     	;# 
   654  0096                     	;# 
   655  0097                     	;# 
   656  0098                     	;# 
   657  0099                     	;# 
   658  009A                     	;# 
   659  009B                     	;# 
   660  009B                     	;# 
   661  009C                     	;# 
   662  009D                     	;# 
   663  009E                     	;# 
   664  010C                     	;# 
   665  010D                     	;# 
   666  010E                     	;# 
   667  0111                     	;# 
   668  0112                     	;# 
   669  0113                     	;# 
   670  0114                     	;# 
   671  0115                     	;# 
   672  0116                     	;# 
   673  0117                     	;# 
   674  0118                     	;# 
   675  0119                     	;# 
   676  011A                     	;# 
   677  011B                     	;# 
   678  011D                     	;# 
   679  011E                     	;# 
   680  018C                     	;# 
   681  018D                     	;# 
   682  018E                     	;# 
   683  0191                     	;# 
   684  0191                     	;# 
   685  0192                     	;# 
   686  0193                     	;# 
   687  0193                     	;# 
   688  0193                     	;# 
   689  0194                     	;# 
   690  0195                     	;# 
   691  0196                     	;# 
   692  0199                     	;# 
   693  019A                     	;# 
   694  019B                     	;# 
   695  019B                     	;# 
   696  019C                     	;# 
   697  019D                     	;# 
   698  019E                     	;# 
   699  019F                     	;# 
   700  020C                     	;# 
   701  020D                     	;# 
   702  020E                     	;# 
   703  0211                     	;# 
   704  0211                     	;# 
   705  0212                     	;# 
   706  0212                     	;# 
   707  0213                     	;# 
   708  0213                     	;# 
   709  0214                     	;# 
   710  0214                     	;# 
   711  0215                     	;# 
   712  0215                     	;# 
   713  0215                     	;# 
   714  0216                     	;# 
   715  0216                     	;# 
   716  0217                     	;# 
   717  0217                     	;# 
   718  0219                     	;# 
   719  021A                     	;# 
   720  021B                     	;# 
   721  021C                     	;# 
   722  021D                     	;# 
   723  021E                     	;# 
   724  021F                     	;# 
   725  0291                     	;# 
   726  0291                     	;# 
   727  0292                     	;# 
   728  0293                     	;# 
   729  0294                     	;# 
   730  0295                     	;# 
   731  0295                     	;# 
   732  0296                     	;# 
   733  0298                     	;# 
   734  0298                     	;# 
   735  0299                     	;# 
   736  029A                     	;# 
   737  029B                     	;# 
   738  029C                     	;# 
   739  029D                     	;# 
   740  029E                     	;# 
   741  0311                     	;# 
   742  0311                     	;# 
   743  0312                     	;# 
   744  0313                     	;# 
   745  0318                     	;# 
   746  0318                     	;# 
   747  0319                     	;# 
   748  031A                     	;# 
   749  038C                     	;# 
   750  038D                     	;# 
   751  038E                     	;# 
   752  0391                     	;# 
   753  0392                     	;# 
   754  0393                     	;# 
   755  0394                     	;# 
   756  0395                     	;# 
   757  0396                     	;# 
   758  039A                     	;# 
   759  039C                     	;# 
   760  039D                     	;# 
   761  039E                     	;# 
   762  039F                     	;# 
   763  0415                     	;# 
   764  0416                     	;# 
   765  0417                     	;# 
   766  041C                     	;# 
   767  041D                     	;# 
   768  041E                     	;# 
   769  0FE4                     	;# 
   770  0FE5                     	;# 
   771  0FE6                     	;# 
   772  0FE7                     	;# 
   773  0FE8                     	;# 
   774  0FE9                     	;# 
   775  0FEA                     	;# 
   776  0FEB                     	;# 
   777  0FED                     	;# 
   778  0FEE                     	;# 
   779  0FEF                     	;# 
   780  0000                     	;# 
   781  0001                     	;# 
   782  0002                     	;# 
   783  0003                     	;# 
   784  0004                     	;# 
   785  0005                     	;# 
   786  0006                     	;# 
   787  0007                     	;# 
   788  0008                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000D                     	;# 
   794  000E                     	;# 
   795  0011                     	;# 
   796  0012                     	;# 
   797  0013                     	;# 
   798  0014                     	;# 
   799  0015                     	;# 
   800  0016                     	;# 
   801  0016                     	;# 
   802  0017                     	;# 
   803  0018                     	;# 
   804  0019                     	;# 
   805  001A                     	;# 
   806  001B                     	;# 
   807  001C                     	;# 
   808  001E                     	;# 
   809  001F                     	;# 
   810  008C                     	;# 
   811  008D                     	;# 
   812  008E                     	;# 
   813  0091                     	;# 
   814  0092                     	;# 
   815  0093                     	;# 
   816  0094                     	;# 
   817  0095                     	;# 
   818  0096                     	;# 
   819  0097                     	;# 
   820  0098                     	;# 
   821  0099                     	;# 
   822  009A                     	;# 
   823  009B                     	;# 
   824  009B                     	;# 
   825  009C                     	;# 
   826  009D                     	;# 
   827  009E                     	;# 
   828  010C                     	;# 
   829  010D                     	;# 
   830  010E                     	;# 
   831  0111                     	;# 
   832  0112                     	;# 
   833  0113                     	;# 
   834  0114                     	;# 
   835  0115                     	;# 
   836  0116                     	;# 
   837  0117                     	;# 
   838  0118                     	;# 
   839  0119                     	;# 
   840  011A                     	;# 
   841  011B                     	;# 
   842  011D                     	;# 
   843  011E                     	;# 
   844  018C                     	;# 
   845  018D                     	;# 
   846  018E                     	;# 
   847  0191                     	;# 
   848  0191                     	;# 
   849  0192                     	;# 
   850  0193                     	;# 
   851  0193                     	;# 
   852  0193                     	;# 
   853  0194                     	;# 
   854  0195                     	;# 
   855  0196                     	;# 
   856  0199                     	;# 
   857  019A                     	;# 
   858  019B                     	;# 
   859  019B                     	;# 
   860  019C                     	;# 
   861  019D                     	;# 
   862  019E                     	;# 
   863  019F                     	;# 
   864  020C                     	;# 
   865  020D                     	;# 
   866  020E                     	;# 
   867  0211                     	;# 
   868  0211                     	;# 
   869  0212                     	;# 
   870  0212                     	;# 
   871  0213                     	;# 
   872  0213                     	;# 
   873  0214                     	;# 
   874  0214                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0215                     	;# 
   878  0216                     	;# 
   879  0216                     	;# 
   880  0217                     	;# 
   881  0217                     	;# 
   882  0219                     	;# 
   883  021A                     	;# 
   884  021B                     	;# 
   885  021C                     	;# 
   886  021D                     	;# 
   887  021E                     	;# 
   888  021F                     	;# 
   889  0291                     	;# 
   890  0291                     	;# 
   891  0292                     	;# 
   892  0293                     	;# 
   893  0294                     	;# 
   894  0295                     	;# 
   895  0295                     	;# 
   896  0296                     	;# 
   897  0298                     	;# 
   898  0298                     	;# 
   899  0299                     	;# 
   900  029A                     	;# 
   901  029B                     	;# 
   902  029C                     	;# 
   903  029D                     	;# 
   904  029E                     	;# 
   905  0311                     	;# 
   906  0311                     	;# 
   907  0312                     	;# 
   908  0313                     	;# 
   909  0318                     	;# 
   910  0318                     	;# 
   911  0319                     	;# 
   912  031A                     	;# 
   913  038C                     	;# 
   914  038D                     	;# 
   915  038E                     	;# 
   916  0391                     	;# 
   917  0392                     	;# 
   918  0393                     	;# 
   919  0394                     	;# 
   920  0395                     	;# 
   921  0396                     	;# 
   922  039A                     	;# 
   923  039C                     	;# 
   924  039D                     	;# 
   925  039E                     	;# 
   926  039F                     	;# 
   927  0415                     	;# 
   928  0416                     	;# 
   929  0417                     	;# 
   930  041C                     	;# 
   931  041D                     	;# 
   932  041E                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0011                     	;# 
   960  0012                     	;# 
   961  0013                     	;# 
   962  0014                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  001E                     	;# 
   973  001F                     	;# 
   974  008C                     	;# 
   975  008D                     	;# 
   976  008E                     	;# 
   977  0091                     	;# 
   978  0092                     	;# 
   979  0093                     	;# 
   980  0094                     	;# 
   981  0095                     	;# 
   982  0096                     	;# 
   983  0097                     	;# 
   984  0098                     	;# 
   985  0099                     	;# 
   986  009A                     	;# 
   987  009B                     	;# 
   988  009B                     	;# 
   989  009C                     	;# 
   990  009D                     	;# 
   991  009E                     	;# 
   992  010C                     	;# 
   993  010D                     	;# 
   994  010E                     	;# 
   995  0111                     	;# 
   996  0112                     	;# 
   997  0113                     	;# 
   998  0114                     	;# 
   999  0115                     	;# 
  1000  0116                     	;# 
  1001  0117                     	;# 
  1002  0118                     	;# 
  1003  0119                     	;# 
  1004  011A                     	;# 
  1005  011B                     	;# 
  1006  011D                     	;# 
  1007  011E                     	;# 
  1008  018C                     	;# 
  1009  018D                     	;# 
  1010  018E                     	;# 
  1011  0191                     	;# 
  1012  0191                     	;# 
  1013  0192                     	;# 
  1014  0193                     	;# 
  1015  0193                     	;# 
  1016  0193                     	;# 
  1017  0194                     	;# 
  1018  0195                     	;# 
  1019  0196                     	;# 
  1020  0199                     	;# 
  1021  019A                     	;# 
  1022  019B                     	;# 
  1023  019B                     	;# 
  1024  019C                     	;# 
  1025  019D                     	;# 
  1026  019E                     	;# 
  1027  019F                     	;# 
  1028  020C                     	;# 
  1029  020D                     	;# 
  1030  020E                     	;# 
  1031  0211                     	;# 
  1032  0211                     	;# 
  1033  0212                     	;# 
  1034  0212                     	;# 
  1035  0213                     	;# 
  1036  0213                     	;# 
  1037  0214                     	;# 
  1038  0214                     	;# 
  1039  0215                     	;# 
  1040  0215                     	;# 
  1041  0215                     	;# 
  1042  0216                     	;# 
  1043  0216                     	;# 
  1044  0217                     	;# 
  1045  0217                     	;# 
  1046  0219                     	;# 
  1047  021A                     	;# 
  1048  021B                     	;# 
  1049  021C                     	;# 
  1050  021D                     	;# 
  1051  021E                     	;# 
  1052  021F                     	;# 
  1053  0291                     	;# 
  1054  0291                     	;# 
  1055  0292                     	;# 
  1056  0293                     	;# 
  1057  0294                     	;# 
  1058  0295                     	;# 
  1059  0295                     	;# 
  1060  0296                     	;# 
  1061  0298                     	;# 
  1062  0298                     	;# 
  1063  0299                     	;# 
  1064  029A                     	;# 
  1065  029B                     	;# 
  1066  029C                     	;# 
  1067  029D                     	;# 
  1068  029E                     	;# 
  1069  0311                     	;# 
  1070  0311                     	;# 
  1071  0312                     	;# 
  1072  0313                     	;# 
  1073  0318                     	;# 
  1074  0318                     	;# 
  1075  0319                     	;# 
  1076  031A                     	;# 
  1077  038C                     	;# 
  1078  038D                     	;# 
  1079  038E                     	;# 
  1080  0391                     	;# 
  1081  0392                     	;# 
  1082  0393                     	;# 
  1083  0394                     	;# 
  1084  0395                     	;# 
  1085  0396                     	;# 
  1086  039A                     	;# 
  1087  039C                     	;# 
  1088  039D                     	;# 
  1089  039E                     	;# 
  1090  039F                     	;# 
  1091  0415                     	;# 
  1092  0416                     	;# 
  1093  0417                     	;# 
  1094  041C                     	;# 
  1095  041D                     	;# 
  1096  041E                     	;# 
  1097  0FE4                     	;# 
  1098  0FE5                     	;# 
  1099  0FE6                     	;# 
  1100  0FE7                     	;# 
  1101  0FE8                     	;# 
  1102  0FE9                     	;# 
  1103  0FEA                     	;# 
  1104  0FEB                     	;# 
  1105  0FED                     	;# 
  1106  0FEE                     	;# 
  1107  0FEF                     	;# 
  1108  0000                     	;# 
  1109  0001                     	;# 
  1110  0002                     	;# 
  1111  0003                     	;# 
  1112  0004                     	;# 
  1113  0005                     	;# 
  1114  0006                     	;# 
  1115  0007                     	;# 
  1116  0008                     	;# 
  1117  0009                     	;# 
  1118  000A                     	;# 
  1119  000B                     	;# 
  1120  000C                     	;# 
  1121  000D                     	;# 
  1122  000E                     	;# 
  1123  0011                     	;# 
  1124  0012                     	;# 
  1125  0013                     	;# 
  1126  0014                     	;# 
  1127  0015                     	;# 
  1128  0016                     	;# 
  1129  0016                     	;# 
  1130  0017                     	;# 
  1131  0018                     	;# 
  1132  0019                     	;# 
  1133  001A                     	;# 
  1134  001B                     	;# 
  1135  001C                     	;# 
  1136  001E                     	;# 
  1137  001F                     	;# 
  1138  008C                     	;# 
  1139  008D                     	;# 
  1140  008E                     	;# 
  1141  0091                     	;# 
  1142  0092                     	;# 
  1143  0093                     	;# 
  1144  0094                     	;# 
  1145  0095                     	;# 
  1146  0096                     	;# 
  1147  0097                     	;# 
  1148  0098                     	;# 
  1149  0099                     	;# 
  1150  009A                     	;# 
  1151  009B                     	;# 
  1152  009B                     	;# 
  1153  009C                     	;# 
  1154  009D                     	;# 
  1155  009E                     	;# 
  1156  010C                     	;# 
  1157  010D                     	;# 
  1158  010E                     	;# 
  1159  0111                     	;# 
  1160  0112                     	;# 
  1161  0113                     	;# 
  1162  0114                     	;# 
  1163  0115                     	;# 
  1164  0116                     	;# 
  1165  0117                     	;# 
  1166  0118                     	;# 
  1167  0119                     	;# 
  1168  011A                     	;# 
  1169  011B                     	;# 
  1170  011D                     	;# 
  1171  011E                     	;# 
  1172  018C                     	;# 
  1173  018D                     	;# 
  1174  018E                     	;# 
  1175  0191                     	;# 
  1176  0191                     	;# 
  1177  0192                     	;# 
  1178  0193                     	;# 
  1179  0193                     	;# 
  1180  0193                     	;# 
  1181  0194                     	;# 
  1182  0195                     	;# 
  1183  0196                     	;# 
  1184  0199                     	;# 
  1185  019A                     	;# 
  1186  019B                     	;# 
  1187  019B                     	;# 
  1188  019C                     	;# 
  1189  019D                     	;# 
  1190  019E                     	;# 
  1191  019F                     	;# 
  1192  020C                     	;# 
  1193  020D                     	;# 
  1194  020E                     	;# 
  1195  0211                     	;# 
  1196  0211                     	;# 
  1197  0212                     	;# 
  1198  0212                     	;# 
  1199  0213                     	;# 
  1200  0213                     	;# 
  1201  0214                     	;# 
  1202  0214                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0215                     	;# 
  1206  0216                     	;# 
  1207  0216                     	;# 
  1208  0217                     	;# 
  1209  0217                     	;# 
  1210  0219                     	;# 
  1211  021A                     	;# 
  1212  021B                     	;# 
  1213  021C                     	;# 
  1214  021D                     	;# 
  1215  021E                     	;# 
  1216  021F                     	;# 
  1217  0291                     	;# 
  1218  0291                     	;# 
  1219  0292                     	;# 
  1220  0293                     	;# 
  1221  0294                     	;# 
  1222  0295                     	;# 
  1223  0295                     	;# 
  1224  0296                     	;# 
  1225  0298                     	;# 
  1226  0298                     	;# 
  1227  0299                     	;# 
  1228  029A                     	;# 
  1229  029B                     	;# 
  1230  029C                     	;# 
  1231  029D                     	;# 
  1232  029E                     	;# 
  1233  0311                     	;# 
  1234  0311                     	;# 
  1235  0312                     	;# 
  1236  0313                     	;# 
  1237  0318                     	;# 
  1238  0318                     	;# 
  1239  0319                     	;# 
  1240  031A                     	;# 
  1241  038C                     	;# 
  1242  038D                     	;# 
  1243  038E                     	;# 
  1244  0391                     	;# 
  1245  0392                     	;# 
  1246  0393                     	;# 
  1247  0394                     	;# 
  1248  0395                     	;# 
  1249  0396                     	;# 
  1250  039A                     	;# 
  1251  039C                     	;# 
  1252  039D                     	;# 
  1253  039E                     	;# 
  1254  039F                     	;# 
  1255  0415                     	;# 
  1256  0416                     	;# 
  1257  0417                     	;# 
  1258  041C                     	;# 
  1259  041D                     	;# 
  1260  041E                     	;# 
  1261  0FE4                     	;# 
  1262  0FE5                     	;# 
  1263  0FE6                     	;# 
  1264  0FE7                     	;# 
  1265  0FE8                     	;# 
  1266  0FE9                     	;# 
  1267  0FEA                     	;# 
  1268  0FEB                     	;# 
  1269  0FED                     	;# 
  1270  0FEE                     	;# 
  1271  0FEF                     	;# 
  1272  0000                     	;# 
  1273  0001                     	;# 
  1274  0002                     	;# 
  1275  0003                     	;# 
  1276  0004                     	;# 
  1277  0005                     	;# 
  1278  0006                     	;# 
  1279  0007                     	;# 
  1280  0008                     	;# 
  1281  0009                     	;# 
  1282  000A                     	;# 
  1283  000B                     	;# 
  1284  000C                     	;# 
  1285  000D                     	;# 
  1286  000E                     	;# 
  1287  0011                     	;# 
  1288  0012                     	;# 
  1289  0013                     	;# 
  1290  0014                     	;# 
  1291  0015                     	;# 
  1292  0016                     	;# 
  1293  0016                     	;# 
  1294  0017                     	;# 
  1295  0018                     	;# 
  1296  0019                     	;# 
  1297  001A                     	;# 
  1298  001B                     	;# 
  1299  001C                     	;# 
  1300  001E                     	;# 
  1301  001F                     	;# 
  1302  008C                     	;# 
  1303  008D                     	;# 
  1304  008E                     	;# 
  1305  0091                     	;# 
  1306  0092                     	;# 
  1307  0093                     	;# 
  1308  0094                     	;# 
  1309  0095                     	;# 
  1310  0096                     	;# 
  1311  0097                     	;# 
  1312  0098                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0111                     	;# 
  1324  0112                     	;# 
  1325  0113                     	;# 
  1326  0114                     	;# 
  1327  0115                     	;# 
  1328  0116                     	;# 
  1329  0117                     	;# 
  1330  0118                     	;# 
  1331  0119                     	;# 
  1332  011A                     	;# 
  1333  011B                     	;# 
  1334  011D                     	;# 
  1335  011E                     	;# 
  1336  018C                     	;# 
  1337  018D                     	;# 
  1338  018E                     	;# 
  1339  0191                     	;# 
  1340  0191                     	;# 
  1341  0192                     	;# 
  1342  0193                     	;# 
  1343  0193                     	;# 
  1344  0193                     	;# 
  1345  0194                     	;# 
  1346  0195                     	;# 
  1347  0196                     	;# 
  1348  0199                     	;# 
  1349  019A                     	;# 
  1350  019B                     	;# 
  1351  019B                     	;# 
  1352  019C                     	;# 
  1353  019D                     	;# 
  1354  019E                     	;# 
  1355  019F                     	;# 
  1356  020C                     	;# 
  1357  020D                     	;# 
  1358  020E                     	;# 
  1359  0211                     	;# 
  1360  0211                     	;# 
  1361  0212                     	;# 
  1362  0212                     	;# 
  1363  0213                     	;# 
  1364  0213                     	;# 
  1365  0214                     	;# 
  1366  0214                     	;# 
  1367  0215                     	;# 
  1368  0215                     	;# 
  1369  0215                     	;# 
  1370  0216                     	;# 
  1371  0216                     	;# 
  1372  0217                     	;# 
  1373  0217                     	;# 
  1374  0219                     	;# 
  1375  021A                     	;# 
  1376  021B                     	;# 
  1377  021C                     	;# 
  1378  021D                     	;# 
  1379  021E                     	;# 
  1380  021F                     	;# 
  1381  0291                     	;# 
  1382  0291                     	;# 
  1383  0292                     	;# 
  1384  0293                     	;# 
  1385  0294                     	;# 
  1386  0295                     	;# 
  1387  0295                     	;# 
  1388  0296                     	;# 
  1389  0298                     	;# 
  1390  0298                     	;# 
  1391  0299                     	;# 
  1392  029A                     	;# 
  1393  029B                     	;# 
  1394  029C                     	;# 
  1395  029D                     	;# 
  1396  029E                     	;# 
  1397  0311                     	;# 
  1398  0311                     	;# 
  1399  0312                     	;# 
  1400  0313                     	;# 
  1401  0318                     	;# 
  1402  0318                     	;# 
  1403  0319                     	;# 
  1404  031A                     	;# 
  1405  038C                     	;# 
  1406  038D                     	;# 
  1407  038E                     	;# 
  1408  0391                     	;# 
  1409  0392                     	;# 
  1410  0393                     	;# 
  1411  0394                     	;# 
  1412  0395                     	;# 
  1413  0396                     	;# 
  1414  039A                     	;# 
  1415  039C                     	;# 
  1416  039D                     	;# 
  1417  039E                     	;# 
  1418  039F                     	;# 
  1419  0415                     	;# 
  1420  0416                     	;# 
  1421  0417                     	;# 
  1422  041C                     	;# 
  1423  041D                     	;# 
  1424  041E                     	;# 
  1425  0FE4                     	;# 
  1426  0FE5                     	;# 
  1427  0FE6                     	;# 
  1428  0FE7                     	;# 
  1429  0FE8                     	;# 
  1430  0FE9                     	;# 
  1431  0FEA                     	;# 
  1432  0FEB                     	;# 
  1433  0FED                     	;# 
  1434  0FEE                     	;# 
  1435  0FEF                     	;# 
  1436  0000                     	;# 
  1437  0001                     	;# 
  1438  0002                     	;# 
  1439  0003                     	;# 
  1440  0004                     	;# 
  1441  0005                     	;# 
  1442  0006                     	;# 
  1443  0007                     	;# 
  1444  0008                     	;# 
  1445  0009                     	;# 
  1446  000A                     	;# 
  1447  000B                     	;# 
  1448  000C                     	;# 
  1449  000D                     	;# 
  1450  000E                     	;# 
  1451  0011                     	;# 
  1452  0012                     	;# 
  1453  0013                     	;# 
  1454  0014                     	;# 
  1455  0015                     	;# 
  1456  0016                     	;# 
  1457  0016                     	;# 
  1458  0017                     	;# 
  1459  0018                     	;# 
  1460  0019                     	;# 
  1461  001A                     	;# 
  1462  001B                     	;# 
  1463  001C                     	;# 
  1464  001E                     	;# 
  1465  001F                     	;# 
  1466  008C                     	;# 
  1467  008D                     	;# 
  1468  008E                     	;# 
  1469  0091                     	;# 
  1470  0092                     	;# 
  1471  0093                     	;# 
  1472  0094                     	;# 
  1473  0095                     	;# 
  1474  0096                     	;# 
  1475  0097                     	;# 
  1476  0098                     	;# 
  1477  0099                     	;# 
  1478  009A                     	;# 
  1479  009B                     	;# 
  1480  009B                     	;# 
  1481  009C                     	;# 
  1482  009D                     	;# 
  1483  009E                     	;# 
  1484  010C                     	;# 
  1485  010D                     	;# 
  1486  010E                     	;# 
  1487  0111                     	;# 
  1488  0112                     	;# 
  1489  0113                     	;# 
  1490  0114                     	;# 
  1491  0115                     	;# 
  1492  0116                     	;# 
  1493  0117                     	;# 
  1494  0118                     	;# 
  1495  0119                     	;# 
  1496  011A                     	;# 
  1497  011B                     	;# 
  1498  011D                     	;# 
  1499  011E                     	;# 
  1500  018C                     	;# 
  1501  018D                     	;# 
  1502  018E                     	;# 
  1503  0191                     	;# 
  1504  0191                     	;# 
  1505  0192                     	;# 
  1506  0193                     	;# 
  1507  0193                     	;# 
  1508  0193                     	;# 
  1509  0194                     	;# 
  1510  0195                     	;# 
  1511  0196                     	;# 
  1512  0199                     	;# 
  1513  019A                     	;# 
  1514  019B                     	;# 
  1515  019B                     	;# 
  1516  019C                     	;# 
  1517  019D                     	;# 
  1518  019E                     	;# 
  1519  019F                     	;# 
  1520  020C                     	;# 
  1521  020D                     	;# 
  1522  020E                     	;# 
  1523  0211                     	;# 
  1524  0211                     	;# 
  1525  0212                     	;# 
  1526  0212                     	;# 
  1527  0213                     	;# 
  1528  0213                     	;# 
  1529  0214                     	;# 
  1530  0214                     	;# 
  1531  0215                     	;# 
  1532  0215                     	;# 
  1533  0215                     	;# 
  1534  0216                     	;# 
  1535  0216                     	;# 
  1536  0217                     	;# 
  1537  0217                     	;# 
  1538  0219                     	;# 
  1539  021A                     	;# 
  1540  021B                     	;# 
  1541  021C                     	;# 
  1542  021D                     	;# 
  1543  021E                     	;# 
  1544  021F                     	;# 
  1545  0291                     	;# 
  1546  0291                     	;# 
  1547  0292                     	;# 
  1548  0293                     	;# 
  1549  0294                     	;# 
  1550  0295                     	;# 
  1551  0295                     	;# 
  1552  0296                     	;# 
  1553  0298                     	;# 
  1554  0298                     	;# 
  1555  0299                     	;# 
  1556  029A                     	;# 
  1557  029B                     	;# 
  1558  029C                     	;# 
  1559  029D                     	;# 
  1560  029E                     	;# 
  1561  0311                     	;# 
  1562  0311                     	;# 
  1563  0312                     	;# 
  1564  0313                     	;# 
  1565  0318                     	;# 
  1566  0318                     	;# 
  1567  0319                     	;# 
  1568  031A                     	;# 
  1569  038C                     	;# 
  1570  038D                     	;# 
  1571  038E                     	;# 
  1572  0391                     	;# 
  1573  0392                     	;# 
  1574  0393                     	;# 
  1575  0394                     	;# 
  1576  0395                     	;# 
  1577  0396                     	;# 
  1578  039A                     	;# 
  1579  039C                     	;# 
  1580  039D                     	;# 
  1581  039E                     	;# 
  1582  039F                     	;# 
  1583  0415                     	;# 
  1584  0416                     	;# 
  1585  0417                     	;# 
  1586  041C                     	;# 
  1587  041D                     	;# 
  1588  041E                     	;# 
  1589  0FE4                     	;# 
  1590  0FE5                     	;# 
  1591  0FE6                     	;# 
  1592  0FE7                     	;# 
  1593  0FE8                     	;# 
  1594  0FE9                     	;# 
  1595  0FEA                     	;# 
  1596  0FEB                     	;# 
  1597  0FED                     	;# 
  1598  0FEE                     	;# 
  1599  0FEF                     	;# 
  1600  0000                     	;# 
  1601  0001                     	;# 
  1602  0002                     	;# 
  1603  0003                     	;# 
  1604  0004                     	;# 
  1605  0005                     	;# 
  1606  0006                     	;# 
  1607  0007                     	;# 
  1608  0008                     	;# 
  1609  0009                     	;# 
  1610  000A                     	;# 
  1611  000B                     	;# 
  1612  000C                     	;# 
  1613  000D                     	;# 
  1614  000E                     	;# 
  1615  0011                     	;# 
  1616  0012                     	;# 
  1617  0013                     	;# 
  1618  0014                     	;# 
  1619  0015                     	;# 
  1620  0016                     	;# 
  1621  0016                     	;# 
  1622  0017                     	;# 
  1623  0018                     	;# 
  1624  0019                     	;# 
  1625  001A                     	;# 
  1626  001B                     	;# 
  1627  001C                     	;# 
  1628  001E                     	;# 
  1629  001F                     	;# 
  1630  008C                     	;# 
  1631  008D                     	;# 
  1632  008E                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0093                     	;# 
  1636  0094                     	;# 
  1637  0095                     	;# 
  1638  0096                     	;# 
  1639  0097                     	;# 
  1640  0098                     	;# 
  1641  0099                     	;# 
  1642  009A                     	;# 
  1643  009B                     	;# 
  1644  009B                     	;# 
  1645  009C                     	;# 
  1646  009D                     	;# 
  1647  009E                     	;# 
  1648  010C                     	;# 
  1649  010D                     	;# 
  1650  010E                     	;# 
  1651  0111                     	;# 
  1652  0112                     	;# 
  1653  0113                     	;# 
  1654  0114                     	;# 
  1655  0115                     	;# 
  1656  0116                     	;# 
  1657  0117                     	;# 
  1658  0118                     	;# 
  1659  0119                     	;# 
  1660  011A                     	;# 
  1661  011B                     	;# 
  1662  011D                     	;# 
  1663  011E                     	;# 
  1664  018C                     	;# 
  1665  018D                     	;# 
  1666  018E                     	;# 
  1667  0191                     	;# 
  1668  0191                     	;# 
  1669  0192                     	;# 
  1670  0193                     	;# 
  1671  0193                     	;# 
  1672  0193                     	;# 
  1673  0194                     	;# 
  1674  0195                     	;# 
  1675  0196                     	;# 
  1676  0199                     	;# 
  1677  019A                     	;# 
  1678  019B                     	;# 
  1679  019B                     	;# 
  1680  019C                     	;# 
  1681  019D                     	;# 
  1682  019E                     	;# 
  1683  019F                     	;# 
  1684  020C                     	;# 
  1685  020D                     	;# 
  1686  020E                     	;# 
  1687  0211                     	;# 
  1688  0211                     	;# 
  1689  0212                     	;# 
  1690  0212                     	;# 
  1691  0213                     	;# 
  1692  0213                     	;# 
  1693  0214                     	;# 
  1694  0214                     	;# 
  1695  0215                     	;# 
  1696  0215                     	;# 
  1697  0215                     	;# 
  1698  0216                     	;# 
  1699  0216                     	;# 
  1700  0217                     	;# 
  1701  0217                     	;# 
  1702  0219                     	;# 
  1703  021A                     	;# 
  1704  021B                     	;# 
  1705  021C                     	;# 
  1706  021D                     	;# 
  1707  021E                     	;# 
  1708  021F                     	;# 
  1709  0291                     	;# 
  1710  0291                     	;# 
  1711  0292                     	;# 
  1712  0293                     	;# 
  1713  0294                     	;# 
  1714  0295                     	;# 
  1715  0295                     	;# 
  1716  0296                     	;# 
  1717  0298                     	;# 
  1718  0298                     	;# 
  1719  0299                     	;# 
  1720  029A                     	;# 
  1721  029B                     	;# 
  1722  029C                     	;# 
  1723  029D                     	;# 
  1724  029E                     	;# 
  1725  0311                     	;# 
  1726  0311                     	;# 
  1727  0312                     	;# 
  1728  0313                     	;# 
  1729  0318                     	;# 
  1730  0318                     	;# 
  1731  0319                     	;# 
  1732  031A                     	;# 
  1733  038C                     	;# 
  1734  038D                     	;# 
  1735  038E                     	;# 
  1736  0391                     	;# 
  1737  0392                     	;# 
  1738  0393                     	;# 
  1739  0394                     	;# 
  1740  0395                     	;# 
  1741  0396                     	;# 
  1742  039A                     	;# 
  1743  039C                     	;# 
  1744  039D                     	;# 
  1745  039E                     	;# 
  1746  039F                     	;# 
  1747  0415                     	;# 
  1748  0416                     	;# 
  1749  0417                     	;# 
  1750  041C                     	;# 
  1751  041D                     	;# 
  1752  041E                     	;# 
  1753  0FE4                     	;# 
  1754  0FE5                     	;# 
  1755  0FE6                     	;# 
  1756  0FE7                     	;# 
  1757  0FE8                     	;# 
  1758  0FE9                     	;# 
  1759  0FEA                     	;# 
  1760  0FEB                     	;# 
  1761  0FED                     	;# 
  1762  0FEE                     	;# 
  1763  0FEF                     	;# 
  1764                           
  1765                           	psect	idataCOMMON
  1766  0899                     __pidataCOMMON:	
  1767                           
  1768                           ;initializer for _I2C_slaveWriteData
  1769  0899  3455               	retlw	85
  1770                           
  1771                           	psect	idataBANK0
  1772  0002                     __pidataBANK0:	
  1773                           
  1774                           ;initializer for _tmr_scaler
  1775  0002  3401               	retlw	1
  1776                           
  1777                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1778  0003  3401               	retlw	1
  1779                           
  1780                           	psect	idataBANK1
  1781  0898                     __pidataBANK1:	
  1782                           
  1783                           ;initializer for _type_no_data
  1784  0898  3406               	retlw	6
  1785                           
  1786                           	psect	stringtext
  1787  0636                     __pstringtext:	
  1788  0636                     _dpowers:	
  1789  0636  3401               	retlw	1
  1790  0637  3400               	retlw	0
  1791  0638  340A               	retlw	10
  1792  0639  3400               	retlw	0
  1793  063A  3464               	retlw	100
  1794  063B  3400               	retlw	0
  1795  063C  34E8               	retlw	232
  1796  063D  3403               	retlw	3
  1797  063E  3410               	retlw	16
  1798  063F  3427               	retlw	39
  1799  0640                     __end_of_dpowers:	
  1800  0640                     STR_36:	
  1801  0640  3449               	retlw	73	;'I'
  1802  0641  344C               	retlw	76	;'L'
  1803  0642  344C               	retlw	76	;'L'
  1804  0643  3445               	retlw	69	;'E'
  1805  0644  3447               	retlw	71	;'G'
  1806  0645  3441               	retlw	65	;'A'
  1807  0646  344C               	retlw	76	;'L'
  1808  0647  345F               	retlw	95	;'_'
  1809  0648  3454               	retlw	84	;'T'
  1810  0649  3459               	retlw	89	;'Y'
  1811  064A  3450               	retlw	80	;'P'
  1812  064B  3445               	retlw	69	;'E'
  1813  064C  340A               	retlw	10
  1814  064D  3400               	retlw	0
  1815  064E                     STR_1:	
  1816  064E  344B               	retlw	75	;'K'
  1817  064F  3458               	retlw	88	;'X'
  1818  0650  3452               	retlw	82	;'R'
  1819  0651  3439               	retlw	57	;'9'
  1820  0652  3434               	retlw	52	;'4'
  1821  0653  342D               	retlw	45	;'-'
  1822  0654  3432               	retlw	50	;'2'
  1823  0655  3430               	retlw	48	;'0'
  1824  0656  3435               	retlw	53	;'5'
  1825  0657  3430               	retlw	48	;'0'
  1826  0658  3400               	retlw	0
  1827  0659                     STR_16:	
  1828  0659  3424               	retlw	36	;'$'
  1829  065A  343A               	retlw	58	;':'
  1830  065B  3452               	retlw	82	;'R'
  1831  065C  3444               	retlw	68	;'D'
  1832  065D  3441               	retlw	65	;'A'
  1833  065E  343A               	retlw	58	;':'
  1834  065F  3425               	retlw	37	;'%'
  1835  0660  3464               	retlw	100	;'d'
  1836  0661  340A               	retlw	10
  1837  0662  3400               	retlw	0
  1838  0663                     STR_13:	
  1839  0663  3424               	retlw	36	;'$'
  1840  0664  343A               	retlw	58	;':'
  1841  0665  3447               	retlw	71	;'G'
  1842  0666  3445               	retlw	69	;'E'
  1843  0667  3454               	retlw	84	;'T'
  1844  0668  343A               	retlw	58	;':'
  1845  0669  3425               	retlw	37	;'%'
  1846  066A  3464               	retlw	100	;'d'
  1847  066B  340A               	retlw	10
  1848  066C  3400               	retlw	0
  1849  066D                     STR_34:	
  1850  066D  342D               	retlw	45	;'-'
  1851  066E  3425               	retlw	37	;'%'
  1852  066F  3464               	retlw	100	;'d'
  1853  0670  342E               	retlw	46	;'.'
  1854  0671  3425               	retlw	37	;'%'
  1855  0672  3430               	retlw	48	;'0'
  1856  0673  3432               	retlw	50	;'2'
  1857  0674  3464               	retlw	100	;'d'
  1858  0675  340A               	retlw	10
  1859  0676  3400               	retlw	0
  1860  0677                     STR_5:	
  1861  0677  3424               	retlw	36	;'$'
  1862  0678  343A               	retlw	58	;':'
  1863  0679  3457               	retlw	87	;'W'
  1864  067A  3448               	retlw	72	;'H'
  1865  067B  344F               	retlw	79	;'O'
  1866  067C  343A               	retlw	58	;':'
  1867  067D  3425               	retlw	37	;'%'
  1868  067E  3473               	retlw	115	;'s'
  1869  067F  340A               	retlw	10
  1870  0680  3400               	retlw	0
  1871  0681                     STR_9:	
  1872  0681  342A               	retlw	42	;'*'
  1873  0682  343A               	retlw	58	;':'
  1874  0683  3453               	retlw	83	;'S'
  1875  0684  3454               	retlw	84	;'T'
  1876  0685  3450               	retlw	80	;'P'
  1877  0686  343A               	retlw	58	;':'
  1878  0687  3425               	retlw	37	;'%'
  1879  0688  3473               	retlw	115	;'s'
  1880  0689  340A               	retlw	10
  1881  068A  3400               	retlw	0
  1882  068B                     STR_32:	
  1883  068B  342D               	retlw	45	;'-'
  1884  068C  3425               	retlw	37	;'%'
  1885  068D  3464               	retlw	100	;'d'
  1886  068E  342E               	retlw	46	;'.'
  1887  068F  3425               	retlw	37	;'%'
  1888  0690  3430               	retlw	48	;'0'
  1889  0691  3432               	retlw	50	;'2'
  1890  0692  3464               	retlw	100	;'d'
  1891  0693  342C               	retlw	44	;','
  1892  0694  3400               	retlw	0
  1893  0695                     STR_24:	
  1894  0695  3455               	retlw	85	;'U'
  1895  0696  3449               	retlw	73	;'I'
  1896  0697  344E               	retlw	78	;'N'
  1897  0698  3454               	retlw	84	;'T'
  1898  0699  3431               	retlw	49	;'1'
  1899  069A  3436               	retlw	54	;'6'
  1900  069B  345F               	retlw	95	;'_'
  1901  069C  3454               	retlw	84	;'T'
  1902  069D  343A               	retlw	58	;':'
  1903  069E  3400               	retlw	0
  1904  069F                     STR_35:	
  1905  069F  344E               	retlw	78	;'N'
  1906  06A0  344F               	retlw	79	;'O'
  1907  06A1  345F               	retlw	95	;'_'
  1908  06A2  3444               	retlw	68	;'D'
  1909  06A3  3441               	retlw	65	;'A'
  1910  06A4  3454               	retlw	84	;'T'
  1911  06A5  3441               	retlw	65	;'A'
  1912  06A6  340A               	retlw	10
  1913  06A7  3400               	retlw	0
  1914  06A8                     STR_18:	
  1915  06A8  3455               	retlw	85	;'U'
  1916  06A9  3449               	retlw	73	;'I'
  1917  06AA  344E               	retlw	78	;'N'
  1918  06AB  3454               	retlw	84	;'T'
  1919  06AC  3438               	retlw	56	;'8'
  1920  06AD  345F               	retlw	95	;'_'
  1921  06AE  3454               	retlw	84	;'T'
  1922  06AF  343A               	retlw	58	;':'
  1923  06B0  3400               	retlw	0
  1924  06B1                     STR_30:	
  1925  06B1  3446               	retlw	70	;'F'
  1926  06B2  344C               	retlw	76	;'L'
  1927  06B3  344F               	retlw	79	;'O'
  1928  06B4  3441               	retlw	65	;'A'
  1929  06B5  3454               	retlw	84	;'T'
  1930  06B6  343A               	retlw	58	;':'
  1931  06B7  3400               	retlw	0
  1932  06B8                     STR_2:	
  1933  06B8  3428               	retlw	40	;'('
  1934  06B9  346E               	retlw	110	;'n'
  1935  06BA  3475               	retlw	117	;'u'
  1936  06BB  346C               	retlw	108	;'l'
  1937  06BC  346C               	retlw	108	;'l'
  1938  06BD  3429               	retlw	41	;')'
  1939  06BE  3400               	retlw	0
  1940  06BF                     STR_17:	
  1941  06BF  3425               	retlw	37	;'%'
  1942  06C0  3425               	retlw	37	;'%'
  1943  06C1  3425               	retlw	37	;'%'
  1944  06C2  3464               	retlw	100	;'d'
  1945  06C3  343A               	retlw	58	;':'
  1946  06C4  3400               	retlw	0
  1947  06C5                     STR_3:	
  1948  06C5  3423               	retlw	35	;'#'
  1949  06C6  3425               	retlw	37	;'%'
  1950  06C7  3473               	retlw	115	;'s'
  1951  06C8  340A               	retlw	10
  1952  06C9  3400               	retlw	0
  1953  06CA                     STR_20:	
  1954  06CA  3425               	retlw	37	;'%'
  1955  06CB  3475               	retlw	117	;'u'
  1956  06CC  340A               	retlw	10
  1957  06CD  3400               	retlw	0
  1958  06CE                     STR_22:	
  1959  06CE  3425               	retlw	37	;'%'
  1960  06CF  3464               	retlw	100	;'d'
  1961  06D0  342C               	retlw	44	;','
  1962  06D1  3400               	retlw	0
  1963  06D2                     STR_19:	
  1964  06D2  3425               	retlw	37	;'%'
  1965  06D3  3475               	retlw	117	;'u'
  1966  06D4  342C               	retlw	44	;','
  1967  06D5  3400               	retlw	0
  1968  06D6                     STR_15:	
  1969  06D6  3452               	retlw	82	;'R'
  1970  06D7  3444               	retlw	68	;'D'
  1971  06D8  3441               	retlw	65	;'A'
  1972  06D9  3400               	retlw	0
  1973  06DA                     STR_14:	
  1974  06DA  3457               	retlw	87	;'W'
  1975  06DB  3444               	retlw	68	;'D'
  1976  06DC  3441               	retlw	65	;'A'
  1977  06DD  3400               	retlw	0
  1978  06DE                     STR_7:	
  1979  06DE  3453               	retlw	83	;'S'
  1980  06DF  3454               	retlw	84	;'T'
  1981  06E0  3441               	retlw	65	;'A'
  1982  06E1  3400               	retlw	0
  1983  06E2                     STR_10:	
  1984  06E2  3441               	retlw	65	;'A'
  1985  06E3  3443               	retlw	67	;'C'
  1986  06E4  344B               	retlw	75	;'K'
  1987  06E5  3400               	retlw	0
  1988  06E6                     STR_4:	
  1989  06E6  3457               	retlw	87	;'W'
  1990  06E7  3448               	retlw	72	;'H'
  1991  06E8  344F               	retlw	79	;'O'
  1992  06E9  3400               	retlw	0
  1993  06EA                     STR_8:	
  1994  06EA  3453               	retlw	83	;'S'
  1995  06EB  3454               	retlw	84	;'T'
  1996  06EC  3450               	retlw	80	;'P'
  1997  06ED  3400               	retlw	0
  1998  06EE                     STR_12:	
  1999  06EE  3447               	retlw	71	;'G'
  2000  06EF  3445               	retlw	69	;'E'
  2001  06F0  3454               	retlw	84	;'T'
  2002  06F1  3400               	retlw	0
  2003  06F2                     STR_11:	
  2004  06F2  3453               	retlw	83	;'S'
  2005  06F3  3445               	retlw	69	;'E'
  2006  06F4  3454               	retlw	84	;'T'
  2007  06F5  3400               	retlw	0
  2008  06F6                     STR_6:	
  2009  06F6  3453               	retlw	83	;'S'
  2010  06F7  3441               	retlw	65	;'A'
  2011  06F8  3456               	retlw	86	;'V'
  2012  06F9  3400               	retlw	0
  2013  065F                     
  2014                           ; #config settings
  2015  0000                     
  2016                           	psect	nvBANK1
  2017  00DA                     __pnvBANK1:	
  2018  00DA                     _device_id_:	
  2019  00DA                     	ds	2
  2020  00DC                     _PROTOCOL_Set_Handler:	
  2021  00DC                     	ds	2
  2022  00DE                     _PROTOCOL_Stop_Handler:	
  2023  00DE                     	ds	2
  2024  00E0                     _PROTOCOL_Start_Handler:	
  2025  00E0                     	ds	2
  2026  0015                     _TMR0	set	21
  2027  000B                     _INTCONbits	set	11
  2028  0011                     _PIR1bits	set	17
  2029  005A                     _TMR0IF	set	90
  2030  0095                     _OPTION_REG	set	149
  2031  009D                     _ADCON0bits	set	157
  2032  009C                     _ADRESH	set	156
  2033  009B                     _ADRESL	set	155
  2034  009E                     _ADCON1	set	158
  2035  009D                     _ADCON0	set	157
  2036  0095                     _OPTION_REGbits	set	149
  2037  008E                     _TRISC	set	142
  2038  008D                     _TRISB	set	141
  2039  008C                     _TRISA	set	140
  2040  0097                     _WDTCON	set	151
  2041  0098                     _OSCTUNE	set	152
  2042  0099                     _OSCCON	set	153
  2043  0091                     _PIE1bits	set	145
  2044  04D6                     _PLLR	set	1238
  2045  010E                     _LATCbits	set	270
  2046  011D                     _APFCON0	set	285
  2047  011E                     _APFCON1	set	286
  2048  010E                     _LATC	set	270
  2049  010D                     _LATB	set	269
  2050  010C                     _LATA	set	268
  2051  0196                     _EECON2	set	406
  2052  0193                     _EEDATL	set	403
  2053  0194                     _EEDATH	set	404
  2054  0195                     _EECON1bits	set	405
  2055  0192                     _EEADRH	set	402
  2056  0191                     _EEADRL	set	401
  2057  018C                     _ANSELA	set	396
  2058  018D                     _ANSELB	set	397
  2059  018E                     _ANSELC	set	398
  2060  0199                     _RCREG	set	409
  2061  019D                     _RCSTAbits	set	413
  2062  019A                     _TXREG	set	410
  2063  019C                     _SPBRGH	set	412
  2064  019B                     _SPBRGL	set	411
  2065  019E                     _TXSTA	set	414
  2066  019D                     _RCSTA	set	413
  2067  019F                     _BAUDCON	set	415
  2068  020E                     _WPUC	set	526
  2069  020C                     _WPUA	set	524
  2070  020D                     _WPUB	set	525
  2071  0215                     _SSP1CON1bits	set	533
  2072  0216                     _SSP1CON2bits	set	534
  2073  0214                     _SSP1STATbits	set	532
  2074  0211                     _SSP1BUF	set	529
  2075  0212                     _SSP1ADD	set	530
  2076  0213                     _SSP1MSK	set	531
  2077  0217                     _SSP1CON3	set	535
  2078  0216                     _SSP1CON2	set	534
  2079  0215                     _SSP1CON1	set	533
  2080  0214                     _SSP1STAT	set	532
  2081                           
  2082                           	psect	cinit
  2083  0032                     start_initialization:	
  2084  0032                     __initialization:	
  2085                           
  2086                           ; Initialize objects allocated to COMMON
  2087  0032  3188  2099  3180   	fcall	__pidataCOMMON	;fetch initializer
  2088  0035  00FD               	movwf	__pdataCOMMON& (0+127)
  2089                           
  2090                           ; Initialize objects allocated to BANK0
  2091  0036  3180  2002  3180   	fcall	__pidataBANK0	;fetch initializer
  2092  0039  00EE               	movwf	__pdataBANK0& (0+127)
  2093  003A  3180  2003  3180   	fcall	__pidataBANK0+1	;fetch initializer
  2094  003D  00EF               	movwf	(__pdataBANK0+1)& (0+127)
  2095                           
  2096                           ; Initialize objects allocated to BANK1
  2097  003E  0021               	movlb	1	; select bank1
  2098  003F  3188  2098  3180   	fcall	__pidataBANK1	;fetch initializer
  2099  0042  00E2               	movwf	__pdataBANK1& (0+127)
  2100                           
  2101                           ; Clear objects allocated to COMMON
  2102  0043  01FA               	clrf	__pbssCOMMON& (0+127)
  2103  0044  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2104  0045  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2105                           
  2106                           ; Clear objects allocated to BANK0
  2107  0046  305C               	movlw	low __pbssBANK0
  2108  0047  0084               	movwf	4
  2109  0048  3000               	movlw	high __pbssBANK0
  2110  0049  0085               	movwf	5
  2111  004A  3012               	movlw	18
  2112  004B  3188  20CD  3180   	fcall	clear_ram0
  2113                           
  2114                           ; Clear objects allocated to BANK1
  2115  004E  30A0               	movlw	low __pbssBANK1
  2116  004F  0084               	movwf	4
  2117  0050  3000               	movlw	high __pbssBANK1
  2118  0051  0085               	movwf	5
  2119  0052  303A               	movlw	58
  2120  0053  3188  20CD  3180   	fcall	clear_ram0
  2121                           
  2122                           ; Clear objects allocated to BANK2
  2123  0056  3020               	movlw	low __pbssBANK2
  2124  0057  0084               	movwf	4
  2125  0058  3001               	movlw	high __pbssBANK2
  2126  0059  0085               	movwf	5
  2127  005A  3030               	movlw	48
  2128  005B  3188  20CD  3180   	fcall	clear_ram0
  2129                           
  2130                           ; Clear objects allocated to BANK3
  2131  005E  30A0               	movlw	low __pbssBANK3
  2132  005F  0084               	movwf	4
  2133  0060  3001               	movlw	high __pbssBANK3
  2134  0061  0085               	movwf	5
  2135  0062  3030               	movlw	48
  2136  0063  3188  20CD         	fcall	clear_ram0
  2137  0065                     end_of_initialization:	
  2138                           ;End of C runtime variable initialization code
  2139                           
  2140  0065                     __end_of__initialization:	
  2141  0065  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2142  0066  0020               	movlb	0
  2143  0067  318B  2B3F         	ljmp	_main	;jump to C main() function
  2144                           
  2145                           	psect	bssCOMMON
  2146  007A                     __pbssCOMMON:	
  2147  007A                     _eusartTxBufferRemaining:	
  2148  007A                     	ds	1
  2149  007B                     _eusartTxTail:	
  2150  007B                     	ds	1
  2151  007C                     _eusartTxHead:	
  2152  007C                     	ds	1
  2153                           
  2154                           	psect	dataCOMMON
  2155  007D                     __pdataCOMMON:	
  2156  007D                     _I2C_slaveWriteData:	
  2157  007D                     	ds	1
  2158                           
  2159                           	psect	bssBANK0
  2160  005C                     __pbssBANK0:	
  2161  005C                     _j:	
  2162  005C                     	ds	1
  2163  005D                     _i:	
  2164  005D                     	ds	1
  2165  005E                     _tmr_cnt:	
  2166  005E                     	ds	1
  2167  005F                     _sec_cnt:	
  2168  005F                     	ds	1
  2169  0060                     _invoked:	
  2170  0060                     	ds	1
  2171  0061                     _running:	
  2172  0061                     	ds	1
  2173  0062                     _locked:	
  2174  0062                     	ds	1
  2175  0063                     _value:	
  2176  0063                     	ds	1
  2177  0064                     _cnt:	
  2178  0064                     	ds	1
  2179  0065                     _slave_address:	
  2180  0065                     	ds	1
  2181  0066                     _timer0ReloadVal:	
  2182  0066                     	ds	1
  2183  0067                     _eusartRxCount:	
  2184  0067                     	ds	1
  2185  0068                     _eusartRxTail:	
  2186  0068                     	ds	1
  2187  0069                     _eusartRxHead:	
  2188  0069                     	ds	1
  2189  006A                     I2C1_StatusCallback@ext_cnt:	
  2190  006A                     	ds	1
  2191  006B                     I2C1_StatusCallback@ext_len:	
  2192  006B                     	ds	1
  2193  006C                     I2C1_StatusCallback@next:	
  2194  006C                     	ds	1
  2195  006D                     I2C1_StatusCallback@slaveWriteType:	
  2196  006D                     	ds	1
  2197                           
  2198                           	psect	dataBANK0
  2199  006E                     __pdataBANK0:	
  2200  006E                     _tmr_scaler:	
  2201  006E                     	ds	1
  2202  006F                     _BACKPLANE_SLAVE_ADDRESS:	
  2203  006F                     	ds	1
  2204                           
  2205                           	psect	bssBANK1
  2206  00A0                     __pbssBANK1:	
  2207  00A0                     _eusartRxBuffer:	
  2208  00A0                     	ds	8
  2209  00A8                     _eusartTxBuffer:	
  2210  00A8                     	ds	8
  2211  00B0                     _float100:	
  2212  00B0                     	ds	2
  2213  00B2                     _PROTOCOL_Inv_Handler:	
  2214  00B2                     	ds	2
  2215  00B4                     _PROTOCOL_Extension_Handler:	
  2216  00B4                     	ds	2
  2217  00B6                     _PROTOCOL_Loop_Func:	
  2218  00B6                     	ds	2
  2219  00B8                     _data:	
  2220  00B8                     	ds	1
  2221  00B9                     _backplane_slave_enabled:	
  2222  00B9                     	ds	1
  2223  00BA                     _readbuf_status:	
  2224  00BA                     	ds	1
  2225  00BB                     _tmr_overflow:	
  2226  00BB                     	ds	1
  2227  00BC                     _sendbuf:	
  2228  00BC                     	ds	16
  2229  00CC                     _readbuf:	
  2230  00CC                     	ds	5
  2231  00D1                     PROTOCOL_Send_float@pbuf:	
  2232  00D1                     	ds	3
  2233  00D4                     PROTOCOL_Send_int16_t@pbuf:	
  2234  00D4                     	ds	2
  2235  00D6                     PROTOCOL_Send_uint16_t@pbuf:	
  2236  00D6                     	ds	2
  2237  00D8                     PROTOCOL_Send_int8_t@pbuf:	
  2238  00D8                     	ds	1
  2239  00D9                     PROTOCOL_Send_uint8_t@pbuf:	
  2240  00D9                     	ds	1
  2241                           
  2242                           	psect	dataBANK1
  2243  00E2                     __pdataBANK1:	
  2244  00E2                     _type_no_data:	
  2245  00E2                     	ds	1
  2246                           
  2247                           	psect	bssBANK2
  2248  0120                     __pbssBANK2:	
  2249  0120                     _buf:	
  2250  0120                     	ds	48
  2251                           
  2252                           	psect	bssBANK3
  2253  01A0                     __pbssBANK3:	
  2254  01A0                     I2C1_StatusCallback@ext_buf:	
  2255  01A0                     	ds	48
  2256                           
  2257                           	psect	clrtext
  2258  08CD                     clear_ram0:	
  2259                           ;	Called with FSR0 containing the base address, and
  2260                           ;	WREG with the size to clear
  2261                           
  2262  08CD  0064               	clrwdt	;clear the watchdog before getting into this loop
  2263  08CE                     clrloop0:	
  2264  08CE  0180               	clrf	0	;clear RAM location pointed to by FSR
  2265  08CF  3101               	addfsr 0,1
  2266  08D0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2267  08D1  28CE               	goto	clrloop0	;have we reached the end yet?
  2268  08D2  3400               	retlw	0	;all done for this memory range, return
  2269                           
  2270                           	psect	cstackCOMMON
  2271  0070                     __pcstackCOMMON:	
  2272  0070                     ?_isdigit:	
  2273  0070                     ?_PROTOCOL_Read_Device_Address:	
  2274                           ; 1 bit 
  2275                           
  2276  0070                     ?_I2C1_StatusCallback:	
  2277                           ; 1 bytes @ 0x0
  2278                           
  2279  0070                     ?_PROTOCOL_SET:	
  2280                           ; 1 bytes @ 0x0
  2281                           
  2282  0070                     ?_PROTOCOL_STA:	
  2283                           ; 1 bytes @ 0x0
  2284                           
  2285  0070                     ?_PROTOCOL_STP:	
  2286                           ; 1 bytes @ 0x0
  2287                           
  2288  0070                     ?_PROTOCOL_SAV:	
  2289                           ; 1 bytes @ 0x0
  2290                           
  2291  0070                     ?_PROTOCOL_INV:	
  2292                           ; 1 bytes @ 0x0
  2293                           
  2294  0070                     ??_PROTOCOL_INV:	
  2295                           ; 1 bytes @ 0x0
  2296                           
  2297  0070                     ?_PROTOCOL_RST:	
  2298                           ; 1 bytes @ 0x0
  2299                           
  2300  0070                     ??_PROTOCOL_RST:	
  2301                           ; 1 bytes @ 0x0
  2302                           
  2303  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2304                           ; 1 bytes @ 0x0
  2305                           
  2306  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2307                           ; 1 bytes @ 0x0
  2308                           
  2309  0070                     ?_PROTOCOL_Read_Lock:	
  2310                           ; 1 bytes @ 0x0
  2311                           
  2312  0070                     ??_PROTOCOL_Read_Lock:	
  2313                           ; 1 bytes @ 0x0
  2314                           
  2315  0070                     ?_PROTOCOL_EXT:	
  2316                           ; 1 bytes @ 0x0
  2317                           
  2318  0070                     ?_PROTOCOL_I2C_WHO:	
  2319                           ; 1 bytes @ 0x0
  2320                           
  2321  0070                     ??_PROTOCOL_I2C_WHO:	
  2322                           ; 1 bytes @ 0x0
  2323                           
  2324  0070                     ?_PROTOCOL_I2C_SEN:	
  2325                           ; 1 bytes @ 0x0
  2326                           
  2327  0070                     ??_PROTOCOL_I2C_SEN:	
  2328                           ; 1 bytes @ 0x0
  2329                           
  2330  0070                     ?_PROTOCOL_I2C_GET:	
  2331                           ; 1 bytes @ 0x0
  2332                           
  2333  0070                     ??_PROTOCOL_I2C_GET:	
  2334                           ; 1 bytes @ 0x0
  2335                           
  2336  0070                     ?_PIN_MANAGER_Initialize:	
  2337                           ; 1 bytes @ 0x0
  2338                           
  2339  0070                     ?_OSCILLATOR_Initialize:	
  2340                           ; 1 bytes @ 0x0
  2341                           
  2342  0070                     ?_WDT_Initialize:	
  2343                           ; 1 bytes @ 0x0
  2344                           
  2345  0070                     ?_ADC_Initialize:	
  2346                           ; 1 bytes @ 0x0
  2347                           
  2348  0070                     ?_TMR0_Initialize:	
  2349                           ; 1 bytes @ 0x0
  2350                           
  2351  0070                     ?_EUSART_Initialize:	
  2352                           ; 1 bytes @ 0x0
  2353                           
  2354  0070                     ?_EUSART_Transmit_ISR:	
  2355                           ; 1 bytes @ 0x0
  2356                           
  2357  0070                     ??_EUSART_Transmit_ISR:	
  2358                           ; 1 bytes @ 0x0
  2359                           
  2360  0070                     ?_EUSART_Receive_ISR:	
  2361                           ; 1 bytes @ 0x0
  2362                           
  2363  0070                     ??_EUSART_Receive_ISR:	
  2364                           ; 1 bytes @ 0x0
  2365                           
  2366  0070                     ?_PROTOCOL_Loop:	
  2367                           ; 1 bytes @ 0x0
  2368                           
  2369  0070                     ?_I2C1_Initialize:	
  2370                           ; 1 bytes @ 0x0
  2371                           
  2372  0070                     ?_I2C1_ISR:	
  2373                           ; 1 bytes @ 0x0
  2374                           
  2375  0070                     ?_INTERRUPT_InterruptManager:	
  2376                           ; 1 bytes @ 0x0
  2377                           
  2378  0070                     ?_EUSART_Read:	
  2379                           ; 1 bytes @ 0x0
  2380                           
  2381  0070                     ?_EUSART_Write:	
  2382                           ; 1 bytes @ 0x0
  2383                           
  2384  0070                     ?_putch:	
  2385                           ; 1 bytes @ 0x0
  2386                           
  2387  0070                     ?_DATAEE_ReadByte:	
  2388                           ; 1 bytes @ 0x0
  2389                           
  2390  0070                     ?_ADC_SelectChannel:	
  2391                           ; 1 bytes @ 0x0
  2392                           
  2393  0070                     ?_ADC_StartConversion:	
  2394                           ; 1 bytes @ 0x0
  2395                           
  2396  0070                     ?_ADC_IsConversionDone:	
  2397                           ; 1 bytes @ 0x0
  2398                           
  2399  0070                     ?_TMR0_HasOverflowOccured:	
  2400                           ; 1 bytes @ 0x0
  2401                           
  2402  0070                     ?_inv_handler:	
  2403                           ; 1 bytes @ 0x0
  2404                           
  2405  0070                     ?_main:	
  2406                           ; 1 bytes @ 0x0
  2407                           
  2408  0070                     ?_PROTOCOL_Write_Device_Address:	
  2409                           ; 1 bytes @ 0x0
  2410                           
  2411  0070                     ?i1_DATAEE_WriteByte:	
  2412                           ; 1 bytes @ 0x0
  2413                           
  2414  0070                     ?i1_PROTOCOL_STA:	
  2415                           ; 1 bytes @ 0x0
  2416                           
  2417  0070                     ??i1_PROTOCOL_STA:	
  2418                           ; 1 bytes @ 0x0
  2419                           
  2420  0070                     ?i1_PROTOCOL_STP:	
  2421                           ; 1 bytes @ 0x0
  2422                           
  2423  0070                     ??i1_PROTOCOL_STP:	
  2424                           ; 1 bytes @ 0x0
  2425                           
  2426  0070                     ?i1_PROTOCOL_SAV:	
  2427                           ; 1 bytes @ 0x0
  2428                           
  2429  0070                     ?i1_PROTOCOL_SET:	
  2430                           ; 1 bytes @ 0x0
  2431                           
  2432  0070                     ??i1_PROTOCOL_SET:	
  2433                           ; 1 bytes @ 0x0
  2434                           
  2435  0070                     ?i1_PROTOCOL_EXT:	
  2436                           ; 1 bytes @ 0x0
  2437                           
  2438  0070                     ??i1_PROTOCOL_EXT:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0070                     i1DATAEE_WriteByte@bData:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444                           
  2445                           ; 1 bytes @ 0x0
  2446  0070                     	ds	1
  2447  0071                     ??i1_DATAEE_WriteByte:	
  2448  0071                     PROTOCOL_I2C_SEN@pdata:	
  2449                           ; 1 bytes @ 0x1
  2450                           
  2451  0071                     i1DATAEE_WriteByte@bAdd:	
  2452                           ; 1 bytes @ 0x1
  2453                           
  2454  0071                     i1PROTOCOL_SET@value_:	
  2455                           ; 1 bytes @ 0x1
  2456                           
  2457                           
  2458                           ; 1 bytes @ 0x1
  2459  0071                     	ds	1
  2460  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2461                           
  2462                           ; 1 bytes @ 0x2
  2463  0072                     	ds	1
  2464  0073                     ??i1_PROTOCOL_SAV:	
  2465                           
  2466                           ; 1 bytes @ 0x3
  2467  0073                     	ds	1
  2468  0074                     ??_I2C1_StatusCallback:	
  2469                           
  2470                           ; 1 bytes @ 0x4
  2471  0074                     	ds	1
  2472  0075                     I2C1_StatusCallback@i2c_bus_state:	
  2473                           
  2474                           ; 1 bytes @ 0x5
  2475  0075                     	ds	1
  2476  0076                     I2C1_StatusCallback@pdata:	
  2477                           
  2478                           ; 1 bytes @ 0x6
  2479  0076                     	ds	1
  2480  0077                     ??_I2C1_ISR:	
  2481                           
  2482                           ; 1 bytes @ 0x7
  2483  0077                     	ds	1
  2484  0078                     I2C1_ISR@i2c_data:	
  2485                           
  2486                           ; 1 bytes @ 0x8
  2487  0078                     	ds	1
  2488  0079                     ??_INTERRUPT_InterruptManager:	
  2489                           
  2490                           ; 1 bytes @ 0x9
  2491  0079                     	ds	1
  2492                           
  2493                           	psect	cstackBANK0
  2494  0020                     __pcstackBANK0:	
  2495  0020                     ??_PROTOCOL_Read_Device_Address:	
  2496  0020                     ??_PROTOCOL_SET:	
  2497                           ; 1 bytes @ 0x0
  2498                           
  2499  0020                     ??_PROTOCOL_STA:	
  2500                           ; 1 bytes @ 0x0
  2501                           
  2502  0020                     ??_PROTOCOL_STP:	
  2503                           ; 1 bytes @ 0x0
  2504                           
  2505  0020                     ??_PROTOCOL_EXT:	
  2506                           ; 1 bytes @ 0x0
  2507                           
  2508  0020                     ??_PIN_MANAGER_Initialize:	
  2509                           ; 1 bytes @ 0x0
  2510                           
  2511  0020                     ??_OSCILLATOR_Initialize:	
  2512                           ; 1 bytes @ 0x0
  2513                           
  2514  0020                     ??_WDT_Initialize:	
  2515                           ; 1 bytes @ 0x0
  2516                           
  2517  0020                     ??_ADC_Initialize:	
  2518                           ; 1 bytes @ 0x0
  2519                           
  2520  0020                     ??_TMR0_Initialize:	
  2521                           ; 1 bytes @ 0x0
  2522                           
  2523  0020                     ??_EUSART_Initialize:	
  2524                           ; 1 bytes @ 0x0
  2525                           
  2526  0020                     ??_isdigit:	
  2527                           ; 1 bytes @ 0x0
  2528                           
  2529  0020                     ??_I2C1_Initialize:	
  2530                           ; 1 bytes @ 0x0
  2531                           
  2532  0020                     ??_EUSART_Read:	
  2533                           ; 1 bytes @ 0x0
  2534                           
  2535  0020                     ??_EUSART_Write:	
  2536                           ; 1 bytes @ 0x0
  2537                           
  2538  0020                     ?_DATAEE_WriteByte:	
  2539                           ; 1 bytes @ 0x0
  2540                           
  2541  0020                     ??_DATAEE_ReadByte:	
  2542                           ; 1 bytes @ 0x0
  2543                           
  2544  0020                     ??_ADC_SelectChannel:	
  2545                           ; 1 bytes @ 0x0
  2546                           
  2547  0020                     ??_ADC_StartConversion:	
  2548                           ; 1 bytes @ 0x0
  2549                           
  2550  0020                     ??_ADC_IsConversionDone:	
  2551                           ; 1 bytes @ 0x0
  2552                           
  2553  0020                     ??_TMR0_HasOverflowOccured:	
  2554                           ; 1 bytes @ 0x0
  2555                           
  2556  0020                     ?_PROTOCOL_I2C_Set_TLV:	
  2557                           ; 1 bytes @ 0x0
  2558                           
  2559  0020                     ?___bmul:	
  2560                           ; 1 bytes @ 0x0
  2561                           
  2562  0020                     ?_strncmp:	
  2563                           ; 1 bytes @ 0x0
  2564                           
  2565  0020                     ?_ADC_GetConversionResult:	
  2566                           ; 2 bytes @ 0x0
  2567                           
  2568  0020                     ?___wmul:	
  2569                           ; 2 bytes @ 0x0
  2570                           
  2571  0020                     ?___awdiv:	
  2572                           ; 2 bytes @ 0x0
  2573                           
  2574  0020                     ?___awmod:	
  2575                           ; 2 bytes @ 0x0
  2576                           
  2577  0020                     ?___lwdiv:	
  2578                           ; 2 bytes @ 0x0
  2579                           
  2580  0020                     ?___ftpack:	
  2581                           ; 2 bytes @ 0x0
  2582                           
  2583  0020                     DATAEE_WriteByte@bData:	
  2584                           ; 3 bytes @ 0x0
  2585                           
  2586  0020                     DATAEE_ReadByte@bAdd:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589  0020                     PROTOCOL_EXT@char_buf:	
  2590                           ; 1 bytes @ 0x0
  2591                           
  2592  0020                     PROTOCOL_I2C_Set_TLV@length:	
  2593                           ; 1 bytes @ 0x0
  2594                           
  2595  0020                     ___bmul@multiplicand:	
  2596                           ; 1 bytes @ 0x0
  2597                           
  2598  0020                     _isdigit$1239:	
  2599                           ; 1 bytes @ 0x0
  2600                           
  2601  0020                     ___wmul@multiplier:	
  2602                           ; 1 bytes @ 0x0
  2603                           
  2604  0020                     ___awdiv@divisor:	
  2605                           ; 2 bytes @ 0x0
  2606                           
  2607  0020                     ___awmod@divisor:	
  2608                           ; 2 bytes @ 0x0
  2609                           
  2610  0020                     ___lwdiv@divisor:	
  2611                           ; 2 bytes @ 0x0
  2612                           
  2613  0020                     strncmp@s1:	
  2614                           ; 2 bytes @ 0x0
  2615                           
  2616  0020                     ___ftpack@arg:	
  2617                           ; 2 bytes @ 0x0
  2618                           
  2619                           
  2620                           ; 3 bytes @ 0x0
  2621  0020                     	ds	1
  2622  0021                     ?_PROTOCOL_Initialize:	
  2623  0021                     ??_DATAEE_WriteByte:	
  2624                           ; 1 bytes @ 0x1
  2625                           
  2626  0021                     ??___bmul:	
  2627                           ; 1 bytes @ 0x1
  2628                           
  2629  0021                     EUSART_Read@readValue:	
  2630                           ; 1 bytes @ 0x1
  2631                           
  2632  0021                     EUSART_Write@txData:	
  2633                           ; 1 bytes @ 0x1
  2634                           
  2635  0021                     DATAEE_WriteByte@bAdd:	
  2636                           ; 1 bytes @ 0x1
  2637                           
  2638  0021                     ADC_SelectChannel@channel:	
  2639                           ; 1 bytes @ 0x1
  2640                           
  2641  0021                     PROTOCOL_SET@value_:	
  2642                           ; 1 bytes @ 0x1
  2643                           
  2644  0021                     PROTOCOL_I2C_Set_TLV@pbuffer:	
  2645                           ; 1 bytes @ 0x1
  2646                           
  2647  0021                     isdigit@c:	
  2648                           ; 1 bytes @ 0x1
  2649                           
  2650  0021                     PROTOCOL_Initialize@device_id:	
  2651                           ; 1 bytes @ 0x1
  2652                           
  2653                           
  2654                           ; 2 bytes @ 0x1
  2655  0021                     	ds	1
  2656  0022                     ??_putch:	
  2657  0022                     ??_ADC_GetConversionResult:	
  2658                           ; 1 bytes @ 0x2
  2659                           
  2660  0022                     ??_PROTOCOL_I2C_Set_TLV:	
  2661                           ; 1 bytes @ 0x2
  2662                           
  2663  0022                     putch@txData:	
  2664                           ; 1 bytes @ 0x2
  2665                           
  2666  0022                     DATAEE_WriteByte@GIEBitValue:	
  2667                           ; 1 bytes @ 0x2
  2668                           
  2669  0022                     ___bmul@product:	
  2670                           ; 1 bytes @ 0x2
  2671                           
  2672  0022                     strncmp@s2:	
  2673                           ; 1 bytes @ 0x2
  2674                           
  2675  0022                     ___wmul@multiplicand:	
  2676                           ; 1 bytes @ 0x2
  2677                           
  2678  0022                     ___awdiv@dividend:	
  2679                           ; 2 bytes @ 0x2
  2680                           
  2681  0022                     ___awmod@dividend:	
  2682                           ; 2 bytes @ 0x2
  2683                           
  2684  0022                     ___lwdiv@dividend:	
  2685                           ; 2 bytes @ 0x2
  2686                           
  2687                           
  2688                           ; 2 bytes @ 0x2
  2689  0022                     	ds	1
  2690  0023                     ??_PROTOCOL_SAV:	
  2691  0023                     ??_PROTOCOL_Write_Device_Address:	
  2692                           ; 1 bytes @ 0x3
  2693                           
  2694  0023                     PROTOCOL_Initialize@start_handler:	
  2695                           ; 1 bytes @ 0x3
  2696                           
  2697  0023                     PROTOCOL_I2C_Set_TLV@type:	
  2698                           ; 1 bytes @ 0x3
  2699                           
  2700  0023                     ___bmul@multiplier:	
  2701                           ; 1 bytes @ 0x3
  2702                           
  2703  0023                     ___ftpack@exp:	
  2704                           ; 1 bytes @ 0x3
  2705                           
  2706  0023                     strncmp@len:	
  2707                           ; 1 bytes @ 0x3
  2708                           
  2709                           
  2710                           ; 2 bytes @ 0x3
  2711  0023                     	ds	1
  2712  0024                     ??___wmul:	
  2713  0024                     ??___awdiv:	
  2714                           ; 1 bytes @ 0x4
  2715                           
  2716  0024                     ??___awmod:	
  2717                           ; 1 bytes @ 0x4
  2718                           
  2719  0024                     ??___lwdiv:	
  2720                           ; 1 bytes @ 0x4
  2721                           
  2722  0024                     PROTOCOL_Initialize@stop_handler:	
  2723                           ; 1 bytes @ 0x4
  2724                           
  2725  0024                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  2726                           ; 1 bytes @ 0x4
  2727                           
  2728  0024                     PROTOCOL_I2C_Set_TLV@status:	
  2729                           ; 1 bytes @ 0x4
  2730                           
  2731  0024                     ___ftpack@sign:	
  2732                           ; 1 bytes @ 0x4
  2733                           
  2734  0024                     ___wmul@product:	
  2735                           ; 1 bytes @ 0x4
  2736                           
  2737                           
  2738                           ; 2 bytes @ 0x4
  2739  0024                     	ds	1
  2740  0025                     ??_strncmp:	
  2741  0025                     ??___ftpack:	
  2742                           ; 1 bytes @ 0x5
  2743                           
  2744  0025                     PROTOCOL_Initialize@set_handler:	
  2745                           ; 1 bytes @ 0x5
  2746                           
  2747  0025                     ___awdiv@counter:	
  2748                           ; 1 bytes @ 0x5
  2749                           
  2750  0025                     ___awmod@counter:	
  2751                           ; 1 bytes @ 0x5
  2752                           
  2753  0025                     ___lwdiv@quotient:	
  2754                           ; 1 bytes @ 0x5
  2755                           
  2756                           
  2757                           ; 2 bytes @ 0x5
  2758  0025                     	ds	1
  2759  0026                     ?_atoi:	
  2760  0026                     ___awdiv@sign:	
  2761                           ; 2 bytes @ 0x6
  2762                           
  2763  0026                     ___awmod@sign:	
  2764                           ; 1 bytes @ 0x6
  2765                           
  2766  0026                     PROTOCOL_Initialize@inv_handler:	
  2767                           ; 1 bytes @ 0x6
  2768                           
  2769                           
  2770                           ; 2 bytes @ 0x6
  2771  0026                     	ds	1
  2772  0027                     ?_abs:	
  2773  0027                     ___lwdiv@counter:	
  2774                           ; 2 bytes @ 0x7
  2775                           
  2776  0027                     abs@a:	
  2777                           ; 1 bytes @ 0x7
  2778                           
  2779  0027                     ___awdiv@quotient:	
  2780                           ; 2 bytes @ 0x7
  2781                           
  2782                           
  2783                           ; 2 bytes @ 0x7
  2784  0027                     	ds	1
  2785  0028                     ??_atoi:	
  2786  0028                     ?___lwmod:	
  2787                           ; 1 bytes @ 0x8
  2788                           
  2789  0028                     ?___ftadd:	
  2790                           ; 2 bytes @ 0x8
  2791                           
  2792  0028                     ?___ftmul:	
  2793                           ; 3 bytes @ 0x8
  2794                           
  2795  0028                     ?___lwtoft:	
  2796                           ; 3 bytes @ 0x8
  2797                           
  2798  0028                     PROTOCOL_Initialize@scaler:	
  2799                           ; 3 bytes @ 0x8
  2800                           
  2801  0028                     ___lwmod@divisor:	
  2802                           ; 1 bytes @ 0x8
  2803                           
  2804  0028                     ___lwtoft@c:	
  2805                           ; 2 bytes @ 0x8
  2806                           
  2807  0028                     ___ftadd@f1:	
  2808                           ; 2 bytes @ 0x8
  2809                           
  2810  0028                     ___ftmul@f1:	
  2811                           ; 3 bytes @ 0x8
  2812                           
  2813                           
  2814                           ; 3 bytes @ 0x8
  2815  0028                     	ds	1
  2816  0029                     ??_PROTOCOL_Initialize:	
  2817  0029                     ??_abs:	
  2818                           ; 1 bytes @ 0x9
  2819                           
  2820                           
  2821                           ; 1 bytes @ 0x9
  2822  0029                     	ds	1
  2823  002A                     atoi@sign:	
  2824  002A                     ___lwmod@dividend:	
  2825                           ; 1 bytes @ 0xA
  2826                           
  2827                           
  2828                           ; 2 bytes @ 0xA
  2829  002A                     	ds	1
  2830  002B                     ??___lwtoft:	
  2831  002B                     atoi@a:	
  2832                           ; 1 bytes @ 0xB
  2833                           
  2834  002B                     ___ftadd@f2:	
  2835                           ; 2 bytes @ 0xB
  2836                           
  2837  002B                     ___ftmul@f2:	
  2838                           ; 3 bytes @ 0xB
  2839                           
  2840                           
  2841                           ; 3 bytes @ 0xB
  2842  002B                     	ds	1
  2843  002C                     ??___lwmod:	
  2844                           
  2845                           ; 1 bytes @ 0xC
  2846  002C                     	ds	1
  2847  002D                     atoi@s:	
  2848  002D                     ___lwmod@counter:	
  2849                           ; 1 bytes @ 0xD
  2850                           
  2851                           
  2852                           ; 1 bytes @ 0xD
  2853  002D                     	ds	1
  2854  002E                     ??___ftadd:	
  2855  002E                     ??___ftmul:	
  2856                           ; 1 bytes @ 0xE
  2857                           
  2858  002E                     ?_printf:	
  2859                           ; 1 bytes @ 0xE
  2860                           
  2861  002E                     printf@f:	
  2862                           ; 2 bytes @ 0xE
  2863                           
  2864                           
  2865                           ; 2 bytes @ 0xE
  2866  002E                     	ds	4
  2867  0032                     ___ftadd@sign:	
  2868  0032                     ___ftmul@exp:	
  2869                           ; 1 bytes @ 0x12
  2870                           
  2871                           
  2872                           ; 1 bytes @ 0x12
  2873  0032                     	ds	1
  2874  0033                     ___ftadd@exp2:	
  2875  0033                     ___ftmul@f3_as_product:	
  2876                           ; 1 bytes @ 0x13
  2877                           
  2878                           
  2879                           ; 3 bytes @ 0x13
  2880  0033                     	ds	1
  2881  0034                     ??_printf:	
  2882  0034                     ___ftadd@exp1:	
  2883                           ; 1 bytes @ 0x14
  2884                           
  2885                           
  2886                           ; 1 bytes @ 0x14
  2887  0034                     	ds	1
  2888  0035                     ?___ftdiv:	
  2889  0035                     ___ftdiv@f2:	
  2890                           ; 3 bytes @ 0x15
  2891                           
  2892                           
  2893                           ; 3 bytes @ 0x15
  2894  0035                     	ds	1
  2895  0036                     ___ftmul@cntr:	
  2896                           
  2897                           ; 1 bytes @ 0x16
  2898  0036                     	ds	1
  2899  0037                     ___ftmul@sign:	
  2900                           
  2901                           ; 1 bytes @ 0x17
  2902  0037                     	ds	1
  2903  0038                     ?___fttol:	
  2904  0038                     printf@prec:	
  2905                           ; 4 bytes @ 0x18
  2906                           
  2907  0038                     ___ftdiv@f1:	
  2908                           ; 1 bytes @ 0x18
  2909                           
  2910  0038                     ___fttol@f1:	
  2911                           ; 3 bytes @ 0x18
  2912                           
  2913                           
  2914                           ; 3 bytes @ 0x18
  2915  0038                     	ds	1
  2916  0039                     printf@cp:	
  2917                           
  2918                           ; 2 bytes @ 0x19
  2919  0039                     	ds	2
  2920  003B                     ??___ftdiv:	
  2921  003B                     printf@ap:	
  2922                           ; 1 bytes @ 0x1B
  2923                           
  2924                           
  2925                           ; 1 bytes @ 0x1B
  2926  003B                     	ds	1
  2927  003C                     ??___fttol:	
  2928  003C                     printf@val:	
  2929                           ; 1 bytes @ 0x1C
  2930                           
  2931                           
  2932                           ; 2 bytes @ 0x1C
  2933  003C                     	ds	2
  2934  003E                     printf@len:	
  2935                           
  2936                           ; 2 bytes @ 0x1E
  2937  003E                     	ds	1
  2938  003F                     ___ftdiv@cntr:	
  2939                           
  2940                           ; 1 bytes @ 0x1F
  2941  003F                     	ds	1
  2942  0040                     printf@flag:	
  2943  0040                     ___fttol@sign1:	
  2944                           ; 1 bytes @ 0x20
  2945                           
  2946  0040                     ___ftdiv@f3:	
  2947                           ; 1 bytes @ 0x20
  2948                           
  2949                           
  2950                           ; 3 bytes @ 0x20
  2951  0040                     	ds	1
  2952  0041                     printf@width:	
  2953  0041                     ___fttol@lval:	
  2954                           ; 2 bytes @ 0x21
  2955                           
  2956                           
  2957                           ; 4 bytes @ 0x21
  2958  0041                     	ds	2
  2959  0043                     printf@c:	
  2960  0043                     ___ftdiv@exp:	
  2961                           ; 1 bytes @ 0x23
  2962                           
  2963                           
  2964                           ; 1 bytes @ 0x23
  2965  0043                     	ds	1
  2966  0044                     ___ftdiv@sign:	
  2967                           
  2968                           ; 1 bytes @ 0x24
  2969  0044                     	ds	1
  2970  0045                     ?_get_accel:	
  2971  0045                     ___fttol@exp1:	
  2972                           ; 3 bytes @ 0x25
  2973                           
  2974                           
  2975                           ; 1 bytes @ 0x25
  2976  0045                     	ds	1
  2977  0046                     ?_PROTOCOL_I2C_Send_float:	
  2978  0046                     PROTOCOL_I2C_Send_float@pbuffer:	
  2979                           ; 1 bytes @ 0x26
  2980                           
  2981                           
  2982                           ; 1 bytes @ 0x26
  2983  0046                     	ds	1
  2984  0047                     ??_PROTOCOL_I2C_Send_float:	
  2985                           
  2986                           ; 1 bytes @ 0x27
  2987  0047                     	ds	2
  2988  0049                     ??_get_accel:	
  2989  0049                     PROTOCOL_I2C_Send_float@length:	
  2990                           ; 1 bytes @ 0x29
  2991                           
  2992  0049                     get_accel@steps:	
  2993                           ; 1 bytes @ 0x29
  2994                           
  2995                           
  2996                           ; 3 bytes @ 0x29
  2997  0049                     	ds	1
  2998  004A                     PROTOCOL_I2C_Send_float@v:	
  2999                           
  3000                           ; 2 bytes @ 0x2A
  3001  004A                     	ds	2
  3002  004C                     get_accel@ch:	
  3003                           
  3004                           ; 1 bytes @ 0x2C
  3005  004C                     	ds	1
  3006  004D                     ??_inv_handler:	
  3007                           
  3008                           ; 1 bytes @ 0x2D
  3009  004D                     	ds	1
  3010  004E                     inv_handler@values:	
  3011                           
  3012                           ; 9 bytes @ 0x2E
  3013  004E                     	ds	9
  3014  0057                     ??_PROTOCOL_Loop:	
  3015                           
  3016                           ; 1 bytes @ 0x37
  3017  0057                     	ds	2
  3018  0059                     PROTOCOL_Loop@c:	
  3019                           
  3020                           ; 1 bytes @ 0x39
  3021  0059                     	ds	1
  3022  005A                     PROTOCOL_Loop@device_address:	
  3023                           
  3024                           ; 1 bytes @ 0x3A
  3025  005A                     	ds	1
  3026  005B                     ??_main:	
  3027                           
  3028                           ; 1 bytes @ 0x3B
  3029  005B                     	ds	1
  3030                           
  3031                           	psect	maintext
  3032  0B3F                     __pmaintext:	
  3033 ;;
  3034 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3035 ;;
  3036 ;; *************** function _main *****************
  3037 ;; Defined at:
  3038 ;;		line 31 in file "main.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;		None
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;		None
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  1    wreg      void 
  3045 ;; Registers used:
  3046 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3047 ;; Tracked objects:
  3048 ;;		On entry : B1F/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3055 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3056 ;;Total ram usage:        1 bytes
  3057 ;; Hardware stack levels required when called:   11
  3058 ;; This function calls:
  3059 ;;		_ADC_Initialize
  3060 ;;		_EUSART_Initialize
  3061 ;;		_I2C1_Initialize
  3062 ;;		_OSCILLATOR_Initialize
  3063 ;;		_PIN_MANAGER_Initialize
  3064 ;;		_PROTOCOL_Initialize
  3065 ;;		_PROTOCOL_Loop
  3066 ;;		_TMR0_Initialize
  3067 ;;		_WDT_Initialize
  3068 ;; This function is called by:
  3069 ;;		Startup code after reset
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           
  3074                           ;psect for function _main
  3075  0B3F                     _main:	
  3076                           
  3077                           ;main.c: 34: PROTOCOL_Initialize("KXR94-2050", (0), (0), (0), inv_handler, 250);
  3078                           
  3079                           ;incstack = 0
  3080                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3081  0B3F  304E               	movlw	low (STR_1| (0+32768))
  3082  0B40  0020               	movlb	0	; select bank0
  3083  0B41  00A1               	movwf	PROTOCOL_Initialize@device_id
  3084  0B42  3086               	movlw	high (STR_1| (0+32768))
  3085  0B43  00A2               	movwf	PROTOCOL_Initialize@device_id+1
  3086  0B44  01A3               	clrf	PROTOCOL_Initialize@start_handler
  3087  0B45  01A4               	clrf	PROTOCOL_Initialize@stop_handler
  3088  0B46  01A5               	clrf	PROTOCOL_Initialize@set_handler
  3089  0B47  30A2               	movlw	low _inv_handler
  3090  0B48  00A6               	movwf	PROTOCOL_Initialize@inv_handler
  3091  0B49  300B               	movlw	high _inv_handler
  3092  0B4A  00A7               	movwf	PROTOCOL_Initialize@inv_handler+1
  3093  0B4B  30FA               	movlw	250
  3094  0B4C  00DB               	movwf	??_main
  3095  0B4D  085B               	movf	??_main,w
  3096  0B4E  00A8               	movwf	PROTOCOL_Initialize@scaler
  3097  0B4F  318C  24A6  318B   	fcall	_PROTOCOL_Initialize
  3098                           
  3099                           ;main.c: 38: PIN_MANAGER_Initialize();
  3100  0B52  318A  2225  318B   	fcall	_PIN_MANAGER_Initialize
  3101                           
  3102                           ;main.c: 39: OSCILLATOR_Initialize();
  3103  0B55  3188  20DA  318B   	fcall	_OSCILLATOR_Initialize
  3104                           
  3105                           ;main.c: 40: WDT_Initialize();
  3106  0B58  3188  20C3  318B   	fcall	_WDT_Initialize
  3107                           
  3108                           ;main.c: 41: ADC_Initialize();
  3109  0B5B  3188  20EF  318B   	fcall	_ADC_Initialize
  3110                           
  3111                           ;main.c: 42: TMR0_Initialize();
  3112  0B5E  3189  2129  318B   	fcall	_TMR0_Initialize
  3113                           
  3114                           ;main.c: 43: EUSART_Initialize();
  3115  0B61  3189  21D1  318B   	fcall	_EUSART_Initialize
  3116                           
  3117                           ;main.c: 44: I2C1_Initialize();
  3118  0B64  318A  2283  318B   	fcall	_I2C1_Initialize
  3119                           
  3120                           ;main.c: 47: (INTCONbits.GIE = 1);
  3121  0B67  178B               	bsf	11,7	;volatile
  3122                           
  3123                           ;main.c: 48: (INTCONbits.PEIE = 1);
  3124  0B68  170B               	bsf	11,6	;volatile
  3125                           
  3126                           ;main.c: 51: PROTOCOL_Loop();
  3127  0B69  3182  223E         	fcall	_PROTOCOL_Loop
  3128  0B6B  3180  2830         	ljmp	start
  3129  0B6D                     __end_of_main:	
  3130                           
  3131                           	psect	text1
  3132  08C3                     __ptext1:	
  3133 ;; *************** function _WDT_Initialize *****************
  3134 ;; Defined at:
  3135 ;;		line 93 in file "mcc_generated_files/mcc.c"
  3136 ;; Parameters:    Size  Location     Type
  3137 ;;		None
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;		None
  3140 ;; Return value:  Size  Location     Type
  3141 ;;                  1    wreg      void 
  3142 ;; Registers used:
  3143 ;;		wreg
  3144 ;; Tracked objects:
  3145 ;;		On entry : 0/0
  3146 ;;		On exit  : 0/0
  3147 ;;		Unchanged: 0/0
  3148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3153 ;;Total ram usage:        0 bytes
  3154 ;; Hardware stack levels used:    1
  3155 ;; Hardware stack levels required when called:    5
  3156 ;; This function calls:
  3157 ;;		Nothing
  3158 ;; This function is called by:
  3159 ;;		_main
  3160 ;;		_SYSTEM_Initialize
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           
  3165                           ;psect for function _WDT_Initialize
  3166  08C3                     _WDT_Initialize:	
  3167                           
  3168                           ;mcc.c: 96: WDTCON = 0x16;
  3169                           
  3170                           ;incstack = 0
  3171                           ; Regs used in _WDT_Initialize: [wreg]
  3172  08C3  3016               	movlw	22
  3173  08C4  0021               	movlb	1	; select bank1
  3174  08C5  0097               	movwf	23	;volatile
  3175  08C6  0008               	return
  3176  08C7                     __end_of_WDT_Initialize:	
  3177                           
  3178                           	psect	text2
  3179  0929                     __ptext2:	
  3180 ;; *************** function _TMR0_Initialize *****************
  3181 ;; Defined at:
  3182 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3183 ;; Parameters:    Size  Location     Type
  3184 ;;		None
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;		None
  3187 ;; Return value:  Size  Location     Type
  3188 ;;                  1    wreg      void 
  3189 ;; Registers used:
  3190 ;;		wreg, status,2
  3191 ;; Tracked objects:
  3192 ;;		On entry : 0/0
  3193 ;;		On exit  : 0/0
  3194 ;;		Unchanged: 0/0
  3195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3198 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3199 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3200 ;;Total ram usage:        1 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    5
  3203 ;; This function calls:
  3204 ;;		Nothing
  3205 ;; This function is called by:
  3206 ;;		_main
  3207 ;;		_SYSTEM_Initialize
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           
  3212                           ;psect for function _TMR0_Initialize
  3213  0929                     _TMR0_Initialize:	
  3214                           
  3215                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  3216                           
  3217                           ;incstack = 0
  3218                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3219  0929  0021               	movlb	1	; select bank1
  3220  092A  0815               	movf	21,w	;volatile
  3221  092B  39C0               	andlw	192
  3222  092C  3817               	iorlw	23
  3223  092D  0095               	movwf	21	;volatile
  3224                           
  3225                           ;tmr0.c: 70: TMR0 = 0x06;
  3226  092E  3006               	movlw	6
  3227  092F  0020               	movlb	0	; select bank0
  3228  0930  0095               	movwf	21	;volatile
  3229                           
  3230                           ;tmr0.c: 73: timer0ReloadVal= 6;
  3231  0931  3006               	movlw	6
  3232  0932  00A0               	movwf	??_TMR0_Initialize
  3233  0933  0820               	movf	??_TMR0_Initialize,w
  3234  0934  00E6               	movwf	_timer0ReloadVal	;volatile
  3235                           
  3236                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3237  0935  110B               	bcf	11,2	;volatile
  3238  0936  0008               	return
  3239  0937                     __end_of_TMR0_Initialize:	
  3240                           
  3241                           	psect	text3
  3242  023E                     __ptext3:	
  3243 ;; *************** function _PROTOCOL_Loop *****************
  3244 ;; Defined at:
  3245 ;;		line 131 in file "protocol.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;		None
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  device_addre    1   58[BANK0 ] unsigned char 
  3250 ;;  c               1   57[BANK0 ] unsigned char 
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  1    wreg      void 
  3253 ;; Registers used:
  3254 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3255 ;; Tracked objects:
  3256 ;;		On entry : 0/0
  3257 ;;		On exit  : 0/0
  3258 ;;		Unchanged: 0/0
  3259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3261 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3262 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3263 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3264 ;;Total ram usage:        4 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; Hardware stack levels required when called:   10
  3267 ;; This function calls:
  3268 ;;		Absolute function
  3269 ;;		_EUSART_Read
  3270 ;;		_PROTOCOL_EXT
  3271 ;;		_PROTOCOL_Read_Device_Address
  3272 ;;		_PROTOCOL_SAV
  3273 ;;		_PROTOCOL_SET
  3274 ;;		_PROTOCOL_STA
  3275 ;;		_PROTOCOL_STP
  3276 ;;		_PROTOCOL_Write_Device_Address
  3277 ;;		_TMR0_HasOverflowOccured
  3278 ;;		_atoi
  3279 ;;		_inv_handler
  3280 ;;		_printf
  3281 ;;		_strncmp
  3282 ;; This function is called by:
  3283 ;;		_main
  3284 ;; This function uses a non-reentrant model
  3285 ;;
  3286                           
  3287                           
  3288                           ;psect for function _PROTOCOL_Loop
  3289  023E                     _PROTOCOL_Loop:	
  3290  023E                     l628:	
  3291                           ;incstack = 0
  3292                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3293                           ;protocol.c: 132: uint8_t device_address;
  3294                           ;protocol.c: 133: uint8_t c;
  3295                           ;protocol.c: 134: while (1) {
  3296                           
  3297                           
  3298                           ;protocol.c: 135: tmr_overflow = TMR0_HasOverflowOccured();
  3299  023E  3188  20BF  3182   	fcall	_TMR0_HasOverflowOccured
  3300  0241  0020               	movlb	0	; select bank0
  3301  0242  00D7               	movwf	??_PROTOCOL_Loop
  3302  0243  0857               	movf	??_PROTOCOL_Loop,w
  3303  0244  0021               	movlb	1	; select bank1
  3304  0245  00BB               	movwf	_tmr_overflow^(0+128)
  3305                           
  3306                           ;protocol.c: 136: if (tmr_overflow) {
  3307  0246  083B               	movf	_tmr_overflow^(0+128),w
  3308  0247  1903               	btfsc	3,2
  3309  0248  2A66               	goto	l3815
  3310                           
  3311                           ;protocol.c: 137: TMR0IF = 0;
  3312  0249  110B               	bcf	11,2	;volatile
  3313                           
  3314                           ;protocol.c: 138: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3315  024A  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3316  024B  0433               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3317  024C  1903               	btfsc	3,2
  3318  024D  2A66               	goto	l3815
  3319  024E  3001               	movlw	1
  3320  024F  0020               	movlb	0	; select bank0
  3321  0250  00D7               	movwf	??_PROTOCOL_Loop
  3322  0251  0857               	movf	??_PROTOCOL_Loop,w
  3323  0252  07DE               	addwf	_tmr_cnt,f
  3324  0253  0863               	movf	_value,w
  3325  0254  025E               	subwf	_tmr_cnt,w
  3326  0255  1C03               	skipc
  3327  0256  2A66               	goto	l3815
  3328                           
  3329                           ;protocol.c: 139: tmr_cnt = 0;
  3330  0257  01DE               	clrf	_tmr_cnt
  3331                           
  3332                           ;protocol.c: 140: if (++sec_cnt >= tmr_scaler) {
  3333  0258  3001               	movlw	1
  3334  0259  00D7               	movwf	??_PROTOCOL_Loop
  3335  025A  0857               	movf	??_PROTOCOL_Loop,w
  3336  025B  07DF               	addwf	_sec_cnt,f
  3337  025C  086E               	movf	_tmr_scaler,w
  3338  025D  025F               	subwf	_sec_cnt,w
  3339  025E  1C03               	skipc
  3340  025F  2A66               	goto	l3815
  3341                           
  3342                           ;protocol.c: 141: if (running) invoked = 1;
  3343  0260  0861               	movf	_running,w
  3344  0261  1903               	btfsc	3,2
  3345  0262  2A65               	goto	l3813
  3346  0263  01E0               	clrf	_invoked
  3347  0264  0AE0               	incf	_invoked,f
  3348  0265                     l3813:	
  3349                           
  3350                           ;protocol.c: 142: sec_cnt = 0;
  3351  0265  01DF               	clrf	_sec_cnt
  3352  0266                     l3815:	
  3353                           
  3354                           ;protocol.c: 143: }
  3355                           ;protocol.c: 144: }
  3356                           ;protocol.c: 145: }
  3357                           ;protocol.c: 146: if (invoked && PROTOCOL_Inv_Handler) {
  3358  0266  0020               	movlb	0	; select bank0
  3359  0267  0860               	movf	_invoked,w
  3360  0268  1903               	btfsc	3,2
  3361  0269  2A76               	goto	l3825
  3362  026A  0021               	movlb	1	; select bank1
  3363  026B  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3364  026C  0433               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3365  026D  1903               	btfsc	3,2
  3366  026E  2A76               	goto	l3825
  3367                           
  3368                           ;protocol.c: 147: PROTOCOL_Inv_Handler();
  3369  026F  0833               	movf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3370  0270  008A               	movwf	10
  3371  0271  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3372  0272  000A               	callw
  3373  0273  3182               	pagesel	$
  3374                           
  3375                           ;protocol.c: 148: invoked = 0;
  3376  0274  0020               	movlb	0	; select bank0
  3377  0275  01E0               	clrf	_invoked
  3378  0276                     l3825:	
  3379                           
  3380                           ;protocol.c: 151: if ((eusartRxCount)) {
  3381  0276  0020               	movlb	0	; select bank0
  3382  0277  0867               	movf	_eusartRxCount,w	;volatile
  3383  0278  1903               	btfsc	3,2
  3384  0279  2A3E               	goto	l628
  3385                           
  3386                           ;protocol.c: 152: c = EUSART_Read();
  3387  027A  318A  2244  3182   	fcall	_EUSART_Read
  3388  027D  0020               	movlb	0	; select bank0
  3389  027E  00D7               	movwf	??_PROTOCOL_Loop
  3390  027F  0857               	movf	??_PROTOCOL_Loop,w
  3391  0280  00D9               	movwf	PROTOCOL_Loop@c
  3392                           
  3393                           ;protocol.c: 153: buf[cnt++] = c;
  3394  0281  0859               	movf	PROTOCOL_Loop@c,w
  3395  0282  00D7               	movwf	??_PROTOCOL_Loop
  3396  0283  0864               	movf	_cnt,w
  3397  0284  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3398  0285  0086               	movwf	6
  3399  0286  3001               	movlw	1	; select bank2/3
  3400  0287  0087               	movwf	7
  3401  0288  0857               	movf	??_PROTOCOL_Loop,w
  3402  0289  0081               	movwf	1
  3403  028A  3001               	movlw	1
  3404  028B  00D7               	movwf	??_PROTOCOL_Loop
  3405  028C  0857               	movf	??_PROTOCOL_Loop,w
  3406  028D  07E4               	addwf	_cnt,f
  3407                           
  3408                           ;protocol.c: 154: if (c == '\n') {
  3409  028E  300A               	movlw	10
  3410  028F  0659               	xorwf	PROTOCOL_Loop@c,w
  3411  0290  1D03               	btfss	3,2
  3412  0291  2A3E               	goto	l628
  3413                           
  3414                           ;protocol.c: 155: buf[--cnt] = '\0';
  3415  0292  3001               	movlw	1
  3416  0293  02E4               	subwf	_cnt,f
  3417  0294  0864               	movf	_cnt,w
  3418  0295  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3419  0296  0086               	movwf	6
  3420  0297  3001               	movlw	1	; select bank2/3
  3421  0298  0087               	movwf	7
  3422  0299  0181               	clrf	1
  3423                           
  3424                           ;protocol.c: 156: cnt = 0;
  3425  029A  01E4               	clrf	_cnt
  3426                           
  3427                           ;protocol.c: 157: printf("#%s\n", buf);
  3428  029B  30C5               	movlw	low (STR_3| (0+32768))
  3429  029C  00AE               	movwf	printf@f
  3430  029D  3086               	movlw	high (STR_3| (0+32768))
  3431  029E  00AF               	movwf	printf@f+1
  3432  029F  3020               	movlw	low _buf
  3433  02A0  00B0               	movwf	low ((?_printf| 0+2))
  3434  02A1  3001               	movlw	high _buf
  3435  02A2  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3436  02A3  3180  2069  3182   	fcall	_printf
  3437                           
  3438                           ;protocol.c: 158: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  3439  02A6  0020               	movlb	0	; select bank0
  3440  02A7  036F               	decf	_BACKPLANE_SLAVE_ADDRESS,w
  3441  02A8  1903               	btfsc	3,2
  3442  02A9  2AAF               	goto	l3845
  3443                           
  3444                           ;protocol.c: 159: PROTOCOL_EXT(buf);
  3445  02AA  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3446  02AB  3188  2097  3182   	fcall	_PROTOCOL_EXT
  3447                           
  3448                           ;protocol.c: 160: } else if (!strncmp(("WHO"), (buf), 3)) {
  3449  02AE  2A3E               	goto	l628
  3450  02AF                     l3845:	
  3451  02AF  30E6               	movlw	low (STR_4| (0+32768))
  3452  02B0  0020               	movlb	0	; select bank0
  3453  02B1  00A0               	movwf	strncmp@s1
  3454  02B2  3086               	movlw	high (STR_4| (0+32768))
  3455  02B3  00A1               	movwf	strncmp@s1+1
  3456  02B4  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3457  02B5  00D7               	movwf	??_PROTOCOL_Loop
  3458  02B6  0857               	movf	??_PROTOCOL_Loop,w
  3459  02B7  00A2               	movwf	strncmp@s2
  3460  02B8  3003               	movlw	3
  3461  02B9  00A3               	movwf	strncmp@len
  3462  02BA  3000               	movlw	0
  3463  02BB  00A4               	movwf	strncmp@len+1
  3464  02BC  3187  27BE  3182   	fcall	_strncmp
  3465  02BF  0020               	movlb	0	; select bank0
  3466  02C0  0820               	movf	?_strncmp,w
  3467  02C1  0421               	iorwf	?_strncmp+1,w
  3468  02C2  1D03               	btfss	3,2
  3469  02C3  2AD4               	goto	l3849
  3470                           
  3471                           ;protocol.c: 161: printf("$:WHO:%s\n", device_id_);
  3472  02C4  3077               	movlw	low (STR_5| (0+32768))
  3473  02C5  00AE               	movwf	printf@f
  3474  02C6  3086               	movlw	high (STR_5| (0+32768))
  3475  02C7  00AF               	movwf	printf@f+1
  3476  02C8  0021               	movlb	1	; select bank1
  3477  02C9  085B               	movf	(_device_id_+1)^(0+128),w
  3478  02CA  0020               	movlb	0	; select bank0
  3479  02CB  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3480  02CC  0021               	movlb	1	; select bank1
  3481  02CD  085A               	movf	_device_id_^(0+128),w
  3482  02CE  0020               	movlb	0	; select bank0
  3483  02CF  00B0               	movwf	low ((?_printf| 0+2))
  3484  02D0  3180  2069  3182   	fcall	_printf
  3485                           
  3486                           ;protocol.c: 162: } else if (!strncmp(("SAV"), (buf), 3)) {
  3487  02D3  2A3E               	goto	l628
  3488  02D4                     l3849:	
  3489  02D4  30F6               	movlw	low (STR_6| (0+32768))
  3490  02D5  0020               	movlb	0	; select bank0
  3491  02D6  00A0               	movwf	strncmp@s1
  3492  02D7  3086               	movlw	high (STR_6| (0+32768))
  3493  02D8  00A1               	movwf	strncmp@s1+1
  3494  02D9  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3495  02DA  00D7               	movwf	??_PROTOCOL_Loop
  3496  02DB  0857               	movf	??_PROTOCOL_Loop,w
  3497  02DC  00A2               	movwf	strncmp@s2
  3498  02DD  3003               	movlw	3
  3499  02DE  00A3               	movwf	strncmp@len
  3500  02DF  3000               	movlw	0
  3501  02E0  00A4               	movwf	strncmp@len+1
  3502  02E1  3187  27BE  3182   	fcall	_strncmp
  3503  02E4  0020               	movlb	0	; select bank0
  3504  02E5  0820               	movf	?_strncmp,w
  3505  02E6  0421               	iorwf	?_strncmp+1,w
  3506  02E7  1D03               	btfss	3,2
  3507  02E8  2AED               	goto	l3853
  3508                           
  3509                           ;protocol.c: 163: PROTOCOL_SAV();
  3510  02E9  3189  2100  3182   	fcall	_PROTOCOL_SAV
  3511                           
  3512                           ;protocol.c: 164: } else if (!strncmp(("STA"), (buf), 3)) {
  3513  02EC  2A3E               	goto	l628
  3514  02ED                     l3853:	
  3515  02ED  30DE               	movlw	low (STR_7| (0+32768))
  3516  02EE  0020               	movlb	0	; select bank0
  3517  02EF  00A0               	movwf	strncmp@s1
  3518  02F0  3086               	movlw	high (STR_7| (0+32768))
  3519  02F1  00A1               	movwf	strncmp@s1+1
  3520  02F2  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3521  02F3  00D7               	movwf	??_PROTOCOL_Loop
  3522  02F4  0857               	movf	??_PROTOCOL_Loop,w
  3523  02F5  00A2               	movwf	strncmp@s2
  3524  02F6  3003               	movlw	3
  3525  02F7  00A3               	movwf	strncmp@len
  3526  02F8  3000               	movlw	0
  3527  02F9  00A4               	movwf	strncmp@len+1
  3528  02FA  3187  27BE  3182   	fcall	_strncmp
  3529  02FD  0020               	movlb	0	; select bank0
  3530  02FE  0820               	movf	?_strncmp,w
  3531  02FF  0421               	iorwf	?_strncmp+1,w
  3532  0300  1D03               	btfss	3,2
  3533  0301  2B06               	goto	l3857
  3534                           
  3535                           ;protocol.c: 165: PROTOCOL_STA();
  3536  0302  3188  20BB  3182   	fcall	_PROTOCOL_STA
  3537                           
  3538                           ;protocol.c: 166: } else if (!strncmp(("STP"), (buf), 3)) {
  3539  0305  2A3E               	goto	l628
  3540  0306                     l3857:	
  3541  0306  30EA               	movlw	low (STR_8| (0+32768))
  3542  0307  0020               	movlb	0	; select bank0
  3543  0308  00A0               	movwf	strncmp@s1
  3544  0309  3086               	movlw	high (STR_8| (0+32768))
  3545  030A  00A1               	movwf	strncmp@s1+1
  3546  030B  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3547  030C  00D7               	movwf	??_PROTOCOL_Loop
  3548  030D  0857               	movf	??_PROTOCOL_Loop,w
  3549  030E  00A2               	movwf	strncmp@s2
  3550  030F  3003               	movlw	3
  3551  0310  00A3               	movwf	strncmp@len
  3552  0311  3000               	movlw	0
  3553  0312  00A4               	movwf	strncmp@len+1
  3554  0313  3187  27BE  3182   	fcall	_strncmp
  3555  0316  0020               	movlb	0	; select bank0
  3556  0317  0820               	movf	?_strncmp,w
  3557  0318  0421               	iorwf	?_strncmp+1,w
  3558  0319  1D03               	btfss	3,2
  3559  031A  2B2B               	goto	l3863
  3560                           
  3561                           ;protocol.c: 167: PROTOCOL_STP();
  3562  031B  3188  20A9  3182   	fcall	_PROTOCOL_STP
  3563                           
  3564                           ;protocol.c: 168: printf("*:STP:%s\n", "ACK");
  3565  031E  3081               	movlw	low (STR_9| (0+32768))
  3566  031F  0020               	movlb	0	; select bank0
  3567  0320  00AE               	movwf	printf@f
  3568  0321  3086               	movlw	high (STR_9| (0+32768))
  3569  0322  00AF               	movwf	printf@f+1
  3570  0323  30E2               	movlw	low (STR_10| (0+32768))
  3571  0324  00B0               	movwf	low ((?_printf| 0+2))
  3572  0325  3086               	movlw	high (STR_10| (0+32768))
  3573  0326  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3574  0327  3180  2069  3182   	fcall	_printf
  3575                           
  3576                           ;protocol.c: 169: } else if (!strncmp(("SET"), (buf), 3)) {
  3577  032A  2A3E               	goto	l628
  3578  032B                     l3863:	
  3579  032B  30F2               	movlw	low (STR_11| (0+32768))
  3580  032C  0020               	movlb	0	; select bank0
  3581  032D  00A0               	movwf	strncmp@s1
  3582  032E  3086               	movlw	high (STR_11| (0+32768))
  3583  032F  00A1               	movwf	strncmp@s1+1
  3584  0330  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3585  0331  00D7               	movwf	??_PROTOCOL_Loop
  3586  0332  0857               	movf	??_PROTOCOL_Loop,w
  3587  0333  00A2               	movwf	strncmp@s2
  3588  0334  3003               	movlw	3
  3589  0335  00A3               	movwf	strncmp@len
  3590  0336  3000               	movlw	0
  3591  0337  00A4               	movwf	strncmp@len+1
  3592  0338  3187  27BE  3182   	fcall	_strncmp
  3593  033B  0020               	movlb	0	; select bank0
  3594  033C  0820               	movf	?_strncmp,w
  3595  033D  0421               	iorwf	?_strncmp+1,w
  3596  033E  1D03               	btfss	3,2
  3597  033F  2B4A               	goto	l3867
  3598                           
  3599                           ;protocol.c: 170: PROTOCOL_SET(atoi(&buf[4]));
  3600  0340  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3601  0341  318D  25AB  3182   	fcall	_atoi
  3602  0344  0020               	movlb	0	; select bank0
  3603  0345  0826               	movf	?_atoi,w
  3604  0346  3188  20E1  3182   	fcall	_PROTOCOL_SET
  3605                           
  3606                           ;protocol.c: 171: } else if (!strncmp(("GET"), (buf), 3)) {
  3607  0349  2A3E               	goto	l628
  3608  034A                     l3867:	
  3609  034A  30EE               	movlw	low (STR_12| (0+32768))
  3610  034B  0020               	movlb	0	; select bank0
  3611  034C  00A0               	movwf	strncmp@s1
  3612  034D  3086               	movlw	high (STR_12| (0+32768))
  3613  034E  00A1               	movwf	strncmp@s1+1
  3614  034F  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3615  0350  00D7               	movwf	??_PROTOCOL_Loop
  3616  0351  0857               	movf	??_PROTOCOL_Loop,w
  3617  0352  00A2               	movwf	strncmp@s2
  3618  0353  3003               	movlw	3
  3619  0354  00A3               	movwf	strncmp@len
  3620  0355  3000               	movlw	0
  3621  0356  00A4               	movwf	strncmp@len+1
  3622  0357  3187  27BE  3182   	fcall	_strncmp
  3623  035A  0020               	movlb	0	; select bank0
  3624  035B  0820               	movf	?_strncmp,w
  3625  035C  0421               	iorwf	?_strncmp+1,w
  3626  035D  1D03               	btfss	3,2
  3627  035E  2B6E               	goto	l3871
  3628                           
  3629                           ;protocol.c: 172: printf("$:GET:%d\n", value);
  3630  035F  3063               	movlw	low (STR_13| (0+32768))
  3631  0360  00AE               	movwf	printf@f
  3632  0361  3086               	movlw	high (STR_13| (0+32768))
  3633  0362  00AF               	movwf	printf@f+1
  3634  0363  0863               	movf	_value,w
  3635  0364  00D7               	movwf	??_PROTOCOL_Loop
  3636  0365  01D8               	clrf	??_PROTOCOL_Loop+1
  3637  0366  0857               	movf	??_PROTOCOL_Loop,w
  3638  0367  00B0               	movwf	?_printf+2
  3639  0368  0858               	movf	??_PROTOCOL_Loop+1,w
  3640  0369  00B1               	movwf	?_printf+3
  3641  036A  3180  2069  3182   	fcall	_printf
  3642                           
  3643                           ;protocol.c: 173: } else if (!strncmp(("WDA"), (buf), 3)) {
  3644  036D  2A3E               	goto	l628
  3645  036E                     l3871:	
  3646  036E  30DA               	movlw	low (STR_14| (0+32768))
  3647  036F  0020               	movlb	0	; select bank0
  3648  0370  00A0               	movwf	strncmp@s1
  3649  0371  3086               	movlw	high (STR_14| (0+32768))
  3650  0372  00A1               	movwf	strncmp@s1+1
  3651  0373  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3652  0374  00D7               	movwf	??_PROTOCOL_Loop
  3653  0375  0857               	movf	??_PROTOCOL_Loop,w
  3654  0376  00A2               	movwf	strncmp@s2
  3655  0377  3003               	movlw	3
  3656  0378  00A3               	movwf	strncmp@len
  3657  0379  3000               	movlw	0
  3658  037A  00A4               	movwf	strncmp@len+1
  3659  037B  3187  27BE  3182   	fcall	_strncmp
  3660  037E  0020               	movlb	0	; select bank0
  3661  037F  0820               	movf	?_strncmp,w
  3662  0380  0421               	iorwf	?_strncmp+1,w
  3663  0381  1D03               	btfss	3,2
  3664  0382  2B91               	goto	l3877
  3665                           
  3666                           ;protocol.c: 174: device_address = atoi(&buf[4]);
  3667  0383  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3668  0384  318D  25AB  3182   	fcall	_atoi
  3669  0387  0020               	movlb	0	; select bank0
  3670  0388  0826               	movf	?_atoi,w
  3671  0389  00D7               	movwf	??_PROTOCOL_Loop
  3672  038A  0857               	movf	??_PROTOCOL_Loop,w
  3673  038B  00DA               	movwf	PROTOCOL_Loop@device_address
  3674                           
  3675                           ;protocol.c: 175: PROTOCOL_Write_Device_Address(device_address);
  3676  038C  085A               	movf	PROTOCOL_Loop@device_address,w
  3677  038D  3189  2137  3182   	fcall	_PROTOCOL_Write_Device_Address
  3678                           
  3679                           ;protocol.c: 176: } else if (!strncmp(("RDA"), (buf), 3)) {
  3680  0390  2A3E               	goto	l628
  3681  0391                     l3877:	
  3682  0391  30D6               	movlw	low (STR_15| (0+32768))
  3683  0392  0020               	movlb	0	; select bank0
  3684  0393  00A0               	movwf	strncmp@s1
  3685  0394  3086               	movlw	high (STR_15| (0+32768))
  3686  0395  00A1               	movwf	strncmp@s1+1
  3687  0396  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3688  0397  00D7               	movwf	??_PROTOCOL_Loop
  3689  0398  0857               	movf	??_PROTOCOL_Loop,w
  3690  0399  00A2               	movwf	strncmp@s2
  3691  039A  3003               	movlw	3
  3692  039B  00A3               	movwf	strncmp@len
  3693  039C  3000               	movlw	0
  3694  039D  00A4               	movwf	strncmp@len+1
  3695  039E  3187  27BE  3182   	fcall	_strncmp
  3696  03A1  0020               	movlb	0	; select bank0
  3697  03A2  0820               	movf	?_strncmp,w
  3698  03A3  0421               	iorwf	?_strncmp+1,w
  3699  03A4  1D03               	btfss	3,2
  3700  03A5  2BBC               	goto	l3883
  3701                           
  3702                           ;protocol.c: 177: device_address = PROTOCOL_Read_Device_Address();
  3703  03A6  3188  20A6  3182   	fcall	_PROTOCOL_Read_Device_Address
  3704  03A9  0020               	movlb	0	; select bank0
  3705  03AA  00D7               	movwf	??_PROTOCOL_Loop
  3706  03AB  0857               	movf	??_PROTOCOL_Loop,w
  3707  03AC  00DA               	movwf	PROTOCOL_Loop@device_address
  3708                           
  3709                           ;protocol.c: 178: printf("$:RDA:%d\n", device_address);
  3710  03AD  3059               	movlw	low (STR_16| (0+32768))
  3711  03AE  00AE               	movwf	printf@f
  3712  03AF  3086               	movlw	high (STR_16| (0+32768))
  3713  03B0  00AF               	movwf	printf@f+1
  3714  03B1  085A               	movf	PROTOCOL_Loop@device_address,w
  3715  03B2  00D7               	movwf	??_PROTOCOL_Loop
  3716  03B3  01D8               	clrf	??_PROTOCOL_Loop+1
  3717  03B4  0857               	movf	??_PROTOCOL_Loop,w
  3718  03B5  00B0               	movwf	?_printf+2
  3719  03B6  0858               	movf	??_PROTOCOL_Loop+1,w
  3720  03B7  00B1               	movwf	?_printf+3
  3721  03B8  3180  2069  3182   	fcall	_printf
  3722                           
  3723                           ;protocol.c: 179: } else {
  3724  03BB  2A3E               	goto	l628
  3725  03BC                     l3883:	
  3726                           
  3727                           ;protocol.c: 180: PROTOCOL_EXT(buf);
  3728  03BC  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3729  03BD  3188  2097  3182   	fcall	_PROTOCOL_EXT
  3730  03C0  2A3E               	goto	l628
  3731  03C1                     __end_of_PROTOCOL_Loop:	
  3732                           
  3733                           	psect	text4
  3734  07BE                     __ptext4:	
  3735 ;; *************** function _strncmp *****************
  3736 ;; Defined at:
  3737 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  3738 ;; Parameters:    Size  Location     Type
  3739 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3740 ;;		 -> STR_15(4), STR_14(4), STR_12(4), STR_11(4), 
  3741 ;;		 -> STR_8(4), STR_7(4), STR_6(4), STR_4(4), 
  3742 ;;  s2              1    2[BANK0 ] PTR const unsigned char 
  3743 ;;		 -> buf(48), 
  3744 ;;  len             2    3[BANK0 ] unsigned int 
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;		None
  3747 ;; Return value:  Size  Location     Type
  3748 ;;                  2    0[BANK0 ] int 
  3749 ;; Registers used:
  3750 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3756 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3758 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3759 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3760 ;;Total ram usage:        7 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; Hardware stack levels required when called:    5
  3763 ;; This function calls:
  3764 ;;		Nothing
  3765 ;; This function is called by:
  3766 ;;		_PROTOCOL_Loop
  3767 ;; This function uses a non-reentrant model
  3768 ;;
  3769                           
  3770                           
  3771                           ;psect for function _strncmp
  3772  07BE                     _strncmp:	
  3773  07BE                     l3617:	
  3774                           ;incstack = 0
  3775                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  3776                           
  3777  07BE  3001               	movlw	1
  3778  07BF  0020               	movlb	0	; select bank0
  3779  07C0  02A3               	subwf	strncmp@len,f
  3780  07C1  3000               	movlw	0
  3781  07C2  3BA4               	subwfb	strncmp@len+1,f
  3782  07C3  0A23               	incf	strncmp@len,w
  3783  07C4  1903               	btfsc	3,2
  3784  07C5  0A24               	incf	strncmp@len+1,w
  3785  07C6  1903               	btfsc	3,2
  3786  07C7  2FFD               	goto	l3619
  3787  07C8  0020               	movlb	0	; select bank0
  3788  07C9  0820               	movf	strncmp@s1,w
  3789  07CA  0084               	movwf	4
  3790  07CB  0821               	movf	strncmp@s1+1,w
  3791  07CC  0085               	movwf	5
  3792  07CD  0012               	moviw fsr0++
  3793  07CE  1903               	btfsc	3,2
  3794  07CF  2FDC               	goto	l3609
  3795  07D0  0822               	movf	strncmp@s2,w
  3796  07D1  0086               	movwf	6
  3797  07D2  3001               	movlw	1	; select bank2/3
  3798  07D3  0087               	movwf	7
  3799  07D4  0820               	movf	strncmp@s1,w
  3800  07D5  0084               	movwf	4
  3801  07D6  0821               	movf	strncmp@s1+1,w
  3802  07D7  0085               	movwf	5
  3803  07D8  0800               	movf	0,w	;code access
  3804  07D9  0601               	xorwf	1,w
  3805  07DA  1903               	skipnz
  3806  07DB  2FF4               	goto	l3613
  3807  07DC                     l3609:	
  3808  07DC  0822               	movf	strncmp@s2,w
  3809  07DD  0086               	movwf	6
  3810  07DE  3001               	movlw	1	; select bank2/3
  3811  07DF  0087               	movwf	7
  3812  07E0  0801               	movf	1,w
  3813  07E1  00A5               	movwf	??_strncmp
  3814  07E2  01A6               	clrf	??_strncmp+1
  3815  07E3  09A5               	comf	??_strncmp,f
  3816  07E4  09A6               	comf	??_strncmp+1,f
  3817  07E5  0AA5               	incf	??_strncmp,f
  3818  07E6  1903               	skipnz
  3819  07E7  0AA6               	incf	??_strncmp+1,f
  3820  07E8  0820               	movf	strncmp@s1,w
  3821  07E9  0084               	movwf	4
  3822  07EA  0821               	movf	strncmp@s1+1,w
  3823  07EB  0085               	movwf	5
  3824  07EC  0800               	movf	0,w	;code access
  3825  07ED  0725               	addwf	??_strncmp,w
  3826  07EE  00A0               	movwf	?_strncmp
  3827  07EF  0826               	movf	??_strncmp+1,w
  3828  07F0  1803               	skipnc
  3829  07F1  0A26               	incf	??_strncmp+1,w
  3830  07F2  00A1               	movwf	?_strncmp+1
  3831  07F3  0008               	return
  3832  07F4                     l3613:	
  3833  07F4  3001               	movlw	1
  3834  07F5  07A0               	addwf	strncmp@s1,f
  3835  07F6  3000               	movlw	0
  3836  07F7  3DA1               	addwfc	strncmp@s1+1,f
  3837  07F8  3001               	movlw	1
  3838  07F9  00A5               	movwf	??_strncmp
  3839  07FA  0825               	movf	??_strncmp,w
  3840  07FB  07A2               	addwf	strncmp@s2,f
  3841  07FC  2FBE               	goto	l3617
  3842  07FD                     l3619:	
  3843  07FD  01A0               	clrf	?_strncmp
  3844  07FE  01A1               	clrf	?_strncmp+1
  3845  07FF  0008               	return
  3846  0800                     __end_of_strncmp:	
  3847                           
  3848                           	psect	text5
  3849  0BA2                     __ptext5:	
  3850 ;; *************** function _inv_handler *****************
  3851 ;; Defined at:
  3852 ;;		line 22 in file "main.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;		None
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;  values          9   46[BANK0 ] float [3]
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  1    wreg      void 
  3859 ;; Registers used:
  3860 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 0/0
  3863 ;;		On exit  : 0/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3867 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3869 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3870 ;;Total ram usage:       10 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    9
  3873 ;; This function calls:
  3874 ;;		_PROTOCOL_I2C_Send_float
  3875 ;;		_get_accel
  3876 ;; This function is called by:
  3877 ;;		_main
  3878 ;;		_PROTOCOL_Loop
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           
  3883                           ;psect for function _inv_handler
  3884  0BA2                     _inv_handler:	
  3885                           
  3886                           ;main.c: 23: float values[3];
  3887                           ;main.c: 24: LATCbits.LATC7 ^= 1;
  3888                           
  3889                           ;incstack = 0
  3890                           ; Regs used in _inv_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3891  0BA2  0022               	movlb	2	; select bank2
  3892  0BA3  0D0E               	rlf	14,w	;volatile
  3893  0BA4  0D0E               	rlf	14,w	;volatile
  3894  0BA5  3901               	andlw	1
  3895  0BA6  0020               	movlb	0	; select bank0
  3896  0BA7  00CD               	movwf	??_inv_handler
  3897  0BA8  3001               	movlw	1
  3898  0BA9  06CD               	xorwf	??_inv_handler,f
  3899  0BAA  0CCD               	rrf	??_inv_handler,f
  3900  0BAB  0CCD               	rrf	??_inv_handler,f
  3901  0BAC  0022               	movlb	2	; select bank2
  3902  0BAD  080E               	movf	14,w	;volatile
  3903  0BAE  0020               	movlb	0	; select bank0
  3904  0BAF  064D               	xorwf	??_inv_handler,w
  3905  0BB0  397F               	andlw	-129
  3906  0BB1  064D               	xorwf	??_inv_handler,w
  3907  0BB2  0022               	movlb	2	; select bank2
  3908  0BB3  008E               	movwf	14	;volatile
  3909                           
  3910                           ;main.c: 25: values[0] = get_accel(channel_AN3);
  3911  0BB4  3003               	movlw	3
  3912  0BB5  318C  245F  318B   	fcall	_get_accel
  3913  0BB8  0020               	movlb	0	; select bank0
  3914  0BB9  0845               	movf	?_get_accel,w
  3915  0BBA  00CE               	movwf	inv_handler@values
  3916  0BBB  0846               	movf	?_get_accel+1,w
  3917  0BBC  00CF               	movwf	inv_handler@values+1
  3918  0BBD  0847               	movf	?_get_accel+2,w
  3919  0BBE  00D0               	movwf	inv_handler@values+2
  3920                           
  3921                           ;main.c: 26: values[1] = get_accel(channel_AN7);
  3922  0BBF  3007               	movlw	7
  3923  0BC0  318C  245F  318B   	fcall	_get_accel
  3924  0BC3  0020               	movlb	0	; select bank0
  3925  0BC4  0845               	movf	?_get_accel,w
  3926  0BC5  00D1               	movwf	inv_handler@values+3
  3927  0BC6  0846               	movf	?_get_accel+1,w
  3928  0BC7  00D2               	movwf	inv_handler@values+4
  3929  0BC8  0847               	movf	?_get_accel+2,w
  3930  0BC9  00D3               	movwf	inv_handler@values+5
  3931                           
  3932                           ;main.c: 27: values[2] = get_accel(channel_AN8);
  3933  0BCA  3008               	movlw	8
  3934  0BCB  318C  245F  318B   	fcall	_get_accel
  3935  0BCE  0020               	movlb	0	; select bank0
  3936  0BCF  0845               	movf	?_get_accel,w
  3937  0BD0  00D4               	movwf	inv_handler@values+6
  3938  0BD1  0846               	movf	?_get_accel+1,w
  3939  0BD2  00D5               	movwf	inv_handler@values+7
  3940  0BD3  0847               	movf	?_get_accel+2,w
  3941  0BD4  00D6               	movwf	inv_handler@values+8
  3942                           
  3943                           ;main.c: 28: PROTOCOL_I2C_Send_float(3, values);
  3944  0BD5  304E               	movlw	(low (inv_handler@values| 0))& (0+255)
  3945  0BD6  00CD               	movwf	??_inv_handler
  3946  0BD7  084D               	movf	??_inv_handler,w
  3947  0BD8  00C6               	movwf	PROTOCOL_I2C_Send_float@pbuffer
  3948  0BD9  3003               	movlw	3
  3949  0BDA  3183  23C1         	fcall	_PROTOCOL_I2C_Send_float
  3950  0BDC  0008               	return
  3951  0BDD                     __end_of_inv_handler:	
  3952                           
  3953                           	psect	text6
  3954  0C5F                     __ptext6:	
  3955 ;; *************** function _get_accel *****************
  3956 ;; Defined at:
  3957 ;;		line 13 in file "main.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;  ch              1    wreg     enum E2982
  3960 ;; Auto vars:     Size  Location     Type
  3961 ;;  ch              1   44[BANK0 ] enum E2982
  3962 ;;  steps           3   41[BANK0 ] float 
  3963 ;; Return value:  Size  Location     Type
  3964 ;;                  3   37[BANK0 ] float 
  3965 ;; Registers used:
  3966 ;;		wreg, status,2, status,0, pclath, cstack
  3967 ;; Tracked objects:
  3968 ;;		On entry : 0/0
  3969 ;;		On exit  : 0/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3972 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3973 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3975 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3976 ;;Total ram usage:        8 bytes
  3977 ;; Hardware stack levels used:    1
  3978 ;; Hardware stack levels required when called:    7
  3979 ;; This function calls:
  3980 ;;		_ADC_GetConversionResult
  3981 ;;		_ADC_IsConversionDone
  3982 ;;		_ADC_SelectChannel
  3983 ;;		_ADC_StartConversion
  3984 ;;		___ftadd
  3985 ;;		___ftdiv
  3986 ;;		___lwtoft
  3987 ;; This function is called by:
  3988 ;;		_inv_handler
  3989 ;; This function uses a non-reentrant model
  3990 ;;
  3991                           
  3992                           
  3993                           ;psect for function _get_accel
  3994  0C5F                     _get_accel:	
  3995                           
  3996                           ;incstack = 0
  3997                           ; Regs used in _get_accel: [wreg+status,2+status,0+pclath+cstack]
  3998                           ;get_accel@ch stored from wreg
  3999  0C5F  0020               	movlb	0	; select bank0
  4000  0C60  00CC               	movwf	get_accel@ch
  4001                           
  4002                           ;main.c: 14: float steps;
  4003                           ;main.c: 15: ADC_SelectChannel(ch);
  4004  0C61  084C               	movf	get_accel@ch,w
  4005  0C62  3189  2164  318C   	fcall	_ADC_SelectChannel
  4006                           
  4007                           ;main.c: 16: ADC_StartConversion();
  4008  0C65  3188  20AC  318C   	fcall	_ADC_StartConversion
  4009  0C68                     l3379:	
  4010                           ;main.c: 17: while(!ADC_IsConversionDone());
  4011                           
  4012  0C68  3188  20E8  318C   	fcall	_ADC_IsConversionDone
  4013  0C6B  3A00               	xorlw	0
  4014  0C6C  1903               	skipnz
  4015  0C6D  2C68               	goto	l3379
  4016                           
  4017                           ;main.c: 18: steps = (float)ADC_GetConversionResult();
  4018  0C6E  3189  2109  318C   	fcall	_ADC_GetConversionResult
  4019  0C71  0020               	movlb	0	; select bank0
  4020  0C72  0821               	movf	?_ADC_GetConversionResult+1,w
  4021  0C73  00A9               	movwf	___lwtoft@c+1
  4022  0C74  0820               	movf	?_ADC_GetConversionResult,w
  4023  0C75  00A8               	movwf	___lwtoft@c
  4024  0C76  3189  2186  318C   	fcall	___lwtoft
  4025  0C79  0020               	movlb	0	; select bank0
  4026  0C7A  0828               	movf	?___lwtoft,w
  4027  0C7B  00C9               	movwf	get_accel@steps
  4028  0C7C  0829               	movf	?___lwtoft+1,w
  4029  0C7D  00CA               	movwf	get_accel@steps+1
  4030  0C7E  082A               	movf	?___lwtoft+2,w
  4031  0C7F  00CB               	movwf	get_accel@steps+2
  4032                           
  4033                           ;main.c: 19: return (steps - 512.0)/204.8;
  4034  0C80  30CD               	movlw	205
  4035  0C81  00B5               	movwf	___ftdiv@f2
  4036  0C82  304C               	movlw	76
  4037  0C83  00B6               	movwf	___ftdiv@f2+1
  4038  0C84  3043               	movlw	67
  4039  0C85  00B7               	movwf	___ftdiv@f2+2
  4040  0C86  3000               	movlw	0
  4041  0C87  00A8               	movwf	___ftadd@f1
  4042  0C88  3000               	movlw	0
  4043  0C89  00A9               	movwf	___ftadd@f1+1
  4044  0C8A  30C4               	movlw	196
  4045  0C8B  00AA               	movwf	___ftadd@f1+2
  4046  0C8C  0849               	movf	get_accel@steps,w
  4047  0C8D  00AB               	movwf	___ftadd@f2
  4048  0C8E  084A               	movf	get_accel@steps+1,w
  4049  0C8F  00AC               	movwf	___ftadd@f2+1
  4050  0C90  084B               	movf	get_accel@steps+2,w
  4051  0C91  00AD               	movwf	___ftadd@f2+2
  4052  0C92  3185  2540  318C   	fcall	___ftadd
  4053  0C95  0020               	movlb	0	; select bank0
  4054  0C96  0828               	movf	?___ftadd,w
  4055  0C97  00B8               	movwf	___ftdiv@f1
  4056  0C98  0829               	movf	?___ftadd+1,w
  4057  0C99  00B9               	movwf	___ftdiv@f1+1
  4058  0C9A  082A               	movf	?___ftadd+2,w
  4059  0C9B  00BA               	movwf	___ftdiv@f1+2
  4060  0C9C  318E  26A3         	fcall	___ftdiv
  4061  0C9E  0020               	movlb	0	; select bank0
  4062  0C9F  0835               	movf	?___ftdiv,w
  4063  0CA0  00C5               	movwf	?_get_accel
  4064  0CA1  0836               	movf	?___ftdiv+1,w
  4065  0CA2  00C6               	movwf	?_get_accel+1
  4066  0CA3  0837               	movf	?___ftdiv+2,w
  4067  0CA4  00C7               	movwf	?_get_accel+2
  4068  0CA5  0008               	return
  4069  0CA6                     __end_of_get_accel:	
  4070                           
  4071                           	psect	text7
  4072  0986                     __ptext7:	
  4073 ;; *************** function ___lwtoft *****************
  4074 ;; Defined at:
  4075 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  c               2    8[BANK0 ] unsigned int 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;		None
  4080 ;; Return value:  Size  Location     Type
  4081 ;;                  3    8[BANK0 ] float 
  4082 ;; Registers used:
  4083 ;;		wreg, status,2, status,0, pclath, cstack
  4084 ;; Tracked objects:
  4085 ;;		On entry : 0/0
  4086 ;;		On exit  : 0/0
  4087 ;;		Unchanged: 0/0
  4088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4089 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4091 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4092 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4093 ;;Total ram usage:        4 bytes
  4094 ;; Hardware stack levels used:    1
  4095 ;; Hardware stack levels required when called:    6
  4096 ;; This function calls:
  4097 ;;		___ftpack
  4098 ;; This function is called by:
  4099 ;;		_get_accel
  4100 ;; This function uses a non-reentrant model
  4101 ;;
  4102                           
  4103                           
  4104                           ;psect for function ___lwtoft
  4105  0986                     ___lwtoft:	
  4106                           
  4107                           ;incstack = 0
  4108                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  4109  0986  0020               	movlb	0	; select bank0
  4110  0987  0828               	movf	___lwtoft@c,w
  4111  0988  00A0               	movwf	___ftpack@arg
  4112  0989  0829               	movf	___lwtoft@c+1,w
  4113  098A  00A1               	movwf	___ftpack@arg+1
  4114  098B  01A2               	clrf	___ftpack@arg+2
  4115  098C  308E               	movlw	142
  4116  098D  00AB               	movwf	??___lwtoft
  4117  098E  082B               	movf	??___lwtoft,w
  4118  098F  00A3               	movwf	___ftpack@exp
  4119  0990  01A4               	clrf	___ftpack@sign
  4120  0991  318D  2546         	fcall	___ftpack
  4121  0993  0020               	movlb	0	; select bank0
  4122  0994  0820               	movf	?___ftpack,w
  4123  0995  00A8               	movwf	?___lwtoft
  4124  0996  0821               	movf	?___ftpack+1,w
  4125  0997  00A9               	movwf	?___lwtoft+1
  4126  0998  0822               	movf	?___ftpack+2,w
  4127  0999  00AA               	movwf	?___lwtoft+2
  4128  099A  0008               	return
  4129  099B                     __end_of___lwtoft:	
  4130                           
  4131                           	psect	text8
  4132  0EA3                     __ptext8:	
  4133 ;; *************** function ___ftdiv *****************
  4134 ;; Defined at:
  4135 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;  f2              3   21[BANK0 ] float 
  4138 ;;  f1              3   24[BANK0 ] float 
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;  f3              3   32[BANK0 ] float 
  4141 ;;  sign            1   36[BANK0 ] unsigned char 
  4142 ;;  exp             1   35[BANK0 ] unsigned char 
  4143 ;;  cntr            1   31[BANK0 ] unsigned char 
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  3   21[BANK0 ] float 
  4146 ;; Registers used:
  4147 ;;		wreg, status,2, status,0, pclath, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4153 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4154 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4155 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4156 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4157 ;;Total ram usage:       16 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    6
  4160 ;; This function calls:
  4161 ;;		___ftpack
  4162 ;; This function is called by:
  4163 ;;		_get_accel
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           
  4168                           ;psect for function ___ftdiv
  4169  0EA3                     ___ftdiv:	
  4170                           
  4171                           ;incstack = 0
  4172                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  4173  0EA3  0020               	movlb	0	; select bank0
  4174  0EA4  0838               	movf	___ftdiv@f1,w
  4175  0EA5  00BB               	movwf	??___ftdiv
  4176  0EA6  0839               	movf	___ftdiv@f1+1,w
  4177  0EA7  00BC               	movwf	??___ftdiv+1
  4178  0EA8  083A               	movf	___ftdiv@f1+2,w
  4179  0EA9  00BD               	movwf	??___ftdiv+2
  4180  0EAA  1003               	clrc
  4181  0EAB  0D3C               	rlf	??___ftdiv+1,w
  4182  0EAC  0D3D               	rlf	??___ftdiv+2,w
  4183  0EAD  00BE               	movwf	??___ftdiv+3
  4184  0EAE  083E               	movf	??___ftdiv+3,w
  4185  0EAF  00C3               	movwf	___ftdiv@exp
  4186  0EB0  0843               	movf	___ftdiv@exp,w
  4187  0EB1  1D03               	btfss	3,2
  4188  0EB2  2EBA               	goto	l3153
  4189  0EB3  3000               	movlw	0
  4190  0EB4  00B5               	movwf	?___ftdiv
  4191  0EB5  3000               	movlw	0
  4192  0EB6  00B6               	movwf	?___ftdiv+1
  4193  0EB7  3000               	movlw	0
  4194  0EB8  00B7               	movwf	?___ftdiv+2
  4195  0EB9  0008               	return
  4196  0EBA                     l3153:	
  4197  0EBA  0835               	movf	___ftdiv@f2,w
  4198  0EBB  00BB               	movwf	??___ftdiv
  4199  0EBC  0836               	movf	___ftdiv@f2+1,w
  4200  0EBD  00BC               	movwf	??___ftdiv+1
  4201  0EBE  0837               	movf	___ftdiv@f2+2,w
  4202  0EBF  00BD               	movwf	??___ftdiv+2
  4203  0EC0  1003               	clrc
  4204  0EC1  0D3C               	rlf	??___ftdiv+1,w
  4205  0EC2  0D3D               	rlf	??___ftdiv+2,w
  4206  0EC3  00BE               	movwf	??___ftdiv+3
  4207  0EC4  083E               	movf	??___ftdiv+3,w
  4208  0EC5  00C4               	movwf	___ftdiv@sign
  4209  0EC6  0844               	movf	___ftdiv@sign,w
  4210  0EC7  1D03               	btfss	3,2
  4211  0EC8  2ED0               	goto	l3159
  4212  0EC9  3000               	movlw	0
  4213  0ECA  00B5               	movwf	?___ftdiv
  4214  0ECB  3000               	movlw	0
  4215  0ECC  00B6               	movwf	?___ftdiv+1
  4216  0ECD  3000               	movlw	0
  4217  0ECE  00B7               	movwf	?___ftdiv+2
  4218  0ECF  0008               	return
  4219  0ED0                     l3159:	
  4220  0ED0  3000               	movlw	0
  4221  0ED1  00C0               	movwf	___ftdiv@f3
  4222  0ED2  3000               	movlw	0
  4223  0ED3  00C1               	movwf	___ftdiv@f3+1
  4224  0ED4  3000               	movlw	0
  4225  0ED5  00C2               	movwf	___ftdiv@f3+2
  4226  0ED6  3089               	movlw	137
  4227  0ED7  0744               	addwf	___ftdiv@sign,w
  4228  0ED8  00BB               	movwf	??___ftdiv
  4229  0ED9  083B               	movf	??___ftdiv,w
  4230  0EDA  02C3               	subwf	___ftdiv@exp,f
  4231  0EDB  0838               	movf	___ftdiv@f1,w
  4232  0EDC  00BB               	movwf	??___ftdiv
  4233  0EDD  0839               	movf	___ftdiv@f1+1,w
  4234  0EDE  00BC               	movwf	??___ftdiv+1
  4235  0EDF  083A               	movf	___ftdiv@f1+2,w
  4236  0EE0  00BD               	movwf	??___ftdiv+2
  4237  0EE1  3010               	movlw	16
  4238  0EE2                     u3145:	
  4239  0EE2  36BD               	lsrf	??___ftdiv+2,f
  4240  0EE3  0CBC               	rrf	??___ftdiv+1,f
  4241  0EE4  0CBB               	rrf	??___ftdiv,f
  4242  0EE5  0B89               	decfsz	9,f
  4243  0EE6  2EE2               	goto	u3145
  4244  0EE7  083B               	movf	??___ftdiv,w
  4245  0EE8  00BE               	movwf	??___ftdiv+3
  4246  0EE9  083E               	movf	??___ftdiv+3,w
  4247  0EEA  00C4               	movwf	___ftdiv@sign
  4248  0EEB  0835               	movf	___ftdiv@f2,w
  4249  0EEC  00BB               	movwf	??___ftdiv
  4250  0EED  0836               	movf	___ftdiv@f2+1,w
  4251  0EEE  00BC               	movwf	??___ftdiv+1
  4252  0EEF  0837               	movf	___ftdiv@f2+2,w
  4253  0EF0  00BD               	movwf	??___ftdiv+2
  4254  0EF1  3010               	movlw	16
  4255  0EF2                     u3155:	
  4256  0EF2  36BD               	lsrf	??___ftdiv+2,f
  4257  0EF3  0CBC               	rrf	??___ftdiv+1,f
  4258  0EF4  0CBB               	rrf	??___ftdiv,f
  4259  0EF5  0B89               	decfsz	9,f
  4260  0EF6  2EF2               	goto	u3155
  4261  0EF7  083B               	movf	??___ftdiv,w
  4262  0EF8  00BE               	movwf	??___ftdiv+3
  4263  0EF9  083E               	movf	??___ftdiv+3,w
  4264  0EFA  06C4               	xorwf	___ftdiv@sign,f
  4265  0EFB  3080               	movlw	128
  4266  0EFC  00BB               	movwf	??___ftdiv
  4267  0EFD  083B               	movf	??___ftdiv,w
  4268  0EFE  05C4               	andwf	___ftdiv@sign,f
  4269  0EFF  17B9               	bsf	___ftdiv@f1+1,7
  4270  0F00  30FF               	movlw	255
  4271  0F01  05B8               	andwf	___ftdiv@f1,f
  4272  0F02  30FF               	movlw	255
  4273  0F03  05B9               	andwf	___ftdiv@f1+1,f
  4274  0F04  3000               	movlw	0
  4275  0F05  05BA               	andwf	___ftdiv@f1+2,f
  4276  0F06  17B6               	bsf	___ftdiv@f2+1,7
  4277  0F07  30FF               	movlw	255
  4278  0F08  05B5               	andwf	___ftdiv@f2,f
  4279  0F09  30FF               	movlw	255
  4280  0F0A  05B6               	andwf	___ftdiv@f2+1,f
  4281  0F0B  3000               	movlw	0
  4282  0F0C  05B7               	andwf	___ftdiv@f2+2,f
  4283  0F0D  3018               	movlw	24
  4284  0F0E  00BB               	movwf	??___ftdiv
  4285  0F0F  083B               	movf	??___ftdiv,w
  4286  0F10  00BF               	movwf	___ftdiv@cntr
  4287  0F11                     l3173:	
  4288  0F11  3001               	movlw	1
  4289  0F12                     u3165:	
  4290  0F12  35C0               	lslf	___ftdiv@f3,f
  4291  0F13  0DC1               	rlf	___ftdiv@f3+1,f
  4292  0F14  0DC2               	rlf	___ftdiv@f3+2,f
  4293  0F15  0B89               	decfsz	9,f
  4294  0F16  2F12               	goto	u3165
  4295  0F17  0837               	movf	___ftdiv@f2+2,w
  4296  0F18  023A               	subwf	___ftdiv@f1+2,w
  4297  0F19  1D03               	skipz
  4298  0F1A  2F21               	goto	u3175
  4299  0F1B  0836               	movf	___ftdiv@f2+1,w
  4300  0F1C  0239               	subwf	___ftdiv@f1+1,w
  4301  0F1D  1D03               	skipz
  4302  0F1E  2F21               	goto	u3175
  4303  0F1F  0835               	movf	___ftdiv@f2,w
  4304  0F20  0238               	subwf	___ftdiv@f1,w
  4305  0F21                     u3175:	
  4306  0F21  1C03               	skipc
  4307  0F22  2F2A               	goto	l3181
  4308  0F23  0835               	movf	___ftdiv@f2,w
  4309  0F24  02B8               	subwf	___ftdiv@f1,f
  4310  0F25  0836               	movf	___ftdiv@f2+1,w
  4311  0F26  3BB9               	subwfb	___ftdiv@f1+1,f
  4312  0F27  0837               	movf	___ftdiv@f2+2,w
  4313  0F28  3BBA               	subwfb	___ftdiv@f1+2,f
  4314  0F29  1440               	bsf	___ftdiv@f3,0
  4315  0F2A                     l3181:	
  4316  0F2A  3001               	movlw	1
  4317  0F2B                     u3185:	
  4318  0F2B  35B8               	lslf	___ftdiv@f1,f
  4319  0F2C  0DB9               	rlf	___ftdiv@f1+1,f
  4320  0F2D  0DBA               	rlf	___ftdiv@f1+2,f
  4321  0F2E  0B89               	decfsz	9,f
  4322  0F2F  2F2B               	goto	u3185
  4323  0F30  3001               	movlw	1
  4324  0F31  02BF               	subwf	___ftdiv@cntr,f
  4325  0F32  1D03               	btfss	3,2
  4326  0F33  2F11               	goto	l3173
  4327  0F34  0840               	movf	___ftdiv@f3,w
  4328  0F35  00A0               	movwf	___ftpack@arg
  4329  0F36  0841               	movf	___ftdiv@f3+1,w
  4330  0F37  00A1               	movwf	___ftpack@arg+1
  4331  0F38  0842               	movf	___ftdiv@f3+2,w
  4332  0F39  00A2               	movwf	___ftpack@arg+2
  4333  0F3A  0843               	movf	___ftdiv@exp,w
  4334  0F3B  00BB               	movwf	??___ftdiv
  4335  0F3C  083B               	movf	??___ftdiv,w
  4336  0F3D  00A3               	movwf	___ftpack@exp
  4337  0F3E  0844               	movf	___ftdiv@sign,w
  4338  0F3F  00BC               	movwf	??___ftdiv+1
  4339  0F40  083C               	movf	??___ftdiv+1,w
  4340  0F41  00A4               	movwf	___ftpack@sign
  4341  0F42  318D  2546         	fcall	___ftpack
  4342  0F44  0020               	movlb	0	; select bank0
  4343  0F45  0820               	movf	?___ftpack,w
  4344  0F46  00B5               	movwf	?___ftdiv
  4345  0F47  0821               	movf	?___ftpack+1,w
  4346  0F48  00B6               	movwf	?___ftdiv+1
  4347  0F49  0822               	movf	?___ftpack+2,w
  4348  0F4A  00B7               	movwf	?___ftdiv+2
  4349  0F4B  0008               	return
  4350  0F4C                     __end_of___ftdiv:	
  4351                           
  4352                           	psect	text9
  4353  0540                     __ptext9:	
  4354 ;; *************** function ___ftadd *****************
  4355 ;; Defined at:
  4356 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;  f1              3    8[BANK0 ] float 
  4359 ;;  f2              3   11[BANK0 ] float 
  4360 ;; Auto vars:     Size  Location     Type
  4361 ;;  exp1            1   20[BANK0 ] unsigned char 
  4362 ;;  exp2            1   19[BANK0 ] unsigned char 
  4363 ;;  sign            1   18[BANK0 ] unsigned char 
  4364 ;; Return value:  Size  Location     Type
  4365 ;;                  3    8[BANK0 ] float 
  4366 ;; Registers used:
  4367 ;;		wreg, status,2, status,0, pclath, cstack
  4368 ;; Tracked objects:
  4369 ;;		On entry : 0/0
  4370 ;;		On exit  : 0/0
  4371 ;;		Unchanged: 0/0
  4372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4373 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4374 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4375 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4376 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4377 ;;Total ram usage:       13 bytes
  4378 ;; Hardware stack levels used:    1
  4379 ;; Hardware stack levels required when called:    6
  4380 ;; This function calls:
  4381 ;;		___ftpack
  4382 ;; This function is called by:
  4383 ;;		_get_accel
  4384 ;; This function uses a non-reentrant model
  4385 ;;
  4386                           
  4387                           
  4388                           ;psect for function ___ftadd
  4389  0540                     ___ftadd:	
  4390                           
  4391                           ;incstack = 0
  4392                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4393  0540  0020               	movlb	0	; select bank0
  4394  0541  0828               	movf	___ftadd@f1,w
  4395  0542  00AE               	movwf	??___ftadd
  4396  0543  0829               	movf	___ftadd@f1+1,w
  4397  0544  00AF               	movwf	??___ftadd+1
  4398  0545  082A               	movf	___ftadd@f1+2,w
  4399  0546  00B0               	movwf	??___ftadd+2
  4400  0547  1003               	clrc
  4401  0548  0D2F               	rlf	??___ftadd+1,w
  4402  0549  0D30               	rlf	??___ftadd+2,w
  4403  054A  00B1               	movwf	??___ftadd+3
  4404  054B  0831               	movf	??___ftadd+3,w
  4405  054C  00B4               	movwf	___ftadd@exp1
  4406  054D  082B               	movf	___ftadd@f2,w
  4407  054E  00AE               	movwf	??___ftadd
  4408  054F  082C               	movf	___ftadd@f2+1,w
  4409  0550  00AF               	movwf	??___ftadd+1
  4410  0551  082D               	movf	___ftadd@f2+2,w
  4411  0552  00B0               	movwf	??___ftadd+2
  4412  0553  1003               	clrc
  4413  0554  0D2F               	rlf	??___ftadd+1,w
  4414  0555  0D30               	rlf	??___ftadd+2,w
  4415  0556  00B1               	movwf	??___ftadd+3
  4416  0557  0831               	movf	??___ftadd+3,w
  4417  0558  00B3               	movwf	___ftadd@exp2
  4418  0559  0834               	movf	___ftadd@exp1,w
  4419  055A  1903               	btfsc	3,2
  4420  055B  2D68               	goto	l3083
  4421  055C  0833               	movf	___ftadd@exp2,w
  4422  055D  0234               	subwf	___ftadd@exp1,w
  4423  055E  1803               	skipnc
  4424  055F  2D6F               	goto	l3087
  4425  0560  0334               	decf	___ftadd@exp1,w
  4426  0561  3AFF               	xorlw	255
  4427  0562  0733               	addwf	___ftadd@exp2,w
  4428  0563  00AE               	movwf	??___ftadd
  4429  0564  3019               	movlw	25
  4430  0565  022E               	subwf	??___ftadd,w
  4431  0566  1C03               	skipc
  4432  0567  2D6F               	goto	l3087
  4433  0568                     l3083:	
  4434  0568  082B               	movf	___ftadd@f2,w
  4435  0569  00A8               	movwf	?___ftadd
  4436  056A  082C               	movf	___ftadd@f2+1,w
  4437  056B  00A9               	movwf	?___ftadd+1
  4438  056C  082D               	movf	___ftadd@f2+2,w
  4439  056D  00AA               	movwf	?___ftadd+2
  4440  056E  0008               	return
  4441  056F                     l3087:	
  4442  056F  0833               	movf	___ftadd@exp2,w
  4443  0570  1903               	btfsc	3,2
  4444  0571  0008               	return
  4445  0572  0834               	movf	___ftadd@exp1,w
  4446  0573  0233               	subwf	___ftadd@exp2,w
  4447  0574  1803               	skipnc
  4448  0575  2D7E               	goto	l3093
  4449  0576  0333               	decf	___ftadd@exp2,w
  4450  0577  3AFF               	xorlw	255
  4451  0578  0734               	addwf	___ftadd@exp1,w
  4452  0579  00AE               	movwf	??___ftadd
  4453  057A  3019               	movlw	25
  4454  057B  022E               	subwf	??___ftadd,w
  4455  057C  1803               	btfsc	3,0
  4456  057D  0008               	return
  4457  057E                     l3093:	
  4458  057E  3006               	movlw	6
  4459  057F  00AE               	movwf	??___ftadd
  4460  0580  082E               	movf	??___ftadd,w
  4461  0581  00B2               	movwf	___ftadd@sign
  4462  0582  1BAA               	btfsc	___ftadd@f1+2,7
  4463  0583  17B2               	bsf	___ftadd@sign,7
  4464  0584  1BAD               	btfsc	___ftadd@f2+2,7
  4465  0585  1732               	bsf	___ftadd@sign,6
  4466  0586  17A9               	bsf	___ftadd@f1+1,7
  4467  0587  30FF               	movlw	255
  4468  0588  05A8               	andwf	___ftadd@f1,f
  4469  0589  30FF               	movlw	255
  4470  058A  05A9               	andwf	___ftadd@f1+1,f
  4471  058B  3000               	movlw	0
  4472  058C  05AA               	andwf	___ftadd@f1+2,f
  4473  058D  17AC               	bsf	___ftadd@f2+1,7
  4474  058E  30FF               	movlw	255
  4475  058F  05AB               	andwf	___ftadd@f2,f
  4476  0590  30FF               	movlw	255
  4477  0591  05AC               	andwf	___ftadd@f2+1,f
  4478  0592  3000               	movlw	0
  4479  0593  05AD               	andwf	___ftadd@f2+2,f
  4480  0594  0833               	movf	___ftadd@exp2,w
  4481  0595  0234               	subwf	___ftadd@exp1,w
  4482  0596  1803               	skipnc
  4483  0597  2DBA               	goto	l3115
  4484  0598                     l3105:	
  4485  0598  3001               	movlw	1
  4486  0599                     u2985:	
  4487  0599  35AB               	lslf	___ftadd@f2,f
  4488  059A  0DAC               	rlf	___ftadd@f2+1,f
  4489  059B  0DAD               	rlf	___ftadd@f2+2,f
  4490  059C  0B89               	decfsz	9,f
  4491  059D  2D99               	goto	u2985
  4492  059E  3001               	movlw	1
  4493  059F  02B3               	subwf	___ftadd@exp2,f
  4494  05A0  0833               	movf	___ftadd@exp2,w
  4495  05A1  0634               	xorwf	___ftadd@exp1,w
  4496  05A2  1903               	skipnz
  4497  05A3  2DB5               	goto	l3113
  4498  05A4  3001               	movlw	1
  4499  05A5  02B2               	subwf	___ftadd@sign,f
  4500  05A6  0832               	movf	___ftadd@sign,w
  4501  05A7  3907               	andlw	7
  4502  05A8  1903               	btfsc	3,2
  4503  05A9  2DB5               	goto	l3113
  4504  05AA  2D98               	goto	l3105
  4505  05AB                     l3111:	
  4506  05AB  3001               	movlw	1
  4507  05AC                     u3015:	
  4508  05AC  36AA               	lsrf	___ftadd@f1+2,f
  4509  05AD  0CA9               	rrf	___ftadd@f1+1,f
  4510  05AE  0CA8               	rrf	___ftadd@f1,f
  4511  05AF  0B89               	decfsz	9,f
  4512  05B0  2DAC               	goto	u3015
  4513  05B1  3001               	movlw	1
  4514  05B2  00AE               	movwf	??___ftadd
  4515  05B3  082E               	movf	??___ftadd,w
  4516  05B4  07B4               	addwf	___ftadd@exp1,f
  4517  05B5                     l3113:	
  4518  05B5  0834               	movf	___ftadd@exp1,w
  4519  05B6  0633               	xorwf	___ftadd@exp2,w
  4520  05B7  1903               	btfsc	3,2
  4521  05B8  2DDF               	goto	l1109
  4522  05B9  2DAB               	goto	l3111
  4523  05BA                     l3115:	
  4524  05BA  0834               	movf	___ftadd@exp1,w
  4525  05BB  0233               	subwf	___ftadd@exp2,w
  4526  05BC  1803               	skipnc
  4527  05BD  2DDF               	goto	l1109
  4528  05BE                     l3117:	
  4529  05BE  3001               	movlw	1
  4530  05BF                     u3045:	
  4531  05BF  35A8               	lslf	___ftadd@f1,f
  4532  05C0  0DA9               	rlf	___ftadd@f1+1,f
  4533  05C1  0DAA               	rlf	___ftadd@f1+2,f
  4534  05C2  0B89               	decfsz	9,f
  4535  05C3  2DBF               	goto	u3045
  4536  05C4  3001               	movlw	1
  4537  05C5  02B4               	subwf	___ftadd@exp1,f
  4538  05C6  0833               	movf	___ftadd@exp2,w
  4539  05C7  0634               	xorwf	___ftadd@exp1,w
  4540  05C8  1903               	skipnz
  4541  05C9  2DDB               	goto	l3125
  4542  05CA  3001               	movlw	1
  4543  05CB  02B2               	subwf	___ftadd@sign,f
  4544  05CC  0832               	movf	___ftadd@sign,w
  4545  05CD  3907               	andlw	7
  4546  05CE  1903               	btfsc	3,2
  4547  05CF  2DDB               	goto	l3125
  4548  05D0  2DBE               	goto	l3117
  4549  05D1                     l3123:	
  4550  05D1  3001               	movlw	1
  4551  05D2                     u3075:	
  4552  05D2  36AD               	lsrf	___ftadd@f2+2,f
  4553  05D3  0CAC               	rrf	___ftadd@f2+1,f
  4554  05D4  0CAB               	rrf	___ftadd@f2,f
  4555  05D5  0B89               	decfsz	9,f
  4556  05D6  2DD2               	goto	u3075
  4557  05D7  3001               	movlw	1
  4558  05D8  00AE               	movwf	??___ftadd
  4559  05D9  082E               	movf	??___ftadd,w
  4560  05DA  07B3               	addwf	___ftadd@exp2,f
  4561  05DB                     l3125:	
  4562  05DB  0834               	movf	___ftadd@exp1,w
  4563  05DC  0633               	xorwf	___ftadd@exp2,w
  4564  05DD  1D03               	skipz
  4565  05DE  2DD1               	goto	l3123
  4566  05DF                     l1109:	
  4567  05DF  1FB2               	btfss	___ftadd@sign,7
  4568  05E0  2DF1               	goto	l3129
  4569  05E1  30FF               	movlw	255
  4570  05E2  06A8               	xorwf	___ftadd@f1,f
  4571  05E3  30FF               	movlw	255
  4572  05E4  06A9               	xorwf	___ftadd@f1+1,f
  4573  05E5  30FF               	movlw	255
  4574  05E6  06AA               	xorwf	___ftadd@f1+2,f
  4575  05E7  3001               	movlw	1
  4576  05E8  07A8               	addwf	___ftadd@f1,f
  4577  05E9  3000               	movlw	0
  4578  05EA  1803               	skipnc
  4579  05EB  3001               	movlw	1
  4580  05EC  07A9               	addwf	___ftadd@f1+1,f
  4581  05ED  3000               	movlw	0
  4582  05EE  1803               	skipnc
  4583  05EF  3001               	movlw	1
  4584  05F0  07AA               	addwf	___ftadd@f1+2,f
  4585  05F1                     l3129:	
  4586  05F1  1F32               	btfss	___ftadd@sign,6
  4587  05F2  2E03               	goto	l3133
  4588  05F3  30FF               	movlw	255
  4589  05F4  06AB               	xorwf	___ftadd@f2,f
  4590  05F5  30FF               	movlw	255
  4591  05F6  06AC               	xorwf	___ftadd@f2+1,f
  4592  05F7  30FF               	movlw	255
  4593  05F8  06AD               	xorwf	___ftadd@f2+2,f
  4594  05F9  3001               	movlw	1
  4595  05FA  07AB               	addwf	___ftadd@f2,f
  4596  05FB  3000               	movlw	0
  4597  05FC  1803               	skipnc
  4598  05FD  3001               	movlw	1
  4599  05FE  07AC               	addwf	___ftadd@f2+1,f
  4600  05FF  3000               	movlw	0
  4601  0600  1803               	skipnc
  4602  0601  3001               	movlw	1
  4603  0602  07AD               	addwf	___ftadd@f2+2,f
  4604  0603                     l3133:	
  4605  0603  01B2               	clrf	___ftadd@sign
  4606  0604  0828               	movf	___ftadd@f1,w
  4607  0605  07AB               	addwf	___ftadd@f2,f
  4608  0606  0829               	movf	___ftadd@f1+1,w
  4609  0607  3DAC               	addwfc	___ftadd@f2+1,f
  4610  0608  082A               	movf	___ftadd@f1+2,w
  4611  0609  3DAD               	addwfc	___ftadd@f2+2,f
  4612  060A  1FAD               	btfss	___ftadd@f2+2,7
  4613  060B  2E1E               	goto	l3143
  4614  060C  30FF               	movlw	255
  4615  060D  06AB               	xorwf	___ftadd@f2,f
  4616  060E  30FF               	movlw	255
  4617  060F  06AC               	xorwf	___ftadd@f2+1,f
  4618  0610  30FF               	movlw	255
  4619  0611  06AD               	xorwf	___ftadd@f2+2,f
  4620  0612  3001               	movlw	1
  4621  0613  07AB               	addwf	___ftadd@f2,f
  4622  0614  3000               	movlw	0
  4623  0615  1803               	skipnc
  4624  0616  3001               	movlw	1
  4625  0617  07AC               	addwf	___ftadd@f2+1,f
  4626  0618  3000               	movlw	0
  4627  0619  1803               	skipnc
  4628  061A  3001               	movlw	1
  4629  061B  07AD               	addwf	___ftadd@f2+2,f
  4630  061C  01B2               	clrf	___ftadd@sign
  4631  061D  0AB2               	incf	___ftadd@sign,f
  4632  061E                     l3143:	
  4633  061E  082B               	movf	___ftadd@f2,w
  4634  061F  00A0               	movwf	___ftpack@arg
  4635  0620  082C               	movf	___ftadd@f2+1,w
  4636  0621  00A1               	movwf	___ftpack@arg+1
  4637  0622  082D               	movf	___ftadd@f2+2,w
  4638  0623  00A2               	movwf	___ftpack@arg+2
  4639  0624  0834               	movf	___ftadd@exp1,w
  4640  0625  00AE               	movwf	??___ftadd
  4641  0626  082E               	movf	??___ftadd,w
  4642  0627  00A3               	movwf	___ftpack@exp
  4643  0628  0832               	movf	___ftadd@sign,w
  4644  0629  00AF               	movwf	??___ftadd+1
  4645  062A  082F               	movf	??___ftadd+1,w
  4646  062B  00A4               	movwf	___ftpack@sign
  4647  062C  318D  2546         	fcall	___ftpack
  4648  062E  0020               	movlb	0	; select bank0
  4649  062F  0820               	movf	?___ftpack,w
  4650  0630  00A8               	movwf	?___ftadd
  4651  0631  0821               	movf	?___ftpack+1,w
  4652  0632  00A9               	movwf	?___ftadd+1
  4653  0633  0822               	movf	?___ftpack+2,w
  4654  0634  00AA               	movwf	?___ftadd+2
  4655  0635  0008               	return
  4656  0636                     __end_of___ftadd:	
  4657                           
  4658                           	psect	text10
  4659  08AC                     __ptext10:	
  4660 ;; *************** function _ADC_StartConversion *****************
  4661 ;; Defined at:
  4662 ;;		line 90 in file "mcc_generated_files/adc.c"
  4663 ;; Parameters:    Size  Location     Type
  4664 ;;		None
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;		None
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  1    wreg      void 
  4669 ;; Registers used:
  4670 ;;		None
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4680 ;;Total ram usage:        0 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; Hardware stack levels required when called:    5
  4683 ;; This function calls:
  4684 ;;		Nothing
  4685 ;; This function is called by:
  4686 ;;		_get_accel
  4687 ;; This function uses a non-reentrant model
  4688 ;;
  4689                           
  4690                           
  4691                           ;psect for function _ADC_StartConversion
  4692  08AC                     _ADC_StartConversion:	
  4693                           
  4694                           ;adc.c: 93: ADCON0bits.GO_nDONE = 1;
  4695                           
  4696                           ;incstack = 0
  4697                           ; Regs used in _ADC_StartConversion: []
  4698  08AC  0021               	movlb	1	; select bank1
  4699  08AD  149D               	bsf	29,1	;volatile
  4700  08AE  0008               	return
  4701  08AF                     __end_of_ADC_StartConversion:	
  4702                           
  4703                           	psect	text11
  4704  0964                     __ptext11:	
  4705 ;; *************** function _ADC_SelectChannel *****************
  4706 ;; Defined at:
  4707 ;;		line 82 in file "mcc_generated_files/adc.c"
  4708 ;; Parameters:    Size  Location     Type
  4709 ;;  channel         1    wreg     enum E2975
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  channel         1    1[BANK0 ] enum E2975
  4712 ;; Return value:  Size  Location     Type
  4713 ;;                  1    wreg      void 
  4714 ;; Registers used:
  4715 ;;		wreg, status,2, status,0
  4716 ;; Tracked objects:
  4717 ;;		On entry : 0/0
  4718 ;;		On exit  : 0/0
  4719 ;;		Unchanged: 0/0
  4720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4722 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4724 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4725 ;;Total ram usage:        2 bytes
  4726 ;; Hardware stack levels used:    1
  4727 ;; Hardware stack levels required when called:    5
  4728 ;; This function calls:
  4729 ;;		Nothing
  4730 ;; This function is called by:
  4731 ;;		_get_accel
  4732 ;; This function uses a non-reentrant model
  4733 ;;
  4734                           
  4735                           
  4736                           ;psect for function _ADC_SelectChannel
  4737  0964                     _ADC_SelectChannel:	
  4738                           
  4739                           ;incstack = 0
  4740                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  4741                           ;ADC_SelectChannel@channel stored from wreg
  4742  0964  0020               	movlb	0	; select bank0
  4743  0965  00A1               	movwf	ADC_SelectChannel@channel
  4744                           
  4745                           ;adc.c: 85: ADCON0bits.CHS = channel;
  4746  0966  0821               	movf	ADC_SelectChannel@channel,w
  4747  0967  00A0               	movwf	??_ADC_SelectChannel
  4748  0968  0DA0               	rlf	??_ADC_SelectChannel,f
  4749  0969  0DA0               	rlf	??_ADC_SelectChannel,f
  4750  096A  0021               	movlb	1	; select bank1
  4751  096B  081D               	movf	29,w	;volatile
  4752  096C  0020               	movlb	0	; select bank0
  4753  096D  0620               	xorwf	??_ADC_SelectChannel,w
  4754  096E  3983               	andlw	-125
  4755  096F  0620               	xorwf	??_ADC_SelectChannel,w
  4756  0970  0021               	movlb	1	; select bank1
  4757  0971  009D               	movwf	29	;volatile
  4758                           
  4759                           ;adc.c: 87: ADCON0bits.ADON = 1;
  4760  0972  141D               	bsf	29,0	;volatile
  4761  0973  0008               	return
  4762  0974                     __end_of_ADC_SelectChannel:	
  4763                           
  4764                           	psect	text12
  4765  08E8                     __ptext12:	
  4766 ;; *************** function _ADC_IsConversionDone *****************
  4767 ;; Defined at:
  4768 ;;		line 97 in file "mcc_generated_files/adc.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;		None
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;		None
  4773 ;; Return value:  Size  Location     Type
  4774 ;;                  1    wreg      unsigned char 
  4775 ;; Registers used:
  4776 ;;		wreg, status,0
  4777 ;; Tracked objects:
  4778 ;;		On entry : 0/0
  4779 ;;		On exit  : 0/0
  4780 ;;		Unchanged: 0/0
  4781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4786 ;;Total ram usage:        0 bytes
  4787 ;; Hardware stack levels used:    1
  4788 ;; Hardware stack levels required when called:    5
  4789 ;; This function calls:
  4790 ;;		Nothing
  4791 ;; This function is called by:
  4792 ;;		_get_accel
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           
  4797                           ;psect for function _ADC_IsConversionDone
  4798  08E8                     _ADC_IsConversionDone:	
  4799                           
  4800                           ;adc.c: 100: return (!ADCON0bits.GO_nDONE);
  4801                           
  4802                           ;incstack = 0
  4803                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  4804  08E8  1003               	clrc
  4805  08E9  0021               	movlb	1	; select bank1
  4806  08EA  1C9D               	btfss	29,1	;volatile
  4807  08EB  1403               	setc
  4808  08EC  3000               	movlw	0
  4809  08ED  3D09               	addwfc	9,w
  4810  08EE  0008               	return
  4811  08EF                     __end_of_ADC_IsConversionDone:	
  4812                           
  4813                           	psect	text13
  4814  0909                     __ptext13:	
  4815 ;; *************** function _ADC_GetConversionResult *****************
  4816 ;; Defined at:
  4817 ;;		line 103 in file "mcc_generated_files/adc.c"
  4818 ;; Parameters:    Size  Location     Type
  4819 ;;		None
  4820 ;; Auto vars:     Size  Location     Type
  4821 ;;		None
  4822 ;; Return value:  Size  Location     Type
  4823 ;;                  2    0[BANK0 ] unsigned int 
  4824 ;; Registers used:
  4825 ;;		wreg
  4826 ;; Tracked objects:
  4827 ;;		On entry : 0/0
  4828 ;;		On exit  : 0/0
  4829 ;;		Unchanged: 0/0
  4830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4831 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4835 ;;Total ram usage:        2 bytes
  4836 ;; Hardware stack levels used:    1
  4837 ;; Hardware stack levels required when called:    5
  4838 ;; This function calls:
  4839 ;;		Nothing
  4840 ;; This function is called by:
  4841 ;;		_get_accel
  4842 ;; This function uses a non-reentrant model
  4843 ;;
  4844                           
  4845                           
  4846                           ;psect for function _ADC_GetConversionResult
  4847  0909                     _ADC_GetConversionResult:	
  4848                           
  4849                           ;adc.c: 106: return ((ADRESH << 8) + ADRESL);
  4850                           
  4851                           ;incstack = 0
  4852                           ; Regs used in _ADC_GetConversionResult: [wreg]
  4853  0909  0021               	movlb	1	; select bank1
  4854  090A  081C               	movf	28,w	;volatile
  4855  090B  0020               	movlb	0	; select bank0
  4856  090C  00A1               	movwf	?_ADC_GetConversionResult+1
  4857  090D  0021               	movlb	1	; select bank1
  4858  090E  081B               	movf	27,w	;volatile
  4859  090F  0020               	movlb	0	; select bank0
  4860  0910  00A0               	movwf	?_ADC_GetConversionResult
  4861  0911  0008               	return
  4862  0912                     __end_of_ADC_GetConversionResult:	
  4863                           
  4864                           	psect	text14
  4865  03C1                     __ptext14:	
  4866 ;; *************** function _PROTOCOL_I2C_Send_float *****************
  4867 ;; Defined at:
  4868 ;;		line 339 in file "protocol.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;  length          1    wreg     unsigned char 
  4871 ;;  pbuffer         1   38[BANK0 ] PTR float 
  4872 ;;		 -> PROTOCOL_Send_float@pbuf(3), inv_handler@values(9), 
  4873 ;; Auto vars:     Size  Location     Type
  4874 ;;  length          1   41[BANK0 ] unsigned char 
  4875 ;;  v               2   42[BANK0 ] int 
  4876 ;; Return value:  Size  Location     Type
  4877 ;;                  1    wreg      void 
  4878 ;; Registers used:
  4879 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/0
  4882 ;;		On exit  : 0/0
  4883 ;;		Unchanged: 0/0
  4884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4885 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4886 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4887 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4888 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;Total ram usage:        6 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; Hardware stack levels required when called:    8
  4892 ;; This function calls:
  4893 ;;		_PROTOCOL_I2C_Set_TLV
  4894 ;;		___awdiv
  4895 ;;		___awmod
  4896 ;;		___bmul
  4897 ;;		___ftmul
  4898 ;;		___fttol
  4899 ;;		_abs
  4900 ;;		_printf
  4901 ;; This function is called by:
  4902 ;;		_inv_handler
  4903 ;; This function uses a non-reentrant model
  4904 ;;
  4905                           
  4906                           
  4907                           ;psect for function _PROTOCOL_I2C_Send_float
  4908  03C1                     _PROTOCOL_I2C_Send_float:	
  4909                           
  4910                           ;incstack = 0
  4911                           ; Regs used in _PROTOCOL_I2C_Send_float: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4912                           ;PROTOCOL_I2C_Send_float@length stored from wreg
  4913  03C1  0020               	movlb	0	; select bank0
  4914  03C2  00C9               	movwf	PROTOCOL_I2C_Send_float@length
  4915                           
  4916                           ;protocol.c: 340: int16_t v;
  4917                           ;protocol.c: 341: if (backplane_slave_enabled) {
  4918  03C3  0021               	movlb	1	; select bank1
  4919  03C4  0839               	movf	_backplane_slave_enabled^(0+128),w
  4920  03C5  1903               	btfsc	3,2
  4921  03C6  2C29               	goto	l3405
  4922                           
  4923                           ;protocol.c: 342: j = 0;
  4924  03C7  0020               	movlb	0	; select bank0
  4925  03C8  01DC               	clrf	_j
  4926                           
  4927                           ;protocol.c: 343: for (i=0; i<length; i++) {
  4928  03C9  01DD               	clrf	_i
  4929  03CA                     l3401:	
  4930  03CA  0849               	movf	PROTOCOL_I2C_Send_float@length,w
  4931  03CB  025D               	subwf	_i,w
  4932  03CC  1803               	btfsc	3,0
  4933  03CD  2C1D               	goto	l3403
  4934                           
  4935                           ;protocol.c: 344: float100 = (int16_t)(pbuffer[i] * 100);
  4936  03CE  3003               	movlw	3
  4937  03CF  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  4938  03D0  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  4939  03D1  00A0               	movwf	___bmul@multiplicand
  4940  03D2  085D               	movf	_i,w
  4941  03D3  3189  2174  3183   	fcall	___bmul
  4942  03D6  0020               	movlb	0	; select bank0
  4943  03D7  0746               	addwf	PROTOCOL_I2C_Send_float@pbuffer,w
  4944  03D8  00C8               	movwf	??_PROTOCOL_I2C_Send_float+1
  4945  03D9  0848               	movf	??_PROTOCOL_I2C_Send_float+1,w
  4946  03DA  0086               	movwf	6
  4947  03DB  0187               	clrf	7
  4948  03DC  3F40               	moviw [0]fsr1
  4949  03DD  00AB               	movwf	___ftmul@f2
  4950  03DE  3F41               	moviw [1]fsr1
  4951  03DF  00AC               	movwf	___ftmul@f2+1
  4952  03E0  3F42               	moviw [2]fsr1
  4953  03E1  00AD               	movwf	___ftmul@f2+2
  4954  03E2  3000               	movlw	0
  4955  03E3  00A8               	movwf	___ftmul@f1
  4956  03E4  30C8               	movlw	200
  4957  03E5  00A9               	movwf	___ftmul@f1+1
  4958  03E6  3042               	movlw	66
  4959  03E7  00AA               	movwf	___ftmul@f1+2
  4960  03E8  318F  274C  3183   	fcall	___ftmul
  4961  03EB  0020               	movlb	0	; select bank0
  4962  03EC  0828               	movf	?___ftmul,w
  4963  03ED  00B8               	movwf	___fttol@f1
  4964  03EE  0829               	movf	?___ftmul+1,w
  4965  03EF  00B9               	movwf	___fttol@f1+1
  4966  03F0  082A               	movf	?___ftmul+2,w
  4967  03F1  00BA               	movwf	___fttol@f1+2
  4968  03F2  318E  261C  3183   	fcall	___fttol
  4969  03F5  0020               	movlb	0	; select bank0
  4970  03F6  0839               	movf	?___fttol+1,w
  4971  03F7  0021               	movlb	1	; select bank1
  4972  03F8  00B1               	movwf	(_float100+1)^(0+128)
  4973  03F9  0020               	movlb	0	; select bank0
  4974  03FA  0838               	movf	?___fttol,w
  4975  03FB  0021               	movlb	1	; select bank1
  4976  03FC  00B0               	movwf	_float100^(0+128)
  4977                           
  4978                           ;protocol.c: 345: sendbuf[j++] = (uint8_t)((float100 >> 8) & 0x00ff);
  4979  03FD  0831               	movf	(_float100+1)^(0+128),w
  4980  03FE  0020               	movlb	0	; select bank0
  4981  03FF  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  4982  0400  085C               	movf	_j,w
  4983  0401  3EBC               	addlw	(low (_sendbuf| 0))& (0+255)
  4984  0402  0086               	movwf	6
  4985  0403  0187               	clrf	7
  4986  0404  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  4987  0405  0081               	movwf	1
  4988  0406  3001               	movlw	1
  4989  0407  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  4990  0408  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  4991  0409  07DC               	addwf	_j,f
  4992                           
  4993                           ;protocol.c: 346: sendbuf[j++] = (uint8_t)(float100 & 0x00ff);
  4994  040A  0021               	movlb	1	; select bank1
  4995  040B  0830               	movf	_float100^(0+128),w
  4996  040C  0020               	movlb	0	; select bank0
  4997  040D  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  4998  040E  085C               	movf	_j,w
  4999  040F  3EBC               	addlw	(low (_sendbuf| 0))& (0+255)
  5000  0410  0086               	movwf	6
  5001  0411  0187               	clrf	7
  5002  0412  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5003  0413  0081               	movwf	1
  5004  0414  3001               	movlw	1
  5005  0415  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5006  0416  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5007  0417  07DC               	addwf	_j,f
  5008  0418  3001               	movlw	1
  5009  0419  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5010  041A  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5011  041B  07DD               	addwf	_i,f
  5012  041C  2BCA               	goto	l3401
  5013  041D                     l3403:	
  5014                           
  5015                           ;protocol.c: 347: }
  5016                           ;protocol.c: 348: PROTOCOL_I2C_Set_TLV(0x05, length*2, &sendbuf[0]);
  5017  041D  3549               	lslf	PROTOCOL_I2C_Send_float@length,w
  5018  041E  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5019  041F  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5020  0420  00A0               	movwf	PROTOCOL_I2C_Set_TLV@length
  5021  0421  30BC               	movlw	(low (_sendbuf| 0))& (0+255)
  5022  0422  00C8               	movwf	??_PROTOCOL_I2C_Send_float+1
  5023  0423  0848               	movf	??_PROTOCOL_I2C_Send_float+1,w
  5024  0424  00A1               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer
  5025  0425  3005               	movlw	5
  5026  0426  318A  2263         	fcall	_PROTOCOL_I2C_Set_TLV
  5027                           
  5028                           ;protocol.c: 349: } else {
  5029  0428  0008               	return
  5030  0429                     l3405:	
  5031                           
  5032                           ;protocol.c: 350: length--;
  5033  0429  3001               	movlw	1
  5034  042A  0020               	movlb	0	; select bank0
  5035  042B  02C9               	subwf	PROTOCOL_I2C_Send_float@length,f
  5036                           
  5037                           ;protocol.c: 351: for (i=0; i<length; i++) {
  5038  042C  01DD               	clrf	_i
  5039  042D                     l3421:	
  5040  042D  0849               	movf	PROTOCOL_I2C_Send_float@length,w
  5041  042E  025D               	subwf	_i,w
  5042  042F  1803               	btfsc	3,0
  5043  0430  2CA6               	goto	l3423
  5044                           
  5045                           ;protocol.c: 352: v = (int16_t)(pbuffer[i] * 100);
  5046  0431  3003               	movlw	3
  5047  0432  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5048  0433  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5049  0434  00A0               	movwf	___bmul@multiplicand
  5050  0435  085D               	movf	_i,w
  5051  0436  3189  2174  3183   	fcall	___bmul
  5052  0439  0020               	movlb	0	; select bank0
  5053  043A  0746               	addwf	PROTOCOL_I2C_Send_float@pbuffer,w
  5054  043B  00C8               	movwf	??_PROTOCOL_I2C_Send_float+1
  5055  043C  0848               	movf	??_PROTOCOL_I2C_Send_float+1,w
  5056  043D  0086               	movwf	6
  5057  043E  0187               	clrf	7
  5058  043F  3F40               	moviw [0]fsr1
  5059  0440  00AB               	movwf	___ftmul@f2
  5060  0441  3F41               	moviw [1]fsr1
  5061  0442  00AC               	movwf	___ftmul@f2+1
  5062  0443  3F42               	moviw [2]fsr1
  5063  0444  00AD               	movwf	___ftmul@f2+2
  5064  0445  3000               	movlw	0
  5065  0446  00A8               	movwf	___ftmul@f1
  5066  0447  30C8               	movlw	200
  5067  0448  00A9               	movwf	___ftmul@f1+1
  5068  0449  3042               	movlw	66
  5069  044A  00AA               	movwf	___ftmul@f1+2
  5070  044B  318F  274C  3183   	fcall	___ftmul
  5071  044E  0020               	movlb	0	; select bank0
  5072  044F  0828               	movf	?___ftmul,w
  5073  0450  00B8               	movwf	___fttol@f1
  5074  0451  0829               	movf	?___ftmul+1,w
  5075  0452  00B9               	movwf	___fttol@f1+1
  5076  0453  082A               	movf	?___ftmul+2,w
  5077  0454  00BA               	movwf	___fttol@f1+2
  5078  0455  318E  261C  3183   	fcall	___fttol
  5079  0458  0020               	movlb	0	; select bank0
  5080  0459  0839               	movf	?___fttol+1,w
  5081  045A  00CB               	movwf	PROTOCOL_I2C_Send_float@v+1
  5082  045B  0838               	movf	?___fttol,w
  5083  045C  00CA               	movwf	PROTOCOL_I2C_Send_float@v
  5084                           
  5085                           ;protocol.c: 353: if (v <= -100 || v >= 0) {
  5086  045D  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5087  045E  3A80               	xorlw	128
  5088  045F  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5089  0460  307F               	movlw	127
  5090  0461  0247               	subwf	??_PROTOCOL_I2C_Send_float,w
  5091  0462  1D03               	skipz
  5092  0463  2C66               	goto	u3505
  5093  0464  309D               	movlw	157
  5094  0465  024A               	subwf	PROTOCOL_I2C_Send_float@v,w
  5095  0466                     u3505:	
  5096  0466  1C03               	skipc
  5097  0467  2C6B               	goto	l3415
  5098  0468  0020               	movlb	0	; select bank0
  5099  0469  1BCB               	btfsc	PROTOCOL_I2C_Send_float@v+1,7
  5100  046A  2C70               	goto	l3417
  5101  046B                     l3415:	
  5102                           
  5103                           ;protocol.c: 354: printf("%d.%02d,", v/100, abs(v%100));
  5104  046B  308C               	movlw	low ((STR_32+1)| (0+32768))
  5105  046C  0020               	movlb	0	; select bank0
  5106  046D  00AE               	movwf	printf@f
  5107  046E  3086               	movlw	high ((STR_32+1)| (0+32768))
  5108  046F  2C74               	goto	L1
  5109  0470                     l3417:	
  5110                           ;protocol.c: 355: } else {
  5111                           
  5112                           
  5113                           ;protocol.c: 356: printf("-%d.%02d,", v/100, abs(v%100));
  5114  0470  308B               	movlw	low (STR_32| (0+32768))
  5115  0471  0020               	movlb	0	; select bank0
  5116  0472  00AE               	movwf	printf@f
  5117  0473  3086               	movlw	high (STR_32| (0+32768))
  5118  0474                     L1:	
  5119  0474  00AF               	movwf	printf@f+1
  5120  0475  3064               	movlw	100
  5121  0476  00A0               	movwf	___awdiv@divisor
  5122  0477  3000               	movlw	0
  5123  0478  00A1               	movwf	___awdiv@divisor+1
  5124  0479  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5125  047A  00A3               	movwf	___awdiv@dividend+1
  5126  047B  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5127  047C  00A2               	movwf	___awdiv@dividend
  5128  047D  318C  24F4  3183   	fcall	___awdiv
  5129  0480  0020               	movlb	0	; select bank0
  5130  0481  0821               	movf	?___awdiv+1,w
  5131  0482  00B1               	movwf	?_printf+3
  5132  0483  0820               	movf	?___awdiv,w
  5133  0484  00B0               	movwf	?_printf+2
  5134  0485  3064               	movlw	100
  5135  0486  00A0               	movwf	___awmod@divisor
  5136  0487  3000               	movlw	0
  5137  0488  00A1               	movwf	___awmod@divisor+1
  5138  0489  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5139  048A  00A3               	movwf	___awmod@dividend+1
  5140  048B  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5141  048C  00A2               	movwf	___awmod@dividend
  5142  048D  318C  2419  3183   	fcall	___awmod
  5143  0490  0020               	movlb	0	; select bank0
  5144  0491  0821               	movf	?___awmod+1,w
  5145  0492  00A8               	movwf	abs@a+1
  5146  0493  0820               	movf	?___awmod,w
  5147  0494  00A7               	movwf	abs@a
  5148  0495  3189  2155  3183   	fcall	_abs
  5149  0498  0020               	movlb	0	; select bank0
  5150  0499  0828               	movf	?_abs+1,w
  5151  049A  00B3               	movwf	?_printf+5
  5152  049B  0827               	movf	?_abs,w
  5153  049C  00B2               	movwf	?_printf+4
  5154  049D  3180  2069  3183   	fcall	_printf
  5155  04A0  3001               	movlw	1
  5156  04A1  0020               	movlb	0	; select bank0
  5157  04A2  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5158  04A3  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5159  04A4  07DD               	addwf	_i,f
  5160  04A5  2C2D               	goto	l3421
  5161  04A6                     l3423:	
  5162                           
  5163                           ;protocol.c: 357: }
  5164                           ;protocol.c: 358: }
  5165                           ;protocol.c: 359: v = (int16_t)(pbuffer[i] * 100);
  5166  04A6  3003               	movlw	3
  5167  04A7  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5168  04A8  0847               	movf	??_PROTOCOL_I2C_Send_float,w
  5169  04A9  00A0               	movwf	___bmul@multiplicand
  5170  04AA  085D               	movf	_i,w
  5171  04AB  3189  2174  3183   	fcall	___bmul
  5172  04AE  0020               	movlb	0	; select bank0
  5173  04AF  0746               	addwf	PROTOCOL_I2C_Send_float@pbuffer,w
  5174  04B0  00C8               	movwf	??_PROTOCOL_I2C_Send_float+1
  5175  04B1  0848               	movf	??_PROTOCOL_I2C_Send_float+1,w
  5176  04B2  0086               	movwf	6
  5177  04B3  0187               	clrf	7
  5178  04B4  3F40               	moviw [0]fsr1
  5179  04B5  00AB               	movwf	___ftmul@f2
  5180  04B6  3F41               	moviw [1]fsr1
  5181  04B7  00AC               	movwf	___ftmul@f2+1
  5182  04B8  3F42               	moviw [2]fsr1
  5183  04B9  00AD               	movwf	___ftmul@f2+2
  5184  04BA  3000               	movlw	0
  5185  04BB  00A8               	movwf	___ftmul@f1
  5186  04BC  30C8               	movlw	200
  5187  04BD  00A9               	movwf	___ftmul@f1+1
  5188  04BE  3042               	movlw	66
  5189  04BF  00AA               	movwf	___ftmul@f1+2
  5190  04C0  318F  274C  3183   	fcall	___ftmul
  5191  04C3  0020               	movlb	0	; select bank0
  5192  04C4  0828               	movf	?___ftmul,w
  5193  04C5  00B8               	movwf	___fttol@f1
  5194  04C6  0829               	movf	?___ftmul+1,w
  5195  04C7  00B9               	movwf	___fttol@f1+1
  5196  04C8  082A               	movf	?___ftmul+2,w
  5197  04C9  00BA               	movwf	___fttol@f1+2
  5198  04CA  318E  261C  3183   	fcall	___fttol
  5199  04CD  0020               	movlb	0	; select bank0
  5200  04CE  0839               	movf	?___fttol+1,w
  5201  04CF  00CB               	movwf	PROTOCOL_I2C_Send_float@v+1
  5202  04D0  0838               	movf	?___fttol,w
  5203  04D1  00CA               	movwf	PROTOCOL_I2C_Send_float@v
  5204                           
  5205                           ;protocol.c: 360: if (v <= -100 || v >= 0) {
  5206  04D2  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5207  04D3  3A80               	xorlw	128
  5208  04D4  00C7               	movwf	??_PROTOCOL_I2C_Send_float
  5209  04D5  307F               	movlw	127
  5210  04D6  0247               	subwf	??_PROTOCOL_I2C_Send_float,w
  5211  04D7  1D03               	skipz
  5212  04D8  2CDB               	goto	u3535
  5213  04D9  309D               	movlw	157
  5214  04DA  024A               	subwf	PROTOCOL_I2C_Send_float@v,w
  5215  04DB                     u3535:	
  5216  04DB  1C03               	skipc
  5217  04DC  2CE0               	goto	l3429
  5218  04DD  0020               	movlb	0	; select bank0
  5219  04DE  1BCB               	btfsc	PROTOCOL_I2C_Send_float@v+1,7
  5220  04DF  2D10               	goto	l3431
  5221  04E0                     l3429:	
  5222                           
  5223                           ;protocol.c: 361: printf("%d.%02d\n", v/100, abs(v%100));
  5224  04E0  306E               	movlw	low ((STR_34+1)| (0+32768))
  5225  04E1  0020               	movlb	0	; select bank0
  5226  04E2  00AE               	movwf	printf@f
  5227  04E3  3086               	movlw	high ((STR_34+1)| (0+32768))
  5228  04E4  00AF               	movwf	printf@f+1
  5229  04E5  3064               	movlw	100
  5230  04E6  00A0               	movwf	___awdiv@divisor
  5231  04E7  3000               	movlw	0
  5232  04E8  00A1               	movwf	___awdiv@divisor+1
  5233  04E9  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5234  04EA  00A3               	movwf	___awdiv@dividend+1
  5235  04EB  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5236  04EC  00A2               	movwf	___awdiv@dividend
  5237  04ED  318C  24F4  3183   	fcall	___awdiv
  5238  04F0  0020               	movlb	0	; select bank0
  5239  04F1  0821               	movf	?___awdiv+1,w
  5240  04F2  00B1               	movwf	?_printf+3
  5241  04F3  0820               	movf	?___awdiv,w
  5242  04F4  00B0               	movwf	?_printf+2
  5243  04F5  3064               	movlw	100
  5244  04F6  00A0               	movwf	___awmod@divisor
  5245  04F7  3000               	movlw	0
  5246  04F8  00A1               	movwf	___awmod@divisor+1
  5247  04F9  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5248  04FA  00A3               	movwf	___awmod@dividend+1
  5249  04FB  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5250  04FC  00A2               	movwf	___awmod@dividend
  5251  04FD  318C  2419  3183   	fcall	___awmod
  5252  0500  0020               	movlb	0	; select bank0
  5253  0501  0821               	movf	?___awmod+1,w
  5254  0502  00A8               	movwf	abs@a+1
  5255  0503  0820               	movf	?___awmod,w
  5256  0504  00A7               	movwf	abs@a
  5257  0505  3189  2155  3183   	fcall	_abs
  5258  0508  0020               	movlb	0	; select bank0
  5259  0509  0828               	movf	?_abs+1,w
  5260  050A  00B3               	movwf	?_printf+5
  5261  050B  0827               	movf	?_abs,w
  5262  050C  00B2               	movwf	?_printf+4
  5263  050D  3180  2069         	fcall	_printf
  5264                           
  5265                           ;protocol.c: 362: } else {
  5266  050F  0008               	return
  5267  0510                     l3431:	
  5268                           
  5269                           ;protocol.c: 363: printf("-%d.%02d\n", v/100, abs(v%100));
  5270  0510  306D               	movlw	low (STR_34| (0+32768))
  5271  0511  0020               	movlb	0	; select bank0
  5272  0512  00AE               	movwf	printf@f
  5273  0513  3086               	movlw	high (STR_34| (0+32768))
  5274  0514  00AF               	movwf	printf@f+1
  5275  0515  3064               	movlw	100
  5276  0516  00A0               	movwf	___awdiv@divisor
  5277  0517  3000               	movlw	0
  5278  0518  00A1               	movwf	___awdiv@divisor+1
  5279  0519  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5280  051A  00A3               	movwf	___awdiv@dividend+1
  5281  051B  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5282  051C  00A2               	movwf	___awdiv@dividend
  5283  051D  318C  24F4  3183   	fcall	___awdiv
  5284  0520  0020               	movlb	0	; select bank0
  5285  0521  0821               	movf	?___awdiv+1,w
  5286  0522  00B1               	movwf	?_printf+3
  5287  0523  0820               	movf	?___awdiv,w
  5288  0524  00B0               	movwf	?_printf+2
  5289  0525  3064               	movlw	100
  5290  0526  00A0               	movwf	___awmod@divisor
  5291  0527  3000               	movlw	0
  5292  0528  00A1               	movwf	___awmod@divisor+1
  5293  0529  084B               	movf	PROTOCOL_I2C_Send_float@v+1,w
  5294  052A  00A3               	movwf	___awmod@dividend+1
  5295  052B  084A               	movf	PROTOCOL_I2C_Send_float@v,w
  5296  052C  00A2               	movwf	___awmod@dividend
  5297  052D  318C  2419  3183   	fcall	___awmod
  5298  0530  0020               	movlb	0	; select bank0
  5299  0531  0821               	movf	?___awmod+1,w
  5300  0532  00A8               	movwf	abs@a+1
  5301  0533  0820               	movf	?___awmod,w
  5302  0534  00A7               	movwf	abs@a
  5303  0535  3189  2155  3183   	fcall	_abs
  5304  0538  0020               	movlb	0	; select bank0
  5305  0539  0828               	movf	?_abs+1,w
  5306  053A  00B3               	movwf	?_printf+5
  5307  053B  0827               	movf	?_abs,w
  5308  053C  00B2               	movwf	?_printf+4
  5309  053D  3180  2069         	fcall	_printf
  5310  053F  0008               	return
  5311  0540                     __end_of_PROTOCOL_I2C_Send_float:	
  5312                           
  5313                           	psect	text15
  5314  0069                     __ptext15:	
  5315 ;; *************** function _printf *****************
  5316 ;; Defined at:
  5317 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  5320 ;;		 -> STR_48(10), STR_47(9), STR_46(10), STR_45(9), 
  5321 ;;		 -> STR_44(4), STR_43(4), STR_42(4), STR_41(4), 
  5322 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_37(4), 
  5323 ;;		 -> STR_36(14), STR_35(9), STR_34(10), STR_33(9), 
  5324 ;;		 -> STR_32(10), STR_31(9), STR_30(7), STR_29(4), 
  5325 ;;		 -> STR_28(4), STR_27(9), STR_26(4), STR_25(4), 
  5326 ;;		 -> STR_24(10), STR_23(4), STR_22(4), STR_21(8), 
  5327 ;;		 -> STR_20(4), STR_19(4), STR_18(9), STR_17(6), 
  5328 ;;		 -> STR_16(10), STR_13(10), STR_9(10), STR_5(10), 
  5329 ;;		 -> STR_3(5), 
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;  tmpval          4    0        struct .
  5332 ;;  width           2   33[BANK0 ] int 
  5333 ;;  len             2   30[BANK0 ] unsigned int 
  5334 ;;  val             2   28[BANK0 ] unsigned int 
  5335 ;;  cp              2   25[BANK0 ] PTR const unsigned char 
  5336 ;;		 -> STR_10(4), buf(48), STR_2(7), ROM(8192), 
  5337 ;;		 -> printf@c(1), STR_1(11), 
  5338 ;;  c               1   35[BANK0 ] char 
  5339 ;;  flag            1   32[BANK0 ] unsigned char 
  5340 ;;  ap              1   27[BANK0 ] PTR void [1]
  5341 ;;		 -> ?_printf(2), 
  5342 ;;  prec            1   24[BANK0 ] char 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  2   14[BANK0 ] int 
  5345 ;; Registers used:
  5346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5352 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5353 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5354 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5355 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5356 ;;Total ram usage:       22 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    7
  5359 ;; This function calls:
  5360 ;;		___lwdiv
  5361 ;;		___lwmod
  5362 ;;		___wmul
  5363 ;;		_isdigit
  5364 ;;		_putch
  5365 ;; This function is called by:
  5366 ;;		_PROTOCOL_Loop
  5367 ;;		_PROTOCOL_I2C_Send_float
  5368 ;; This function uses a non-reentrant model
  5369 ;;
  5370                           
  5371                           
  5372                           ;psect for function _printf
  5373  0069                     _printf:	
  5374                           
  5375                           ;doprnt.c: 466: va_list ap;
  5376                           ;doprnt.c: 499: signed char c;
  5377                           ;doprnt.c: 501: int width;
  5378                           ;doprnt.c: 506: signed char prec;
  5379                           ;doprnt.c: 508: unsigned char flag;
  5380                           ;doprnt.c: 523: union {
  5381                           ;doprnt.c: 524: unsigned long vd;
  5382                           ;doprnt.c: 525: double integ;
  5383                           ;doprnt.c: 526: } tmpval;
  5384                           ;doprnt.c: 528: unsigned int val;
  5385                           ;doprnt.c: 529: unsigned len;
  5386                           ;doprnt.c: 530: const char * cp;
  5387                           ;doprnt.c: 533: *ap = __va_start();
  5388                           
  5389                           ;incstack = 0
  5390                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5391  0069  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5392  006A  0020               	movlb	0	; select bank0
  5393  006B  00B4               	movwf	??_printf
  5394  006C  0834               	movf	??_printf,w
  5395  006D  00BB               	movwf	printf@ap
  5396  006E                     l2963:	
  5397                           ;doprnt.c: 536: while(c = *f++) {
  5398                           
  5399  006E  0020               	movlb	0	; select bank0
  5400  006F  082F               	movf	printf@f+1,w
  5401  0070  00B5               	movwf	??_printf+1
  5402  0071  082E               	movf	printf@f,w
  5403  0072  00B4               	movwf	??_printf
  5404  0073  0AAE               	incf	printf@f,f
  5405  0074  1903               	skipnz
  5406  0075  0AAF               	incf	printf@f+1,f
  5407  0076  0834               	movf	??_printf,w
  5408  0077  0084               	movwf	4
  5409  0078  0835               	movf	??_printf+1,w
  5410  0079  0085               	movwf	5
  5411  007A  0800               	movf	0,w	;code access
  5412  007B  00B6               	movwf	??_printf+2
  5413  007C  0836               	movf	??_printf+2,w
  5414  007D  00C3               	movwf	printf@c
  5415  007E  0843               	movf	printf@c,w
  5416  007F  1903               	btfsc	3,2
  5417  0080  0008               	return
  5418                           
  5419                           ;doprnt.c: 538: if(c != '%')
  5420  0081  3025               	movlw	37
  5421  0082  0643               	xorwf	printf@c,w
  5422  0083  1903               	btfsc	3,2
  5423  0084  288A               	goto	l2839
  5424                           
  5425                           ;doprnt.c: 540: {
  5426                           ;doprnt.c: 541: (putch(c) );
  5427  0085  0843               	movf	printf@c,w
  5428  0086  3188  20C7  3180   	fcall	_putch
  5429                           
  5430                           ;doprnt.c: 542: continue;
  5431  0089  286E               	goto	l2963
  5432  008A                     l2839:	
  5433                           
  5434                           ;doprnt.c: 543: }
  5435                           ;doprnt.c: 546: width = 0;
  5436  008A  0020               	movlb	0	; select bank0
  5437  008B  01C1               	clrf	printf@width
  5438  008C  01C2               	clrf	printf@width+1
  5439                           
  5440                           ;doprnt.c: 548: flag = 0;
  5441  008D  01C0               	clrf	printf@flag
  5442                           
  5443                           ;doprnt.c: 551: switch(*f) {
  5444                           
  5445                           ;doprnt.c: 550: for(;;) {
  5446  008E  2894               	goto	l2845
  5447  008F                     l452:	
  5448                           ;doprnt.c: 579: case '0':
  5449                           
  5450                           
  5451                           ;doprnt.c: 580: flag |= 0x04;
  5452  008F  1540               	bsf	printf@flag,2
  5453                           
  5454                           ;doprnt.c: 581: f++;
  5455  0090  3001               	movlw	1
  5456  0091  07AE               	addwf	printf@f,f
  5457  0092  3000               	movlw	0
  5458  0093  3DAF               	addwfc	printf@f+1,f
  5459  0094                     l2845:	
  5460                           ;doprnt.c: 584: }
  5461                           
  5462                           ;doprnt.c: 582: continue;
  5463                           
  5464  0094  082E               	movf	printf@f,w
  5465  0095  0084               	movwf	4
  5466  0096  082F               	movf	printf@f+1,w
  5467  0097  0085               	movwf	5
  5468  0098  0800               	movf	0,w	;code access
  5469                           
  5470                           ; Switch size 1, requested type "space"
  5471                           ; Number of cases is 1, Range of values is 48 to 48
  5472                           ; switch strategies available:
  5473                           ; Name         Instructions Cycles
  5474                           ; simple_byte            4     3 (average)
  5475                           ; direct_byte           11     9 (fixed)
  5476                           ; jumptable            263     9 (fixed)
  5477                           ;	Chosen strategy is simple_byte
  5478  0099  3A30               	xorlw	48	; case 48
  5479  009A  1903               	skipnz
  5480  009B  288F               	goto	l452
  5481  009C  289D               	goto	l2847
  5482  009D                     l2847:	
  5483                           ;doprnt.c: 586: }
  5484                           
  5485                           ;doprnt.c: 585: break;
  5486                           
  5487                           
  5488                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5489  009D  082E               	movf	printf@f,w
  5490  009E  0084               	movwf	4
  5491  009F  082F               	movf	printf@f+1,w
  5492  00A0  0085               	movwf	5
  5493  00A1  0800               	movf	0,w	;code access
  5494  00A2  3189  2146  3180   	fcall	_isdigit
  5495  00A5  1C03               	btfss	3,0
  5496  00A6  293E               	goto	l2895
  5497                           
  5498                           ;doprnt.c: 598: width = 0;
  5499  00A7  0020               	movlb	0	; select bank0
  5500  00A8  01C1               	clrf	printf@width
  5501  00A9  01C2               	clrf	printf@width+1
  5502  00AA                     l2851:	
  5503                           ;doprnt.c: 599: do {
  5504                           
  5505                           
  5506                           ;doprnt.c: 600: width *= 10;
  5507  00AA  300A               	movlw	10
  5508  00AB  0020               	movlb	0	; select bank0
  5509  00AC  00A0               	movwf	___wmul@multiplier
  5510  00AD  3000               	movlw	0
  5511  00AE  00A1               	movwf	___wmul@multiplier+1
  5512  00AF  0842               	movf	printf@width+1,w
  5513  00B0  00A3               	movwf	___wmul@multiplicand+1
  5514  00B1  0841               	movf	printf@width,w
  5515  00B2  00A2               	movwf	___wmul@multiplicand
  5516  00B3  3189  21EC  3180   	fcall	___wmul
  5517  00B6  0020               	movlb	0	; select bank0
  5518  00B7  0821               	movf	?___wmul+1,w
  5519  00B8  00C2               	movwf	printf@width+1
  5520  00B9  0820               	movf	?___wmul,w
  5521  00BA  00C1               	movwf	printf@width
  5522                           
  5523                           ;doprnt.c: 601: width += *f++ - '0';
  5524  00BB  082E               	movf	printf@f,w
  5525  00BC  0084               	movwf	4
  5526  00BD  082F               	movf	printf@f+1,w
  5527  00BE  0085               	movwf	5
  5528  00BF  0800               	movf	0,w	;code access
  5529  00C0  3ED0               	addlw	208
  5530  00C1  00B4               	movwf	??_printf
  5531  00C2  30FF               	movlw	255
  5532  00C3  1803               	skipnc
  5533  00C4  3000               	movlw	0
  5534  00C5  00B5               	movwf	??_printf+1
  5535  00C6  0834               	movf	??_printf,w
  5536  00C7  07C1               	addwf	printf@width,f
  5537  00C8  0835               	movf	??_printf+1,w
  5538  00C9  3DC2               	addwfc	printf@width+1,f
  5539  00CA  3001               	movlw	1
  5540  00CB  07AE               	addwf	printf@f,f
  5541  00CC  3000               	movlw	0
  5542  00CD  3DAF               	addwfc	printf@f+1,f
  5543                           
  5544                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5545  00CE  082E               	movf	printf@f,w
  5546  00CF  0084               	movwf	4
  5547  00D0  082F               	movf	printf@f+1,w
  5548  00D1  0085               	movwf	5
  5549  00D2  0800               	movf	0,w	;code access
  5550  00D3  3189  2146  3180   	fcall	_isdigit
  5551  00D6  1C03               	btfss	3,0
  5552  00D7  293E               	goto	l2895
  5553  00D8  28AA               	goto	l2851
  5554  00D9                     l2859:	
  5555                           ;doprnt.c: 728: case 's':
  5556                           
  5557                           ;doprnt.c: 698: case 'i':
  5558                           ;doprnt.c: 699: break;
  5559                           
  5560                           ;doprnt.c: 697: case 'd':
  5561                           
  5562                           ;doprnt.c: 638: goto alldone;
  5563                           
  5564                           ;doprnt.c: 637: case 0:
  5565                           
  5566                           ;doprnt.c: 608: }
  5567                           ;doprnt.c: 635: switch(c = *f++) {
  5568                           
  5569                           
  5570                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5571  00D9  0020               	movlb	0	; select bank0
  5572  00DA  083B               	movf	printf@ap,w
  5573  00DB  0086               	movwf	6
  5574  00DC  0187               	clrf	7
  5575  00DD  3F40               	moviw [0]fsr1
  5576  00DE  00B9               	movwf	printf@cp
  5577  00DF  3F41               	moviw [1]fsr1
  5578  00E0  00BA               	movwf	printf@cp+1
  5579  00E1  3002               	movlw	2
  5580  00E2  00B4               	movwf	??_printf
  5581  00E3  0834               	movf	??_printf,w
  5582  00E4  07BB               	addwf	printf@ap,f
  5583                           
  5584                           ;doprnt.c: 740: if(!cp)
  5585  00E5  0839               	movf	printf@cp,w
  5586  00E6  043A               	iorwf	printf@cp+1,w
  5587  00E7  1D03               	btfss	3,2
  5588  00E8  28ED               	goto	l2867
  5589                           
  5590                           ;doprnt.c: 741: cp = "(null)";
  5591  00E9  30B8               	movlw	low (STR_2| (0+32768))
  5592  00EA  00B9               	movwf	printf@cp
  5593  00EB  3086               	movlw	high (STR_2| (0+32768))
  5594  00EC  00BA               	movwf	printf@cp+1
  5595  00ED                     l2867:	
  5596                           
  5597                           ;doprnt.c: 745: len = 0;
  5598  00ED  01BE               	clrf	printf@len
  5599  00EE  01BF               	clrf	printf@len+1
  5600  00EF                     l2871:	
  5601                           ;doprnt.c: 746: while(cp[len])
  5602                           
  5603  00EF  0839               	movf	printf@cp,w
  5604  00F0  073E               	addwf	printf@len,w
  5605  00F1  0084               	movwf	4
  5606  00F2  083A               	movf	printf@cp+1,w
  5607  00F3  3D3F               	addwfc	printf@len+1,w
  5608  00F4  0085               	movwf	5
  5609  00F5  0012               	moviw fsr0++
  5610  00F6  1903               	btfsc	3,2
  5611  00F7  28FD               	goto	l2873
  5612                           
  5613                           ;doprnt.c: 747: len++;
  5614  00F8  3001               	movlw	1
  5615  00F9  07BE               	addwf	printf@len,f
  5616  00FA  3000               	movlw	0
  5617  00FB  3DBF               	addwfc	printf@len+1,f
  5618  00FC  28EF               	goto	l2871
  5619  00FD                     l2873:	
  5620                           ;doprnt.c: 750: dostring:
  5621                           
  5622                           
  5623                           ;doprnt.c: 757: if(width > len)
  5624  00FD  0842               	movf	printf@width+1,w
  5625  00FE  023F               	subwf	printf@len+1,w
  5626  00FF  1D03               	skipz
  5627  0100  2903               	goto	u2465
  5628  0101  0841               	movf	printf@width,w
  5629  0102  023E               	subwf	printf@len,w
  5630  0103                     u2465:	
  5631  0103  1803               	skipnc
  5632  0104  290A               	goto	l2877
  5633                           
  5634                           ;doprnt.c: 758: width -= len;
  5635  0105  083E               	movf	printf@len,w
  5636  0106  02C1               	subwf	printf@width,f
  5637  0107  083F               	movf	printf@len+1,w
  5638  0108  3BC2               	subwfb	printf@width+1,f
  5639  0109  290C               	goto	l2881
  5640  010A                     l2877:	
  5641                           
  5642                           ;doprnt.c: 759: else
  5643                           ;doprnt.c: 760: width = 0;
  5644  010A  01C1               	clrf	printf@width
  5645  010B  01C2               	clrf	printf@width+1
  5646  010C                     l2881:	
  5647                           ;doprnt.c: 764: while(width--)
  5648                           
  5649  010C  30FF               	movlw	255
  5650  010D  0020               	movlb	0	; select bank0
  5651  010E  07C1               	addwf	printf@width,f
  5652  010F  30FF               	movlw	255
  5653  0110  3DC2               	addwfc	printf@width+1,f
  5654  0111  0A41               	incf	printf@width,w
  5655  0112  1903               	btfsc	3,2
  5656  0113  0A42               	incf	printf@width+1,w
  5657  0114  1903               	btfsc	3,2
  5658  0115  2928               	goto	l2887
  5659                           
  5660                           ;doprnt.c: 765: (putch(' ') );
  5661  0116  3020               	movlw	32
  5662  0117  3188  20C7  3180   	fcall	_putch
  5663  011A  290C               	goto	l2881
  5664  011B                     l2883:	
  5665                           ;doprnt.c: 767: while(len--)
  5666                           
  5667                           
  5668                           ;doprnt.c: 768: (putch(*cp++) );
  5669  011B  0839               	movf	printf@cp,w
  5670  011C  0084               	movwf	4
  5671  011D  083A               	movf	printf@cp+1,w
  5672  011E  0085               	movwf	5
  5673  011F  0800               	movf	0,w	;code access
  5674  0120  3188  20C7  3180   	fcall	_putch
  5675  0123  3001               	movlw	1
  5676  0124  0020               	movlb	0	; select bank0
  5677  0125  07B9               	addwf	printf@cp,f
  5678  0126  3000               	movlw	0
  5679  0127  3DBA               	addwfc	printf@cp+1,f
  5680  0128                     l2887:	
  5681  0128  3001               	movlw	1
  5682  0129  02BE               	subwf	printf@len,f
  5683  012A  3000               	movlw	0
  5684  012B  3BBF               	subwfb	printf@len+1,f
  5685  012C  0A3E               	incf	printf@len,w
  5686  012D  1D03               	skipz
  5687  012E  291B               	goto	l2883
  5688  012F  0A3F               	incf	printf@len+1,w
  5689  0130  1903               	btfsc	3,2
  5690  0131  286E               	goto	l2963
  5691  0132  291B               	goto	l2883
  5692  0133                     l2889:	
  5693                           ;doprnt.c: 802: default:
  5694                           
  5695                           ;doprnt.c: 774: continue;
  5696                           
  5697                           
  5698                           ;doprnt.c: 805: cp = (char *)&c;
  5699  0133  3043               	movlw	low printf@c
  5700  0134  00B9               	movwf	printf@cp
  5701  0135  3000               	movlw	high printf@c
  5702  0136  00BA               	movwf	printf@cp+1
  5703                           
  5704                           ;doprnt.c: 806: len = 1;
  5705  0137  3001               	movlw	1
  5706  0138  00BE               	movwf	printf@len
  5707  0139  3000               	movlw	0
  5708  013A  00BF               	movwf	printf@len+1
  5709                           
  5710                           ;doprnt.c: 807: goto dostring;
  5711  013B  28FD               	goto	l2873
  5712  013C                     l480:	
  5713                           ;doprnt.c: 817: case 'u':
  5714                           
  5715                           
  5716                           ;doprnt.c: 818: flag |= 0x40;
  5717  013C  1740               	bsf	printf@flag,6
  5718                           
  5719                           ;doprnt.c: 822: }
  5720                           
  5721                           ;doprnt.c: 819: break;
  5722  013D  295C               	goto	l464
  5723  013E                     l2895:	
  5724  013E  0020               	movlb	0	; select bank0
  5725  013F  082F               	movf	printf@f+1,w
  5726  0140  00B5               	movwf	??_printf+1
  5727  0141  082E               	movf	printf@f,w
  5728  0142  00B4               	movwf	??_printf
  5729  0143  0AAE               	incf	printf@f,f
  5730  0144  1903               	skipnz
  5731  0145  0AAF               	incf	printf@f+1,f
  5732  0146  0834               	movf	??_printf,w
  5733  0147  0084               	movwf	4
  5734  0148  0835               	movf	??_printf+1,w
  5735  0149  0085               	movwf	5
  5736  014A  0800               	movf	0,w	;code access
  5737  014B  00C3               	movwf	printf@c
  5738                           
  5739                           ; Switch size 1, requested type "space"
  5740                           ; Number of cases is 5, Range of values is 0 to 117
  5741                           ; switch strategies available:
  5742                           ; Name         Instructions Cycles
  5743                           ; simple_byte           16     9 (average)
  5744                           ; direct_byte          242     6 (fixed)
  5745                           ; jumptable            260     6 (fixed)
  5746                           ;	Chosen strategy is simple_byte
  5747  014C  3A00               	xorlw	0	; case 0
  5748  014D  1903               	skipnz
  5749  014E  2A3D               	goto	l504
  5750  014F  3A64               	xorlw	100	; case 100
  5751  0150  1903               	skipnz
  5752  0151  295C               	goto	l464
  5753  0152  3A0D               	xorlw	13	; case 105
  5754  0153  1903               	skipnz
  5755  0154  295C               	goto	l464
  5756  0155  3A1A               	xorlw	26	; case 115
  5757  0156  1903               	skipnz
  5758  0157  28D9               	goto	l2859
  5759  0158  3A06               	xorlw	6	; case 117
  5760  0159  1903               	skipnz
  5761  015A  293C               	goto	l480
  5762  015B  2933               	goto	l2889
  5763  015C                     l464:	
  5764                           
  5765                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  5766  015C  0020               	movlb	0	; select bank0
  5767  015D  1B40               	btfsc	printf@flag,6
  5768  015E  2976               	goto	l2907
  5769                           
  5770                           ;doprnt.c: 1253: {
  5771                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5772  015F  083B               	movf	printf@ap,w
  5773  0160  0086               	movwf	6
  5774  0161  0187               	clrf	7
  5775  0162  3F40               	moviw [0]fsr1
  5776  0163  00BC               	movwf	printf@val
  5777  0164  3F41               	moviw [1]fsr1
  5778  0165  00BD               	movwf	printf@val+1
  5779  0166  3002               	movlw	2
  5780  0167  00B4               	movwf	??_printf
  5781  0168  0834               	movf	??_printf,w
  5782  0169  07BB               	addwf	printf@ap,f
  5783                           
  5784                           ;doprnt.c: 1261: if((int)val < 0) {
  5785  016A  1FBD               	btfss	printf@val+1,7
  5786  016B  2981               	goto	l2911
  5787                           
  5788                           ;doprnt.c: 1262: flag |= 0x03;
  5789  016C  3003               	movlw	3
  5790  016D  00B4               	movwf	??_printf
  5791  016E  0834               	movf	??_printf,w
  5792  016F  04C0               	iorwf	printf@flag,f
  5793                           
  5794                           ;doprnt.c: 1263: val = -val;
  5795  0170  09BC               	comf	printf@val,f
  5796  0171  09BD               	comf	printf@val+1,f
  5797  0172  0ABC               	incf	printf@val,f
  5798  0173  1903               	skipnz
  5799  0174  0ABD               	incf	printf@val+1,f
  5800                           
  5801                           ;doprnt.c: 1264: }
  5802                           ;doprnt.c: 1266: }
  5803  0175  2981               	goto	l2911
  5804  0176                     l2907:	
  5805                           
  5806                           ;doprnt.c: 1268: else
  5807                           ;doprnt.c: 1273: {
  5808                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5809  0176  083B               	movf	printf@ap,w
  5810  0177  0086               	movwf	6
  5811  0178  0187               	clrf	7
  5812  0179  3F40               	moviw [0]fsr1
  5813  017A  00BC               	movwf	printf@val
  5814  017B  3F41               	moviw [1]fsr1
  5815  017C  00BD               	movwf	printf@val+1
  5816  017D  3002               	movlw	2
  5817  017E  00B4               	movwf	??_printf
  5818  017F  0834               	movf	??_printf,w
  5819  0180  07BB               	addwf	printf@ap,f
  5820  0181                     l2911:	
  5821                           
  5822                           ;doprnt.c: 1287: }
  5823                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5824  0181  01C3               	clrf	printf@c
  5825  0182  0AC3               	incf	printf@c,f
  5826  0183  3005               	movlw	5
  5827  0184  0643               	xorwf	printf@c,w
  5828  0185  1903               	btfsc	3,2
  5829  0186  29A6               	goto	l2923
  5830  0187                     l2917:	
  5831                           
  5832                           ;doprnt.c: 1306: if(val < dpowers[c])
  5833  0187  0843               	movf	printf@c,w
  5834  0188  00B4               	movwf	??_printf
  5835  0189  01B5               	clrf	??_printf+1
  5836  018A  35B4               	lslf	??_printf,f
  5837  018B  0DB5               	rlf	??_printf+1,f
  5838  018C  3036               	movlw	low (_dpowers| (0+32768))
  5839  018D  0734               	addwf	??_printf,w
  5840  018E  0084               	movwf	4
  5841  018F  3086               	movlw	high (_dpowers| (0+32768))
  5842  0190  3D35               	addwfc	??_printf+1,w
  5843  0191  0085               	movwf	5
  5844  0192  3F00               	moviw [0]fsr0
  5845  0193  00B6               	movwf	??_printf+2
  5846  0194  3F01               	moviw [1]fsr0
  5847  0195  00B7               	movwf	??_printf+3
  5848  0196  0837               	movf	??_printf+3,w
  5849  0197  023D               	subwf	printf@val+1,w
  5850  0198  1D03               	skipz
  5851  0199  299C               	goto	u2525
  5852  019A  0836               	movf	??_printf+2,w
  5853  019B  023C               	subwf	printf@val,w
  5854  019C                     u2525:	
  5855  019C  1C03               	btfss	3,0
  5856  019D  29A6               	goto	l2923
  5857                           
  5858                           ;doprnt.c: 1307: break;
  5859  019E  3001               	movlw	1
  5860  019F  00B4               	movwf	??_printf
  5861  01A0  0834               	movf	??_printf,w
  5862  01A1  07C3               	addwf	printf@c,f
  5863  01A2  3005               	movlw	5
  5864  01A3  0643               	xorwf	printf@c,w
  5865  01A4  1D03               	btfss	3,2
  5866  01A5  2987               	goto	l2917
  5867  01A6                     l2923:	
  5868                           
  5869                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5870  01A6  0841               	movf	printf@width,w
  5871  01A7  0442               	iorwf	printf@width+1,w
  5872  01A8  1903               	btfsc	3,2
  5873  01A9  29B2               	goto	l487
  5874  01AA  0840               	movf	printf@flag,w
  5875  01AB  3903               	andlw	3
  5876  01AC  1903               	btfsc	3,2
  5877  01AD  29B2               	goto	l487
  5878                           
  5879                           ;doprnt.c: 1346: width--;
  5880  01AE  30FF               	movlw	255
  5881  01AF  07C1               	addwf	printf@width,f
  5882  01B0  30FF               	movlw	255
  5883  01B1  3DC2               	addwfc	printf@width+1,f
  5884  01B2                     l487:	
  5885                           
  5886                           ;doprnt.c: 1381: if(width > c)
  5887  01B2  0843               	movf	printf@c,w
  5888  01B3  00B4               	movwf	??_printf
  5889  01B4  01B5               	clrf	??_printf+1
  5890  01B5  1BB4               	btfsc	??_printf,7
  5891  01B6  03B5               	decf	??_printf+1,f
  5892  01B7  0835               	movf	??_printf+1,w
  5893  01B8  3A80               	xorlw	128
  5894  01B9  00B6               	movwf	??_printf+2
  5895  01BA  0842               	movf	printf@width+1,w
  5896  01BB  3A80               	xorlw	128
  5897  01BC  0236               	subwf	??_printf+2,w
  5898  01BD  1D03               	skipz
  5899  01BE  29C1               	goto	u2565
  5900  01BF  0841               	movf	printf@width,w
  5901  01C0  0234               	subwf	??_printf,w
  5902  01C1                     u2565:	
  5903  01C1  1803               	skipnc
  5904  01C2  29CE               	goto	l2931
  5905                           
  5906                           ;doprnt.c: 1382: width -= c;
  5907  01C3  0020               	movlb	0	; select bank0
  5908  01C4  0843               	movf	printf@c,w
  5909  01C5  00B4               	movwf	??_printf
  5910  01C6  01B5               	clrf	??_printf+1
  5911  01C7  1BB4               	btfsc	??_printf,7
  5912  01C8  03B5               	decf	??_printf+1,f
  5913  01C9  0834               	movf	??_printf,w
  5914  01CA  02C1               	subwf	printf@width,f
  5915  01CB  0835               	movf	??_printf+1,w
  5916  01CC  3BC2               	subwfb	printf@width+1,f
  5917  01CD  29D1               	goto	l2933
  5918  01CE                     l2931:	
  5919                           
  5920                           ;doprnt.c: 1383: else
  5921                           ;doprnt.c: 1384: width = 0;
  5922  01CE  0020               	movlb	0	; select bank0
  5923  01CF  01C1               	clrf	printf@width
  5924  01D0  01C2               	clrf	printf@width+1
  5925  01D1                     l2933:	
  5926                           
  5927                           ;doprnt.c: 1387: if(flag & 0x04) {
  5928  01D1  1D40               	btfss	printf@flag,2
  5929  01D2  29EA               	goto	l2945
  5930                           
  5931                           ;doprnt.c: 1392: if(flag & 0x03)
  5932  01D3  0840               	movf	printf@flag,w
  5933  01D4  3903               	andlw	3
  5934  01D5  1903               	btfsc	3,2
  5935  01D6  29DB               	goto	l2939
  5936                           
  5937                           ;doprnt.c: 1393: (putch('-') );
  5938  01D7  302D               	movlw	45
  5939  01D8  3188  20C7  3180   	fcall	_putch
  5940  01DB                     l2939:	
  5941                           
  5942                           ;doprnt.c: 1415: if(width)
  5943  01DB  0020               	movlb	0	; select bank0
  5944  01DC                     L3:	
  5945  01DC  0841               	movf	printf@width,w
  5946  01DD  0442               	iorwf	printf@width+1,w
  5947  01DE  1903               	btfsc	3,2
  5948  01DF  2A03               	goto	l2955
  5949                           
  5950                           ;doprnt.c: 1417: (putch('0') );
  5951                           
  5952                           ;doprnt.c: 1416: do
  5953  01E0  3030               	movlw	48
  5954  01E1  3188  20C7  3180   	fcall	_putch
  5955                           
  5956                           ;doprnt.c: 1418: while(--width);
  5957  01E4  30FF               	movlw	255
  5958  01E5  0020               	movlb	0	; select bank0
  5959  01E6  07C1               	addwf	printf@width,f
  5960  01E7  30FF               	movlw	255
  5961  01E8  3DC2               	addwfc	printf@width+1,f
  5962  01E9  29DC               	goto	L3
  5963  01EA                     l2945:	
  5964                           ;doprnt.c: 1420: } else
  5965                           
  5966                           
  5967                           ;doprnt.c: 1422: {
  5968                           ;doprnt.c: 1424: if(width
  5969                           ;doprnt.c: 1428: )
  5970  01EA  0841               	movf	printf@width,w
  5971  01EB  0442               	iorwf	printf@width+1,w
  5972  01EC  1903               	btfsc	3,2
  5973  01ED  29FB               	goto	l2951
  5974  01EE                     l2947:	
  5975                           ;doprnt.c: 1429: do
  5976                           
  5977                           
  5978                           ;doprnt.c: 1430: (putch(' ') );
  5979  01EE  3020               	movlw	32
  5980  01EF  3188  20C7  3180   	fcall	_putch
  5981                           
  5982                           ;doprnt.c: 1431: while(--width);
  5983  01F2  30FF               	movlw	255
  5984  01F3  0020               	movlb	0	; select bank0
  5985  01F4  07C1               	addwf	printf@width,f
  5986  01F5  30FF               	movlw	255
  5987  01F6  3DC2               	addwfc	printf@width+1,f
  5988  01F7  0841               	movf	printf@width,w
  5989  01F8  0442               	iorwf	printf@width+1,w
  5990  01F9  1D03               	btfss	3,2
  5991  01FA  29EE               	goto	l2947
  5992  01FB                     l2951:	
  5993                           
  5994                           ;doprnt.c: 1438: if(flag & 0x03)
  5995  01FB  0840               	movf	printf@flag,w
  5996  01FC  3903               	andlw	3
  5997  01FD  1903               	btfsc	3,2
  5998  01FE  2A03               	goto	l2955
  5999                           
  6000                           ;doprnt.c: 1439: (putch('-') );
  6001  01FF  302D               	movlw	45
  6002  0200  3188  20C7  3180   	fcall	_putch
  6003  0203                     l2955:	
  6004                           
  6005                           ;doprnt.c: 1469: }
  6006                           ;doprnt.c: 1472: prec = c;
  6007  0203  0020               	movlb	0	; select bank0
  6008  0204  0843               	movf	printf@c,w
  6009  0205  00B4               	movwf	??_printf
  6010  0206  0834               	movf	??_printf,w
  6011  0207  00B8               	movwf	printf@prec
  6012  0208                     l2961:	
  6013                           ;doprnt.c: 1474: while(prec--) {
  6014                           
  6015  0208  30FF               	movlw	255
  6016  0209  0020               	movlb	0	; select bank0
  6017  020A  00B4               	movwf	??_printf
  6018  020B  0834               	movf	??_printf,w
  6019  020C  07B8               	addwf	printf@prec,f
  6020  020D  0A38               	incf	printf@prec,w
  6021  020E  1903               	btfsc	3,2
  6022  020F  286E               	goto	l2963
  6023                           
  6024                           ;doprnt.c: 1478: {
  6025                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6026  0210  300A               	movlw	10
  6027  0211  00A8               	movwf	___lwmod@divisor
  6028  0212  3000               	movlw	0
  6029  0213  00A9               	movwf	___lwmod@divisor+1
  6030  0214  0838               	movf	printf@prec,w
  6031  0215  00B4               	movwf	??_printf
  6032  0216  01B5               	clrf	??_printf+1
  6033  0217  35B4               	lslf	??_printf,f
  6034  0218  0DB5               	rlf	??_printf+1,f
  6035  0219  3036               	movlw	low (_dpowers| (0+32768))
  6036  021A  0734               	addwf	??_printf,w
  6037  021B  0084               	movwf	4
  6038  021C  3086               	movlw	high (_dpowers| (0+32768))
  6039  021D  3D35               	addwfc	??_printf+1,w
  6040  021E  0085               	movwf	5
  6041  021F  3F00               	moviw [0]fsr0
  6042  0220  00A0               	movwf	___lwdiv@divisor
  6043  0221  3F01               	moviw [1]fsr0
  6044  0222  00A1               	movwf	___lwdiv@divisor+1
  6045  0223  083D               	movf	printf@val+1,w
  6046  0224  00A3               	movwf	___lwdiv@dividend+1
  6047  0225  083C               	movf	printf@val,w
  6048  0226  00A2               	movwf	___lwdiv@dividend
  6049  0227  318B  236D  3180   	fcall	___lwdiv
  6050  022A  0020               	movlb	0	; select bank0
  6051  022B  0821               	movf	?___lwdiv+1,w
  6052  022C  00AB               	movwf	___lwmod@dividend+1
  6053  022D  0820               	movf	?___lwdiv,w
  6054  022E  00AA               	movwf	___lwmod@dividend
  6055  022F  318B  2312  3180   	fcall	___lwmod
  6056  0232  0020               	movlb	0	; select bank0
  6057  0233  0828               	movf	?___lwmod,w
  6058  0234  3E30               	addlw	48
  6059  0235  00B6               	movwf	??_printf+2
  6060  0236  0836               	movf	??_printf+2,w
  6061  0237  00C3               	movwf	printf@c
  6062                           
  6063                           ;doprnt.c: 1523: }
  6064                           ;doprnt.c: 1524: (putch(c) );
  6065  0238  0843               	movf	printf@c,w
  6066  0239  3188  20C7  3180   	fcall	_putch
  6067  023C  2A08               	goto	l2961
  6068  023D                     l504:	
  6069                           ;doprnt.c: 1540: return 0;
  6070                           ;	Return value of _printf is never used
  6071                           
  6072                           ;doprnt.c: 1525: }
  6073                           ;doprnt.c: 1533: }
  6074                           ;doprnt.c: 1535: alldone:
  6075                           
  6076  023D  0008               	return
  6077  023E                     __end_of_printf:	
  6078                           
  6079                           	psect	text16
  6080  08C7                     __ptext16:	
  6081 ;; *************** function _putch *****************
  6082 ;; Defined at:
  6083 ;;		line 160 in file "mcc_generated_files/eusart.c"
  6084 ;; Parameters:    Size  Location     Type
  6085 ;;  txData          1    wreg     unsigned char 
  6086 ;; Auto vars:     Size  Location     Type
  6087 ;;  txData          1    2[BANK0 ] unsigned char 
  6088 ;; Return value:  Size  Location     Type
  6089 ;;                  1    wreg      void 
  6090 ;; Registers used:
  6091 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6092 ;; Tracked objects:
  6093 ;;		On entry : 0/0
  6094 ;;		On exit  : 0/0
  6095 ;;		Unchanged: 0/0
  6096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6098 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6100 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6101 ;;Total ram usage:        1 bytes
  6102 ;; Hardware stack levels used:    1
  6103 ;; Hardware stack levels required when called:    6
  6104 ;; This function calls:
  6105 ;;		_EUSART_Write
  6106 ;; This function is called by:
  6107 ;;		_printf
  6108 ;; This function uses a non-reentrant model
  6109 ;;
  6110                           
  6111                           
  6112                           ;psect for function _putch
  6113  08C7                     _putch:	
  6114                           
  6115                           ;incstack = 0
  6116                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6117                           ;putch@txData stored from wreg
  6118  08C7  0020               	movlb	0	; select bank0
  6119  08C8  00A2               	movwf	putch@txData
  6120                           
  6121                           ;eusart.c: 162: EUSART_Write(txData);
  6122  08C9  0822               	movf	putch@txData,w
  6123  08CA  318A  22C7         	fcall	_EUSART_Write
  6124  08CC  0008               	return
  6125  08CD                     __end_of_putch:	
  6126                           
  6127                           	psect	text17
  6128  0AC7                     __ptext17:	
  6129 ;; *************** function _EUSART_Write *****************
  6130 ;; Defined at:
  6131 ;;		line 132 in file "mcc_generated_files/eusart.c"
  6132 ;; Parameters:    Size  Location     Type
  6133 ;;  txData          1    wreg     unsigned char 
  6134 ;; Auto vars:     Size  Location     Type
  6135 ;;  txData          1    1[BANK0 ] unsigned char 
  6136 ;; Return value:  Size  Location     Type
  6137 ;;                  1    wreg      void 
  6138 ;; Registers used:
  6139 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6140 ;; Tracked objects:
  6141 ;;		On entry : 0/0
  6142 ;;		On exit  : 0/0
  6143 ;;		Unchanged: 0/0
  6144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6147 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6149 ;;Total ram usage:        2 bytes
  6150 ;; Hardware stack levels used:    1
  6151 ;; Hardware stack levels required when called:    5
  6152 ;; This function calls:
  6153 ;;		Nothing
  6154 ;; This function is called by:
  6155 ;;		_putch
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159                           
  6160                           ;psect for function _EUSART_Write
  6161  0AC7                     _EUSART_Write:	
  6162                           
  6163                           ;incstack = 0
  6164                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6165                           ;EUSART_Write@txData stored from wreg
  6166  0AC7  0020               	movlb	0	; select bank0
  6167  0AC8  00A1               	movwf	EUSART_Write@txData
  6168  0AC9                     l2695:	
  6169                           ;eusart.c: 135: {
  6170                           
  6171                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  6172                           
  6173  0AC9  087A               	movf	_eusartTxBufferRemaining,w	;volatile
  6174  0ACA  1903               	btfsc	3,2
  6175  0ACB  2AC9               	goto	l2695
  6176                           
  6177                           ;eusart.c: 136: }
  6178                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  6179  0ACC  0021               	movlb	1	; select bank1
  6180  0ACD  1A11               	btfsc	17,4	;volatile
  6181  0ACE  2AD4               	goto	l229
  6182                           
  6183                           ;eusart.c: 139: {
  6184                           ;eusart.c: 140: TXREG = txData;
  6185  0ACF  0020               	movlb	0	; select bank0
  6186  0AD0  0821               	movf	EUSART_Write@txData,w
  6187  0AD1  0023               	movlb	3	; select bank3
  6188  0AD2  009A               	movwf	26	;volatile
  6189                           
  6190                           ;eusart.c: 141: }
  6191  0AD3  2AE8               	goto	l2709
  6192  0AD4                     l229:	
  6193                           
  6194                           ;eusart.c: 142: else
  6195                           ;eusart.c: 143: {
  6196                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  6197  0AD4  1211               	bcf	17,4	;volatile
  6198                           
  6199                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  6200  0AD5  0020               	movlb	0	; select bank0
  6201  0AD6  0821               	movf	EUSART_Write@txData,w
  6202  0AD7  00A0               	movwf	??_EUSART_Write
  6203  0AD8  087C               	movf	_eusartTxHead,w
  6204  0AD9  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6205  0ADA  0086               	movwf	6
  6206  0ADB  0187               	clrf	7
  6207  0ADC  0820               	movf	??_EUSART_Write,w
  6208  0ADD  0081               	movwf	1
  6209  0ADE  3001               	movlw	1
  6210  0ADF  00A0               	movwf	??_EUSART_Write
  6211  0AE0  0820               	movf	??_EUSART_Write,w
  6212  0AE1  07FC               	addwf	_eusartTxHead,f	;volatile
  6213                           
  6214                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6215  0AE2  3008               	movlw	8
  6216  0AE3  027C               	subwf	_eusartTxHead,w	;volatile
  6217  0AE4  1803               	btfsc	3,0
  6218                           
  6219                           ;eusart.c: 147: {
  6220                           ;eusart.c: 148: eusartTxHead = 0;
  6221  0AE5  01FC               	clrf	_eusartTxHead	;volatile
  6222                           
  6223                           ;eusart.c: 149: }
  6224                           ;eusart.c: 150: eusartTxBufferRemaining--;
  6225  0AE6  3001               	movlw	1
  6226  0AE7  02FA               	subwf	_eusartTxBufferRemaining,f	;volatile
  6227  0AE8                     l2709:	
  6228                           
  6229                           ;eusart.c: 151: }
  6230                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  6231  0AE8  0021               	movlb	1	; select bank1
  6232  0AE9  1611               	bsf	17,4	;volatile
  6233  0AEA  0008               	return
  6234  0AEB                     __end_of_EUSART_Write:	
  6235                           
  6236                           	psect	text18
  6237  0B12                     __ptext18:	
  6238 ;; *************** function ___lwmod *****************
  6239 ;; Defined at:
  6240 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6241 ;; Parameters:    Size  Location     Type
  6242 ;;  divisor         2    8[BANK0 ] unsigned int 
  6243 ;;  dividend        2   10[BANK0 ] unsigned int 
  6244 ;; Auto vars:     Size  Location     Type
  6245 ;;  counter         1   13[BANK0 ] unsigned char 
  6246 ;; Return value:  Size  Location     Type
  6247 ;;                  2    8[BANK0 ] unsigned int 
  6248 ;; Registers used:
  6249 ;;		wreg, status,2, status,0
  6250 ;; Tracked objects:
  6251 ;;		On entry : 0/0
  6252 ;;		On exit  : 0/0
  6253 ;;		Unchanged: 0/0
  6254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6255 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6257 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6258 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6259 ;;Total ram usage:        6 bytes
  6260 ;; Hardware stack levels used:    1
  6261 ;; Hardware stack levels required when called:    5
  6262 ;; This function calls:
  6263 ;;		Nothing
  6264 ;; This function is called by:
  6265 ;;		_printf
  6266 ;; This function uses a non-reentrant model
  6267 ;;
  6268                           
  6269                           
  6270                           ;psect for function ___lwmod
  6271  0B12                     ___lwmod:	
  6272                           
  6273                           ;incstack = 0
  6274                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6275  0B12  0020               	movlb	0	; select bank0
  6276  0B13  0828               	movf	___lwmod@divisor,w
  6277  0B14  0429               	iorwf	___lwmod@divisor+1,w
  6278  0B15  1903               	btfsc	3,2
  6279  0B16  2B3A               	goto	l2815
  6280  0B17  01AD               	clrf	___lwmod@counter
  6281  0B18  0AAD               	incf	___lwmod@counter,f
  6282  0B19                     l2805:	
  6283  0B19  1BA9               	btfsc	___lwmod@divisor+1,7
  6284  0B1A  2B25               	goto	l2807
  6285  0B1B  3001               	movlw	1
  6286  0B1C                     u2365:	
  6287  0B1C  35A8               	lslf	___lwmod@divisor,f
  6288  0B1D  0DA9               	rlf	___lwmod@divisor+1,f
  6289  0B1E  0B89               	decfsz	9,f
  6290  0B1F  2B1C               	goto	u2365
  6291  0B20  3001               	movlw	1
  6292  0B21  00AC               	movwf	??___lwmod
  6293  0B22  082C               	movf	??___lwmod,w
  6294  0B23  07AD               	addwf	___lwmod@counter,f
  6295  0B24  2B19               	goto	l2805
  6296  0B25                     l2807:	
  6297  0B25  0829               	movf	___lwmod@divisor+1,w
  6298  0B26  022B               	subwf	___lwmod@dividend+1,w
  6299  0B27  1D03               	skipz
  6300  0B28  2B2B               	goto	u2385
  6301  0B29  0828               	movf	___lwmod@divisor,w
  6302  0B2A  022A               	subwf	___lwmod@dividend,w
  6303  0B2B                     u2385:	
  6304  0B2B  1C03               	skipc
  6305  0B2C  2B31               	goto	l2811
  6306  0B2D  0828               	movf	___lwmod@divisor,w
  6307  0B2E  02AA               	subwf	___lwmod@dividend,f
  6308  0B2F  0829               	movf	___lwmod@divisor+1,w
  6309  0B30  3BAB               	subwfb	___lwmod@dividend+1,f
  6310  0B31                     l2811:	
  6311  0B31  3001               	movlw	1
  6312  0B32                     u2395:	
  6313  0B32  36A9               	lsrf	___lwmod@divisor+1,f
  6314  0B33  0CA8               	rrf	___lwmod@divisor,f
  6315  0B34  0B89               	decfsz	9,f
  6316  0B35  2B32               	goto	u2395
  6317  0B36  3001               	movlw	1
  6318  0B37  02AD               	subwf	___lwmod@counter,f
  6319  0B38  1D03               	btfss	3,2
  6320  0B39  2B25               	goto	l2807
  6321  0B3A                     l2815:	
  6322  0B3A  082B               	movf	___lwmod@dividend+1,w
  6323  0B3B  00A9               	movwf	?___lwmod+1
  6324  0B3C  082A               	movf	___lwmod@dividend,w
  6325  0B3D  00A8               	movwf	?___lwmod
  6326  0B3E  0008               	return
  6327  0B3F                     __end_of___lwmod:	
  6328                           
  6329                           	psect	text19
  6330  0B6D                     __ptext19:	
  6331 ;; *************** function ___lwdiv *****************
  6332 ;; Defined at:
  6333 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;  divisor         2    0[BANK0 ] unsigned int 
  6336 ;;  dividend        2    2[BANK0 ] unsigned int 
  6337 ;; Auto vars:     Size  Location     Type
  6338 ;;  quotient        2    5[BANK0 ] unsigned int 
  6339 ;;  counter         1    7[BANK0 ] unsigned char 
  6340 ;; Return value:  Size  Location     Type
  6341 ;;                  2    0[BANK0 ] unsigned int 
  6342 ;; Registers used:
  6343 ;;		wreg, status,2, status,0
  6344 ;; Tracked objects:
  6345 ;;		On entry : 0/0
  6346 ;;		On exit  : 0/0
  6347 ;;		Unchanged: 0/0
  6348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6349 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6350 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6352 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6353 ;;Total ram usage:        8 bytes
  6354 ;; Hardware stack levels used:    1
  6355 ;; Hardware stack levels required when called:    5
  6356 ;; This function calls:
  6357 ;;		Nothing
  6358 ;; This function is called by:
  6359 ;;		_printf
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           
  6364                           ;psect for function ___lwdiv
  6365  0B6D                     ___lwdiv:	
  6366                           
  6367                           ;incstack = 0
  6368                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6369  0B6D  0020               	movlb	0	; select bank0
  6370  0B6E  01A5               	clrf	___lwdiv@quotient
  6371  0B6F  01A6               	clrf	___lwdiv@quotient+1
  6372  0B70  0820               	movf	___lwdiv@divisor,w
  6373  0B71  0421               	iorwf	___lwdiv@divisor+1,w
  6374  0B72  1903               	btfsc	3,2
  6375  0B73  2B9D               	goto	l2793
  6376  0B74  01A7               	clrf	___lwdiv@counter
  6377  0B75  0AA7               	incf	___lwdiv@counter,f
  6378  0B76                     l2781:	
  6379  0B76  1BA1               	btfsc	___lwdiv@divisor+1,7
  6380  0B77  2B82               	goto	l2783
  6381  0B78  3001               	movlw	1
  6382  0B79                     u2295:	
  6383  0B79  35A0               	lslf	___lwdiv@divisor,f
  6384  0B7A  0DA1               	rlf	___lwdiv@divisor+1,f
  6385  0B7B  0B89               	decfsz	9,f
  6386  0B7C  2B79               	goto	u2295
  6387  0B7D  3001               	movlw	1
  6388  0B7E  00A4               	movwf	??___lwdiv
  6389  0B7F  0824               	movf	??___lwdiv,w
  6390  0B80  07A7               	addwf	___lwdiv@counter,f
  6391  0B81  2B76               	goto	l2781
  6392  0B82                     l2783:	
  6393  0B82  3001               	movlw	1
  6394  0B83                     u2315:	
  6395  0B83  35A5               	lslf	___lwdiv@quotient,f
  6396  0B84  0DA6               	rlf	___lwdiv@quotient+1,f
  6397  0B85  0B89               	decfsz	9,f
  6398  0B86  2B83               	goto	u2315
  6399  0B87  0821               	movf	___lwdiv@divisor+1,w
  6400  0B88  0223               	subwf	___lwdiv@dividend+1,w
  6401  0B89  1D03               	skipz
  6402  0B8A  2B8D               	goto	u2325
  6403  0B8B  0820               	movf	___lwdiv@divisor,w
  6404  0B8C  0222               	subwf	___lwdiv@dividend,w
  6405  0B8D                     u2325:	
  6406  0B8D  1C03               	skipc
  6407  0B8E  2B94               	goto	l2789
  6408  0B8F  0820               	movf	___lwdiv@divisor,w
  6409  0B90  02A2               	subwf	___lwdiv@dividend,f
  6410  0B91  0821               	movf	___lwdiv@divisor+1,w
  6411  0B92  3BA3               	subwfb	___lwdiv@dividend+1,f
  6412  0B93  1425               	bsf	___lwdiv@quotient,0
  6413  0B94                     l2789:	
  6414  0B94  3001               	movlw	1
  6415  0B95                     u2335:	
  6416  0B95  36A1               	lsrf	___lwdiv@divisor+1,f
  6417  0B96  0CA0               	rrf	___lwdiv@divisor,f
  6418  0B97  0B89               	decfsz	9,f
  6419  0B98  2B95               	goto	u2335
  6420  0B99  3001               	movlw	1
  6421  0B9A  02A7               	subwf	___lwdiv@counter,f
  6422  0B9B  1D03               	btfss	3,2
  6423  0B9C  2B82               	goto	l2783
  6424  0B9D                     l2793:	
  6425  0B9D  0826               	movf	___lwdiv@quotient+1,w
  6426  0B9E  00A1               	movwf	?___lwdiv+1
  6427  0B9F  0825               	movf	___lwdiv@quotient,w
  6428  0BA0  00A0               	movwf	?___lwdiv
  6429  0BA1  0008               	return
  6430  0BA2                     __end_of___lwdiv:	
  6431                           
  6432                           	psect	text20
  6433  0955                     __ptext20:	
  6434 ;; *************** function _abs *****************
  6435 ;; Defined at:
  6436 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abs.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;  a               2    7[BANK0 ] int 
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;		None
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  2    7[BANK0 ] int 
  6443 ;; Registers used:
  6444 ;;		wreg, status,2, status,0
  6445 ;; Tracked objects:
  6446 ;;		On entry : 0/0
  6447 ;;		On exit  : 0/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6450 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;Total ram usage:        4 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:    5
  6457 ;; This function calls:
  6458 ;;		Nothing
  6459 ;; This function is called by:
  6460 ;;		_PROTOCOL_I2C_Send_float
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464                           
  6465                           ;psect for function _abs
  6466  0955                     _abs:	
  6467                           
  6468                           ;incstack = 0
  6469                           ; Regs used in _abs: [wreg+status,2+status,0]
  6470  0955  0020               	movlb	0	; select bank0
  6471  0956  1FA8               	btfss	abs@a+1,7
  6472  0957  0008               	return
  6473  0958  0927               	comf	abs@a,w
  6474  0959  00A9               	movwf	??_abs
  6475  095A  0928               	comf	abs@a+1,w
  6476  095B  00AA               	movwf	??_abs+1
  6477  095C  0AA9               	incf	??_abs,f
  6478  095D  1903               	skipnz
  6479  095E  0AAA               	incf	??_abs+1,f
  6480  095F  0829               	movf	??_abs,w
  6481  0960  00A7               	movwf	?_abs
  6482  0961  082A               	movf	??_abs+1,w
  6483  0962  00A8               	movwf	?_abs+1
  6484  0963  0008               	return
  6485  0964                     __end_of_abs:	
  6486                           
  6487                           	psect	text21
  6488  0E1C                     __ptext21:	
  6489 ;; *************** function ___fttol *****************
  6490 ;; Defined at:
  6491 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  6492 ;; Parameters:    Size  Location     Type
  6493 ;;  f1              3   24[BANK0 ] float 
  6494 ;; Auto vars:     Size  Location     Type
  6495 ;;  lval            4   33[BANK0 ] unsigned long 
  6496 ;;  exp1            1   37[BANK0 ] unsigned char 
  6497 ;;  sign1           1   32[BANK0 ] unsigned char 
  6498 ;; Return value:  Size  Location     Type
  6499 ;;                  4   24[BANK0 ] long 
  6500 ;; Registers used:
  6501 ;;		wreg, status,2, status,0
  6502 ;; Tracked objects:
  6503 ;;		On entry : 0/0
  6504 ;;		On exit  : 0/0
  6505 ;;		Unchanged: 0/0
  6506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6507 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6508 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6509 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6510 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6511 ;;Total ram usage:       14 bytes
  6512 ;; Hardware stack levels used:    1
  6513 ;; Hardware stack levels required when called:    5
  6514 ;; This function calls:
  6515 ;;		Nothing
  6516 ;; This function is called by:
  6517 ;;		_PROTOCOL_I2C_Send_float
  6518 ;; This function uses a non-reentrant model
  6519 ;;
  6520                           
  6521                           
  6522                           ;psect for function ___fttol
  6523  0E1C                     ___fttol:	
  6524                           
  6525                           ;incstack = 0
  6526                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  6527  0E1C  0020               	movlb	0	; select bank0
  6528  0E1D  0838               	movf	___fttol@f1,w
  6529  0E1E  00BC               	movwf	??___fttol
  6530  0E1F  0839               	movf	___fttol@f1+1,w
  6531  0E20  00BD               	movwf	??___fttol+1
  6532  0E21  083A               	movf	___fttol@f1+2,w
  6533  0E22  00BE               	movwf	??___fttol+2
  6534  0E23  1003               	clrc
  6535  0E24  0D3D               	rlf	??___fttol+1,w
  6536  0E25  0D3E               	rlf	??___fttol+2,w
  6537  0E26  00BF               	movwf	??___fttol+3
  6538  0E27  083F               	movf	??___fttol+3,w
  6539  0E28  00C5               	movwf	___fttol@exp1
  6540  0E29  0845               	movf	___fttol@exp1,w
  6541  0E2A  1D03               	btfss	3,2
  6542  0E2B  2E35               	goto	l3245
  6543  0E2C  3000               	movlw	0
  6544  0E2D  00BB               	movwf	?___fttol+3
  6545  0E2E  3000               	movlw	0
  6546  0E2F  00BA               	movwf	?___fttol+2
  6547  0E30  3000               	movlw	0
  6548  0E31  00B9               	movwf	?___fttol+1
  6549  0E32  3000               	movlw	0
  6550  0E33  00B8               	movwf	?___fttol
  6551  0E34  0008               	return
  6552  0E35                     l3245:	
  6553  0E35  0838               	movf	___fttol@f1,w
  6554  0E36  00BC               	movwf	??___fttol
  6555  0E37  0839               	movf	___fttol@f1+1,w
  6556  0E38  00BD               	movwf	??___fttol+1
  6557  0E39  083A               	movf	___fttol@f1+2,w
  6558  0E3A  00BE               	movwf	??___fttol+2
  6559  0E3B  3017               	movlw	23
  6560  0E3C                     u3335:	
  6561  0E3C  36BE               	lsrf	??___fttol+2,f
  6562  0E3D  0CBD               	rrf	??___fttol+1,f
  6563  0E3E  0CBC               	rrf	??___fttol,f
  6564  0E3F  0B89               	decfsz	9,f
  6565  0E40  2E3C               	goto	u3335
  6566  0E41  083C               	movf	??___fttol,w
  6567  0E42  00BF               	movwf	??___fttol+3
  6568  0E43  083F               	movf	??___fttol+3,w
  6569  0E44  00C0               	movwf	___fttol@sign1
  6570  0E45  17B9               	bsf	___fttol@f1+1,7
  6571  0E46  30FF               	movlw	255
  6572  0E47  05B8               	andwf	___fttol@f1,f
  6573  0E48  30FF               	movlw	255
  6574  0E49  05B9               	andwf	___fttol@f1+1,f
  6575  0E4A  3000               	movlw	0
  6576  0E4B  05BA               	andwf	___fttol@f1+2,f
  6577  0E4C  0838               	movf	___fttol@f1,w
  6578  0E4D  00C1               	movwf	___fttol@lval
  6579  0E4E  0839               	movf	___fttol@f1+1,w
  6580  0E4F  00C2               	movwf	___fttol@lval+1
  6581  0E50  083A               	movf	___fttol@f1+2,w
  6582  0E51  00C3               	movwf	___fttol@lval+2
  6583  0E52  01C4               	clrf	___fttol@lval+3
  6584  0E53  308E               	movlw	142
  6585  0E54  02C5               	subwf	___fttol@exp1,f
  6586  0E55  1FC5               	btfss	___fttol@exp1,7
  6587  0E56  2E73               	goto	l3265
  6588  0E57  0845               	movf	___fttol@exp1,w
  6589  0E58  3A80               	xorlw	128
  6590  0E59  3E8F               	addlw	143
  6591  0E5A  1803               	skipnc
  6592  0E5B  2E65               	goto	l3263
  6593  0E5C  3000               	movlw	0
  6594  0E5D  00BB               	movwf	?___fttol+3
  6595  0E5E  3000               	movlw	0
  6596  0E5F  00BA               	movwf	?___fttol+2
  6597  0E60  3000               	movlw	0
  6598  0E61  00B9               	movwf	?___fttol+1
  6599  0E62  3000               	movlw	0
  6600  0E63  00B8               	movwf	?___fttol
  6601  0E64  0008               	return
  6602  0E65                     l3263:	
  6603  0E65  3001               	movlw	1
  6604  0E66                     u3365:	
  6605  0E66  36C4               	lsrf	___fttol@lval+3,f
  6606  0E67  0CC3               	rrf	___fttol@lval+2,f
  6607  0E68  0CC2               	rrf	___fttol@lval+1,f
  6608  0E69  0CC1               	rrf	___fttol@lval,f
  6609  0E6A  0B89               	decfsz	9,f
  6610  0E6B  2E66               	goto	u3365
  6611  0E6C  3001               	movlw	1
  6612  0E6D  00BC               	movwf	??___fttol
  6613  0E6E  083C               	movf	??___fttol,w
  6614  0E6F  07C5               	addwf	___fttol@exp1,f
  6615  0E70  1903               	btfsc	3,2
  6616  0E71  2E8C               	goto	l3273
  6617  0E72  2E65               	goto	l3263
  6618  0E73                     l3265:	
  6619  0E73  3018               	movlw	24
  6620  0E74  0245               	subwf	___fttol@exp1,w
  6621  0E75  1C03               	skipc
  6622  0E76  2E89               	goto	l1169
  6623  0E77  3000               	movlw	0
  6624  0E78  00BB               	movwf	?___fttol+3
  6625  0E79  3000               	movlw	0
  6626  0E7A  00BA               	movwf	?___fttol+2
  6627  0E7B  3000               	movlw	0
  6628  0E7C  00B9               	movwf	?___fttol+1
  6629  0E7D  3000               	movlw	0
  6630  0E7E  00B8               	movwf	?___fttol
  6631  0E7F  0008               	return
  6632  0E80                     l3271:	
  6633  0E80  3001               	movlw	1
  6634  0E81                     u3395:	
  6635  0E81  35C1               	lslf	___fttol@lval,f
  6636  0E82  0DC2               	rlf	___fttol@lval+1,f
  6637  0E83  0DC3               	rlf	___fttol@lval+2,f
  6638  0E84  0DC4               	rlf	___fttol@lval+3,f
  6639  0E85  0B89               	decfsz	9,f
  6640  0E86  2E81               	goto	u3395
  6641  0E87  3001               	movlw	1
  6642  0E88  02C5               	subwf	___fttol@exp1,f
  6643  0E89                     l1169:	
  6644  0E89  0845               	movf	___fttol@exp1,w
  6645  0E8A  1D03               	btfss	3,2
  6646  0E8B  2E80               	goto	l3271
  6647  0E8C                     l3273:	
  6648  0E8C  0840               	movf	___fttol@sign1,w
  6649  0E8D  1903               	btfsc	3,2
  6650  0E8E  2E9A               	goto	l3277
  6651  0E8F  09C1               	comf	___fttol@lval,f
  6652  0E90  09C2               	comf	___fttol@lval+1,f
  6653  0E91  09C3               	comf	___fttol@lval+2,f
  6654  0E92  09C4               	comf	___fttol@lval+3,f
  6655  0E93  0AC1               	incf	___fttol@lval,f
  6656  0E94  1903               	skipnz
  6657  0E95  0AC2               	incf	___fttol@lval+1,f
  6658  0E96  1903               	skipnz
  6659  0E97  0AC3               	incf	___fttol@lval+2,f
  6660  0E98  1903               	skipnz
  6661  0E99  0AC4               	incf	___fttol@lval+3,f
  6662  0E9A                     l3277:	
  6663  0E9A  0844               	movf	___fttol@lval+3,w
  6664  0E9B  00BB               	movwf	?___fttol+3
  6665  0E9C  0843               	movf	___fttol@lval+2,w
  6666  0E9D  00BA               	movwf	?___fttol+2
  6667  0E9E  0842               	movf	___fttol@lval+1,w
  6668  0E9F  00B9               	movwf	?___fttol+1
  6669  0EA0  0841               	movf	___fttol@lval,w
  6670  0EA1  00B8               	movwf	?___fttol
  6671  0EA2  0008               	return
  6672  0EA3                     __end_of___fttol:	
  6673                           
  6674                           	psect	text22
  6675  0F4C                     __ptext22:	
  6676 ;; *************** function ___ftmul *****************
  6677 ;; Defined at:
  6678 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;  f1              3    8[BANK0 ] float 
  6681 ;;  f2              3   11[BANK0 ] float 
  6682 ;; Auto vars:     Size  Location     Type
  6683 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  6684 ;;  sign            1   23[BANK0 ] unsigned char 
  6685 ;;  cntr            1   22[BANK0 ] unsigned char 
  6686 ;;  exp             1   18[BANK0 ] unsigned char 
  6687 ;; Return value:  Size  Location     Type
  6688 ;;                  3    8[BANK0 ] float 
  6689 ;; Registers used:
  6690 ;;		wreg, status,2, status,0, pclath, cstack
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6696 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6697 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6698 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;Total ram usage:       16 bytes
  6701 ;; Hardware stack levels used:    1
  6702 ;; Hardware stack levels required when called:    6
  6703 ;; This function calls:
  6704 ;;		___ftpack
  6705 ;; This function is called by:
  6706 ;;		_PROTOCOL_I2C_Send_float
  6707 ;; This function uses a non-reentrant model
  6708 ;;
  6709                           
  6710                           
  6711                           ;psect for function ___ftmul
  6712  0F4C                     ___ftmul:	
  6713                           
  6714                           ;incstack = 0
  6715                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6716  0F4C  0020               	movlb	0	; select bank0
  6717  0F4D  0828               	movf	___ftmul@f1,w
  6718  0F4E  00AE               	movwf	??___ftmul
  6719  0F4F  0829               	movf	___ftmul@f1+1,w
  6720  0F50  00AF               	movwf	??___ftmul+1
  6721  0F51  082A               	movf	___ftmul@f1+2,w
  6722  0F52  00B0               	movwf	??___ftmul+2
  6723  0F53  1003               	clrc
  6724  0F54  0D2F               	rlf	??___ftmul+1,w
  6725  0F55  0D30               	rlf	??___ftmul+2,w
  6726  0F56  00B1               	movwf	??___ftmul+3
  6727  0F57  0831               	movf	??___ftmul+3,w
  6728  0F58  00B2               	movwf	___ftmul@exp
  6729  0F59  0832               	movf	___ftmul@exp,w
  6730  0F5A  1D03               	btfss	3,2
  6731  0F5B  2F63               	goto	l3195
  6732  0F5C  3000               	movlw	0
  6733  0F5D  00A8               	movwf	?___ftmul
  6734  0F5E  3000               	movlw	0
  6735  0F5F  00A9               	movwf	?___ftmul+1
  6736  0F60  3000               	movlw	0
  6737  0F61  00AA               	movwf	?___ftmul+2
  6738  0F62  0008               	return
  6739  0F63                     l3195:	
  6740  0F63  082B               	movf	___ftmul@f2,w
  6741  0F64  00AE               	movwf	??___ftmul
  6742  0F65  082C               	movf	___ftmul@f2+1,w
  6743  0F66  00AF               	movwf	??___ftmul+1
  6744  0F67  082D               	movf	___ftmul@f2+2,w
  6745  0F68  00B0               	movwf	??___ftmul+2
  6746  0F69  1003               	clrc
  6747  0F6A  0D2F               	rlf	??___ftmul+1,w
  6748  0F6B  0D30               	rlf	??___ftmul+2,w
  6749  0F6C  00B1               	movwf	??___ftmul+3
  6750  0F6D  0831               	movf	??___ftmul+3,w
  6751  0F6E  00B7               	movwf	___ftmul@sign
  6752  0F6F  0837               	movf	___ftmul@sign,w
  6753  0F70  1D03               	btfss	3,2
  6754  0F71  2F79               	goto	l3201
  6755  0F72  3000               	movlw	0
  6756  0F73  00A8               	movwf	?___ftmul
  6757  0F74  3000               	movlw	0
  6758  0F75  00A9               	movwf	?___ftmul+1
  6759  0F76  3000               	movlw	0
  6760  0F77  00AA               	movwf	?___ftmul+2
  6761  0F78  0008               	return
  6762  0F79                     l3201:	
  6763  0F79  0837               	movf	___ftmul@sign,w
  6764  0F7A  3E7B               	addlw	123
  6765  0F7B  00AE               	movwf	??___ftmul
  6766  0F7C  082E               	movf	??___ftmul,w
  6767  0F7D  07B2               	addwf	___ftmul@exp,f
  6768  0F7E  0828               	movf	___ftmul@f1,w
  6769  0F7F  00AE               	movwf	??___ftmul
  6770  0F80  0829               	movf	___ftmul@f1+1,w
  6771  0F81  00AF               	movwf	??___ftmul+1
  6772  0F82  082A               	movf	___ftmul@f1+2,w
  6773  0F83  00B0               	movwf	??___ftmul+2
  6774  0F84  3010               	movlw	16
  6775  0F85                     u3225:	
  6776  0F85  36B0               	lsrf	??___ftmul+2,f
  6777  0F86  0CAF               	rrf	??___ftmul+1,f
  6778  0F87  0CAE               	rrf	??___ftmul,f
  6779  0F88  0B89               	decfsz	9,f
  6780  0F89  2F85               	goto	u3225
  6781  0F8A  082E               	movf	??___ftmul,w
  6782  0F8B  00B1               	movwf	??___ftmul+3
  6783  0F8C  0831               	movf	??___ftmul+3,w
  6784  0F8D  00B7               	movwf	___ftmul@sign
  6785  0F8E  082B               	movf	___ftmul@f2,w
  6786  0F8F  00AE               	movwf	??___ftmul
  6787  0F90  082C               	movf	___ftmul@f2+1,w
  6788  0F91  00AF               	movwf	??___ftmul+1
  6789  0F92  082D               	movf	___ftmul@f2+2,w
  6790  0F93  00B0               	movwf	??___ftmul+2
  6791  0F94  3010               	movlw	16
  6792  0F95                     u3235:	
  6793  0F95  36B0               	lsrf	??___ftmul+2,f
  6794  0F96  0CAF               	rrf	??___ftmul+1,f
  6795  0F97  0CAE               	rrf	??___ftmul,f
  6796  0F98  0B89               	decfsz	9,f
  6797  0F99  2F95               	goto	u3235
  6798  0F9A  082E               	movf	??___ftmul,w
  6799  0F9B  00B1               	movwf	??___ftmul+3
  6800  0F9C  0831               	movf	??___ftmul+3,w
  6801  0F9D  06B7               	xorwf	___ftmul@sign,f
  6802  0F9E  3080               	movlw	128
  6803  0F9F  00AE               	movwf	??___ftmul
  6804  0FA0  082E               	movf	??___ftmul,w
  6805  0FA1  05B7               	andwf	___ftmul@sign,f
  6806  0FA2  17A9               	bsf	___ftmul@f1+1,7
  6807  0FA3  17AC               	bsf	___ftmul@f2+1,7
  6808  0FA4  30FF               	movlw	255
  6809  0FA5  05AB               	andwf	___ftmul@f2,f
  6810  0FA6  30FF               	movlw	255
  6811  0FA7  05AC               	andwf	___ftmul@f2+1,f
  6812  0FA8  3000               	movlw	0
  6813  0FA9  05AD               	andwf	___ftmul@f2+2,f
  6814  0FAA  3000               	movlw	0
  6815  0FAB  00B3               	movwf	___ftmul@f3_as_product
  6816  0FAC  3000               	movlw	0
  6817  0FAD  00B4               	movwf	___ftmul@f3_as_product+1
  6818  0FAE  3000               	movlw	0
  6819  0FAF  00B5               	movwf	___ftmul@f3_as_product+2
  6820  0FB0  3007               	movlw	7
  6821  0FB1  00AE               	movwf	??___ftmul
  6822  0FB2  082E               	movf	??___ftmul,w
  6823  0FB3  00B6               	movwf	___ftmul@cntr
  6824  0FB4                     l3213:	
  6825  0FB4  1C28               	btfss	___ftmul@f1,0
  6826  0FB5  2FBC               	goto	l3217
  6827  0FB6  082B               	movf	___ftmul@f2,w
  6828  0FB7  07B3               	addwf	___ftmul@f3_as_product,f
  6829  0FB8  082C               	movf	___ftmul@f2+1,w
  6830  0FB9  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  6831  0FBA  082D               	movf	___ftmul@f2+2,w
  6832  0FBB  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  6833  0FBC                     l3217:	
  6834  0FBC  3001               	movlw	1
  6835  0FBD                     u3255:	
  6836  0FBD  36AA               	lsrf	___ftmul@f1+2,f
  6837  0FBE  0CA9               	rrf	___ftmul@f1+1,f
  6838  0FBF  0CA8               	rrf	___ftmul@f1,f
  6839  0FC0  0B89               	decfsz	9,f
  6840  0FC1  2FBD               	goto	u3255
  6841  0FC2  3001               	movlw	1
  6842  0FC3                     u3265:	
  6843  0FC3  35AB               	lslf	___ftmul@f2,f
  6844  0FC4  0DAC               	rlf	___ftmul@f2+1,f
  6845  0FC5  0DAD               	rlf	___ftmul@f2+2,f
  6846  0FC6  0B89               	decfsz	9,f
  6847  0FC7  2FC3               	goto	u3265
  6848  0FC8  3001               	movlw	1
  6849  0FC9  02B6               	subwf	___ftmul@cntr,f
  6850  0FCA  1D03               	btfss	3,2
  6851  0FCB  2FB4               	goto	l3213
  6852  0FCC  3009               	movlw	9
  6853  0FCD  00AE               	movwf	??___ftmul
  6854  0FCE  082E               	movf	??___ftmul,w
  6855  0FCF  00B6               	movwf	___ftmul@cntr
  6856  0FD0                     l3225:	
  6857  0FD0  1C28               	btfss	___ftmul@f1,0
  6858  0FD1  2FD8               	goto	l3229
  6859  0FD2  082B               	movf	___ftmul@f2,w
  6860  0FD3  07B3               	addwf	___ftmul@f3_as_product,f
  6861  0FD4  082C               	movf	___ftmul@f2+1,w
  6862  0FD5  3DB4               	addwfc	___ftmul@f3_as_product+1,f
  6863  0FD6  082D               	movf	___ftmul@f2+2,w
  6864  0FD7  3DB5               	addwfc	___ftmul@f3_as_product+2,f
  6865  0FD8                     l3229:	
  6866  0FD8  3001               	movlw	1
  6867  0FD9                     u3295:	
  6868  0FD9  36AA               	lsrf	___ftmul@f1+2,f
  6869  0FDA  0CA9               	rrf	___ftmul@f1+1,f
  6870  0FDB  0CA8               	rrf	___ftmul@f1,f
  6871  0FDC  0B89               	decfsz	9,f
  6872  0FDD  2FD9               	goto	u3295
  6873  0FDE  3001               	movlw	1
  6874  0FDF                     u3305:	
  6875  0FDF  36B5               	lsrf	___ftmul@f3_as_product+2,f
  6876  0FE0  0CB4               	rrf	___ftmul@f3_as_product+1,f
  6877  0FE1  0CB3               	rrf	___ftmul@f3_as_product,f
  6878  0FE2  0B89               	decfsz	9,f
  6879  0FE3  2FDF               	goto	u3305
  6880  0FE4  3001               	movlw	1
  6881  0FE5  02B6               	subwf	___ftmul@cntr,f
  6882  0FE6  1D03               	btfss	3,2
  6883  0FE7  2FD0               	goto	l3225
  6884  0FE8  0833               	movf	___ftmul@f3_as_product,w
  6885  0FE9  00A0               	movwf	___ftpack@arg
  6886  0FEA  0834               	movf	___ftmul@f3_as_product+1,w
  6887  0FEB  00A1               	movwf	___ftpack@arg+1
  6888  0FEC  0835               	movf	___ftmul@f3_as_product+2,w
  6889  0FED  00A2               	movwf	___ftpack@arg+2
  6890  0FEE  0832               	movf	___ftmul@exp,w
  6891  0FEF  00AE               	movwf	??___ftmul
  6892  0FF0  082E               	movf	??___ftmul,w
  6893  0FF1  00A3               	movwf	___ftpack@exp
  6894  0FF2  0837               	movf	___ftmul@sign,w
  6895  0FF3  00AF               	movwf	??___ftmul+1
  6896  0FF4  082F               	movf	??___ftmul+1,w
  6897  0FF5  00A4               	movwf	___ftpack@sign
  6898  0FF6  318D  2546         	fcall	___ftpack
  6899  0FF8  0020               	movlb	0	; select bank0
  6900  0FF9  0820               	movf	?___ftpack,w
  6901  0FFA  00A8               	movwf	?___ftmul
  6902  0FFB  0821               	movf	?___ftpack+1,w
  6903  0FFC  00A9               	movwf	?___ftmul+1
  6904  0FFD  0822               	movf	?___ftpack+2,w
  6905  0FFE  00AA               	movwf	?___ftmul+2
  6906  0FFF  0008               	return
  6907  1000                     __end_of___ftmul:	
  6908                           
  6909                           	psect	text23
  6910  0D46                     __ptext23:	
  6911 ;; *************** function ___ftpack *****************
  6912 ;; Defined at:
  6913 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;  arg             3    0[BANK0 ] unsigned um
  6916 ;;  exp             1    3[BANK0 ] unsigned char 
  6917 ;;  sign            1    4[BANK0 ] unsigned char 
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;		None
  6920 ;; Return value:  Size  Location     Type
  6921 ;;                  3    0[BANK0 ] float 
  6922 ;; Registers used:
  6923 ;;		wreg, status,2, status,0
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6929 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6931 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6932 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6933 ;;Total ram usage:        8 bytes
  6934 ;; Hardware stack levels used:    1
  6935 ;; Hardware stack levels required when called:    5
  6936 ;; This function calls:
  6937 ;;		Nothing
  6938 ;; This function is called by:
  6939 ;;		___ftadd
  6940 ;;		___ftdiv
  6941 ;;		___ftmul
  6942 ;;		___lwtoft
  6943 ;; This function uses a non-reentrant model
  6944 ;;
  6945                           
  6946                           
  6947                           ;psect for function ___ftpack
  6948  0D46                     ___ftpack:	
  6949                           
  6950                           ;incstack = 0
  6951                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6952  0D46  0020               	movlb	0	; select bank0
  6953  0D47  0823               	movf	___ftpack@exp,w
  6954  0D48  1903               	btfsc	3,2
  6955  0D49  2D4F               	goto	l2743
  6956  0D4A  0822               	movf	___ftpack@arg+2,w
  6957  0D4B  0421               	iorwf	___ftpack@arg+1,w
  6958  0D4C  0420               	iorwf	___ftpack@arg,w
  6959  0D4D  1D03               	skipz
  6960  0D4E  2D60               	goto	l2749
  6961  0D4F                     l2743:	
  6962  0D4F  3000               	movlw	0
  6963  0D50  00A0               	movwf	?___ftpack
  6964  0D51  3000               	movlw	0
  6965  0D52  00A1               	movwf	?___ftpack+1
  6966  0D53  3000               	movlw	0
  6967  0D54  00A2               	movwf	?___ftpack+2
  6968  0D55  0008               	return
  6969  0D56                     l2747:	
  6970  0D56  3001               	movlw	1
  6971  0D57  00A5               	movwf	??___ftpack
  6972  0D58  0825               	movf	??___ftpack,w
  6973  0D59  07A3               	addwf	___ftpack@exp,f
  6974  0D5A  3001               	movlw	1
  6975  0D5B                     u2185:	
  6976  0D5B  36A2               	lsrf	___ftpack@arg+2,f
  6977  0D5C  0CA1               	rrf	___ftpack@arg+1,f
  6978  0D5D  0CA0               	rrf	___ftpack@arg,f
  6979  0D5E  0B89               	decfsz	9,f
  6980  0D5F  2D5B               	goto	u2185
  6981  0D60                     l2749:	
  6982  0D60  30FE               	movlw	254
  6983  0D61  0522               	andwf	___ftpack@arg+2,w
  6984  0D62  1903               	btfsc	3,2
  6985  0D63  2D79               	goto	l1078
  6986  0D64  2D56               	goto	l2747
  6987  0D65                     l2751:	
  6988  0D65  3001               	movlw	1
  6989  0D66  00A5               	movwf	??___ftpack
  6990  0D67  0825               	movf	??___ftpack,w
  6991  0D68  07A3               	addwf	___ftpack@exp,f
  6992  0D69  3001               	movlw	1
  6993  0D6A  07A0               	addwf	___ftpack@arg,f
  6994  0D6B  3000               	movlw	0
  6995  0D6C  1803               	skipnc
  6996  0D6D  3001               	movlw	1
  6997  0D6E  07A1               	addwf	___ftpack@arg+1,f
  6998  0D6F  3000               	movlw	0
  6999  0D70  1803               	skipnc
  7000  0D71  3001               	movlw	1
  7001  0D72  07A2               	addwf	___ftpack@arg+2,f
  7002  0D73  3001               	movlw	1
  7003  0D74                     u2205:	
  7004  0D74  36A2               	lsrf	___ftpack@arg+2,f
  7005  0D75  0CA1               	rrf	___ftpack@arg+1,f
  7006  0D76  0CA0               	rrf	___ftpack@arg,f
  7007  0D77  0B89               	decfsz	9,f
  7008  0D78  2D74               	goto	u2205
  7009  0D79                     l1078:	
  7010  0D79  30FF               	movlw	255
  7011  0D7A  0522               	andwf	___ftpack@arg+2,w
  7012  0D7B  1903               	btfsc	3,2
  7013  0D7C  2D86               	goto	l2759
  7014  0D7D  2D65               	goto	l2751
  7015  0D7E                     l2757:	
  7016  0D7E  3001               	movlw	1
  7017  0D7F  02A3               	subwf	___ftpack@exp,f
  7018  0D80  3001               	movlw	1
  7019  0D81                     u2225:	
  7020  0D81  35A0               	lslf	___ftpack@arg,f
  7021  0D82  0DA1               	rlf	___ftpack@arg+1,f
  7022  0D83  0DA2               	rlf	___ftpack@arg+2,f
  7023  0D84  0B89               	decfsz	9,f
  7024  0D85  2D81               	goto	u2225
  7025  0D86                     l2759:	
  7026  0D86  1BA1               	btfsc	___ftpack@arg+1,7
  7027  0D87  2D8C               	goto	l1085
  7028  0D88  3002               	movlw	2
  7029  0D89  0223               	subwf	___ftpack@exp,w
  7030  0D8A  1803               	skipnc
  7031  0D8B  2D7E               	goto	l2757
  7032  0D8C                     l1085:	
  7033  0D8C  1823               	btfsc	___ftpack@exp,0
  7034  0D8D  2D94               	goto	l1086
  7035  0D8E  30FF               	movlw	255
  7036  0D8F  05A0               	andwf	___ftpack@arg,f
  7037  0D90  307F               	movlw	127
  7038  0D91  05A1               	andwf	___ftpack@arg+1,f
  7039  0D92  30FF               	movlw	255
  7040  0D93  05A2               	andwf	___ftpack@arg+2,f
  7041  0D94                     l1086:	
  7042  0D94  1003               	clrc
  7043  0D95  0CA3               	rrf	___ftpack@exp,f
  7044  0D96  0823               	movf	___ftpack@exp,w
  7045  0D97  00A5               	movwf	??___ftpack
  7046  0D98  01A6               	clrf	??___ftpack+1
  7047  0D99  01A7               	clrf	??___ftpack+2
  7048  0D9A  3010               	movlw	16
  7049  0D9B                     u2265:	
  7050  0D9B  35A5               	lslf	??___ftpack,f
  7051  0D9C  0DA6               	rlf	??___ftpack+1,f
  7052  0D9D  0DA7               	rlf	??___ftpack+2,f
  7053  0D9E  0B89               	decfsz	9,f
  7054  0D9F  2D9B               	goto	u2265
  7055  0DA0  0825               	movf	??___ftpack,w
  7056  0DA1  04A0               	iorwf	___ftpack@arg,f
  7057  0DA2  0826               	movf	??___ftpack+1,w
  7058  0DA3  04A1               	iorwf	___ftpack@arg+1,f
  7059  0DA4  0827               	movf	??___ftpack+2,w
  7060  0DA5  04A2               	iorwf	___ftpack@arg+2,f
  7061  0DA6  0824               	movf	___ftpack@sign,w
  7062  0DA7  1903               	btfsc	3,2
  7063  0DA8  0008               	return
  7064  0DA9  17A2               	bsf	___ftpack@arg+2,7
  7065  0DAA  0008               	return
  7066  0DAB                     __end_of___ftpack:	
  7067                           
  7068                           	psect	text24
  7069  0974                     __ptext24:	
  7070 ;; *************** function ___bmul *****************
  7071 ;; Defined at:
  7072 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
  7073 ;; Parameters:    Size  Location     Type
  7074 ;;  multiplier      1    wreg     unsigned char 
  7075 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7076 ;; Auto vars:     Size  Location     Type
  7077 ;;  multiplier      1    3[BANK0 ] unsigned char 
  7078 ;;  product         1    2[BANK0 ] unsigned char 
  7079 ;; Return value:  Size  Location     Type
  7080 ;;                  1    wreg      unsigned char 
  7081 ;; Registers used:
  7082 ;;		wreg, status,2, status,0
  7083 ;; Tracked objects:
  7084 ;;		On entry : 0/0
  7085 ;;		On exit  : 0/0
  7086 ;;		Unchanged: 0/0
  7087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7088 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7089 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7091 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7092 ;;Total ram usage:        4 bytes
  7093 ;; Hardware stack levels used:    1
  7094 ;; Hardware stack levels required when called:    5
  7095 ;; This function calls:
  7096 ;;		Nothing
  7097 ;; This function is called by:
  7098 ;;		_PROTOCOL_I2C_Send_float
  7099 ;; This function uses a non-reentrant model
  7100 ;;
  7101                           
  7102                           
  7103                           ;psect for function ___bmul
  7104  0974                     ___bmul:	
  7105                           
  7106                           ;incstack = 0
  7107                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7108                           ;___bmul@multiplier stored from wreg
  7109  0974  0020               	movlb	0	; select bank0
  7110  0975  00A3               	movwf	___bmul@multiplier
  7111  0976  01A2               	clrf	___bmul@product
  7112  0977                     l2983:	
  7113  0977  1C23               	btfss	___bmul@multiplier,0
  7114  0978  297D               	goto	l2987
  7115  0979  0820               	movf	___bmul@multiplicand,w
  7116  097A  00A1               	movwf	??___bmul
  7117  097B  0821               	movf	??___bmul,w
  7118  097C  07A2               	addwf	___bmul@product,f
  7119  097D                     l2987:	
  7120  097D  1003               	clrc
  7121  097E  0DA0               	rlf	___bmul@multiplicand,f
  7122  097F  1003               	clrc
  7123  0980  0CA3               	rrf	___bmul@multiplier,f
  7124  0981  0823               	movf	___bmul@multiplier,w
  7125  0982  1D03               	btfss	3,2
  7126  0983  2977               	goto	l2983
  7127  0984  0822               	movf	___bmul@product,w
  7128  0985  0008               	return
  7129  0986                     __end_of___bmul:	
  7130                           
  7131                           	psect	text25
  7132  0C19                     __ptext25:	
  7133 ;; *************** function ___awmod *****************
  7134 ;; Defined at:
  7135 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;  divisor         2    0[BANK0 ] int 
  7138 ;;  dividend        2    2[BANK0 ] int 
  7139 ;; Auto vars:     Size  Location     Type
  7140 ;;  sign            1    6[BANK0 ] unsigned char 
  7141 ;;  counter         1    5[BANK0 ] unsigned char 
  7142 ;; Return value:  Size  Location     Type
  7143 ;;                  2    0[BANK0 ] int 
  7144 ;; Registers used:
  7145 ;;		wreg, status,2, status,0
  7146 ;; Tracked objects:
  7147 ;;		On entry : 0/0
  7148 ;;		On exit  : 0/0
  7149 ;;		Unchanged: 0/0
  7150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7151 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7152 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;Total ram usage:        7 bytes
  7156 ;; Hardware stack levels used:    1
  7157 ;; Hardware stack levels required when called:    5
  7158 ;; This function calls:
  7159 ;;		Nothing
  7160 ;; This function is called by:
  7161 ;;		_PROTOCOL_I2C_Send_float
  7162 ;; This function uses a non-reentrant model
  7163 ;;
  7164                           
  7165                           
  7166                           ;psect for function ___awmod
  7167  0C19                     ___awmod:	
  7168                           
  7169                           ;incstack = 0
  7170                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  7171  0C19  0020               	movlb	0	; select bank0
  7172  0C1A  01A6               	clrf	___awmod@sign
  7173  0C1B  1FA3               	btfss	___awmod@dividend+1,7
  7174  0C1C  2C24               	goto	l3047
  7175  0C1D  09A2               	comf	___awmod@dividend,f
  7176  0C1E  09A3               	comf	___awmod@dividend+1,f
  7177  0C1F  0AA2               	incf	___awmod@dividend,f
  7178  0C20  1903               	skipnz
  7179  0C21  0AA3               	incf	___awmod@dividend+1,f
  7180  0C22  01A6               	clrf	___awmod@sign
  7181  0C23  0AA6               	incf	___awmod@sign,f
  7182  0C24                     l3047:	
  7183  0C24  1FA1               	btfss	___awmod@divisor+1,7
  7184  0C25  2C2B               	goto	l3051
  7185  0C26  09A0               	comf	___awmod@divisor,f
  7186  0C27  09A1               	comf	___awmod@divisor+1,f
  7187  0C28  0AA0               	incf	___awmod@divisor,f
  7188  0C29  1903               	skipnz
  7189  0C2A  0AA1               	incf	___awmod@divisor+1,f
  7190  0C2B                     l3051:	
  7191  0C2B  0820               	movf	___awmod@divisor,w
  7192  0C2C  0421               	iorwf	___awmod@divisor+1,w
  7193  0C2D  1903               	btfsc	3,2
  7194  0C2E  2C52               	goto	l3069
  7195  0C2F  01A5               	clrf	___awmod@counter
  7196  0C30  0AA5               	incf	___awmod@counter,f
  7197  0C31                     l3059:	
  7198  0C31  1BA1               	btfsc	___awmod@divisor+1,7
  7199  0C32  2C3D               	goto	l3061
  7200  0C33  3001               	movlw	1
  7201  0C34                     u2835:	
  7202  0C34  35A0               	lslf	___awmod@divisor,f
  7203  0C35  0DA1               	rlf	___awmod@divisor+1,f
  7204  0C36  0B89               	decfsz	9,f
  7205  0C37  2C34               	goto	u2835
  7206  0C38  3001               	movlw	1
  7207  0C39  00A4               	movwf	??___awmod
  7208  0C3A  0824               	movf	??___awmod,w
  7209  0C3B  07A5               	addwf	___awmod@counter,f
  7210  0C3C  2C31               	goto	l3059
  7211  0C3D                     l3061:	
  7212  0C3D  0821               	movf	___awmod@divisor+1,w
  7213  0C3E  0223               	subwf	___awmod@dividend+1,w
  7214  0C3F  1D03               	skipz
  7215  0C40  2C43               	goto	u2855
  7216  0C41  0820               	movf	___awmod@divisor,w
  7217  0C42  0222               	subwf	___awmod@dividend,w
  7218  0C43                     u2855:	
  7219  0C43  1C03               	skipc
  7220  0C44  2C49               	goto	l3065
  7221  0C45  0820               	movf	___awmod@divisor,w
  7222  0C46  02A2               	subwf	___awmod@dividend,f
  7223  0C47  0821               	movf	___awmod@divisor+1,w
  7224  0C48  3BA3               	subwfb	___awmod@dividend+1,f
  7225  0C49                     l3065:	
  7226  0C49  3001               	movlw	1
  7227  0C4A                     u2865:	
  7228  0C4A  36A1               	lsrf	___awmod@divisor+1,f
  7229  0C4B  0CA0               	rrf	___awmod@divisor,f
  7230  0C4C  0B89               	decfsz	9,f
  7231  0C4D  2C4A               	goto	u2865
  7232  0C4E  3001               	movlw	1
  7233  0C4F  02A5               	subwf	___awmod@counter,f
  7234  0C50  1D03               	btfss	3,2
  7235  0C51  2C3D               	goto	l3061
  7236  0C52                     l3069:	
  7237  0C52  0826               	movf	___awmod@sign,w
  7238  0C53  1903               	btfsc	3,2
  7239  0C54  2C5A               	goto	l3073
  7240  0C55  09A2               	comf	___awmod@dividend,f
  7241  0C56  09A3               	comf	___awmod@dividend+1,f
  7242  0C57  0AA2               	incf	___awmod@dividend,f
  7243  0C58  1903               	skipnz
  7244  0C59  0AA3               	incf	___awmod@dividend+1,f
  7245  0C5A                     l3073:	
  7246  0C5A  0823               	movf	___awmod@dividend+1,w
  7247  0C5B  00A1               	movwf	?___awmod+1
  7248  0C5C  0822               	movf	___awmod@dividend,w
  7249  0C5D  00A0               	movwf	?___awmod
  7250  0C5E  0008               	return
  7251  0C5F                     __end_of___awmod:	
  7252                           
  7253                           	psect	text26
  7254  0CF4                     __ptext26:	
  7255 ;; *************** function ___awdiv *****************
  7256 ;; Defined at:
  7257 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;  divisor         2    0[BANK0 ] int 
  7260 ;;  dividend        2    2[BANK0 ] int 
  7261 ;; Auto vars:     Size  Location     Type
  7262 ;;  quotient        2    7[BANK0 ] int 
  7263 ;;  sign            1    6[BANK0 ] unsigned char 
  7264 ;;  counter         1    5[BANK0 ] unsigned char 
  7265 ;; Return value:  Size  Location     Type
  7266 ;;                  2    0[BANK0 ] int 
  7267 ;; Registers used:
  7268 ;;		wreg, status,2, status,0
  7269 ;; Tracked objects:
  7270 ;;		On entry : 0/0
  7271 ;;		On exit  : 0/0
  7272 ;;		Unchanged: 0/0
  7273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7274 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7278 ;;Total ram usage:        9 bytes
  7279 ;; Hardware stack levels used:    1
  7280 ;; Hardware stack levels required when called:    5
  7281 ;; This function calls:
  7282 ;;		Nothing
  7283 ;; This function is called by:
  7284 ;;		_PROTOCOL_I2C_Send_float
  7285 ;; This function uses a non-reentrant model
  7286 ;;
  7287                           
  7288                           
  7289                           ;psect for function ___awdiv
  7290  0CF4                     ___awdiv:	
  7291                           
  7292                           ;incstack = 0
  7293                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  7294  0CF4  0020               	movlb	0	; select bank0
  7295  0CF5  01A6               	clrf	___awdiv@sign
  7296  0CF6  1FA1               	btfss	___awdiv@divisor+1,7
  7297  0CF7  2CFF               	goto	l3003
  7298  0CF8  09A0               	comf	___awdiv@divisor,f
  7299  0CF9  09A1               	comf	___awdiv@divisor+1,f
  7300  0CFA  0AA0               	incf	___awdiv@divisor,f
  7301  0CFB  1903               	skipnz
  7302  0CFC  0AA1               	incf	___awdiv@divisor+1,f
  7303  0CFD  01A6               	clrf	___awdiv@sign
  7304  0CFE  0AA6               	incf	___awdiv@sign,f
  7305  0CFF                     l3003:	
  7306  0CFF  1FA3               	btfss	___awdiv@dividend+1,7
  7307  0D00  2D0A               	goto	l3009
  7308  0D01  09A2               	comf	___awdiv@dividend,f
  7309  0D02  09A3               	comf	___awdiv@dividend+1,f
  7310  0D03  0AA2               	incf	___awdiv@dividend,f
  7311  0D04  1903               	skipnz
  7312  0D05  0AA3               	incf	___awdiv@dividend+1,f
  7313  0D06  3001               	movlw	1
  7314  0D07  00A4               	movwf	??___awdiv
  7315  0D08  0824               	movf	??___awdiv,w
  7316  0D09  06A6               	xorwf	___awdiv@sign,f
  7317  0D0A                     l3009:	
  7318  0D0A  01A7               	clrf	___awdiv@quotient
  7319  0D0B  01A8               	clrf	___awdiv@quotient+1
  7320  0D0C  0820               	movf	___awdiv@divisor,w
  7321  0D0D  0421               	iorwf	___awdiv@divisor+1,w
  7322  0D0E  1903               	btfsc	3,2
  7323  0D0F  2D39               	goto	l3031
  7324  0D10  01A5               	clrf	___awdiv@counter
  7325  0D11  0AA5               	incf	___awdiv@counter,f
  7326  0D12                     l3019:	
  7327  0D12  1BA1               	btfsc	___awdiv@divisor+1,7
  7328  0D13  2D1E               	goto	l3021
  7329  0D14  3001               	movlw	1
  7330  0D15                     u2735:	
  7331  0D15  35A0               	lslf	___awdiv@divisor,f
  7332  0D16  0DA1               	rlf	___awdiv@divisor+1,f
  7333  0D17  0B89               	decfsz	9,f
  7334  0D18  2D15               	goto	u2735
  7335  0D19  3001               	movlw	1
  7336  0D1A  00A4               	movwf	??___awdiv
  7337  0D1B  0824               	movf	??___awdiv,w
  7338  0D1C  07A5               	addwf	___awdiv@counter,f
  7339  0D1D  2D12               	goto	l3019
  7340  0D1E                     l3021:	
  7341  0D1E  3001               	movlw	1
  7342  0D1F                     u2755:	
  7343  0D1F  35A7               	lslf	___awdiv@quotient,f
  7344  0D20  0DA8               	rlf	___awdiv@quotient+1,f
  7345  0D21  0B89               	decfsz	9,f
  7346  0D22  2D1F               	goto	u2755
  7347  0D23  0821               	movf	___awdiv@divisor+1,w
  7348  0D24  0223               	subwf	___awdiv@dividend+1,w
  7349  0D25  1D03               	skipz
  7350  0D26  2D29               	goto	u2765
  7351  0D27  0820               	movf	___awdiv@divisor,w
  7352  0D28  0222               	subwf	___awdiv@dividend,w
  7353  0D29                     u2765:	
  7354  0D29  1C03               	skipc
  7355  0D2A  2D30               	goto	l3027
  7356  0D2B  0820               	movf	___awdiv@divisor,w
  7357  0D2C  02A2               	subwf	___awdiv@dividend,f
  7358  0D2D  0821               	movf	___awdiv@divisor+1,w
  7359  0D2E  3BA3               	subwfb	___awdiv@dividend+1,f
  7360  0D2F  1427               	bsf	___awdiv@quotient,0
  7361  0D30                     l3027:	
  7362  0D30  3001               	movlw	1
  7363  0D31                     u2775:	
  7364  0D31  36A1               	lsrf	___awdiv@divisor+1,f
  7365  0D32  0CA0               	rrf	___awdiv@divisor,f
  7366  0D33  0B89               	decfsz	9,f
  7367  0D34  2D31               	goto	u2775
  7368  0D35  3001               	movlw	1
  7369  0D36  02A5               	subwf	___awdiv@counter,f
  7370  0D37  1D03               	btfss	3,2
  7371  0D38  2D1E               	goto	l3021
  7372  0D39                     l3031:	
  7373  0D39  0826               	movf	___awdiv@sign,w
  7374  0D3A  1903               	btfsc	3,2
  7375  0D3B  2D41               	goto	l3035
  7376  0D3C  09A7               	comf	___awdiv@quotient,f
  7377  0D3D  09A8               	comf	___awdiv@quotient+1,f
  7378  0D3E  0AA7               	incf	___awdiv@quotient,f
  7379  0D3F  1903               	skipnz
  7380  0D40  0AA8               	incf	___awdiv@quotient+1,f
  7381  0D41                     l3035:	
  7382  0D41  0828               	movf	___awdiv@quotient+1,w
  7383  0D42  00A1               	movwf	?___awdiv+1
  7384  0D43  0827               	movf	___awdiv@quotient,w
  7385  0D44  00A0               	movwf	?___awdiv
  7386  0D45  0008               	return
  7387  0D46                     __end_of___awdiv:	
  7388                           
  7389                           	psect	text27
  7390  0A63                     __ptext27:	
  7391 ;; *************** function _PROTOCOL_I2C_Set_TLV *****************
  7392 ;; Defined at:
  7393 ;;		line 207 in file "protocol.c"
  7394 ;; Parameters:    Size  Location     Type
  7395 ;;  type            1    wreg     unsigned char 
  7396 ;;  length          1    0[BANK0 ] unsigned char 
  7397 ;;  pbuffer         1    1[BANK0 ] PTR unsigned char 
  7398 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), 
  7399 ;; Auto vars:     Size  Location     Type
  7400 ;;  type            1    3[BANK0 ] unsigned char 
  7401 ;;  status          1    4[BANK0 ] enum E3406
  7402 ;; Return value:  Size  Location     Type
  7403 ;;                  1    wreg      void 
  7404 ;; Registers used:
  7405 ;;		wreg, status,2, status,0
  7406 ;; Tracked objects:
  7407 ;;		On entry : 0/0
  7408 ;;		On exit  : 0/0
  7409 ;;		Unchanged: 0/0
  7410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7411 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7412 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7414 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;Total ram usage:        5 bytes
  7416 ;; Hardware stack levels used:    1
  7417 ;; Hardware stack levels required when called:    5
  7418 ;; This function calls:
  7419 ;;		Nothing
  7420 ;; This function is called by:
  7421 ;;		_PROTOCOL_I2C_Send_float
  7422 ;; This function uses a non-reentrant model
  7423 ;;
  7424                           
  7425                           
  7426                           ;psect for function _PROTOCOL_I2C_Set_TLV
  7427  0A63                     _PROTOCOL_I2C_Set_TLV:	
  7428                           
  7429                           ;incstack = 0
  7430                           ; Regs used in _PROTOCOL_I2C_Set_TLV: [wreg+status,2+status,0]
  7431                           ;PROTOCOL_I2C_Set_TLV@type stored from wreg
  7432  0A63  0020               	movlb	0	; select bank0
  7433  0A64  00A3               	movwf	PROTOCOL_I2C_Set_TLV@type
  7434                           
  7435                           ;protocol.c: 208: READBUF_STATUS status = readbuf.status;
  7436  0A65  0021               	movlb	1	; select bank1
  7437  0A66  084F               	movf	(_readbuf^(0+128)+3),w
  7438  0A67  0020               	movlb	0	; select bank0
  7439  0A68  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  7440  0A69  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  7441  0A6A  00A4               	movwf	PROTOCOL_I2C_Set_TLV@status
  7442                           
  7443                           ;protocol.c: 209: if (status == COMPLETE) {
  7444  0A6B  3003               	movlw	3
  7445  0A6C  0624               	xorwf	PROTOCOL_I2C_Set_TLV@status,w
  7446  0A6D  1D03               	btfss	3,2
  7447  0A6E  0008               	return
  7448                           
  7449                           ;protocol.c: 210: readbuf.type = type;
  7450  0A6F  0823               	movf	PROTOCOL_I2C_Set_TLV@type,w
  7451  0A70  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  7452  0A71  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  7453  0A72  0021               	movlb	1	; select bank1
  7454  0A73  00CC               	movwf	_readbuf^(0+128)
  7455                           
  7456                           ;protocol.c: 211: readbuf.length = length;
  7457  0A74  0020               	movlb	0	; select bank0
  7458  0A75  0820               	movf	PROTOCOL_I2C_Set_TLV@length,w
  7459  0A76  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  7460  0A77  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  7461  0A78  0021               	movlb	1	; select bank1
  7462  0A79  00CD               	movwf	(_readbuf^(0+128)+1)
  7463                           
  7464                           ;protocol.c: 212: readbuf.pbuffer = pbuffer;
  7465  0A7A  0020               	movlb	0	; select bank0
  7466  0A7B  0821               	movf	PROTOCOL_I2C_Set_TLV@pbuffer,w
  7467  0A7C  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  7468  0A7D  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  7469  0A7E  0021               	movlb	1	; select bank1
  7470  0A7F  00CE               	movwf	(low ((_readbuf| 0+2)))^(0+128)
  7471                           
  7472                           ;protocol.c: 213: readbuf.buf_cnt = 0;
  7473  0A80  01D0               	clrf	(_readbuf^(0+128)+4)
  7474                           
  7475                           ;protocol.c: 214: readbuf.status = TLV_SET;
  7476  0A81  01CF               	clrf	(_readbuf^(0+128)+3)
  7477  0A82  0008               	return
  7478  0A83                     __end_of_PROTOCOL_I2C_Set_TLV:	
  7479                           
  7480                           	psect	text28
  7481  0DAB                     __ptext28:	
  7482 ;; *************** function _atoi *****************
  7483 ;; Defined at:
  7484 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  7485 ;; Parameters:    Size  Location     Type
  7486 ;;  s               1    wreg     PTR const unsigned char 
  7487 ;;		 -> buf(48), 
  7488 ;; Auto vars:     Size  Location     Type
  7489 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  7490 ;;		 -> buf(48), 
  7491 ;;  a               2   11[BANK0 ] int 
  7492 ;;  sign            1   10[BANK0 ] unsigned char 
  7493 ;; Return value:  Size  Location     Type
  7494 ;;                  2    6[BANK0 ] int 
  7495 ;; Registers used:
  7496 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7502 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7503 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7504 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7505 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7506 ;;Total ram usage:        8 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; Hardware stack levels required when called:    6
  7509 ;; This function calls:
  7510 ;;		___wmul
  7511 ;;		_isdigit
  7512 ;; This function is called by:
  7513 ;;		_PROTOCOL_Loop
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           
  7518                           ;psect for function _atoi
  7519  0DAB                     _atoi:	
  7520                           
  7521                           ;incstack = 0
  7522                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7523                           ;atoi@s stored from wreg
  7524  0DAB  0020               	movlb	0	; select bank0
  7525  0DAC  00AD               	movwf	atoi@s
  7526  0DAD                     l3627:	
  7527  0DAD  082D               	movf	atoi@s,w
  7528  0DAE  0086               	movwf	6
  7529  0DAF  3001               	movlw	1	; select bank2/3
  7530  0DB0  0087               	movwf	7
  7531  0DB1  3020               	movlw	32
  7532  0DB2  0601               	xorwf	1,w
  7533  0DB3  1D03               	btfss	3,2
  7534  0DB4  2DBA               	goto	l3629
  7535  0DB5                     l3625:	
  7536  0DB5  3001               	movlw	1
  7537  0DB6  00A8               	movwf	??_atoi
  7538  0DB7  0828               	movf	??_atoi,w
  7539  0DB8  07AD               	addwf	atoi@s,f
  7540  0DB9  2DAD               	goto	l3627
  7541  0DBA                     l3629:	
  7542  0DBA  082D               	movf	atoi@s,w
  7543  0DBB  0086               	movwf	6
  7544  0DBC  3001               	movlw	1	; select bank2/3
  7545  0DBD  0087               	movwf	7
  7546  0DBE  3009               	movlw	9
  7547  0DBF  0601               	xorwf	1,w
  7548  0DC0  1903               	btfsc	3,2
  7549  0DC1  2DB5               	goto	l3625
  7550  0DC2  01AB               	clrf	atoi@a
  7551  0DC3  01AC               	clrf	atoi@a+1
  7552  0DC4  01AA               	clrf	atoi@sign
  7553  0DC5  082D               	movf	atoi@s,w
  7554  0DC6  0086               	movwf	6
  7555  0DC7  3001               	movlw	1	; select bank2/3
  7556  0DC8  0087               	movwf	7
  7557  0DC9  302D               	movlw	45
  7558  0DCA  0601               	xorwf	1,w
  7559  0DCB  1D03               	btfss	3,2
  7560  0DCC  2DD2               	goto	l3637
  7561  0DCD  3001               	movlw	1
  7562  0DCE  00A8               	movwf	??_atoi
  7563  0DCF  0828               	movf	??_atoi,w
  7564  0DD0  07AA               	addwf	atoi@sign,f
  7565  0DD1  2DDA               	goto	l3643
  7566  0DD2                     l3637:	
  7567  0DD2  082D               	movf	atoi@s,w
  7568  0DD3  0086               	movwf	6
  7569  0DD4  3001               	movlw	1	; select bank2/3
  7570  0DD5  0087               	movwf	7
  7571  0DD6  302B               	movlw	43
  7572  0DD7  0601               	xorwf	1,w
  7573  0DD8  1D03               	btfss	3,2
  7574  0DD9  2DDE               	goto	l3645
  7575  0DDA                     l3643:	
  7576  0DDA  3001               	movlw	1
  7577  0DDB  00A8               	movwf	??_atoi
  7578  0DDC  0828               	movf	??_atoi,w
  7579  0DDD  07AD               	addwf	atoi@s,f
  7580  0DDE                     l3645:	
  7581  0DDE  082D               	movf	atoi@s,w
  7582  0DDF  0086               	movwf	6
  7583  0DE0  3001               	movlw	1	; select bank2/3
  7584  0DE1  0087               	movwf	7
  7585  0DE2  0801               	movf	1,w
  7586  0DE3  3189  2146  318D   	fcall	_isdigit
  7587  0DE6  1C03               	btfss	3,0
  7588  0DE7  2E07               	goto	l3647
  7589  0DE8  0020               	movlb	0	; select bank0
  7590  0DE9  082C               	movf	atoi@a+1,w
  7591  0DEA  00A1               	movwf	___wmul@multiplier+1
  7592  0DEB  082B               	movf	atoi@a,w
  7593  0DEC  00A0               	movwf	___wmul@multiplier
  7594  0DED  300A               	movlw	10
  7595  0DEE  00A2               	movwf	___wmul@multiplicand
  7596  0DEF  3000               	movlw	0
  7597  0DF0  00A3               	movwf	___wmul@multiplicand+1
  7598  0DF1  3189  21EC  318D   	fcall	___wmul
  7599  0DF4  0020               	movlb	0	; select bank0
  7600  0DF5  082D               	movf	atoi@s,w
  7601  0DF6  0086               	movwf	6
  7602  0DF7  3001               	movlw	1	; select bank2/3
  7603  0DF8  0087               	movwf	7
  7604  0DF9  0801               	movf	1,w
  7605  0DFA  0720               	addwf	?___wmul,w
  7606  0DFB  00A8               	movwf	??_atoi
  7607  0DFC  0821               	movf	?___wmul+1,w
  7608  0DFD  1803               	skipnc
  7609  0DFE  0A21               	incf	?___wmul+1,w
  7610  0DFF  00A9               	movwf	??_atoi+1
  7611  0E00  0828               	movf	??_atoi,w
  7612  0E01  3ED0               	addlw	208
  7613  0E02  00AB               	movwf	atoi@a
  7614  0E03  30FF               	movlw	255
  7615  0E04  3D29               	addwfc	??_atoi+1,w
  7616  0E05  00AC               	movwf	atoi@a+1
  7617  0E06  2DDA               	goto	l3643
  7618  0E07                     l3647:	
  7619  0E07  0020               	movlb	0	; select bank0
  7620  0E08  082A               	movf	atoi@sign,w
  7621  0E09  1903               	btfsc	3,2
  7622  0E0A  2E17               	goto	l3653
  7623  0E0B  092B               	comf	atoi@a,w
  7624  0E0C  00A8               	movwf	??_atoi
  7625  0E0D  092C               	comf	atoi@a+1,w
  7626  0E0E  00A9               	movwf	??_atoi+1
  7627  0E0F  0AA8               	incf	??_atoi,f
  7628  0E10  1903               	skipnz
  7629  0E11  0AA9               	incf	??_atoi+1,f
  7630  0E12  0828               	movf	??_atoi,w
  7631  0E13  00A6               	movwf	?_atoi
  7632  0E14  0829               	movf	??_atoi+1,w
  7633  0E15  00A7               	movwf	?_atoi+1
  7634  0E16  0008               	return
  7635  0E17                     l3653:	
  7636  0E17  082C               	movf	atoi@a+1,w
  7637  0E18  00A7               	movwf	?_atoi+1
  7638  0E19  082B               	movf	atoi@a,w
  7639  0E1A  00A6               	movwf	?_atoi
  7640  0E1B  0008               	return
  7641  0E1C                     __end_of_atoi:	
  7642                           
  7643                           	psect	text29
  7644  0946                     __ptext29:	
  7645 ;; *************** function _isdigit *****************
  7646 ;; Defined at:
  7647 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  7648 ;; Parameters:    Size  Location     Type
  7649 ;;  c               1    wreg     unsigned char 
  7650 ;; Auto vars:     Size  Location     Type
  7651 ;;  c               1    1[BANK0 ] unsigned char 
  7652 ;; Return value:  Size  Location     Type
  7653 ;;		None               void
  7654 ;; Registers used:
  7655 ;;		wreg, status,2, status,0
  7656 ;; Tracked objects:
  7657 ;;		On entry : 0/0
  7658 ;;		On exit  : 0/0
  7659 ;;		Unchanged: 0/0
  7660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7662 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7665 ;;Total ram usage:        2 bytes
  7666 ;; Hardware stack levels used:    1
  7667 ;; Hardware stack levels required when called:    5
  7668 ;; This function calls:
  7669 ;;		Nothing
  7670 ;; This function is called by:
  7671 ;;		_printf
  7672 ;;		_atoi
  7673 ;; This function uses a non-reentrant model
  7674 ;;
  7675                           
  7676                           
  7677                           ;psect for function _isdigit
  7678  0946                     _isdigit:	
  7679                           
  7680                           ;incstack = 0
  7681                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7682                           ;isdigit@c stored from wreg
  7683  0946  0020               	movlb	0	; select bank0
  7684  0947  00A1               	movwf	isdigit@c
  7685  0948  01A0               	clrf	_isdigit$1239
  7686  0949  303A               	movlw	58
  7687  094A  0221               	subwf	isdigit@c,w
  7688  094B  1803               	skipnc
  7689  094C  2953               	goto	l2721
  7690  094D  3030               	movlw	48
  7691  094E  0221               	subwf	isdigit@c,w
  7692  094F  1C03               	skipc
  7693  0950  2953               	goto	l2721
  7694  0951  01A0               	clrf	_isdigit$1239
  7695  0952  0AA0               	incf	_isdigit$1239,f
  7696  0953                     l2721:	
  7697  0953  0C20               	rrf	_isdigit$1239,w
  7698  0954  0008               	return
  7699  0955                     __end_of_isdigit:	
  7700                           
  7701                           	psect	text30
  7702  09EC                     __ptext30:	
  7703 ;; *************** function ___wmul *****************
  7704 ;; Defined at:
  7705 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7708 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7709 ;; Auto vars:     Size  Location     Type
  7710 ;;  product         2    4[BANK0 ] unsigned int 
  7711 ;; Return value:  Size  Location     Type
  7712 ;;                  2    0[BANK0 ] unsigned int 
  7713 ;; Registers used:
  7714 ;;		wreg, status,2, status,0
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7720 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;Total ram usage:        6 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; Hardware stack levels required when called:    5
  7727 ;; This function calls:
  7728 ;;		Nothing
  7729 ;; This function is called by:
  7730 ;;		_printf
  7731 ;;		_atoi
  7732 ;; This function uses a non-reentrant model
  7733 ;;
  7734                           
  7735                           
  7736                           ;psect for function ___wmul
  7737  09EC                     ___wmul:	
  7738                           
  7739                           ;incstack = 0
  7740                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7741  09EC  0020               	movlb	0	; select bank0
  7742  09ED  01A4               	clrf	___wmul@product
  7743  09EE  01A5               	clrf	___wmul@product+1
  7744  09EF                     l2727:	
  7745  09EF  1C20               	btfss	___wmul@multiplier,0
  7746  09F0  29F5               	goto	l898
  7747  09F1  0822               	movf	___wmul@multiplicand,w
  7748  09F2  07A4               	addwf	___wmul@product,f
  7749  09F3  0823               	movf	___wmul@multiplicand+1,w
  7750  09F4  3DA5               	addwfc	___wmul@product+1,f
  7751  09F5                     l898:	
  7752  09F5  3001               	movlw	1
  7753  09F6                     u2135:	
  7754  09F6  35A2               	lslf	___wmul@multiplicand,f
  7755  09F7  0DA3               	rlf	___wmul@multiplicand+1,f
  7756  09F8  0B89               	decfsz	9,f
  7757  09F9  29F6               	goto	u2135
  7758  09FA  3001               	movlw	1
  7759  09FB                     u2145:	
  7760  09FB  36A1               	lsrf	___wmul@multiplier+1,f
  7761  09FC  0CA0               	rrf	___wmul@multiplier,f
  7762  09FD  0B89               	decfsz	9,f
  7763  09FE  29FB               	goto	u2145
  7764  09FF  0820               	movf	___wmul@multiplier,w
  7765  0A00  0421               	iorwf	___wmul@multiplier+1,w
  7766  0A01  1D03               	btfss	3,2
  7767  0A02  29EF               	goto	l2727
  7768  0A03  0825               	movf	___wmul@product+1,w
  7769  0A04  00A1               	movwf	?___wmul+1
  7770  0A05  0824               	movf	___wmul@product,w
  7771  0A06  00A0               	movwf	?___wmul
  7772  0A07  0008               	return
  7773  0A08                     __end_of___wmul:	
  7774                           
  7775                           	psect	text31
  7776  08BF                     __ptext31:	
  7777 ;; *************** function _TMR0_HasOverflowOccured *****************
  7778 ;; Defined at:
  7779 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  7780 ;; Parameters:    Size  Location     Type
  7781 ;;		None
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;		None
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  1    wreg      unsigned char 
  7786 ;; Registers used:
  7787 ;;		wreg, status,2, status,0
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7797 ;;Total ram usage:        0 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; Hardware stack levels required when called:    5
  7800 ;; This function calls:
  7801 ;;		Nothing
  7802 ;; This function is called by:
  7803 ;;		_PROTOCOL_Loop
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           
  7808                           ;psect for function _TMR0_HasOverflowOccured
  7809  08BF                     _TMR0_HasOverflowOccured:	
  7810                           
  7811                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  7812                           
  7813                           ;incstack = 0
  7814                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  7815  08BF  0C0B               	rrf	11,w	;volatile
  7816  08C0  0C89               	rrf	9,f
  7817  08C1  3901               	andlw	1
  7818  08C2  0008               	return
  7819  08C3                     __end_of_TMR0_HasOverflowOccured:	
  7820                           
  7821                           	psect	text32
  7822  0937                     __ptext32:	
  7823 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  7824 ;; Defined at:
  7825 ;;		line 84 in file "protocol.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  device_id_i2    1    wreg     unsigned char 
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;  device_id_i2    1    4[BANK0 ] unsigned char 
  7830 ;; Return value:  Size  Location     Type
  7831 ;;                  1    wreg      void 
  7832 ;; Registers used:
  7833 ;;		wreg, status,2, status,0, pclath, cstack
  7834 ;; Tracked objects:
  7835 ;;		On entry : 0/0
  7836 ;;		On exit  : 0/0
  7837 ;;		Unchanged: 0/0
  7838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7841 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7842 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7843 ;;Total ram usage:        2 bytes
  7844 ;; Hardware stack levels used:    1
  7845 ;; Hardware stack levels required when called:    6
  7846 ;; This function calls:
  7847 ;;		_DATAEE_WriteByte
  7848 ;; This function is called by:
  7849 ;;		_PROTOCOL_Loop
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           
  7854                           ;psect for function _PROTOCOL_Write_Device_Address
  7855  0937                     _PROTOCOL_Write_Device_Address:	
  7856                           
  7857                           ;incstack = 0
  7858                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  7859                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  7860  0937  0020               	movlb	0	; select bank0
  7861  0938  00A4               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  7862                           
  7863                           ;protocol.c: 85: DATAEE_WriteByte(0, device_id_i2c);
  7864  0939  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7865  093A  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  7866  093B  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  7867  093C  00A0               	movwf	DATAEE_WriteByte@bData
  7868  093D  3000               	movlw	0
  7869  093E  318A  22A4         	fcall	_DATAEE_WriteByte
  7870                           
  7871                           ;protocol.c: 86: slave_address = device_id_i2c;
  7872  0940  0020               	movlb	0	; select bank0
  7873  0941  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7874  0942  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  7875  0943  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  7876  0944  00E5               	movwf	_slave_address
  7877  0945  0008               	return
  7878  0946                     __end_of_PROTOCOL_Write_Device_Address:	
  7879                           
  7880                           	psect	text33
  7881  08A9                     __ptext33:	
  7882 ;; *************** function _PROTOCOL_STP *****************
  7883 ;; Defined at:
  7884 ;;		line 98 in file "protocol.c"
  7885 ;; Parameters:    Size  Location     Type
  7886 ;;		None
  7887 ;; Auto vars:     Size  Location     Type
  7888 ;;		None
  7889 ;; Return value:  Size  Location     Type
  7890 ;;                  1    wreg      void 
  7891 ;; Registers used:
  7892 ;;		wreg, status,2, status,0
  7893 ;; Tracked objects:
  7894 ;;		On entry : 0/0
  7895 ;;		On exit  : 0/0
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7902 ;;Total ram usage:        0 bytes
  7903 ;; Hardware stack levels used:    1
  7904 ;; Hardware stack levels required when called:    5
  7905 ;; This function calls:
  7906 ;;		Nothing
  7907 ;; This function is called by:
  7908 ;;		_PROTOCOL_Loop
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           
  7913                           ;psect for function _PROTOCOL_STP
  7914  08A9                     _PROTOCOL_STP:	
  7915                           
  7916                           ;protocol.c: 100: running = 0;
  7917                           
  7918                           ;incstack = 0
  7919                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  7920  08A9  0020               	movlb	0	; select bank0
  7921  08AA  01E1               	clrf	_running
  7922  08AB  0008               	return
  7923  08AC                     __end_of_PROTOCOL_STP:	
  7924                           
  7925                           	psect	text34
  7926  08BB                     __ptext34:	
  7927 ;; *************** function _PROTOCOL_STA *****************
  7928 ;; Defined at:
  7929 ;;		line 93 in file "protocol.c"
  7930 ;; Parameters:    Size  Location     Type
  7931 ;;		None
  7932 ;; Auto vars:     Size  Location     Type
  7933 ;;		None
  7934 ;; Return value:  Size  Location     Type
  7935 ;;                  1    wreg      void 
  7936 ;; Registers used:
  7937 ;;		wreg, status,2, status,0
  7938 ;; Tracked objects:
  7939 ;;		On entry : 0/0
  7940 ;;		On exit  : 0/0
  7941 ;;		Unchanged: 0/0
  7942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;Total ram usage:        0 bytes
  7948 ;; Hardware stack levels used:    1
  7949 ;; Hardware stack levels required when called:    5
  7950 ;; This function calls:
  7951 ;;		Nothing
  7952 ;; This function is called by:
  7953 ;;		_PROTOCOL_Loop
  7954 ;; This function uses a non-reentrant model
  7955 ;;
  7956                           
  7957                           
  7958                           ;psect for function _PROTOCOL_STA
  7959  08BB                     _PROTOCOL_STA:	
  7960                           
  7961                           ;protocol.c: 95: running = 1;
  7962                           
  7963                           ;incstack = 0
  7964                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  7965  08BB  0020               	movlb	0	; select bank0
  7966  08BC  01E1               	clrf	_running
  7967  08BD  0AE1               	incf	_running,f
  7968  08BE  0008               	return
  7969  08BF                     __end_of_PROTOCOL_STA:	
  7970                           
  7971                           	psect	text35
  7972  08E1                     __ptext35:	
  7973 ;; *************** function _PROTOCOL_SET *****************
  7974 ;; Defined at:
  7975 ;;		line 111 in file "protocol.c"
  7976 ;; Parameters:    Size  Location     Type
  7977 ;;  value_          1    wreg     unsigned char 
  7978 ;; Auto vars:     Size  Location     Type
  7979 ;;  value_          1    1[BANK0 ] unsigned char 
  7980 ;; Return value:  Size  Location     Type
  7981 ;;                  1    wreg      void 
  7982 ;; Registers used:
  7983 ;;		wreg, status,2, status,0
  7984 ;; Tracked objects:
  7985 ;;		On entry : 0/0
  7986 ;;		On exit  : 0/0
  7987 ;;		Unchanged: 0/0
  7988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7990 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7991 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7992 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7993 ;;Total ram usage:        2 bytes
  7994 ;; Hardware stack levels used:    1
  7995 ;; Hardware stack levels required when called:    5
  7996 ;; This function calls:
  7997 ;;		Nothing
  7998 ;; This function is called by:
  7999 ;;		_PROTOCOL_Loop
  8000 ;; This function uses a non-reentrant model
  8001 ;;
  8002                           
  8003                           
  8004                           ;psect for function _PROTOCOL_SET
  8005  08E1                     _PROTOCOL_SET:	
  8006                           
  8007                           ;incstack = 0
  8008                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  8009                           ;PROTOCOL_SET@value_ stored from wreg
  8010  08E1  0020               	movlb	0	; select bank0
  8011  08E2  00A1               	movwf	PROTOCOL_SET@value_
  8012                           
  8013                           ;protocol.c: 112: value = value_;
  8014  08E3  0821               	movf	PROTOCOL_SET@value_,w
  8015  08E4  00A0               	movwf	??_PROTOCOL_SET
  8016  08E5  0820               	movf	??_PROTOCOL_SET,w
  8017  08E6  00E3               	movwf	_value
  8018  08E7  0008               	return
  8019  08E8                     __end_of_PROTOCOL_SET:	
  8020                           
  8021                           	psect	text36
  8022  0900                     __ptext36:	
  8023 ;; *************** function _PROTOCOL_SAV *****************
  8024 ;; Defined at:
  8025 ;;		line 107 in file "protocol.c"
  8026 ;; Parameters:    Size  Location     Type
  8027 ;;		None
  8028 ;; Auto vars:     Size  Location     Type
  8029 ;;		None
  8030 ;; Return value:  Size  Location     Type
  8031 ;;                  1    wreg      void 
  8032 ;; Registers used:
  8033 ;;		wreg, status,2, status,0, pclath, cstack
  8034 ;; Tracked objects:
  8035 ;;		On entry : 0/0
  8036 ;;		On exit  : 0/0
  8037 ;;		Unchanged: 0/0
  8038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8041 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8043 ;;Total ram usage:        1 bytes
  8044 ;; Hardware stack levels used:    1
  8045 ;; Hardware stack levels required when called:    6
  8046 ;; This function calls:
  8047 ;;		_DATAEE_WriteByte
  8048 ;; This function is called by:
  8049 ;;		_PROTOCOL_Loop
  8050 ;; This function uses a non-reentrant model
  8051 ;;
  8052                           
  8053                           
  8054                           ;psect for function _PROTOCOL_SAV
  8055  0900                     _PROTOCOL_SAV:	
  8056                           
  8057                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
  8058                           
  8059                           ;incstack = 0
  8060                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  8061  0900  0020               	movlb	0	; select bank0
  8062  0901  0863               	movf	_value,w
  8063  0902  00A3               	movwf	??_PROTOCOL_SAV
  8064  0903  0823               	movf	??_PROTOCOL_SAV,w
  8065  0904  00A0               	movwf	DATAEE_WriteByte@bData
  8066  0905  3001               	movlw	1
  8067  0906  318A  22A4         	fcall	_DATAEE_WriteByte
  8068  0908  0008               	return
  8069  0909                     __end_of_PROTOCOL_SAV:	
  8070                           
  8071                           	psect	text37
  8072  0AA4                     __ptext37:	
  8073 ;; *************** function _DATAEE_WriteByte *****************
  8074 ;; Defined at:
  8075 ;;		line 180 in file "mcc_generated_files/memory.c"
  8076 ;; Parameters:    Size  Location     Type
  8077 ;;  bAdd            1    wreg     unsigned char 
  8078 ;;  bData           1    0[BANK0 ] unsigned char 
  8079 ;; Auto vars:     Size  Location     Type
  8080 ;;  bAdd            1    1[BANK0 ] unsigned char 
  8081 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  8082 ;; Return value:  Size  Location     Type
  8083 ;;                  1    wreg      void 
  8084 ;; Registers used:
  8085 ;;		wreg, status,2, status,0
  8086 ;; Tracked objects:
  8087 ;;		On entry : 0/0
  8088 ;;		On exit  : 0/0
  8089 ;;		Unchanged: 0/0
  8090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8091 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8095 ;;Total ram usage:        3 bytes
  8096 ;; Hardware stack levels used:    1
  8097 ;; Hardware stack levels required when called:    5
  8098 ;; This function calls:
  8099 ;;		Nothing
  8100 ;; This function is called by:
  8101 ;;		_PROTOCOL_Write_Device_Address
  8102 ;;		_PROTOCOL_SAV
  8103 ;; This function uses a non-reentrant model
  8104 ;;
  8105                           
  8106                           
  8107                           ;psect for function _DATAEE_WriteByte
  8108  0AA4                     _DATAEE_WriteByte:	
  8109                           
  8110                           ;incstack = 0
  8111                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  8112                           ;DATAEE_WriteByte@bAdd stored from wreg
  8113  0AA4  0020               	movlb	0	; select bank0
  8114  0AA5  00A1               	movwf	DATAEE_WriteByte@bAdd
  8115                           
  8116                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  8117  0AA6  01A2               	clrf	DATAEE_WriteByte@GIEBitValue
  8118                           
  8119                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  8120  0AA7  0821               	movf	DATAEE_WriteByte@bAdd,w
  8121  0AA8  0023               	movlb	3	; select bank3
  8122  0AA9  0091               	movwf	17	;volatile
  8123                           
  8124                           ;memory.c: 185: EEDATL = bData;
  8125  0AAA  0020               	movlb	0	; select bank0
  8126  0AAB  0820               	movf	DATAEE_WriteByte@bData,w
  8127  0AAC  0023               	movlb	3	; select bank3
  8128  0AAD  0093               	movwf	19	;volatile
  8129                           
  8130                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  8131  0AAE  1395               	bcf	21,7	;volsfr
  8132                           
  8133                           ;memory.c: 187: EECON1bits.CFGS = 0;
  8134  0AAF  1315               	bcf	21,6	;volsfr
  8135                           
  8136                           ;memory.c: 188: EECON1bits.WREN = 1;
  8137  0AB0  1515               	bsf	21,2	;volsfr
  8138                           
  8139                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  8140  0AB1  3000               	movlw	0
  8141  0AB2  1B8B               	btfsc	11,7	;volatile
  8142  0AB3  3001               	movlw	1
  8143  0AB4  0020               	movlb	0	; select bank0
  8144  0AB5  00A2               	movwf	DATAEE_WriteByte@GIEBitValue
  8145                           
  8146                           ;memory.c: 191: INTCONbits.GIE = 0;
  8147  0AB6  138B               	bcf	11,7	;volatile
  8148                           
  8149                           ;memory.c: 192: EECON2 = 0x55;
  8150  0AB7  3055               	movlw	85
  8151  0AB8  0023               	movlb	3	; select bank3
  8152  0AB9  0096               	movwf	22	;volsfr
  8153                           
  8154                           ;memory.c: 193: EECON2 = 0xAA;
  8155  0ABA  30AA               	movlw	170
  8156  0ABB  0096               	movwf	22	;volsfr
  8157                           
  8158                           ;memory.c: 194: EECON1bits.WR = 1;
  8159  0ABC  1495               	bsf	21,1	;volsfr
  8160  0ABD                     l326:	
  8161                           ;memory.c: 197: {
  8162                           
  8163                           ;memory.c: 196: while (EECON1bits.WR)
  8164                           
  8165  0ABD  1895               	btfsc	21,1	;volsfr
  8166  0ABE  2ABD               	goto	l326
  8167                           
  8168                           ;memory.c: 198: }
  8169                           ;memory.c: 200: EECON1bits.WREN = 0;
  8170  0ABF  1115               	bcf	21,2	;volsfr
  8171                           
  8172                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  8173  0AC0  0020               	movlb	0	; select bank0
  8174  0AC1  0C22               	rrf	DATAEE_WriteByte@GIEBitValue,w
  8175  0AC2  1C03               	skipc
  8176  0AC3  138B               	bcf	11,7	;volatile
  8177  0AC4  1803               	skipnc
  8178  0AC5  178B               	bsf	11,7	;volatile
  8179  0AC6  0008               	return
  8180  0AC7                     __end_of_DATAEE_WriteByte:	
  8181                           
  8182                           	psect	text38
  8183  0897                     __ptext38:	
  8184 ;; *************** function _PROTOCOL_EXT *****************
  8185 ;; Defined at:
  8186 ;;		line 116 in file "protocol.c"
  8187 ;; Parameters:    Size  Location     Type
  8188 ;;  char_buf        1    wreg     PTR unsigned char 
  8189 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8190 ;; Auto vars:     Size  Location     Type
  8191 ;;  char_buf        1    0[BANK0 ] PTR unsigned char 
  8192 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  8193 ;; Return value:  Size  Location     Type
  8194 ;;                  1    wreg      void 
  8195 ;; Registers used:
  8196 ;;		wreg, status,2, status,0
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : 0/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;Total ram usage:        1 bytes
  8207 ;; Hardware stack levels used:    1
  8208 ;; Hardware stack levels required when called:    5
  8209 ;; This function calls:
  8210 ;;		Nothing
  8211 ;; This function is called by:
  8212 ;;		_PROTOCOL_Loop
  8213 ;; This function uses a non-reentrant model
  8214 ;;
  8215                           
  8216                           
  8217                           ;psect for function _PROTOCOL_EXT
  8218  0897                     _PROTOCOL_EXT:	
  8219                           
  8220                           ;incstack = 0
  8221                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0]
  8222  0897  0008               	return
  8223  0898                     __end_of_PROTOCOL_EXT:	
  8224                           
  8225                           	psect	text39
  8226  0A44                     __ptext39:	
  8227 ;; *************** function _EUSART_Read *****************
  8228 ;; Defined at:
  8229 ;;		line 112 in file "mcc_generated_files/eusart.c"
  8230 ;; Parameters:    Size  Location     Type
  8231 ;;		None
  8232 ;; Auto vars:     Size  Location     Type
  8233 ;;  readValue       1    1[BANK0 ] unsigned char 
  8234 ;; Return value:  Size  Location     Type
  8235 ;;                  1    wreg      unsigned char 
  8236 ;; Registers used:
  8237 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8238 ;; Tracked objects:
  8239 ;;		On entry : 0/0
  8240 ;;		On exit  : 0/0
  8241 ;;		Unchanged: 0/0
  8242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8244 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8245 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8246 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;Total ram usage:        2 bytes
  8248 ;; Hardware stack levels used:    1
  8249 ;; Hardware stack levels required when called:    5
  8250 ;; This function calls:
  8251 ;;		Nothing
  8252 ;; This function is called by:
  8253 ;;		_PROTOCOL_Loop
  8254 ;;		_getch
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           
  8259                           ;psect for function _EUSART_Read
  8260  0A44                     _EUSART_Read:	
  8261                           
  8262                           ;eusart.c: 114: uint8_t readValue = 0;
  8263                           
  8264                           ;incstack = 0
  8265                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  8266  0A44  0020               	movlb	0	; select bank0
  8267  0A45  01A1               	clrf	EUSART_Read@readValue
  8268  0A46                     l3551:	
  8269                           ;eusart.c: 117: {
  8270                           
  8271                           ;eusart.c: 116: while(0 == eusartRxCount)
  8272                           
  8273  0A46  0867               	movf	_eusartRxCount,w	;volatile
  8274  0A47  1903               	btfsc	3,2
  8275  0A48  2A46               	goto	l3551
  8276                           
  8277                           ;eusart.c: 118: }
  8278                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  8279  0A49  0868               	movf	_eusartRxTail,w
  8280  0A4A  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  8281  0A4B  0086               	movwf	6
  8282  0A4C  0187               	clrf	7
  8283  0A4D  0801               	movf	1,w
  8284  0A4E  00A0               	movwf	??_EUSART_Read
  8285  0A4F  0820               	movf	??_EUSART_Read,w
  8286  0A50  00A1               	movwf	EUSART_Read@readValue
  8287  0A51  3001               	movlw	1
  8288  0A52  00A0               	movwf	??_EUSART_Read
  8289  0A53  0820               	movf	??_EUSART_Read,w
  8290  0A54  07E8               	addwf	_eusartRxTail,f	;volatile
  8291                           
  8292                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  8293  0A55  3008               	movlw	8
  8294  0A56  0268               	subwf	_eusartRxTail,w	;volatile
  8295  0A57  1803               	btfsc	3,0
  8296                           
  8297                           ;eusart.c: 122: {
  8298                           ;eusart.c: 123: eusartRxTail = 0;
  8299  0A58  01E8               	clrf	_eusartRxTail	;volatile
  8300                           
  8301                           ;eusart.c: 124: }
  8302                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  8303  0A59  0021               	movlb	1	; select bank1
  8304  0A5A  1291               	bcf	17,5	;volatile
  8305                           
  8306                           ;eusart.c: 126: eusartRxCount--;
  8307  0A5B  3001               	movlw	1
  8308  0A5C  0020               	movlb	0	; select bank0
  8309  0A5D  02E7               	subwf	_eusartRxCount,f	;volatile
  8310                           
  8311                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  8312  0A5E  0021               	movlb	1	; select bank1
  8313  0A5F  1691               	bsf	17,5	;volatile
  8314                           
  8315                           ;eusart.c: 129: return readValue;
  8316  0A60  0020               	movlb	0	; select bank0
  8317  0A61  0821               	movf	EUSART_Read@readValue,w
  8318  0A62  0008               	return
  8319  0A63                     __end_of_EUSART_Read:	
  8320                           
  8321                           	psect	text40
  8322  0CA6                     __ptext40:	
  8323 ;; *************** function _PROTOCOL_Initialize *****************
  8324 ;; Defined at:
  8325 ;;		line 59 in file "protocol.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;  device_id       2    1[BANK0 ] PTR const unsigned char 
  8328 ;;		 -> STR_1(11), 
  8329 ;;  start_handle    1    3[BANK0 ] PTR void 
  8330 ;;		 -> NULL(0), 
  8331 ;;  stop_handler    1    4[BANK0 ] PTR void 
  8332 ;;		 -> NULL(0), 
  8333 ;;  set_handler     1    5[BANK0 ] PTR void 
  8334 ;;		 -> NULL(0), 
  8335 ;;  inv_handler     2    6[BANK0 ] PTR void 
  8336 ;;		 -> inv_handler(1), 
  8337 ;;  scaler          1    8[BANK0 ] unsigned char 
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;		None
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  1    wreg      void 
  8342 ;; Registers used:
  8343 ;;		wreg, status,2, status,0, pclath, cstack
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8349 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;Total ram usage:       10 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    6
  8356 ;; This function calls:
  8357 ;;		_DATAEE_ReadByte
  8358 ;; This function is called by:
  8359 ;;		_main
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           
  8364                           ;psect for function _PROTOCOL_Initialize
  8365  0CA6                     _PROTOCOL_Initialize:	
  8366                           
  8367                           ;protocol.c: 60: device_id_ = device_id;
  8368                           
  8369                           ;incstack = 0
  8370                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8371  0CA6  0020               	movlb	0	; select bank0
  8372  0CA7  0822               	movf	PROTOCOL_Initialize@device_id+1,w
  8373  0CA8  0021               	movlb	1	; select bank1
  8374  0CA9  00DB               	movwf	(_device_id_+1)^(0+128)
  8375  0CAA  0020               	movlb	0	; select bank0
  8376  0CAB  0821               	movf	PROTOCOL_Initialize@device_id,w
  8377  0CAC  0021               	movlb	1	; select bank1
  8378  0CAD  00DA               	movwf	_device_id_^(0+128)
  8379                           
  8380                           ;protocol.c: 61: PROTOCOL_Start_Handler = start_handler;
  8381  0CAE  0020               	movlb	0	; select bank0
  8382  0CAF  0823               	movf	PROTOCOL_Initialize@start_handler,w
  8383  0CB0  00A9               	movwf	??_PROTOCOL_Initialize
  8384  0CB1  3000               	movlw	0
  8385  0CB2  00AA               	movwf	??_PROTOCOL_Initialize+1
  8386  0CB3  0829               	movf	??_PROTOCOL_Initialize,w
  8387  0CB4  0021               	movlb	1	; select bank1
  8388  0CB5  00E0               	movwf	_PROTOCOL_Start_Handler^(0+128)
  8389  0CB6  0020               	movlb	0	; select bank0
  8390  0CB7  082A               	movf	??_PROTOCOL_Initialize+1,w
  8391  0CB8  0021               	movlb	1	; select bank1
  8392  0CB9  00E1               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  8393                           
  8394                           ;protocol.c: 62: PROTOCOL_Stop_Handler = stop_handler;
  8395  0CBA  0020               	movlb	0	; select bank0
  8396  0CBB  0824               	movf	PROTOCOL_Initialize@stop_handler,w
  8397  0CBC  00A9               	movwf	??_PROTOCOL_Initialize
  8398  0CBD  3000               	movlw	0
  8399  0CBE  00AA               	movwf	??_PROTOCOL_Initialize+1
  8400  0CBF  0829               	movf	??_PROTOCOL_Initialize,w
  8401  0CC0  0021               	movlb	1	; select bank1
  8402  0CC1  00DE               	movwf	_PROTOCOL_Stop_Handler^(0+128)
  8403  0CC2  0020               	movlb	0	; select bank0
  8404  0CC3  082A               	movf	??_PROTOCOL_Initialize+1,w
  8405  0CC4  0021               	movlb	1	; select bank1
  8406  0CC5  00DF               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+128)
  8407                           
  8408                           ;protocol.c: 63: PROTOCOL_Set_Handler = set_handler;
  8409  0CC6  0020               	movlb	0	; select bank0
  8410  0CC7  0825               	movf	PROTOCOL_Initialize@set_handler,w
  8411  0CC8  00A9               	movwf	??_PROTOCOL_Initialize
  8412  0CC9  3000               	movlw	0
  8413  0CCA  00AA               	movwf	??_PROTOCOL_Initialize+1
  8414  0CCB  0829               	movf	??_PROTOCOL_Initialize,w
  8415  0CCC  0021               	movlb	1	; select bank1
  8416  0CCD  00DC               	movwf	_PROTOCOL_Set_Handler^(0+128)
  8417  0CCE  0020               	movlb	0	; select bank0
  8418  0CCF  082A               	movf	??_PROTOCOL_Initialize+1,w
  8419  0CD0  0021               	movlb	1	; select bank1
  8420  0CD1  00DD               	movwf	(_PROTOCOL_Set_Handler+1)^(0+128)
  8421                           
  8422                           ;protocol.c: 66: value = DATAEE_ReadByte(1);
  8423  0CD2  3001               	movlw	1
  8424  0CD3  3189  211C  318C   	fcall	_DATAEE_ReadByte
  8425  0CD6  0020               	movlb	0	; select bank0
  8426  0CD7  00A9               	movwf	??_PROTOCOL_Initialize
  8427  0CD8  0829               	movf	??_PROTOCOL_Initialize,w
  8428  0CD9  00E3               	movwf	_value
  8429                           
  8430                           ;protocol.c: 68: slave_address = DATAEE_ReadByte(0);
  8431  0CDA  3000               	movlw	0
  8432  0CDB  3189  211C         	fcall	_DATAEE_ReadByte
  8433  0CDD  0020               	movlb	0	; select bank0
  8434  0CDE  00A9               	movwf	??_PROTOCOL_Initialize
  8435  0CDF  0829               	movf	??_PROTOCOL_Initialize,w
  8436  0CE0  00E5               	movwf	_slave_address
  8437                           
  8438                           ;protocol.c: 71: readbuf.status = COMPLETE;
  8439  0CE1  3003               	movlw	3
  8440  0CE2  00A9               	movwf	??_PROTOCOL_Initialize
  8441  0CE3  0829               	movf	??_PROTOCOL_Initialize,w
  8442  0CE4  0021               	movlb	1	; select bank1
  8443  0CE5  00CF               	movwf	(_readbuf^(0+128)+3)
  8444                           
  8445                           ;protocol.c: 72: PROTOCOL_Inv_Handler = inv_handler;
  8446  0CE6  0020               	movlb	0	; select bank0
  8447  0CE7  0827               	movf	PROTOCOL_Initialize@inv_handler+1,w
  8448  0CE8  0021               	movlb	1	; select bank1
  8449  0CE9  00B3               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+128)
  8450  0CEA  0020               	movlb	0	; select bank0
  8451  0CEB  0826               	movf	PROTOCOL_Initialize@inv_handler,w
  8452  0CEC  0021               	movlb	1	; select bank1
  8453  0CED  00B2               	movwf	_PROTOCOL_Inv_Handler^(0+128)
  8454                           
  8455                           ;protocol.c: 73: tmr_scaler = scaler;
  8456  0CEE  0020               	movlb	0	; select bank0
  8457  0CEF  0828               	movf	PROTOCOL_Initialize@scaler,w
  8458  0CF0  00A9               	movwf	??_PROTOCOL_Initialize
  8459  0CF1  0829               	movf	??_PROTOCOL_Initialize,w
  8460  0CF2  00EE               	movwf	_tmr_scaler
  8461  0CF3  0008               	return
  8462  0CF4                     __end_of_PROTOCOL_Initialize:	
  8463                           
  8464                           	psect	text41
  8465  091C                     __ptext41:	
  8466 ;; *************** function _DATAEE_ReadByte *****************
  8467 ;; Defined at:
  8468 ;;		line 204 in file "mcc_generated_files/memory.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;  bAdd            1    wreg     unsigned char 
  8471 ;; Auto vars:     Size  Location     Type
  8472 ;;  bAdd            1    0[BANK0 ] unsigned char 
  8473 ;; Return value:  Size  Location     Type
  8474 ;;                  1    wreg      unsigned char 
  8475 ;; Registers used:
  8476 ;;		wreg
  8477 ;; Tracked objects:
  8478 ;;		On entry : 0/0
  8479 ;;		On exit  : 0/0
  8480 ;;		Unchanged: 0/0
  8481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8483 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8485 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8486 ;;Total ram usage:        1 bytes
  8487 ;; Hardware stack levels used:    1
  8488 ;; Hardware stack levels required when called:    5
  8489 ;; This function calls:
  8490 ;;		Nothing
  8491 ;; This function is called by:
  8492 ;;		_PROTOCOL_Initialize
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           
  8497                           ;psect for function _DATAEE_ReadByte
  8498  091C                     _DATAEE_ReadByte:	
  8499                           
  8500                           ;incstack = 0
  8501                           ; Regs used in _DATAEE_ReadByte: [wreg]
  8502                           ;DATAEE_ReadByte@bAdd stored from wreg
  8503  091C  0020               	movlb	0	; select bank0
  8504  091D  00A0               	movwf	DATAEE_ReadByte@bAdd
  8505                           
  8506                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  8507  091E  0820               	movf	DATAEE_ReadByte@bAdd,w
  8508  091F  0023               	movlb	3	; select bank3
  8509  0920  0091               	movwf	17	;volatile
  8510                           
  8511                           ;memory.c: 207: EECON1bits.CFGS = 0;
  8512  0921  1315               	bcf	21,6	;volsfr
  8513                           
  8514                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  8515  0922  1395               	bcf	21,7	;volsfr
  8516                           
  8517                           ;memory.c: 209: EECON1bits.RD = 1;
  8518  0923  1415               	bsf	21,0	;volsfr
  8519                           
  8520                           ;memory.c: 210: __nop();
  8521  0924  0000               	nop
  8522                           
  8523                           ;memory.c: 211: __nop();
  8524  0925  0000               	nop
  8525                           
  8526                           ;memory.c: 213: return (EEDATL);
  8527  0926  0023               	movlb	3	; select bank3
  8528  0927  0813               	movf	19,w	;volatile
  8529  0928  0008               	return
  8530  0929                     __end_of_DATAEE_ReadByte:	
  8531                           
  8532                           	psect	text42
  8533  0A25                     __ptext42:	
  8534 ;; *************** function _PIN_MANAGER_Initialize *****************
  8535 ;; Defined at:
  8536 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  8537 ;; Parameters:    Size  Location     Type
  8538 ;;		None
  8539 ;; Auto vars:     Size  Location     Type
  8540 ;;		None
  8541 ;; Return value:  Size  Location     Type
  8542 ;;                  1    wreg      void 
  8543 ;; Registers used:
  8544 ;;		wreg, status,2
  8545 ;; Tracked objects:
  8546 ;;		On entry : 0/0
  8547 ;;		On exit  : 0/0
  8548 ;;		Unchanged: 0/0
  8549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;Total ram usage:        0 bytes
  8555 ;; Hardware stack levels used:    1
  8556 ;; Hardware stack levels required when called:    5
  8557 ;; This function calls:
  8558 ;;		Nothing
  8559 ;; This function is called by:
  8560 ;;		_main
  8561 ;;		_SYSTEM_Initialize
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           
  8566                           ;psect for function _PIN_MANAGER_Initialize
  8567  0A25                     _PIN_MANAGER_Initialize:	
  8568                           
  8569                           ;pin_manager.c: 56: LATA = 0x00;
  8570                           
  8571                           ;incstack = 0
  8572                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8573  0A25  0022               	movlb	2	; select bank2
  8574  0A26  018C               	clrf	12	;volatile
  8575                           
  8576                           ;pin_manager.c: 57: LATB = 0x00;
  8577  0A27  018D               	clrf	13	;volatile
  8578                           
  8579                           ;pin_manager.c: 58: LATC = 0x00;
  8580  0A28  018E               	clrf	14	;volatile
  8581                           
  8582                           ;pin_manager.c: 63: TRISA = 0x3F;
  8583  0A29  303F               	movlw	63
  8584  0A2A  0021               	movlb	1	; select bank1
  8585  0A2B  008C               	movwf	12	;volatile
  8586                           
  8587                           ;pin_manager.c: 64: TRISB = 0xF0;
  8588  0A2C  30F0               	movlw	240
  8589  0A2D  008D               	movwf	13	;volatile
  8590                           
  8591                           ;pin_manager.c: 65: TRISC = 0x7F;
  8592  0A2E  307F               	movlw	127
  8593  0A2F  008E               	movwf	14	;volatile
  8594                           
  8595                           ;pin_manager.c: 70: ANSELC = 0x4F;
  8596  0A30  304F               	movlw	79
  8597  0A31  0023               	movlb	3	; select bank3
  8598  0A32  008E               	movwf	14	;volatile
  8599                           
  8600                           ;pin_manager.c: 71: ANSELB = 0x20;
  8601  0A33  3020               	movlw	32
  8602  0A34  008D               	movwf	13	;volatile
  8603                           
  8604                           ;pin_manager.c: 72: ANSELA = 0x17;
  8605  0A35  3017               	movlw	23
  8606  0A36  008C               	movwf	12	;volatile
  8607                           
  8608                           ;pin_manager.c: 77: WPUB = 0x00;
  8609  0A37  0024               	movlb	4	; select bank4
  8610  0A38  018D               	clrf	13	;volatile
  8611                           
  8612                           ;pin_manager.c: 78: WPUA = 0x2F;
  8613  0A39  302F               	movlw	47
  8614  0A3A  008C               	movwf	12	;volatile
  8615                           
  8616                           ;pin_manager.c: 79: WPUC = 0x37;
  8617  0A3B  3037               	movlw	55
  8618  0A3C  008E               	movwf	14	;volatile
  8619                           
  8620                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  8621  0A3D  0021               	movlb	1	; select bank1
  8622  0A3E  1395               	bcf	21,7	;volatile
  8623                           
  8624                           ;pin_manager.c: 86: APFCON1 = 0x00;
  8625  0A3F  0022               	movlb	2	; select bank2
  8626  0A40  019E               	clrf	30	;volatile
  8627                           
  8628                           ;pin_manager.c: 87: APFCON0 = 0x84;
  8629  0A41  3084               	movlw	132
  8630  0A42  009D               	movwf	29	;volatile
  8631  0A43  0008               	return
  8632  0A44                     __end_of_PIN_MANAGER_Initialize:	
  8633                           
  8634                           	psect	text43
  8635  08DA                     __ptext43:	
  8636 ;; *************** function _OSCILLATOR_Initialize *****************
  8637 ;; Defined at:
  8638 ;;		line 81 in file "mcc_generated_files/mcc.c"
  8639 ;; Parameters:    Size  Location     Type
  8640 ;;		None
  8641 ;; Auto vars:     Size  Location     Type
  8642 ;;		None
  8643 ;; Return value:  Size  Location     Type
  8644 ;;                  1    wreg      void 
  8645 ;; Registers used:
  8646 ;;		wreg, status,2
  8647 ;; Tracked objects:
  8648 ;;		On entry : 0/0
  8649 ;;		On exit  : 0/0
  8650 ;;		Unchanged: 0/0
  8651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;Total ram usage:        0 bytes
  8657 ;; Hardware stack levels used:    1
  8658 ;; Hardware stack levels required when called:    5
  8659 ;; This function calls:
  8660 ;;		Nothing
  8661 ;; This function is called by:
  8662 ;;		_main
  8663 ;;		_SYSTEM_Initialize
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           
  8668                           ;psect for function _OSCILLATOR_Initialize
  8669  08DA                     _OSCILLATOR_Initialize:	
  8670                           
  8671                           ;mcc.c: 84: OSCCON = 0x70;
  8672                           
  8673                           ;incstack = 0
  8674                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8675  08DA  3070               	movlw	112
  8676  08DB  0021               	movlb	1	; select bank1
  8677  08DC  0099               	movwf	25	;volatile
  8678                           
  8679                           ;mcc.c: 86: OSCTUNE = 0x00;
  8680  08DD  0198               	clrf	24	;volatile
  8681  08DE                     l152:	
  8682                           ;mcc.c: 89: {
  8683                           
  8684                           ;mcc.c: 88: while(PLLR == 0)
  8685                           
  8686  08DE  1B1A               	btfsc	26,6	;volatile
  8687  08DF  0008               	return
  8688  08E0  28DE               	goto	l152
  8689  08E1                     __end_of_OSCILLATOR_Initialize:	
  8690                           
  8691                           	psect	text44
  8692  0A83                     __ptext44:	
  8693 ;; *************** function _I2C1_Initialize *****************
  8694 ;; Defined at:
  8695 ;;		line 30 in file "mcc_generated_files/i2c1.c"
  8696 ;; Parameters:    Size  Location     Type
  8697 ;;		None
  8698 ;; Auto vars:     Size  Location     Type
  8699 ;;		None
  8700 ;; Return value:  Size  Location     Type
  8701 ;;                  1    wreg      void 
  8702 ;; Registers used:
  8703 ;;		wreg, status,2, status,0, pclath, cstack
  8704 ;; Tracked objects:
  8705 ;;		On entry : 0/0
  8706 ;;		On exit  : 0/0
  8707 ;;		Unchanged: 0/0
  8708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;Total ram usage:        2 bytes
  8714 ;; Hardware stack levels used:    1
  8715 ;; Hardware stack levels required when called:    6
  8716 ;; This function calls:
  8717 ;;		_PROTOCOL_Read_Device_Address
  8718 ;; This function is called by:
  8719 ;;		_main
  8720 ;;		_SYSTEM_Initialize
  8721 ;; This function uses a non-reentrant model
  8722 ;;
  8723                           
  8724                           
  8725                           ;psect for function _I2C1_Initialize
  8726  0A83                     _I2C1_Initialize:	
  8727                           
  8728                           ;i2c1.c: 34: _delay((unsigned long)((2000)*(32000000/4000.0)));
  8729                           
  8730                           ;incstack = 0
  8731                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8732  0A83  3052               	movlw	82
  8733  0A84  0020               	movlb	0	; select bank0
  8734  0A85  00A1               	movwf	??_I2C1_Initialize+1
  8735  0A86  302B               	movlw	43
  8736  0A87  00A0               	movwf	??_I2C1_Initialize
  8737  0A88  3000               	movlw	0
  8738  0A89                     u4067:	
  8739  0A89  0B89               	decfsz	9,f
  8740  0A8A  2A89               	goto	u4067
  8741  0A8B  0BA0               	decfsz	??_I2C1_Initialize,f
  8742  0A8C  2A89               	goto	u4067
  8743  0A8D  0BA1               	decfsz	??_I2C1_Initialize+1,f
  8744  0A8E  2A89               	goto	u4067
  8745  0A8F  0000               	nop
  8746                           
  8747                           ;i2c1.c: 38: SSP1STAT = 0x80;
  8748  0A90  3080               	movlw	128
  8749  0A91  0024               	movlb	4	; select bank4
  8750  0A92  0094               	movwf	20	;volatile
  8751                           
  8752                           ;i2c1.c: 40: SSP1CON1 = 0x26;
  8753  0A93  3026               	movlw	38
  8754  0A94  0095               	movwf	21	;volatile
  8755                           
  8756                           ;i2c1.c: 42: SSP1CON2 = 0x81;
  8757  0A95  3081               	movlw	129
  8758  0A96  0096               	movwf	22	;volatile
  8759                           
  8760                           ;i2c1.c: 44: SSP1CON3 = 0x00;
  8761  0A97  0197               	clrf	23	;volatile
  8762                           
  8763                           ;i2c1.c: 46: SSP1MSK = (0x7F << 1);
  8764  0A98  30FE               	movlw	254
  8765  0A99  0093               	movwf	19	;volatile
  8766                           
  8767                           ;i2c1.c: 48: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  8768  0A9A  3188  20A6         	fcall	_PROTOCOL_Read_Device_Address
  8769  0A9C  0709               	addwf	9,w
  8770  0A9D  0024               	movlb	4	; select bank4
  8771  0A9E  0092               	movwf	18	;volatile
  8772                           
  8773                           ;i2c1.c: 51: PIR1bits.SSP1IF = 0;
  8774  0A9F  0020               	movlb	0	; select bank0
  8775  0AA0  1191               	bcf	17,3	;volatile
  8776                           
  8777                           ;i2c1.c: 53: PIE1bits.SSP1IE = 1;
  8778  0AA1  0021               	movlb	1	; select bank1
  8779  0AA2  1591               	bsf	17,3	;volatile
  8780  0AA3  0008               	return
  8781  0AA4                     __end_of_I2C1_Initialize:	
  8782                           
  8783                           	psect	text45
  8784  08A6                     __ptext45:	
  8785 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  8786 ;; Defined at:
  8787 ;;		line 89 in file "protocol.c"
  8788 ;; Parameters:    Size  Location     Type
  8789 ;;		None
  8790 ;; Auto vars:     Size  Location     Type
  8791 ;;		None
  8792 ;; Return value:  Size  Location     Type
  8793 ;;                  1    wreg      unsigned char 
  8794 ;; Registers used:
  8795 ;;		wreg
  8796 ;; Tracked objects:
  8797 ;;		On entry : 0/0
  8798 ;;		On exit  : 0/0
  8799 ;;		Unchanged: 0/0
  8800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;Total ram usage:        0 bytes
  8806 ;; Hardware stack levels used:    1
  8807 ;; Hardware stack levels required when called:    5
  8808 ;; This function calls:
  8809 ;;		Nothing
  8810 ;; This function is called by:
  8811 ;;		_I2C1_Initialize
  8812 ;;		_PROTOCOL_Loop
  8813 ;; This function uses a non-reentrant model
  8814 ;;
  8815                           
  8816                           
  8817                           ;psect for function _PROTOCOL_Read_Device_Address
  8818  08A6                     _PROTOCOL_Read_Device_Address:	
  8819                           
  8820                           ;protocol.c: 90: return slave_address;
  8821                           
  8822                           ;incstack = 0
  8823                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  8824  08A6  0020               	movlb	0	; select bank0
  8825  08A7  0865               	movf	_slave_address,w
  8826  08A8  0008               	return
  8827  08A9                     __end_of_PROTOCOL_Read_Device_Address:	
  8828                           
  8829                           	psect	text46
  8830  09D1                     __ptext46:	
  8831 ;; *************** function _EUSART_Initialize *****************
  8832 ;; Defined at:
  8833 ;;		line 75 in file "mcc_generated_files/eusart.c"
  8834 ;; Parameters:    Size  Location     Type
  8835 ;;		None
  8836 ;; Auto vars:     Size  Location     Type
  8837 ;;		None
  8838 ;; Return value:  Size  Location     Type
  8839 ;;                  1    wreg      void 
  8840 ;; Registers used:
  8841 ;;		wreg, status,2
  8842 ;; Tracked objects:
  8843 ;;		On entry : 0/0
  8844 ;;		On exit  : 0/0
  8845 ;;		Unchanged: 0/0
  8846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;Total ram usage:        1 bytes
  8852 ;; Hardware stack levels used:    1
  8853 ;; Hardware stack levels required when called:    5
  8854 ;; This function calls:
  8855 ;;		Nothing
  8856 ;; This function is called by:
  8857 ;;		_main
  8858 ;;		_SYSTEM_Initialize
  8859 ;; This function uses a non-reentrant model
  8860 ;;
  8861                           
  8862                           
  8863                           ;psect for function _EUSART_Initialize
  8864  09D1                     _EUSART_Initialize:	
  8865                           
  8866                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  8867                           
  8868                           ;incstack = 0
  8869                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8870  09D1  0021               	movlb	1	; select bank1
  8871  09D2  1291               	bcf	17,5	;volatile
  8872                           
  8873                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  8874  09D3  1211               	bcf	17,4	;volatile
  8875                           
  8876                           ;eusart.c: 84: BAUDCON = 0x08;
  8877  09D4  3008               	movlw	8
  8878  09D5  0023               	movlb	3	; select bank3
  8879  09D6  009F               	movwf	31	;volatile
  8880                           
  8881                           ;eusart.c: 87: RCSTA = 0x90;
  8882  09D7  3090               	movlw	144
  8883  09D8  009D               	movwf	29	;volatile
  8884                           
  8885                           ;eusart.c: 90: TXSTA = 0x24;
  8886  09D9  3024               	movlw	36
  8887  09DA  009E               	movwf	30	;volatile
  8888                           
  8889                           ;eusart.c: 93: SPBRGL = 0x40;
  8890  09DB  3040               	movlw	64
  8891  09DC  009B               	movwf	27	;volatile
  8892                           
  8893                           ;eusart.c: 96: SPBRGH = 0x03;
  8894  09DD  3003               	movlw	3
  8895  09DE  009C               	movwf	28	;volatile
  8896                           
  8897                           ;eusart.c: 100: eusartTxHead = 0;
  8898  09DF  01FC               	clrf	_eusartTxHead	;volatile
  8899                           
  8900                           ;eusart.c: 101: eusartTxTail = 0;
  8901  09E0  01FB               	clrf	_eusartTxTail	;volatile
  8902                           
  8903                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  8904  09E1  3008               	movlw	8
  8905  09E2  0020               	movlb	0	; select bank0
  8906  09E3  00A0               	movwf	??_EUSART_Initialize
  8907  09E4  0820               	movf	??_EUSART_Initialize,w
  8908  09E5  00FA               	movwf	_eusartTxBufferRemaining	;volatile
  8909                           
  8910                           ;eusart.c: 104: eusartRxHead = 0;
  8911  09E6  01E9               	clrf	_eusartRxHead	;volatile
  8912                           
  8913                           ;eusart.c: 105: eusartRxTail = 0;
  8914  09E7  01E8               	clrf	_eusartRxTail	;volatile
  8915                           
  8916                           ;eusart.c: 106: eusartRxCount = 0;
  8917  09E8  01E7               	clrf	_eusartRxCount	;volatile
  8918                           
  8919                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  8920  09E9  0021               	movlb	1	; select bank1
  8921  09EA  1691               	bsf	17,5	;volatile
  8922  09EB  0008               	return
  8923  09EC                     __end_of_EUSART_Initialize:	
  8924                           
  8925                           	psect	text47
  8926  08EF                     __ptext47:	
  8927 ;; *************** function _ADC_Initialize *****************
  8928 ;; Defined at:
  8929 ;;		line 64 in file "mcc_generated_files/adc.c"
  8930 ;; Parameters:    Size  Location     Type
  8931 ;;		None
  8932 ;; Auto vars:     Size  Location     Type
  8933 ;;		None
  8934 ;; Return value:  Size  Location     Type
  8935 ;;                  1    wreg      void 
  8936 ;; Registers used:
  8937 ;;		wreg, status,2
  8938 ;; Tracked objects:
  8939 ;;		On entry : 0/0
  8940 ;;		On exit  : 0/0
  8941 ;;		Unchanged: 0/0
  8942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8947 ;;Total ram usage:        0 bytes
  8948 ;; Hardware stack levels used:    1
  8949 ;; Hardware stack levels required when called:    5
  8950 ;; This function calls:
  8951 ;;		Nothing
  8952 ;; This function is called by:
  8953 ;;		_main
  8954 ;;		_SYSTEM_Initialize
  8955 ;; This function uses a non-reentrant model
  8956 ;;
  8957                           
  8958                           
  8959                           ;psect for function _ADC_Initialize
  8960  08EF                     _ADC_Initialize:	
  8961                           
  8962                           ;adc.c: 69: ADCON0 = 0x01;
  8963                           
  8964                           ;incstack = 0
  8965                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  8966  08EF  3001               	movlw	1
  8967  08F0  0021               	movlb	1	; select bank1
  8968  08F1  009D               	movwf	29	;volatile
  8969                           
  8970                           ;adc.c: 72: ADCON1 = 0xF0;
  8971  08F2  30F0               	movlw	240
  8972  08F3  009E               	movwf	30	;volatile
  8973                           
  8974                           ;adc.c: 75: ADRESL = 0x00;
  8975  08F4  019B               	clrf	27	;volatile
  8976                           
  8977                           ;adc.c: 78: ADRESH = 0x00;
  8978  08F5  019C               	clrf	28	;volatile
  8979  08F6  0008               	return
  8980  08F7                     __end_of_ADC_Initialize:	
  8981                           
  8982                           	psect	intentry
  8983  0004                     __pintentry:	
  8984 ;; *************** function _INTERRUPT_InterruptManager *****************
  8985 ;; Defined at:
  8986 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8987 ;; Parameters:    Size  Location     Type
  8988 ;;		None
  8989 ;; Auto vars:     Size  Location     Type
  8990 ;;		None
  8991 ;; Return value:  Size  Location     Type
  8992 ;;                  1    wreg      void 
  8993 ;; Registers used:
  8994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8995 ;; Tracked objects:
  8996 ;;		On entry : 0/0
  8997 ;;		On exit  : 0/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;Total ram usage:        1 bytes
  9005 ;; Hardware stack levels used:    1
  9006 ;; Hardware stack levels required when called:    4
  9007 ;; This function calls:
  9008 ;;		_EUSART_Receive_ISR
  9009 ;;		_EUSART_Transmit_ISR
  9010 ;;		_I2C1_ISR
  9011 ;; This function is called by:
  9012 ;;		Interrupt level 1
  9013 ;; This function uses a non-reentrant model
  9014 ;;
  9015                           
  9016  0004                     _INTERRUPT_InterruptManager:	
  9017                           
  9018                           ;incstack = 0
  9019  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  9020                           
  9021                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9022  0005  3180               	pagesel	$
  9023  0006  0020               	movlb	0	; select bank0
  9024  0007  087F               	movf	127,w
  9025  0008  00F9               	movwf	??_INTERRUPT_InterruptManager
  9026                           
  9027                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  9028  0009  1F0B               	btfss	11,6	;volatile
  9029  000A  2815               	goto	i1l173
  9030  000B  0021               	movlb	1	; select bank1
  9031  000C  1E11               	btfss	17,4	;volatile
  9032  000D  2815               	goto	i1l173
  9033  000E  0020               	movlb	0	; select bank0
  9034  000F  1E11               	btfss	17,4	;volatile
  9035  0010  2815               	goto	i1l173
  9036                           
  9037                           ;interrupt_manager.c: 55: {
  9038                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  9039  0011  3189  21B6  3180   	fcall	_EUSART_Transmit_ISR
  9040                           
  9041                           ;interrupt_manager.c: 57: }
  9042  0014  282B               	goto	i1l179
  9043  0015                     i1l173:	
  9044                           
  9045                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  9046  0015  1F0B               	btfss	11,6	;volatile
  9047  0016  2821               	goto	i1l175
  9048  0017  0021               	movlb	1	; select bank1
  9049  0018  1E91               	btfss	17,5	;volatile
  9050  0019  2821               	goto	i1l175
  9051  001A  0020               	movlb	0	; select bank0
  9052  001B  1E91               	btfss	17,5	;volatile
  9053  001C  2821               	goto	i1l175
  9054                           
  9055                           ;interrupt_manager.c: 59: {
  9056                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  9057  001D  3189  219B  3180   	fcall	_EUSART_Receive_ISR
  9058                           
  9059                           ;interrupt_manager.c: 61: }
  9060  0020  282B               	goto	i1l179
  9061  0021                     i1l175:	
  9062                           
  9063                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  9064  0021  1F0B               	btfss	11,6	;volatile
  9065  0022  282B               	goto	i1l179
  9066  0023  0021               	movlb	1	; select bank1
  9067  0024  1D91               	btfss	17,3	;volatile
  9068  0025  282B               	goto	i1l179
  9069  0026  0020               	movlb	0	; select bank0
  9070  0027  1D91               	btfss	17,3	;volatile
  9071  0028  282B               	goto	i1l179
  9072                           
  9073                           ;interrupt_manager.c: 63: {
  9074                           ;interrupt_manager.c: 64: I2C1_ISR();
  9075  0029  318A  22EB         	fcall	_I2C1_ISR
  9076  002B                     i1l179:	
  9077                           ;interrupt_manager.c: 66: else
  9078                           ;interrupt_manager.c: 67: {
  9079                           
  9080                           ;interrupt_manager.c: 65: }
  9081                           
  9082  002B  0879               	movf	??_INTERRUPT_InterruptManager,w
  9083  002C  0020               	movlb	0	; select bank0
  9084  002D  00FF               	movwf	127
  9085  002E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  9086  002F  0009               	retfie
  9087  0030                     __end_of_INTERRUPT_InterruptManager:	
  9088                           
  9089                           	psect	text49
  9090  0AEB                     __ptext49:	
  9091 ;; *************** function _I2C1_ISR *****************
  9092 ;; Defined at:
  9093 ;;		line 57 in file "mcc_generated_files/i2c1.c"
  9094 ;; Parameters:    Size  Location     Type
  9095 ;;		None
  9096 ;; Auto vars:     Size  Location     Type
  9097 ;;  i2c_data        1    8[COMMON] unsigned char 
  9098 ;; Return value:  Size  Location     Type
  9099 ;;                  1    wreg      void 
  9100 ;; Registers used:
  9101 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9102 ;; Tracked objects:
  9103 ;;		On entry : 0/0
  9104 ;;		On exit  : 0/0
  9105 ;;		Unchanged: 0/0
  9106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9108 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9109 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9110 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9111 ;;Total ram usage:        2 bytes
  9112 ;; Hardware stack levels used:    1
  9113 ;; Hardware stack levels required when called:    3
  9114 ;; This function calls:
  9115 ;;		_I2C1_StatusCallback
  9116 ;; This function is called by:
  9117 ;;		_INTERRUPT_InterruptManager
  9118 ;; This function uses a non-reentrant model
  9119 ;;
  9120                           
  9121                           
  9122                           ;psect for function _I2C1_ISR
  9123  0AEB                     _I2C1_ISR:	
  9124                           
  9125                           ;i2c1.c: 59: uint8_t i2c_data = 0x55;
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9129  0AEB  3055               	movlw	85
  9130  0AEC  00F7               	movwf	??_I2C1_ISR
  9131  0AED  0877               	movf	??_I2C1_ISR,w
  9132  0AEE  00F8               	movwf	I2C1_ISR@i2c_data
  9133                           
  9134                           ;i2c1.c: 64: PIR1bits.SSP1IF = 0;
  9135  0AEF  0020               	movlb	0	; select bank0
  9136  0AF0  1191               	bcf	17,3	;volatile
  9137                           
  9138                           ;i2c1.c: 65: i2c_data = SSP1BUF;
  9139  0AF1  0024               	movlb	4	; select bank4
  9140  0AF2  0811               	movf	17,w	;volatile
  9141  0AF3  00F7               	movwf	??_I2C1_ISR
  9142  0AF4  0877               	movf	??_I2C1_ISR,w
  9143  0AF5  00F8               	movwf	I2C1_ISR@i2c_data
  9144                           
  9145                           ;i2c1.c: 66: if(1 == SSP1STATbits.R_nW)
  9146  0AF6  1D14               	btfss	20,2	;volatile
  9147  0AF7  2AFF               	goto	i1l64
  9148                           
  9149                           ;i2c1.c: 67: {
  9150                           ;i2c1.c: 68: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
  9151  0AF8  1A94               	btfsc	20,5	;volatile
  9152  0AF9  1F16               	btfss	22,6	;volatile
  9153  0AFA  2AFD               	goto	i1l3681
  9154                           
  9155                           ;i2c1.c: 69: {
  9156                           ;i2c1.c: 71: I2C1_StatusCallback(I2C1_SLAVE_READ_COMPLETED);
  9157  0AFB  3003               	movlw	3
  9158  0AFC  2B0D               	goto	L4
  9159  0AFD                     i1l3681:	
  9160                           ;i2c1.c: 72: }
  9161                           
  9162                           
  9163                           ;i2c1.c: 73: else
  9164                           ;i2c1.c: 74: {
  9165                           ;i2c1.c: 76: I2C1_StatusCallback(I2C1_SLAVE_READ_REQUEST);
  9166  0AFD  3001               	movlw	1
  9167  0AFE  2B0D               	goto	L4
  9168  0AFF                     i1l64:	
  9169                           ;i2c1.c: 77: }
  9170                           ;i2c1.c: 78: }
  9171                           
  9172                           
  9173                           ;i2c1.c: 79: else if(0 == SSP1STATbits.D_nA)
  9174  0AFF  1A94               	btfsc	20,5	;volatile
  9175  0B00  2B08               	goto	i1l3689
  9176                           
  9177                           ;i2c1.c: 80: {
  9178                           ;i2c1.c: 83: if(0x00 == i2c_data)
  9179  0B01  0878               	movf	I2C1_ISR@i2c_data,w
  9180  0B02  1D03               	btfss	3,2
  9181  0B03  2B06               	goto	i1l3687
  9182                           
  9183                           ;i2c1.c: 84: {
  9184                           ;i2c1.c: 86: I2C1_StatusCallback(I2C1_SLAVE_GENERAL_CALL_REQUEST);
  9185  0B04  3004               	movlw	4
  9186  0B05  2B0D               	goto	L4
  9187  0B06                     i1l3687:	
  9188                           ;i2c1.c: 87: }
  9189                           
  9190                           
  9191                           ;i2c1.c: 88: else
  9192                           ;i2c1.c: 89: {
  9193                           ;i2c1.c: 91: I2C1_StatusCallback(I2C1_SLAVE_WRITE_REQUEST);
  9194  0B06  3000               	movlw	0
  9195  0B07  2B0D               	goto	L4
  9196  0B08                     i1l3689:	
  9197                           ;i2c1.c: 92: }
  9198                           ;i2c1.c: 93: }
  9199                           
  9200                           
  9201                           ;i2c1.c: 94: else
  9202                           ;i2c1.c: 95: {
  9203                           ;i2c1.c: 96: I2C_slaveWriteData = i2c_data;
  9204  0B08  0878               	movf	I2C1_ISR@i2c_data,w
  9205  0B09  00F7               	movwf	??_I2C1_ISR
  9206  0B0A  0877               	movf	??_I2C1_ISR,w
  9207  0B0B  00FD               	movwf	_I2C_slaveWriteData	;volatile
  9208                           
  9209                           ;i2c1.c: 99: I2C1_StatusCallback(I2C1_SLAVE_WRITE_COMPLETED);
  9210  0B0C  3002               	movlw	2
  9211  0B0D                     L4:	
  9212  0B0D  3186  26FA         	fcall	_I2C1_StatusCallback
  9213                           
  9214                           ;i2c1.c: 100: }
  9215                           ;i2c1.c: 102: SSP1CON1bits.CKP = 1;
  9216  0B0F  0024               	movlb	4	; select bank4
  9217  0B10  1615               	bsf	21,4	;volatile
  9218  0B11  0008               	return
  9219  0B12                     __end_of_I2C1_ISR:	
  9220                           
  9221                           	psect	text50
  9222  06FA                     __ptext50:	
  9223 ;; *************** function _I2C1_StatusCallback *****************
  9224 ;; Defined at:
  9225 ;;		line 106 in file "mcc_generated_files/i2c1.c"
  9226 ;; Parameters:    Size  Location     Type
  9227 ;;  i2c_bus_stat    1    wreg     enum E3101
  9228 ;; Auto vars:     Size  Location     Type
  9229 ;;  i2c_bus_stat    1    5[COMMON] enum E3101
  9230 ;;  pdata           1    6[COMMON] PTR unsigned char 
  9231 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  9232 ;;		 -> readbuf.type(1), readbuf(5), 
  9233 ;; Return value:  Size  Location     Type
  9234 ;;                  1    wreg      void 
  9235 ;; Registers used:
  9236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9237 ;; Tracked objects:
  9238 ;;		On entry : 0/0
  9239 ;;		On exit  : 0/0
  9240 ;;		Unchanged: 0/0
  9241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9243 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9244 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9245 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9246 ;;Total ram usage:        3 bytes
  9247 ;; Hardware stack levels used:    1
  9248 ;; Hardware stack levels required when called:    2
  9249 ;; This function calls:
  9250 ;;		_PROTOCOL_Backplane_Slave_Enabled
  9251 ;;		_PROTOCOL_I2C_GET
  9252 ;;		_PROTOCOL_I2C_SEN
  9253 ;;		_PROTOCOL_I2C_WHO
  9254 ;;		_PROTOCOL_INV
  9255 ;;		_PROTOCOL_RST
  9256 ;;		_PROTOCOL_Read_Lock
  9257 ;;		i1_PROTOCOL_EXT
  9258 ;;		i1_PROTOCOL_SAV
  9259 ;;		i1_PROTOCOL_SET
  9260 ;;		i1_PROTOCOL_STA
  9261 ;;		i1_PROTOCOL_STP
  9262 ;; This function is called by:
  9263 ;;		_I2C1_ISR
  9264 ;; This function uses a non-reentrant model
  9265 ;;
  9266                           
  9267                           
  9268                           ;psect for function _I2C1_StatusCallback
  9269  06FA                     _I2C1_StatusCallback:	
  9270                           
  9271                           ;incstack = 0
  9272                           ; Regs used in _I2C1_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9273                           ;I2C1_StatusCallback@i2c_bus_state stored from wreg
  9274  06FA  00F5               	movwf	I2C1_StatusCallback@i2c_bus_state
  9275                           
  9276                           ;i2c1.c: 109: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  9277                           ;i2c1.c: 110: static uint8_t next = 0x00;
  9278                           ;i2c1.c: 111: static uint8_t ext_len = 0;
  9279                           ;i2c1.c: 112: static uint8_t ext_cnt = 0;
  9280                           ;i2c1.c: 113: static char ext_buf[48];
  9281                           ;i2c1.c: 114: uint8_t *pdata;
  9282                           ;i2c1.c: 115: switch (i2c_bus_state)
  9283  06FB  2FB3               	goto	i1l3527
  9284  06FC                     i1l86:	
  9285                           ;i2c1.c: 116: {
  9286                           ;i2c1.c: 117: case I2C1_SLAVE_WRITE_REQUEST:
  9287                           
  9288                           
  9289                           ;i2c1.c: 118: slaveWriteType = SLAVE_DATA_ADDRESS;
  9290  06FC  0020               	movlb	0	; select bank0
  9291  06FD  01ED               	clrf	I2C1_StatusCallback@slaveWriteType
  9292  06FE  0AED               	incf	I2C1_StatusCallback@slaveWriteType,f
  9293                           
  9294                           ;i2c1.c: 119: break;
  9295  06FF  0008               	return
  9296  0700                     i1l3453:	
  9297                           ;i2c1.c: 121: case I2C1_SLAVE_GENERAL_CALL_REQUEST:
  9298                           
  9299                           
  9300                           ;i2c1.c: 123: slaveWriteType = SLAVE_GENERAL_CALL;
  9301  0700  3002               	movlw	2
  9302  0701  00F4               	movwf	??_I2C1_StatusCallback
  9303  0702  0874               	movf	??_I2C1_StatusCallback,w
  9304  0703  0020               	movlb	0	; select bank0
  9305  0704  00ED               	movwf	I2C1_StatusCallback@slaveWriteType
  9306                           
  9307                           ;i2c1.c: 124: break;
  9308  0705  0008               	return
  9309  0706                     i1l3455:	
  9310                           ;i2c1.c: 132: case 0x01:
  9311                           
  9312                           ;i2c1.c: 131: switch(next) {
  9313                           
  9314                           ;i2c1.c: 129: {
  9315                           ;i2c1.c: 130: case SLAVE_DATA_ADDRESS:
  9316                           
  9317                           ;i2c1.c: 128: switch(slaveWriteType)
  9318                           
  9319                           ;i2c1.c: 126: case I2C1_SLAVE_WRITE_COMPLETED:
  9320                           
  9321                           
  9322                           ;i2c1.c: 133: PROTOCOL_SET(I2C_slaveWriteData);
  9323  0706  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9324  0707  3188  20D3  3186   	fcall	i1_PROTOCOL_SET
  9325  070A  2F75               	goto	i1l3501
  9326  070B                     i1l3459:	
  9327                           ;i2c1.c: 138: case 0x04:
  9328                           
  9329                           ;i2c1.c: 137: switch(I2C_slaveWriteData) {
  9330                           
  9331                           ;i2c1.c: 136: case 0x00:
  9332                           
  9333                           ;i2c1.c: 135: break;
  9334                           
  9335                           ;i2c1.c: 134: next = 0x00;
  9336                           
  9337                           
  9338                           ;i2c1.c: 139: PROTOCOL_STA();
  9339  070B  3188  20B7  3186   	fcall	i1_PROTOCOL_STA
  9340                           
  9341                           ;i2c1.c: 140: break;
  9342  070E  2F8E               	goto	i1l3511
  9343  070F                     i1l3461:	
  9344                           ;i2c1.c: 141: case 0x05:
  9345                           
  9346                           
  9347                           ;i2c1.c: 142: PROTOCOL_STP();
  9348  070F  3188  20A3  3186   	fcall	i1_PROTOCOL_STP
  9349                           
  9350                           ;i2c1.c: 143: break;
  9351  0712  2F8E               	goto	i1l3511
  9352  0713                     i1l3463:	
  9353                           ;i2c1.c: 144: case 0x03:
  9354                           
  9355                           
  9356                           ;i2c1.c: 145: PROTOCOL_SAV();
  9357  0713  3188  20F7  3186   	fcall	i1_PROTOCOL_SAV
  9358                           
  9359                           ;i2c1.c: 146: break;
  9360  0716  2F8E               	goto	i1l3511
  9361  0717                     i1l3465:	
  9362                           ;i2c1.c: 147: case 0x06:
  9363                           
  9364                           
  9365                           ;i2c1.c: 148: PROTOCOL_INV();
  9366  0717  3188  20B3  3186   	fcall	_PROTOCOL_INV
  9367                           
  9368                           ;i2c1.c: 149: break;
  9369  071A  2F8E               	goto	i1l3511
  9370  071B                     i1l3467:	
  9371                           ;i2c1.c: 150: case 0x0c:
  9372                           
  9373                           
  9374                           ;i2c1.c: 151: PROTOCOL_RST();
  9375  071B  3189  2112  3186   	fcall	_PROTOCOL_RST
  9376                           
  9377                           ;i2c1.c: 152: break;
  9378  071E  2F8E               	goto	i1l3511
  9379  071F                     i1l103:	
  9380                           ;i2c1.c: 153: case 0x08:
  9381                           
  9382                           
  9383                           ;i2c1.c: 154: next = 0x01;
  9384  071F  01EC               	clrf	I2C1_StatusCallback@next
  9385  0720  0AEC               	incf	I2C1_StatusCallback@next,f
  9386                           
  9387                           ;i2c1.c: 155: break;
  9388  0721  2F8E               	goto	i1l3511
  9389  0722                     i1l3469:	
  9390                           ;i2c1.c: 156: case 0x0a:
  9391                           
  9392                           
  9393                           ;i2c1.c: 157: next = 0x02;
  9394  0722  3002               	movlw	2
  9395  0723  2F56               	goto	L5
  9396  0724                     i1l3473:	
  9397                           ;i2c1.c: 159: }
  9398                           
  9399                           ;i2c1.c: 158: break;
  9400                           
  9401  0724  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9402                           
  9403                           ; Switch size 1, requested type "space"
  9404                           ; Number of cases is 7, Range of values is 3 to 12
  9405                           ; switch strategies available:
  9406                           ; Name         Instructions Cycles
  9407                           ; simple_byte           22    12 (average)
  9408                           ; direct_byte           29     9 (fixed)
  9409                           ; jumptable            263     9 (fixed)
  9410                           ;	Chosen strategy is simple_byte
  9411  0725  3A03               	xorlw	3	; case 3
  9412  0726  1903               	skipnz
  9413  0727  2F13               	goto	i1l3463
  9414  0728  3A07               	xorlw	7	; case 4
  9415  0729  1903               	skipnz
  9416  072A  2F0B               	goto	i1l3459
  9417  072B  3A01               	xorlw	1	; case 5
  9418  072C  1903               	skipnz
  9419  072D  2F0F               	goto	i1l3461
  9420  072E  3A03               	xorlw	3	; case 6
  9421  072F  1903               	skipnz
  9422  0730  2F17               	goto	i1l3465
  9423  0731  3A0E               	xorlw	14	; case 8
  9424  0732  1903               	skipnz
  9425  0733  2F1F               	goto	i1l103
  9426  0734  3A02               	xorlw	2	; case 10
  9427  0735  1903               	skipnz
  9428  0736  2F22               	goto	i1l3469
  9429  0737  3A06               	xorlw	6	; case 12
  9430  0738  1903               	skipnz
  9431  0739  2F1B               	goto	i1l3467
  9432  073A  2F8E               	goto	i1l3511
  9433                           
  9434                           ;i2c1.c: 161: }
  9435                           
  9436                           ;i2c1.c: 160: break;
  9437  073B  2F8E               	goto	i1l3511
  9438  073C                     i1l3477:	
  9439  073C  086C               	movf	I2C1_StatusCallback@next,w
  9440                           
  9441                           ; Switch size 1, requested type "space"
  9442                           ; Number of cases is 2, Range of values is 0 to 1
  9443                           ; switch strategies available:
  9444                           ; Name         Instructions Cycles
  9445                           ; simple_byte            7     4 (average)
  9446                           ; direct_byte           10     6 (fixed)
  9447                           ; jumptable            260     6 (fixed)
  9448                           ;	Chosen strategy is simple_byte
  9449  073D  3A00               	xorlw	0	; case 0
  9450  073E  1903               	skipnz
  9451  073F  2F24               	goto	i1l3473
  9452  0740  3A01               	xorlw	1	; case 1
  9453  0741  1903               	skipnz
  9454  0742  2F06               	goto	i1l3455
  9455  0743  2F8E               	goto	i1l3511
  9456                           
  9457                           ;i2c1.c: 162: break;
  9458  0744  2F8E               	goto	i1l3511
  9459  0745                     i1l3479:	
  9460                           ;i2c1.c: 164: case SLAVE_GENERAL_CALL:
  9461                           
  9462                           
  9463                           ;i2c1.c: 165: if (I2C_slaveWriteData == 0x02) {
  9464  0745  3002               	movlw	2
  9465  0746  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
  9466  0747  1D03               	btfss	3,2
  9467  0748  2F8E               	goto	i1l3511
  9468                           
  9469                           ;i2c1.c: 166: SSP1CON2bits.GCEN = 0;
  9470  0749  0024               	movlb	4	; select bank4
  9471  074A  1396               	bcf	22,7	;volatile
  9472                           
  9473                           ;i2c1.c: 167: PROTOCOL_Backplane_Slave_Enabled();
  9474  074B  3188  20AF  3186   	fcall	_PROTOCOL_Backplane_Slave_Enabled
  9475                           
  9476                           ;i2c1.c: 168: }
  9477                           ;i2c1.c: 169: break;
  9478  074E  2F8E               	goto	i1l3511
  9479  074F                     i1l3485:	
  9480                           ;i2c1.c: 173: case 0x02:
  9481                           
  9482                           ;i2c1.c: 172: switch(next) {
  9483                           
  9484                           ;i2c1.c: 171: case SLAVE_NORMAL_DATA:
  9485                           
  9486                           
  9487                           ;i2c1.c: 174: ext_len = I2C_slaveWriteData;
  9488  074F  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9489  0750  00F4               	movwf	??_I2C1_StatusCallback
  9490  0751  0874               	movf	??_I2C1_StatusCallback,w
  9491  0752  0020               	movlb	0	; select bank0
  9492  0753  00EB               	movwf	I2C1_StatusCallback@ext_len
  9493                           
  9494                           ;i2c1.c: 175: ext_cnt = 0;
  9495  0754  01EA               	clrf	I2C1_StatusCallback@ext_cnt
  9496                           
  9497                           ;i2c1.c: 176: next = 0x03;
  9498  0755  3003               	movlw	3
  9499  0756                     L5:	
  9500  0756  00F4               	movwf	??_I2C1_StatusCallback
  9501  0757  0874               	movf	??_I2C1_StatusCallback,w
  9502  0758  00EC               	movwf	I2C1_StatusCallback@next
  9503                           
  9504                           ;i2c1.c: 177: break;
  9505  0759  2F8E               	goto	i1l3511
  9506  075A                     i1l3491:	
  9507                           ;i2c1.c: 178: case 0x03:
  9508                           
  9509                           
  9510                           ;i2c1.c: 179: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
  9511  075A  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9512  075B  00F4               	movwf	??_I2C1_StatusCallback
  9513  075C  086A               	movf	I2C1_StatusCallback@ext_cnt,w
  9514  075D  3EA0               	addlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9515  075E  0086               	movwf	6
  9516  075F  3001               	movlw	1	; select bank3/4
  9517  0760  0087               	movwf	7
  9518  0761  0874               	movf	??_I2C1_StatusCallback,w
  9519  0762  0081               	movwf	1
  9520  0763  3001               	movlw	1
  9521  0764  00F4               	movwf	??_I2C1_StatusCallback
  9522  0765  0874               	movf	??_I2C1_StatusCallback,w
  9523  0766  07EA               	addwf	I2C1_StatusCallback@ext_cnt,f
  9524                           
  9525                           ;i2c1.c: 180: if (ext_cnt >= ext_len) {
  9526  0767  086B               	movf	I2C1_StatusCallback@ext_len,w
  9527  0768  026A               	subwf	I2C1_StatusCallback@ext_cnt,w
  9528  0769  1C03               	skipc
  9529  076A  2F8E               	goto	i1l3511
  9530                           
  9531                           ;i2c1.c: 181: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
  9532  076B  3188  20A0  3186   	fcall	_PROTOCOL_Read_Lock
  9533  076E  3A00               	xorlw	0
  9534  076F  1D03               	skipz
  9535  0770  2F75               	goto	i1l3501
  9536  0771  30A0               	movlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9537  0772  3188  2096  3186   	fcall	i1_PROTOCOL_EXT
  9538  0775                     i1l3501:	
  9539                           
  9540                           ;i2c1.c: 182: next = 0x00;
  9541  0775  0020               	movlb	0	; select bank0
  9542  0776  01EC               	clrf	I2C1_StatusCallback@next
  9543                           
  9544                           ;i2c1.c: 185: }
  9545                           
  9546                           ;i2c1.c: 183: }
  9547                           ;i2c1.c: 184: break;
  9548  0777  2F8E               	goto	i1l3511
  9549  0778                     i1l3505:	
  9550  0778  0020               	movlb	0	; select bank0
  9551  0779  086C               	movf	I2C1_StatusCallback@next,w
  9552                           
  9553                           ; Switch size 1, requested type "space"
  9554                           ; Number of cases is 2, Range of values is 2 to 3
  9555                           ; switch strategies available:
  9556                           ; Name         Instructions Cycles
  9557                           ; simple_byte            7     4 (average)
  9558                           ; direct_byte           13     9 (fixed)
  9559                           ; jumptable            263     9 (fixed)
  9560                           ;	Chosen strategy is simple_byte
  9561  077A  3A02               	xorlw	2	; case 2
  9562  077B  1903               	skipnz
  9563  077C  2F4F               	goto	i1l3485
  9564  077D  3A01               	xorlw	1	; case 3
  9565  077E  1903               	skipnz
  9566  077F  2F5A               	goto	i1l3491
  9567  0780  2F8E               	goto	i1l3511
  9568                           
  9569                           ;i2c1.c: 190: }
  9570                           
  9571                           ;i2c1.c: 188: break;
  9572                           
  9573                           ;i2c1.c: 187: default:
  9574                           
  9575                           ;i2c1.c: 186: break;
  9576  0781  2F8E               	goto	i1l3511
  9577  0782                     i1l3509:	
  9578  0782  0020               	movlb	0	; select bank0
  9579  0783  086D               	movf	I2C1_StatusCallback@slaveWriteType,w
  9580                           
  9581                           ; Switch size 1, requested type "space"
  9582                           ; Number of cases is 3, Range of values is 0 to 2
  9583                           ; switch strategies available:
  9584                           ; Name         Instructions Cycles
  9585                           ; simple_byte           10     6 (average)
  9586                           ; direct_byte           12     6 (fixed)
  9587                           ; jumptable            260     6 (fixed)
  9588                           ;	Chosen strategy is simple_byte
  9589  0784  3A00               	xorlw	0	; case 0
  9590  0785  1903               	skipnz
  9591  0786  2F78               	goto	i1l3505
  9592  0787  3A01               	xorlw	1	; case 1
  9593  0788  1903               	skipnz
  9594  0789  2F3C               	goto	i1l3477
  9595  078A  3A03               	xorlw	3	; case 2
  9596  078B  1903               	skipnz
  9597  078C  2F45               	goto	i1l3479
  9598  078D  2F8E               	goto	i1l3511
  9599  078E                     i1l3511:	
  9600                           
  9601                           ;i2c1.c: 192: slaveWriteType = SLAVE_NORMAL_DATA;
  9602  078E  0020               	movlb	0	; select bank0
  9603  078F  01ED               	clrf	I2C1_StatusCallback@slaveWriteType
  9604                           
  9605                           ;i2c1.c: 193: break;
  9606  0790  0008               	return
  9607  0791                     i1l3513:	
  9608                           ;i2c1.c: 197: {
  9609                           ;i2c1.c: 198: case 0x01:
  9610                           
  9611                           ;i2c1.c: 196: switch (I2C_slaveWriteData)
  9612                           
  9613                           ;i2c1.c: 195: case I2C1_SLAVE_READ_REQUEST:
  9614                           
  9615                           
  9616                           ;i2c1.c: 199: SSP1BUF = PROTOCOL_I2C_WHO();
  9617  0791  3188  209D         	fcall	_PROTOCOL_I2C_WHO
  9618  0793  0024               	movlb	4	; select bank4
  9619  0794  0091               	movwf	17	;volatile
  9620                           
  9621                           ;i2c1.c: 200: break;
  9622  0795  0008               	return
  9623  0796                     i1l3515:	
  9624                           ;i2c1.c: 201: case 0x07:
  9625                           
  9626                           
  9627                           ;i2c1.c: 202: pdata = PROTOCOL_I2C_SEN();
  9628  0796  318B  23DD         	fcall	_PROTOCOL_I2C_SEN
  9629  0798  00F4               	movwf	??_I2C1_StatusCallback
  9630  0799  0874               	movf	??_I2C1_StatusCallback,w
  9631  079A  00F6               	movwf	I2C1_StatusCallback@pdata
  9632                           
  9633                           ;i2c1.c: 203: SSP1BUF = *pdata;
  9634  079B  0876               	movf	I2C1_StatusCallback@pdata,w
  9635  079C  0086               	movwf	6
  9636  079D  0187               	clrf	7
  9637  079E  0801               	movf	1,w
  9638  079F  0024               	movlb	4	; select bank4
  9639  07A0  0091               	movwf	17	;volatile
  9640                           
  9641                           ;i2c1.c: 204: break;
  9642  07A1  0008               	return
  9643  07A2                     i1l3519:	
  9644                           ;i2c1.c: 205: case 0x09:
  9645                           
  9646                           
  9647                           ;i2c1.c: 206: SSP1BUF = PROTOCOL_I2C_GET();
  9648  07A2  3188  209A         	fcall	_PROTOCOL_I2C_GET
  9649  07A4  0024               	movlb	4	; select bank4
  9650  07A5  0091               	movwf	17	;volatile
  9651                           
  9652                           ;i2c1.c: 208: }
  9653                           
  9654                           ;i2c1.c: 207: break;
  9655  07A6  0008               	return
  9656  07A7                     i1l3523:	
  9657  07A7  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9658                           
  9659                           ; Switch size 1, requested type "space"
  9660                           ; Number of cases is 3, Range of values is 1 to 9
  9661                           ; switch strategies available:
  9662                           ; Name         Instructions Cycles
  9663                           ; simple_byte           10     6 (average)
  9664                           ; direct_byte           27     9 (fixed)
  9665                           ; jumptable            263     9 (fixed)
  9666                           ;	Chosen strategy is simple_byte
  9667  07A8  3A01               	xorlw	1	; case 1
  9668  07A9  1903               	skipnz
  9669  07AA  2F91               	goto	i1l3513
  9670  07AB  3A06               	xorlw	6	; case 7
  9671  07AC  1903               	skipnz
  9672  07AD  2F96               	goto	i1l3515
  9673  07AE  3A0E               	xorlw	14	; case 9
  9674  07AF  1903               	skipnz
  9675  07B0  2FA2               	goto	i1l3519
  9676  07B1  2FBD               	goto	i1l124
  9677                           
  9678                           ;i2c1.c: 216: }
  9679                           
  9680                           ;i2c1.c: 214: break;
  9681                           
  9682                           ;i2c1.c: 213: default:
  9683                           
  9684                           ;i2c1.c: 212: break;
  9685                           
  9686                           ;i2c1.c: 211: case I2C1_SLAVE_READ_COMPLETED:
  9687                           
  9688                           ;i2c1.c: 209: break;
  9689  07B2  0008               	return
  9690  07B3                     i1l3527:	
  9691  07B3  0875               	movf	I2C1_StatusCallback@i2c_bus_state,w
  9692                           
  9693                           ; Switch size 1, requested type "space"
  9694                           ; Number of cases is 5, Range of values is 0 to 4
  9695                           ; switch strategies available:
  9696                           ; Name         Instructions Cycles
  9697                           ; direct_byte           16     6 (fixed)
  9698                           ; simple_byte           16     9 (average)
  9699                           ; jumptable            260     6 (fixed)
  9700                           ;	Chosen strategy is direct_byte
  9701  07B4  0084               	movwf	4
  9702  07B5  3005               	movlw	5
  9703  07B6  0204               	subwf	4,w
  9704  07B7  1803               	skipnc
  9705  07B8  0008               	return
  9706  07B9  3188               	movlp	high i1S3951
  9707  07BA  3504               	lslf	4,w
  9708  07BB  3E00               	addlw	low i1S3951
  9709  07BC  0082               	movwf	2
  9710  07BD                     i1l124:	
  9711  07BD  0008               	return
  9712  07BE                     __end_of_I2C1_StatusCallback:	
  9713                           
  9714                           	psect	swtext1
  9715  0800                     __pswtext1:	
  9716  0800                     i1S3951:	
  9717  0800  3186  2EFC         	ljmp	i1l86
  9718  0802  3187  2FA7         	ljmp	i1l3523
  9719  0804  3187  2F82         	ljmp	i1l3509
  9720  0806  3187  2FBD         	ljmp	i1l124
  9721  0808  3187  2F00         	ljmp	i1l3453
  9722                           
  9723                           	psect	text51
  9724  08A3                     __ptext51:	
  9725 ;; *************** function i1_PROTOCOL_STP *****************
  9726 ;; Defined at:
  9727 ;;		line 98 in file "protocol.c"
  9728 ;; Parameters:    Size  Location     Type
  9729 ;;		None
  9730 ;; Auto vars:     Size  Location     Type
  9731 ;;		None
  9732 ;; Return value:  Size  Location     Type
  9733 ;;                  1    wreg      void 
  9734 ;; Registers used:
  9735 ;;		wreg, status,2, status,0
  9736 ;; Tracked objects:
  9737 ;;		On entry : 0/0
  9738 ;;		On exit  : 0/0
  9739 ;;		Unchanged: 0/0
  9740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;Total ram usage:        0 bytes
  9746 ;; Hardware stack levels used:    1
  9747 ;; This function calls:
  9748 ;;		Nothing
  9749 ;; This function is called by:
  9750 ;;		_I2C1_StatusCallback
  9751 ;; This function uses a non-reentrant model
  9752 ;;
  9753                           
  9754                           
  9755                           ;psect for function i1_PROTOCOL_STP
  9756  08A3                     i1_PROTOCOL_STP:	
  9757                           
  9758                           ;protocol.c: 100: running = 0;
  9759                           
  9760                           ;incstack = 0
  9761                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
  9762  08A3  0020               	movlb	0	; select bank0
  9763  08A4  01E1               	clrf	_running
  9764  08A5  0008               	return
  9765  08A6                     __end_ofi1_PROTOCOL_STP:	
  9766                           
  9767                           	psect	text52
  9768  08B7                     __ptext52:	
  9769 ;; *************** function i1_PROTOCOL_STA *****************
  9770 ;; Defined at:
  9771 ;;		line 93 in file "protocol.c"
  9772 ;; Parameters:    Size  Location     Type
  9773 ;;		None
  9774 ;; Auto vars:     Size  Location     Type
  9775 ;;		None
  9776 ;; Return value:  Size  Location     Type
  9777 ;;                  1    wreg      void 
  9778 ;; Registers used:
  9779 ;;		wreg, status,2, status,0
  9780 ;; Tracked objects:
  9781 ;;		On entry : 0/0
  9782 ;;		On exit  : 0/0
  9783 ;;		Unchanged: 0/0
  9784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9789 ;;Total ram usage:        0 bytes
  9790 ;; Hardware stack levels used:    1
  9791 ;; This function calls:
  9792 ;;		Nothing
  9793 ;; This function is called by:
  9794 ;;		_I2C1_StatusCallback
  9795 ;; This function uses a non-reentrant model
  9796 ;;
  9797                           
  9798                           
  9799                           ;psect for function i1_PROTOCOL_STA
  9800  08B7                     i1_PROTOCOL_STA:	
  9801                           
  9802                           ;protocol.c: 95: running = 1;
  9803                           
  9804                           ;incstack = 0
  9805                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
  9806  08B7  0020               	movlb	0	; select bank0
  9807  08B8  01E1               	clrf	_running
  9808  08B9  0AE1               	incf	_running,f
  9809  08BA  0008               	return
  9810  08BB                     __end_ofi1_PROTOCOL_STA:	
  9811                           
  9812                           	psect	text53
  9813  08D3                     __ptext53:	
  9814 ;; *************** function i1_PROTOCOL_SET *****************
  9815 ;; Defined at:
  9816 ;;		line 111 in file "protocol.c"
  9817 ;; Parameters:    Size  Location     Type
  9818 ;;  value_          1    wreg     unsigned char 
  9819 ;; Auto vars:     Size  Location     Type
  9820 ;;  value_          1    1[COMMON] unsigned char 
  9821 ;; Return value:  Size  Location     Type
  9822 ;;                  1    wreg      void 
  9823 ;; Registers used:
  9824 ;;		wreg, status,2, status,0
  9825 ;; Tracked objects:
  9826 ;;		On entry : 0/0
  9827 ;;		On exit  : 0/0
  9828 ;;		Unchanged: 0/0
  9829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9832 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;Total ram usage:        2 bytes
  9835 ;; Hardware stack levels used:    1
  9836 ;; This function calls:
  9837 ;;		Nothing
  9838 ;; This function is called by:
  9839 ;;		_I2C1_StatusCallback
  9840 ;; This function uses a non-reentrant model
  9841 ;;
  9842                           
  9843                           
  9844                           ;psect for function i1_PROTOCOL_SET
  9845  08D3                     i1_PROTOCOL_SET:	
  9846                           
  9847                           ;incstack = 0
  9848                           ; Regs used in i1_PROTOCOL_SET: [wreg+status,2+status,0]
  9849                           ;i1PROTOCOL_SET@value_ stored from wreg
  9850  08D3  00F1               	movwf	i1PROTOCOL_SET@value_
  9851                           
  9852                           ;protocol.c: 112: value = value_;
  9853  08D4  0871               	movf	i1PROTOCOL_SET@value_,w
  9854  08D5  00F0               	movwf	??i1_PROTOCOL_SET
  9855  08D6  0870               	movf	??i1_PROTOCOL_SET,w
  9856  08D7  0020               	movlb	0	; select bank0
  9857  08D8  00E3               	movwf	_value
  9858  08D9  0008               	return
  9859  08DA                     __end_ofi1_PROTOCOL_SET:	
  9860                           
  9861                           	psect	text54
  9862  08F7                     __ptext54:	
  9863 ;; *************** function i1_PROTOCOL_SAV *****************
  9864 ;; Defined at:
  9865 ;;		line 107 in file "protocol.c"
  9866 ;; Parameters:    Size  Location     Type
  9867 ;;		None
  9868 ;; Auto vars:     Size  Location     Type
  9869 ;;		None
  9870 ;; Return value:  Size  Location     Type
  9871 ;;                  1    wreg      void 
  9872 ;; Registers used:
  9873 ;;		wreg, status,2, status,0, pclath, cstack
  9874 ;; Tracked objects:
  9875 ;;		On entry : 0/0
  9876 ;;		On exit  : 0/0
  9877 ;;		Unchanged: 0/0
  9878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;Total ram usage:        1 bytes
  9884 ;; Hardware stack levels used:    1
  9885 ;; Hardware stack levels required when called:    1
  9886 ;; This function calls:
  9887 ;;		i1_DATAEE_WriteByte
  9888 ;; This function is called by:
  9889 ;;		_I2C1_StatusCallback
  9890 ;; This function uses a non-reentrant model
  9891 ;;
  9892                           
  9893                           
  9894                           ;psect for function i1_PROTOCOL_SAV
  9895  08F7                     i1_PROTOCOL_SAV:	
  9896                           
  9897                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
  9898                           
  9899                           ;incstack = 0
  9900                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  9901  08F7  0020               	movlb	0	; select bank0
  9902  08F8  0863               	movf	_value,w
  9903  08F9  00F3               	movwf	??i1_PROTOCOL_SAV
  9904  08FA  0873               	movf	??i1_PROTOCOL_SAV,w
  9905  08FB  00F0               	movwf	i1DATAEE_WriteByte@bData
  9906  08FC  3001               	movlw	1
  9907  08FD  318A  2208         	fcall	i1_DATAEE_WriteByte
  9908  08FF  0008               	return
  9909  0900                     __end_ofi1_PROTOCOL_SAV:	
  9910                           
  9911                           	psect	text55
  9912  0A08                     __ptext55:	
  9913 ;; *************** function i1_DATAEE_WriteByte *****************
  9914 ;; Defined at:
  9915 ;;		line 180 in file "mcc_generated_files/memory.c"
  9916 ;; Parameters:    Size  Location     Type
  9917 ;;  bAdd            1    wreg     unsigned char 
  9918 ;;  bData           1    0[COMMON] unsigned char 
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;  bAdd            1    1[COMMON] unsigned char 
  9921 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
  9922 ;; Return value:  Size  Location     Type
  9923 ;;                  1    wreg      void 
  9924 ;; Registers used:
  9925 ;;		wreg, status,2, status,0
  9926 ;; Tracked objects:
  9927 ;;		On entry : 0/0
  9928 ;;		On exit  : 0/0
  9929 ;;		Unchanged: 0/0
  9930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9931 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9932 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9935 ;;Total ram usage:        3 bytes
  9936 ;; Hardware stack levels used:    1
  9937 ;; This function calls:
  9938 ;;		Nothing
  9939 ;; This function is called by:
  9940 ;;		i1_PROTOCOL_SAV
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           
  9945                           ;psect for function i1_DATAEE_WriteByte
  9946  0A08                     i1_DATAEE_WriteByte:	
  9947                           
  9948                           ;incstack = 0
  9949                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
  9950                           ;i1DATAEE_WriteByte@bAdd stored from wreg
  9951  0A08  00F1               	movwf	i1DATAEE_WriteByte@bAdd
  9952                           
  9953                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  9954  0A09  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
  9955                           
  9956                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  9957  0A0A  0871               	movf	i1DATAEE_WriteByte@bAdd,w
  9958  0A0B  0023               	movlb	3	; select bank3
  9959  0A0C  0091               	movwf	17	;volatile
  9960                           
  9961                           ;memory.c: 185: EEDATL = bData;
  9962  0A0D  0870               	movf	i1DATAEE_WriteByte@bData,w
  9963  0A0E  0093               	movwf	19	;volatile
  9964                           
  9965                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  9966  0A0F  1395               	bcf	21,7	;volsfr
  9967                           
  9968                           ;memory.c: 187: EECON1bits.CFGS = 0;
  9969  0A10  1315               	bcf	21,6	;volsfr
  9970                           
  9971                           ;memory.c: 188: EECON1bits.WREN = 1;
  9972  0A11  1515               	bsf	21,2	;volsfr
  9973                           
  9974                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  9975  0A12  3000               	movlw	0
  9976  0A13  1B8B               	btfsc	11,7	;volatile
  9977  0A14  3001               	movlw	1
  9978  0A15  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
  9979                           
  9980                           ;memory.c: 191: INTCONbits.GIE = 0;
  9981  0A16  138B               	bcf	11,7	;volatile
  9982                           
  9983                           ;memory.c: 192: EECON2 = 0x55;
  9984  0A17  3055               	movlw	85
  9985  0A18  0096               	movwf	22	;volsfr
  9986                           
  9987                           ;memory.c: 193: EECON2 = 0xAA;
  9988  0A19  30AA               	movlw	170
  9989  0A1A  0096               	movwf	22	;volsfr
  9990                           
  9991                           ;memory.c: 194: EECON1bits.WR = 1;
  9992  0A1B  1495               	bsf	21,1	;volsfr
  9993  0A1C                     i1l326:	
  9994                           ;memory.c: 197: {
  9995                           
  9996                           ;memory.c: 196: while (EECON1bits.WR)
  9997                           
  9998  0A1C  1895               	btfsc	21,1	;volsfr
  9999  0A1D  2A1C               	goto	i1l326
 10000                           
 10001                           ;memory.c: 198: }
 10002                           ;memory.c: 200: EECON1bits.WREN = 0;
 10003  0A1E  1115               	bcf	21,2	;volsfr
 10004                           
 10005                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 10006  0A1F  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
 10007  0A20  1C03               	skipc
 10008  0A21  138B               	bcf	11,7	;volatile
 10009  0A22  1803               	skipnc
 10010  0A23  178B               	bsf	11,7	;volatile
 10011  0A24  0008               	return
 10012  0A25                     __end_ofi1_DATAEE_WriteByte:	
 10013                           
 10014                           	psect	text56
 10015  0896                     __ptext56:	
 10016 ;; *************** function i1_PROTOCOL_EXT *****************
 10017 ;; Defined at:
 10018 ;;		line 116 in file "protocol.c"
 10019 ;; Parameters:    Size  Location     Type
 10020 ;;  char_buf        1    wreg     PTR unsigned char 
 10021 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10022 ;; Auto vars:     Size  Location     Type
 10023 ;;  char_buf        1  (no storage) PTR unsigned char 
 10024 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10025 ;; Return value:  Size  Location     Type
 10026 ;;                  1    wreg      void 
 10027 ;; Registers used:
 10028 ;;		wreg, status,2, status,0
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;Total ram usage:        0 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; This function calls:
 10041 ;;		Nothing
 10042 ;; This function is called by:
 10043 ;;		_I2C1_StatusCallback
 10044 ;; This function uses a non-reentrant model
 10045 ;;
 10046                           
 10047                           
 10048                           ;psect for function i1_PROTOCOL_EXT
 10049  0896                     i1_PROTOCOL_EXT:	
 10050                           
 10051                           ;incstack = 0
 10052                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0]
 10053  0896  0008               	return
 10054  0897                     __end_ofi1_PROTOCOL_EXT:	
 10055                           
 10056                           	psect	text57
 10057  08A0                     __ptext57:	
 10058 ;; *************** function _PROTOCOL_Read_Lock *****************
 10059 ;; Defined at:
 10060 ;;		line 124 in file "protocol.c"
 10061 ;; Parameters:    Size  Location     Type
 10062 ;;		None
 10063 ;; Auto vars:     Size  Location     Type
 10064 ;;		None
 10065 ;; Return value:  Size  Location     Type
 10066 ;;                  1    wreg      unsigned char 
 10067 ;; Registers used:
 10068 ;;		wreg
 10069 ;; Tracked objects:
 10070 ;;		On entry : 0/0
 10071 ;;		On exit  : 0/0
 10072 ;;		Unchanged: 0/0
 10073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;Total ram usage:        0 bytes
 10079 ;; Hardware stack levels used:    1
 10080 ;; This function calls:
 10081 ;;		Nothing
 10082 ;; This function is called by:
 10083 ;;		_I2C1_StatusCallback
 10084 ;; This function uses a non-reentrant model
 10085 ;;
 10086                           
 10087                           
 10088                           ;psect for function _PROTOCOL_Read_Lock
 10089  08A0                     _PROTOCOL_Read_Lock:	
 10090                           
 10091                           ;protocol.c: 125: return locked;
 10092                           
 10093                           ;incstack = 0
 10094                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
 10095  08A0  0020               	movlb	0	; select bank0
 10096  08A1  0862               	movf	_locked,w
 10097  08A2  0008               	return
 10098  08A3                     __end_of_PROTOCOL_Read_Lock:	
 10099                           
 10100                           	psect	text58
 10101  0912                     __ptext58:	
 10102 ;; *************** function _PROTOCOL_RST *****************
 10103 ;; Defined at:
 10104 ;;		line 279 in file "protocol.c"
 10105 ;; Parameters:    Size  Location     Type
 10106 ;;		None
 10107 ;; Auto vars:     Size  Location     Type
 10108 ;;		None
 10109 ;; Return value:  Size  Location     Type
 10110 ;;                  1    wreg      void 
 10111 ;; Registers used:
 10112 ;;		wreg, status,2, status,0
 10113 ;; Tracked objects:
 10114 ;;		On entry : 0/0
 10115 ;;		On exit  : 0/0
 10116 ;;		Unchanged: 0/0
 10117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10120 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10121 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10122 ;;Total ram usage:        1 bytes
 10123 ;; Hardware stack levels used:    1
 10124 ;; This function calls:
 10125 ;;		Nothing
 10126 ;; This function is called by:
 10127 ;;		_I2C1_StatusCallback
 10128 ;; This function uses a non-reentrant model
 10129 ;;
 10130                           
 10131                           
 10132                           ;psect for function _PROTOCOL_RST
 10133  0912                     _PROTOCOL_RST:	
 10134                           
 10135                           ;protocol.c: 280: if (readbuf.status != TLV_SET) {
 10136                           
 10137                           ;incstack = 0
 10138                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
 10139  0912  0021               	movlb	1	; select bank1
 10140  0913  084F               	movf	(_readbuf^(0+128)+3),w
 10141  0914  1903               	btfsc	3,2
 10142  0915  0008               	return
 10143                           
 10144                           ;protocol.c: 281: readbuf.buf_cnt = 0;
 10145  0916  01D0               	clrf	(_readbuf^(0+128)+4)
 10146                           
 10147                           ;protocol.c: 282: readbuf.status = COMPLETE;
 10148  0917  3003               	movlw	3
 10149  0918  00F0               	movwf	??_PROTOCOL_RST
 10150  0919  0870               	movf	??_PROTOCOL_RST,w
 10151  091A  00CF               	movwf	(_readbuf^(0+128)+3)
 10152  091B  0008               	return
 10153  091C                     __end_of_PROTOCOL_RST:	
 10154                           
 10155                           	psect	text59
 10156  08B3                     __ptext59:	
 10157 ;; *************** function _PROTOCOL_INV *****************
 10158 ;; Defined at:
 10159 ;;		line 103 in file "protocol.c"
 10160 ;; Parameters:    Size  Location     Type
 10161 ;;		None
 10162 ;; Auto vars:     Size  Location     Type
 10163 ;;		None
 10164 ;; Return value:  Size  Location     Type
 10165 ;;                  1    wreg      void 
 10166 ;; Registers used:
 10167 ;;		None
 10168 ;; Tracked objects:
 10169 ;;		On entry : 0/0
 10170 ;;		On exit  : 0/0
 10171 ;;		Unchanged: 0/0
 10172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10177 ;;Total ram usage:        0 bytes
 10178 ;; Hardware stack levels used:    1
 10179 ;; This function calls:
 10180 ;;		Nothing
 10181 ;; This function is called by:
 10182 ;;		_I2C1_StatusCallback
 10183 ;; This function uses a non-reentrant model
 10184 ;;
 10185                           
 10186                           
 10187                           ;psect for function _PROTOCOL_INV
 10188  08B3                     _PROTOCOL_INV:	
 10189                           
 10190                           ;protocol.c: 104: invoked = 1;
 10191                           
 10192                           ;incstack = 0
 10193                           ; Regs used in _PROTOCOL_INV: []
 10194  08B3  0020               	movlb	0	; select bank0
 10195  08B4  01E0               	clrf	_invoked
 10196  08B5  0AE0               	incf	_invoked,f
 10197  08B6  0008               	return
 10198  08B7                     __end_of_PROTOCOL_INV:	
 10199                           
 10200                           	psect	text60
 10201  089D                     __ptext60:	
 10202 ;; *************** function _PROTOCOL_I2C_WHO *****************
 10203 ;; Defined at:
 10204 ;;		line 199 in file "protocol.c"
 10205 ;; Parameters:    Size  Location     Type
 10206 ;;		None
 10207 ;; Auto vars:     Size  Location     Type
 10208 ;;		None
 10209 ;; Return value:  Size  Location     Type
 10210 ;;                  1    wreg      unsigned char 
 10211 ;; Registers used:
 10212 ;;		wreg
 10213 ;; Tracked objects:
 10214 ;;		On entry : 0/0
 10215 ;;		On exit  : 0/0
 10216 ;;		Unchanged: 0/0
 10217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;Total ram usage:        0 bytes
 10223 ;; Hardware stack levels used:    1
 10224 ;; This function calls:
 10225 ;;		Nothing
 10226 ;; This function is called by:
 10227 ;;		_I2C1_StatusCallback
 10228 ;; This function uses a non-reentrant model
 10229 ;;
 10230                           
 10231                           
 10232                           ;psect for function _PROTOCOL_I2C_WHO
 10233  089D                     _PROTOCOL_I2C_WHO:	
 10234                           
 10235                           ;protocol.c: 200: return slave_address;
 10236                           
 10237                           ;incstack = 0
 10238                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
 10239  089D  0020               	movlb	0	; select bank0
 10240  089E  0865               	movf	_slave_address,w
 10241  089F  0008               	return
 10242  08A0                     __end_of_PROTOCOL_I2C_WHO:	
 10243                           
 10244                           	psect	text61
 10245  0BDD                     __ptext61:	
 10246 ;; *************** function _PROTOCOL_I2C_SEN *****************
 10247 ;; Defined at:
 10248 ;;		line 398 in file "protocol.c"
 10249 ;; Parameters:    Size  Location     Type
 10250 ;;		None
 10251 ;; Auto vars:     Size  Location     Type
 10252 ;;  pdata           1    1[COMMON] PTR unsigned char 
 10253 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
 10254 ;;		 -> readbuf.type(1), readbuf(5), 
 10255 ;; Return value:  Size  Location     Type
 10256 ;;                  1    wreg      PTR unsigned char 
 10257 ;; Registers used:
 10258 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10259 ;; Tracked objects:
 10260 ;;		On entry : 0/0
 10261 ;;		On exit  : 0/0
 10262 ;;		Unchanged: 0/0
 10263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10265 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10266 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;Total ram usage:        2 bytes
 10269 ;; Hardware stack levels used:    1
 10270 ;; This function calls:
 10271 ;;		Nothing
 10272 ;; This function is called by:
 10273 ;;		_I2C1_StatusCallback
 10274 ;; This function uses a non-reentrant model
 10275 ;;
 10276                           
 10277                           
 10278                           ;psect for function _PROTOCOL_I2C_SEN
 10279  0BDD                     _PROTOCOL_I2C_SEN:	
 10280                           
 10281                           ;protocol.c: 399: uint8_t *pdata;
 10282                           ;protocol.c: 400: switch(readbuf.status) {
 10283                           
 10284                           ;incstack = 0
 10285                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
 10286  0BDD  2C08               	goto	i1l3345
 10287  0BDE                     i1l3325:	
 10288                           ;protocol.c: 401: case TLV_SET:
 10289                           
 10290                           
 10291                           ;protocol.c: 402: pdata = &readbuf.type;
 10292  0BDE  30CC               	movlw	(low (_readbuf| 0))& (0+255)
 10293  0BDF  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10294  0BE0  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10295  0BE1  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 10296                           
 10297                           ;protocol.c: 403: readbuf.status = TYPE_SENT;
 10298  0BE2  0021               	movlb	1	; select bank1
 10299  0BE3  01CF               	clrf	(_readbuf^(0+128)+3)
 10300  0BE4  0ACF               	incf	(_readbuf^(0+128)+3),f
 10301                           
 10302                           ;protocol.c: 404: break;
 10303  0BE5  2C17               	goto	i1l3347
 10304  0BE6                     i1l3329:	
 10305                           ;protocol.c: 405: case TYPE_SENT:
 10306                           
 10307                           
 10308                           ;protocol.c: 406: pdata = &readbuf.length;
 10309  0BE6  30CD               	movlw	(low ((_readbuf| 0+1)))& (0+255)
 10310  0BE7  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10311  0BE8  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10312  0BE9  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 10313                           
 10314                           ;protocol.c: 407: readbuf.status = LENGTH_SENT;
 10315  0BEA  3002               	movlw	2
 10316  0BEB  2BFF               	goto	L6
 10317  0BEC                     i1l3331:	
 10318                           ;protocol.c: 409: case LENGTH_SENT:
 10319                           
 10320                           ;protocol.c: 408: break;
 10321                           
 10322                           
 10323                           ;protocol.c: 410: if (readbuf.buf_cnt < readbuf.length) {
 10324  0BEC  084D               	movf	(_readbuf^(0+128)+1),w
 10325  0BED  0250               	subwf	(_readbuf^(0+128)+4),w
 10326  0BEE  1803               	skipnc
 10327  0BEF  2BF9               	goto	i1l3335
 10328                           
 10329                           ;protocol.c: 411: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
 10330  0BF0  084E               	movf	(low ((_readbuf| 0+2)))^(0+128),w
 10331  0BF1  0750               	addwf	(_readbuf^(0+128)+4),w
 10332  0BF2  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10333  0BF3  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10334  0BF4  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 10335  0BF5  3001               	movlw	1
 10336  0BF6  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10337  0BF7  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10338  0BF8  07D0               	addwf	(_readbuf^(0+128)+4),f
 10339  0BF9                     i1l3335:	
 10340                           
 10341                           ;protocol.c: 412: }
 10342                           ;protocol.c: 413: if (readbuf.buf_cnt == readbuf.length) {
 10343  0BF9  0850               	movf	(_readbuf^(0+128)+4),w
 10344  0BFA  064D               	xorwf	(_readbuf^(0+128)+1),w
 10345  0BFB  1D03               	skipz
 10346  0BFC  2C17               	goto	i1l3347
 10347                           
 10348                           ;protocol.c: 414: readbuf.buf_cnt = 0;
 10349  0BFD  01D0               	clrf	(_readbuf^(0+128)+4)
 10350                           
 10351                           ;protocol.c: 415: readbuf.status = COMPLETE;
 10352  0BFE  3003               	movlw	3
 10353  0BFF                     L6:	
 10354  0BFF  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10355  0C00  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10356  0C01  00CF               	movwf	(_readbuf^(0+128)+3)
 10357                           
 10358                           ;protocol.c: 416: }
 10359                           ;protocol.c: 417: break;
 10360  0C02  2C17               	goto	i1l3347
 10361  0C03                     i1l3341:	
 10362                           ;protocol.c: 418: case COMPLETE:
 10363                           
 10364                           
 10365                           ;protocol.c: 419: pdata = &type_no_data;
 10366  0C03  30E2               	movlw	(low (_type_no_data| 0))& (0+255)
 10367  0C04  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10368  0C05  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10369  0C06  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
 10370                           
 10371                           ;protocol.c: 421: }
 10372                           
 10373                           ;protocol.c: 420: break;
 10374  0C07  2C17               	goto	i1l3347
 10375  0C08                     i1l3345:	
 10376  0C08  0021               	movlb	1	; select bank1
 10377  0C09  084F               	movf	(_readbuf^(0+128)+3),w
 10378                           
 10379                           ; Switch size 1, requested type "space"
 10380                           ; Number of cases is 4, Range of values is 0 to 3
 10381                           ; switch strategies available:
 10382                           ; Name         Instructions Cycles
 10383                           ; simple_byte           13     7 (average)
 10384                           ; direct_byte           14     6 (fixed)
 10385                           ; jumptable            260     6 (fixed)
 10386                           ;	Chosen strategy is simple_byte
 10387  0C0A  3A00               	xorlw	0	; case 0
 10388  0C0B  1903               	skipnz
 10389  0C0C  2BDE               	goto	i1l3325
 10390  0C0D  3A01               	xorlw	1	; case 1
 10391  0C0E  1903               	skipnz
 10392  0C0F  2BE6               	goto	i1l3329
 10393  0C10  3A03               	xorlw	3	; case 2
 10394  0C11  1903               	skipnz
 10395  0C12  2BEC               	goto	i1l3331
 10396  0C13  3A01               	xorlw	1	; case 3
 10397  0C14  1903               	skipnz
 10398  0C15  2C03               	goto	i1l3341
 10399  0C16  2C17               	goto	i1l3347
 10400  0C17                     i1l3347:	
 10401                           
 10402                           ;protocol.c: 422: return pdata;
 10403  0C17  0871               	movf	PROTOCOL_I2C_SEN@pdata,w
 10404  0C18  0008               	return
 10405  0C19                     __end_of_PROTOCOL_I2C_SEN:	
 10406                           
 10407                           	psect	text62
 10408  089A                     __ptext62:	
 10409 ;; *************** function _PROTOCOL_I2C_GET *****************
 10410 ;; Defined at:
 10411 ;;		line 203 in file "protocol.c"
 10412 ;; Parameters:    Size  Location     Type
 10413 ;;		None
 10414 ;; Auto vars:     Size  Location     Type
 10415 ;;		None
 10416 ;; Return value:  Size  Location     Type
 10417 ;;                  1    wreg      unsigned char 
 10418 ;; Registers used:
 10419 ;;		wreg
 10420 ;; Tracked objects:
 10421 ;;		On entry : 0/0
 10422 ;;		On exit  : 0/0
 10423 ;;		Unchanged: 0/0
 10424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;Total ram usage:        0 bytes
 10430 ;; Hardware stack levels used:    1
 10431 ;; This function calls:
 10432 ;;		Nothing
 10433 ;; This function is called by:
 10434 ;;		_I2C1_StatusCallback
 10435 ;; This function uses a non-reentrant model
 10436 ;;
 10437                           
 10438                           
 10439                           ;psect for function _PROTOCOL_I2C_GET
 10440  089A                     _PROTOCOL_I2C_GET:	
 10441                           
 10442                           ;protocol.c: 204: return value;
 10443                           
 10444                           ;incstack = 0
 10445                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
 10446  089A  0020               	movlb	0	; select bank0
 10447  089B  0863               	movf	_value,w
 10448  089C  0008               	return
 10449  089D                     __end_of_PROTOCOL_I2C_GET:	
 10450                           
 10451                           	psect	text63
 10452  08AF                     __ptext63:	
 10453 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
 10454 ;; Defined at:
 10455 ;;		line 195 in file "protocol.c"
 10456 ;; Parameters:    Size  Location     Type
 10457 ;;		None
 10458 ;; Auto vars:     Size  Location     Type
 10459 ;;		None
 10460 ;; Return value:  Size  Location     Type
 10461 ;;                  1    wreg      void 
 10462 ;; Registers used:
 10463 ;;		None
 10464 ;; Tracked objects:
 10465 ;;		On entry : 0/0
 10466 ;;		On exit  : 0/0
 10467 ;;		Unchanged: 0/0
 10468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;Total ram usage:        0 bytes
 10474 ;; Hardware stack levels used:    1
 10475 ;; This function calls:
 10476 ;;		Nothing
 10477 ;; This function is called by:
 10478 ;;		_I2C1_StatusCallback
 10479 ;; This function uses a non-reentrant model
 10480 ;;
 10481                           
 10482                           
 10483                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
 10484  08AF                     _PROTOCOL_Backplane_Slave_Enabled:	
 10485                           
 10486                           ;protocol.c: 196: backplane_slave_enabled = 1;
 10487                           
 10488                           ;incstack = 0
 10489                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
 10490  08AF  0021               	movlb	1	; select bank1
 10491  08B0  01B9               	clrf	_backplane_slave_enabled^(0+128)
 10492  08B1  0AB9               	incf	_backplane_slave_enabled^(0+128),f
 10493  08B2  0008               	return
 10494  08B3                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
 10495                           
 10496                           	psect	text64
 10497  09B6                     __ptext64:	
 10498 ;; *************** function _EUSART_Transmit_ISR *****************
 10499 ;; Defined at:
 10500 ;;		line 165 in file "mcc_generated_files/eusart.c"
 10501 ;; Parameters:    Size  Location     Type
 10502 ;;		None
 10503 ;; Auto vars:     Size  Location     Type
 10504 ;;		None
 10505 ;; Return value:  Size  Location     Type
 10506 ;;                  1    wreg      void 
 10507 ;; Registers used:
 10508 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10509 ;; Tracked objects:
 10510 ;;		On entry : 0/0
 10511 ;;		On exit  : 0/0
 10512 ;;		Unchanged: 0/0
 10513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10516 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10517 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10518 ;;Total ram usage:        1 bytes
 10519 ;; Hardware stack levels used:    1
 10520 ;; This function calls:
 10521 ;;		Nothing
 10522 ;; This function is called by:
 10523 ;;		_INTERRUPT_InterruptManager
 10524 ;; This function uses a non-reentrant model
 10525 ;;
 10526                           
 10527                           
 10528                           ;psect for function _EUSART_Transmit_ISR
 10529  09B6                     _EUSART_Transmit_ISR:	
 10530                           
 10531                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 10532                           
 10533                           ;incstack = 0
 10534                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10535  09B6  3008               	movlw	8
 10536  09B7  027A               	subwf	_eusartTxBufferRemaining,w	;volatile
 10537  09B8  1803               	skipnc
 10538  09B9  29CE               	goto	i1l241
 10539                           
 10540                           ;eusart.c: 170: {
 10541                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
 10542  09BA  087B               	movf	_eusartTxTail,w
 10543  09BB  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 10544  09BC  0086               	movwf	6
 10545  09BD  0187               	clrf	7
 10546  09BE  0801               	movf	1,w
 10547  09BF  0023               	movlb	3	; select bank3
 10548  09C0  009A               	movwf	26	;volatile
 10549  09C1  3001               	movlw	1
 10550  09C2  00F0               	movwf	??_EUSART_Transmit_ISR
 10551  09C3  0870               	movf	??_EUSART_Transmit_ISR,w
 10552  09C4  07FB               	addwf	_eusartTxTail,f	;volatile
 10553                           
 10554                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 10555  09C5  3008               	movlw	8
 10556  09C6  027B               	subwf	_eusartTxTail,w	;volatile
 10557  09C7  1803               	btfsc	3,0
 10558                           
 10559                           ;eusart.c: 173: {
 10560                           ;eusart.c: 174: eusartTxTail = 0;
 10561  09C8  01FB               	clrf	_eusartTxTail	;volatile
 10562                           
 10563                           ;eusart.c: 175: }
 10564                           ;eusart.c: 176: eusartTxBufferRemaining++;
 10565  09C9  3001               	movlw	1
 10566  09CA  00F0               	movwf	??_EUSART_Transmit_ISR
 10567  09CB  0870               	movf	??_EUSART_Transmit_ISR,w
 10568  09CC  07FA               	addwf	_eusartTxBufferRemaining,f	;volatile
 10569                           
 10570                           ;eusart.c: 177: }
 10571  09CD  0008               	return
 10572  09CE                     i1l241:	
 10573                           
 10574                           ;eusart.c: 178: else
 10575                           ;eusart.c: 179: {
 10576                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 10577  09CE  0021               	movlb	1	; select bank1
 10578  09CF  1211               	bcf	17,4	;volatile
 10579  09D0  0008               	return
 10580  09D1                     __end_of_EUSART_Transmit_ISR:	
 10581                           
 10582                           	psect	text65
 10583  099B                     __ptext65:	
 10584 ;; *************** function _EUSART_Receive_ISR *****************
 10585 ;; Defined at:
 10586 ;;		line 184 in file "mcc_generated_files/eusart.c"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;		None
 10589 ;; Auto vars:     Size  Location     Type
 10590 ;;		None
 10591 ;; Return value:  Size  Location     Type
 10592 ;;                  1    wreg      void 
 10593 ;; Registers used:
 10594 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10595 ;; Tracked objects:
 10596 ;;		On entry : 0/0
 10597 ;;		On exit  : 0/0
 10598 ;;		Unchanged: 0/0
 10599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10602 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10603 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10604 ;;Total ram usage:        1 bytes
 10605 ;; Hardware stack levels used:    1
 10606 ;; This function calls:
 10607 ;;		Nothing
 10608 ;; This function is called by:
 10609 ;;		_INTERRUPT_InterruptManager
 10610 ;; This function uses a non-reentrant model
 10611 ;;
 10612                           
 10613                           
 10614                           ;psect for function _EUSART_Receive_ISR
 10615  099B                     _EUSART_Receive_ISR:	
 10616                           
 10617                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
 10618                           
 10619                           ;incstack = 0
 10620                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10621  099B  0023               	movlb	3	; select bank3
 10622  099C  1C9D               	btfss	29,1	;volatile
 10623  099D  29A0               	goto	i1l3769
 10624                           
 10625                           ;eusart.c: 188: {
 10626                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 10627  099E  121D               	bcf	29,4	;volatile
 10628                           
 10629                           ;eusart.c: 192: RCSTAbits.CREN = 1;
 10630  099F  161D               	bsf	29,4	;volatile
 10631  09A0                     i1l3769:	
 10632                           
 10633                           ;eusart.c: 193: }
 10634                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
 10635  09A0  0819               	movf	25,w	;volatile
 10636  09A1  00F0               	movwf	??_EUSART_Receive_ISR
 10637  09A2  0020               	movlb	0	; select bank0
 10638  09A3  0869               	movf	_eusartRxHead,w
 10639  09A4  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 10640  09A5  0086               	movwf	6
 10641  09A6  0187               	clrf	7
 10642  09A7  0870               	movf	??_EUSART_Receive_ISR,w
 10643  09A8  0081               	movwf	1
 10644  09A9  3001               	movlw	1
 10645  09AA  00F0               	movwf	??_EUSART_Receive_ISR
 10646  09AB  0870               	movf	??_EUSART_Receive_ISR,w
 10647  09AC  07E9               	addwf	_eusartRxHead,f	;volatile
 10648                           
 10649                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 10650  09AD  3008               	movlw	8
 10651  09AE  0269               	subwf	_eusartRxHead,w	;volatile
 10652  09AF  1803               	btfsc	3,0
 10653                           
 10654                           ;eusart.c: 198: {
 10655                           ;eusart.c: 199: eusartRxHead = 0;
 10656  09B0  01E9               	clrf	_eusartRxHead	;volatile
 10657                           
 10658                           ;eusart.c: 200: }
 10659                           ;eusart.c: 201: eusartRxCount++;
 10660  09B1  3001               	movlw	1
 10661  09B2  00F0               	movwf	??_EUSART_Receive_ISR
 10662  09B3  0870               	movf	??_EUSART_Receive_ISR,w
 10663  09B4  07E7               	addwf	_eusartRxCount,f	;volatile
 10664  09B5  0008               	return
 10665  09B6                     __end_of_EUSART_Receive_ISR:	
 10666  007E                     btemp	set	126	;btemp
 10667  007E                     int$flags	set	126
 10668  007E                     wtemp0	set	126


Data Sizes:
    Strings     186
    Constant    10
    Data        4
    BSS         175
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     60      80
    BANK1            80      0      67
    BANK2            80      0      48
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_4(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), 

    PROTOCOL_I2C_Send_float@pbuffer	PTR float  size(1) Largest target is 9
		 -> PROTOCOL_Send_float@pbuf(BANK1[3]), inv_handler@values(BANK0[9]), 

    PROTOCOL_I2C_Set_TLV@pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> inv_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), inv_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_1(CODE[11]), 

    S832$pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    readbuf.pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_10(CODE[4]), buf(BANK2[48]), STR_2(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_1(CODE[11]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[10]), STR_45(CODE[9]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> STR_36(CODE[14]), STR_35(CODE[9]), STR_34(CODE[10]), STR_33(CODE[9]), 
		 -> STR_32(CODE[10]), STR_31(CODE[9]), STR_30(CODE[7]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[9]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[10]), STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[8]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[9]), STR_17(CODE[6]), 
		 -> STR_16(CODE[10]), STR_13(CODE[10]), STR_9(CODE[10]), STR_5(CODE[10]), 
		 -> STR_3(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), 

    I2C1_StatusCallback@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_StatusCallback
    _I2C1_StatusCallback->i1_PROTOCOL_SAV
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _PROTOCOL_Loop->_inv_handler
    _inv_handler->_get_accel
    _get_accel->___ftdiv
    ___lwtoft->___ftpack
    ___ftdiv->___ftadd
    ___ftadd->___ftpack
    _PROTOCOL_I2C_Send_float->___fttol
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _abs->___awmod
    ___fttol->___ftmul
    ___ftmul->___ftpack
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   27638
                                             59 BANK0      1     1      0
                     _ADC_Initialize
                  _EUSART_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   27100
                                             55 BANK0      4     4      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                        _inv_handler *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    1670
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) _inv_handler                                         10    10      0   19699
                                             45 BANK0     10    10      0
            _PROTOCOL_I2C_Send_float
                          _get_accel
 ---------------------------------------------------------------------------------
 (3) _get_accel                                            8     4      4    7841
                                             37 BANK0      8     4      4
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
                            ___ftadd
                            ___ftdiv
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (4) ___lwtoft                                             4     1      3    2156
                                              8 BANK0      4     1      3
            _ADC_GetConversionResult (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             16    10      6    2478
                                             21 BANK0     16    10      6
                            ___ftadd (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3140
                                              8 BANK0     13     7      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_SelectChannel                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_GetConversionResult                              2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_I2C_Send_float                              6     5      1   11784
                                             38 BANK0      6     5      1
               _PROTOCOL_I2C_Set_TLV
                            ___awdiv
                            ___awmod
                             ___bmul
                            ___ftmul
                            ___fttol
                                _abs
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              26    20      6    4238
                                             14 BANK0     22    16      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                                _abs (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      66
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     526
                                              7 BANK0      4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             14    10      4     444
                                             24 BANK0     14    10      4
                             ___bmul (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    2780
                                              8 BANK0     16    10      6
                             ___bmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2070
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     221
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              7     3      4    1216
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1220
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _PROTOCOL_I2C_Set_TLV                                 5     3      2     625
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     830
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     474
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     240
                                              3 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     196
                                              3 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     196
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         1     1      0      90
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8     538
                                              1 BANK0     10     2      8
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C1_Initialize                                      2     2      0       0
                                              0 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0     233
                                              9 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (8) _I2C1_ISR                                             2     2      0     233
                                              7 COMMON     2     2      0
                _I2C1_StatusCallback
 ---------------------------------------------------------------------------------
 (9) _I2C1_StatusCallback                                  3     3      0     187
                                              4 COMMON     3     3      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                 _PROTOCOL_Read_Lock
                     i1_PROTOCOL_EXT
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SET                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (11) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_EXT                                      1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Read_Lock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_SEN                                    2     2      0      26
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _EUSART_Initialize
   _I2C1_Initialize
     _PROTOCOL_Read_Device_Address
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _inv_handler *
       _PROTOCOL_I2C_Send_float
         _PROTOCOL_I2C_Set_TLV
         ___awdiv
         ___awmod
         ___bmul
         ___ftmul
           ___bmul (ARG)
           ___ftpack (ARG)
         ___fttol
           ___bmul (ARG)
           ___ftmul (ARG)
             ___bmul (ARG)
             ___ftpack (ARG)
         _abs
           ___awmod (ARG)
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
       _get_accel
         _ADC_GetConversionResult
         _ADC_IsConversionDone
         _ADC_SelectChannel
         _ADC_StartConversion
         ___ftadd
           ___ftpack
         ___ftdiv
           ___ftadd (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___lwtoft
           _ADC_GetConversionResult (ARG)
           ___ftpack (ARG)
     _printf *
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _abs (ARG)
         ___awmod (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _EUSART_Write
     _strncmp *
   _TMR0_Initialize
   _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_ISR
     _I2C1_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       _PROTOCOL_Read_Lock
       i1_PROTOCOL_EXT
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      43       7       83.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      30       9       60.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     101      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     101      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Sep 20 08:33:47 2017

                                         _i 005D                                           _j 005C  
                                         pc 0002                      __end_ofi1_PROTOCOL_EXT 0897  
                    __end_ofi1_PROTOCOL_SAV 0900                      __end_ofi1_PROTOCOL_SET 08DA  
                            ___bmul@product 0022                      __end_ofi1_PROTOCOL_STA 08BB  
                    __end_ofi1_PROTOCOL_STP 08A6             __end_of_TMR0_HasOverflowOccured 08C3  
                               __CFG_CP$OFF 0000                                ___awdiv@sign 0026  
                       ___wmul@multiplicand 0022                             _timer0ReloadVal 0066  
                              ___ftadd@exp1 0034                                ___ftadd@exp2 0033  
                               __CFG_LVP$ON 0000                                ___ftadd@sign 0032  
                                       l152 08DE                                         l229 0AD4  
                                       l326 0ABD                                         l504 023D  
                                       l452 008F                                         l480 013C  
                                       l464 015C                                         l628 023E  
                                       l487 01B2                                         l898 09F5  
                              __CFG_CPD$OFF 0000                                         _abs 0955  
                                       _buf 0120                                         _cnt 0064  
                              ___awmod@sign 0026                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_IESO$ON 0000  
                              ?_EUSART_Read 0070                                ___ftdiv@cntr 003F  
                          __end_of_I2C1_ISR 0B12                                ___ftdiv@sign 0044  
                                      ?_abs 0027                                        l1109 05DF  
                                      l3003 0CFF                                        l3021 0D1E  
                                      l1085 0D8C                                        l1086 0D94  
                                      l1078 0D79                                        l3031 0D39  
                                      l3111 05AB                                        l3009 0D0A  
                                      l3201 0F79                                        l1169 0E89  
                                      l3113 05B5                                        l3105 0598  
                                      l3035 0D41                                        l3027 0D30  
                                      l3019 0D12                                        l3051 0C2B  
                                      l3123 05D1                                        l3115 05BA  
           __end_of_PROTOCOL_I2C_Send_float 0540                                        l3061 0C3D  
                                      l3213 0FB4                                        l3133 0603  
                                      l3125 05DB                                        l3117 05BE  
                                      l3047 0C24                                        l3143 061E  
                                      l3073 0C5A                                        l3065 0C49  
                                      l3225 0FD0                                        l3217 0FBC  
                                      l3401 03CA                                        l3129 05F1  
                                      l3153 0EBA                                        l3059 0C31  
                                      l3403 041D                                        l3083 0568  
                                      l3069 0C52                                        l3229 0FD8  
                                      l3245 0E35                                        l3421 042D  
                                      l3405 0429                                        l3093 057E  
                                      l3181 0F2A                                        l3173 0F11  
                                      l3271 0E80                                        l3263 0E65  
                                      l3431 0510                                        l3423 04A6  
                                      l3415 046B                                        l3087 056F  
                                      l3159 0ED0                                _tmr_overflow 00BB  
                                      l2721 0953                                        l3273 0E8C  
                                      l3265 0E73                                        l3417 0470  
                                      l3195 0F63                                        l2811 0B31  
                                      l3277 0E9A                                        l2805 0B19  
                                      l2709 0AE8                                        l3429 04E0  
                                      l3613 07F4                                        l3551 0A46  
                                      l2727 09EF                                        l2751 0D65  
                                      l2743 0D4F                                        l2807 0B25  
                                      l2815 0B3A                                        l2911 0181  
                                      l3625 0DB5                                        l3609 07DC  
                                      l3617 07BE                                        l3643 0DDA  
                                      l3627 0DAD                                        l2747 0D56  
                                      l2931 01CE                                        l2923 01A6  
                                      l2907 0176                                        l2851 00AA  
                                      l3379 0C68                                        l3619 07FD  
                                      l3653 0E17                                        l3645 0DDE  
                                      l3637 0DD2                                        l3629 0DBA  
                                      l2757 0D7E                                        l2749 0D60  
                                      l2781 0B76                                        l2933 01D1  
                                      l2917 0187                                        l2845 0094  
                                      l3813 0265                                        l3647 0E07  
                                      l2759 0D86                                        l2783 0B82  
                                      l2695 0AC9                                        l2951 01FB  
                                      l2871 00EF                                        l2847 009D  
                                      l2839 008A                                        l3815 0266  
                                      l2793 0B9D                                        l2961 0208  
                                      l2945 01EA                                        l2881 010C  
                                      l2873 00FD                                        l3825 0276  
                                      l2947 01EE                                        l2955 0203  
                                      l2939 01DB                                        l2883 011B  
                                      l2867 00ED                                        l2859 00D9  
                                      l2963 006E                                        l2789 0B94  
                                      l2877 010A                                        l3853 02ED  
                                      l3845 02AF                                        l2983 0977  
                                      l2887 0128                                        l2895 013E  
                                      l3871 036E                                        l3863 032B  
                                      l2889 0133                                        l3857 0306  
                                      l3849 02D4                                        l2987 097D  
                                      l3883 03BC                                        l3867 034A  
                                      l3877 0391                                        STR_1 064E  
                                      STR_2 06B8                                        STR_3 06C5  
                                      STR_4 06E6                                        STR_5 0677  
                                      STR_6 06F6                                        STR_7 06DE  
                                      STR_8 06EA                                        STR_9 0681  
                                      u2205 0D74                                        _LATA 010C  
                                      _LATB 010D                                        u2135 09F6  
                                      u3015 05AC                                        _LATC 010E  
                                      u2145 09FB                                        u2225 0D81  
                                      u2315 0B83                                        u2325 0B8D  
                                      u3045 05BF                                        u2335 0B95  
                                      u2265 0D9B                                        u2185 0D5B  
                                      u3305 0FDF                                        u3225 0F85  
                                      u3145 0EE2                                        u3235 0F95  
                                      u3075 05D2                                        u3155 0EF2  
                                      u2365 0B1C                                        u2525 019C  
                                      u3165 0F12                                        u3255 0FBD  
                                      u3335 0E3C                                        u2295 0B79  
                                      u3175 0F21                                        u3265 0FC3  
                                      u2385 0B2B                                        u2465 0103  
                                      u3505 0466                                        u3185 0F2B  
                                      u4067 0A89                                        u2395 0B32  
                                      u3365 0E66                                        u2565 01C1  
                                      u2735 0D15                                        u3295 0FD9  
                                      u3535 04DB                                        u2755 0D1F  
                                      u2835 0C34                                        u3395 0E81  
                                      u2765 0D29                                        u2775 0D31  
                                      u2855 0C43                                        u2865 0C4A  
                                      i1l64 0AFF                                        u2985 0599  
                                      i1l86 06FC                                        _PLLR 04D6  
                                      _TMR0 0015                                        _WPUA 020C  
                                      _WPUB 020D                                        _WPUC 020E  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                                      abs@a 0027                                        _data 00B8  
                                      _atoi 0DAB                                        _main 0B3F  
                              ___ftpack@arg 0020                                ___ftpack@exp 0023  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                               __CFG_BOREN$ON 0000  
                                      start 0030                           ___bmul@multiplier 0023  
                             __CFG_MCLRE$ON 0000                                ___ftmul@cntr 0036  
                              ___ftmul@sign 0037                         _I2C1_StatusCallback 06FA  
                              ___fttol@exp1 0045                                       ??_abs 0029  
                           ?i1_PROTOCOL_EXT 0070                             ?i1_PROTOCOL_SAV 0070  
                           ?i1_PROTOCOL_SET 0070                   __size_of_DATAEE_WriteByte 0023  
                           ?i1_PROTOCOL_STA 0070                                ___fttol@lval 0041  
                           ?i1_PROTOCOL_STP 0070                     __end_of_TMR0_Initialize 0937  
                             __CFG_PLLEN$ON 0000                               ?_EUSART_Write 0070  
            __size_of_OSCILLATOR_Initialize 0007               __end_of_OSCILLATOR_Initialize 08E1  
                                     ?_atoi 0026                                       ?_main 0070  
                           __end_of___awdiv 0D46                             __end_of___ftadd 0636  
                                     STR_10 06E2                                       STR_11 06F2  
                                     STR_12 06EE                                       STR_20 06CA  
                                     STR_13 0663                                       STR_14 06DA  
                                     STR_22 06CE                                       STR_30 06B1  
                                     STR_15 06D6                                       STR_24 0695  
                                     STR_32 068B                                       STR_16 0659  
                                     STR_17 06BF                               __CFG_WDTE$OFF 0000  
                                     STR_18 06A8                                       STR_34 066D  
                                     STR_19 06D2                                       STR_35 069F  
                                     STR_36 0640                             __end_of___awmod 0C5F  
                                     STR_45 068C                                       STR_46 068B  
                                     STR_47 066E                                       STR_48 066D  
                           __end_of___ftdiv 0F4C                             __end_of___ftmul 1000  
                           ___awdiv@divisor 0020                             __end_of___fttol 0EA3  
                           __end_of___lwdiv 0BA2                                       i1l103 071F  
                                     i1l124 07BD                                       i1l241 09CE  
                                     i1l173 0015                                       i1l326 0A1C  
                                     i1l175 0021                             __end_of___lwmod 0B3F  
                                     i1l179 002B                             ___awdiv@counter 0025  
                PROTOCOL_I2C_Set_TLV@length 0020                                       _RCREG 0199  
                                     _RCSTA 019D                                       _TRISA 008C  
                                     _TRISB 008D                                       _TRISC 008E  
                                     _TXREG 019A                                       _TXSTA 019E  
          __size_of_ADC_GetConversionResult 0009                __size_of_PROTOCOL_Initialize 004E  
                PROTOCOL_I2C_Set_TLV@status 0024                           ??_I2C1_Initialize 0020  
                      ?_I2C1_StatusCallback 0070                             _DATAEE_ReadByte 091C  
           ??_PROTOCOL_Write_Device_Address 0023                             __end_of_dpowers 0640  
                            _WDT_Initialize 08C3              PROTOCOL_Initialize@inv_handler 0026  
                           __end_of_isdigit 0955                                ?_inv_handler 0070  
                             ___ftpack@sign 0024                                       _value 0063  
                                     atoi@a 002B                                       atoi@s 002D  
                                     _putch 08C7                                       pclath 000A  
                    ??_PROTOCOL_I2C_Set_TLV 0022                                       status 0003  
                                     wtemp0 007E                             __end_of_strncmp 0800  
                           __initialization 0032                                __end_of_atoi 0E1C  
                              __end_of_main 0B6D                              ??_EUSART_Write 0020  
               ?_INTERRUPT_InterruptManager 0070            PROTOCOL_Initialize@start_handler 0023  
                                    ??_atoi 0028                                      ??_main 005B  
                             ___fttol@sign1 0040                           inv_handler@values 004E  
                        _PROTOCOL_Read_Lock 08A0                      __end_of_WDT_Initialize 08C7  
                     ??_I2C1_StatusCallback 0074                  __end_ofi1_DATAEE_WriteByte 0A25  
             __size_of_ADC_IsConversionDone 0007                                      _ADCON0 009D  
                                    _ADCON1 009E                                      i1S3951 0800  
                                    _ADRESH 009C                                      _EEADRH 0192  
                                    _ADRESL 009B                                      _EEADRL 0191  
                                    _EEDATH 0194                                      _EEDATL 0193  
                                    _EECON2 0196                            ___awdiv@dividend 0022  
                                    _ANSELA 018C                                      ?_putch 0070  
                                    _ANSELB 018D                                      _ANSELC 018E  
                          __end_of___ftpack 0DAB                         ?_PROTOCOL_Read_Lock 0070  
                        _PROTOCOL_Loop_Func 00B6                                      i1l3331 0BEC  
                                    i1l3341 0C03                                      i1l3325 0BDE  
                                    i1l3501 0775                                      i1l3335 0BF9  
                                    i1l3511 078E                                      i1l3329 0BE6  
                                    i1l3345 0C08                                      i1l3513 0791  
                                    i1l3505 0778                                      i1l3347 0C17  
                                    i1l3515 0796                                      i1l3523 07A7  
                                    i1l3461 070F                                      i1l3509 0782  
                                    i1l3453 0700                                      i1l3519 07A2  
                                    i1l3463 0713                                      i1l3455 0706  
                                    i1l3527 07B3                                      i1l3465 0717  
                                    i1l3473 0724                                      i1l3491 075A  
                                    i1l3467 071B                                      i1l3459 070B  
                                    i1l3485 074F                                      i1l3469 0722  
                                    i1l3477 073C                                      i1l3479 0745  
                                    i1l3681 0AFD                                      i1l3687 0B06  
                                    i1l3769 09A0                                      i1l3689 0B08  
                          __end_of___lwtoft 099B                                      _OSCCON 0099  
          __size_of_TMR0_HasOverflowOccured 0004                                      _TMR0IF 005A  
                                    _SPBRGH 019C                                      _SPBRGL 019B  
                                    _WDTCON 0097              PROTOCOL_Initialize@set_handler 0025  
                            __CFG_PWRTE$OFF 0000                   PROTOCOL_Initialize@scaler 0028  
                                    ___bmul 0974                                      ___wmul 09EC  
                                 ??___awdiv 0024                                   ??___ftadd 002E  
                            __CFG_STVREN$ON 0000                                   ??___awmod 0024  
                                 ??___ftdiv 003B                                   ??___ftmul 002E  
                                 ??___fttol 003C                                   ??___lwdiv 0024  
                      ??_PROTOCOL_Read_Lock 0070                                   ??___lwmod 002C  
                              _type_no_data 00E2                         _EUSART_Transmit_ISR 09B6  
                          ?_TMR0_Initialize 0070                                      _locked 0062  
                                 ?_I2C1_ISR 0070                            ___awdiv@quotient 0027  
                           ___awmod@divisor 0020            __size_of_PROTOCOL_I2C_Send_float 017F  
                           ___awmod@counter 0025                                      _printf 0069  
                   __end_of_DATAEE_ReadByte 0929                       ___ftmul@f3_as_product 0033  
                              __pdataCOMMON 007D                                   ??_isdigit 0020  
                  __end_of_PROTOCOL_I2C_GET 089D                    __end_of_PROTOCOL_I2C_SEN 0C19  
                  __end_of_PROTOCOL_I2C_WHO 08A0                             ?_WDT_Initialize 0070  
             i1DATAEE_WriteByte@GIEBitValue 0072                                   ??_strncmp 0025  
                 PROTOCOL_Send_uint8_t@pbuf 00D9                        ?_EUSART_Transmit_ISR 0070  
                      __size_of_EUSART_Read 001F                     __end_of__initialization 0065  
                                ___ftadd@f1 0028                                  ___ftadd@f2 002B  
                                ___ftdiv@f1 0038                                  ___ftdiv@f2 0035  
                                ___ftdiv@f3 0040                         ___bmul@multiplicand 0020  
                                ___ftmul@f1 0028                                  ___ftmul@f2 002B  
                                ___fttol@f1 0038                __size_of_ADC_StartConversion 0003  
                            __pcstackCOMMON 0070                                __pidataBANK0 0002  
                              __pidataBANK1 0898                            _DATAEE_WriteByte 0AA4  
                             __end_of_putch 08CD                                  ??_I2C1_ISR 0077  
                     __end_of_PROTOCOL_Loop 03C1                                  ___lwtoft@c 0028  
                   _ADC_GetConversionResult 0909                              _OPTION_REGbits 0095  
                        __size_of_get_accel 0047                     PROTOCOL_Send_float@pbuf 00D1  
                     ??_EUSART_Transmit_ISR 0070                                     ??_putch 0022  
                                __pbssBANK0 005C                                  __pbssBANK1 00A0  
                                __pbssBANK2 0120                                  __pbssBANK3 01A0  
                    i1DATAEE_WriteByte@bAdd 0071                        __end_of_EUSART_Write 0AEB  
                      __size_of_inv_handler 003B                 __size_of_EUSART_Receive_ISR 001B  
                          ??i1_PROTOCOL_EXT 0070                            ??i1_PROTOCOL_SAV 0073  
                          ??i1_PROTOCOL_SET 0070                            ??i1_PROTOCOL_STA 0070  
                          ??i1_PROTOCOL_STP 0070                         _PROTOCOL_Initialize 0CA6  
                                __pmaintext 0B3F                                     ?___bmul 0020  
                                   ?___wmul 0020                                  __pintentry 0004  
                           _I2C1_Initialize 0A83                                     _BAUDCON 019F  
                                _device_id_ 00DA                                   ?___ftpack 0020  
                                   _APFCON0 011D                                     _APFCON1 011E  
                                   ?_printf 002E                     __size_of_ADC_Initialize 0008  
                I2C1_StatusCallback@ext_buf 01A0                  I2C1_StatusCallback@ext_cnt 006A  
                I2C1_StatusCallback@ext_len 006B                                   ?___lwtoft 0028  
                          ?_DATAEE_ReadByte 0070                               _eusartRxCount 0067  
         I2C1_StatusCallback@slaveWriteType 006D                  PROTOCOL_Send_uint16_t@pbuf 00D6  
                      ?_PROTOCOL_Initialize 0021                                     _OSCTUNE 0098  
                                   _SSP1ADD 0212                                     _SSP1BUF 0211  
                                   _SSP1MSK 0213                      _PROTOCOL_Start_Handler 00E0  
                   _TMR0_HasOverflowOccured 08BF                        DATAEE_WriteByte@bAdd 0021  
                         __end_of_get_accel 0CA6                             __size_of___bmul 0012  
                                   ___awdiv 0CF4                                     ___ftadd 0540  
                                   ___awmod 0C19                               ?_PROTOCOL_INV 0070  
                             ?_PROTOCOL_EXT 0070                               ?_PROTOCOL_SAV 0070  
                                   ___ftdiv 0EA3                               ?_PROTOCOL_SET 0070  
                             ?_PROTOCOL_STA 0070                               ?_PROTOCOL_RST 0070  
                             ?_PROTOCOL_STP 0070                             __size_of___wmul 001C  
                                   ___ftmul 0F4C                                     ___fttol 0E1C  
                                   ___lwdiv 0B6D                                     ___lwmod 0B12  
                   _PROTOCOL_I2C_Send_float 03C1                   ??_ADC_GetConversionResult 0022  
                                ??___ftpack 0025                                     __ptext1 08C3  
                                   __ptext2 0929                                     __ptext3 023E  
                                   __ptext4 07BE                                     __ptext5 0BA2  
                                   __ptext6 0C5F                                     __ptext7 0986  
                                   __ptext8 0EA3                                     __ptext9 0540  
                           __size_of_printf 01D5                                  ??___lwtoft 002B  
                                   _dpowers 0636                       _OSCILLATOR_Initialize 08DA  
                              __size_of_abs 000F  PROTOCOL_Write_Device_Address@device_id_i2c 0024  
                     ??_PROTOCOL_Initialize 0029                                     _isdigit 0946  
                                   _readbuf 00CC                                     _sec_cnt 005F  
                          ___awmod@dividend 0022                                     _invoked 0060  
                  ??_PIN_MANAGER_Initialize 0020                                     _sendbuf 00BC  
                                   _tmr_cnt 005E                                     clrloop0 08CE  
                                   _running 0061                                     _strncmp 07BE  
                      end_of_initialization 0065                  _PROTOCOL_Extension_Handler 00B4  
             __size_of_PROTOCOL_I2C_Set_TLV 0020                          i1_DATAEE_WriteByte 0A08  
                         _EUSART_Initialize 09D1                     __end_of_I2C1_Initialize 0AA4  
              __end_of_ADC_IsConversionDone 08EF                          ?_EUSART_Initialize 0070  
                                 _RCSTAbits 019D                                     printf@c 0043  
                                   printf@f 002E                              ??_PROTOCOL_INV 0070  
                            ??_PROTOCOL_EXT 0020                              ??_PROTOCOL_SAV 0023  
                            ??_PROTOCOL_SET 0020                              ??_PROTOCOL_STA 0020  
                            ??_PROTOCOL_RST 0070                              ??_PROTOCOL_STP 0020  
                       ?i1_DATAEE_WriteByte 0070               PROTOCOL_I2C_Send_float@length 0049  
                              __pstringtext 0636                         ??_EUSART_Initialize 0020  
               __end_of_I2C1_StatusCallback 07BE                            ??_WDT_Initialize 0020  
                         __size_of_I2C1_ISR 0027                            __CFG_FOSC$INTOSC 0000  
                         ?_PROTOCOL_I2C_GET 0070                           ?_PROTOCOL_I2C_SEN 0070  
                         ?_PROTOCOL_I2C_WHO 0070                       __size_of_EUSART_Write 0024  
                       _ADC_StartConversion 08AC                   ??_TMR0_HasOverflowOccured 0020  
                        ??_PROTOCOL_I2C_GET 0070                          ??_PROTOCOL_I2C_SEN 0070  
                        ??_PROTOCOL_I2C_WHO 0070                        ??i1_DATAEE_WriteByte 0071  
                                _tmr_scaler 006E                    __end_of_DATAEE_WriteByte 0AC7  
                 __end_of_EUSART_Initialize 09EC                                 ___ftdiv@exp 0043  
                               printf@width 0041                        i1PROTOCOL_SET@value_ 0071  
                               ___ftmul@exp 0032                        ?_ADC_StartConversion 0070  
                 ??_PROTOCOL_I2C_Send_float 0047                    I2C1_StatusCallback@pdata 0076  
                            __end_of___bmul 0986                 __size_of_PROTOCOL_Read_Lock 0003  
                            __end_of___wmul 0A08                               __pidataCOMMON 0899  
                              _EUSART_Write 0AC7                              _ADC_Initialize 08EF  
                    ?_OSCILLATOR_Initialize 0070                              __end_of_printf 023E  
                            PROTOCOL_Loop@c 0059                         start_initialization 0032  
                  __size_of_TMR0_Initialize 000E             __size_of_PIN_MANAGER_Initialize 001F  
                               __end_of_abs 0964                               ??_EUSART_Read 0020  
                               putch@txData 0022                         DATAEE_ReadByte@bAdd 0020  
                          ?_I2C1_Initialize 0070                       ??_ADC_StartConversion 0020  
                                  ??___bmul 0021                            I2C1_ISR@i2c_data 0078  
                                  ??___wmul 0024                    PROTOCOL_Send_int8_t@pbuf 00D8  
      __end_of_PROTOCOL_Read_Device_Address 08A9       __size_of_PROTOCOL_Read_Device_Address 0003  
              _PROTOCOL_Read_Device_Address 08A6                      __end_of_ADC_Initialize 08F7  
                               __pdataBANK0 006E                                 __pdataBANK1 00E2  
                                  ??_printf 0034                           __size_of___ftpack 0065  
                   i1DATAEE_WriteByte@bData 0070                 __end_of_EUSART_Transmit_ISR 09D1  
                               __pbssCOMMON 007A                                   ___latbits 0002  
                         __size_of___lwtoft 0015                               __pcstackBANK0 0020  
          I2C1_StatusCallback@i2c_bus_state 0075                        _ADC_IsConversionDone 08E8  
                      _PROTOCOL_Inv_Handler 00B2                                _isdigit$1239 0020  
                             ??_inv_handler 004D                        __end_of_PROTOCOL_INV 08B7  
                      __end_of_PROTOCOL_EXT 0898                        __end_of_PROTOCOL_SAV 0909  
                      __end_of_PROTOCOL_SET 08E8                        __end_of_PROTOCOL_STA 08BF  
                      __end_of_PROTOCOL_RST 091C                        __end_of_PROTOCOL_STP 08AC  
                __end_of_EUSART_Receive_ISR 09B6             PROTOCOL_Initialize@stop_handler 0024  
                __size_of_EUSART_Initialize 001B                         __end_of_EUSART_Read 0A63  
                    __size_of_PROTOCOL_Loop 0183                                   __pnvBANK1 00DA  
     __end_of_PROTOCOL_Write_Device_Address 0946      __size_of_PROTOCOL_Write_Device_Address 000F  
             _PROTOCOL_Write_Device_Address 0937                            ___lwdiv@dividend 0022  
                    _PIN_MANAGER_Initialize 0A25                        EUSART_Read@readValue 0021  
                         _ADC_SelectChannel 0964                                    ?___awdiv 0020  
                                  ?___ftadd 0028                                    ?___awmod 0020  
                                  ?___ftdiv 0035                                    ?___ftmul 0028  
                                  ?___fttol 0038                                    ?___lwdiv 0020  
                                  ?___lwmod 0028                             ?_ADC_Initialize 0070  
                              _eusartRxHead 0069                          ?_ADC_SelectChannel 0070  
                                 _get_accel 0C5F                                _eusartTxHead 007C  
                              _eusartRxTail 0068                                _eusartTxTail 007B  
                                  _I2C1_ISR 0AEB               ?_PROTOCOL_Read_Device_Address 0070  
              ??_INTERRUPT_InterruptManager 0079                   PROTOCOL_Send_int16_t@pbuf 00D4  
                                 __pswtext1 0800                     _eusartTxBufferRemaining 007A  
                                  ?_isdigit 0070                         ??_ADC_SelectChannel 0020  
                     ?_ADC_IsConversionDone 0070                            ___lwdiv@quotient 0025  
                  __size_of_DATAEE_ReadByte 000D                                    ?_strncmp 0020  
                            __size_of_putch 0006                              _eusartRxBuffer 00A0  
                         ??_TMR0_Initialize 0020                              _eusartTxBuffer 00A8  
                            ___wmul@product 0024                                    _LATCbits 010E  
                      _PROTOCOL_Set_Handler 00DC                                   clear_ram0 08CD  
                       __end_of_inv_handler 0BDD                                    _PIE1bits 0091  
                 __end_of_ADC_SelectChannel 0974                       PROTOCOL_I2C_SEN@pdata 0071  
                  PROTOCOL_I2C_Set_TLV@type 0023         __size_of_INTERRUPT_InterruptManager 002C  
                                  _PIR1bits 0011                                    _SSP1CON1 0215  
                                  _SSP1CON2 0216                                    _SSP1CON3 0217  
              PROTOCOL_Initialize@device_id 0021                                    _SSP1STAT 0214  
                            _readbuf_status 00BA                       _PROTOCOL_Stop_Handler 00DE  
                                ?_get_accel 0045                 __end_of_PROTOCOL_Initialize 0CF4  
                                _ADCON0bits 009D                     __size_ofi1_PROTOCOL_EXT 0001  
                   __size_ofi1_PROTOCOL_SAV 0009                     __size_ofi1_PROTOCOL_SET 0007  
                   __size_ofi1_PROTOCOL_STA 0004                     __size_ofi1_PROTOCOL_STP 0003  
                         ___wmul@multiplier 0020                __end_of_PROTOCOL_I2C_Set_TLV 0A83  
                             _PROTOCOL_Loop 023E                    ADC_SelectChannel@channel 0021  
                                printf@flag 0040                                  printf@prec 0038  
                     DATAEE_WriteByte@bData 0020                    PROTOCOL_I2C_Send_float@v 004A  
                   I2C1_StatusCallback@next 006C                                 _EUSART_Read 0A44  
               PROTOCOL_I2C_Set_TLV@pbuffer 0021                           ?_DATAEE_WriteByte 0020  
  __end_of_PROTOCOL_Backplane_Slave_Enabled 08B3   __size_of_PROTOCOL_Backplane_Slave_Enabled 0004  
        ??_PROTOCOL_Backplane_Slave_Enabled 0070           ?_PROTOCOL_Backplane_Slave_Enabled 0070  
          _PROTOCOL_Backplane_Slave_Enabled 08AF                          ??_DATAEE_WriteByte 0021  
                             _slave_address 0065                                  _EECON1bits 0195  
                        PROTOCOL_SET@value_ 0021                   __size_of_PROTOCOL_I2C_GET 0003  
                 __size_of_PROTOCOL_I2C_SEN 003C                   __size_of_PROTOCOL_I2C_WHO 0003  
                  ?_ADC_GetConversionResult 0020                     ??_OSCILLATOR_Initialize 0020  
            ?_PROTOCOL_Write_Device_Address 0070                            __size_of___awdiv 0052  
                          __size_of___ftadd 00F6                            __size_of___awmod 0046  
                          __size_of___ftdiv 00A9                            __size_of___ftmul 00B4  
                          __size_of___fttol 0087                            __size_of___lwdiv 0035  
                          __size_of___lwmod 002D                                    ___ftpack 0D46  
                            ?_PROTOCOL_Loop 0070                                    ___lwtoft 0986  
                    ??_ADC_IsConversionDone 0020                       __size_of_PROTOCOL_INV 0004  
                     __size_of_PROTOCOL_EXT 0001                       __size_of_PROTOCOL_SAV 0009  
                     __size_of_PROTOCOL_SET 0007                       __size_of_PROTOCOL_STA 0004  
                     __size_of_PROTOCOL_RST 000A                       __size_of_PROTOCOL_STP 0003  
            ??_PROTOCOL_Read_Device_Address 0020                            __size_of_isdigit 000F  
                           ___lwdiv@divisor 0020                __size_of_I2C1_StatusCallback 00C4  
                           ___lwdiv@counter 0027                                    __ptext10 08AC  
                                  __ptext11 0964                                    __ptext20 0955  
                                  __ptext12 08E8                                    __ptext21 0E1C  
                                  __ptext13 0909                                    __ptext30 09EC  
                                  __ptext22 0F4C                                    __ptext14 03C1  
                                  __ptext31 08BF                                    __ptext23 0D46  
                                  __ptext15 0069                                    __ptext40 0CA6  
                                  __ptext32 0937                                    __ptext24 0974  
                                  __ptext16 08C7                                    __ptext41 091C  
                                  __ptext33 08A9                                    __ptext25 0C19  
                                  __ptext17 0AC7                                    __ptext50 06FA  
                                  __ptext42 0A25                                    __ptext34 08BB  
                                  __ptext26 0CF4                                    __ptext18 0B12  
                                  __ptext51 08A3                                    __ptext43 08DA  
                                  __ptext35 08E1                                    __ptext27 0A63  
                                  __ptext19 0B6D                                    __ptext60 089D  
                                  __ptext52 08B7                                    __ptext44 0A83  
                                  __ptext36 0900                                    __ptext28 0DAB  
                                  __ptext61 0BDD                                    __ptext53 08D3  
                                  __ptext45 08A6                                    __ptext37 0AA4  
                                  __ptext29 0946                                    __ptext62 089A  
                                  __ptext54 08F7                                    __ptext46 09D1  
                                  __ptext38 0897                                    __ptext63 08AF  
                                  __ptext55 0A08                                    __ptext47 08EF  
                                  __ptext39 0A44                                    __ptext64 09B6  
                                  __ptext56 0896                                    __ptext65 099B  
                                  __ptext57 08A0                                    __ptext49 0AEB  
                                  __ptext58 0912                                    __ptext59 08B3  
                              _SSP1CON1bits 0215                                _SSP1CON2bits 0216  
                                  _float100 00B0                 __size_ofi1_DATAEE_WriteByte 001D  
                               _inv_handler 0BA2                 DATAEE_WriteByte@GIEBitValue 0022  
                          __size_of_strncmp 0042                               __size_of_atoi 0071  
                             __size_of_main 002E                                  strncmp@len 0023  
                         ??_DATAEE_ReadByte 0020                  __size_of_ADC_SelectChannel 0010  
                   _BACKPLANE_SLAVE_ADDRESS 006F                  __end_of_PROTOCOL_Read_Lock 08A3  
                                  int$flags 007E                                    atoi@sign 002A  
                              _PROTOCOL_INV 08B3                                _PROTOCOL_EXT 0897  
                              _PROTOCOL_SAV 0900                                _PROTOCOL_SET 08E1  
                              _PROTOCOL_STA 08BB                                _PROTOCOL_RST 0912  
                              _PROTOCOL_STP 08A9                                 ??_get_accel 0049  
        __end_of_INTERRUPT_InterruptManager 0030                  _INTERRUPT_InterruptManager 0004  
                                 printf@len 003E                                   printf@val 003C  
                              _SSP1STATbits 0214                    ?_TMR0_HasOverflowOccured 0070  
                        _I2C_slaveWriteData 007D                                  _INTCONbits 000B  
                                  isdigit@c 0021                     __size_of_WDT_Initialize 0004  
                                  intlevel1 0000                 __end_of_ADC_StartConversion 08AF  
                          ___lwmod@dividend 002A                     ?_PIN_MANAGER_Initialize 0070  
           __end_of_ADC_GetConversionResult 0912                    ?_PROTOCOL_I2C_Send_float 0046  
                         __CFG_CLKOUTEN$OFF 0000                        _PROTOCOL_I2C_Set_TLV 0A63  
                                 strncmp@s1 0020                                   strncmp@s2 0022  
                          ??_ADC_Initialize 0020                     _backplane_slave_enabled 00B9  
                                  printf@ap 003B                                    printf@cp 0039  
                        _EUSART_Receive_ISR 099B                             ??_PROTOCOL_Loop 0057  
                  __size_of_I2C1_Initialize 0021                              i1_PROTOCOL_EXT 0896  
                            i1_PROTOCOL_SAV 08F7                              i1_PROTOCOL_SET 08D3  
                            i1_PROTOCOL_STA 08B7                              i1_PROTOCOL_STP 08A3  
            PROTOCOL_I2C_Send_float@pbuffer 0046                                  _OPTION_REG 0095  
                       ?_EUSART_Receive_ISR 0070                             ___lwmod@divisor 0028  
                           _TMR0_Initialize 0929                             ___lwmod@counter 002D  
                            get_accel@steps 0049                 PROTOCOL_Loop@device_address 005A  
                      PROTOCOL_EXT@char_buf 0020                          EUSART_Write@txData 0021  
              __size_of_EUSART_Transmit_ISR 001B              __end_of_PIN_MANAGER_Initialize 0A44  
                      ??_EUSART_Receive_ISR 0070                       ?_PROTOCOL_I2C_Set_TLV 0020  
                          _PROTOCOL_I2C_GET 089A                            _PROTOCOL_I2C_SEN 0BDD  
                          _PROTOCOL_I2C_WHO 089D                                 get_accel@ch 004C  
