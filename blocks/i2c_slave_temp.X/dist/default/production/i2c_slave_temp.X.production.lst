

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Sep 20 08:38:30 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text4,local,class=CODE,merge=1,delta=2,group=4
    25                           	psect	text5,local,class=CODE,merge=1,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text8,local,class=CODE,merge=1,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2,group=4
    35                           	psect	text15,local,class=CODE,merge=1,delta=2,group=4
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2,group=4
    41                           	psect	text21,local,class=CODE,merge=1,delta=2,group=4
    42                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text23,local,class=CODE,merge=1,delta=2,group=4
    44                           	psect	text24,local,class=CODE,merge=1,delta=2,group=4
    45                           	psect	text25,local,class=CODE,merge=1,delta=2,group=4
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	swtext1,local,class=CONST,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	swtext2,local,class=CONST,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
    80                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
    81                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
    82                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
    83                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
    84                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	text64,local,class=CODE,merge=1,delta=2
    87                           	dabs	1,0x7E,2
    88  0000                     
    89                           ; Version 1.41 (B)
    90                           ; Generated 21/02/2017 GMT
    91                           ; 
    92                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC16F1829 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0016                     	;# 
   145  0017                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  001E                     	;# 
   152  001F                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0095                     	;# 
   161  0096                     	;# 
   162  0097                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009A                     	;# 
   166  009B                     	;# 
   167  009B                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  0111                     	;# 
   175  0112                     	;# 
   176  0113                     	;# 
   177  0114                     	;# 
   178  0115                     	;# 
   179  0116                     	;# 
   180  0117                     	;# 
   181  0118                     	;# 
   182  0119                     	;# 
   183  011A                     	;# 
   184  011B                     	;# 
   185  011D                     	;# 
   186  011E                     	;# 
   187  018C                     	;# 
   188  018D                     	;# 
   189  018E                     	;# 
   190  0191                     	;# 
   191  0191                     	;# 
   192  0192                     	;# 
   193  0193                     	;# 
   194  0193                     	;# 
   195  0193                     	;# 
   196  0194                     	;# 
   197  0195                     	;# 
   198  0196                     	;# 
   199  0199                     	;# 
   200  019A                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019C                     	;# 
   204  019D                     	;# 
   205  019E                     	;# 
   206  019F                     	;# 
   207  020C                     	;# 
   208  020D                     	;# 
   209  020E                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0216                     	;# 
   222  0216                     	;# 
   223  0217                     	;# 
   224  0217                     	;# 
   225  0219                     	;# 
   226  021A                     	;# 
   227  021B                     	;# 
   228  021C                     	;# 
   229  021D                     	;# 
   230  021E                     	;# 
   231  021F                     	;# 
   232  0291                     	;# 
   233  0291                     	;# 
   234  0292                     	;# 
   235  0293                     	;# 
   236  0294                     	;# 
   237  0295                     	;# 
   238  0295                     	;# 
   239  0296                     	;# 
   240  0298                     	;# 
   241  0298                     	;# 
   242  0299                     	;# 
   243  029A                     	;# 
   244  029B                     	;# 
   245  029C                     	;# 
   246  029D                     	;# 
   247  029E                     	;# 
   248  0311                     	;# 
   249  0311                     	;# 
   250  0312                     	;# 
   251  0313                     	;# 
   252  0318                     	;# 
   253  0318                     	;# 
   254  0319                     	;# 
   255  031A                     	;# 
   256  038C                     	;# 
   257  038D                     	;# 
   258  038E                     	;# 
   259  0391                     	;# 
   260  0392                     	;# 
   261  0393                     	;# 
   262  0394                     	;# 
   263  0395                     	;# 
   264  0396                     	;# 
   265  039A                     	;# 
   266  039C                     	;# 
   267  039D                     	;# 
   268  039E                     	;# 
   269  039F                     	;# 
   270  0415                     	;# 
   271  0416                     	;# 
   272  0417                     	;# 
   273  041C                     	;# 
   274  041D                     	;# 
   275  041E                     	;# 
   276  0FE4                     	;# 
   277  0FE5                     	;# 
   278  0FE6                     	;# 
   279  0FE7                     	;# 
   280  0FE8                     	;# 
   281  0FE9                     	;# 
   282  0FEA                     	;# 
   283  0FEB                     	;# 
   284  0FED                     	;# 
   285  0FEE                     	;# 
   286  0FEF                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0013                     	;# 
   305  0014                     	;# 
   306  0015                     	;# 
   307  0016                     	;# 
   308  0016                     	;# 
   309  0017                     	;# 
   310  0018                     	;# 
   311  0019                     	;# 
   312  001A                     	;# 
   313  001B                     	;# 
   314  001C                     	;# 
   315  001E                     	;# 
   316  001F                     	;# 
   317  008C                     	;# 
   318  008D                     	;# 
   319  008E                     	;# 
   320  0091                     	;# 
   321  0092                     	;# 
   322  0093                     	;# 
   323  0094                     	;# 
   324  0095                     	;# 
   325  0096                     	;# 
   326  0097                     	;# 
   327  0098                     	;# 
   328  0099                     	;# 
   329  009A                     	;# 
   330  009B                     	;# 
   331  009B                     	;# 
   332  009C                     	;# 
   333  009D                     	;# 
   334  009E                     	;# 
   335  010C                     	;# 
   336  010D                     	;# 
   337  010E                     	;# 
   338  0111                     	;# 
   339  0112                     	;# 
   340  0113                     	;# 
   341  0114                     	;# 
   342  0115                     	;# 
   343  0116                     	;# 
   344  0117                     	;# 
   345  0118                     	;# 
   346  0119                     	;# 
   347  011A                     	;# 
   348  011B                     	;# 
   349  011D                     	;# 
   350  011E                     	;# 
   351  018C                     	;# 
   352  018D                     	;# 
   353  018E                     	;# 
   354  0191                     	;# 
   355  0191                     	;# 
   356  0192                     	;# 
   357  0193                     	;# 
   358  0193                     	;# 
   359  0193                     	;# 
   360  0194                     	;# 
   361  0195                     	;# 
   362  0196                     	;# 
   363  0199                     	;# 
   364  019A                     	;# 
   365  019B                     	;# 
   366  019B                     	;# 
   367  019C                     	;# 
   368  019D                     	;# 
   369  019E                     	;# 
   370  019F                     	;# 
   371  020C                     	;# 
   372  020D                     	;# 
   373  020E                     	;# 
   374  0211                     	;# 
   375  0211                     	;# 
   376  0212                     	;# 
   377  0212                     	;# 
   378  0213                     	;# 
   379  0213                     	;# 
   380  0214                     	;# 
   381  0214                     	;# 
   382  0215                     	;# 
   383  0215                     	;# 
   384  0215                     	;# 
   385  0216                     	;# 
   386  0216                     	;# 
   387  0217                     	;# 
   388  0217                     	;# 
   389  0219                     	;# 
   390  021A                     	;# 
   391  021B                     	;# 
   392  021C                     	;# 
   393  021D                     	;# 
   394  021E                     	;# 
   395  021F                     	;# 
   396  0291                     	;# 
   397  0291                     	;# 
   398  0292                     	;# 
   399  0293                     	;# 
   400  0294                     	;# 
   401  0295                     	;# 
   402  0295                     	;# 
   403  0296                     	;# 
   404  0298                     	;# 
   405  0298                     	;# 
   406  0299                     	;# 
   407  029A                     	;# 
   408  029B                     	;# 
   409  029C                     	;# 
   410  029D                     	;# 
   411  029E                     	;# 
   412  0311                     	;# 
   413  0311                     	;# 
   414  0312                     	;# 
   415  0313                     	;# 
   416  0318                     	;# 
   417  0318                     	;# 
   418  0319                     	;# 
   419  031A                     	;# 
   420  038C                     	;# 
   421  038D                     	;# 
   422  038E                     	;# 
   423  0391                     	;# 
   424  0392                     	;# 
   425  0393                     	;# 
   426  0394                     	;# 
   427  0395                     	;# 
   428  0396                     	;# 
   429  039A                     	;# 
   430  039C                     	;# 
   431  039D                     	;# 
   432  039E                     	;# 
   433  039F                     	;# 
   434  0415                     	;# 
   435  0416                     	;# 
   436  0417                     	;# 
   437  041C                     	;# 
   438  041D                     	;# 
   439  041E                     	;# 
   440  0FE4                     	;# 
   441  0FE5                     	;# 
   442  0FE6                     	;# 
   443  0FE7                     	;# 
   444  0FE8                     	;# 
   445  0FE9                     	;# 
   446  0FEA                     	;# 
   447  0FEB                     	;# 
   448  0FED                     	;# 
   449  0FEE                     	;# 
   450  0FEF                     	;# 
   451  0000                     	;# 
   452  0001                     	;# 
   453  0002                     	;# 
   454  0003                     	;# 
   455  0004                     	;# 
   456  0005                     	;# 
   457  0006                     	;# 
   458  0007                     	;# 
   459  0008                     	;# 
   460  0009                     	;# 
   461  000A                     	;# 
   462  000B                     	;# 
   463  000C                     	;# 
   464  000D                     	;# 
   465  000E                     	;# 
   466  0011                     	;# 
   467  0012                     	;# 
   468  0013                     	;# 
   469  0014                     	;# 
   470  0015                     	;# 
   471  0016                     	;# 
   472  0016                     	;# 
   473  0017                     	;# 
   474  0018                     	;# 
   475  0019                     	;# 
   476  001A                     	;# 
   477  001B                     	;# 
   478  001C                     	;# 
   479  001E                     	;# 
   480  001F                     	;# 
   481  008C                     	;# 
   482  008D                     	;# 
   483  008E                     	;# 
   484  0091                     	;# 
   485  0092                     	;# 
   486  0093                     	;# 
   487  0094                     	;# 
   488  0095                     	;# 
   489  0096                     	;# 
   490  0097                     	;# 
   491  0098                     	;# 
   492  0099                     	;# 
   493  009A                     	;# 
   494  009B                     	;# 
   495  009B                     	;# 
   496  009C                     	;# 
   497  009D                     	;# 
   498  009E                     	;# 
   499  010C                     	;# 
   500  010D                     	;# 
   501  010E                     	;# 
   502  0111                     	;# 
   503  0112                     	;# 
   504  0113                     	;# 
   505  0114                     	;# 
   506  0115                     	;# 
   507  0116                     	;# 
   508  0117                     	;# 
   509  0118                     	;# 
   510  0119                     	;# 
   511  011A                     	;# 
   512  011B                     	;# 
   513  011D                     	;# 
   514  011E                     	;# 
   515  018C                     	;# 
   516  018D                     	;# 
   517  018E                     	;# 
   518  0191                     	;# 
   519  0191                     	;# 
   520  0192                     	;# 
   521  0193                     	;# 
   522  0193                     	;# 
   523  0193                     	;# 
   524  0194                     	;# 
   525  0195                     	;# 
   526  0196                     	;# 
   527  0199                     	;# 
   528  019A                     	;# 
   529  019B                     	;# 
   530  019B                     	;# 
   531  019C                     	;# 
   532  019D                     	;# 
   533  019E                     	;# 
   534  019F                     	;# 
   535  020C                     	;# 
   536  020D                     	;# 
   537  020E                     	;# 
   538  0211                     	;# 
   539  0211                     	;# 
   540  0212                     	;# 
   541  0212                     	;# 
   542  0213                     	;# 
   543  0213                     	;# 
   544  0214                     	;# 
   545  0214                     	;# 
   546  0215                     	;# 
   547  0215                     	;# 
   548  0215                     	;# 
   549  0216                     	;# 
   550  0216                     	;# 
   551  0217                     	;# 
   552  0217                     	;# 
   553  0219                     	;# 
   554  021A                     	;# 
   555  021B                     	;# 
   556  021C                     	;# 
   557  021D                     	;# 
   558  021E                     	;# 
   559  021F                     	;# 
   560  0291                     	;# 
   561  0291                     	;# 
   562  0292                     	;# 
   563  0293                     	;# 
   564  0294                     	;# 
   565  0295                     	;# 
   566  0295                     	;# 
   567  0296                     	;# 
   568  0298                     	;# 
   569  0298                     	;# 
   570  0299                     	;# 
   571  029A                     	;# 
   572  029B                     	;# 
   573  029C                     	;# 
   574  029D                     	;# 
   575  029E                     	;# 
   576  0311                     	;# 
   577  0311                     	;# 
   578  0312                     	;# 
   579  0313                     	;# 
   580  0318                     	;# 
   581  0318                     	;# 
   582  0319                     	;# 
   583  031A                     	;# 
   584  038C                     	;# 
   585  038D                     	;# 
   586  038E                     	;# 
   587  0391                     	;# 
   588  0392                     	;# 
   589  0393                     	;# 
   590  0394                     	;# 
   591  0395                     	;# 
   592  0396                     	;# 
   593  039A                     	;# 
   594  039C                     	;# 
   595  039D                     	;# 
   596  039E                     	;# 
   597  039F                     	;# 
   598  0415                     	;# 
   599  0416                     	;# 
   600  0417                     	;# 
   601  041C                     	;# 
   602  041D                     	;# 
   603  041E                     	;# 
   604  0FE4                     	;# 
   605  0FE5                     	;# 
   606  0FE6                     	;# 
   607  0FE7                     	;# 
   608  0FE8                     	;# 
   609  0FE9                     	;# 
   610  0FEA                     	;# 
   611  0FEB                     	;# 
   612  0FED                     	;# 
   613  0FEE                     	;# 
   614  0FEF                     	;# 
   615  0000                     	;# 
   616  0001                     	;# 
   617  0002                     	;# 
   618  0003                     	;# 
   619  0004                     	;# 
   620  0005                     	;# 
   621  0006                     	;# 
   622  0007                     	;# 
   623  0008                     	;# 
   624  0009                     	;# 
   625  000A                     	;# 
   626  000B                     	;# 
   627  000C                     	;# 
   628  000D                     	;# 
   629  000E                     	;# 
   630  0011                     	;# 
   631  0012                     	;# 
   632  0013                     	;# 
   633  0014                     	;# 
   634  0015                     	;# 
   635  0016                     	;# 
   636  0016                     	;# 
   637  0017                     	;# 
   638  0018                     	;# 
   639  0019                     	;# 
   640  001A                     	;# 
   641  001B                     	;# 
   642  001C                     	;# 
   643  001E                     	;# 
   644  001F                     	;# 
   645  008C                     	;# 
   646  008D                     	;# 
   647  008E                     	;# 
   648  0091                     	;# 
   649  0092                     	;# 
   650  0093                     	;# 
   651  0094                     	;# 
   652  0095                     	;# 
   653  0096                     	;# 
   654  0097                     	;# 
   655  0098                     	;# 
   656  0099                     	;# 
   657  009A                     	;# 
   658  009B                     	;# 
   659  009B                     	;# 
   660  009C                     	;# 
   661  009D                     	;# 
   662  009E                     	;# 
   663  010C                     	;# 
   664  010D                     	;# 
   665  010E                     	;# 
   666  0111                     	;# 
   667  0112                     	;# 
   668  0113                     	;# 
   669  0114                     	;# 
   670  0115                     	;# 
   671  0116                     	;# 
   672  0117                     	;# 
   673  0118                     	;# 
   674  0119                     	;# 
   675  011A                     	;# 
   676  011B                     	;# 
   677  011D                     	;# 
   678  011E                     	;# 
   679  018C                     	;# 
   680  018D                     	;# 
   681  018E                     	;# 
   682  0191                     	;# 
   683  0191                     	;# 
   684  0192                     	;# 
   685  0193                     	;# 
   686  0193                     	;# 
   687  0193                     	;# 
   688  0194                     	;# 
   689  0195                     	;# 
   690  0196                     	;# 
   691  0199                     	;# 
   692  019A                     	;# 
   693  019B                     	;# 
   694  019B                     	;# 
   695  019C                     	;# 
   696  019D                     	;# 
   697  019E                     	;# 
   698  019F                     	;# 
   699  020C                     	;# 
   700  020D                     	;# 
   701  020E                     	;# 
   702  0211                     	;# 
   703  0211                     	;# 
   704  0212                     	;# 
   705  0212                     	;# 
   706  0213                     	;# 
   707  0213                     	;# 
   708  0214                     	;# 
   709  0214                     	;# 
   710  0215                     	;# 
   711  0215                     	;# 
   712  0215                     	;# 
   713  0216                     	;# 
   714  0216                     	;# 
   715  0217                     	;# 
   716  0217                     	;# 
   717  0219                     	;# 
   718  021A                     	;# 
   719  021B                     	;# 
   720  021C                     	;# 
   721  021D                     	;# 
   722  021E                     	;# 
   723  021F                     	;# 
   724  0291                     	;# 
   725  0291                     	;# 
   726  0292                     	;# 
   727  0293                     	;# 
   728  0294                     	;# 
   729  0295                     	;# 
   730  0295                     	;# 
   731  0296                     	;# 
   732  0298                     	;# 
   733  0298                     	;# 
   734  0299                     	;# 
   735  029A                     	;# 
   736  029B                     	;# 
   737  029C                     	;# 
   738  029D                     	;# 
   739  029E                     	;# 
   740  0311                     	;# 
   741  0311                     	;# 
   742  0312                     	;# 
   743  0313                     	;# 
   744  0318                     	;# 
   745  0318                     	;# 
   746  0319                     	;# 
   747  031A                     	;# 
   748  038C                     	;# 
   749  038D                     	;# 
   750  038E                     	;# 
   751  0391                     	;# 
   752  0392                     	;# 
   753  0393                     	;# 
   754  0394                     	;# 
   755  0395                     	;# 
   756  0396                     	;# 
   757  039A                     	;# 
   758  039C                     	;# 
   759  039D                     	;# 
   760  039E                     	;# 
   761  039F                     	;# 
   762  0415                     	;# 
   763  0416                     	;# 
   764  0417                     	;# 
   765  041C                     	;# 
   766  041D                     	;# 
   767  041E                     	;# 
   768  0FE4                     	;# 
   769  0FE5                     	;# 
   770  0FE6                     	;# 
   771  0FE7                     	;# 
   772  0FE8                     	;# 
   773  0FE9                     	;# 
   774  0FEA                     	;# 
   775  0FEB                     	;# 
   776  0FED                     	;# 
   777  0FEE                     	;# 
   778  0FEF                     	;# 
   779  0000                     	;# 
   780  0001                     	;# 
   781  0002                     	;# 
   782  0003                     	;# 
   783  0004                     	;# 
   784  0005                     	;# 
   785  0006                     	;# 
   786  0007                     	;# 
   787  0008                     	;# 
   788  0009                     	;# 
   789  000A                     	;# 
   790  000B                     	;# 
   791  000C                     	;# 
   792  000D                     	;# 
   793  000E                     	;# 
   794  0011                     	;# 
   795  0012                     	;# 
   796  0013                     	;# 
   797  0014                     	;# 
   798  0015                     	;# 
   799  0016                     	;# 
   800  0016                     	;# 
   801  0017                     	;# 
   802  0018                     	;# 
   803  0019                     	;# 
   804  001A                     	;# 
   805  001B                     	;# 
   806  001C                     	;# 
   807  001E                     	;# 
   808  001F                     	;# 
   809  008C                     	;# 
   810  008D                     	;# 
   811  008E                     	;# 
   812  0091                     	;# 
   813  0092                     	;# 
   814  0093                     	;# 
   815  0094                     	;# 
   816  0095                     	;# 
   817  0096                     	;# 
   818  0097                     	;# 
   819  0098                     	;# 
   820  0099                     	;# 
   821  009A                     	;# 
   822  009B                     	;# 
   823  009B                     	;# 
   824  009C                     	;# 
   825  009D                     	;# 
   826  009E                     	;# 
   827  010C                     	;# 
   828  010D                     	;# 
   829  010E                     	;# 
   830  0111                     	;# 
   831  0112                     	;# 
   832  0113                     	;# 
   833  0114                     	;# 
   834  0115                     	;# 
   835  0116                     	;# 
   836  0117                     	;# 
   837  0118                     	;# 
   838  0119                     	;# 
   839  011A                     	;# 
   840  011B                     	;# 
   841  011D                     	;# 
   842  011E                     	;# 
   843  018C                     	;# 
   844  018D                     	;# 
   845  018E                     	;# 
   846  0191                     	;# 
   847  0191                     	;# 
   848  0192                     	;# 
   849  0193                     	;# 
   850  0193                     	;# 
   851  0193                     	;# 
   852  0194                     	;# 
   853  0195                     	;# 
   854  0196                     	;# 
   855  0199                     	;# 
   856  019A                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019C                     	;# 
   860  019D                     	;# 
   861  019E                     	;# 
   862  019F                     	;# 
   863  020C                     	;# 
   864  020D                     	;# 
   865  020E                     	;# 
   866  0211                     	;# 
   867  0211                     	;# 
   868  0212                     	;# 
   869  0212                     	;# 
   870  0213                     	;# 
   871  0213                     	;# 
   872  0214                     	;# 
   873  0214                     	;# 
   874  0215                     	;# 
   875  0215                     	;# 
   876  0215                     	;# 
   877  0216                     	;# 
   878  0216                     	;# 
   879  0217                     	;# 
   880  0217                     	;# 
   881  0219                     	;# 
   882  021A                     	;# 
   883  021B                     	;# 
   884  021C                     	;# 
   885  021D                     	;# 
   886  021E                     	;# 
   887  021F                     	;# 
   888  0291                     	;# 
   889  0291                     	;# 
   890  0292                     	;# 
   891  0293                     	;# 
   892  0294                     	;# 
   893  0295                     	;# 
   894  0295                     	;# 
   895  0296                     	;# 
   896  0298                     	;# 
   897  0298                     	;# 
   898  0299                     	;# 
   899  029A                     	;# 
   900  029B                     	;# 
   901  029C                     	;# 
   902  029D                     	;# 
   903  029E                     	;# 
   904  0311                     	;# 
   905  0311                     	;# 
   906  0312                     	;# 
   907  0313                     	;# 
   908  0318                     	;# 
   909  0318                     	;# 
   910  0319                     	;# 
   911  031A                     	;# 
   912  038C                     	;# 
   913  038D                     	;# 
   914  038E                     	;# 
   915  0391                     	;# 
   916  0392                     	;# 
   917  0393                     	;# 
   918  0394                     	;# 
   919  0395                     	;# 
   920  0396                     	;# 
   921  039A                     	;# 
   922  039C                     	;# 
   923  039D                     	;# 
   924  039E                     	;# 
   925  039F                     	;# 
   926  0415                     	;# 
   927  0416                     	;# 
   928  0417                     	;# 
   929  041C                     	;# 
   930  041D                     	;# 
   931  041E                     	;# 
   932  0FE4                     	;# 
   933  0FE5                     	;# 
   934  0FE6                     	;# 
   935  0FE7                     	;# 
   936  0FE8                     	;# 
   937  0FE9                     	;# 
   938  0FEA                     	;# 
   939  0FEB                     	;# 
   940  0FED                     	;# 
   941  0FEE                     	;# 
   942  0FEF                     	;# 
   943  0000                     	;# 
   944  0001                     	;# 
   945  0002                     	;# 
   946  0003                     	;# 
   947  0004                     	;# 
   948  0005                     	;# 
   949  0006                     	;# 
   950  0007                     	;# 
   951  0008                     	;# 
   952  0009                     	;# 
   953  000A                     	;# 
   954  000B                     	;# 
   955  000C                     	;# 
   956  000D                     	;# 
   957  000E                     	;# 
   958  0011                     	;# 
   959  0012                     	;# 
   960  0013                     	;# 
   961  0014                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  001E                     	;# 
   972  001F                     	;# 
   973  008C                     	;# 
   974  008D                     	;# 
   975  008E                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0093                     	;# 
   979  0094                     	;# 
   980  0095                     	;# 
   981  0096                     	;# 
   982  0097                     	;# 
   983  0098                     	;# 
   984  0099                     	;# 
   985  009A                     	;# 
   986  009B                     	;# 
   987  009B                     	;# 
   988  009C                     	;# 
   989  009D                     	;# 
   990  009E                     	;# 
   991  010C                     	;# 
   992  010D                     	;# 
   993  010E                     	;# 
   994  0111                     	;# 
   995  0112                     	;# 
   996  0113                     	;# 
   997  0114                     	;# 
   998  0115                     	;# 
   999  0116                     	;# 
  1000  0117                     	;# 
  1001  0118                     	;# 
  1002  0119                     	;# 
  1003  011A                     	;# 
  1004  011B                     	;# 
  1005  011D                     	;# 
  1006  011E                     	;# 
  1007  018C                     	;# 
  1008  018D                     	;# 
  1009  018E                     	;# 
  1010  0191                     	;# 
  1011  0191                     	;# 
  1012  0192                     	;# 
  1013  0193                     	;# 
  1014  0193                     	;# 
  1015  0193                     	;# 
  1016  0194                     	;# 
  1017  0195                     	;# 
  1018  0196                     	;# 
  1019  0199                     	;# 
  1020  019A                     	;# 
  1021  019B                     	;# 
  1022  019B                     	;# 
  1023  019C                     	;# 
  1024  019D                     	;# 
  1025  019E                     	;# 
  1026  019F                     	;# 
  1027  020C                     	;# 
  1028  020D                     	;# 
  1029  020E                     	;# 
  1030  0211                     	;# 
  1031  0211                     	;# 
  1032  0212                     	;# 
  1033  0212                     	;# 
  1034  0213                     	;# 
  1035  0213                     	;# 
  1036  0214                     	;# 
  1037  0214                     	;# 
  1038  0215                     	;# 
  1039  0215                     	;# 
  1040  0215                     	;# 
  1041  0216                     	;# 
  1042  0216                     	;# 
  1043  0217                     	;# 
  1044  0217                     	;# 
  1045  0219                     	;# 
  1046  021A                     	;# 
  1047  021B                     	;# 
  1048  021C                     	;# 
  1049  021D                     	;# 
  1050  021E                     	;# 
  1051  021F                     	;# 
  1052  0291                     	;# 
  1053  0291                     	;# 
  1054  0292                     	;# 
  1055  0293                     	;# 
  1056  0294                     	;# 
  1057  0295                     	;# 
  1058  0295                     	;# 
  1059  0296                     	;# 
  1060  0298                     	;# 
  1061  0298                     	;# 
  1062  0299                     	;# 
  1063  029A                     	;# 
  1064  029B                     	;# 
  1065  029C                     	;# 
  1066  029D                     	;# 
  1067  029E                     	;# 
  1068  0311                     	;# 
  1069  0311                     	;# 
  1070  0312                     	;# 
  1071  0313                     	;# 
  1072  0318                     	;# 
  1073  0318                     	;# 
  1074  0319                     	;# 
  1075  031A                     	;# 
  1076  038C                     	;# 
  1077  038D                     	;# 
  1078  038E                     	;# 
  1079  0391                     	;# 
  1080  0392                     	;# 
  1081  0393                     	;# 
  1082  0394                     	;# 
  1083  0395                     	;# 
  1084  0396                     	;# 
  1085  039A                     	;# 
  1086  039C                     	;# 
  1087  039D                     	;# 
  1088  039E                     	;# 
  1089  039F                     	;# 
  1090  0415                     	;# 
  1091  0416                     	;# 
  1092  0417                     	;# 
  1093  041C                     	;# 
  1094  041D                     	;# 
  1095  041E                     	;# 
  1096  0FE4                     	;# 
  1097  0FE5                     	;# 
  1098  0FE6                     	;# 
  1099  0FE7                     	;# 
  1100  0FE8                     	;# 
  1101  0FE9                     	;# 
  1102  0FEA                     	;# 
  1103  0FEB                     	;# 
  1104  0FED                     	;# 
  1105  0FEE                     	;# 
  1106  0FEF                     	;# 
  1107  0000                     	;# 
  1108  0001                     	;# 
  1109  0002                     	;# 
  1110  0003                     	;# 
  1111  0004                     	;# 
  1112  0005                     	;# 
  1113  0006                     	;# 
  1114  0007                     	;# 
  1115  0008                     	;# 
  1116  0009                     	;# 
  1117  000A                     	;# 
  1118  000B                     	;# 
  1119  000C                     	;# 
  1120  000D                     	;# 
  1121  000E                     	;# 
  1122  0011                     	;# 
  1123  0012                     	;# 
  1124  0013                     	;# 
  1125  0014                     	;# 
  1126  0015                     	;# 
  1127  0016                     	;# 
  1128  0016                     	;# 
  1129  0017                     	;# 
  1130  0018                     	;# 
  1131  0019                     	;# 
  1132  001A                     	;# 
  1133  001B                     	;# 
  1134  001C                     	;# 
  1135  001E                     	;# 
  1136  001F                     	;# 
  1137  008C                     	;# 
  1138  008D                     	;# 
  1139  008E                     	;# 
  1140  0091                     	;# 
  1141  0092                     	;# 
  1142  0093                     	;# 
  1143  0094                     	;# 
  1144  0095                     	;# 
  1145  0096                     	;# 
  1146  0097                     	;# 
  1147  0098                     	;# 
  1148  0099                     	;# 
  1149  009A                     	;# 
  1150  009B                     	;# 
  1151  009B                     	;# 
  1152  009C                     	;# 
  1153  009D                     	;# 
  1154  009E                     	;# 
  1155  010C                     	;# 
  1156  010D                     	;# 
  1157  010E                     	;# 
  1158  0111                     	;# 
  1159  0112                     	;# 
  1160  0113                     	;# 
  1161  0114                     	;# 
  1162  0115                     	;# 
  1163  0116                     	;# 
  1164  0117                     	;# 
  1165  0118                     	;# 
  1166  0119                     	;# 
  1167  011A                     	;# 
  1168  011B                     	;# 
  1169  011D                     	;# 
  1170  011E                     	;# 
  1171  018C                     	;# 
  1172  018D                     	;# 
  1173  018E                     	;# 
  1174  0191                     	;# 
  1175  0191                     	;# 
  1176  0192                     	;# 
  1177  0193                     	;# 
  1178  0193                     	;# 
  1179  0193                     	;# 
  1180  0194                     	;# 
  1181  0195                     	;# 
  1182  0196                     	;# 
  1183  0199                     	;# 
  1184  019A                     	;# 
  1185  019B                     	;# 
  1186  019B                     	;# 
  1187  019C                     	;# 
  1188  019D                     	;# 
  1189  019E                     	;# 
  1190  019F                     	;# 
  1191  020C                     	;# 
  1192  020D                     	;# 
  1193  020E                     	;# 
  1194  0211                     	;# 
  1195  0211                     	;# 
  1196  0212                     	;# 
  1197  0212                     	;# 
  1198  0213                     	;# 
  1199  0213                     	;# 
  1200  0214                     	;# 
  1201  0214                     	;# 
  1202  0215                     	;# 
  1203  0215                     	;# 
  1204  0215                     	;# 
  1205  0216                     	;# 
  1206  0216                     	;# 
  1207  0217                     	;# 
  1208  0217                     	;# 
  1209  0219                     	;# 
  1210  021A                     	;# 
  1211  021B                     	;# 
  1212  021C                     	;# 
  1213  021D                     	;# 
  1214  021E                     	;# 
  1215  021F                     	;# 
  1216  0291                     	;# 
  1217  0291                     	;# 
  1218  0292                     	;# 
  1219  0293                     	;# 
  1220  0294                     	;# 
  1221  0295                     	;# 
  1222  0295                     	;# 
  1223  0296                     	;# 
  1224  0298                     	;# 
  1225  0298                     	;# 
  1226  0299                     	;# 
  1227  029A                     	;# 
  1228  029B                     	;# 
  1229  029C                     	;# 
  1230  029D                     	;# 
  1231  029E                     	;# 
  1232  0311                     	;# 
  1233  0311                     	;# 
  1234  0312                     	;# 
  1235  0313                     	;# 
  1236  0318                     	;# 
  1237  0318                     	;# 
  1238  0319                     	;# 
  1239  031A                     	;# 
  1240  038C                     	;# 
  1241  038D                     	;# 
  1242  038E                     	;# 
  1243  0391                     	;# 
  1244  0392                     	;# 
  1245  0393                     	;# 
  1246  0394                     	;# 
  1247  0395                     	;# 
  1248  0396                     	;# 
  1249  039A                     	;# 
  1250  039C                     	;# 
  1251  039D                     	;# 
  1252  039E                     	;# 
  1253  039F                     	;# 
  1254  0415                     	;# 
  1255  0416                     	;# 
  1256  0417                     	;# 
  1257  041C                     	;# 
  1258  041D                     	;# 
  1259  041E                     	;# 
  1260  0FE4                     	;# 
  1261  0FE5                     	;# 
  1262  0FE6                     	;# 
  1263  0FE7                     	;# 
  1264  0FE8                     	;# 
  1265  0FE9                     	;# 
  1266  0FEA                     	;# 
  1267  0FEB                     	;# 
  1268  0FED                     	;# 
  1269  0FEE                     	;# 
  1270  0FEF                     	;# 
  1271  0000                     	;# 
  1272  0001                     	;# 
  1273  0002                     	;# 
  1274  0003                     	;# 
  1275  0004                     	;# 
  1276  0005                     	;# 
  1277  0006                     	;# 
  1278  0007                     	;# 
  1279  0008                     	;# 
  1280  0009                     	;# 
  1281  000A                     	;# 
  1282  000B                     	;# 
  1283  000C                     	;# 
  1284  000D                     	;# 
  1285  000E                     	;# 
  1286  0011                     	;# 
  1287  0012                     	;# 
  1288  0013                     	;# 
  1289  0014                     	;# 
  1290  0015                     	;# 
  1291  0016                     	;# 
  1292  0016                     	;# 
  1293  0017                     	;# 
  1294  0018                     	;# 
  1295  0019                     	;# 
  1296  001A                     	;# 
  1297  001B                     	;# 
  1298  001C                     	;# 
  1299  001E                     	;# 
  1300  001F                     	;# 
  1301  008C                     	;# 
  1302  008D                     	;# 
  1303  008E                     	;# 
  1304  0091                     	;# 
  1305  0092                     	;# 
  1306  0093                     	;# 
  1307  0094                     	;# 
  1308  0095                     	;# 
  1309  0096                     	;# 
  1310  0097                     	;# 
  1311  0098                     	;# 
  1312  0099                     	;# 
  1313  009A                     	;# 
  1314  009B                     	;# 
  1315  009B                     	;# 
  1316  009C                     	;# 
  1317  009D                     	;# 
  1318  009E                     	;# 
  1319  010C                     	;# 
  1320  010D                     	;# 
  1321  010E                     	;# 
  1322  0111                     	;# 
  1323  0112                     	;# 
  1324  0113                     	;# 
  1325  0114                     	;# 
  1326  0115                     	;# 
  1327  0116                     	;# 
  1328  0117                     	;# 
  1329  0118                     	;# 
  1330  0119                     	;# 
  1331  011A                     	;# 
  1332  011B                     	;# 
  1333  011D                     	;# 
  1334  011E                     	;# 
  1335  018C                     	;# 
  1336  018D                     	;# 
  1337  018E                     	;# 
  1338  0191                     	;# 
  1339  0191                     	;# 
  1340  0192                     	;# 
  1341  0193                     	;# 
  1342  0193                     	;# 
  1343  0193                     	;# 
  1344  0194                     	;# 
  1345  0195                     	;# 
  1346  0196                     	;# 
  1347  0199                     	;# 
  1348  019A                     	;# 
  1349  019B                     	;# 
  1350  019B                     	;# 
  1351  019C                     	;# 
  1352  019D                     	;# 
  1353  019E                     	;# 
  1354  019F                     	;# 
  1355  020C                     	;# 
  1356  020D                     	;# 
  1357  020E                     	;# 
  1358  0211                     	;# 
  1359  0211                     	;# 
  1360  0212                     	;# 
  1361  0212                     	;# 
  1362  0213                     	;# 
  1363  0213                     	;# 
  1364  0214                     	;# 
  1365  0214                     	;# 
  1366  0215                     	;# 
  1367  0215                     	;# 
  1368  0215                     	;# 
  1369  0216                     	;# 
  1370  0216                     	;# 
  1371  0217                     	;# 
  1372  0217                     	;# 
  1373  0219                     	;# 
  1374  021A                     	;# 
  1375  021B                     	;# 
  1376  021C                     	;# 
  1377  021D                     	;# 
  1378  021E                     	;# 
  1379  021F                     	;# 
  1380  0291                     	;# 
  1381  0291                     	;# 
  1382  0292                     	;# 
  1383  0293                     	;# 
  1384  0294                     	;# 
  1385  0295                     	;# 
  1386  0295                     	;# 
  1387  0296                     	;# 
  1388  0298                     	;# 
  1389  0298                     	;# 
  1390  0299                     	;# 
  1391  029A                     	;# 
  1392  029B                     	;# 
  1393  029C                     	;# 
  1394  029D                     	;# 
  1395  029E                     	;# 
  1396  0311                     	;# 
  1397  0311                     	;# 
  1398  0312                     	;# 
  1399  0313                     	;# 
  1400  0318                     	;# 
  1401  0318                     	;# 
  1402  0319                     	;# 
  1403  031A                     	;# 
  1404  038C                     	;# 
  1405  038D                     	;# 
  1406  038E                     	;# 
  1407  0391                     	;# 
  1408  0392                     	;# 
  1409  0393                     	;# 
  1410  0394                     	;# 
  1411  0395                     	;# 
  1412  0396                     	;# 
  1413  039A                     	;# 
  1414  039C                     	;# 
  1415  039D                     	;# 
  1416  039E                     	;# 
  1417  039F                     	;# 
  1418  0415                     	;# 
  1419  0416                     	;# 
  1420  0417                     	;# 
  1421  041C                     	;# 
  1422  041D                     	;# 
  1423  041E                     	;# 
  1424  0FE4                     	;# 
  1425  0FE5                     	;# 
  1426  0FE6                     	;# 
  1427  0FE7                     	;# 
  1428  0FE8                     	;# 
  1429  0FE9                     	;# 
  1430  0FEA                     	;# 
  1431  0FEB                     	;# 
  1432  0FED                     	;# 
  1433  0FEE                     	;# 
  1434  0FEF                     	;# 
  1435  0000                     	;# 
  1436  0001                     	;# 
  1437  0002                     	;# 
  1438  0003                     	;# 
  1439  0004                     	;# 
  1440  0005                     	;# 
  1441  0006                     	;# 
  1442  0007                     	;# 
  1443  0008                     	;# 
  1444  0009                     	;# 
  1445  000A                     	;# 
  1446  000B                     	;# 
  1447  000C                     	;# 
  1448  000D                     	;# 
  1449  000E                     	;# 
  1450  0011                     	;# 
  1451  0012                     	;# 
  1452  0013                     	;# 
  1453  0014                     	;# 
  1454  0015                     	;# 
  1455  0016                     	;# 
  1456  0016                     	;# 
  1457  0017                     	;# 
  1458  0018                     	;# 
  1459  0019                     	;# 
  1460  001A                     	;# 
  1461  001B                     	;# 
  1462  001C                     	;# 
  1463  001E                     	;# 
  1464  001F                     	;# 
  1465  008C                     	;# 
  1466  008D                     	;# 
  1467  008E                     	;# 
  1468  0091                     	;# 
  1469  0092                     	;# 
  1470  0093                     	;# 
  1471  0094                     	;# 
  1472  0095                     	;# 
  1473  0096                     	;# 
  1474  0097                     	;# 
  1475  0098                     	;# 
  1476  0099                     	;# 
  1477  009A                     	;# 
  1478  009B                     	;# 
  1479  009B                     	;# 
  1480  009C                     	;# 
  1481  009D                     	;# 
  1482  009E                     	;# 
  1483  010C                     	;# 
  1484  010D                     	;# 
  1485  010E                     	;# 
  1486  0111                     	;# 
  1487  0112                     	;# 
  1488  0113                     	;# 
  1489  0114                     	;# 
  1490  0115                     	;# 
  1491  0116                     	;# 
  1492  0117                     	;# 
  1493  0118                     	;# 
  1494  0119                     	;# 
  1495  011A                     	;# 
  1496  011B                     	;# 
  1497  011D                     	;# 
  1498  011E                     	;# 
  1499  018C                     	;# 
  1500  018D                     	;# 
  1501  018E                     	;# 
  1502  0191                     	;# 
  1503  0191                     	;# 
  1504  0192                     	;# 
  1505  0193                     	;# 
  1506  0193                     	;# 
  1507  0193                     	;# 
  1508  0194                     	;# 
  1509  0195                     	;# 
  1510  0196                     	;# 
  1511  0199                     	;# 
  1512  019A                     	;# 
  1513  019B                     	;# 
  1514  019B                     	;# 
  1515  019C                     	;# 
  1516  019D                     	;# 
  1517  019E                     	;# 
  1518  019F                     	;# 
  1519  020C                     	;# 
  1520  020D                     	;# 
  1521  020E                     	;# 
  1522  0211                     	;# 
  1523  0211                     	;# 
  1524  0212                     	;# 
  1525  0212                     	;# 
  1526  0213                     	;# 
  1527  0213                     	;# 
  1528  0214                     	;# 
  1529  0214                     	;# 
  1530  0215                     	;# 
  1531  0215                     	;# 
  1532  0215                     	;# 
  1533  0216                     	;# 
  1534  0216                     	;# 
  1535  0217                     	;# 
  1536  0217                     	;# 
  1537  0219                     	;# 
  1538  021A                     	;# 
  1539  021B                     	;# 
  1540  021C                     	;# 
  1541  021D                     	;# 
  1542  021E                     	;# 
  1543  021F                     	;# 
  1544  0291                     	;# 
  1545  0291                     	;# 
  1546  0292                     	;# 
  1547  0293                     	;# 
  1548  0294                     	;# 
  1549  0295                     	;# 
  1550  0295                     	;# 
  1551  0296                     	;# 
  1552  0298                     	;# 
  1553  0298                     	;# 
  1554  0299                     	;# 
  1555  029A                     	;# 
  1556  029B                     	;# 
  1557  029C                     	;# 
  1558  029D                     	;# 
  1559  029E                     	;# 
  1560  0311                     	;# 
  1561  0311                     	;# 
  1562  0312                     	;# 
  1563  0313                     	;# 
  1564  0318                     	;# 
  1565  0318                     	;# 
  1566  0319                     	;# 
  1567  031A                     	;# 
  1568  038C                     	;# 
  1569  038D                     	;# 
  1570  038E                     	;# 
  1571  0391                     	;# 
  1572  0392                     	;# 
  1573  0393                     	;# 
  1574  0394                     	;# 
  1575  0395                     	;# 
  1576  0396                     	;# 
  1577  039A                     	;# 
  1578  039C                     	;# 
  1579  039D                     	;# 
  1580  039E                     	;# 
  1581  039F                     	;# 
  1582  0415                     	;# 
  1583  0416                     	;# 
  1584  0417                     	;# 
  1585  041C                     	;# 
  1586  041D                     	;# 
  1587  041E                     	;# 
  1588  0FE4                     	;# 
  1589  0FE5                     	;# 
  1590  0FE6                     	;# 
  1591  0FE7                     	;# 
  1592  0FE8                     	;# 
  1593  0FE9                     	;# 
  1594  0FEA                     	;# 
  1595  0FEB                     	;# 
  1596  0FED                     	;# 
  1597  0FEE                     	;# 
  1598  0FEF                     	;# 
  1599  0000                     	;# 
  1600  0001                     	;# 
  1601  0002                     	;# 
  1602  0003                     	;# 
  1603  0004                     	;# 
  1604  0005                     	;# 
  1605  0006                     	;# 
  1606  0007                     	;# 
  1607  0008                     	;# 
  1608  0009                     	;# 
  1609  000A                     	;# 
  1610  000B                     	;# 
  1611  000C                     	;# 
  1612  000D                     	;# 
  1613  000E                     	;# 
  1614  0011                     	;# 
  1615  0012                     	;# 
  1616  0013                     	;# 
  1617  0014                     	;# 
  1618  0015                     	;# 
  1619  0016                     	;# 
  1620  0016                     	;# 
  1621  0017                     	;# 
  1622  0018                     	;# 
  1623  0019                     	;# 
  1624  001A                     	;# 
  1625  001B                     	;# 
  1626  001C                     	;# 
  1627  001E                     	;# 
  1628  001F                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0091                     	;# 
  1633  0092                     	;# 
  1634  0093                     	;# 
  1635  0094                     	;# 
  1636  0095                     	;# 
  1637  0096                     	;# 
  1638  0097                     	;# 
  1639  0098                     	;# 
  1640  0099                     	;# 
  1641  009A                     	;# 
  1642  009B                     	;# 
  1643  009B                     	;# 
  1644  009C                     	;# 
  1645  009D                     	;# 
  1646  009E                     	;# 
  1647  010C                     	;# 
  1648  010D                     	;# 
  1649  010E                     	;# 
  1650  0111                     	;# 
  1651  0112                     	;# 
  1652  0113                     	;# 
  1653  0114                     	;# 
  1654  0115                     	;# 
  1655  0116                     	;# 
  1656  0117                     	;# 
  1657  0118                     	;# 
  1658  0119                     	;# 
  1659  011A                     	;# 
  1660  011B                     	;# 
  1661  011D                     	;# 
  1662  011E                     	;# 
  1663  018C                     	;# 
  1664  018D                     	;# 
  1665  018E                     	;# 
  1666  0191                     	;# 
  1667  0191                     	;# 
  1668  0192                     	;# 
  1669  0193                     	;# 
  1670  0193                     	;# 
  1671  0193                     	;# 
  1672  0194                     	;# 
  1673  0195                     	;# 
  1674  0196                     	;# 
  1675  0199                     	;# 
  1676  019A                     	;# 
  1677  019B                     	;# 
  1678  019B                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020C                     	;# 
  1684  020D                     	;# 
  1685  020E                     	;# 
  1686  0211                     	;# 
  1687  0211                     	;# 
  1688  0212                     	;# 
  1689  0212                     	;# 
  1690  0213                     	;# 
  1691  0213                     	;# 
  1692  0214                     	;# 
  1693  0214                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0215                     	;# 
  1697  0216                     	;# 
  1698  0216                     	;# 
  1699  0217                     	;# 
  1700  0217                     	;# 
  1701  0219                     	;# 
  1702  021A                     	;# 
  1703  021B                     	;# 
  1704  021C                     	;# 
  1705  021D                     	;# 
  1706  021E                     	;# 
  1707  021F                     	;# 
  1708  0291                     	;# 
  1709  0291                     	;# 
  1710  0292                     	;# 
  1711  0293                     	;# 
  1712  0294                     	;# 
  1713  0295                     	;# 
  1714  0295                     	;# 
  1715  0296                     	;# 
  1716  0298                     	;# 
  1717  0298                     	;# 
  1718  0299                     	;# 
  1719  029A                     	;# 
  1720  029B                     	;# 
  1721  029C                     	;# 
  1722  029D                     	;# 
  1723  029E                     	;# 
  1724  0311                     	;# 
  1725  0311                     	;# 
  1726  0312                     	;# 
  1727  0313                     	;# 
  1728  0318                     	;# 
  1729  0318                     	;# 
  1730  0319                     	;# 
  1731  031A                     	;# 
  1732  038C                     	;# 
  1733  038D                     	;# 
  1734  038E                     	;# 
  1735  0391                     	;# 
  1736  0392                     	;# 
  1737  0393                     	;# 
  1738  0394                     	;# 
  1739  0395                     	;# 
  1740  0396                     	;# 
  1741  039A                     	;# 
  1742  039C                     	;# 
  1743  039D                     	;# 
  1744  039E                     	;# 
  1745  039F                     	;# 
  1746  0415                     	;# 
  1747  0416                     	;# 
  1748  0417                     	;# 
  1749  041C                     	;# 
  1750  041D                     	;# 
  1751  041E                     	;# 
  1752  0FE4                     	;# 
  1753  0FE5                     	;# 
  1754  0FE6                     	;# 
  1755  0FE7                     	;# 
  1756  0FE8                     	;# 
  1757  0FE9                     	;# 
  1758  0FEA                     	;# 
  1759  0FEB                     	;# 
  1760  0FED                     	;# 
  1761  0FEE                     	;# 
  1762  0FEF                     	;# 
  1763  0000                     	;# 
  1764  0001                     	;# 
  1765  0002                     	;# 
  1766  0003                     	;# 
  1767  0004                     	;# 
  1768  0005                     	;# 
  1769  0006                     	;# 
  1770  0007                     	;# 
  1771  0008                     	;# 
  1772  0009                     	;# 
  1773  000A                     	;# 
  1774  000B                     	;# 
  1775  000C                     	;# 
  1776  000D                     	;# 
  1777  000E                     	;# 
  1778  0011                     	;# 
  1779  0012                     	;# 
  1780  0013                     	;# 
  1781  0014                     	;# 
  1782  0015                     	;# 
  1783  0016                     	;# 
  1784  0016                     	;# 
  1785  0017                     	;# 
  1786  0018                     	;# 
  1787  0019                     	;# 
  1788  001A                     	;# 
  1789  001B                     	;# 
  1790  001C                     	;# 
  1791  001E                     	;# 
  1792  001F                     	;# 
  1793  008C                     	;# 
  1794  008D                     	;# 
  1795  008E                     	;# 
  1796  0091                     	;# 
  1797  0092                     	;# 
  1798  0093                     	;# 
  1799  0094                     	;# 
  1800  0095                     	;# 
  1801  0096                     	;# 
  1802  0097                     	;# 
  1803  0098                     	;# 
  1804  0099                     	;# 
  1805  009A                     	;# 
  1806  009B                     	;# 
  1807  009B                     	;# 
  1808  009C                     	;# 
  1809  009D                     	;# 
  1810  009E                     	;# 
  1811  010C                     	;# 
  1812  010D                     	;# 
  1813  010E                     	;# 
  1814  0111                     	;# 
  1815  0112                     	;# 
  1816  0113                     	;# 
  1817  0114                     	;# 
  1818  0115                     	;# 
  1819  0116                     	;# 
  1820  0117                     	;# 
  1821  0118                     	;# 
  1822  0119                     	;# 
  1823  011A                     	;# 
  1824  011B                     	;# 
  1825  011D                     	;# 
  1826  011E                     	;# 
  1827  018C                     	;# 
  1828  018D                     	;# 
  1829  018E                     	;# 
  1830  0191                     	;# 
  1831  0191                     	;# 
  1832  0192                     	;# 
  1833  0193                     	;# 
  1834  0193                     	;# 
  1835  0193                     	;# 
  1836  0194                     	;# 
  1837  0195                     	;# 
  1838  0196                     	;# 
  1839  0199                     	;# 
  1840  019A                     	;# 
  1841  019B                     	;# 
  1842  019B                     	;# 
  1843  019C                     	;# 
  1844  019D                     	;# 
  1845  019E                     	;# 
  1846  019F                     	;# 
  1847  020C                     	;# 
  1848  020D                     	;# 
  1849  020E                     	;# 
  1850  0211                     	;# 
  1851  0211                     	;# 
  1852  0212                     	;# 
  1853  0212                     	;# 
  1854  0213                     	;# 
  1855  0213                     	;# 
  1856  0214                     	;# 
  1857  0214                     	;# 
  1858  0215                     	;# 
  1859  0215                     	;# 
  1860  0215                     	;# 
  1861  0216                     	;# 
  1862  0216                     	;# 
  1863  0217                     	;# 
  1864  0217                     	;# 
  1865  0219                     	;# 
  1866  021A                     	;# 
  1867  021B                     	;# 
  1868  021C                     	;# 
  1869  021D                     	;# 
  1870  021E                     	;# 
  1871  021F                     	;# 
  1872  0291                     	;# 
  1873  0291                     	;# 
  1874  0292                     	;# 
  1875  0293                     	;# 
  1876  0294                     	;# 
  1877  0295                     	;# 
  1878  0295                     	;# 
  1879  0296                     	;# 
  1880  0298                     	;# 
  1881  0298                     	;# 
  1882  0299                     	;# 
  1883  029A                     	;# 
  1884  029B                     	;# 
  1885  029C                     	;# 
  1886  029D                     	;# 
  1887  029E                     	;# 
  1888  0311                     	;# 
  1889  0311                     	;# 
  1890  0312                     	;# 
  1891  0313                     	;# 
  1892  0318                     	;# 
  1893  0318                     	;# 
  1894  0319                     	;# 
  1895  031A                     	;# 
  1896  038C                     	;# 
  1897  038D                     	;# 
  1898  038E                     	;# 
  1899  0391                     	;# 
  1900  0392                     	;# 
  1901  0393                     	;# 
  1902  0394                     	;# 
  1903  0395                     	;# 
  1904  0396                     	;# 
  1905  039A                     	;# 
  1906  039C                     	;# 
  1907  039D                     	;# 
  1908  039E                     	;# 
  1909  039F                     	;# 
  1910  0415                     	;# 
  1911  0416                     	;# 
  1912  0417                     	;# 
  1913  041C                     	;# 
  1914  041D                     	;# 
  1915  041E                     	;# 
  1916  0FE4                     	;# 
  1917  0FE5                     	;# 
  1918  0FE6                     	;# 
  1919  0FE7                     	;# 
  1920  0FE8                     	;# 
  1921  0FE9                     	;# 
  1922  0FEA                     	;# 
  1923  0FEB                     	;# 
  1924  0FED                     	;# 
  1925  0FEE                     	;# 
  1926  0FEF                     	;# 
  1927                           
  1928                           	psect	idataCOMMON
  1929  0003                     __pidataCOMMON:	
  1930                           
  1931                           ;initializer for _I2C_slaveWriteData
  1932  0003  3455               	retlw	85
  1933                           
  1934                           	psect	idataBANK1
  1935  09BC                     __pidataBANK1:	
  1936                           
  1937                           ;initializer for _tmr_scaler
  1938  09BC  3401               	retlw	1
  1939                           
  1940                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1941  09BD  3401               	retlw	1
  1942                           
  1943                           ;initializer for _type_no_data
  1944  09BE  3406               	retlw	6
  1945                           
  1946                           	psect	stringtext
  1947  06F6                     __pstringtext:	
  1948  06F6                     _dpowers:	
  1949  06F6  3401               	retlw	1
  1950  06F7  3400               	retlw	0
  1951  06F8  340A               	retlw	10
  1952  06F9  3400               	retlw	0
  1953  06FA  3464               	retlw	100
  1954  06FB  3400               	retlw	0
  1955  06FC  34E8               	retlw	232
  1956  06FD  3403               	retlw	3
  1957  06FE  3410               	retlw	16
  1958  06FF  3427               	retlw	39
  1959  0700                     __end_of_dpowers:	
  1960  0700                     STR_36:	
  1961  0700  3449               	retlw	73	;'I'
  1962  0701  344C               	retlw	76	;'L'
  1963  0702  344C               	retlw	76	;'L'
  1964  0703  3445               	retlw	69	;'E'
  1965  0704  3447               	retlw	71	;'G'
  1966  0705  3441               	retlw	65	;'A'
  1967  0706  344C               	retlw	76	;'L'
  1968  0707  345F               	retlw	95	;'_'
  1969  0708  3454               	retlw	84	;'T'
  1970  0709  3459               	retlw	89	;'Y'
  1971  070A  3450               	retlw	80	;'P'
  1972  070B  3445               	retlw	69	;'E'
  1973  070C  340A               	retlw	10
  1974  070D  3400               	retlw	0
  1975  070E                     STR_16:	
  1976  070E  3424               	retlw	36	;'$'
  1977  070F  343A               	retlw	58	;':'
  1978  0710  3452               	retlw	82	;'R'
  1979  0711  3444               	retlw	68	;'D'
  1980  0712  3441               	retlw	65	;'A'
  1981  0713  343A               	retlw	58	;':'
  1982  0714  3425               	retlw	37	;'%'
  1983  0715  3464               	retlw	100	;'d'
  1984  0716  340A               	retlw	10
  1985  0717  3400               	retlw	0
  1986  0718                     STR_13:	
  1987  0718  3424               	retlw	36	;'$'
  1988  0719  343A               	retlw	58	;':'
  1989  071A  3447               	retlw	71	;'G'
  1990  071B  3445               	retlw	69	;'E'
  1991  071C  3454               	retlw	84	;'T'
  1992  071D  343A               	retlw	58	;':'
  1993  071E  3425               	retlw	37	;'%'
  1994  071F  3464               	retlw	100	;'d'
  1995  0720  340A               	retlw	10
  1996  0721  3400               	retlw	0
  1997  0722                     STR_34:	
  1998  0722  342D               	retlw	45	;'-'
  1999  0723  3425               	retlw	37	;'%'
  2000  0724  3464               	retlw	100	;'d'
  2001  0725  342E               	retlw	46	;'.'
  2002  0726  3425               	retlw	37	;'%'
  2003  0727  3430               	retlw	48	;'0'
  2004  0728  3432               	retlw	50	;'2'
  2005  0729  3464               	retlw	100	;'d'
  2006  072A  340A               	retlw	10
  2007  072B  3400               	retlw	0
  2008  072C                     STR_5:	
  2009  072C  3424               	retlw	36	;'$'
  2010  072D  343A               	retlw	58	;':'
  2011  072E  3457               	retlw	87	;'W'
  2012  072F  3448               	retlw	72	;'H'
  2013  0730  344F               	retlw	79	;'O'
  2014  0731  343A               	retlw	58	;':'
  2015  0732  3425               	retlw	37	;'%'
  2016  0733  3473               	retlw	115	;'s'
  2017  0734  340A               	retlw	10
  2018  0735  3400               	retlw	0
  2019  0736                     STR_9:	
  2020  0736  342A               	retlw	42	;'*'
  2021  0737  343A               	retlw	58	;':'
  2022  0738  3453               	retlw	83	;'S'
  2023  0739  3454               	retlw	84	;'T'
  2024  073A  3450               	retlw	80	;'P'
  2025  073B  343A               	retlw	58	;':'
  2026  073C  3425               	retlw	37	;'%'
  2027  073D  3473               	retlw	115	;'s'
  2028  073E  340A               	retlw	10
  2029  073F  3400               	retlw	0
  2030  0740                     STR_32:	
  2031  0740  342D               	retlw	45	;'-'
  2032  0741  3425               	retlw	37	;'%'
  2033  0742  3464               	retlw	100	;'d'
  2034  0743  342E               	retlw	46	;'.'
  2035  0744  3425               	retlw	37	;'%'
  2036  0745  3430               	retlw	48	;'0'
  2037  0746  3432               	retlw	50	;'2'
  2038  0747  3464               	retlw	100	;'d'
  2039  0748  342C               	retlw	44	;','
  2040  0749  3400               	retlw	0
  2041  074A                     STR_24:	
  2042  074A  3455               	retlw	85	;'U'
  2043  074B  3449               	retlw	73	;'I'
  2044  074C  344E               	retlw	78	;'N'
  2045  074D  3454               	retlw	84	;'T'
  2046  074E  3431               	retlw	49	;'1'
  2047  074F  3436               	retlw	54	;'6'
  2048  0750  345F               	retlw	95	;'_'
  2049  0751  3454               	retlw	84	;'T'
  2050  0752  343A               	retlw	58	;':'
  2051  0753  3400               	retlw	0
  2052  0754                     STR_35:	
  2053  0754  344E               	retlw	78	;'N'
  2054  0755  344F               	retlw	79	;'O'
  2055  0756  345F               	retlw	95	;'_'
  2056  0757  3444               	retlw	68	;'D'
  2057  0758  3441               	retlw	65	;'A'
  2058  0759  3454               	retlw	84	;'T'
  2059  075A  3441               	retlw	65	;'A'
  2060  075B  340A               	retlw	10
  2061  075C  3400               	retlw	0
  2062  075D                     STR_18:	
  2063  075D  3455               	retlw	85	;'U'
  2064  075E  3449               	retlw	73	;'I'
  2065  075F  344E               	retlw	78	;'N'
  2066  0760  3454               	retlw	84	;'T'
  2067  0761  3438               	retlw	56	;'8'
  2068  0762  345F               	retlw	95	;'_'
  2069  0763  3454               	retlw	84	;'T'
  2070  0764  343A               	retlw	58	;':'
  2071  0765  3400               	retlw	0
  2072  0766                     STR_1:	
  2073  0766  3448               	retlw	72	;'H'
  2074  0767  3444               	retlw	68	;'D'
  2075  0768  3443               	retlw	67	;'C'
  2076  0769  3431               	retlw	49	;'1'
  2077  076A  3430               	retlw	48	;'0'
  2078  076B  3430               	retlw	48	;'0'
  2079  076C  3430               	retlw	48	;'0'
  2080  076D  3400               	retlw	0
  2081  076E                     STR_30:	
  2082  076E  3446               	retlw	70	;'F'
  2083  076F  344C               	retlw	76	;'L'
  2084  0770  344F               	retlw	79	;'O'
  2085  0771  3441               	retlw	65	;'A'
  2086  0772  3454               	retlw	84	;'T'
  2087  0773  343A               	retlw	58	;':'
  2088  0774  3400               	retlw	0
  2089  0775                     STR_2:	
  2090  0775  3428               	retlw	40	;'('
  2091  0776  346E               	retlw	110	;'n'
  2092  0777  3475               	retlw	117	;'u'
  2093  0778  346C               	retlw	108	;'l'
  2094  0779  346C               	retlw	108	;'l'
  2095  077A  3429               	retlw	41	;')'
  2096  077B  3400               	retlw	0
  2097  077C                     STR_17:	
  2098  077C  3425               	retlw	37	;'%'
  2099  077D  3425               	retlw	37	;'%'
  2100  077E  3425               	retlw	37	;'%'
  2101  077F  3464               	retlw	100	;'d'
  2102  0780  343A               	retlw	58	;':'
  2103  0781  3400               	retlw	0
  2104  0782                     STR_3:	
  2105  0782  3423               	retlw	35	;'#'
  2106  0783  3425               	retlw	37	;'%'
  2107  0784  3473               	retlw	115	;'s'
  2108  0785  340A               	retlw	10
  2109  0786  3400               	retlw	0
  2110  0787                     STR_20:	
  2111  0787  3425               	retlw	37	;'%'
  2112  0788  3475               	retlw	117	;'u'
  2113  0789  340A               	retlw	10
  2114  078A  3400               	retlw	0
  2115  078B                     STR_22:	
  2116  078B  3425               	retlw	37	;'%'
  2117  078C  3464               	retlw	100	;'d'
  2118  078D  342C               	retlw	44	;','
  2119  078E  3400               	retlw	0
  2120  078F                     STR_19:	
  2121  078F  3425               	retlw	37	;'%'
  2122  0790  3475               	retlw	117	;'u'
  2123  0791  342C               	retlw	44	;','
  2124  0792  3400               	retlw	0
  2125  0793                     STR_15:	
  2126  0793  3452               	retlw	82	;'R'
  2127  0794  3444               	retlw	68	;'D'
  2128  0795  3441               	retlw	65	;'A'
  2129  0796  3400               	retlw	0
  2130  0797                     STR_14:	
  2131  0797  3457               	retlw	87	;'W'
  2132  0798  3444               	retlw	68	;'D'
  2133  0799  3441               	retlw	65	;'A'
  2134  079A  3400               	retlw	0
  2135  079B                     STR_7:	
  2136  079B  3453               	retlw	83	;'S'
  2137  079C  3454               	retlw	84	;'T'
  2138  079D  3441               	retlw	65	;'A'
  2139  079E  3400               	retlw	0
  2140  079F                     STR_10:	
  2141  079F  3441               	retlw	65	;'A'
  2142  07A0  3443               	retlw	67	;'C'
  2143  07A1  344B               	retlw	75	;'K'
  2144  07A2  3400               	retlw	0
  2145  07A3                     STR_4:	
  2146  07A3  3457               	retlw	87	;'W'
  2147  07A4  3448               	retlw	72	;'H'
  2148  07A5  344F               	retlw	79	;'O'
  2149  07A6  3400               	retlw	0
  2150  07A7                     STR_8:	
  2151  07A7  3453               	retlw	83	;'S'
  2152  07A8  3454               	retlw	84	;'T'
  2153  07A9  3450               	retlw	80	;'P'
  2154  07AA  3400               	retlw	0
  2155  07AB                     STR_12:	
  2156  07AB  3447               	retlw	71	;'G'
  2157  07AC  3445               	retlw	69	;'E'
  2158  07AD  3454               	retlw	84	;'T'
  2159  07AE  3400               	retlw	0
  2160  07AF                     STR_11:	
  2161  07AF  3453               	retlw	83	;'S'
  2162  07B0  3445               	retlw	69	;'E'
  2163  07B1  3454               	retlw	84	;'T'
  2164  07B2  3400               	retlw	0
  2165  07B3                     STR_6:	
  2166  07B3  3453               	retlw	83	;'S'
  2167  07B4  3441               	retlw	65	;'A'
  2168  07B5  3456               	retlw	86	;'V'
  2169  07B6  3400               	retlw	0
  2170  0714                     
  2171                           ; #config settings
  2172  0000                     
  2173                           	psect	nvBANK1
  2174  00E2                     __pnvBANK1:	
  2175  00E2                     _device_id_:	
  2176  00E2                     	ds	2
  2177  00E4                     _PROTOCOL_Set_Handler:	
  2178  00E4                     	ds	2
  2179  00E6                     _PROTOCOL_Stop_Handler:	
  2180  00E6                     	ds	2
  2181  00E8                     _PROTOCOL_Start_Handler:	
  2182  00E8                     	ds	2
  2183  0015                     _TMR0	set	21
  2184  000B                     _INTCONbits	set	11
  2185  0014                     _PIR4bits	set	20
  2186  0011                     _PIR1bits	set	17
  2187  005A                     _TMR0IF	set	90
  2188  0095                     _OPTION_REG	set	149
  2189  0095                     _OPTION_REGbits	set	149
  2190  008E                     _TRISC	set	142
  2191  008D                     _TRISB	set	141
  2192  008C                     _TRISA	set	140
  2193  0097                     _WDTCON	set	151
  2194  0098                     _OSCTUNE	set	152
  2195  0099                     _OSCCON	set	153
  2196  0094                     _PIE4bits	set	148
  2197  0091                     _PIE1bits	set	145
  2198  010E                     _LATCbits	set	270
  2199  011D                     _APFCON0	set	285
  2200  011E                     _APFCON1	set	286
  2201  010E                     _LATC	set	270
  2202  010D                     _LATB	set	269
  2203  010C                     _LATA	set	268
  2204  0196                     _EECON2	set	406
  2205  0193                     _EEDATL	set	403
  2206  0194                     _EEDATH	set	404
  2207  0195                     _EECON1bits	set	405
  2208  0192                     _EEADRH	set	402
  2209  0191                     _EEADRL	set	401
  2210  018C                     _ANSELA	set	396
  2211  018D                     _ANSELB	set	397
  2212  018E                     _ANSELC	set	398
  2213  0199                     _RCREG	set	409
  2214  019D                     _RCSTAbits	set	413
  2215  019A                     _TXREG	set	410
  2216  019C                     _SPBRGH	set	412
  2217  019B                     _SPBRGL	set	411
  2218  019E                     _TXSTA	set	414
  2219  019D                     _RCSTA	set	413
  2220  019F                     _BAUDCON	set	415
  2221  020E                     _WPUC	set	526
  2222  020C                     _WPUA	set	524
  2223  020D                     _WPUB	set	525
  2224  0219                     _SSP2BUF	set	537
  2225  021E                     _SSP2CON2bits	set	542
  2226  021D                     _SSP2CON1bits	set	541
  2227  021A                     _SSP2ADD	set	538
  2228  021F                     _SSP2CON3	set	543
  2229  021D                     _SSP2CON1	set	541
  2230  021C                     _SSP2STAT	set	540
  2231  0215                     _SSP1CON1bits	set	533
  2232  0216                     _SSP1CON2bits	set	534
  2233  0214                     _SSP1STATbits	set	532
  2234  0211                     _SSP1BUF	set	529
  2235  0212                     _SSP1ADD	set	530
  2236  0213                     _SSP1MSK	set	531
  2237  0217                     _SSP1CON3	set	535
  2238  0216                     _SSP1CON2	set	534
  2239  0215                     _SSP1CON1	set	533
  2240  0214                     _SSP1STAT	set	532
  2241                           
  2242                           	psect	cinit
  2243  004A                     start_initialization:	
  2244  004A                     __initialization:	
  2245                           
  2246                           ; Initialize objects allocated to COMMON
  2247  004A  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  2248  004D  00FD               	movwf	__pdataCOMMON& (0+127)
  2249                           
  2250                           ; Initialize objects allocated to BANK1
  2251  004E  0021               	movlb	1	; select bank1
  2252  004F  3189  21BC  3180   	fcall	__pidataBANK1	;fetch initializer
  2253  0052  00EA               	movwf	__pdataBANK1& (0+127)
  2254  0053  3189  21BD  3180   	fcall	__pidataBANK1+1	;fetch initializer
  2255  0056  00EB               	movwf	(__pdataBANK1+1)& (0+127)
  2256  0057  3189  21BE  3180   	fcall	__pidataBANK1+2	;fetch initializer
  2257  005A  00EC               	movwf	(__pdataBANK1+2)& (0+127)
  2258                           
  2259                           ; Clear objects allocated to COMMON
  2260  005B  01FA               	clrf	__pbssCOMMON& (0+127)
  2261  005C  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
  2262  005D  01FC               	clrf	(__pbssCOMMON+2)& (0+127)
  2263                           
  2264                           ; Clear objects allocated to BANK0
  2265  005E  305A               	movlw	low __pbssBANK0
  2266  005F  0084               	movwf	4
  2267  0060  3000               	movlw	high __pbssBANK0
  2268  0061  0085               	movwf	5
  2269  0062  3015               	movlw	21
  2270  0063  3189  21DE  3180   	fcall	clear_ram0
  2271                           
  2272                           ; Clear objects allocated to BANK1
  2273  0066  30A0               	movlw	low __pbssBANK1
  2274  0067  0084               	movwf	4
  2275  0068  3000               	movlw	high __pbssBANK1
  2276  0069  0085               	movwf	5
  2277  006A  3042               	movlw	66
  2278  006B  3189  21DE  3180   	fcall	clear_ram0
  2279                           
  2280                           ; Clear objects allocated to BANK2
  2281  006E  3020               	movlw	low __pbssBANK2
  2282  006F  0084               	movwf	4
  2283  0070  3001               	movlw	high __pbssBANK2
  2284  0071  0085               	movwf	5
  2285  0072  3040               	movlw	64
  2286  0073  3189  21DE  3180   	fcall	clear_ram0
  2287                           
  2288                           ; Clear objects allocated to BANK3
  2289  0076  30A0               	movlw	low __pbssBANK3
  2290  0077  0084               	movwf	4
  2291  0078  3001               	movlw	high __pbssBANK3
  2292  0079  0085               	movwf	5
  2293  007A  3030               	movlw	48
  2294  007B  3189  21DE         	fcall	clear_ram0
  2295  007D                     end_of_initialization:	
  2296                           ;End of C runtime variable initialization code
  2297                           
  2298  007D                     __end_of__initialization:	
  2299  007D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2300  007E  0020               	movlb	0
  2301  007F  318D  2D46         	ljmp	_main	;jump to C main() function
  2302                           
  2303                           	psect	bssCOMMON
  2304  007A                     __pbssCOMMON:	
  2305  007A                     _eusartTxBufferRemaining:	
  2306  007A                     	ds	1
  2307  007B                     _eusartTxTail:	
  2308  007B                     	ds	1
  2309  007C                     _eusartTxHead:	
  2310  007C                     	ds	1
  2311                           
  2312                           	psect	dataCOMMON
  2313  007D                     __pdataCOMMON:	
  2314  007D                     _I2C_slaveWriteData:	
  2315  007D                     	ds	1
  2316                           
  2317                           	psect	bssBANK0
  2318  005A                     __pbssBANK0:	
  2319  005A                     _i2c2_object:	
  2320  005A                     	ds	5
  2321  005F                     _i:	
  2322  005F                     	ds	1
  2323  0060                     _value:	
  2324  0060                     	ds	1
  2325  0061                     _eusartRxCount:	
  2326  0061                     	ds	1
  2327  0062                     _eusartRxTail:	
  2328  0062                     	ds	1
  2329  0063                     _eusartRxHead:	
  2330  0063                     	ds	1
  2331  0064                     I2C2_ISR@i2c_10bit_address_restart:	
  2332  0064                     	ds	1
  2333  0065                     I2C2_ISR@i2c_bytes_left:	
  2334  0065                     	ds	1
  2335  0066                     I2C2_ISR@pi2c_buf_ptr:	
  2336  0066                     	ds	1
  2337  0067                     _p_i2c2_current:	
  2338  0067                     	ds	1
  2339  0068                     _p_i2c2_trb_current:	
  2340  0068                     	ds	1
  2341  0069                     _i2c2_trb_count:	
  2342  0069                     	ds	1
  2343  006A                     _i2c2_state:	
  2344  006A                     	ds	1
  2345  006B                     I2C1_StatusCallback@ext_cnt:	
  2346  006B                     	ds	1
  2347  006C                     I2C1_StatusCallback@next:	
  2348  006C                     	ds	1
  2349  006D                     I2C2_ISR@i2c_address:	
  2350  006D                     	ds	2
  2351                           
  2352                           	psect	bssBANK1
  2353  00A0                     __pbssBANK1:	
  2354  00A0                     _eusartRxBuffer:	
  2355  00A0                     	ds	8
  2356  00A8                     _eusartTxBuffer:	
  2357  00A8                     	ds	8
  2358  00B0                     _float100:	
  2359  00B0                     	ds	2
  2360  00B2                     _PROTOCOL_Inv_Handler:	
  2361  00B2                     	ds	2
  2362  00B4                     _PROTOCOL_Extension_Handler:	
  2363  00B4                     	ds	2
  2364  00B6                     _PROTOCOL_Loop_Func:	
  2365  00B6                     	ds	2
  2366  00B8                     _data:	
  2367  00B8                     	ds	1
  2368  00B9                     _j:	
  2369  00B9                     	ds	1
  2370  00BA                     _backplane_slave_enabled:	
  2371  00BA                     	ds	1
  2372  00BB                     _readbuf_status:	
  2373  00BB                     	ds	1
  2374  00BC                     _tmr_overflow:	
  2375  00BC                     	ds	1
  2376  00BD                     _tmr_cnt:	
  2377  00BD                     	ds	1
  2378  00BE                     _sec_cnt:	
  2379  00BE                     	ds	1
  2380  00BF                     _invoked:	
  2381  00BF                     	ds	1
  2382  00C0                     _running:	
  2383  00C0                     	ds	1
  2384  00C1                     _locked:	
  2385  00C1                     	ds	1
  2386  00C2                     _cnt:	
  2387  00C2                     	ds	1
  2388  00C3                     _slave_address:	
  2389  00C3                     	ds	1
  2390  00C4                     _initialized:	
  2391  00C4                     	ds	1
  2392  00C5                     _timer0ReloadVal:	
  2393  00C5                     	ds	1
  2394  00C6                     I2C1_StatusCallback@ext_len:	
  2395  00C6                     	ds	1
  2396  00C7                     I2C1_StatusCallback@slaveWriteType:	
  2397  00C7                     	ds	1
  2398  00C8                     _readbuf:	
  2399  00C8                     	ds	6
  2400  00CE                     I2C2_MasterRead@trBlock:	
  2401  00CE                     	ds	4
  2402  00D2                     I2C2_MasterWrite@trBlock:	
  2403  00D2                     	ds	4
  2404  00D6                     PROTOCOL_Send_float@pbuf:	
  2405  00D6                     	ds	3
  2406  00D9                     _i2c2_tr_queue:	
  2407  00D9                     	ds	3
  2408  00DC                     PROTOCOL_Send_int16_t@pbuf:	
  2409  00DC                     	ds	2
  2410  00DE                     PROTOCOL_Send_uint16_t@pbuf:	
  2411  00DE                     	ds	2
  2412  00E0                     PROTOCOL_Send_int8_t@pbuf:	
  2413  00E0                     	ds	1
  2414  00E1                     PROTOCOL_Send_uint8_t@pbuf:	
  2415  00E1                     	ds	1
  2416                           
  2417                           	psect	dataBANK1
  2418  00EA                     __pdataBANK1:	
  2419  00EA                     _tmr_scaler:	
  2420  00EA                     	ds	1
  2421  00EB                     _BACKPLANE_SLAVE_ADDRESS:	
  2422  00EB                     	ds	1
  2423  00EC                     _type_no_data:	
  2424  00EC                     	ds	1
  2425                           
  2426                           	psect	bssBANK2
  2427  0120                     __pbssBANK2:	
  2428  0120                     _buf:	
  2429  0120                     	ds	48
  2430  0150                     _sendbuf:	
  2431  0150                     	ds	16
  2432                           
  2433                           	psect	bssBANK3
  2434  01A0                     __pbssBANK3:	
  2435  01A0                     I2C1_StatusCallback@ext_buf:	
  2436  01A0                     	ds	48
  2437                           
  2438                           	psect	clrtext
  2439  09DE                     clear_ram0:	
  2440                           ;	Called with FSR0 containing the base address, and
  2441                           ;	WREG with the size to clear
  2442                           
  2443  09DE  0064               	clrwdt	;clear the watchdog before getting into this loop
  2444  09DF                     clrloop0:	
  2445  09DF  0180               	clrf	0	;clear RAM location pointed to by FSR
  2446  09E0  3101               	addfsr 0,1
  2447  09E1  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2448  09E2  29DF               	goto	clrloop0	;have we reached the end yet?
  2449  09E3  3400               	retlw	0	;all done for this memory range, return
  2450                           
  2451                           	psect	cstackBANK1
  2452  00ED                     __pcstackBANK1:	
  2453  00ED                     PROTOCOL_Loop@c:	
  2454                           
  2455                           ; 1 bytes @ 0x0
  2456  00ED                     	ds	1
  2457  00EE                     PROTOCOL_Loop@device_address:	
  2458                           
  2459                           ; 1 bytes @ 0x1
  2460  00EE                     	ds	1
  2461                           
  2462                           	psect	cstackCOMMON
  2463  0070                     __pcstackCOMMON:	
  2464  0070                     ?_isdigit:	
  2465  0070                     ?_PROTOCOL_Read_Device_Address:	
  2466                           ; 1 bit 
  2467                           
  2468  0070                     ?_I2C1_StatusCallback:	
  2469                           ; 1 bytes @ 0x0
  2470                           
  2471  0070                     ?_PROTOCOL_SET:	
  2472                           ; 1 bytes @ 0x0
  2473                           
  2474  0070                     ?_PROTOCOL_STA:	
  2475                           ; 1 bytes @ 0x0
  2476                           
  2477  0070                     ?_PROTOCOL_STP:	
  2478                           ; 1 bytes @ 0x0
  2479                           
  2480  0070                     ?_PROTOCOL_SAV:	
  2481                           ; 1 bytes @ 0x0
  2482                           
  2483  0070                     ?_PROTOCOL_INV:	
  2484                           ; 1 bytes @ 0x0
  2485                           
  2486  0070                     ??_PROTOCOL_INV:	
  2487                           ; 1 bytes @ 0x0
  2488                           
  2489  0070                     ?_PROTOCOL_RST:	
  2490                           ; 1 bytes @ 0x0
  2491                           
  2492  0070                     ??_PROTOCOL_RST:	
  2493                           ; 1 bytes @ 0x0
  2494                           
  2495  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2496                           ; 1 bytes @ 0x0
  2497                           
  2498  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2499                           ; 1 bytes @ 0x0
  2500                           
  2501  0070                     ?_PROTOCOL_Read_Lock:	
  2502                           ; 1 bytes @ 0x0
  2503                           
  2504  0070                     ??_PROTOCOL_Read_Lock:	
  2505                           ; 1 bytes @ 0x0
  2506                           
  2507  0070                     ?_PROTOCOL_EXT:	
  2508                           ; 1 bytes @ 0x0
  2509                           
  2510  0070                     ?_PROTOCOL_I2C_WHO:	
  2511                           ; 1 bytes @ 0x0
  2512                           
  2513  0070                     ??_PROTOCOL_I2C_WHO:	
  2514                           ; 1 bytes @ 0x0
  2515                           
  2516  0070                     ??_PROTOCOL_I2C_SEN:	
  2517                           ; 1 bytes @ 0x0
  2518                           
  2519  0070                     ?_PROTOCOL_I2C_GET:	
  2520                           ; 1 bytes @ 0x0
  2521                           
  2522  0070                     ??_PROTOCOL_I2C_GET:	
  2523                           ; 1 bytes @ 0x0
  2524                           
  2525  0070                     ?_I2C2_Stop:	
  2526                           ; 1 bytes @ 0x0
  2527                           
  2528  0070                     ??_I2C2_Stop:	
  2529                           ; 1 bytes @ 0x0
  2530                           
  2531  0070                     ?_I2C2_FunctionComplete:	
  2532                           ; 1 bytes @ 0x0
  2533                           
  2534  0070                     ??_I2C2_FunctionComplete:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0070                     ?_PIN_MANAGER_Initialize:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540  0070                     ?_OSCILLATOR_Initialize:	
  2541                           ; 1 bytes @ 0x0
  2542                           
  2543  0070                     ?_WDT_Initialize:	
  2544                           ; 1 bytes @ 0x0
  2545                           
  2546  0070                     ?_TMR0_Initialize:	
  2547                           ; 1 bytes @ 0x0
  2548                           
  2549  0070                     ?_EUSART_Initialize:	
  2550                           ; 1 bytes @ 0x0
  2551                           
  2552  0070                     ?_EUSART_Transmit_ISR:	
  2553                           ; 1 bytes @ 0x0
  2554                           
  2555  0070                     ??_EUSART_Transmit_ISR:	
  2556                           ; 1 bytes @ 0x0
  2557                           
  2558  0070                     ?_EUSART_Receive_ISR:	
  2559                           ; 1 bytes @ 0x0
  2560                           
  2561  0070                     ??_EUSART_Receive_ISR:	
  2562                           ; 1 bytes @ 0x0
  2563                           
  2564  0070                     ?_PROTOCOL_Loop:	
  2565                           ; 1 bytes @ 0x0
  2566                           
  2567  0070                     ?_I2C1_Initialize:	
  2568                           ; 1 bytes @ 0x0
  2569                           
  2570  0070                     ?_I2C1_ISR:	
  2571                           ; 1 bytes @ 0x0
  2572                           
  2573  0070                     ?_I2C2_Initialize:	
  2574                           ; 1 bytes @ 0x0
  2575                           
  2576  0070                     ?_I2C2_ISR:	
  2577                           ; 1 bytes @ 0x0
  2578                           
  2579  0070                     ?_I2C2_BusCollisionISR:	
  2580                           ; 1 bytes @ 0x0
  2581                           
  2582  0070                     ??_I2C2_BusCollisionISR:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585  0070                     ?_INTERRUPT_InterruptManager:	
  2586                           ; 1 bytes @ 0x0
  2587                           
  2588  0070                     ?_EUSART_Read:	
  2589                           ; 1 bytes @ 0x0
  2590                           
  2591  0070                     ?_EUSART_Write:	
  2592                           ; 1 bytes @ 0x0
  2593                           
  2594  0070                     ?_putch:	
  2595                           ; 1 bytes @ 0x0
  2596                           
  2597  0070                     ?_DATAEE_ReadByte:	
  2598                           ; 1 bytes @ 0x0
  2599                           
  2600  0070                     ?_TMR0_HasOverflowOccured:	
  2601                           ; 1 bytes @ 0x0
  2602                           
  2603  0070                     ?_inv_handler:	
  2604                           ; 1 bytes @ 0x0
  2605                           
  2606  0070                     ?_main:	
  2607                           ; 1 bytes @ 0x0
  2608                           
  2609  0070                     ?_PROTOCOL_Write_Device_Address:	
  2610                           ; 1 bytes @ 0x0
  2611                           
  2612  0070                     ?i1_DATAEE_WriteByte:	
  2613                           ; 1 bytes @ 0x0
  2614                           
  2615  0070                     ?i1_PROTOCOL_STA:	
  2616                           ; 1 bytes @ 0x0
  2617                           
  2618  0070                     ??i1_PROTOCOL_STA:	
  2619                           ; 1 bytes @ 0x0
  2620                           
  2621  0070                     ?i1_PROTOCOL_STP:	
  2622                           ; 1 bytes @ 0x0
  2623                           
  2624  0070                     ??i1_PROTOCOL_STP:	
  2625                           ; 1 bytes @ 0x0
  2626                           
  2627  0070                     ?i1_PROTOCOL_SAV:	
  2628                           ; 1 bytes @ 0x0
  2629                           
  2630  0070                     ?i1_PROTOCOL_SET:	
  2631                           ; 1 bytes @ 0x0
  2632                           
  2633  0070                     ??i1_PROTOCOL_SET:	
  2634                           ; 1 bytes @ 0x0
  2635                           
  2636  0070                     ?i1_PROTOCOL_EXT:	
  2637                           ; 1 bytes @ 0x0
  2638                           
  2639  0070                     ??i1_PROTOCOL_EXT:	
  2640                           ; 1 bytes @ 0x0
  2641                           
  2642  0070                     ?_PROTOCOL_I2C_SEN:	
  2643                           ; 1 bytes @ 0x0
  2644                           
  2645  0070                     i1DATAEE_WriteByte@bData:	
  2646                           ; 2 bytes @ 0x0
  2647                           
  2648                           
  2649                           ; 1 bytes @ 0x0
  2650  0070                     	ds	1
  2651  0071                     ??i1_DATAEE_WriteByte:	
  2652  0071                     I2C2_Stop@completion_code:	
  2653                           ; 1 bytes @ 0x1
  2654                           
  2655  0071                     i1DATAEE_WriteByte@bAdd:	
  2656                           ; 1 bytes @ 0x1
  2657                           
  2658  0071                     i1PROTOCOL_SET@value_:	
  2659                           ; 1 bytes @ 0x1
  2660                           
  2661                           
  2662                           ; 1 bytes @ 0x1
  2663  0071                     	ds	1
  2664  0072                     ??_I2C2_ISR:	
  2665  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2666                           ; 1 bytes @ 0x2
  2667                           
  2668  0072                     PROTOCOL_I2C_SEN@pdata:	
  2669                           ; 1 bytes @ 0x2
  2670                           
  2671                           
  2672                           ; 2 bytes @ 0x2
  2673  0072                     	ds	1
  2674  0073                     ??i1_PROTOCOL_SAV:	
  2675                           
  2676                           ; 1 bytes @ 0x3
  2677  0073                     	ds	1
  2678  0074                     ??_I2C1_StatusCallback:	
  2679                           
  2680                           ; 1 bytes @ 0x4
  2681  0074                     	ds	1
  2682  0075                     I2C1_StatusCallback@pdata:	
  2683                           
  2684                           ; 2 bytes @ 0x5
  2685  0075                     	ds	2
  2686  0077                     I2C1_StatusCallback@i2c_bus_state:	
  2687                           
  2688                           ; 1 bytes @ 0x7
  2689  0077                     	ds	1
  2690  0078                     ??_I2C1_ISR:	
  2691                           
  2692                           ; 1 bytes @ 0x8
  2693  0078                     	ds	1
  2694  0079                     I2C1_ISR@i2c_data:	
  2695                           
  2696                           ; 1 bytes @ 0x9
  2697  0079                     	ds	1
  2698                           
  2699                           	psect	cstackBANK0
  2700  0020                     __pcstackBANK0:	
  2701  0020                     ??_INTERRUPT_InterruptManager:	
  2702                           
  2703                           ; 1 bytes @ 0x0
  2704  0020                     	ds	1
  2705  0021                     ??_PROTOCOL_Read_Device_Address:	
  2706  0021                     ??_PROTOCOL_SET:	
  2707                           ; 1 bytes @ 0x1
  2708                           
  2709  0021                     ??_PROTOCOL_STA:	
  2710                           ; 1 bytes @ 0x1
  2711                           
  2712  0021                     ??_PROTOCOL_STP:	
  2713                           ; 1 bytes @ 0x1
  2714                           
  2715  0021                     ??_PROTOCOL_EXT:	
  2716                           ; 1 bytes @ 0x1
  2717                           
  2718  0021                     ?_I2C2_MasterWriteTRBBuild:	
  2719                           ; 1 bytes @ 0x1
  2720                           
  2721  0021                     ?_I2C2_MasterTRBInsert:	
  2722                           ; 1 bytes @ 0x1
  2723                           
  2724  0021                     ?_I2C2_MasterReadTRBBuild:	
  2725                           ; 1 bytes @ 0x1
  2726                           
  2727  0021                     ??_PIN_MANAGER_Initialize:	
  2728                           ; 1 bytes @ 0x1
  2729                           
  2730  0021                     ??_OSCILLATOR_Initialize:	
  2731                           ; 1 bytes @ 0x1
  2732                           
  2733  0021                     ??_WDT_Initialize:	
  2734                           ; 1 bytes @ 0x1
  2735                           
  2736  0021                     ??_TMR0_Initialize:	
  2737                           ; 1 bytes @ 0x1
  2738                           
  2739  0021                     ??_EUSART_Initialize:	
  2740                           ; 1 bytes @ 0x1
  2741                           
  2742  0021                     ??_isdigit:	
  2743                           ; 1 bytes @ 0x1
  2744                           
  2745  0021                     ??_I2C1_Initialize:	
  2746                           ; 1 bytes @ 0x1
  2747                           
  2748  0021                     ??_I2C2_Initialize:	
  2749                           ; 1 bytes @ 0x1
  2750                           
  2751  0021                     ??_EUSART_Read:	
  2752                           ; 1 bytes @ 0x1
  2753                           
  2754  0021                     ??_EUSART_Write:	
  2755                           ; 1 bytes @ 0x1
  2756                           
  2757  0021                     ?_DATAEE_WriteByte:	
  2758                           ; 1 bytes @ 0x1
  2759                           
  2760  0021                     ??_DATAEE_ReadByte:	
  2761                           ; 1 bytes @ 0x1
  2762                           
  2763  0021                     ??_TMR0_HasOverflowOccured:	
  2764                           ; 1 bytes @ 0x1
  2765                           
  2766  0021                     ?_PROTOCOL_I2C_Set_TLV:	
  2767                           ; 1 bytes @ 0x1
  2768                           
  2769  0021                     ?_strncmp:	
  2770                           ; 1 bytes @ 0x1
  2771                           
  2772  0021                     ?___wmul:	
  2773                           ; 2 bytes @ 0x1
  2774                           
  2775  0021                     ?___lwdiv:	
  2776                           ; 2 bytes @ 0x1
  2777                           
  2778  0021                     ?___lmul:	
  2779                           ; 2 bytes @ 0x1
  2780                           
  2781  0021                     I2C2_MasterTRBInsert@ptrb_list:	
  2782                           ; 4 bytes @ 0x1
  2783                           
  2784  0021                     I2C2_MasterReadTRBBuild@pdata:	
  2785                           ; 1 bytes @ 0x1
  2786                           
  2787  0021                     I2C2_MasterWriteTRBBuild@pdata:	
  2788                           ; 1 bytes @ 0x1
  2789                           
  2790  0021                     DATAEE_WriteByte@bData:	
  2791                           ; 1 bytes @ 0x1
  2792                           
  2793  0021                     DATAEE_ReadByte@bAdd:	
  2794                           ; 1 bytes @ 0x1
  2795                           
  2796  0021                     PROTOCOL_EXT@char_buf:	
  2797                           ; 1 bytes @ 0x1
  2798                           
  2799  0021                     PROTOCOL_I2C_Set_TLV@length:	
  2800                           ; 1 bytes @ 0x1
  2801                           
  2802  0021                     _isdigit$1484:	
  2803                           ; 1 bytes @ 0x1
  2804                           
  2805  0021                     ___wmul@multiplier:	
  2806                           ; 1 bytes @ 0x1
  2807                           
  2808  0021                     ___lwdiv@divisor:	
  2809                           ; 2 bytes @ 0x1
  2810                           
  2811  0021                     strncmp@s1:	
  2812                           ; 2 bytes @ 0x1
  2813                           
  2814  0021                     ___lmul@multiplier:	
  2815                           ; 2 bytes @ 0x1
  2816                           
  2817                           
  2818                           ; 4 bytes @ 0x1
  2819  0021                     	ds	1
  2820  0022                     ?_PROTOCOL_Initialize:	
  2821  0022                     ??_DATAEE_WriteByte:	
  2822                           ; 1 bytes @ 0x2
  2823                           
  2824  0022                     I2C2_MasterTRBInsert@pflag:	
  2825                           ; 1 bytes @ 0x2
  2826                           
  2827  0022                     I2C2_MasterReadTRBBuild@length:	
  2828                           ; 1 bytes @ 0x2
  2829                           
  2830  0022                     I2C2_MasterWriteTRBBuild@length:	
  2831                           ; 1 bytes @ 0x2
  2832                           
  2833  0022                     EUSART_Read@readValue:	
  2834                           ; 1 bytes @ 0x2
  2835                           
  2836  0022                     EUSART_Write@txData:	
  2837                           ; 1 bytes @ 0x2
  2838                           
  2839  0022                     DATAEE_WriteByte@bAdd:	
  2840                           ; 1 bytes @ 0x2
  2841                           
  2842  0022                     PROTOCOL_SET@value_:	
  2843                           ; 1 bytes @ 0x2
  2844                           
  2845  0022                     isdigit@c:	
  2846                           ; 1 bytes @ 0x2
  2847                           
  2848  0022                     PROTOCOL_Initialize@device_id:	
  2849                           ; 1 bytes @ 0x2
  2850                           
  2851  0022                     PROTOCOL_I2C_Set_TLV@pbuffer:	
  2852                           ; 2 bytes @ 0x2
  2853                           
  2854                           
  2855                           ; 2 bytes @ 0x2
  2856  0022                     	ds	1
  2857  0023                     ??_I2C2_MasterTRBInsert:	
  2858  0023                     ??_putch:	
  2859                           ; 1 bytes @ 0x3
  2860                           
  2861  0023                     putch@txData:	
  2862                           ; 1 bytes @ 0x3
  2863                           
  2864  0023                     DATAEE_WriteByte@GIEBitValue:	
  2865                           ; 1 bytes @ 0x3
  2866                           
  2867  0023                     strncmp@s2:	
  2868                           ; 1 bytes @ 0x3
  2869                           
  2870  0023                     I2C2_MasterReadTRBBuild@address:	
  2871                           ; 1 bytes @ 0x3
  2872                           
  2873  0023                     I2C2_MasterWriteTRBBuild@address:	
  2874                           ; 2 bytes @ 0x3
  2875                           
  2876  0023                     ___wmul@multiplicand:	
  2877                           ; 2 bytes @ 0x3
  2878                           
  2879  0023                     ___lwdiv@dividend:	
  2880                           ; 2 bytes @ 0x3
  2881                           
  2882                           
  2883                           ; 2 bytes @ 0x3
  2884  0023                     	ds	1
  2885  0024                     ??_PROTOCOL_SAV:	
  2886  0024                     ??_PROTOCOL_Write_Device_Address:	
  2887                           ; 1 bytes @ 0x4
  2888                           
  2889  0024                     ??_PROTOCOL_I2C_Set_TLV:	
  2890                           ; 1 bytes @ 0x4
  2891                           
  2892  0024                     I2C2_MasterTRBInsert@count:	
  2893                           ; 1 bytes @ 0x4
  2894                           
  2895  0024                     PROTOCOL_Initialize@start_handler:	
  2896                           ; 1 bytes @ 0x4
  2897                           
  2898  0024                     strncmp@len:	
  2899                           ; 1 bytes @ 0x4
  2900                           
  2901                           
  2902                           ; 2 bytes @ 0x4
  2903  0024                     	ds	1
  2904  0025                     ??_I2C2_MasterWriteTRBBuild:	
  2905  0025                     ??_I2C2_MasterReadTRBBuild:	
  2906                           ; 1 bytes @ 0x5
  2907                           
  2908  0025                     ??___wmul:	
  2909                           ; 1 bytes @ 0x5
  2910                           
  2911  0025                     ??___lwdiv:	
  2912                           ; 1 bytes @ 0x5
  2913                           
  2914  0025                     PROTOCOL_Initialize@stop_handler:	
  2915                           ; 1 bytes @ 0x5
  2916                           
  2917  0025                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  2918                           ; 1 bytes @ 0x5
  2919                           
  2920  0025                     PROTOCOL_I2C_Set_TLV@type:	
  2921                           ; 1 bytes @ 0x5
  2922                           
  2923  0025                     ___wmul@product:	
  2924                           ; 1 bytes @ 0x5
  2925                           
  2926  0025                     ___lmul@multiplicand:	
  2927                           ; 2 bytes @ 0x5
  2928                           
  2929                           
  2930                           ; 4 bytes @ 0x5
  2931  0025                     	ds	1
  2932  0026                     ??_strncmp:	
  2933  0026                     PROTOCOL_Initialize@set_handler:	
  2934                           ; 1 bytes @ 0x6
  2935                           
  2936  0026                     PROTOCOL_I2C_Set_TLV@status:	
  2937                           ; 1 bytes @ 0x6
  2938                           
  2939  0026                     ___lwdiv@counter:	
  2940                           ; 1 bytes @ 0x6
  2941                           
  2942                           
  2943                           ; 1 bytes @ 0x6
  2944  0026                     	ds	1
  2945  0027                     ?_atoi:	
  2946  0027                     I2C2_MasterReadTRBBuild@ptrb:	
  2947                           ; 2 bytes @ 0x7
  2948                           
  2949  0027                     I2C2_MasterWriteTRBBuild@ptrb:	
  2950                           ; 1 bytes @ 0x7
  2951                           
  2952  0027                     PROTOCOL_Initialize@inv_handler:	
  2953                           ; 1 bytes @ 0x7
  2954                           
  2955  0027                     ___lwdiv@quotient:	
  2956                           ; 2 bytes @ 0x7
  2957                           
  2958                           
  2959                           ; 2 bytes @ 0x7
  2960  0027                     	ds	1
  2961  0028                     ?_I2C2_MasterWrite:	
  2962  0028                     ?_I2C2_MasterRead:	
  2963                           ; 1 bytes @ 0x8
  2964                           
  2965  0028                     I2C2_MasterWrite@length:	
  2966                           ; 1 bytes @ 0x8
  2967                           
  2968  0028                     I2C2_MasterRead@length:	
  2969                           ; 1 bytes @ 0x8
  2970                           
  2971                           
  2972                           ; 1 bytes @ 0x8
  2973  0028                     	ds	1
  2974  0029                     ??_atoi:	
  2975  0029                     ??___lmul:	
  2976                           ; 1 bytes @ 0x9
  2977                           
  2978  0029                     ?___lwmod:	
  2979                           ; 1 bytes @ 0x9
  2980                           
  2981  0029                     PROTOCOL_Initialize@scaler:	
  2982                           ; 2 bytes @ 0x9
  2983                           
  2984  0029                     I2C2_MasterWrite@address:	
  2985                           ; 1 bytes @ 0x9
  2986                           
  2987  0029                     I2C2_MasterRead@address:	
  2988                           ; 2 bytes @ 0x9
  2989                           
  2990  0029                     ___lwmod@divisor:	
  2991                           ; 2 bytes @ 0x9
  2992                           
  2993  0029                     ___lmul@product:	
  2994                           ; 2 bytes @ 0x9
  2995                           
  2996                           
  2997                           ; 4 bytes @ 0x9
  2998  0029                     	ds	1
  2999  002A                     ??_PROTOCOL_Initialize:	
  3000                           
  3001                           ; 1 bytes @ 0xA
  3002  002A                     	ds	1
  3003  002B                     I2C2_MasterWrite@pflag:	
  3004  002B                     I2C2_MasterRead@pflag:	
  3005                           ; 1 bytes @ 0xB
  3006                           
  3007  002B                     atoi@sign:	
  3008                           ; 1 bytes @ 0xB
  3009                           
  3010  002B                     ___lwmod@dividend:	
  3011                           ; 1 bytes @ 0xB
  3012                           
  3013                           
  3014                           ; 2 bytes @ 0xB
  3015  002B                     	ds	1
  3016  002C                     ??_I2C2_MasterWrite:	
  3017  002C                     ??_I2C2_MasterRead:	
  3018                           ; 1 bytes @ 0xC
  3019                           
  3020  002C                     atoi@a:	
  3021                           ; 1 bytes @ 0xC
  3022                           
  3023                           
  3024                           ; 2 bytes @ 0xC
  3025  002C                     	ds	1
  3026  002D                     ??___lwmod:	
  3027  002D                     ?___aldiv:	
  3028                           ; 1 bytes @ 0xD
  3029                           
  3030  002D                     ___aldiv@divisor:	
  3031                           ; 4 bytes @ 0xD
  3032                           
  3033                           
  3034                           ; 4 bytes @ 0xD
  3035  002D                     	ds	1
  3036  002E                     I2C2_MasterWrite@pdata:	
  3037  002E                     I2C2_MasterRead@pdata:	
  3038                           ; 1 bytes @ 0xE
  3039                           
  3040  002E                     atoi@s:	
  3041                           ; 1 bytes @ 0xE
  3042                           
  3043  002E                     ___lwmod@counter:	
  3044                           ; 1 bytes @ 0xE
  3045                           
  3046                           
  3047                           ; 1 bytes @ 0xE
  3048  002E                     	ds	1
  3049  002F                     ?_i2c2_write:	
  3050  002F                     ?_i2c2_write_no_data:	
  3051                           ; 1 bytes @ 0xF
  3052                           
  3053  002F                     ?_i2c2_read_no_reg_addr:	
  3054                           ; 1 bytes @ 0xF
  3055                           
  3056  002F                     ?_printf:	
  3057                           ; 1 bytes @ 0xF
  3058                           
  3059  002F                     printf@f:	
  3060                           ; 2 bytes @ 0xF
  3061                           
  3062  002F                     i2c2_write@dev_addr:	
  3063                           ; 2 bytes @ 0xF
  3064                           
  3065  002F                     i2c2_write_no_data@dev_addr:	
  3066                           ; 2 bytes @ 0xF
  3067                           
  3068  002F                     i2c2_read_no_reg_addr@dev_addr:	
  3069                           ; 2 bytes @ 0xF
  3070                           
  3071                           
  3072                           ; 2 bytes @ 0xF
  3073  002F                     	ds	2
  3074  0031                     i2c2_write@reg_addr:	
  3075  0031                     i2c2_write_no_data@reg_addr:	
  3076                           ; 1 bytes @ 0x11
  3077                           
  3078  0031                     i2c2_read_no_reg_addr@pbuf:	
  3079                           ; 1 bytes @ 0x11
  3080                           
  3081  0031                     ___aldiv@dividend:	
  3082                           ; 1 bytes @ 0x11
  3083                           
  3084                           
  3085                           ; 4 bytes @ 0x11
  3086  0031                     	ds	1
  3087  0032                     ??_i2c2_write_no_data:	
  3088  0032                     i2c2_write@data:	
  3089                           ; 1 bytes @ 0x12
  3090                           
  3091  0032                     i2c2_read_no_reg_addr@len:	
  3092                           ; 1 bytes @ 0x12
  3093                           
  3094                           
  3095                           ; 1 bytes @ 0x12
  3096  0032                     	ds	1
  3097  0033                     ??_i2c2_write:	
  3098  0033                     ??_i2c2_read_no_reg_addr:	
  3099                           ; 1 bytes @ 0x13
  3100                           
  3101  0033                     ??_printf:	
  3102                           ; 1 bytes @ 0x13
  3103                           
  3104  0033                     i2c2_write_no_data@timeout:	
  3105                           ; 1 bytes @ 0x13
  3106                           
  3107                           
  3108                           ; 1 bytes @ 0x13
  3109  0033                     	ds	1
  3110  0034                     i2c2_write_no_data@buf:	
  3111                           
  3112                           ; 1 bytes @ 0x14
  3113  0034                     	ds	1
  3114  0035                     ??___aldiv:	
  3115  0035                     i2c2_write@write_status:	
  3116                           ; 1 bytes @ 0x15
  3117                           
  3118  0035                     i2c2_write_no_data@write_status:	
  3119                           ; 1 bytes @ 0x15
  3120                           
  3121  0035                     i2c2_read_no_reg_addr@timeout:	
  3122                           ; 1 bytes @ 0x15
  3123                           
  3124                           
  3125                           ; 1 bytes @ 0x15
  3126  0035                     	ds	1
  3127  0036                     i2c2_write_no_data@status:	
  3128  0036                     i2c2_read_no_reg_addr@read_status:	
  3129                           ; 1 bytes @ 0x16
  3130                           
  3131  0036                     ___aldiv@counter:	
  3132                           ; 1 bytes @ 0x16
  3133                           
  3134  0036                     i2c2_write@buf:	
  3135                           ; 1 bytes @ 0x16
  3136                           
  3137                           
  3138                           ; 2 bytes @ 0x16
  3139  0036                     	ds	1
  3140  0037                     printf@prec:	
  3141  0037                     i2c2_read_no_reg_addr@status:	
  3142                           ; 1 bytes @ 0x17
  3143                           
  3144  0037                     ___aldiv@sign:	
  3145                           ; 1 bytes @ 0x17
  3146                           
  3147                           
  3148                           ; 1 bytes @ 0x17
  3149  0037                     	ds	1
  3150  0038                     i2c2_write@status:	
  3151  0038                     printf@cp:	
  3152                           ; 1 bytes @ 0x18
  3153                           
  3154  0038                     ___aldiv@quotient:	
  3155                           ; 2 bytes @ 0x18
  3156                           
  3157                           
  3158                           ; 4 bytes @ 0x18
  3159  0038                     	ds	2
  3160  003A                     printf@ap:	
  3161                           
  3162                           ; 1 bytes @ 0x1A
  3163  003A                     	ds	1
  3164  003B                     printf@val:	
  3165                           
  3166                           ; 2 bytes @ 0x1B
  3167  003B                     	ds	2
  3168  003D                     printf@len:	
  3169                           
  3170                           ; 2 bytes @ 0x1D
  3171  003D                     	ds	2
  3172  003F                     printf@flag:	
  3173                           
  3174                           ; 1 bytes @ 0x1F
  3175  003F                     	ds	1
  3176  0040                     printf@width:	
  3177                           
  3178                           ; 2 bytes @ 0x20
  3179  0040                     	ds	2
  3180  0042                     printf@c:	
  3181                           
  3182                           ; 1 bytes @ 0x22
  3183  0042                     	ds	1
  3184  0043                     ?_PROTOCOL_I2C_Send_int8_t:	
  3185  0043                     PROTOCOL_I2C_Send_int8_t@pbuffer:	
  3186                           ; 1 bytes @ 0x23
  3187                           
  3188                           
  3189                           ; 1 bytes @ 0x23
  3190  0043                     	ds	1
  3191  0044                     ??_PROTOCOL_I2C_Send_int8_t:	
  3192                           
  3193                           ; 1 bytes @ 0x24
  3194  0044                     	ds	2
  3195  0046                     PROTOCOL_I2C_Send_int8_t@length:	
  3196                           
  3197                           ; 1 bytes @ 0x26
  3198  0046                     	ds	1
  3199  0047                     ??_inv_handler:	
  3200                           
  3201                           ; 1 bytes @ 0x27
  3202  0047                     	ds	5
  3203  004C                     inv_handler@status:	
  3204                           
  3205                           ; 1 bytes @ 0x2C
  3206  004C                     	ds	1
  3207  004D                     inv_handler@measure:	
  3208                           
  3209                           ; 4 bytes @ 0x2D
  3210  004D                     	ds	4
  3211  0051                     inv_handler@data:	
  3212                           
  3213                           ; 2 bytes @ 0x31
  3214  0051                     	ds	2
  3215  0053                     inv_handler@t:	
  3216                           
  3217                           ; 4 bytes @ 0x33
  3218  0053                     	ds	4
  3219  0057                     ??_PROTOCOL_Loop:	
  3220                           
  3221                           ; 1 bytes @ 0x37
  3222  0057                     	ds	2
  3223  0059                     ??_main:	
  3224                           
  3225                           ; 1 bytes @ 0x39
  3226  0059                     	ds	1
  3227                           
  3228                           	psect	maintext
  3229  0D46                     __pmaintext:	
  3230 ;;
  3231 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3232 ;;
  3233 ;; *************** function _main *****************
  3234 ;; Defined at:
  3235 ;;		line 50 in file "main.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;		None
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;		None
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : B1F/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3252 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3253 ;;Total ram usage:        1 bytes
  3254 ;; Hardware stack levels required when called:   11
  3255 ;; This function calls:
  3256 ;;		_EUSART_Initialize
  3257 ;;		_I2C1_Initialize
  3258 ;;		_I2C2_Initialize
  3259 ;;		_OSCILLATOR_Initialize
  3260 ;;		_PIN_MANAGER_Initialize
  3261 ;;		_PROTOCOL_Initialize
  3262 ;;		_PROTOCOL_Loop
  3263 ;;		_TMR0_Initialize
  3264 ;;		_WDT_Initialize
  3265 ;; This function is called by:
  3266 ;;		Startup code after reset
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           
  3271                           ;psect for function _main
  3272  0D46                     _main:	
  3273                           
  3274                           ;main.c: 53: PROTOCOL_Initialize("HDC1000", (0), (0), (0), inv_handler, 250);
  3275                           
  3276                           ;incstack = 0
  3277                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3278  0D46  3066               	movlw	low (STR_1| (0+32768))
  3279  0D47  0020               	movlb	0	; select bank0
  3280  0D48  00A2               	movwf	PROTOCOL_Initialize@device_id
  3281  0D49  3087               	movlw	high (STR_1| (0+32768))
  3282  0D4A  00A3               	movwf	PROTOCOL_Initialize@device_id+1
  3283  0D4B  01A4               	clrf	PROTOCOL_Initialize@start_handler
  3284  0D4C  01A5               	clrf	PROTOCOL_Initialize@stop_handler
  3285  0D4D  01A6               	clrf	PROTOCOL_Initialize@set_handler
  3286  0D4E  3026               	movlw	low _inv_handler
  3287  0D4F  00A7               	movwf	PROTOCOL_Initialize@inv_handler
  3288  0D50  3005               	movlw	high _inv_handler
  3289  0D51  00A8               	movwf	PROTOCOL_Initialize@inv_handler+1
  3290  0D52  30FA               	movlw	250
  3291  0D53  00D9               	movwf	??_main
  3292  0D54  0859               	movf	??_main,w
  3293  0D55  00A9               	movwf	PROTOCOL_Initialize@scaler
  3294  0D56  318E  265E  318D   	fcall	_PROTOCOL_Initialize
  3295                           
  3296                           ;main.c: 56: PIN_MANAGER_Initialize();
  3297  0D59  318B  2313  318D   	fcall	_PIN_MANAGER_Initialize
  3298                           
  3299                           ;main.c: 57: OSCILLATOR_Initialize();
  3300  0D5C  3189  21D3  318D   	fcall	_OSCILLATOR_Initialize
  3301                           
  3302                           ;main.c: 58: WDT_Initialize();
  3303  0D5F  3187  27FC  318D   	fcall	_WDT_Initialize
  3304                           
  3305                           ;main.c: 59: TMR0_Initialize();
  3306  0D62  318A  222A  318D   	fcall	_TMR0_Initialize
  3307                           
  3308                           ;main.c: 62: (INTCONbits.GIE = 1);
  3309  0D65  178B               	bsf	11,7	;volatile
  3310                           
  3311                           ;main.c: 63: (INTCONbits.PEIE = 1);
  3312  0D66  170B               	bsf	11,6	;volatile
  3313                           
  3314                           ;main.c: 66: EUSART_Initialize();
  3315  0D67  318A  228A  318D   	fcall	_EUSART_Initialize
  3316                           
  3317                           ;main.c: 69: I2C2_Initialize();
  3318  0D6A  318A  2272  318D   	fcall	_I2C2_Initialize
  3319                           
  3320                           ;main.c: 72: I2C1_Initialize();
  3321  0D6D  318B  2370  318D   	fcall	_I2C1_Initialize
  3322                           
  3323                           ;main.c: 75: PROTOCOL_Loop();
  3324  0D70  3182  2256         	fcall	_PROTOCOL_Loop
  3325  0D72  3180  2848         	ljmp	start
  3326  0D74                     __end_of_main:	
  3327                           
  3328                           	psect	text1
  3329  07FC                     __ptext1:	
  3330 ;; *************** function _WDT_Initialize *****************
  3331 ;; Defined at:
  3332 ;;		line 89 in file "mcc_generated_files/mcc.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;		None
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;		None
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  1    wreg      void 
  3339 ;; Registers used:
  3340 ;;		wreg
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3350 ;;Total ram usage:        0 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:    5
  3353 ;; This function calls:
  3354 ;;		Nothing
  3355 ;; This function is called by:
  3356 ;;		_main
  3357 ;;		_SYSTEM_Initialize
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           
  3362                           ;psect for function _WDT_Initialize
  3363  07FC                     _WDT_Initialize:	
  3364                           
  3365                           ;mcc.c: 92: WDTCON = 0x16;
  3366                           
  3367                           ;incstack = 0
  3368                           ; Regs used in _WDT_Initialize: [wreg]
  3369  07FC  3016               	movlw	22
  3370  07FD  0021               	movlb	1	; select bank1
  3371  07FE  0097               	movwf	23	;volatile
  3372  07FF  0008               	return
  3373  0800                     __end_of_WDT_Initialize:	
  3374                           
  3375                           	psect	text2
  3376  0A2A                     __ptext2:	
  3377 ;; *************** function _TMR0_Initialize *****************
  3378 ;; Defined at:
  3379 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;		None
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;		None
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  1    wreg      void 
  3386 ;; Registers used:
  3387 ;;		wreg, status,2
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3395 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3396 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3397 ;;Total ram usage:        1 bytes
  3398 ;; Hardware stack levels used:    1
  3399 ;; Hardware stack levels required when called:    5
  3400 ;; This function calls:
  3401 ;;		Nothing
  3402 ;; This function is called by:
  3403 ;;		_main
  3404 ;;		_SYSTEM_Initialize
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           
  3409                           ;psect for function _TMR0_Initialize
  3410  0A2A                     _TMR0_Initialize:	
  3411                           
  3412                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD4 & 0x3F;
  3413                           
  3414                           ;incstack = 0
  3415                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3416  0A2A  0021               	movlb	1	; select bank1
  3417  0A2B  0815               	movf	21,w	;volatile
  3418  0A2C  39C0               	andlw	192
  3419  0A2D  3814               	iorlw	20
  3420  0A2E  0095               	movwf	21	;volatile
  3421                           
  3422                           ;tmr0.c: 70: TMR0 = 0x06;
  3423  0A2F  3006               	movlw	6
  3424  0A30  0020               	movlb	0	; select bank0
  3425  0A31  0095               	movwf	21	;volatile
  3426                           
  3427                           ;tmr0.c: 73: timer0ReloadVal= 6;
  3428  0A32  3006               	movlw	6
  3429  0A33  00A1               	movwf	??_TMR0_Initialize
  3430  0A34  0821               	movf	??_TMR0_Initialize,w
  3431  0A35  0021               	movlb	1	; select bank1
  3432  0A36  00C5               	movwf	_timer0ReloadVal^(0+128)	;volatile
  3433                           
  3434                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3435  0A37  110B               	bcf	11,2	;volatile
  3436  0A38  0008               	return
  3437  0A39                     __end_of_TMR0_Initialize:	
  3438                           
  3439                           	psect	text3
  3440  0256                     __ptext3:	
  3441 ;; *************** function _PROTOCOL_Loop *****************
  3442 ;; Defined at:
  3443 ;;		line 131 in file "protocol.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;		None
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;  device_addre    1    1[BANK1 ] unsigned char 
  3448 ;;  c               1    0[BANK1 ] unsigned char 
  3449 ;; Return value:  Size  Location     Type
  3450 ;;                  1    wreg      void 
  3451 ;; Registers used:
  3452 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3453 ;; Tracked objects:
  3454 ;;		On entry : 0/0
  3455 ;;		On exit  : 0/0
  3456 ;;		Unchanged: 0/0
  3457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3459 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3460 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3461 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0
  3462 ;;Total ram usage:        4 bytes
  3463 ;; Hardware stack levels used:    1
  3464 ;; Hardware stack levels required when called:   10
  3465 ;; This function calls:
  3466 ;;		Absolute function
  3467 ;;		_EUSART_Read
  3468 ;;		_PROTOCOL_EXT
  3469 ;;		_PROTOCOL_Read_Device_Address
  3470 ;;		_PROTOCOL_SAV
  3471 ;;		_PROTOCOL_SET
  3472 ;;		_PROTOCOL_STA
  3473 ;;		_PROTOCOL_STP
  3474 ;;		_PROTOCOL_Write_Device_Address
  3475 ;;		_TMR0_HasOverflowOccured
  3476 ;;		_atoi
  3477 ;;		_inv_handler
  3478 ;;		_printf
  3479 ;;		_strncmp
  3480 ;; This function is called by:
  3481 ;;		_main
  3482 ;; This function uses a non-reentrant model
  3483 ;;
  3484                           
  3485                           
  3486                           ;psect for function _PROTOCOL_Loop
  3487  0256                     _PROTOCOL_Loop:	
  3488  0256                     l746:	
  3489                           ;incstack = 0
  3490                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3491                           ;protocol.c: 132: uint8_t device_address;
  3492                           ;protocol.c: 133: uint8_t c;
  3493                           ;protocol.c: 134: while (1) {
  3494                           
  3495                           
  3496                           ;protocol.c: 135: tmr_overflow = TMR0_HasOverflowOccured();
  3497  0256  3189  21CF  3182   	fcall	_TMR0_HasOverflowOccured
  3498  0259  0020               	movlb	0	; select bank0
  3499  025A  00D7               	movwf	??_PROTOCOL_Loop
  3500  025B  0857               	movf	??_PROTOCOL_Loop,w
  3501  025C  0021               	movlb	1	; select bank1
  3502  025D  00BC               	movwf	_tmr_overflow^(0+128)
  3503                           
  3504                           ;protocol.c: 136: if (tmr_overflow) {
  3505  025E  083C               	movf	_tmr_overflow^(0+128),w
  3506  025F  1903               	btfsc	3,2
  3507  0260  2A83               	goto	l4654
  3508                           
  3509                           ;protocol.c: 137: TMR0IF = 0;
  3510  0261  110B               	bcf	11,2	;volatile
  3511                           
  3512                           ;protocol.c: 138: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3513  0262  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3514  0263  0433               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3515  0264  1903               	btfsc	3,2
  3516  0265  2A83               	goto	l4654
  3517  0266  3001               	movlw	1
  3518  0267  0020               	movlb	0	; select bank0
  3519  0268  00D7               	movwf	??_PROTOCOL_Loop
  3520  0269  0857               	movf	??_PROTOCOL_Loop,w
  3521  026A  0021               	movlb	1	; select bank1
  3522  026B  07BD               	addwf	_tmr_cnt^(0+128),f
  3523  026C  0020               	movlb	0	; select bank0
  3524  026D  0860               	movf	_value,w
  3525  026E  0021               	movlb	1	; select bank1
  3526  026F  023D               	subwf	_tmr_cnt^(0+128),w
  3527  0270  1C03               	skipc
  3528  0271  2A83               	goto	l4654
  3529                           
  3530                           ;protocol.c: 139: tmr_cnt = 0;
  3531  0272  01BD               	clrf	_tmr_cnt^(0+128)
  3532                           
  3533                           ;protocol.c: 140: if (++sec_cnt >= tmr_scaler) {
  3534  0273  3001               	movlw	1
  3535  0274  0020               	movlb	0	; select bank0
  3536  0275  00D7               	movwf	??_PROTOCOL_Loop
  3537  0276  0857               	movf	??_PROTOCOL_Loop,w
  3538  0277  0021               	movlb	1	; select bank1
  3539  0278  07BE               	addwf	_sec_cnt^(0+128),f
  3540  0279  086A               	movf	_tmr_scaler^(0+128),w
  3541  027A  023E               	subwf	_sec_cnt^(0+128),w
  3542  027B  1C03               	skipc
  3543  027C  2A83               	goto	l4654
  3544                           
  3545                           ;protocol.c: 141: if (running) invoked = 1;
  3546  027D  0840               	movf	_running^(0+128),w
  3547  027E  1903               	btfsc	3,2
  3548  027F  2A82               	goto	l4652
  3549  0280  01BF               	clrf	_invoked^(0+128)
  3550  0281  0ABF               	incf	_invoked^(0+128),f
  3551  0282                     l4652:	
  3552                           
  3553                           ;protocol.c: 142: sec_cnt = 0;
  3554  0282  01BE               	clrf	_sec_cnt^(0+128)
  3555  0283                     l4654:	
  3556                           
  3557                           ;protocol.c: 143: }
  3558                           ;protocol.c: 144: }
  3559                           ;protocol.c: 145: }
  3560                           ;protocol.c: 146: if (invoked && PROTOCOL_Inv_Handler) {
  3561  0283  083F               	movf	_invoked^(0+128),w
  3562  0284  1903               	btfsc	3,2
  3563  0285  2A91               	goto	l4664
  3564  0286  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3565  0287  0433               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3566  0288  1903               	btfsc	3,2
  3567  0289  2A91               	goto	l4664
  3568                           
  3569                           ;protocol.c: 147: PROTOCOL_Inv_Handler();
  3570  028A  0833               	movf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3571  028B  008A               	movwf	10
  3572  028C  0832               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3573  028D  000A               	callw
  3574  028E  3182               	pagesel	$
  3575                           
  3576                           ;protocol.c: 148: invoked = 0;
  3577  028F  0021               	movlb	1	; select bank1
  3578  0290  01BF               	clrf	_invoked^(0+128)
  3579  0291                     l4664:	
  3580                           
  3581                           ;protocol.c: 151: if ((eusartRxCount)) {
  3582  0291  0020               	movlb	0	; select bank0
  3583  0292  0861               	movf	_eusartRxCount,w	;volatile
  3584  0293  1903               	btfsc	3,2
  3585  0294  2A56               	goto	l746
  3586                           
  3587                           ;protocol.c: 152: c = EUSART_Read();
  3588  0295  318B  2331  3182   	fcall	_EUSART_Read
  3589  0298  0020               	movlb	0	; select bank0
  3590  0299  00D7               	movwf	??_PROTOCOL_Loop
  3591  029A  0857               	movf	??_PROTOCOL_Loop,w
  3592  029B  0021               	movlb	1	; select bank1
  3593  029C  00ED               	movwf	PROTOCOL_Loop@c^(0+128)
  3594                           
  3595                           ;protocol.c: 153: buf[cnt++] = c;
  3596  029D  086D               	movf	PROTOCOL_Loop@c^(0+128),w
  3597  029E  0020               	movlb	0	; select bank0
  3598  029F  00D7               	movwf	??_PROTOCOL_Loop
  3599  02A0  0021               	movlb	1	; select bank1
  3600  02A1  0842               	movf	_cnt^(0+128),w
  3601  02A2  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3602  02A3  0086               	movwf	6
  3603  02A4  3001               	movlw	1	; select bank2/3
  3604  02A5  0087               	movwf	7
  3605  02A6  0020               	movlb	0	; select bank0
  3606  02A7  0857               	movf	??_PROTOCOL_Loop,w
  3607  02A8  0081               	movwf	1
  3608  02A9  3001               	movlw	1
  3609  02AA  00D7               	movwf	??_PROTOCOL_Loop
  3610  02AB  0857               	movf	??_PROTOCOL_Loop,w
  3611  02AC  0021               	movlb	1	; select bank1
  3612  02AD  07C2               	addwf	_cnt^(0+128),f
  3613                           
  3614                           ;protocol.c: 154: if (c == '\n') {
  3615  02AE  300A               	movlw	10
  3616  02AF  066D               	xorwf	PROTOCOL_Loop@c^(0+128),w
  3617  02B0  1D03               	btfss	3,2
  3618  02B1  2A56               	goto	l746
  3619                           
  3620                           ;protocol.c: 155: buf[--cnt] = '\0';
  3621  02B2  3001               	movlw	1
  3622  02B3  02C2               	subwf	_cnt^(0+128),f
  3623  02B4  0842               	movf	_cnt^(0+128),w
  3624  02B5  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3625  02B6  0086               	movwf	6
  3626  02B7  3001               	movlw	1	; select bank2/3
  3627  02B8  0087               	movwf	7
  3628  02B9  0181               	clrf	1
  3629                           
  3630                           ;protocol.c: 156: cnt = 0;
  3631  02BA  01C2               	clrf	_cnt^(0+128)
  3632                           
  3633                           ;protocol.c: 157: printf("#%s\n", buf);
  3634  02BB  3082               	movlw	low (STR_3| (0+32768))
  3635  02BC  0020               	movlb	0	; select bank0
  3636  02BD  00AF               	movwf	printf@f
  3637  02BE  3087               	movlw	high (STR_3| (0+32768))
  3638  02BF  00B0               	movwf	printf@f+1
  3639  02C0  3020               	movlw	low _buf
  3640  02C1  00B1               	movwf	low ((?_printf| 0+2))
  3641  02C2  3001               	movlw	high _buf
  3642  02C3  00B2               	movwf	(low ((?_printf| 0+2))+1)
  3643  02C4  3180  2081  3182   	fcall	_printf
  3644                           
  3645                           ;protocol.c: 158: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  3646  02C7  0021               	movlb	1	; select bank1
  3647  02C8  036B               	decf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  3648  02C9  1903               	btfsc	3,2
  3649  02CA  2AD0               	goto	l4684
  3650                           
  3651                           ;protocol.c: 159: PROTOCOL_EXT(buf);
  3652  02CB  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3653  02CC  3180  2002  3182   	fcall	_PROTOCOL_EXT
  3654                           
  3655                           ;protocol.c: 160: } else if (!strncmp(("WHO"), (buf), 3)) {
  3656  02CF  2A56               	goto	l746
  3657  02D0                     l4684:	
  3658  02D0  30A3               	movlw	low (STR_4| (0+32768))
  3659  02D1  0020               	movlb	0	; select bank0
  3660  02D2  00A1               	movwf	strncmp@s1
  3661  02D3  3087               	movlw	high (STR_4| (0+32768))
  3662  02D4  00A2               	movwf	strncmp@s1+1
  3663  02D5  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3664  02D6  00D7               	movwf	??_PROTOCOL_Loop
  3665  02D7  0857               	movf	??_PROTOCOL_Loop,w
  3666  02D8  00A3               	movwf	strncmp@s2
  3667  02D9  3003               	movlw	3
  3668  02DA  00A4               	movwf	strncmp@len
  3669  02DB  3000               	movlw	0
  3670  02DC  00A5               	movwf	strncmp@len+1
  3671  02DD  318D  25D9  3182   	fcall	_strncmp
  3672  02E0  0020               	movlb	0	; select bank0
  3673  02E1  0821               	movf	?_strncmp,w
  3674  02E2  0422               	iorwf	?_strncmp+1,w
  3675  02E3  1D03               	btfss	3,2
  3676  02E4  2AF5               	goto	l4688
  3677                           
  3678                           ;protocol.c: 161: printf("$:WHO:%s\n", device_id_);
  3679  02E5  302C               	movlw	low (STR_5| (0+32768))
  3680  02E6  00AF               	movwf	printf@f
  3681  02E7  3087               	movlw	high (STR_5| (0+32768))
  3682  02E8  00B0               	movwf	printf@f+1
  3683  02E9  0021               	movlb	1	; select bank1
  3684  02EA  0863               	movf	(_device_id_+1)^(0+128),w
  3685  02EB  0020               	movlb	0	; select bank0
  3686  02EC  00B2               	movwf	(low ((?_printf| 0+2))+1)
  3687  02ED  0021               	movlb	1	; select bank1
  3688  02EE  0862               	movf	_device_id_^(0+128),w
  3689  02EF  0020               	movlb	0	; select bank0
  3690  02F0  00B1               	movwf	low ((?_printf| 0+2))
  3691  02F1  3180  2081  3182   	fcall	_printf
  3692                           
  3693                           ;protocol.c: 162: } else if (!strncmp(("SAV"), (buf), 3)) {
  3694  02F4  2A56               	goto	l746
  3695  02F5                     l4688:	
  3696  02F5  30B3               	movlw	low (STR_6| (0+32768))
  3697  02F6  0020               	movlb	0	; select bank0
  3698  02F7  00A1               	movwf	strncmp@s1
  3699  02F8  3087               	movlw	high (STR_6| (0+32768))
  3700  02F9  00A2               	movwf	strncmp@s1+1
  3701  02FA  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3702  02FB  00D7               	movwf	??_PROTOCOL_Loop
  3703  02FC  0857               	movf	??_PROTOCOL_Loop,w
  3704  02FD  00A3               	movwf	strncmp@s2
  3705  02FE  3003               	movlw	3
  3706  02FF  00A4               	movwf	strncmp@len
  3707  0300  3000               	movlw	0
  3708  0301  00A5               	movwf	strncmp@len+1
  3709  0302  318D  25D9  3182   	fcall	_strncmp
  3710  0305  0020               	movlb	0	; select bank0
  3711  0306  0821               	movf	?_strncmp,w
  3712  0307  0422               	iorwf	?_strncmp+1,w
  3713  0308  1D03               	btfss	3,2
  3714  0309  2B0E               	goto	l4692
  3715                           
  3716                           ;protocol.c: 163: PROTOCOL_SAV();
  3717  030A  3189  21FB  3182   	fcall	_PROTOCOL_SAV
  3718                           
  3719                           ;protocol.c: 164: } else if (!strncmp(("STA"), (buf), 3)) {
  3720  030D  2A56               	goto	l746
  3721  030E                     l4692:	
  3722  030E  309B               	movlw	low (STR_7| (0+32768))
  3723  030F  0020               	movlb	0	; select bank0
  3724  0310  00A1               	movwf	strncmp@s1
  3725  0311  3087               	movlw	high (STR_7| (0+32768))
  3726  0312  00A2               	movwf	strncmp@s1+1
  3727  0313  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3728  0314  00D7               	movwf	??_PROTOCOL_Loop
  3729  0315  0857               	movf	??_PROTOCOL_Loop,w
  3730  0316  00A3               	movwf	strncmp@s2
  3731  0317  3003               	movlw	3
  3732  0318  00A4               	movwf	strncmp@len
  3733  0319  3000               	movlw	0
  3734  031A  00A5               	movwf	strncmp@len+1
  3735  031B  318D  25D9  3182   	fcall	_strncmp
  3736  031E  0020               	movlb	0	; select bank0
  3737  031F  0821               	movf	?_strncmp,w
  3738  0320  0422               	iorwf	?_strncmp+1,w
  3739  0321  1D03               	btfss	3,2
  3740  0322  2B27               	goto	l4696
  3741                           
  3742                           ;protocol.c: 165: PROTOCOL_STA();
  3743  0323  3189  21CB  3182   	fcall	_PROTOCOL_STA
  3744                           
  3745                           ;protocol.c: 166: } else if (!strncmp(("STP"), (buf), 3)) {
  3746  0326  2A56               	goto	l746
  3747  0327                     l4696:	
  3748  0327  30A7               	movlw	low (STR_8| (0+32768))
  3749  0328  0020               	movlb	0	; select bank0
  3750  0329  00A1               	movwf	strncmp@s1
  3751  032A  3087               	movlw	high (STR_8| (0+32768))
  3752  032B  00A2               	movwf	strncmp@s1+1
  3753  032C  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3754  032D  00D7               	movwf	??_PROTOCOL_Loop
  3755  032E  0857               	movf	??_PROTOCOL_Loop,w
  3756  032F  00A3               	movwf	strncmp@s2
  3757  0330  3003               	movlw	3
  3758  0331  00A4               	movwf	strncmp@len
  3759  0332  3000               	movlw	0
  3760  0333  00A5               	movwf	strncmp@len+1
  3761  0334  318D  25D9  3182   	fcall	_strncmp
  3762  0337  0020               	movlb	0	; select bank0
  3763  0338  0821               	movf	?_strncmp,w
  3764  0339  0422               	iorwf	?_strncmp+1,w
  3765  033A  1D03               	btfss	3,2
  3766  033B  2B4C               	goto	l4702
  3767                           
  3768                           ;protocol.c: 167: PROTOCOL_STP();
  3769  033C  3189  21B9  3182   	fcall	_PROTOCOL_STP
  3770                           
  3771                           ;protocol.c: 168: printf("*:STP:%s\n", "ACK");
  3772  033F  3036               	movlw	low (STR_9| (0+32768))
  3773  0340  0020               	movlb	0	; select bank0
  3774  0341  00AF               	movwf	printf@f
  3775  0342  3087               	movlw	high (STR_9| (0+32768))
  3776  0343  00B0               	movwf	printf@f+1
  3777  0344  309F               	movlw	low (STR_10| (0+32768))
  3778  0345  00B1               	movwf	low ((?_printf| 0+2))
  3779  0346  3087               	movlw	high (STR_10| (0+32768))
  3780  0347  00B2               	movwf	(low ((?_printf| 0+2))+1)
  3781  0348  3180  2081  3182   	fcall	_printf
  3782                           
  3783                           ;protocol.c: 169: } else if (!strncmp(("SET"), (buf), 3)) {
  3784  034B  2A56               	goto	l746
  3785  034C                     l4702:	
  3786  034C  30AF               	movlw	low (STR_11| (0+32768))
  3787  034D  0020               	movlb	0	; select bank0
  3788  034E  00A1               	movwf	strncmp@s1
  3789  034F  3087               	movlw	high (STR_11| (0+32768))
  3790  0350  00A2               	movwf	strncmp@s1+1
  3791  0351  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3792  0352  00D7               	movwf	??_PROTOCOL_Loop
  3793  0353  0857               	movf	??_PROTOCOL_Loop,w
  3794  0354  00A3               	movwf	strncmp@s2
  3795  0355  3003               	movlw	3
  3796  0356  00A4               	movwf	strncmp@len
  3797  0357  3000               	movlw	0
  3798  0358  00A5               	movwf	strncmp@len+1
  3799  0359  318D  25D9  3182   	fcall	_strncmp
  3800  035C  0020               	movlb	0	; select bank0
  3801  035D  0821               	movf	?_strncmp,w
  3802  035E  0422               	iorwf	?_strncmp+1,w
  3803  035F  1D03               	btfss	3,2
  3804  0360  2B6B               	goto	l4706
  3805                           
  3806                           ;protocol.c: 170: PROTOCOL_SET(atoi(&buf[4]));
  3807  0361  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3808  0362  318F  270D  3182   	fcall	_atoi
  3809  0365  0020               	movlb	0	; select bank0
  3810  0366  0827               	movf	?_atoi,w
  3811  0367  3189  21EB  3182   	fcall	_PROTOCOL_SET
  3812                           
  3813                           ;protocol.c: 171: } else if (!strncmp(("GET"), (buf), 3)) {
  3814  036A  2A56               	goto	l746
  3815  036B                     l4706:	
  3816  036B  30AB               	movlw	low (STR_12| (0+32768))
  3817  036C  0020               	movlb	0	; select bank0
  3818  036D  00A1               	movwf	strncmp@s1
  3819  036E  3087               	movlw	high (STR_12| (0+32768))
  3820  036F  00A2               	movwf	strncmp@s1+1
  3821  0370  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3822  0371  00D7               	movwf	??_PROTOCOL_Loop
  3823  0372  0857               	movf	??_PROTOCOL_Loop,w
  3824  0373  00A3               	movwf	strncmp@s2
  3825  0374  3003               	movlw	3
  3826  0375  00A4               	movwf	strncmp@len
  3827  0376  3000               	movlw	0
  3828  0377  00A5               	movwf	strncmp@len+1
  3829  0378  318D  25D9  3182   	fcall	_strncmp
  3830  037B  0020               	movlb	0	; select bank0
  3831  037C  0821               	movf	?_strncmp,w
  3832  037D  0422               	iorwf	?_strncmp+1,w
  3833  037E  1D03               	btfss	3,2
  3834  037F  2B8F               	goto	l4710
  3835                           
  3836                           ;protocol.c: 172: printf("$:GET:%d\n", value);
  3837  0380  3018               	movlw	low (STR_13| (0+32768))
  3838  0381  00AF               	movwf	printf@f
  3839  0382  3087               	movlw	high (STR_13| (0+32768))
  3840  0383  00B0               	movwf	printf@f+1
  3841  0384  0860               	movf	_value,w
  3842  0385  00D7               	movwf	??_PROTOCOL_Loop
  3843  0386  01D8               	clrf	??_PROTOCOL_Loop+1
  3844  0387  0857               	movf	??_PROTOCOL_Loop,w
  3845  0388  00B1               	movwf	?_printf+2
  3846  0389  0858               	movf	??_PROTOCOL_Loop+1,w
  3847  038A  00B2               	movwf	?_printf+3
  3848  038B  3180  2081  3182   	fcall	_printf
  3849                           
  3850                           ;protocol.c: 173: } else if (!strncmp(("WDA"), (buf), 3)) {
  3851  038E  2A56               	goto	l746
  3852  038F                     l4710:	
  3853  038F  3097               	movlw	low (STR_14| (0+32768))
  3854  0390  0020               	movlb	0	; select bank0
  3855  0391  00A1               	movwf	strncmp@s1
  3856  0392  3087               	movlw	high (STR_14| (0+32768))
  3857  0393  00A2               	movwf	strncmp@s1+1
  3858  0394  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3859  0395  00D7               	movwf	??_PROTOCOL_Loop
  3860  0396  0857               	movf	??_PROTOCOL_Loop,w
  3861  0397  00A3               	movwf	strncmp@s2
  3862  0398  3003               	movlw	3
  3863  0399  00A4               	movwf	strncmp@len
  3864  039A  3000               	movlw	0
  3865  039B  00A5               	movwf	strncmp@len+1
  3866  039C  318D  25D9  3182   	fcall	_strncmp
  3867  039F  0020               	movlb	0	; select bank0
  3868  03A0  0821               	movf	?_strncmp,w
  3869  03A1  0422               	iorwf	?_strncmp+1,w
  3870  03A2  1D03               	btfss	3,2
  3871  03A3  2BB3               	goto	l4716
  3872                           
  3873                           ;protocol.c: 174: device_address = atoi(&buf[4]);
  3874  03A4  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3875  03A5  318F  270D  3182   	fcall	_atoi
  3876  03A8  0020               	movlb	0	; select bank0
  3877  03A9  0827               	movf	?_atoi,w
  3878  03AA  00D7               	movwf	??_PROTOCOL_Loop
  3879  03AB  0857               	movf	??_PROTOCOL_Loop,w
  3880  03AC  0021               	movlb	1	; select bank1
  3881  03AD  00EE               	movwf	PROTOCOL_Loop@device_address^(0+128)
  3882                           
  3883                           ;protocol.c: 175: PROTOCOL_Write_Device_Address(device_address);
  3884  03AE  086E               	movf	PROTOCOL_Loop@device_address^(0+128),w
  3885  03AF  318A  2239  3182   	fcall	_PROTOCOL_Write_Device_Address
  3886                           
  3887                           ;protocol.c: 176: } else if (!strncmp(("RDA"), (buf), 3)) {
  3888  03B2  2A56               	goto	l746
  3889  03B3                     l4716:	
  3890  03B3  3093               	movlw	low (STR_15| (0+32768))
  3891  03B4  0020               	movlb	0	; select bank0
  3892  03B5  00A1               	movwf	strncmp@s1
  3893  03B6  3087               	movlw	high (STR_15| (0+32768))
  3894  03B7  00A2               	movwf	strncmp@s1+1
  3895  03B8  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3896  03B9  00D7               	movwf	??_PROTOCOL_Loop
  3897  03BA  0857               	movf	??_PROTOCOL_Loop,w
  3898  03BB  00A3               	movwf	strncmp@s2
  3899  03BC  3003               	movlw	3
  3900  03BD  00A4               	movwf	strncmp@len
  3901  03BE  3000               	movlw	0
  3902  03BF  00A5               	movwf	strncmp@len+1
  3903  03C0  318D  25D9  3182   	fcall	_strncmp
  3904  03C3  0020               	movlb	0	; select bank0
  3905  03C4  0821               	movf	?_strncmp,w
  3906  03C5  0422               	iorwf	?_strncmp+1,w
  3907  03C6  1D03               	btfss	3,2
  3908  03C7  2BE2               	goto	l4722
  3909                           
  3910                           ;protocol.c: 177: device_address = PROTOCOL_Read_Device_Address();
  3911  03C8  3189  21B6  3182   	fcall	_PROTOCOL_Read_Device_Address
  3912  03CB  0020               	movlb	0	; select bank0
  3913  03CC  00D7               	movwf	??_PROTOCOL_Loop
  3914  03CD  0857               	movf	??_PROTOCOL_Loop,w
  3915  03CE  0021               	movlb	1	; select bank1
  3916  03CF  00EE               	movwf	PROTOCOL_Loop@device_address^(0+128)
  3917                           
  3918                           ;protocol.c: 178: printf("$:RDA:%d\n", device_address);
  3919  03D0  300E               	movlw	low (STR_16| (0+32768))
  3920  03D1  0020               	movlb	0	; select bank0
  3921  03D2  00AF               	movwf	printf@f
  3922  03D3  3087               	movlw	high (STR_16| (0+32768))
  3923  03D4  00B0               	movwf	printf@f+1
  3924  03D5  0021               	movlb	1	; select bank1
  3925  03D6  086E               	movf	PROTOCOL_Loop@device_address^(0+128),w
  3926  03D7  0020               	movlb	0	; select bank0
  3927  03D8  00D7               	movwf	??_PROTOCOL_Loop
  3928  03D9  01D8               	clrf	??_PROTOCOL_Loop+1
  3929  03DA  0857               	movf	??_PROTOCOL_Loop,w
  3930  03DB  00B1               	movwf	?_printf+2
  3931  03DC  0858               	movf	??_PROTOCOL_Loop+1,w
  3932  03DD  00B2               	movwf	?_printf+3
  3933  03DE  3180  2081  3182   	fcall	_printf
  3934                           
  3935                           ;protocol.c: 179: } else {
  3936  03E1  2A56               	goto	l746
  3937  03E2                     l4722:	
  3938                           
  3939                           ;protocol.c: 180: PROTOCOL_EXT(buf);
  3940  03E2  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3941  03E3  3180  2002  3182   	fcall	_PROTOCOL_EXT
  3942  03E6  2A56               	goto	l746
  3943  03E7                     __end_of_PROTOCOL_Loop:	
  3944                           
  3945                           	psect	text4
  3946  0DD9                     __ptext4:	
  3947 ;; *************** function _strncmp *****************
  3948 ;; Defined at:
  3949 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;  s1              2    1[BANK0 ] PTR const unsigned char 
  3952 ;;		 -> STR_15(4), STR_14(4), STR_12(4), STR_11(4), 
  3953 ;;		 -> STR_8(4), STR_7(4), STR_6(4), STR_4(4), 
  3954 ;;  s2              1    3[BANK0 ] PTR const unsigned char 
  3955 ;;		 -> buf(48), 
  3956 ;;  len             2    4[BANK0 ] unsigned int 
  3957 ;; Auto vars:     Size  Location     Type
  3958 ;;		None
  3959 ;; Return value:  Size  Location     Type
  3960 ;;                  2    1[BANK0 ] int 
  3961 ;; Registers used:
  3962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3963 ;; Tracked objects:
  3964 ;;		On entry : 0/0
  3965 ;;		On exit  : 0/0
  3966 ;;		Unchanged: 0/0
  3967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3968 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3969 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3970 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3971 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3972 ;;Total ram usage:        7 bytes
  3973 ;; Hardware stack levels used:    1
  3974 ;; Hardware stack levels required when called:    5
  3975 ;; This function calls:
  3976 ;;		Nothing
  3977 ;; This function is called by:
  3978 ;;		_PROTOCOL_Loop
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           
  3983                           ;psect for function _strncmp
  3984  0DD9                     _strncmp:	
  3985  0DD9                     l4582:	
  3986                           ;incstack = 0
  3987                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  3988                           
  3989  0DD9  3001               	movlw	1
  3990  0DDA  0020               	movlb	0	; select bank0
  3991  0DDB  02A4               	subwf	strncmp@len,f
  3992  0DDC  3000               	movlw	0
  3993  0DDD  3BA5               	subwfb	strncmp@len+1,f
  3994  0DDE  0A24               	incf	strncmp@len,w
  3995  0DDF  1903               	btfsc	3,2
  3996  0DE0  0A25               	incf	strncmp@len+1,w
  3997  0DE1  1903               	btfsc	3,2
  3998  0DE2  2E18               	goto	l4584
  3999  0DE3  0020               	movlb	0	; select bank0
  4000  0DE4  0821               	movf	strncmp@s1,w
  4001  0DE5  0084               	movwf	4
  4002  0DE6  0822               	movf	strncmp@s1+1,w
  4003  0DE7  0085               	movwf	5
  4004  0DE8  0012               	moviw fsr0++
  4005  0DE9  1903               	btfsc	3,2
  4006  0DEA  2DF7               	goto	l4574
  4007  0DEB  0823               	movf	strncmp@s2,w
  4008  0DEC  0086               	movwf	6
  4009  0DED  3001               	movlw	1	; select bank2/3
  4010  0DEE  0087               	movwf	7
  4011  0DEF  0821               	movf	strncmp@s1,w
  4012  0DF0  0084               	movwf	4
  4013  0DF1  0822               	movf	strncmp@s1+1,w
  4014  0DF2  0085               	movwf	5
  4015  0DF3  0800               	movf	0,w	;code access
  4016  0DF4  0601               	xorwf	1,w
  4017  0DF5  1903               	skipnz
  4018  0DF6  2E0F               	goto	l4578
  4019  0DF7                     l4574:	
  4020  0DF7  0823               	movf	strncmp@s2,w
  4021  0DF8  0086               	movwf	6
  4022  0DF9  3001               	movlw	1	; select bank2/3
  4023  0DFA  0087               	movwf	7
  4024  0DFB  0801               	movf	1,w
  4025  0DFC  00A6               	movwf	??_strncmp
  4026  0DFD  01A7               	clrf	??_strncmp+1
  4027  0DFE  09A6               	comf	??_strncmp,f
  4028  0DFF  09A7               	comf	??_strncmp+1,f
  4029  0E00  0AA6               	incf	??_strncmp,f
  4030  0E01  1903               	skipnz
  4031  0E02  0AA7               	incf	??_strncmp+1,f
  4032  0E03  0821               	movf	strncmp@s1,w
  4033  0E04  0084               	movwf	4
  4034  0E05  0822               	movf	strncmp@s1+1,w
  4035  0E06  0085               	movwf	5
  4036  0E07  0800               	movf	0,w	;code access
  4037  0E08  0726               	addwf	??_strncmp,w
  4038  0E09  00A1               	movwf	?_strncmp
  4039  0E0A  0827               	movf	??_strncmp+1,w
  4040  0E0B  1803               	skipnc
  4041  0E0C  0A27               	incf	??_strncmp+1,w
  4042  0E0D  00A2               	movwf	?_strncmp+1
  4043  0E0E  0008               	return
  4044  0E0F                     l4578:	
  4045  0E0F  3001               	movlw	1
  4046  0E10  07A1               	addwf	strncmp@s1,f
  4047  0E11  3000               	movlw	0
  4048  0E12  3DA2               	addwfc	strncmp@s1+1,f
  4049  0E13  3001               	movlw	1
  4050  0E14  00A6               	movwf	??_strncmp
  4051  0E15  0826               	movf	??_strncmp,w
  4052  0E16  07A3               	addwf	strncmp@s2,f
  4053  0E17  2DD9               	goto	l4582
  4054  0E18                     l4584:	
  4055  0E18  01A1               	clrf	?_strncmp
  4056  0E19  01A2               	clrf	?_strncmp+1
  4057  0E1A  0008               	return
  4058  0E1B                     __end_of_strncmp:	
  4059                           
  4060                           	psect	text5
  4061  0526                     __ptext5:	
  4062 ;; *************** function _inv_handler *****************
  4063 ;; Defined at:
  4064 ;;		line 17 in file "main.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;		None
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;  measure         4   45[BANK0 ] unsigned char [4]
  4069 ;;  t               4   51[BANK0 ] long 
  4070 ;;  data            2   49[BANK0 ] char [2]
  4071 ;;  status          1   44[BANK0 ] unsigned char 
  4072 ;; Return value:  Size  Location     Type
  4073 ;;                  1    wreg      void 
  4074 ;; Registers used:
  4075 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4076 ;; Tracked objects:
  4077 ;;		On entry : 0/0
  4078 ;;		On exit  : 0/0
  4079 ;;		Unchanged: 0/0
  4080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4082 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4083 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4084 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4085 ;;Total ram usage:       16 bytes
  4086 ;; Hardware stack levels used:    1
  4087 ;; Hardware stack levels required when called:    9
  4088 ;; This function calls:
  4089 ;;		_PROTOCOL_I2C_Send_int8_t
  4090 ;;		___aldiv
  4091 ;;		___lmul
  4092 ;;		_i2c2_read_no_reg_addr
  4093 ;;		_i2c2_write
  4094 ;;		_i2c2_write_no_data
  4095 ;; This function is called by:
  4096 ;;		_main
  4097 ;;		_PROTOCOL_Loop
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           
  4102                           ;psect for function _inv_handler
  4103  0526                     _inv_handler:	
  4104                           
  4105                           ;main.c: 18: uint8_t measure[4];
  4106                           ;main.c: 19: int8_t data[2];
  4107                           ;main.c: 20: int32_t t;
  4108                           ;main.c: 21: uint8_t status;
  4109                           ;main.c: 23: LATCbits.LATC7 ^= 1;
  4110                           
  4111                           ;incstack = 0
  4112                           ; Regs used in _inv_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4113  0526  0022               	movlb	2	; select bank2
  4114  0527  0D0E               	rlf	14,w	;volatile
  4115  0528  0D0E               	rlf	14,w	;volatile
  4116  0529  3901               	andlw	1
  4117  052A  0020               	movlb	0	; select bank0
  4118  052B  00C7               	movwf	??_inv_handler
  4119  052C  3001               	movlw	1
  4120  052D  06C7               	xorwf	??_inv_handler,f
  4121  052E  0CC7               	rrf	??_inv_handler,f
  4122  052F  0CC7               	rrf	??_inv_handler,f
  4123  0530  0022               	movlb	2	; select bank2
  4124  0531  080E               	movf	14,w	;volatile
  4125  0532  0020               	movlb	0	; select bank0
  4126  0533  0647               	xorwf	??_inv_handler,w
  4127  0534  397F               	andlw	-129
  4128  0535  0647               	xorwf	??_inv_handler,w
  4129  0536  0022               	movlb	2	; select bank2
  4130  0537  008E               	movwf	14	;volatile
  4131                           
  4132                           ;main.c: 25: if (!initialized) {
  4133  0538  0021               	movlb	1	; select bank1
  4134  0539  0844               	movf	_initialized^(0+128),w
  4135  053A  1D03               	btfss	3,2
  4136  053B  2D4C               	goto	l548
  4137                           
  4138                           ;main.c: 26: i2c2_write(0x0040, 0x02, 0x00);
  4139  053C  3040               	movlw	64
  4140  053D  0020               	movlb	0	; select bank0
  4141  053E  00AF               	movwf	i2c2_write@dev_addr
  4142  053F  3000               	movlw	0
  4143  0540  00B0               	movwf	i2c2_write@dev_addr+1
  4144  0541  3002               	movlw	2
  4145  0542  00C7               	movwf	??_inv_handler
  4146  0543  0847               	movf	??_inv_handler,w
  4147  0544  00B1               	movwf	i2c2_write@reg_addr
  4148  0545  01B2               	clrf	i2c2_write@data
  4149  0546  318B  23FA  3185   	fcall	_i2c2_write
  4150                           
  4151                           ;main.c: 27: initialized = 1;
  4152  0549  0021               	movlb	1	; select bank1
  4153  054A  01C4               	clrf	_initialized^(0+128)
  4154  054B  0AC4               	incf	_initialized^(0+128),f
  4155  054C                     l548:	
  4156                           
  4157                           ;main.c: 28: }
  4158                           ;main.c: 31: status = i2c2_write_no_data(0x0040, 0x00);
  4159  054C  3040               	movlw	64
  4160  054D  0020               	movlb	0	; select bank0
  4161  054E  00AF               	movwf	i2c2_write_no_data@dev_addr
  4162  054F  3000               	movlw	0
  4163  0550  00B0               	movwf	i2c2_write_no_data@dev_addr+1
  4164  0551  01B1               	clrf	i2c2_write_no_data@reg_addr
  4165  0552  318D  2518  3185   	fcall	_i2c2_write_no_data
  4166  0555  0020               	movlb	0	; select bank0
  4167  0556  00C7               	movwf	??_inv_handler
  4168  0557  0847               	movf	??_inv_handler,w
  4169  0558  00CC               	movwf	inv_handler@status
  4170                           
  4171                           ;main.c: 32: _delay((unsigned long)((10)*(4000000/4000.0)));
  4172  0559  300D               	movlw	13
  4173  055A  0020               	movlb	0	; select bank0
  4174  055B  00C7               	movwf	??_inv_handler
  4175  055C  30FB               	movlw	251
  4176  055D                     u4597:	
  4177  055D  0B89               	decfsz	9,f
  4178  055E  2D5D               	goto	u4597
  4179  055F  0BC7               	decfsz	??_inv_handler,f
  4180  0560  2D5D               	goto	u4597
  4181  0561  3200               	nop2
  4182                           
  4183                           ;main.c: 33: status = i2c2_read_no_reg_addr(0x0040, &measure[0], 2);
  4184  0562  3040               	movlw	64
  4185  0563  0020               	movlb	0	; select bank0
  4186  0564  00AF               	movwf	i2c2_read_no_reg_addr@dev_addr
  4187  0565  3000               	movlw	0
  4188  0566  00B0               	movwf	i2c2_read_no_reg_addr@dev_addr+1
  4189  0567  304D               	movlw	(low (inv_handler@measure| 0))& (0+255)
  4190  0568  00C7               	movwf	??_inv_handler
  4191  0569  0847               	movf	??_inv_handler,w
  4192  056A  00B1               	movwf	i2c2_read_no_reg_addr@pbuf
  4193  056B  3002               	movlw	2
  4194  056C  00C8               	movwf	??_inv_handler+1
  4195  056D  0848               	movf	??_inv_handler+1,w
  4196  056E  00B2               	movwf	i2c2_read_no_reg_addr@len
  4197  056F  318C  24BF  3185   	fcall	_i2c2_read_no_reg_addr
  4198  0572  0020               	movlb	0	; select bank0
  4199  0573  00C9               	movwf	??_inv_handler+2
  4200  0574  0849               	movf	??_inv_handler+2,w
  4201  0575  00CC               	movwf	inv_handler@status
  4202                           
  4203                           ;main.c: 34: t = (int32_t)((uint16_t)measure[0] * 256 + (uint16_t)measure[1]);
  4204  0576  084E               	movf	inv_handler@measure+1,w
  4205  0577  00C7               	movwf	??_inv_handler
  4206  0578  01C8               	clrf	??_inv_handler+1
  4207  0579  084D               	movf	inv_handler@measure,w
  4208  057A  00C9               	movwf	??_inv_handler+2
  4209  057B  01CA               	clrf	??_inv_handler+3
  4210  057C  0849               	movf	??_inv_handler+2,w
  4211  057D  00CA               	movwf	??_inv_handler+3
  4212  057E  01C9               	clrf	??_inv_handler+2
  4213  057F  0847               	movf	??_inv_handler,w
  4214  0580  0749               	addwf	??_inv_handler+2,w
  4215  0581  00D3               	movwf	inv_handler@t
  4216  0582  0848               	movf	??_inv_handler+1,w
  4217  0583  3D4A               	addwfc	??_inv_handler+3,w
  4218  0584  00D4               	movwf	inv_handler@t+1
  4219  0585  01D5               	clrf	inv_handler@t+2
  4220  0586  01D6               	clrf	inv_handler@t+3
  4221                           
  4222                           ;main.c: 35: data[0] = (int8_t)(t * 165 / 65536 - 40);
  4223  0587  3000               	movlw	0
  4224  0588  00B0               	movwf	___aldiv@divisor+3
  4225  0589  3001               	movlw	1
  4226  058A  00AF               	movwf	___aldiv@divisor+2
  4227  058B  3000               	movlw	0
  4228  058C  00AE               	movwf	___aldiv@divisor+1
  4229  058D  3000               	movlw	0
  4230  058E  00AD               	movwf	___aldiv@divisor
  4231  058F  0856               	movf	inv_handler@t+3,w
  4232  0590  00A4               	movwf	___lmul@multiplier+3
  4233  0591  0855               	movf	inv_handler@t+2,w
  4234  0592  00A3               	movwf	___lmul@multiplier+2
  4235  0593  0854               	movf	inv_handler@t+1,w
  4236  0594  00A2               	movwf	___lmul@multiplier+1
  4237  0595  0853               	movf	inv_handler@t,w
  4238  0596  00A1               	movwf	___lmul@multiplier
  4239  0597  3000               	movlw	0
  4240  0598  00A8               	movwf	___lmul@multiplicand+3
  4241  0599  3000               	movlw	0
  4242  059A  00A7               	movwf	___lmul@multiplicand+2
  4243  059B  3000               	movlw	0
  4244  059C  00A6               	movwf	___lmul@multiplicand+1
  4245  059D  30A5               	movlw	165
  4246  059E  00A5               	movwf	___lmul@multiplicand
  4247  059F  318D  2574  3185   	fcall	___lmul
  4248  05A2  0020               	movlb	0	; select bank0
  4249  05A3  0824               	movf	?___lmul+3,w
  4250  05A4  00B4               	movwf	___aldiv@dividend+3
  4251  05A5  0823               	movf	?___lmul+2,w
  4252  05A6  00B3               	movwf	___aldiv@dividend+2
  4253  05A7  0822               	movf	?___lmul+1,w
  4254  05A8  00B2               	movwf	___aldiv@dividend+1
  4255  05A9  0821               	movf	?___lmul,w
  4256  05AA  00B1               	movwf	___aldiv@dividend
  4257  05AB  318F  277E  3185   	fcall	___aldiv
  4258  05AE  0020               	movlb	0	; select bank0
  4259  05AF  082D               	movf	?___aldiv,w
  4260  05B0  3ED8               	addlw	-40
  4261  05B1  00C7               	movwf	??_inv_handler
  4262  05B2  0847               	movf	??_inv_handler,w
  4263  05B3  00D1               	movwf	inv_handler@data
  4264                           
  4265                           ;main.c: 37: _delay((unsigned long)((5)*(4000000/4000.0)));
  4266  05B4  3007               	movlw	7
  4267  05B5  0020               	movlb	0	; select bank0
  4268  05B6  00C7               	movwf	??_inv_handler
  4269  05B7  307D               	movlw	125
  4270  05B8                     u4607:	
  4271  05B8  0B89               	decfsz	9,f
  4272  05B9  2DB8               	goto	u4607
  4273  05BA  0BC7               	decfsz	??_inv_handler,f
  4274  05BB  2DB8               	goto	u4607
  4275                           
  4276                           ;main.c: 40: status = i2c2_write_no_data(0x0040, 0x01);
  4277  05BC  3040               	movlw	64
  4278  05BD  0020               	movlb	0	; select bank0
  4279  05BE  00AF               	movwf	i2c2_write_no_data@dev_addr
  4280  05BF  3000               	movlw	0
  4281  05C0  00B0               	movwf	i2c2_write_no_data@dev_addr+1
  4282  05C1  01B1               	clrf	i2c2_write_no_data@reg_addr
  4283  05C2  0AB1               	incf	i2c2_write_no_data@reg_addr,f
  4284  05C3  318D  2518  3185   	fcall	_i2c2_write_no_data
  4285  05C6  0020               	movlb	0	; select bank0
  4286  05C7  00C7               	movwf	??_inv_handler
  4287  05C8  0847               	movf	??_inv_handler,w
  4288  05C9  00CC               	movwf	inv_handler@status
  4289                           
  4290                           ;main.c: 41: _delay((unsigned long)((10)*(4000000/4000.0)));
  4291  05CA  300D               	movlw	13
  4292  05CB  0020               	movlb	0	; select bank0
  4293  05CC  00C7               	movwf	??_inv_handler
  4294  05CD  30FB               	movlw	251
  4295  05CE                     u4617:	
  4296  05CE  0B89               	decfsz	9,f
  4297  05CF  2DCE               	goto	u4617
  4298  05D0  0BC7               	decfsz	??_inv_handler,f
  4299  05D1  2DCE               	goto	u4617
  4300  05D2  3200               	nop2
  4301                           
  4302                           ;main.c: 42: status = i2c2_read_no_reg_addr(0x0040, &measure[2], 2);
  4303  05D3  3040               	movlw	64
  4304  05D4  0020               	movlb	0	; select bank0
  4305  05D5  00AF               	movwf	i2c2_read_no_reg_addr@dev_addr
  4306  05D6  3000               	movlw	0
  4307  05D7  00B0               	movwf	i2c2_read_no_reg_addr@dev_addr+1
  4308  05D8  304F               	movlw	(low ((inv_handler@measure| 0+2)))& (0+255)
  4309  05D9  00C7               	movwf	??_inv_handler
  4310  05DA  0847               	movf	??_inv_handler,w
  4311  05DB  00B1               	movwf	i2c2_read_no_reg_addr@pbuf
  4312  05DC  3002               	movlw	2
  4313  05DD  00C8               	movwf	??_inv_handler+1
  4314  05DE  0848               	movf	??_inv_handler+1,w
  4315  05DF  00B2               	movwf	i2c2_read_no_reg_addr@len
  4316  05E0  318C  24BF  3185   	fcall	_i2c2_read_no_reg_addr
  4317  05E3  0020               	movlb	0	; select bank0
  4318  05E4  00C9               	movwf	??_inv_handler+2
  4319  05E5  0849               	movf	??_inv_handler+2,w
  4320  05E6  00CC               	movwf	inv_handler@status
  4321                           
  4322                           ;main.c: 43: t = (int32_t)((uint16_t)measure[2] * 256 + (uint16_t)measure[3]);
  4323  05E7  0850               	movf	inv_handler@measure+3,w
  4324  05E8  00C7               	movwf	??_inv_handler
  4325  05E9  01C8               	clrf	??_inv_handler+1
  4326  05EA  084F               	movf	inv_handler@measure+2,w
  4327  05EB  00C9               	movwf	??_inv_handler+2
  4328  05EC  01CA               	clrf	??_inv_handler+3
  4329  05ED  0849               	movf	??_inv_handler+2,w
  4330  05EE  00CA               	movwf	??_inv_handler+3
  4331  05EF  01C9               	clrf	??_inv_handler+2
  4332  05F0  0847               	movf	??_inv_handler,w
  4333  05F1  0749               	addwf	??_inv_handler+2,w
  4334  05F2  00D3               	movwf	inv_handler@t
  4335  05F3  0848               	movf	??_inv_handler+1,w
  4336  05F4  3D4A               	addwfc	??_inv_handler+3,w
  4337  05F5  00D4               	movwf	inv_handler@t+1
  4338  05F6  01D5               	clrf	inv_handler@t+2
  4339  05F7  01D6               	clrf	inv_handler@t+3
  4340                           
  4341                           ;main.c: 44: data[1] = (int8_t)(t * 100 /65536);
  4342  05F8  3000               	movlw	0
  4343  05F9  00B0               	movwf	___aldiv@divisor+3
  4344  05FA  3001               	movlw	1
  4345  05FB  00AF               	movwf	___aldiv@divisor+2
  4346  05FC  3000               	movlw	0
  4347  05FD  00AE               	movwf	___aldiv@divisor+1
  4348  05FE  3000               	movlw	0
  4349  05FF  00AD               	movwf	___aldiv@divisor
  4350  0600  0856               	movf	inv_handler@t+3,w
  4351  0601  00A4               	movwf	___lmul@multiplier+3
  4352  0602  0855               	movf	inv_handler@t+2,w
  4353  0603  00A3               	movwf	___lmul@multiplier+2
  4354  0604  0854               	movf	inv_handler@t+1,w
  4355  0605  00A2               	movwf	___lmul@multiplier+1
  4356  0606  0853               	movf	inv_handler@t,w
  4357  0607  00A1               	movwf	___lmul@multiplier
  4358  0608  3000               	movlw	0
  4359  0609  00A8               	movwf	___lmul@multiplicand+3
  4360  060A  3000               	movlw	0
  4361  060B  00A7               	movwf	___lmul@multiplicand+2
  4362  060C  3000               	movlw	0
  4363  060D  00A6               	movwf	___lmul@multiplicand+1
  4364  060E  3064               	movlw	100
  4365  060F  00A5               	movwf	___lmul@multiplicand
  4366  0610  318D  2574  3185   	fcall	___lmul
  4367  0613  0020               	movlb	0	; select bank0
  4368  0614  0824               	movf	?___lmul+3,w
  4369  0615  00B4               	movwf	___aldiv@dividend+3
  4370  0616  0823               	movf	?___lmul+2,w
  4371  0617  00B3               	movwf	___aldiv@dividend+2
  4372  0618  0822               	movf	?___lmul+1,w
  4373  0619  00B2               	movwf	___aldiv@dividend+1
  4374  061A  0821               	movf	?___lmul,w
  4375  061B  00B1               	movwf	___aldiv@dividend
  4376  061C  318F  277E  3185   	fcall	___aldiv
  4377  061F  0020               	movlb	0	; select bank0
  4378  0620  082D               	movf	?___aldiv,w
  4379  0621  00C7               	movwf	??_inv_handler
  4380  0622  0847               	movf	??_inv_handler,w
  4381  0623  00D2               	movwf	inv_handler@data+1
  4382                           
  4383                           ;main.c: 47: PROTOCOL_I2C_Send_int8_t(2, data);
  4384  0624  3051               	movlw	(low (inv_handler@data| 0))& (0+255)
  4385  0625  00C7               	movwf	??_inv_handler
  4386  0626  0847               	movf	??_inv_handler,w
  4387  0627  00C3               	movwf	PROTOCOL_I2C_Send_int8_t@pbuffer
  4388  0628  3002               	movlw	2
  4389  0629  318E  26AF         	fcall	_PROTOCOL_I2C_Send_int8_t
  4390  062B  0008               	return
  4391  062C                     __end_of_inv_handler:	
  4392                           
  4393                           	psect	text6
  4394  0D18                     __ptext6:	
  4395 ;; *************** function _i2c2_write_no_data *****************
  4396 ;; Defined at:
  4397 ;;		line 54 in file "i2c2_util.c"
  4398 ;; Parameters:    Size  Location     Type
  4399 ;;  dev_addr        2   15[BANK0 ] unsigned int 
  4400 ;;  reg_addr        1   17[BANK0 ] unsigned char 
  4401 ;; Auto vars:     Size  Location     Type
  4402 ;;  status          1   22[BANK0 ] enum E2979
  4403 ;;  write_status    1   21[BANK0 ] unsigned char 
  4404 ;;  buf             1   20[BANK0 ] unsigned char [1]
  4405 ;;  timeout         1   19[BANK0 ] unsigned char 
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  1    wreg      unsigned char 
  4408 ;; Registers used:
  4409 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4415 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4418 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4419 ;;Total ram usage:        8 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    7
  4422 ;; This function calls:
  4423 ;;		_I2C2_MasterWrite
  4424 ;; This function is called by:
  4425 ;;		_inv_handler
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           
  4430                           ;psect for function _i2c2_write_no_data
  4431  0D18                     _i2c2_write_no_data:	
  4432                           
  4433                           ;i2c2_util.c: 56: uint8_t buf[1];
  4434                           ;i2c2_util.c: 57: I2C2_MESSAGE_STATUS status;
  4435                           ;i2c2_util.c: 58: uint8_t write_status = 2;
  4436                           
  4437                           ;incstack = 0
  4438                           ; Regs used in _i2c2_write_no_data: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4439  0D18  3002               	movlw	2
  4440  0D19  0020               	movlb	0	; select bank0
  4441  0D1A  00B2               	movwf	??_i2c2_write_no_data
  4442  0D1B  0832               	movf	??_i2c2_write_no_data,w
  4443  0D1C  00B5               	movwf	i2c2_write_no_data@write_status
  4444                           
  4445                           ;i2c2_util.c: 59: buf[0] = reg_addr;
  4446  0D1D  0831               	movf	i2c2_write_no_data@reg_addr,w
  4447  0D1E  00B2               	movwf	??_i2c2_write_no_data
  4448  0D1F  0832               	movf	??_i2c2_write_no_data,w
  4449  0D20  00B4               	movwf	i2c2_write_no_data@buf
  4450                           
  4451                           ;i2c2_util.c: 60: uint8_t timeout = 1;
  4452  0D21  01B3               	clrf	i2c2_write_no_data@timeout
  4453  0D22  0AB3               	incf	i2c2_write_no_data@timeout,f
  4454  0D23                     l4386:	
  4455                           ;i2c2_util.c: 61: while (status != I2C2_MESSAGE_FAIL) {
  4456                           
  4457  0D23  0336               	decf	i2c2_write_no_data@status,w
  4458  0D24  1903               	btfsc	3,2
  4459  0D25  2D44               	goto	l4388
  4460                           
  4461                           ;i2c2_util.c: 62: I2C2_MasterWrite(buf, 1, dev_addr, &status);
  4462  0D26  01A8               	clrf	I2C2_MasterWrite@length
  4463  0D27  0AA8               	incf	I2C2_MasterWrite@length,f
  4464  0D28  0830               	movf	i2c2_write_no_data@dev_addr+1,w
  4465  0D29  00AA               	movwf	I2C2_MasterWrite@address+1
  4466  0D2A  082F               	movf	i2c2_write_no_data@dev_addr,w
  4467  0D2B  00A9               	movwf	I2C2_MasterWrite@address
  4468  0D2C  3036               	movlw	(low (i2c2_write_no_data@status| 0))& (0+255)
  4469  0D2D  00B2               	movwf	??_i2c2_write_no_data
  4470  0D2E  0832               	movf	??_i2c2_write_no_data,w
  4471  0D2F  00AB               	movwf	I2C2_MasterWrite@pflag
  4472  0D30  3034               	movlw	(low (i2c2_write_no_data@buf| 0))& (0+255)
  4473  0D31  318C  2497  318D   	fcall	_I2C2_MasterWrite
  4474  0D34                     l4376:	
  4475                           ;i2c2_util.c: 63: while (status == I2C2_MESSAGE_PENDING);
  4476                           
  4477  0D34  3002               	movlw	2
  4478  0D35  0020               	movlb	0	; select bank0
  4479  0D36  0636               	xorwf	i2c2_write_no_data@status,w
  4480  0D37  1903               	btfsc	3,2
  4481  0D38  2D34               	goto	l4376
  4482                           
  4483                           ;i2c2_util.c: 64: if (status == I2C2_MESSAGE_COMPLETE) {
  4484  0D39  0836               	movf	i2c2_write_no_data@status,w
  4485  0D3A  1D03               	btfss	3,2
  4486  0D3B  2D3E               	goto	l4382
  4487                           
  4488                           ;i2c2_util.c: 65: write_status = 0;
  4489  0D3C  01B5               	clrf	i2c2_write_no_data@write_status
  4490                           
  4491                           ;i2c2_util.c: 66: break;
  4492  0D3D  2D44               	goto	l4388
  4493  0D3E                     l4382:	
  4494                           
  4495                           ;i2c2_util.c: 67: }
  4496                           ;i2c2_util.c: 68: if (--timeout == 0) {
  4497  0D3E  3001               	movlw	1
  4498  0D3F  02B3               	subwf	i2c2_write_no_data@timeout,f
  4499  0D40  1D03               	btfss	3,2
  4500  0D41  2D23               	goto	l4386
  4501                           
  4502                           ;i2c2_util.c: 69: write_status = 1;
  4503  0D42  01B5               	clrf	i2c2_write_no_data@write_status
  4504  0D43  0AB5               	incf	i2c2_write_no_data@write_status,f
  4505  0D44                     l4388:	
  4506                           ;i2c2_util.c: 70: break;
  4507                           
  4508                           
  4509                           ;i2c2_util.c: 71: }
  4510                           ;i2c2_util.c: 72: }
  4511                           ;i2c2_util.c: 73: return write_status;
  4512  0D44  0835               	movf	i2c2_write_no_data@write_status,w
  4513  0D45  0008               	return
  4514  0D46                     __end_of_i2c2_write_no_data:	
  4515                           
  4516                           	psect	text7
  4517  0BFA                     __ptext7:	
  4518 ;; *************** function _i2c2_write *****************
  4519 ;; Defined at:
  4520 ;;		line 13 in file "i2c2_util.c"
  4521 ;; Parameters:    Size  Location     Type
  4522 ;;  dev_addr        2   15[BANK0 ] unsigned int 
  4523 ;;  reg_addr        1   17[BANK0 ] unsigned char 
  4524 ;;  data            1   18[BANK0 ] unsigned char 
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;  buf             2   22[BANK0 ] unsigned char [2]
  4527 ;;  status          1   24[BANK0 ] enum E2979
  4528 ;;  write_status    1   21[BANK0 ] unsigned char 
  4529 ;; Return value:  Size  Location     Type
  4530 ;;                  1    wreg      unsigned char 
  4531 ;; Registers used:
  4532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4533 ;; Tracked objects:
  4534 ;;		On entry : 0/0
  4535 ;;		On exit  : 0/0
  4536 ;;		Unchanged: 0/0
  4537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4538 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4539 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4540 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4541 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4542 ;;Total ram usage:       10 bytes
  4543 ;; Hardware stack levels used:    1
  4544 ;; Hardware stack levels required when called:    7
  4545 ;; This function calls:
  4546 ;;		_I2C2_MasterWrite
  4547 ;; This function is called by:
  4548 ;;		_inv_handler
  4549 ;; This function uses a non-reentrant model
  4550 ;;
  4551                           
  4552                           
  4553                           ;psect for function _i2c2_write
  4554  0BFA                     _i2c2_write:	
  4555                           
  4556                           ;i2c2_util.c: 15: uint8_t buf[2];
  4557                           ;i2c2_util.c: 16: I2C2_MESSAGE_STATUS status;
  4558                           ;i2c2_util.c: 17: uint8_t write_status;
  4559                           ;i2c2_util.c: 18: buf[0] = reg_addr;
  4560                           
  4561                           ;incstack = 0
  4562                           ; Regs used in _i2c2_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4563  0BFA  0020               	movlb	0	; select bank0
  4564  0BFB  0831               	movf	i2c2_write@reg_addr,w
  4565  0BFC  00B3               	movwf	??_i2c2_write
  4566  0BFD  0833               	movf	??_i2c2_write,w
  4567  0BFE  00B6               	movwf	i2c2_write@buf
  4568                           
  4569                           ;i2c2_util.c: 19: buf[1] = data;
  4570  0BFF  0832               	movf	i2c2_write@data,w
  4571  0C00  00B3               	movwf	??_i2c2_write
  4572  0C01  0833               	movf	??_i2c2_write,w
  4573  0C02  00B7               	movwf	i2c2_write@buf+1
  4574                           
  4575                           ;i2c2_util.c: 20: I2C2_MasterWrite(buf, 2, dev_addr, &status);
  4576  0C03  3002               	movlw	2
  4577  0C04  00B3               	movwf	??_i2c2_write
  4578  0C05  0833               	movf	??_i2c2_write,w
  4579  0C06  00A8               	movwf	I2C2_MasterWrite@length
  4580  0C07  0830               	movf	i2c2_write@dev_addr+1,w
  4581  0C08  00AA               	movwf	I2C2_MasterWrite@address+1
  4582  0C09  082F               	movf	i2c2_write@dev_addr,w
  4583  0C0A  00A9               	movwf	I2C2_MasterWrite@address
  4584  0C0B  3038               	movlw	(low (i2c2_write@status| 0))& (0+255)
  4585  0C0C  00B4               	movwf	??_i2c2_write+1
  4586  0C0D  0834               	movf	??_i2c2_write+1,w
  4587  0C0E  00AB               	movwf	I2C2_MasterWrite@pflag
  4588  0C0F  3036               	movlw	(low (i2c2_write@buf| 0))& (0+255)
  4589  0C10  318C  2497  318B   	fcall	_I2C2_MasterWrite
  4590  0C13                     l4364:	
  4591                           ;i2c2_util.c: 21: while (status == I2C2_MESSAGE_PENDING);
  4592                           
  4593  0C13  3002               	movlw	2
  4594  0C14  0020               	movlb	0	; select bank0
  4595  0C15  0638               	xorwf	i2c2_write@status,w
  4596  0C16  1903               	btfsc	3,2
  4597  0C17  2C13               	goto	l4364
  4598                           
  4599                           ;i2c2_util.c: 22: if (status == I2C2_MESSAGE_COMPLETE) {
  4600  0C18  0838               	movf	i2c2_write@status,w
  4601  0C19  1D03               	btfss	3,2
  4602  0C1A  2C1D               	goto	l942
  4603                           
  4604                           ;i2c2_util.c: 23: write_status = 0;
  4605  0C1B  01B5               	clrf	i2c2_write@write_status
  4606                           
  4607                           ;i2c2_util.c: 24: } else {
  4608  0C1C  0008               	return
  4609  0C1D                     l942:	
  4610                           
  4611                           ;i2c2_util.c: 25: write_status = 1;
  4612  0C1D  01B5               	clrf	i2c2_write@write_status
  4613  0C1E  0AB5               	incf	i2c2_write@write_status,f
  4614  0C1F  0008               	return
  4615  0C20                     __end_of_i2c2_write:	
  4616                           ;i2c2_util.c: 26: }
  4617                           ;i2c2_util.c: 27: return write_status;
  4618                           ;	Return value of _i2c2_write is never used
  4619                           
  4620                           
  4621                           	psect	text8
  4622  0C97                     __ptext8:	
  4623 ;; *************** function _I2C2_MasterWrite *****************
  4624 ;; Defined at:
  4625 ;;		line 598 in file "mcc_generated_files/i2c2.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;  pdata           1    wreg     PTR unsigned char 
  4628 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  4629 ;;  length          1    8[BANK0 ] unsigned char 
  4630 ;;  address         2    9[BANK0 ] unsigned int 
  4631 ;;  pflag           1   11[BANK0 ] PTR enum E2972
  4632 ;;		 -> i2c2_write_no_data@status(1), i2c2_read@status(1), i2c2_write@status(1), 
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
  4635 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  4636 ;; Return value:  Size  Location     Type
  4637 ;;                  1    wreg      void 
  4638 ;; Registers used:
  4639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4640 ;; Tracked objects:
  4641 ;;		On entry : 0/0
  4642 ;;		On exit  : 0/0
  4643 ;;		Unchanged: 0/0
  4644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4645 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4646 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4647 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4648 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4649 ;;Total ram usage:        7 bytes
  4650 ;; Hardware stack levels used:    1
  4651 ;; Hardware stack levels required when called:    6
  4652 ;; This function calls:
  4653 ;;		_I2C2_MasterTRBInsert
  4654 ;;		_I2C2_MasterWriteTRBBuild
  4655 ;; This function is called by:
  4656 ;;		_i2c2_write
  4657 ;;		_i2c2_write_no_data
  4658 ;; This function uses a non-reentrant model
  4659 ;;
  4660                           
  4661                           
  4662                           ;psect for function _I2C2_MasterWrite
  4663  0C97                     _I2C2_MasterWrite:	
  4664                           
  4665                           ;incstack = 0
  4666                           ; Regs used in _I2C2_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4667                           ;I2C2_MasterWrite@pdata stored from wreg
  4668  0C97  0020               	movlb	0	; select bank0
  4669  0C98  00AE               	movwf	I2C2_MasterWrite@pdata
  4670                           
  4671                           ;i2c2.c: 604: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
  4672                           ;i2c2.c: 607: if (i2c2_object.trStatus.s.full != 1)
  4673  0C99  185C               	btfsc	_i2c2_object+2,0
  4674  0C9A  2CB8               	goto	l4190
  4675                           
  4676                           ;i2c2.c: 608: {
  4677                           ;i2c2.c: 609: I2C2_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  4678  0C9B  082E               	movf	I2C2_MasterWrite@pdata,w
  4679  0C9C  00AC               	movwf	??_I2C2_MasterWrite
  4680  0C9D  082C               	movf	??_I2C2_MasterWrite,w
  4681  0C9E  00A1               	movwf	I2C2_MasterWriteTRBBuild@pdata
  4682  0C9F  0828               	movf	I2C2_MasterWrite@length,w
  4683  0CA0  00AD               	movwf	??_I2C2_MasterWrite+1
  4684  0CA1  082D               	movf	??_I2C2_MasterWrite+1,w
  4685  0CA2  00A2               	movwf	I2C2_MasterWriteTRBBuild@length
  4686  0CA3  082A               	movf	I2C2_MasterWrite@address+1,w
  4687  0CA4  00A4               	movwf	I2C2_MasterWriteTRBBuild@address+1
  4688  0CA5  0829               	movf	I2C2_MasterWrite@address,w
  4689  0CA6  00A3               	movwf	I2C2_MasterWriteTRBBuild@address
  4690  0CA7  30D2               	movlw	(low (I2C2_MasterWrite@trBlock| 0))& (0+255)
  4691  0CA8  318B  2350  318C   	fcall	_I2C2_MasterWriteTRBBuild
  4692                           
  4693                           ;i2c2.c: 610: I2C2_MasterTRBInsert(1, &trBlock, pflag);
  4694  0CAB  30D2               	movlw	(low (I2C2_MasterWrite@trBlock| 0))& (0+255)
  4695  0CAC  0020               	movlb	0	; select bank0
  4696  0CAD  00AC               	movwf	??_I2C2_MasterWrite
  4697  0CAE  082C               	movf	??_I2C2_MasterWrite,w
  4698  0CAF  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
  4699  0CB0  082B               	movf	I2C2_MasterWrite@pflag,w
  4700  0CB1  00AD               	movwf	??_I2C2_MasterWrite+1
  4701  0CB2  082D               	movf	??_I2C2_MasterWrite+1,w
  4702  0CB3  00A2               	movwf	I2C2_MasterTRBInsert@pflag
  4703  0CB4  3001               	movlw	1
  4704  0CB5  3187  27B7         	fcall	_I2C2_MasterTRBInsert
  4705                           
  4706                           ;i2c2.c: 611: }
  4707  0CB7  0008               	return
  4708  0CB8                     l4190:	
  4709                           
  4710                           ;i2c2.c: 612: else
  4711                           ;i2c2.c: 613: {
  4712                           ;i2c2.c: 614: *pflag = I2C2_MESSAGE_FAIL;
  4713  0CB8  0020               	movlb	0	; select bank0
  4714  0CB9  082B               	movf	I2C2_MasterWrite@pflag,w
  4715  0CBA  0086               	movwf	6
  4716  0CBB  0187               	clrf	7
  4717  0CBC  0181               	clrf	1
  4718  0CBD  0A81               	incf	1,f
  4719  0CBE  0008               	return
  4720  0CBF                     __end_of_I2C2_MasterWrite:	
  4721                           
  4722                           	psect	text9
  4723  0B50                     __ptext9:	
  4724 ;; *************** function _I2C2_MasterWriteTRBBuild *****************
  4725 ;; Defined at:
  4726 ;;		line 707 in file "mcc_generated_files/i2c2.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;  ptrb            1    wreg     PTR struct .
  4729 ;;		 -> I2C2_MasterWrite@trBlock(4), 
  4730 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
  4731 ;;		 -> i2c2_write_no_data@buf(1), i2c2_read@reg(1), i2c2_write@buf(2), 
  4732 ;;  length          1    2[BANK0 ] unsigned char 
  4733 ;;  address         2    3[BANK0 ] unsigned int 
  4734 ;; Auto vars:     Size  Location     Type
  4735 ;;  ptrb            1    7[BANK0 ] PTR struct .
  4736 ;;		 -> I2C2_MasterWrite@trBlock(4), 
  4737 ;; Return value:  Size  Location     Type
  4738 ;;                  1    wreg      void 
  4739 ;; Registers used:
  4740 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4741 ;; Tracked objects:
  4742 ;;		On entry : 0/0
  4743 ;;		On exit  : 0/0
  4744 ;;		Unchanged: 0/0
  4745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4746 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4747 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4748 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4749 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4750 ;;Total ram usage:        7 bytes
  4751 ;; Hardware stack levels used:    1
  4752 ;; Hardware stack levels required when called:    5
  4753 ;; This function calls:
  4754 ;;		Nothing
  4755 ;; This function is called by:
  4756 ;;		_I2C2_MasterWrite
  4757 ;; This function uses a non-reentrant model
  4758 ;;
  4759                           
  4760                           
  4761                           ;psect for function _I2C2_MasterWriteTRBBuild
  4762  0B50                     _I2C2_MasterWriteTRBBuild:	
  4763                           
  4764                           ;incstack = 0
  4765                           ; Regs used in _I2C2_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  4766                           ;I2C2_MasterWriteTRBBuild@ptrb stored from wreg
  4767  0B50  0020               	movlb	0	; select bank0
  4768  0B51  00A7               	movwf	I2C2_MasterWriteTRBBuild@ptrb
  4769                           
  4770                           ;i2c2.c: 713: ptrb->address = address << 1;
  4771  0B52  0824               	movf	I2C2_MasterWriteTRBBuild@address+1,w
  4772  0B53  00A6               	movwf	??_I2C2_MasterWriteTRBBuild+1
  4773  0B54  0823               	movf	I2C2_MasterWriteTRBBuild@address,w
  4774  0B55  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
  4775  0B56  35A5               	lslf	??_I2C2_MasterWriteTRBBuild,f
  4776  0B57  0DA6               	rlf	??_I2C2_MasterWriteTRBBuild+1,f
  4777  0B58  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  4778  0B59  0086               	movwf	6
  4779  0B5A  0187               	clrf	7
  4780  0B5B  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
  4781  0B5C  3FC0               	movwi [0]fsr1
  4782  0B5D  0826               	movf	??_I2C2_MasterWriteTRBBuild+1,w
  4783  0B5E  3FC1               	movwi [1]fsr1
  4784                           
  4785                           ;i2c2.c: 714: ptrb->length = length;
  4786  0B5F  0822               	movf	I2C2_MasterWriteTRBBuild@length,w
  4787  0B60  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
  4788  0B61  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  4789  0B62  3E02               	addlw	2
  4790  0B63  0086               	movwf	6
  4791  0B64  0187               	clrf	7
  4792  0B65  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
  4793  0B66  0081               	movwf	1
  4794                           
  4795                           ;i2c2.c: 715: ptrb->pbuffer = pdata;
  4796  0B67  0821               	movf	I2C2_MasterWriteTRBBuild@pdata,w
  4797  0B68  00A5               	movwf	??_I2C2_MasterWriteTRBBuild
  4798  0B69  0827               	movf	I2C2_MasterWriteTRBBuild@ptrb,w
  4799  0B6A  3E03               	addlw	3
  4800  0B6B  0086               	movwf	6
  4801  0B6C  0187               	clrf	7
  4802  0B6D  0825               	movf	??_I2C2_MasterWriteTRBBuild,w
  4803  0B6E  0081               	movwf	1
  4804  0B6F  0008               	return
  4805  0B70                     __end_of_I2C2_MasterWriteTRBBuild:	
  4806                           
  4807                           	psect	text10
  4808  0CBF                     __ptext10:	
  4809 ;; *************** function _i2c2_read_no_reg_addr *****************
  4810 ;; Defined at:
  4811 ;;		line 77 in file "i2c2_util.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;  dev_addr        2   15[BANK0 ] unsigned int 
  4814 ;;  pbuf            1   17[BANK0 ] PTR unsigned char 
  4815 ;;		 -> inv_handler@measure(4), 
  4816 ;;  len             1   18[BANK0 ] unsigned char 
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;  status          1   23[BANK0 ] enum E2979
  4819 ;;  read_status     1   22[BANK0 ] unsigned char 
  4820 ;;  timeout         1   21[BANK0 ] unsigned char 
  4821 ;; Return value:  Size  Location     Type
  4822 ;;                  1    wreg      unsigned char 
  4823 ;; Registers used:
  4824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4825 ;; Tracked objects:
  4826 ;;		On entry : 0/0
  4827 ;;		On exit  : 0/0
  4828 ;;		Unchanged: 0/0
  4829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4830 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4831 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4832 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4833 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4834 ;;Total ram usage:        9 bytes
  4835 ;; Hardware stack levels used:    1
  4836 ;; Hardware stack levels required when called:    7
  4837 ;; This function calls:
  4838 ;;		_I2C2_MasterRead
  4839 ;; This function is called by:
  4840 ;;		_inv_handler
  4841 ;; This function uses a non-reentrant model
  4842 ;;
  4843                           
  4844                           
  4845                           ;psect for function _i2c2_read_no_reg_addr
  4846  0CBF                     _i2c2_read_no_reg_addr:	
  4847                           
  4848                           ;i2c2_util.c: 79: I2C2_MESSAGE_STATUS status;
  4849                           ;i2c2_util.c: 80: uint8_t read_status = 2;
  4850                           
  4851                           ;incstack = 0
  4852                           ; Regs used in _i2c2_read_no_reg_addr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  4853  0CBF  3002               	movlw	2
  4854  0CC0  0020               	movlb	0	; select bank0
  4855  0CC1  00B3               	movwf	??_i2c2_read_no_reg_addr
  4856  0CC2  0833               	movf	??_i2c2_read_no_reg_addr,w
  4857  0CC3  00B6               	movwf	i2c2_read_no_reg_addr@read_status
  4858                           
  4859                           ;i2c2_util.c: 81: uint8_t timeout = 1;
  4860  0CC4  01B5               	clrf	i2c2_read_no_reg_addr@timeout
  4861  0CC5  0AB5               	incf	i2c2_read_no_reg_addr@timeout,f
  4862  0CC6                     l4408:	
  4863                           ;i2c2_util.c: 82: while (status != I2C2_MESSAGE_FAIL) {
  4864                           
  4865  0CC6  0337               	decf	i2c2_read_no_reg_addr@status,w
  4866  0CC7  1903               	btfsc	3,2
  4867  0CC8  2CE9               	goto	l4410
  4868                           
  4869                           ;i2c2_util.c: 83: I2C2_MasterRead(pbuf, len, dev_addr, &status);
  4870  0CC9  0832               	movf	i2c2_read_no_reg_addr@len,w
  4871  0CCA  00B3               	movwf	??_i2c2_read_no_reg_addr
  4872  0CCB  0833               	movf	??_i2c2_read_no_reg_addr,w
  4873  0CCC  00A8               	movwf	I2C2_MasterRead@length
  4874  0CCD  0830               	movf	i2c2_read_no_reg_addr@dev_addr+1,w
  4875  0CCE  00AA               	movwf	I2C2_MasterRead@address+1
  4876  0CCF  082F               	movf	i2c2_read_no_reg_addr@dev_addr,w
  4877  0CD0  00A9               	movwf	I2C2_MasterRead@address
  4878  0CD1  3037               	movlw	(low (i2c2_read_no_reg_addr@status| 0))& (0+255)
  4879  0CD2  00B4               	movwf	??_i2c2_read_no_reg_addr+1
  4880  0CD3  0834               	movf	??_i2c2_read_no_reg_addr+1,w
  4881  0CD4  00AB               	movwf	I2C2_MasterRead@pflag
  4882  0CD5  0831               	movf	i2c2_read_no_reg_addr@pbuf,w
  4883  0CD6  318C  246F  318C   	fcall	_I2C2_MasterRead
  4884  0CD9                     l4398:	
  4885                           ;i2c2_util.c: 84: while (status == I2C2_MESSAGE_PENDING);
  4886                           
  4887  0CD9  3002               	movlw	2
  4888  0CDA  0020               	movlb	0	; select bank0
  4889  0CDB  0637               	xorwf	i2c2_read_no_reg_addr@status,w
  4890  0CDC  1903               	btfsc	3,2
  4891  0CDD  2CD9               	goto	l4398
  4892                           
  4893                           ;i2c2_util.c: 85: if (status == I2C2_MESSAGE_COMPLETE) {
  4894  0CDE  0837               	movf	i2c2_read_no_reg_addr@status,w
  4895  0CDF  1D03               	btfss	3,2
  4896  0CE0  2CE3               	goto	l4404
  4897                           
  4898                           ;i2c2_util.c: 86: read_status = 0;
  4899  0CE1  01B6               	clrf	i2c2_read_no_reg_addr@read_status
  4900                           
  4901                           ;i2c2_util.c: 87: break;
  4902  0CE2  2CE9               	goto	l4410
  4903  0CE3                     l4404:	
  4904                           
  4905                           ;i2c2_util.c: 88: }
  4906                           ;i2c2_util.c: 89: if (--timeout == 0) {
  4907  0CE3  3001               	movlw	1
  4908  0CE4  02B5               	subwf	i2c2_read_no_reg_addr@timeout,f
  4909  0CE5  1D03               	btfss	3,2
  4910  0CE6  2CC6               	goto	l4408
  4911                           
  4912                           ;i2c2_util.c: 90: read_status = 1;
  4913  0CE7  01B6               	clrf	i2c2_read_no_reg_addr@read_status
  4914  0CE8  0AB6               	incf	i2c2_read_no_reg_addr@read_status,f
  4915  0CE9                     l4410:	
  4916                           ;i2c2_util.c: 91: break;
  4917                           
  4918                           
  4919                           ;i2c2_util.c: 92: }
  4920                           ;i2c2_util.c: 93: }
  4921                           ;i2c2_util.c: 94: return read_status;
  4922  0CE9  0836               	movf	i2c2_read_no_reg_addr@read_status,w
  4923  0CEA  0008               	return
  4924  0CEB                     __end_of_i2c2_read_no_reg_addr:	
  4925                           
  4926                           	psect	text11
  4927  0C6F                     __ptext11:	
  4928 ;; *************** function _I2C2_MasterRead *****************
  4929 ;; Defined at:
  4930 ;;		line 619 in file "mcc_generated_files/i2c2.c"
  4931 ;; Parameters:    Size  Location     Type
  4932 ;;  pdata           1    wreg     PTR unsigned char 
  4933 ;;		 -> inv_handler@measure(4), 
  4934 ;;  length          1    8[BANK0 ] unsigned char 
  4935 ;;  address         2    9[BANK0 ] unsigned int 
  4936 ;;  pflag           1   11[BANK0 ] PTR enum E2972
  4937 ;;		 -> i2c2_read_no_reg_addr@status(1), i2c2_read@status(1), 
  4938 ;; Auto vars:     Size  Location     Type
  4939 ;;  pdata           1   14[BANK0 ] PTR unsigned char 
  4940 ;;		 -> inv_handler@measure(4), 
  4941 ;; Return value:  Size  Location     Type
  4942 ;;                  1    wreg      void 
  4943 ;; Registers used:
  4944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4945 ;; Tracked objects:
  4946 ;;		On entry : 0/0
  4947 ;;		On exit  : 0/0
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4950 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4953 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4954 ;;Total ram usage:        7 bytes
  4955 ;; Hardware stack levels used:    1
  4956 ;; Hardware stack levels required when called:    6
  4957 ;; This function calls:
  4958 ;;		_I2C2_MasterReadTRBBuild
  4959 ;;		_I2C2_MasterTRBInsert
  4960 ;; This function is called by:
  4961 ;;		_i2c2_read_no_reg_addr
  4962 ;; This function uses a non-reentrant model
  4963 ;;
  4964                           
  4965                           
  4966                           ;psect for function _I2C2_MasterRead
  4967  0C6F                     _I2C2_MasterRead:	
  4968                           
  4969                           ;incstack = 0
  4970                           ; Regs used in _I2C2_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4971                           ;I2C2_MasterRead@pdata stored from wreg
  4972  0C6F  0020               	movlb	0	; select bank0
  4973  0C70  00AE               	movwf	I2C2_MasterRead@pdata
  4974                           
  4975                           ;i2c2.c: 625: static I2C2_TRANSACTION_REQUEST_BLOCK trBlock;
  4976                           ;i2c2.c: 629: if (i2c2_object.trStatus.s.full != 1)
  4977  0C71  185C               	btfsc	_i2c2_object+2,0
  4978  0C72  2C90               	goto	l4196
  4979                           
  4980                           ;i2c2.c: 630: {
  4981                           ;i2c2.c: 631: I2C2_MasterReadTRBBuild(&trBlock, pdata, length, address);
  4982  0C73  082E               	movf	I2C2_MasterRead@pdata,w
  4983  0C74  00AC               	movwf	??_I2C2_MasterRead
  4984  0C75  082C               	movf	??_I2C2_MasterRead,w
  4985  0C76  00A1               	movwf	I2C2_MasterReadTRBBuild@pdata
  4986  0C77  0828               	movf	I2C2_MasterRead@length,w
  4987  0C78  00AD               	movwf	??_I2C2_MasterRead+1
  4988  0C79  082D               	movf	??_I2C2_MasterRead+1,w
  4989  0C7A  00A2               	movwf	I2C2_MasterReadTRBBuild@length
  4990  0C7B  082A               	movf	I2C2_MasterRead@address+1,w
  4991  0C7C  00A4               	movwf	I2C2_MasterReadTRBBuild@address+1
  4992  0C7D  0829               	movf	I2C2_MasterRead@address,w
  4993  0C7E  00A3               	movwf	I2C2_MasterReadTRBBuild@address
  4994  0C7F  30CE               	movlw	(low (I2C2_MasterRead@trBlock| 0))& (0+255)
  4995  0C80  318C  2447  318C   	fcall	_I2C2_MasterReadTRBBuild
  4996                           
  4997                           ;i2c2.c: 632: I2C2_MasterTRBInsert(1, &trBlock, pflag);
  4998  0C83  30CE               	movlw	(low (I2C2_MasterRead@trBlock| 0))& (0+255)
  4999  0C84  0020               	movlb	0	; select bank0
  5000  0C85  00AC               	movwf	??_I2C2_MasterRead
  5001  0C86  082C               	movf	??_I2C2_MasterRead,w
  5002  0C87  00A1               	movwf	I2C2_MasterTRBInsert@ptrb_list
  5003  0C88  082B               	movf	I2C2_MasterRead@pflag,w
  5004  0C89  00AD               	movwf	??_I2C2_MasterRead+1
  5005  0C8A  082D               	movf	??_I2C2_MasterRead+1,w
  5006  0C8B  00A2               	movwf	I2C2_MasterTRBInsert@pflag
  5007  0C8C  3001               	movlw	1
  5008  0C8D  3187  27B7         	fcall	_I2C2_MasterTRBInsert
  5009                           
  5010                           ;i2c2.c: 633: }
  5011  0C8F  0008               	return
  5012  0C90                     l4196:	
  5013                           
  5014                           ;i2c2.c: 634: else
  5015                           ;i2c2.c: 635: {
  5016                           ;i2c2.c: 636: *pflag = I2C2_MESSAGE_FAIL;
  5017  0C90  0020               	movlb	0	; select bank0
  5018  0C91  082B               	movf	I2C2_MasterRead@pflag,w
  5019  0C92  0086               	movwf	6
  5020  0C93  0187               	clrf	7
  5021  0C94  0181               	clrf	1
  5022  0C95  0A81               	incf	1,f
  5023  0C96  0008               	return
  5024  0C97                     __end_of_I2C2_MasterRead:	
  5025                           
  5026                           	psect	text12
  5027  07B7                     __ptext12:	
  5028 ;; *************** function _I2C2_MasterTRBInsert *****************
  5029 ;; Defined at:
  5030 ;;		line 641 in file "mcc_generated_files/i2c2.c"
  5031 ;; Parameters:    Size  Location     Type
  5032 ;;  count           1    wreg     unsigned char 
  5033 ;;  ptrb_list       1    1[BANK0 ] PTR struct .
  5034 ;;		 -> I2C2_MasterRead@trBlock(4), I2C2_MasterWrite@trBlock(4), 
  5035 ;;  pflag           1    2[BANK0 ] PTR enum E2972
  5036 ;;		 -> i2c2_read_no_reg_addr@status(1), i2c2_write_no_data@status(1), i2c2_read@status(1), i2c2_write@status(1), 
  5037 ;; Auto vars:     Size  Location     Type
  5038 ;;  count           1    4[BANK0 ] unsigned char 
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  1    wreg      void 
  5041 ;; Registers used:
  5042 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5048 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5049 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5051 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5052 ;;Total ram usage:        4 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:    5
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		_I2C2_MasterWrite
  5059 ;;		_I2C2_MasterRead
  5060 ;; This function uses a non-reentrant model
  5061 ;;
  5062                           
  5063                           
  5064                           ;psect for function _I2C2_MasterTRBInsert
  5065  07B7                     _I2C2_MasterTRBInsert:	
  5066                           
  5067                           ;incstack = 0
  5068                           ; Regs used in _I2C2_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  5069                           ;I2C2_MasterTRBInsert@count stored from wreg
  5070  07B7  0020               	movlb	0	; select bank0
  5071  07B8  00A4               	movwf	I2C2_MasterTRBInsert@count
  5072                           
  5073                           ;i2c2.c: 648: if (i2c2_object.trStatus.s.full != 1)
  5074  07B9  185C               	btfsc	_i2c2_object+2,0
  5075  07BA  2FEB               	goto	l4100
  5076                           
  5077                           ;i2c2.c: 649: {
  5078                           ;i2c2.c: 650: *pflag = I2C2_MESSAGE_PENDING;
  5079  07BB  3002               	movlw	2
  5080  07BC  00A3               	movwf	??_I2C2_MasterTRBInsert
  5081  07BD  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  5082  07BE  0086               	movwf	6
  5083  07BF  0187               	clrf	7
  5084  07C0  0823               	movf	??_I2C2_MasterTRBInsert,w
  5085  07C1  0081               	movwf	1
  5086                           
  5087                           ;i2c2.c: 652: i2c2_object.pTrTail->ptrb_list = ptrb_list;
  5088  07C2  0821               	movf	I2C2_MasterTRBInsert@ptrb_list,w
  5089  07C3  00A3               	movwf	??_I2C2_MasterTRBInsert
  5090  07C4  0A5A               	incf	_i2c2_object,w
  5091  07C5  0086               	movwf	6
  5092  07C6  0187               	clrf	7
  5093  07C7  0823               	movf	??_I2C2_MasterTRBInsert,w
  5094  07C8  0081               	movwf	1
  5095                           
  5096                           ;i2c2.c: 653: i2c2_object.pTrTail->count = count;
  5097  07C9  0824               	movf	I2C2_MasterTRBInsert@count,w
  5098  07CA  00A3               	movwf	??_I2C2_MasterTRBInsert
  5099  07CB  085A               	movf	_i2c2_object,w
  5100  07CC  0086               	movwf	6
  5101  07CD  0187               	clrf	7
  5102  07CE  0823               	movf	??_I2C2_MasterTRBInsert,w
  5103  07CF  0081               	movwf	1
  5104                           
  5105                           ;i2c2.c: 654: i2c2_object.pTrTail->pTrFlag = pflag;
  5106  07D0  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  5107  07D1  00A3               	movwf	??_I2C2_MasterTRBInsert
  5108  07D2  085A               	movf	_i2c2_object,w
  5109  07D3  3E02               	addlw	2
  5110  07D4  0086               	movwf	6
  5111  07D5  0187               	clrf	7
  5112  07D6  0823               	movf	??_I2C2_MasterTRBInsert,w
  5113  07D7  0081               	movwf	1
  5114                           
  5115                           ;i2c2.c: 655: i2c2_object.pTrTail++;
  5116  07D8  3003               	movlw	3
  5117  07D9  00A3               	movwf	??_I2C2_MasterTRBInsert
  5118  07DA  0823               	movf	??_I2C2_MasterTRBInsert,w
  5119  07DB  07DA               	addwf	_i2c2_object,f
  5120                           
  5121                           ;i2c2.c: 658: if (i2c2_object.pTrTail == (i2c2_tr_queue + 1))
  5122  07DC  085A               	movf	_i2c2_object,w
  5123  07DD  3ADC               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
  5124  07DE  1D03               	skipz
  5125  07DF  2FE4               	goto	l4096
  5126                           
  5127                           ;i2c2.c: 659: {
  5128                           ;i2c2.c: 661: i2c2_object.pTrTail = i2c2_tr_queue;
  5129  07E0  30D9               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  5130  07E1  00A3               	movwf	??_I2C2_MasterTRBInsert
  5131  07E2  0823               	movf	??_I2C2_MasterTRBInsert,w
  5132  07E3  00DA               	movwf	_i2c2_object
  5133  07E4                     l4096:	
  5134                           
  5135                           ;i2c2.c: 662: }
  5136                           ;i2c2.c: 666: i2c2_object.trStatus.s.empty = 0;
  5137  07E4  10DC               	bcf	_i2c2_object+2,1
  5138                           
  5139                           ;i2c2.c: 669: if (i2c2_object.pTrHead == i2c2_object.pTrTail)
  5140  07E5  085B               	movf	low ((_i2c2_object| 0+1)),w
  5141  07E6  065A               	xorwf	_i2c2_object,w
  5142  07E7  1D03               	skipz
  5143  07E8  2FF0               	goto	l4102
  5144                           
  5145                           ;i2c2.c: 670: {
  5146                           ;i2c2.c: 672: i2c2_object.trStatus.s.full = 1;
  5147  07E9  145C               	bsf	_i2c2_object+2,0
  5148                           
  5149                           ;i2c2.c: 673: }
  5150                           ;i2c2.c: 675: }
  5151  07EA  2FF0               	goto	l4102
  5152  07EB                     l4100:	
  5153                           
  5154                           ;i2c2.c: 676: else
  5155                           ;i2c2.c: 677: {
  5156                           ;i2c2.c: 678: *pflag = I2C2_MESSAGE_FAIL;
  5157  07EB  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  5158  07EC  0086               	movwf	6
  5159  07ED  0187               	clrf	7
  5160  07EE  0181               	clrf	1
  5161  07EF  0A81               	incf	1,f
  5162  07F0                     l4102:	
  5163                           
  5164                           ;i2c2.c: 679: }
  5165                           ;i2c2.c: 682: if (*pflag == I2C2_MESSAGE_PENDING)
  5166  07F0  0822               	movf	I2C2_MasterTRBInsert@pflag,w
  5167  07F1  0086               	movwf	6
  5168  07F2  0187               	clrf	7
  5169  07F3  3002               	movlw	2
  5170  07F4  0601               	xorwf	1,w
  5171  07F5  1D03               	btfss	3,2
  5172  07F6  0008               	return
  5173  07F7                     l4106:	
  5174                           ;i2c2.c: 683: {
  5175                           ;i2c2.c: 684: while(i2c2_state != S_MASTER_IDLE);
  5176                           
  5177  07F7  086A               	movf	_i2c2_state,w
  5178  07F8  1D03               	btfss	3,2
  5179  07F9  2FF7               	goto	l4106
  5180                           
  5181                           ;i2c2.c: 685: {
  5182                           ;i2c2.c: 688: PIR4bits.SSP2IF = 1;
  5183  07FA  1414               	bsf	20,0	;volatile
  5184  07FB  0008               	return
  5185  07FC                     __end_of_I2C2_MasterTRBInsert:	
  5186                           
  5187                           	psect	text13
  5188  0C47                     __ptext13:	
  5189 ;; *************** function _I2C2_MasterReadTRBBuild *****************
  5190 ;; Defined at:
  5191 ;;		line 694 in file "mcc_generated_files/i2c2.c"
  5192 ;; Parameters:    Size  Location     Type
  5193 ;;  ptrb            1    wreg     PTR struct .
  5194 ;;		 -> I2C2_MasterRead@trBlock(4), 
  5195 ;;  pdata           1    1[BANK0 ] PTR unsigned char 
  5196 ;;		 -> inv_handler@measure(4), 
  5197 ;;  length          1    2[BANK0 ] unsigned char 
  5198 ;;  address         2    3[BANK0 ] unsigned int 
  5199 ;; Auto vars:     Size  Location     Type
  5200 ;;  ptrb            1    7[BANK0 ] PTR struct .
  5201 ;;		 -> I2C2_MasterRead@trBlock(4), 
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  1    wreg      void 
  5204 ;; Registers used:
  5205 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5211 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5213 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5214 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5215 ;;Total ram usage:        7 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    5
  5218 ;; This function calls:
  5219 ;;		Nothing
  5220 ;; This function is called by:
  5221 ;;		_I2C2_MasterRead
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           
  5226                           ;psect for function _I2C2_MasterReadTRBBuild
  5227  0C47                     _I2C2_MasterReadTRBBuild:	
  5228                           
  5229                           ;incstack = 0
  5230                           ; Regs used in _I2C2_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  5231                           ;I2C2_MasterReadTRBBuild@ptrb stored from wreg
  5232  0C47  0020               	movlb	0	; select bank0
  5233  0C48  00A7               	movwf	I2C2_MasterReadTRBBuild@ptrb
  5234                           
  5235                           ;i2c2.c: 700: ptrb->address = address << 1;
  5236  0C49  0824               	movf	I2C2_MasterReadTRBBuild@address+1,w
  5237  0C4A  00A6               	movwf	??_I2C2_MasterReadTRBBuild+1
  5238  0C4B  0823               	movf	I2C2_MasterReadTRBBuild@address,w
  5239  0C4C  00A5               	movwf	??_I2C2_MasterReadTRBBuild
  5240  0C4D  35A5               	lslf	??_I2C2_MasterReadTRBBuild,f
  5241  0C4E  0DA6               	rlf	??_I2C2_MasterReadTRBBuild+1,f
  5242  0C4F  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5243  0C50  0086               	movwf	6
  5244  0C51  0187               	clrf	7
  5245  0C52  0825               	movf	??_I2C2_MasterReadTRBBuild,w
  5246  0C53  3FC0               	movwi [0]fsr1
  5247  0C54  0826               	movf	??_I2C2_MasterReadTRBBuild+1,w
  5248  0C55  3FC1               	movwi [1]fsr1
  5249                           
  5250                           ;i2c2.c: 702: ptrb->address |= 0x01;
  5251  0C56  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5252  0C57  0086               	movwf	6
  5253  0C58  0187               	clrf	7
  5254  0C59  3001               	movlw	1
  5255  0C5A  0481               	iorwf	1,f
  5256  0C5B  3141               	addfsr 1,1
  5257  0C5C  3000               	movlw	0
  5258  0C5D  0481               	iorwf	1,f
  5259                           
  5260                           ;i2c2.c: 703: ptrb->length = length;
  5261  0C5E  0822               	movf	I2C2_MasterReadTRBBuild@length,w
  5262  0C5F  00A5               	movwf	??_I2C2_MasterReadTRBBuild
  5263  0C60  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5264  0C61  3E02               	addlw	2
  5265  0C62  0086               	movwf	6
  5266  0C63  0187               	clrf	7
  5267  0C64  0825               	movf	??_I2C2_MasterReadTRBBuild,w
  5268  0C65  0081               	movwf	1
  5269                           
  5270                           ;i2c2.c: 704: ptrb->pbuffer = pdata;
  5271  0C66  0821               	movf	I2C2_MasterReadTRBBuild@pdata,w
  5272  0C67  00A5               	movwf	??_I2C2_MasterReadTRBBuild
  5273  0C68  0827               	movf	I2C2_MasterReadTRBBuild@ptrb,w
  5274  0C69  3E03               	addlw	3
  5275  0C6A  0086               	movwf	6
  5276  0C6B  0187               	clrf	7
  5277  0C6C  0825               	movf	??_I2C2_MasterReadTRBBuild,w
  5278  0C6D  0081               	movwf	1
  5279  0C6E  0008               	return
  5280  0C6F                     __end_of_I2C2_MasterReadTRBBuild:	
  5281                           
  5282                           	psect	text14
  5283  0D74                     __ptext14:	
  5284 ;; *************** function ___lmul *****************
  5285 ;; Defined at:
  5286 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  5287 ;; Parameters:    Size  Location     Type
  5288 ;;  multiplier      4    1[BANK0 ] unsigned long 
  5289 ;;  multiplicand    4    5[BANK0 ] unsigned long 
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;  product         4    9[BANK0 ] unsigned long 
  5292 ;; Return value:  Size  Location     Type
  5293 ;;                  4    1[BANK0 ] unsigned long 
  5294 ;; Registers used:
  5295 ;;		wreg, status,2, status,0
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5301 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5302 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5304 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5305 ;;Total ram usage:       12 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; Hardware stack levels required when called:    5
  5308 ;; This function calls:
  5309 ;;		Nothing
  5310 ;; This function is called by:
  5311 ;;		_inv_handler
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           
  5316                           ;psect for function ___lmul
  5317  0D74                     ___lmul:	
  5318                           
  5319                           ;incstack = 0
  5320                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5321  0D74  3000               	movlw	0
  5322  0D75  0020               	movlb	0	; select bank0
  5323  0D76  00AC               	movwf	___lmul@product+3
  5324  0D77  3000               	movlw	0
  5325  0D78  00AB               	movwf	___lmul@product+2
  5326  0D79  3000               	movlw	0
  5327  0D7A  00AA               	movwf	___lmul@product+1
  5328  0D7B  3000               	movlw	0
  5329  0D7C  00A9               	movwf	___lmul@product
  5330  0D7D                     l4440:	
  5331  0D7D  1C21               	btfss	___lmul@multiplier,0
  5332  0D7E  2D87               	goto	l4444
  5333  0D7F  0825               	movf	___lmul@multiplicand,w
  5334  0D80  07A9               	addwf	___lmul@product,f
  5335  0D81  0826               	movf	___lmul@multiplicand+1,w
  5336  0D82  3DAA               	addwfc	___lmul@product+1,f
  5337  0D83  0827               	movf	___lmul@multiplicand+2,w
  5338  0D84  3DAB               	addwfc	___lmul@product+2,f
  5339  0D85  0828               	movf	___lmul@multiplicand+3,w
  5340  0D86  3DAC               	addwfc	___lmul@product+3,f
  5341  0D87                     l4444:	
  5342  0D87  3001               	movlw	1
  5343  0D88                     u4015:	
  5344  0D88  35A5               	lslf	___lmul@multiplicand,f
  5345  0D89  0DA6               	rlf	___lmul@multiplicand+1,f
  5346  0D8A  0DA7               	rlf	___lmul@multiplicand+2,f
  5347  0D8B  0DA8               	rlf	___lmul@multiplicand+3,f
  5348  0D8C  0B89               	decfsz	9,f
  5349  0D8D  2D88               	goto	u4015
  5350  0D8E  3001               	movlw	1
  5351  0D8F                     u4025:	
  5352  0D8F  36A4               	lsrf	___lmul@multiplier+3,f
  5353  0D90  0CA3               	rrf	___lmul@multiplier+2,f
  5354  0D91  0CA2               	rrf	___lmul@multiplier+1,f
  5355  0D92  0CA1               	rrf	___lmul@multiplier,f
  5356  0D93  0B89               	decfsz	9,f
  5357  0D94  2D8F               	goto	u4025
  5358  0D95  0824               	movf	___lmul@multiplier+3,w
  5359  0D96  0423               	iorwf	___lmul@multiplier+2,w
  5360  0D97  0422               	iorwf	___lmul@multiplier+1,w
  5361  0D98  0421               	iorwf	___lmul@multiplier,w
  5362  0D99  1D03               	skipz
  5363  0D9A  2D7D               	goto	l4440
  5364  0D9B  082C               	movf	___lmul@product+3,w
  5365  0D9C  00A4               	movwf	?___lmul+3
  5366  0D9D  082B               	movf	___lmul@product+2,w
  5367  0D9E  00A3               	movwf	?___lmul+2
  5368  0D9F  082A               	movf	___lmul@product+1,w
  5369  0DA0  00A2               	movwf	?___lmul+1
  5370  0DA1  0829               	movf	___lmul@product,w
  5371  0DA2  00A1               	movwf	?___lmul
  5372  0DA3  0008               	return
  5373  0DA4                     __end_of___lmul:	
  5374                           
  5375                           	psect	text15
  5376  0F7E                     __ptext15:	
  5377 ;; *************** function ___aldiv *****************
  5378 ;; Defined at:
  5379 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;  divisor         4   13[BANK0 ] long 
  5382 ;;  dividend        4   17[BANK0 ] long 
  5383 ;; Auto vars:     Size  Location     Type
  5384 ;;  quotient        4   24[BANK0 ] long 
  5385 ;;  sign            1   23[BANK0 ] unsigned char 
  5386 ;;  counter         1   22[BANK0 ] unsigned char 
  5387 ;; Return value:  Size  Location     Type
  5388 ;;                  4   13[BANK0 ] long 
  5389 ;; Registers used:
  5390 ;;		wreg, status,2, status,0
  5391 ;; Tracked objects:
  5392 ;;		On entry : 0/0
  5393 ;;		On exit  : 0/0
  5394 ;;		Unchanged: 0/0
  5395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5396 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5398 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5399 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5400 ;;Total ram usage:       15 bytes
  5401 ;; Hardware stack levels used:    1
  5402 ;; Hardware stack levels required when called:    5
  5403 ;; This function calls:
  5404 ;;		Nothing
  5405 ;; This function is called by:
  5406 ;;		_inv_handler
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410                           
  5411                           ;psect for function ___aldiv
  5412  0F7E                     ___aldiv:	
  5413                           
  5414                           ;incstack = 0
  5415                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  5416  0F7E  0020               	movlb	0	; select bank0
  5417  0F7F  01B7               	clrf	___aldiv@sign
  5418  0F80  1FB0               	btfss	___aldiv@divisor+3,7
  5419  0F81  2F8F               	goto	l1122
  5420  0F82  09AD               	comf	___aldiv@divisor,f
  5421  0F83  09AE               	comf	___aldiv@divisor+1,f
  5422  0F84  09AF               	comf	___aldiv@divisor+2,f
  5423  0F85  09B0               	comf	___aldiv@divisor+3,f
  5424  0F86  0AAD               	incf	___aldiv@divisor,f
  5425  0F87  1903               	skipnz
  5426  0F88  0AAE               	incf	___aldiv@divisor+1,f
  5427  0F89  1903               	skipnz
  5428  0F8A  0AAF               	incf	___aldiv@divisor+2,f
  5429  0F8B  1903               	skipnz
  5430  0F8C  0AB0               	incf	___aldiv@divisor+3,f
  5431  0F8D  01B7               	clrf	___aldiv@sign
  5432  0F8E  0AB7               	incf	___aldiv@sign,f
  5433  0F8F                     l1122:	
  5434  0F8F  1FB4               	btfss	___aldiv@dividend+3,7
  5435  0F90  2FA0               	goto	l4462
  5436  0F91  09B1               	comf	___aldiv@dividend,f
  5437  0F92  09B2               	comf	___aldiv@dividend+1,f
  5438  0F93  09B3               	comf	___aldiv@dividend+2,f
  5439  0F94  09B4               	comf	___aldiv@dividend+3,f
  5440  0F95  0AB1               	incf	___aldiv@dividend,f
  5441  0F96  1903               	skipnz
  5442  0F97  0AB2               	incf	___aldiv@dividend+1,f
  5443  0F98  1903               	skipnz
  5444  0F99  0AB3               	incf	___aldiv@dividend+2,f
  5445  0F9A  1903               	skipnz
  5446  0F9B  0AB4               	incf	___aldiv@dividend+3,f
  5447  0F9C  3001               	movlw	1
  5448  0F9D  00B5               	movwf	??___aldiv
  5449  0F9E  0835               	movf	??___aldiv,w
  5450  0F9F  06B7               	xorwf	___aldiv@sign,f
  5451  0FA0                     l4462:	
  5452  0FA0  3000               	movlw	0
  5453  0FA1  00BB               	movwf	___aldiv@quotient+3
  5454  0FA2  3000               	movlw	0
  5455  0FA3  00BA               	movwf	___aldiv@quotient+2
  5456  0FA4  3000               	movlw	0
  5457  0FA5  00B9               	movwf	___aldiv@quotient+1
  5458  0FA6  3000               	movlw	0
  5459  0FA7  00B8               	movwf	___aldiv@quotient
  5460  0FA8  0830               	movf	___aldiv@divisor+3,w
  5461  0FA9  042F               	iorwf	___aldiv@divisor+2,w
  5462  0FAA  042E               	iorwf	___aldiv@divisor+1,w
  5463  0FAB  042D               	iorwf	___aldiv@divisor,w
  5464  0FAC  1903               	skipnz
  5465  0FAD  2FE9               	goto	l4484
  5466  0FAE  01B6               	clrf	___aldiv@counter
  5467  0FAF  0AB6               	incf	___aldiv@counter,f
  5468  0FB0                     l4470:	
  5469  0FB0  1BB0               	btfsc	___aldiv@divisor+3,7
  5470  0FB1  2FBE               	goto	l4472
  5471  0FB2  3001               	movlw	1
  5472  0FB3                     u4075:	
  5473  0FB3  35AD               	lslf	___aldiv@divisor,f
  5474  0FB4  0DAE               	rlf	___aldiv@divisor+1,f
  5475  0FB5  0DAF               	rlf	___aldiv@divisor+2,f
  5476  0FB6  0DB0               	rlf	___aldiv@divisor+3,f
  5477  0FB7  0B89               	decfsz	9,f
  5478  0FB8  2FB3               	goto	u4075
  5479  0FB9  3001               	movlw	1
  5480  0FBA  00B5               	movwf	??___aldiv
  5481  0FBB  0835               	movf	??___aldiv,w
  5482  0FBC  07B6               	addwf	___aldiv@counter,f
  5483  0FBD  2FB0               	goto	l4470
  5484  0FBE                     l4472:	
  5485  0FBE  3001               	movlw	1
  5486  0FBF                     u4095:	
  5487  0FBF  35B8               	lslf	___aldiv@quotient,f
  5488  0FC0  0DB9               	rlf	___aldiv@quotient+1,f
  5489  0FC1  0DBA               	rlf	___aldiv@quotient+2,f
  5490  0FC2  0DBB               	rlf	___aldiv@quotient+3,f
  5491  0FC3  0B89               	decfsz	9,f
  5492  0FC4  2FBF               	goto	u4095
  5493  0FC5  0830               	movf	___aldiv@divisor+3,w
  5494  0FC6  0234               	subwf	___aldiv@dividend+3,w
  5495  0FC7  1D03               	skipz
  5496  0FC8  2FD3               	goto	u4105
  5497  0FC9  082F               	movf	___aldiv@divisor+2,w
  5498  0FCA  0233               	subwf	___aldiv@dividend+2,w
  5499  0FCB  1D03               	skipz
  5500  0FCC  2FD3               	goto	u4105
  5501  0FCD  082E               	movf	___aldiv@divisor+1,w
  5502  0FCE  0232               	subwf	___aldiv@dividend+1,w
  5503  0FCF  1D03               	skipz
  5504  0FD0  2FD3               	goto	u4105
  5505  0FD1  082D               	movf	___aldiv@divisor,w
  5506  0FD2  0231               	subwf	___aldiv@dividend,w
  5507  0FD3                     u4105:	
  5508  0FD3  1C03               	skipc
  5509  0FD4  2FDE               	goto	l4480
  5510  0FD5  082D               	movf	___aldiv@divisor,w
  5511  0FD6  02B1               	subwf	___aldiv@dividend,f
  5512  0FD7  082E               	movf	___aldiv@divisor+1,w
  5513  0FD8  3BB2               	subwfb	___aldiv@dividend+1,f
  5514  0FD9  082F               	movf	___aldiv@divisor+2,w
  5515  0FDA  3BB3               	subwfb	___aldiv@dividend+2,f
  5516  0FDB  0830               	movf	___aldiv@divisor+3,w
  5517  0FDC  3BB4               	subwfb	___aldiv@dividend+3,f
  5518  0FDD  1438               	bsf	___aldiv@quotient,0
  5519  0FDE                     l4480:	
  5520  0FDE  3001               	movlw	1
  5521  0FDF                     u4115:	
  5522  0FDF  36B0               	lsrf	___aldiv@divisor+3,f
  5523  0FE0  0CAF               	rrf	___aldiv@divisor+2,f
  5524  0FE1  0CAE               	rrf	___aldiv@divisor+1,f
  5525  0FE2  0CAD               	rrf	___aldiv@divisor,f
  5526  0FE3  0B89               	decfsz	9,f
  5527  0FE4  2FDF               	goto	u4115
  5528  0FE5  3001               	movlw	1
  5529  0FE6  02B6               	subwf	___aldiv@counter,f
  5530  0FE7  1D03               	btfss	3,2
  5531  0FE8  2FBE               	goto	l4472
  5532  0FE9                     l4484:	
  5533  0FE9  0837               	movf	___aldiv@sign,w
  5534  0FEA  1903               	btfsc	3,2
  5535  0FEB  2FF7               	goto	l4488
  5536  0FEC  09B8               	comf	___aldiv@quotient,f
  5537  0FED  09B9               	comf	___aldiv@quotient+1,f
  5538  0FEE  09BA               	comf	___aldiv@quotient+2,f
  5539  0FEF  09BB               	comf	___aldiv@quotient+3,f
  5540  0FF0  0AB8               	incf	___aldiv@quotient,f
  5541  0FF1  1903               	skipnz
  5542  0FF2  0AB9               	incf	___aldiv@quotient+1,f
  5543  0FF3  1903               	skipnz
  5544  0FF4  0ABA               	incf	___aldiv@quotient+2,f
  5545  0FF5  1903               	skipnz
  5546  0FF6  0ABB               	incf	___aldiv@quotient+3,f
  5547  0FF7                     l4488:	
  5548  0FF7  083B               	movf	___aldiv@quotient+3,w
  5549  0FF8  00B0               	movwf	?___aldiv+3
  5550  0FF9  083A               	movf	___aldiv@quotient+2,w
  5551  0FFA  00AF               	movwf	?___aldiv+2
  5552  0FFB  0839               	movf	___aldiv@quotient+1,w
  5553  0FFC  00AE               	movwf	?___aldiv+1
  5554  0FFD  0838               	movf	___aldiv@quotient,w
  5555  0FFE  00AD               	movwf	?___aldiv
  5556  0FFF  0008               	return
  5557  1000                     __end_of___aldiv:	
  5558                           
  5559                           	psect	text16
  5560  0EAF                     __ptext16:	
  5561 ;; *************** function _PROTOCOL_I2C_Send_int8_t *****************
  5562 ;; Defined at:
  5563 ;;		line 296 in file "protocol.c"
  5564 ;; Parameters:    Size  Location     Type
  5565 ;;  length          1    wreg     unsigned char 
  5566 ;;  pbuffer         1   35[BANK0 ] PTR char 
  5567 ;;		 -> PROTOCOL_Send_int8_t@pbuf(1), inv_handler@data(2), 
  5568 ;; Auto vars:     Size  Location     Type
  5569 ;;  length          1   38[BANK0 ] unsigned char 
  5570 ;; Return value:  Size  Location     Type
  5571 ;;                  1    wreg      void 
  5572 ;; Registers used:
  5573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5574 ;; Tracked objects:
  5575 ;;		On entry : 0/0
  5576 ;;		On exit  : 0/0
  5577 ;;		Unchanged: 0/0
  5578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5579 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5580 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5581 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5582 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5583 ;;Total ram usage:        4 bytes
  5584 ;; Hardware stack levels used:    1
  5585 ;; Hardware stack levels required when called:    8
  5586 ;; This function calls:
  5587 ;;		_PROTOCOL_I2C_Set_TLV
  5588 ;;		_printf
  5589 ;; This function is called by:
  5590 ;;		_inv_handler
  5591 ;; This function uses a non-reentrant model
  5592 ;;
  5593                           
  5594                           
  5595                           ;psect for function _PROTOCOL_I2C_Send_int8_t
  5596  0EAF                     _PROTOCOL_I2C_Send_int8_t:	
  5597                           
  5598                           ;incstack = 0
  5599                           ; Regs used in _PROTOCOL_I2C_Send_int8_t: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5600                           ;PROTOCOL_I2C_Send_int8_t@length stored from wreg
  5601  0EAF  0020               	movlb	0	; select bank0
  5602  0EB0  00C6               	movwf	PROTOCOL_I2C_Send_int8_t@length
  5603                           
  5604                           ;protocol.c: 297: if (backplane_slave_enabled) {
  5605  0EB1  0021               	movlb	1	; select bank1
  5606  0EB2  083A               	movf	_backplane_slave_enabled^(0+128),w
  5607  0EB3  1903               	btfsc	3,2
  5608  0EB4  2EDB               	goto	l4426
  5609                           
  5610                           ;protocol.c: 298: for (i=0; i<length; i++) {
  5611  0EB5  0020               	movlb	0	; select bank0
  5612  0EB6  01DF               	clrf	_i
  5613  0EB7                     l4422:	
  5614  0EB7  0846               	movf	PROTOCOL_I2C_Send_int8_t@length,w
  5615  0EB8  025F               	subwf	_i,w
  5616  0EB9  1803               	btfsc	3,0
  5617  0EBA  2ECF               	goto	l4424
  5618                           
  5619                           ;protocol.c: 299: sendbuf[i] = (uint8_t)pbuffer[i];
  5620  0EBB  085F               	movf	_i,w
  5621  0EBC  0743               	addwf	PROTOCOL_I2C_Send_int8_t@pbuffer,w
  5622  0EBD  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5623  0EBE  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5624  0EBF  0086               	movwf	6
  5625  0EC0  0187               	clrf	7
  5626  0EC1  0801               	movf	1,w
  5627  0EC2  00C5               	movwf	??_PROTOCOL_I2C_Send_int8_t+1
  5628  0EC3  085F               	movf	_i,w
  5629  0EC4  3E50               	addlw	(low (_sendbuf| (0+256)))& (0+255)
  5630  0EC5  0086               	movwf	6
  5631  0EC6  3001               	movlw	1	; select bank2/3
  5632  0EC7  0087               	movwf	7
  5633  0EC8  0845               	movf	??_PROTOCOL_I2C_Send_int8_t+1,w
  5634  0EC9  0081               	movwf	1
  5635  0ECA  3001               	movlw	1
  5636  0ECB  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5637  0ECC  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5638  0ECD  07DF               	addwf	_i,f
  5639  0ECE  2EB7               	goto	l4422
  5640  0ECF                     l4424:	
  5641                           
  5642                           ;protocol.c: 300: }
  5643                           ;protocol.c: 301: PROTOCOL_I2C_Set_TLV(0x02, length, &sendbuf[0]);
  5644  0ECF  0846               	movf	PROTOCOL_I2C_Send_int8_t@length,w
  5645  0ED0  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5646  0ED1  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5647  0ED2  00A1               	movwf	PROTOCOL_I2C_Set_TLV@length
  5648  0ED3  3050               	movlw	low _sendbuf
  5649  0ED4  00A2               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer
  5650  0ED5  3001               	movlw	high _sendbuf
  5651  0ED6  00A3               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer+1
  5652  0ED7  3002               	movlw	2
  5653  0ED8  318B  2391         	fcall	_PROTOCOL_I2C_Set_TLV
  5654                           
  5655                           ;protocol.c: 302: } else {
  5656  0EDA  0008               	return
  5657  0EDB                     l4426:	
  5658                           
  5659                           ;protocol.c: 303: length--;
  5660  0EDB  3001               	movlw	1
  5661  0EDC  0020               	movlb	0	; select bank0
  5662  0EDD  02C6               	subwf	PROTOCOL_I2C_Send_int8_t@length,f
  5663                           
  5664                           ;protocol.c: 304: for (i=0; i<length; i++) printf("%d,", (int8_t)pbuffer[i]);
  5665  0EDE  01DF               	clrf	_i
  5666  0EDF                     l4434:	
  5667  0EDF  0846               	movf	PROTOCOL_I2C_Send_int8_t@length,w
  5668  0EE0  025F               	subwf	_i,w
  5669  0EE1  1803               	btfsc	3,0
  5670  0EE2  2EFB               	goto	l4436
  5671  0EE3  308B               	movlw	low (STR_22| (0+32768))
  5672  0EE4  00AF               	movwf	printf@f
  5673  0EE5  3087               	movlw	high (STR_22| (0+32768))
  5674  0EE6  00B0               	movwf	printf@f+1
  5675  0EE7  085F               	movf	_i,w
  5676  0EE8  0743               	addwf	PROTOCOL_I2C_Send_int8_t@pbuffer,w
  5677  0EE9  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5678  0EEA  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5679  0EEB  0086               	movwf	6
  5680  0EEC  0187               	clrf	7
  5681  0EED  0801               	movf	1,w
  5682  0EEE  00B1               	movwf	?_printf+2
  5683  0EEF  01B2               	clrf	?_printf+3
  5684  0EF0  1BB1               	btfsc	?_printf+2,7
  5685  0EF1  03B2               	decf	?_printf+3,f
  5686  0EF2  3180  2081  318E   	fcall	_printf
  5687  0EF5  3001               	movlw	1
  5688  0EF6  0020               	movlb	0	; select bank0
  5689  0EF7  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5690  0EF8  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5691  0EF9  07DF               	addwf	_i,f
  5692  0EFA  2EDF               	goto	l4434
  5693  0EFB                     l4436:	
  5694                           
  5695                           ;protocol.c: 305: printf("%d\n", (int8_t)pbuffer[i]);
  5696  0EFB  3014               	movlw	low ((STR_16+6)| (0+32768))
  5697  0EFC  00AF               	movwf	printf@f
  5698  0EFD  3087               	movlw	high ((STR_16+6)| (0+32768))
  5699  0EFE  00B0               	movwf	printf@f+1
  5700  0EFF  085F               	movf	_i,w
  5701  0F00  0743               	addwf	PROTOCOL_I2C_Send_int8_t@pbuffer,w
  5702  0F01  00C4               	movwf	??_PROTOCOL_I2C_Send_int8_t
  5703  0F02  0844               	movf	??_PROTOCOL_I2C_Send_int8_t,w
  5704  0F03  0086               	movwf	6
  5705  0F04  0187               	clrf	7
  5706  0F05  0801               	movf	1,w
  5707  0F06  00B1               	movwf	?_printf+2
  5708  0F07  01B2               	clrf	?_printf+3
  5709  0F08  1BB1               	btfsc	?_printf+2,7
  5710  0F09  03B2               	decf	?_printf+3,f
  5711  0F0A  3180  2081         	fcall	_printf
  5712  0F0C  0008               	return
  5713  0F0D                     __end_of_PROTOCOL_I2C_Send_int8_t:	
  5714                           
  5715                           	psect	text17
  5716  0081                     __ptext17:	
  5717 ;; *************** function _printf *****************
  5718 ;; Defined at:
  5719 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5720 ;; Parameters:    Size  Location     Type
  5721 ;;  f               2   15[BANK0 ] PTR const unsigned char 
  5722 ;;		 -> STR_48(10), STR_47(9), STR_46(10), STR_45(9), 
  5723 ;;		 -> STR_44(4), STR_43(4), STR_42(4), STR_41(4), 
  5724 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_37(4), 
  5725 ;;		 -> STR_36(14), STR_35(9), STR_34(10), STR_33(9), 
  5726 ;;		 -> STR_32(10), STR_31(9), STR_30(7), STR_29(4), 
  5727 ;;		 -> STR_28(4), STR_27(9), STR_26(4), STR_25(4), 
  5728 ;;		 -> STR_24(10), STR_23(4), STR_22(4), STR_21(8), 
  5729 ;;		 -> STR_20(4), STR_19(4), STR_18(9), STR_17(6), 
  5730 ;;		 -> STR_16(10), STR_13(10), STR_9(10), STR_5(10), 
  5731 ;;		 -> STR_3(5), 
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;  tmpval          4    0        struct .
  5734 ;;  width           2   32[BANK0 ] int 
  5735 ;;  len             2   29[BANK0 ] unsigned int 
  5736 ;;  val             2   27[BANK0 ] unsigned int 
  5737 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  5738 ;;		 -> STR_10(4), buf(48), STR_2(7), ROM(8192), 
  5739 ;;		 -> printf@c(1), STR_1(8), I2C2_ISR@i2c_address(2), 
  5740 ;;  c               1   34[BANK0 ] char 
  5741 ;;  flag            1   31[BANK0 ] unsigned char 
  5742 ;;  ap              1   26[BANK0 ] PTR void [1]
  5743 ;;		 -> ?_printf(2), 
  5744 ;;  prec            1   23[BANK0 ] char 
  5745 ;; Return value:  Size  Location     Type
  5746 ;;                  2   15[BANK0 ] int 
  5747 ;; Registers used:
  5748 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5749 ;; Tracked objects:
  5750 ;;		On entry : 0/0
  5751 ;;		On exit  : 0/0
  5752 ;;		Unchanged: 0/0
  5753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5754 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5755 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5756 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5757 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5758 ;;Total ram usage:       20 bytes
  5759 ;; Hardware stack levels used:    1
  5760 ;; Hardware stack levels required when called:    7
  5761 ;; This function calls:
  5762 ;;		___lwdiv
  5763 ;;		___lwmod
  5764 ;;		___wmul
  5765 ;;		_isdigit
  5766 ;;		_putch
  5767 ;; This function is called by:
  5768 ;;		_PROTOCOL_Loop
  5769 ;;		_PROTOCOL_I2C_Send_int8_t
  5770 ;; This function uses a non-reentrant model
  5771 ;;
  5772                           
  5773                           
  5774                           ;psect for function _printf
  5775  0081                     _printf:	
  5776                           
  5777                           ;doprnt.c: 466: va_list ap;
  5778                           ;doprnt.c: 499: signed char c;
  5779                           ;doprnt.c: 501: int width;
  5780                           ;doprnt.c: 506: signed char prec;
  5781                           ;doprnt.c: 508: unsigned char flag;
  5782                           ;doprnt.c: 523: union {
  5783                           ;doprnt.c: 524: unsigned long vd;
  5784                           ;doprnt.c: 525: double integ;
  5785                           ;doprnt.c: 526: } tmpval;
  5786                           ;doprnt.c: 528: unsigned int val;
  5787                           ;doprnt.c: 529: unsigned len;
  5788                           ;doprnt.c: 530: const char * cp;
  5789                           ;doprnt.c: 533: *ap = __va_start();
  5790                           
  5791                           ;incstack = 0
  5792                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5793  0081  3031               	movlw	(low ((?_printf| 0+2)))& (0+255)
  5794  0082  0020               	movlb	0	; select bank0
  5795  0083  00B3               	movwf	??_printf
  5796  0084  0833               	movf	??_printf,w
  5797  0085  00BA               	movwf	printf@ap
  5798  0086                     l4328:	
  5799                           ;doprnt.c: 536: while(c = *f++) {
  5800                           
  5801  0086  0020               	movlb	0	; select bank0
  5802  0087  0830               	movf	printf@f+1,w
  5803  0088  00B4               	movwf	??_printf+1
  5804  0089  082F               	movf	printf@f,w
  5805  008A  00B3               	movwf	??_printf
  5806  008B  0AAF               	incf	printf@f,f
  5807  008C  1903               	skipnz
  5808  008D  0AB0               	incf	printf@f+1,f
  5809  008E  0833               	movf	??_printf,w
  5810  008F  0084               	movwf	4
  5811  0090  0834               	movf	??_printf+1,w
  5812  0091  0085               	movwf	5
  5813  0092  0800               	movf	0,w	;code access
  5814  0093  00B5               	movwf	??_printf+2
  5815  0094  0835               	movf	??_printf+2,w
  5816  0095  00C2               	movwf	printf@c
  5817  0096  0842               	movf	printf@c,w
  5818  0097  1903               	btfsc	3,2
  5819  0098  0008               	return
  5820                           
  5821                           ;doprnt.c: 538: if(c != '%')
  5822  0099  3025               	movlw	37
  5823  009A  0642               	xorwf	printf@c,w
  5824  009B  1903               	btfsc	3,2
  5825  009C  28A2               	goto	l4204
  5826                           
  5827                           ;doprnt.c: 540: {
  5828                           ;doprnt.c: 541: (putch(c) );
  5829  009D  0842               	movf	printf@c,w
  5830  009E  3189  21D8  3180   	fcall	_putch
  5831                           
  5832                           ;doprnt.c: 542: continue;
  5833  00A1  2886               	goto	l4328
  5834  00A2                     l4204:	
  5835                           
  5836                           ;doprnt.c: 543: }
  5837                           ;doprnt.c: 546: width = 0;
  5838  00A2  0020               	movlb	0	; select bank0
  5839  00A3  01C0               	clrf	printf@width
  5840  00A4  01C1               	clrf	printf@width+1
  5841                           
  5842                           ;doprnt.c: 548: flag = 0;
  5843  00A5  01BF               	clrf	printf@flag
  5844                           
  5845                           ;doprnt.c: 551: switch(*f) {
  5846                           
  5847                           ;doprnt.c: 550: for(;;) {
  5848  00A6  28AC               	goto	l4210
  5849  00A7                     l570:	
  5850                           ;doprnt.c: 579: case '0':
  5851                           
  5852                           
  5853                           ;doprnt.c: 580: flag |= 0x04;
  5854  00A7  153F               	bsf	printf@flag,2
  5855                           
  5856                           ;doprnt.c: 581: f++;
  5857  00A8  3001               	movlw	1
  5858  00A9  07AF               	addwf	printf@f,f
  5859  00AA  3000               	movlw	0
  5860  00AB  3DB0               	addwfc	printf@f+1,f
  5861  00AC                     l4210:	
  5862                           ;doprnt.c: 584: }
  5863                           
  5864                           ;doprnt.c: 582: continue;
  5865                           
  5866  00AC  082F               	movf	printf@f,w
  5867  00AD  0084               	movwf	4
  5868  00AE  0830               	movf	printf@f+1,w
  5869  00AF  0085               	movwf	5
  5870  00B0  0800               	movf	0,w	;code access
  5871                           
  5872                           ; Switch size 1, requested type "space"
  5873                           ; Number of cases is 1, Range of values is 48 to 48
  5874                           ; switch strategies available:
  5875                           ; Name         Instructions Cycles
  5876                           ; simple_byte            4     3 (average)
  5877                           ; direct_byte           11     9 (fixed)
  5878                           ; jumptable            263     9 (fixed)
  5879                           ;	Chosen strategy is simple_byte
  5880  00B1  3A30               	xorlw	48	; case 48
  5881  00B2  1903               	skipnz
  5882  00B3  28A7               	goto	l570
  5883  00B4  28B5               	goto	l4212
  5884  00B5                     l4212:	
  5885                           ;doprnt.c: 586: }
  5886                           
  5887                           ;doprnt.c: 585: break;
  5888                           
  5889                           
  5890                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5891  00B5  082F               	movf	printf@f,w
  5892  00B6  0084               	movwf	4
  5893  00B7  0830               	movf	printf@f+1,w
  5894  00B8  0085               	movwf	5
  5895  00B9  0800               	movf	0,w	;code access
  5896  00BA  318A  221B  3180   	fcall	_isdigit
  5897  00BD  1C03               	btfss	3,0
  5898  00BE  2956               	goto	l4260
  5899                           
  5900                           ;doprnt.c: 598: width = 0;
  5901  00BF  0020               	movlb	0	; select bank0
  5902  00C0  01C0               	clrf	printf@width
  5903  00C1  01C1               	clrf	printf@width+1
  5904  00C2                     l4216:	
  5905                           ;doprnt.c: 599: do {
  5906                           
  5907                           
  5908                           ;doprnt.c: 600: width *= 10;
  5909  00C2  300A               	movlw	10
  5910  00C3  0020               	movlb	0	; select bank0
  5911  00C4  00A1               	movwf	___wmul@multiplier
  5912  00C5  3000               	movlw	0
  5913  00C6  00A2               	movwf	___wmul@multiplier+1
  5914  00C7  0841               	movf	printf@width+1,w
  5915  00C8  00A4               	movwf	___wmul@multiplicand+1
  5916  00C9  0840               	movf	printf@width,w
  5917  00CA  00A3               	movwf	___wmul@multiplicand
  5918  00CB  318A  22DA  3180   	fcall	___wmul
  5919  00CE  0020               	movlb	0	; select bank0
  5920  00CF  0822               	movf	?___wmul+1,w
  5921  00D0  00C1               	movwf	printf@width+1
  5922  00D1  0821               	movf	?___wmul,w
  5923  00D2  00C0               	movwf	printf@width
  5924                           
  5925                           ;doprnt.c: 601: width += *f++ - '0';
  5926  00D3  082F               	movf	printf@f,w
  5927  00D4  0084               	movwf	4
  5928  00D5  0830               	movf	printf@f+1,w
  5929  00D6  0085               	movwf	5
  5930  00D7  0800               	movf	0,w	;code access
  5931  00D8  3ED0               	addlw	208
  5932  00D9  00B3               	movwf	??_printf
  5933  00DA  30FF               	movlw	255
  5934  00DB  1803               	skipnc
  5935  00DC  3000               	movlw	0
  5936  00DD  00B4               	movwf	??_printf+1
  5937  00DE  0833               	movf	??_printf,w
  5938  00DF  07C0               	addwf	printf@width,f
  5939  00E0  0834               	movf	??_printf+1,w
  5940  00E1  3DC1               	addwfc	printf@width+1,f
  5941  00E2  3001               	movlw	1
  5942  00E3  07AF               	addwf	printf@f,f
  5943  00E4  3000               	movlw	0
  5944  00E5  3DB0               	addwfc	printf@f+1,f
  5945                           
  5946                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5947  00E6  082F               	movf	printf@f,w
  5948  00E7  0084               	movwf	4
  5949  00E8  0830               	movf	printf@f+1,w
  5950  00E9  0085               	movwf	5
  5951  00EA  0800               	movf	0,w	;code access
  5952  00EB  318A  221B  3180   	fcall	_isdigit
  5953  00EE  1C03               	btfss	3,0
  5954  00EF  2956               	goto	l4260
  5955  00F0  28C2               	goto	l4216
  5956  00F1                     l4224:	
  5957                           ;doprnt.c: 728: case 's':
  5958                           
  5959                           ;doprnt.c: 698: case 'i':
  5960                           ;doprnt.c: 699: break;
  5961                           
  5962                           ;doprnt.c: 697: case 'd':
  5963                           
  5964                           ;doprnt.c: 638: goto alldone;
  5965                           
  5966                           ;doprnt.c: 637: case 0:
  5967                           
  5968                           ;doprnt.c: 608: }
  5969                           ;doprnt.c: 635: switch(c = *f++) {
  5970                           
  5971                           
  5972                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5973  00F1  0020               	movlb	0	; select bank0
  5974  00F2  083A               	movf	printf@ap,w
  5975  00F3  0086               	movwf	6
  5976  00F4  0187               	clrf	7
  5977  00F5  3F40               	moviw [0]fsr1
  5978  00F6  00B8               	movwf	printf@cp
  5979  00F7  3F41               	moviw [1]fsr1
  5980  00F8  00B9               	movwf	printf@cp+1
  5981  00F9  3002               	movlw	2
  5982  00FA  00B3               	movwf	??_printf
  5983  00FB  0833               	movf	??_printf,w
  5984  00FC  07BA               	addwf	printf@ap,f
  5985                           
  5986                           ;doprnt.c: 740: if(!cp)
  5987  00FD  0838               	movf	printf@cp,w
  5988  00FE  0439               	iorwf	printf@cp+1,w
  5989  00FF  1D03               	btfss	3,2
  5990  0100  2905               	goto	l4232
  5991                           
  5992                           ;doprnt.c: 741: cp = "(null)";
  5993  0101  3075               	movlw	low (STR_2| (0+32768))
  5994  0102  00B8               	movwf	printf@cp
  5995  0103  3087               	movlw	high (STR_2| (0+32768))
  5996  0104  00B9               	movwf	printf@cp+1
  5997  0105                     l4232:	
  5998                           
  5999                           ;doprnt.c: 745: len = 0;
  6000  0105  01BD               	clrf	printf@len
  6001  0106  01BE               	clrf	printf@len+1
  6002  0107                     l4236:	
  6003                           ;doprnt.c: 746: while(cp[len])
  6004                           
  6005  0107  0838               	movf	printf@cp,w
  6006  0108  073D               	addwf	printf@len,w
  6007  0109  0084               	movwf	4
  6008  010A  0839               	movf	printf@cp+1,w
  6009  010B  3D3E               	addwfc	printf@len+1,w
  6010  010C  0085               	movwf	5
  6011  010D  0012               	moviw fsr0++
  6012  010E  1903               	btfsc	3,2
  6013  010F  2915               	goto	l4238
  6014                           
  6015                           ;doprnt.c: 747: len++;
  6016  0110  3001               	movlw	1
  6017  0111  07BD               	addwf	printf@len,f
  6018  0112  3000               	movlw	0
  6019  0113  3DBE               	addwfc	printf@len+1,f
  6020  0114  2907               	goto	l4236
  6021  0115                     l4238:	
  6022                           ;doprnt.c: 750: dostring:
  6023                           
  6024                           
  6025                           ;doprnt.c: 757: if(width > len)
  6026  0115  0841               	movf	printf@width+1,w
  6027  0116  023E               	subwf	printf@len+1,w
  6028  0117  1D03               	skipz
  6029  0118  291B               	goto	u3655
  6030  0119  0840               	movf	printf@width,w
  6031  011A  023D               	subwf	printf@len,w
  6032  011B                     u3655:	
  6033  011B  1803               	skipnc
  6034  011C  2922               	goto	l4242
  6035                           
  6036                           ;doprnt.c: 758: width -= len;
  6037  011D  083D               	movf	printf@len,w
  6038  011E  02C0               	subwf	printf@width,f
  6039  011F  083E               	movf	printf@len+1,w
  6040  0120  3BC1               	subwfb	printf@width+1,f
  6041  0121  2924               	goto	l4246
  6042  0122                     l4242:	
  6043                           
  6044                           ;doprnt.c: 759: else
  6045                           ;doprnt.c: 760: width = 0;
  6046  0122  01C0               	clrf	printf@width
  6047  0123  01C1               	clrf	printf@width+1
  6048  0124                     l4246:	
  6049                           ;doprnt.c: 764: while(width--)
  6050                           
  6051  0124  30FF               	movlw	255
  6052  0125  0020               	movlb	0	; select bank0
  6053  0126  07C0               	addwf	printf@width,f
  6054  0127  30FF               	movlw	255
  6055  0128  3DC1               	addwfc	printf@width+1,f
  6056  0129  0A40               	incf	printf@width,w
  6057  012A  1903               	btfsc	3,2
  6058  012B  0A41               	incf	printf@width+1,w
  6059  012C  1903               	btfsc	3,2
  6060  012D  2940               	goto	l4252
  6061                           
  6062                           ;doprnt.c: 765: (putch(' ') );
  6063  012E  3020               	movlw	32
  6064  012F  3189  21D8  3180   	fcall	_putch
  6065  0132  2924               	goto	l4246
  6066  0133                     l4248:	
  6067                           ;doprnt.c: 767: while(len--)
  6068                           
  6069                           
  6070                           ;doprnt.c: 768: (putch(*cp++) );
  6071  0133  0838               	movf	printf@cp,w
  6072  0134  0084               	movwf	4
  6073  0135  0839               	movf	printf@cp+1,w
  6074  0136  0085               	movwf	5
  6075  0137  0800               	movf	0,w	;code access
  6076  0138  3189  21D8  3180   	fcall	_putch
  6077  013B  3001               	movlw	1
  6078  013C  0020               	movlb	0	; select bank0
  6079  013D  07B8               	addwf	printf@cp,f
  6080  013E  3000               	movlw	0
  6081  013F  3DB9               	addwfc	printf@cp+1,f
  6082  0140                     l4252:	
  6083  0140  3001               	movlw	1
  6084  0141  02BD               	subwf	printf@len,f
  6085  0142  3000               	movlw	0
  6086  0143  3BBE               	subwfb	printf@len+1,f
  6087  0144  0A3D               	incf	printf@len,w
  6088  0145  1D03               	skipz
  6089  0146  2933               	goto	l4248
  6090  0147  0A3E               	incf	printf@len+1,w
  6091  0148  1903               	btfsc	3,2
  6092  0149  2886               	goto	l4328
  6093  014A  2933               	goto	l4248
  6094  014B                     l4254:	
  6095                           ;doprnt.c: 802: default:
  6096                           
  6097                           ;doprnt.c: 774: continue;
  6098                           
  6099                           
  6100                           ;doprnt.c: 805: cp = (char *)&c;
  6101  014B  3042               	movlw	low printf@c
  6102  014C  00B8               	movwf	printf@cp
  6103  014D  3000               	movlw	high printf@c
  6104  014E  00B9               	movwf	printf@cp+1
  6105                           
  6106                           ;doprnt.c: 806: len = 1;
  6107  014F  3001               	movlw	1
  6108  0150  00BD               	movwf	printf@len
  6109  0151  3000               	movlw	0
  6110  0152  00BE               	movwf	printf@len+1
  6111                           
  6112                           ;doprnt.c: 807: goto dostring;
  6113  0153  2915               	goto	l4238
  6114  0154                     l598:	
  6115                           ;doprnt.c: 817: case 'u':
  6116                           
  6117                           
  6118                           ;doprnt.c: 818: flag |= 0x40;
  6119  0154  173F               	bsf	printf@flag,6
  6120                           
  6121                           ;doprnt.c: 822: }
  6122                           
  6123                           ;doprnt.c: 819: break;
  6124  0155  2974               	goto	l582
  6125  0156                     l4260:	
  6126  0156  0020               	movlb	0	; select bank0
  6127  0157  0830               	movf	printf@f+1,w
  6128  0158  00B4               	movwf	??_printf+1
  6129  0159  082F               	movf	printf@f,w
  6130  015A  00B3               	movwf	??_printf
  6131  015B  0AAF               	incf	printf@f,f
  6132  015C  1903               	skipnz
  6133  015D  0AB0               	incf	printf@f+1,f
  6134  015E  0833               	movf	??_printf,w
  6135  015F  0084               	movwf	4
  6136  0160  0834               	movf	??_printf+1,w
  6137  0161  0085               	movwf	5
  6138  0162  0800               	movf	0,w	;code access
  6139  0163  00C2               	movwf	printf@c
  6140                           
  6141                           ; Switch size 1, requested type "space"
  6142                           ; Number of cases is 5, Range of values is 0 to 117
  6143                           ; switch strategies available:
  6144                           ; Name         Instructions Cycles
  6145                           ; simple_byte           16     9 (average)
  6146                           ; direct_byte          242     6 (fixed)
  6147                           ; jumptable            260     6 (fixed)
  6148                           ;	Chosen strategy is simple_byte
  6149  0164  3A00               	xorlw	0	; case 0
  6150  0165  1903               	skipnz
  6151  0166  2A55               	goto	l622
  6152  0167  3A64               	xorlw	100	; case 100
  6153  0168  1903               	skipnz
  6154  0169  2974               	goto	l582
  6155  016A  3A0D               	xorlw	13	; case 105
  6156  016B  1903               	skipnz
  6157  016C  2974               	goto	l582
  6158  016D  3A1A               	xorlw	26	; case 115
  6159  016E  1903               	skipnz
  6160  016F  28F1               	goto	l4224
  6161  0170  3A06               	xorlw	6	; case 117
  6162  0171  1903               	skipnz
  6163  0172  2954               	goto	l598
  6164  0173  294B               	goto	l4254
  6165  0174                     l582:	
  6166                           
  6167                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  6168  0174  0020               	movlb	0	; select bank0
  6169  0175  1B3F               	btfsc	printf@flag,6
  6170  0176  298E               	goto	l4272
  6171                           
  6172                           ;doprnt.c: 1253: {
  6173                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6174  0177  083A               	movf	printf@ap,w
  6175  0178  0086               	movwf	6
  6176  0179  0187               	clrf	7
  6177  017A  3F40               	moviw [0]fsr1
  6178  017B  00BB               	movwf	printf@val
  6179  017C  3F41               	moviw [1]fsr1
  6180  017D  00BC               	movwf	printf@val+1
  6181  017E  3002               	movlw	2
  6182  017F  00B3               	movwf	??_printf
  6183  0180  0833               	movf	??_printf,w
  6184  0181  07BA               	addwf	printf@ap,f
  6185                           
  6186                           ;doprnt.c: 1261: if((int)val < 0) {
  6187  0182  1FBC               	btfss	printf@val+1,7
  6188  0183  2999               	goto	l4276
  6189                           
  6190                           ;doprnt.c: 1262: flag |= 0x03;
  6191  0184  3003               	movlw	3
  6192  0185  00B3               	movwf	??_printf
  6193  0186  0833               	movf	??_printf,w
  6194  0187  04BF               	iorwf	printf@flag,f
  6195                           
  6196                           ;doprnt.c: 1263: val = -val;
  6197  0188  09BB               	comf	printf@val,f
  6198  0189  09BC               	comf	printf@val+1,f
  6199  018A  0ABB               	incf	printf@val,f
  6200  018B  1903               	skipnz
  6201  018C  0ABC               	incf	printf@val+1,f
  6202                           
  6203                           ;doprnt.c: 1264: }
  6204                           ;doprnt.c: 1266: }
  6205  018D  2999               	goto	l4276
  6206  018E                     l4272:	
  6207                           
  6208                           ;doprnt.c: 1268: else
  6209                           ;doprnt.c: 1273: {
  6210                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6211  018E  083A               	movf	printf@ap,w
  6212  018F  0086               	movwf	6
  6213  0190  0187               	clrf	7
  6214  0191  3F40               	moviw [0]fsr1
  6215  0192  00BB               	movwf	printf@val
  6216  0193  3F41               	moviw [1]fsr1
  6217  0194  00BC               	movwf	printf@val+1
  6218  0195  3002               	movlw	2
  6219  0196  00B3               	movwf	??_printf
  6220  0197  0833               	movf	??_printf,w
  6221  0198  07BA               	addwf	printf@ap,f
  6222  0199                     l4276:	
  6223                           
  6224                           ;doprnt.c: 1287: }
  6225                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6226  0199  01C2               	clrf	printf@c
  6227  019A  0AC2               	incf	printf@c,f
  6228  019B  3005               	movlw	5
  6229  019C  0642               	xorwf	printf@c,w
  6230  019D  1903               	btfsc	3,2
  6231  019E  29BE               	goto	l4288
  6232  019F                     l4282:	
  6233                           
  6234                           ;doprnt.c: 1306: if(val < dpowers[c])
  6235  019F  0842               	movf	printf@c,w
  6236  01A0  00B3               	movwf	??_printf
  6237  01A1  01B4               	clrf	??_printf+1
  6238  01A2  35B3               	lslf	??_printf,f
  6239  01A3  0DB4               	rlf	??_printf+1,f
  6240  01A4  30F6               	movlw	low (_dpowers| (0+32768))
  6241  01A5  0733               	addwf	??_printf,w
  6242  01A6  0084               	movwf	4
  6243  01A7  3086               	movlw	high (_dpowers| (0+32768))
  6244  01A8  3D34               	addwfc	??_printf+1,w
  6245  01A9  0085               	movwf	5
  6246  01AA  3F00               	moviw [0]fsr0
  6247  01AB  00B5               	movwf	??_printf+2
  6248  01AC  3F01               	moviw [1]fsr0
  6249  01AD  00B6               	movwf	??_printf+3
  6250  01AE  0836               	movf	??_printf+3,w
  6251  01AF  023C               	subwf	printf@val+1,w
  6252  01B0  1D03               	skipz
  6253  01B1  29B4               	goto	u3715
  6254  01B2  0835               	movf	??_printf+2,w
  6255  01B3  023B               	subwf	printf@val,w
  6256  01B4                     u3715:	
  6257  01B4  1C03               	btfss	3,0
  6258  01B5  29BE               	goto	l4288
  6259                           
  6260                           ;doprnt.c: 1307: break;
  6261  01B6  3001               	movlw	1
  6262  01B7  00B3               	movwf	??_printf
  6263  01B8  0833               	movf	??_printf,w
  6264  01B9  07C2               	addwf	printf@c,f
  6265  01BA  3005               	movlw	5
  6266  01BB  0642               	xorwf	printf@c,w
  6267  01BC  1D03               	btfss	3,2
  6268  01BD  299F               	goto	l4282
  6269  01BE                     l4288:	
  6270                           
  6271                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6272  01BE  0840               	movf	printf@width,w
  6273  01BF  0441               	iorwf	printf@width+1,w
  6274  01C0  1903               	btfsc	3,2
  6275  01C1  29CA               	goto	l605
  6276  01C2  083F               	movf	printf@flag,w
  6277  01C3  3903               	andlw	3
  6278  01C4  1903               	btfsc	3,2
  6279  01C5  29CA               	goto	l605
  6280                           
  6281                           ;doprnt.c: 1346: width--;
  6282  01C6  30FF               	movlw	255
  6283  01C7  07C0               	addwf	printf@width,f
  6284  01C8  30FF               	movlw	255
  6285  01C9  3DC1               	addwfc	printf@width+1,f
  6286  01CA                     l605:	
  6287                           
  6288                           ;doprnt.c: 1381: if(width > c)
  6289  01CA  0842               	movf	printf@c,w
  6290  01CB  00B3               	movwf	??_printf
  6291  01CC  01B4               	clrf	??_printf+1
  6292  01CD  1BB3               	btfsc	??_printf,7
  6293  01CE  03B4               	decf	??_printf+1,f
  6294  01CF  0834               	movf	??_printf+1,w
  6295  01D0  3A80               	xorlw	128
  6296  01D1  00B5               	movwf	??_printf+2
  6297  01D2  0841               	movf	printf@width+1,w
  6298  01D3  3A80               	xorlw	128
  6299  01D4  0235               	subwf	??_printf+2,w
  6300  01D5  1D03               	skipz
  6301  01D6  29D9               	goto	u3755
  6302  01D7  0840               	movf	printf@width,w
  6303  01D8  0233               	subwf	??_printf,w
  6304  01D9                     u3755:	
  6305  01D9  1803               	skipnc
  6306  01DA  29E6               	goto	l4296
  6307                           
  6308                           ;doprnt.c: 1382: width -= c;
  6309  01DB  0020               	movlb	0	; select bank0
  6310  01DC  0842               	movf	printf@c,w
  6311  01DD  00B3               	movwf	??_printf
  6312  01DE  01B4               	clrf	??_printf+1
  6313  01DF  1BB3               	btfsc	??_printf,7
  6314  01E0  03B4               	decf	??_printf+1,f
  6315  01E1  0833               	movf	??_printf,w
  6316  01E2  02C0               	subwf	printf@width,f
  6317  01E3  0834               	movf	??_printf+1,w
  6318  01E4  3BC1               	subwfb	printf@width+1,f
  6319  01E5  29E9               	goto	l4298
  6320  01E6                     l4296:	
  6321                           
  6322                           ;doprnt.c: 1383: else
  6323                           ;doprnt.c: 1384: width = 0;
  6324  01E6  0020               	movlb	0	; select bank0
  6325  01E7  01C0               	clrf	printf@width
  6326  01E8  01C1               	clrf	printf@width+1
  6327  01E9                     l4298:	
  6328                           
  6329                           ;doprnt.c: 1387: if(flag & 0x04) {
  6330  01E9  1D3F               	btfss	printf@flag,2
  6331  01EA  2A02               	goto	l4310
  6332                           
  6333                           ;doprnt.c: 1392: if(flag & 0x03)
  6334  01EB  083F               	movf	printf@flag,w
  6335  01EC  3903               	andlw	3
  6336  01ED  1903               	btfsc	3,2
  6337  01EE  29F3               	goto	l4304
  6338                           
  6339                           ;doprnt.c: 1393: (putch('-') );
  6340  01EF  302D               	movlw	45
  6341  01F0  3189  21D8  3180   	fcall	_putch
  6342  01F3                     l4304:	
  6343                           
  6344                           ;doprnt.c: 1415: if(width)
  6345  01F3  0020               	movlb	0	; select bank0
  6346  01F4                     L2:	
  6347  01F4  0840               	movf	printf@width,w
  6348  01F5  0441               	iorwf	printf@width+1,w
  6349  01F6  1903               	btfsc	3,2
  6350  01F7  2A1B               	goto	l4320
  6351                           
  6352                           ;doprnt.c: 1417: (putch('0') );
  6353                           
  6354                           ;doprnt.c: 1416: do
  6355  01F8  3030               	movlw	48
  6356  01F9  3189  21D8  3180   	fcall	_putch
  6357                           
  6358                           ;doprnt.c: 1418: while(--width);
  6359  01FC  30FF               	movlw	255
  6360  01FD  0020               	movlb	0	; select bank0
  6361  01FE  07C0               	addwf	printf@width,f
  6362  01FF  30FF               	movlw	255
  6363  0200  3DC1               	addwfc	printf@width+1,f
  6364  0201  29F4               	goto	L2
  6365  0202                     l4310:	
  6366                           ;doprnt.c: 1420: } else
  6367                           
  6368                           
  6369                           ;doprnt.c: 1422: {
  6370                           ;doprnt.c: 1424: if(width
  6371                           ;doprnt.c: 1428: )
  6372  0202  0840               	movf	printf@width,w
  6373  0203  0441               	iorwf	printf@width+1,w
  6374  0204  1903               	btfsc	3,2
  6375  0205  2A13               	goto	l4316
  6376  0206                     l4312:	
  6377                           ;doprnt.c: 1429: do
  6378                           
  6379                           
  6380                           ;doprnt.c: 1430: (putch(' ') );
  6381  0206  3020               	movlw	32
  6382  0207  3189  21D8  3180   	fcall	_putch
  6383                           
  6384                           ;doprnt.c: 1431: while(--width);
  6385  020A  30FF               	movlw	255
  6386  020B  0020               	movlb	0	; select bank0
  6387  020C  07C0               	addwf	printf@width,f
  6388  020D  30FF               	movlw	255
  6389  020E  3DC1               	addwfc	printf@width+1,f
  6390  020F  0840               	movf	printf@width,w
  6391  0210  0441               	iorwf	printf@width+1,w
  6392  0211  1D03               	btfss	3,2
  6393  0212  2A06               	goto	l4312
  6394  0213                     l4316:	
  6395                           
  6396                           ;doprnt.c: 1438: if(flag & 0x03)
  6397  0213  083F               	movf	printf@flag,w
  6398  0214  3903               	andlw	3
  6399  0215  1903               	btfsc	3,2
  6400  0216  2A1B               	goto	l4320
  6401                           
  6402                           ;doprnt.c: 1439: (putch('-') );
  6403  0217  302D               	movlw	45
  6404  0218  3189  21D8  3180   	fcall	_putch
  6405  021B                     l4320:	
  6406                           
  6407                           ;doprnt.c: 1469: }
  6408                           ;doprnt.c: 1472: prec = c;
  6409  021B  0020               	movlb	0	; select bank0
  6410  021C  0842               	movf	printf@c,w
  6411  021D  00B3               	movwf	??_printf
  6412  021E  0833               	movf	??_printf,w
  6413  021F  00B7               	movwf	printf@prec
  6414  0220                     l4326:	
  6415                           ;doprnt.c: 1474: while(prec--) {
  6416                           
  6417  0220  30FF               	movlw	255
  6418  0221  0020               	movlb	0	; select bank0
  6419  0222  00B3               	movwf	??_printf
  6420  0223  0833               	movf	??_printf,w
  6421  0224  07B7               	addwf	printf@prec,f
  6422  0225  0A37               	incf	printf@prec,w
  6423  0226  1903               	btfsc	3,2
  6424  0227  2886               	goto	l4328
  6425                           
  6426                           ;doprnt.c: 1478: {
  6427                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6428  0228  300A               	movlw	10
  6429  0229  00A9               	movwf	___lwmod@divisor
  6430  022A  3000               	movlw	0
  6431  022B  00AA               	movwf	___lwmod@divisor+1
  6432  022C  0837               	movf	printf@prec,w
  6433  022D  00B3               	movwf	??_printf
  6434  022E  01B4               	clrf	??_printf+1
  6435  022F  35B3               	lslf	??_printf,f
  6436  0230  0DB4               	rlf	??_printf+1,f
  6437  0231  30F6               	movlw	low (_dpowers| (0+32768))
  6438  0232  0733               	addwf	??_printf,w
  6439  0233  0084               	movwf	4
  6440  0234  3086               	movlw	high (_dpowers| (0+32768))
  6441  0235  3D34               	addwfc	??_printf+1,w
  6442  0236  0085               	movwf	5
  6443  0237  3F00               	moviw [0]fsr0
  6444  0238  00A1               	movwf	___lwdiv@divisor
  6445  0239  3F01               	moviw [1]fsr0
  6446  023A  00A2               	movwf	___lwdiv@divisor+1
  6447  023B  083C               	movf	printf@val+1,w
  6448  023C  00A4               	movwf	___lwdiv@dividend+1
  6449  023D  083B               	movf	printf@val,w
  6450  023E  00A3               	movwf	___lwdiv@dividend
  6451  023F  318D  25A4  3180   	fcall	___lwdiv
  6452  0242  0020               	movlb	0	; select bank0
  6453  0243  0822               	movf	?___lwdiv+1,w
  6454  0244  00AC               	movwf	___lwmod@dividend+1
  6455  0245  0821               	movf	?___lwdiv,w
  6456  0246  00AB               	movwf	___lwmod@dividend
  6457  0247  318C  24EB  3180   	fcall	___lwmod
  6458  024A  0020               	movlb	0	; select bank0
  6459  024B  0829               	movf	?___lwmod,w
  6460  024C  3E30               	addlw	48
  6461  024D  00B5               	movwf	??_printf+2
  6462  024E  0835               	movf	??_printf+2,w
  6463  024F  00C2               	movwf	printf@c
  6464                           
  6465                           ;doprnt.c: 1523: }
  6466                           ;doprnt.c: 1524: (putch(c) );
  6467  0250  0842               	movf	printf@c,w
  6468  0251  3189  21D8  3180   	fcall	_putch
  6469  0254  2A20               	goto	l4326
  6470  0255                     l622:	
  6471                           ;doprnt.c: 1540: return 0;
  6472                           ;	Return value of _printf is never used
  6473                           
  6474                           ;doprnt.c: 1525: }
  6475                           ;doprnt.c: 1533: }
  6476                           ;doprnt.c: 1535: alldone:
  6477                           
  6478  0255  0008               	return
  6479  0256                     __end_of_printf:	
  6480                           
  6481                           	psect	text18
  6482  09D8                     __ptext18:	
  6483 ;; *************** function _putch *****************
  6484 ;; Defined at:
  6485 ;;		line 160 in file "mcc_generated_files/eusart.c"
  6486 ;; Parameters:    Size  Location     Type
  6487 ;;  txData          1    wreg     unsigned char 
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;  txData          1    3[BANK0 ] unsigned char 
  6490 ;; Return value:  Size  Location     Type
  6491 ;;                  1    wreg      void 
  6492 ;; Registers used:
  6493 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6502 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6503 ;;Total ram usage:        1 bytes
  6504 ;; Hardware stack levels used:    1
  6505 ;; Hardware stack levels required when called:    6
  6506 ;; This function calls:
  6507 ;;		_EUSART_Write
  6508 ;; This function is called by:
  6509 ;;		_printf
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           
  6514                           ;psect for function _putch
  6515  09D8                     _putch:	
  6516                           
  6517                           ;incstack = 0
  6518                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6519                           ;putch@txData stored from wreg
  6520  09D8  0020               	movlb	0	; select bank0
  6521  09D9  00A3               	movwf	putch@txData
  6522                           
  6523                           ;eusart.c: 162: EUSART_Write(txData);
  6524  09DA  0823               	movf	putch@txData,w
  6525  09DB  318B  23D6         	fcall	_EUSART_Write
  6526  09DD  0008               	return
  6527  09DE                     __end_of_putch:	
  6528                           
  6529                           	psect	text19
  6530  0BD6                     __ptext19:	
  6531 ;; *************** function _EUSART_Write *****************
  6532 ;; Defined at:
  6533 ;;		line 132 in file "mcc_generated_files/eusart.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;  txData          1    wreg     unsigned char 
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;  txData          1    2[BANK0 ] unsigned char 
  6538 ;; Return value:  Size  Location     Type
  6539 ;;                  1    wreg      void 
  6540 ;; Registers used:
  6541 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;Total ram usage:        2 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; Hardware stack levels required when called:    5
  6554 ;; This function calls:
  6555 ;;		Nothing
  6556 ;; This function is called by:
  6557 ;;		_putch
  6558 ;; This function uses a non-reentrant model
  6559 ;;
  6560                           
  6561                           
  6562                           ;psect for function _EUSART_Write
  6563  0BD6                     _EUSART_Write:	
  6564                           
  6565                           ;incstack = 0
  6566                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  6567                           ;EUSART_Write@txData stored from wreg
  6568  0BD6  0020               	movlb	0	; select bank0
  6569  0BD7  00A2               	movwf	EUSART_Write@txData
  6570  0BD8                     l4068:	
  6571                           ;eusart.c: 135: {
  6572                           
  6573                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  6574                           
  6575  0BD8  087A               	movf	_eusartTxBufferRemaining,w	;volatile
  6576  0BD9  1903               	btfsc	3,2
  6577  0BDA  2BD8               	goto	l4068
  6578                           
  6579                           ;eusart.c: 136: }
  6580                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  6581  0BDB  0021               	movlb	1	; select bank1
  6582  0BDC  1A11               	btfsc	17,4	;volatile
  6583  0BDD  2BE3               	goto	l383
  6584                           
  6585                           ;eusart.c: 139: {
  6586                           ;eusart.c: 140: TXREG = txData;
  6587  0BDE  0020               	movlb	0	; select bank0
  6588  0BDF  0822               	movf	EUSART_Write@txData,w
  6589  0BE0  0023               	movlb	3	; select bank3
  6590  0BE1  009A               	movwf	26	;volatile
  6591                           
  6592                           ;eusart.c: 141: }
  6593  0BE2  2BF7               	goto	l4082
  6594  0BE3                     l383:	
  6595                           
  6596                           ;eusart.c: 142: else
  6597                           ;eusart.c: 143: {
  6598                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  6599  0BE3  1211               	bcf	17,4	;volatile
  6600                           
  6601                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  6602  0BE4  0020               	movlb	0	; select bank0
  6603  0BE5  0822               	movf	EUSART_Write@txData,w
  6604  0BE6  00A1               	movwf	??_EUSART_Write
  6605  0BE7  087C               	movf	_eusartTxHead,w
  6606  0BE8  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  6607  0BE9  0086               	movwf	6
  6608  0BEA  0187               	clrf	7
  6609  0BEB  0821               	movf	??_EUSART_Write,w
  6610  0BEC  0081               	movwf	1
  6611  0BED  3001               	movlw	1
  6612  0BEE  00A1               	movwf	??_EUSART_Write
  6613  0BEF  0821               	movf	??_EUSART_Write,w
  6614  0BF0  07FC               	addwf	_eusartTxHead,f	;volatile
  6615                           
  6616                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  6617  0BF1  3008               	movlw	8
  6618  0BF2  027C               	subwf	_eusartTxHead,w	;volatile
  6619  0BF3  1803               	btfsc	3,0
  6620                           
  6621                           ;eusart.c: 147: {
  6622                           ;eusart.c: 148: eusartTxHead = 0;
  6623  0BF4  01FC               	clrf	_eusartTxHead	;volatile
  6624                           
  6625                           ;eusart.c: 149: }
  6626                           ;eusart.c: 150: eusartTxBufferRemaining--;
  6627  0BF5  3001               	movlw	1
  6628  0BF6  02FA               	subwf	_eusartTxBufferRemaining,f	;volatile
  6629  0BF7                     l4082:	
  6630                           
  6631                           ;eusart.c: 151: }
  6632                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  6633  0BF7  0021               	movlb	1	; select bank1
  6634  0BF8  1611               	bsf	17,4	;volatile
  6635  0BF9  0008               	return
  6636  0BFA                     __end_of_EUSART_Write:	
  6637                           
  6638                           	psect	text20
  6639  0CEB                     __ptext20:	
  6640 ;; *************** function ___lwmod *****************
  6641 ;; Defined at:
  6642 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6643 ;; Parameters:    Size  Location     Type
  6644 ;;  divisor         2    9[BANK0 ] unsigned int 
  6645 ;;  dividend        2   11[BANK0 ] unsigned int 
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;  counter         1   14[BANK0 ] unsigned char 
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  2    9[BANK0 ] unsigned int 
  6650 ;; Registers used:
  6651 ;;		wreg, status,2, status,0
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6657 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;Total ram usage:        6 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    5
  6664 ;; This function calls:
  6665 ;;		Nothing
  6666 ;; This function is called by:
  6667 ;;		_printf
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           
  6672                           ;psect for function ___lwmod
  6673  0CEB                     ___lwmod:	
  6674                           
  6675                           ;incstack = 0
  6676                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6677  0CEB  0020               	movlb	0	; select bank0
  6678  0CEC  0829               	movf	___lwmod@divisor,w
  6679  0CED  042A               	iorwf	___lwmod@divisor+1,w
  6680  0CEE  1903               	btfsc	3,2
  6681  0CEF  2D13               	goto	l4182
  6682  0CF0  01AE               	clrf	___lwmod@counter
  6683  0CF1  0AAE               	incf	___lwmod@counter,f
  6684  0CF2                     l4172:	
  6685  0CF2  1BAA               	btfsc	___lwmod@divisor+1,7
  6686  0CF3  2CFE               	goto	l4174
  6687  0CF4  3001               	movlw	1
  6688  0CF5                     u3535:	
  6689  0CF5  35A9               	lslf	___lwmod@divisor,f
  6690  0CF6  0DAA               	rlf	___lwmod@divisor+1,f
  6691  0CF7  0B89               	decfsz	9,f
  6692  0CF8  2CF5               	goto	u3535
  6693  0CF9  3001               	movlw	1
  6694  0CFA  00AD               	movwf	??___lwmod
  6695  0CFB  082D               	movf	??___lwmod,w
  6696  0CFC  07AE               	addwf	___lwmod@counter,f
  6697  0CFD  2CF2               	goto	l4172
  6698  0CFE                     l4174:	
  6699  0CFE  082A               	movf	___lwmod@divisor+1,w
  6700  0CFF  022C               	subwf	___lwmod@dividend+1,w
  6701  0D00  1D03               	skipz
  6702  0D01  2D04               	goto	u3555
  6703  0D02  0829               	movf	___lwmod@divisor,w
  6704  0D03  022B               	subwf	___lwmod@dividend,w
  6705  0D04                     u3555:	
  6706  0D04  1C03               	skipc
  6707  0D05  2D0A               	goto	l4178
  6708  0D06  0829               	movf	___lwmod@divisor,w
  6709  0D07  02AB               	subwf	___lwmod@dividend,f
  6710  0D08  082A               	movf	___lwmod@divisor+1,w
  6711  0D09  3BAC               	subwfb	___lwmod@dividend+1,f
  6712  0D0A                     l4178:	
  6713  0D0A  3001               	movlw	1
  6714  0D0B                     u3565:	
  6715  0D0B  36AA               	lsrf	___lwmod@divisor+1,f
  6716  0D0C  0CA9               	rrf	___lwmod@divisor,f
  6717  0D0D  0B89               	decfsz	9,f
  6718  0D0E  2D0B               	goto	u3565
  6719  0D0F  3001               	movlw	1
  6720  0D10  02AE               	subwf	___lwmod@counter,f
  6721  0D11  1D03               	btfss	3,2
  6722  0D12  2CFE               	goto	l4174
  6723  0D13                     l4182:	
  6724  0D13  082C               	movf	___lwmod@dividend+1,w
  6725  0D14  00AA               	movwf	?___lwmod+1
  6726  0D15  082B               	movf	___lwmod@dividend,w
  6727  0D16  00A9               	movwf	?___lwmod
  6728  0D17  0008               	return
  6729  0D18                     __end_of___lwmod:	
  6730                           
  6731                           	psect	text21
  6732  0DA4                     __ptext21:	
  6733 ;; *************** function ___lwdiv *****************
  6734 ;; Defined at:
  6735 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6736 ;; Parameters:    Size  Location     Type
  6737 ;;  divisor         2    1[BANK0 ] unsigned int 
  6738 ;;  dividend        2    3[BANK0 ] unsigned int 
  6739 ;; Auto vars:     Size  Location     Type
  6740 ;;  quotient        2    7[BANK0 ] unsigned int 
  6741 ;;  counter         1    6[BANK0 ] unsigned char 
  6742 ;; Return value:  Size  Location     Type
  6743 ;;                  2    1[BANK0 ] unsigned int 
  6744 ;; Registers used:
  6745 ;;		wreg, status,2, status,0
  6746 ;; Tracked objects:
  6747 ;;		On entry : 0/0
  6748 ;;		On exit  : 0/0
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6751 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6752 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6753 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6754 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6755 ;;Total ram usage:        8 bytes
  6756 ;; Hardware stack levels used:    1
  6757 ;; Hardware stack levels required when called:    5
  6758 ;; This function calls:
  6759 ;;		Nothing
  6760 ;; This function is called by:
  6761 ;;		_printf
  6762 ;; This function uses a non-reentrant model
  6763 ;;
  6764                           
  6765                           
  6766                           ;psect for function ___lwdiv
  6767  0DA4                     ___lwdiv:	
  6768                           
  6769                           ;incstack = 0
  6770                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6771  0DA4  0020               	movlb	0	; select bank0
  6772  0DA5  01A7               	clrf	___lwdiv@quotient
  6773  0DA6  01A8               	clrf	___lwdiv@quotient+1
  6774  0DA7  0821               	movf	___lwdiv@divisor,w
  6775  0DA8  0422               	iorwf	___lwdiv@divisor+1,w
  6776  0DA9  1903               	btfsc	3,2
  6777  0DAA  2DD4               	goto	l4160
  6778  0DAB  01A6               	clrf	___lwdiv@counter
  6779  0DAC  0AA6               	incf	___lwdiv@counter,f
  6780  0DAD                     l4148:	
  6781  0DAD  1BA2               	btfsc	___lwdiv@divisor+1,7
  6782  0DAE  2DB9               	goto	l4150
  6783  0DAF  3001               	movlw	1
  6784  0DB0                     u3465:	
  6785  0DB0  35A1               	lslf	___lwdiv@divisor,f
  6786  0DB1  0DA2               	rlf	___lwdiv@divisor+1,f
  6787  0DB2  0B89               	decfsz	9,f
  6788  0DB3  2DB0               	goto	u3465
  6789  0DB4  3001               	movlw	1
  6790  0DB5  00A5               	movwf	??___lwdiv
  6791  0DB6  0825               	movf	??___lwdiv,w
  6792  0DB7  07A6               	addwf	___lwdiv@counter,f
  6793  0DB8  2DAD               	goto	l4148
  6794  0DB9                     l4150:	
  6795  0DB9  3001               	movlw	1
  6796  0DBA                     u3485:	
  6797  0DBA  35A7               	lslf	___lwdiv@quotient,f
  6798  0DBB  0DA8               	rlf	___lwdiv@quotient+1,f
  6799  0DBC  0B89               	decfsz	9,f
  6800  0DBD  2DBA               	goto	u3485
  6801  0DBE  0822               	movf	___lwdiv@divisor+1,w
  6802  0DBF  0224               	subwf	___lwdiv@dividend+1,w
  6803  0DC0  1D03               	skipz
  6804  0DC1  2DC4               	goto	u3495
  6805  0DC2  0821               	movf	___lwdiv@divisor,w
  6806  0DC3  0223               	subwf	___lwdiv@dividend,w
  6807  0DC4                     u3495:	
  6808  0DC4  1C03               	skipc
  6809  0DC5  2DCB               	goto	l4156
  6810  0DC6  0821               	movf	___lwdiv@divisor,w
  6811  0DC7  02A3               	subwf	___lwdiv@dividend,f
  6812  0DC8  0822               	movf	___lwdiv@divisor+1,w
  6813  0DC9  3BA4               	subwfb	___lwdiv@dividend+1,f
  6814  0DCA  1427               	bsf	___lwdiv@quotient,0
  6815  0DCB                     l4156:	
  6816  0DCB  3001               	movlw	1
  6817  0DCC                     u3505:	
  6818  0DCC  36A2               	lsrf	___lwdiv@divisor+1,f
  6819  0DCD  0CA1               	rrf	___lwdiv@divisor,f
  6820  0DCE  0B89               	decfsz	9,f
  6821  0DCF  2DCC               	goto	u3505
  6822  0DD0  3001               	movlw	1
  6823  0DD1  02A6               	subwf	___lwdiv@counter,f
  6824  0DD2  1D03               	btfss	3,2
  6825  0DD3  2DB9               	goto	l4150
  6826  0DD4                     l4160:	
  6827  0DD4  0828               	movf	___lwdiv@quotient+1,w
  6828  0DD5  00A2               	movwf	?___lwdiv+1
  6829  0DD6  0827               	movf	___lwdiv@quotient,w
  6830  0DD7  00A1               	movwf	?___lwdiv
  6831  0DD8  0008               	return
  6832  0DD9                     __end_of___lwdiv:	
  6833                           
  6834                           	psect	text22
  6835  0B91                     __ptext22:	
  6836 ;; *************** function _PROTOCOL_I2C_Set_TLV *****************
  6837 ;; Defined at:
  6838 ;;		line 207 in file "protocol.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  type            1    wreg     unsigned char 
  6841 ;;  length          1    1[BANK0 ] unsigned char 
  6842 ;;  pbuffer         2    2[BANK0 ] PTR unsigned char 
  6843 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), 
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;  type            1    5[BANK0 ] unsigned char 
  6846 ;;  status          1    6[BANK0 ] enum E3406
  6847 ;; Return value:  Size  Location     Type
  6848 ;;                  1    wreg      void 
  6849 ;; Registers used:
  6850 ;;		wreg, status,2, status,0
  6851 ;; Tracked objects:
  6852 ;;		On entry : 0/0
  6853 ;;		On exit  : 0/0
  6854 ;;		Unchanged: 0/0
  6855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6856 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6857 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6858 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6859 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6860 ;;Total ram usage:        6 bytes
  6861 ;; Hardware stack levels used:    1
  6862 ;; Hardware stack levels required when called:    5
  6863 ;; This function calls:
  6864 ;;		Nothing
  6865 ;; This function is called by:
  6866 ;;		_PROTOCOL_I2C_Send_int8_t
  6867 ;; This function uses a non-reentrant model
  6868 ;;
  6869                           
  6870                           
  6871                           ;psect for function _PROTOCOL_I2C_Set_TLV
  6872  0B91                     _PROTOCOL_I2C_Set_TLV:	
  6873                           
  6874                           ;incstack = 0
  6875                           ; Regs used in _PROTOCOL_I2C_Set_TLV: [wreg+status,2+status,0]
  6876                           ;PROTOCOL_I2C_Set_TLV@type stored from wreg
  6877  0B91  0020               	movlb	0	; select bank0
  6878  0B92  00A5               	movwf	PROTOCOL_I2C_Set_TLV@type
  6879                           
  6880                           ;protocol.c: 208: READBUF_STATUS status = readbuf.status;
  6881  0B93  0021               	movlb	1	; select bank1
  6882  0B94  084C               	movf	(_readbuf^(0+128)+4),w
  6883  0B95  0020               	movlb	0	; select bank0
  6884  0B96  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  6885  0B97  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  6886  0B98  00A6               	movwf	PROTOCOL_I2C_Set_TLV@status
  6887                           
  6888                           ;protocol.c: 209: if (status == COMPLETE) {
  6889  0B99  3003               	movlw	3
  6890  0B9A  0626               	xorwf	PROTOCOL_I2C_Set_TLV@status,w
  6891  0B9B  1D03               	btfss	3,2
  6892  0B9C  0008               	return
  6893                           
  6894                           ;protocol.c: 210: readbuf.type = type;
  6895  0B9D  0825               	movf	PROTOCOL_I2C_Set_TLV@type,w
  6896  0B9E  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  6897  0B9F  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  6898  0BA0  0021               	movlb	1	; select bank1
  6899  0BA1  00C8               	movwf	_readbuf^(0+128)
  6900                           
  6901                           ;protocol.c: 211: readbuf.length = length;
  6902  0BA2  0020               	movlb	0	; select bank0
  6903  0BA3  0821               	movf	PROTOCOL_I2C_Set_TLV@length,w
  6904  0BA4  00A4               	movwf	??_PROTOCOL_I2C_Set_TLV
  6905  0BA5  0824               	movf	??_PROTOCOL_I2C_Set_TLV,w
  6906  0BA6  0021               	movlb	1	; select bank1
  6907  0BA7  00C9               	movwf	(_readbuf^(0+128)+1)
  6908                           
  6909                           ;protocol.c: 212: readbuf.pbuffer = pbuffer;
  6910  0BA8  0020               	movlb	0	; select bank0
  6911  0BA9  0823               	movf	PROTOCOL_I2C_Set_TLV@pbuffer+1,w
  6912  0BAA  0021               	movlb	1	; select bank1
  6913  0BAB  00CB               	movwf	((low ((_readbuf| 0+2))+1))^(0+128)
  6914  0BAC  0020               	movlb	0	; select bank0
  6915  0BAD  0822               	movf	PROTOCOL_I2C_Set_TLV@pbuffer,w
  6916  0BAE  0021               	movlb	1	; select bank1
  6917  0BAF  00CA               	movwf	(low ((_readbuf| 0+2)))^(0+128)
  6918                           
  6919                           ;protocol.c: 213: readbuf.buf_cnt = 0;
  6920  0BB0  01CD               	clrf	(_readbuf^(0+128)+5)
  6921                           
  6922                           ;protocol.c: 214: readbuf.status = TLV_SET;
  6923  0BB1  01CC               	clrf	(_readbuf^(0+128)+4)
  6924  0BB2  0008               	return
  6925  0BB3                     __end_of_PROTOCOL_I2C_Set_TLV:	
  6926                           
  6927                           	psect	text23
  6928  0F0D                     __ptext23:	
  6929 ;; *************** function _atoi *****************
  6930 ;; Defined at:
  6931 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  6932 ;; Parameters:    Size  Location     Type
  6933 ;;  s               1    wreg     PTR const unsigned char 
  6934 ;;		 -> buf(48), 
  6935 ;; Auto vars:     Size  Location     Type
  6936 ;;  s               1   14[BANK0 ] PTR const unsigned char 
  6937 ;;		 -> buf(48), 
  6938 ;;  a               2   12[BANK0 ] int 
  6939 ;;  sign            1   11[BANK0 ] unsigned char 
  6940 ;; Return value:  Size  Location     Type
  6941 ;;                  2    7[BANK0 ] int 
  6942 ;; Registers used:
  6943 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6944 ;; Tracked objects:
  6945 ;;		On entry : 0/0
  6946 ;;		On exit  : 0/0
  6947 ;;		Unchanged: 0/0
  6948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6949 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6950 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6951 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6952 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6953 ;;Total ram usage:        8 bytes
  6954 ;; Hardware stack levels used:    1
  6955 ;; Hardware stack levels required when called:    6
  6956 ;; This function calls:
  6957 ;;		___wmul
  6958 ;;		_isdigit
  6959 ;; This function is called by:
  6960 ;;		_PROTOCOL_Loop
  6961 ;; This function uses a non-reentrant model
  6962 ;;
  6963                           
  6964                           
  6965                           ;psect for function _atoi
  6966  0F0D                     _atoi:	
  6967                           
  6968                           ;incstack = 0
  6969                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6970                           ;atoi@s stored from wreg
  6971  0F0D  0020               	movlb	0	; select bank0
  6972  0F0E  00AE               	movwf	atoi@s
  6973  0F0F                     l4592:	
  6974  0F0F  082E               	movf	atoi@s,w
  6975  0F10  0086               	movwf	6
  6976  0F11  3001               	movlw	1	; select bank2/3
  6977  0F12  0087               	movwf	7
  6978  0F13  3020               	movlw	32
  6979  0F14  0601               	xorwf	1,w
  6980  0F15  1D03               	btfss	3,2
  6981  0F16  2F1C               	goto	l4594
  6982  0F17                     l4590:	
  6983  0F17  3001               	movlw	1
  6984  0F18  00A9               	movwf	??_atoi
  6985  0F19  0829               	movf	??_atoi,w
  6986  0F1A  07AE               	addwf	atoi@s,f
  6987  0F1B  2F0F               	goto	l4592
  6988  0F1C                     l4594:	
  6989  0F1C  082E               	movf	atoi@s,w
  6990  0F1D  0086               	movwf	6
  6991  0F1E  3001               	movlw	1	; select bank2/3
  6992  0F1F  0087               	movwf	7
  6993  0F20  3009               	movlw	9
  6994  0F21  0601               	xorwf	1,w
  6995  0F22  1903               	btfsc	3,2
  6996  0F23  2F17               	goto	l4590
  6997  0F24  01AC               	clrf	atoi@a
  6998  0F25  01AD               	clrf	atoi@a+1
  6999  0F26  01AB               	clrf	atoi@sign
  7000  0F27  082E               	movf	atoi@s,w
  7001  0F28  0086               	movwf	6
  7002  0F29  3001               	movlw	1	; select bank2/3
  7003  0F2A  0087               	movwf	7
  7004  0F2B  302D               	movlw	45
  7005  0F2C  0601               	xorwf	1,w
  7006  0F2D  1D03               	btfss	3,2
  7007  0F2E  2F34               	goto	l4602
  7008  0F2F  3001               	movlw	1
  7009  0F30  00A9               	movwf	??_atoi
  7010  0F31  0829               	movf	??_atoi,w
  7011  0F32  07AB               	addwf	atoi@sign,f
  7012  0F33  2F3C               	goto	l4608
  7013  0F34                     l4602:	
  7014  0F34  082E               	movf	atoi@s,w
  7015  0F35  0086               	movwf	6
  7016  0F36  3001               	movlw	1	; select bank2/3
  7017  0F37  0087               	movwf	7
  7018  0F38  302B               	movlw	43
  7019  0F39  0601               	xorwf	1,w
  7020  0F3A  1D03               	btfss	3,2
  7021  0F3B  2F40               	goto	l4610
  7022  0F3C                     l4608:	
  7023  0F3C  3001               	movlw	1
  7024  0F3D  00A9               	movwf	??_atoi
  7025  0F3E  0829               	movf	??_atoi,w
  7026  0F3F  07AE               	addwf	atoi@s,f
  7027  0F40                     l4610:	
  7028  0F40  082E               	movf	atoi@s,w
  7029  0F41  0086               	movwf	6
  7030  0F42  3001               	movlw	1	; select bank2/3
  7031  0F43  0087               	movwf	7
  7032  0F44  0801               	movf	1,w
  7033  0F45  318A  221B  318F   	fcall	_isdigit
  7034  0F48  1C03               	btfss	3,0
  7035  0F49  2F69               	goto	l4612
  7036  0F4A  0020               	movlb	0	; select bank0
  7037  0F4B  082D               	movf	atoi@a+1,w
  7038  0F4C  00A2               	movwf	___wmul@multiplier+1
  7039  0F4D  082C               	movf	atoi@a,w
  7040  0F4E  00A1               	movwf	___wmul@multiplier
  7041  0F4F  300A               	movlw	10
  7042  0F50  00A3               	movwf	___wmul@multiplicand
  7043  0F51  3000               	movlw	0
  7044  0F52  00A4               	movwf	___wmul@multiplicand+1
  7045  0F53  318A  22DA  318F   	fcall	___wmul
  7046  0F56  0020               	movlb	0	; select bank0
  7047  0F57  082E               	movf	atoi@s,w
  7048  0F58  0086               	movwf	6
  7049  0F59  3001               	movlw	1	; select bank2/3
  7050  0F5A  0087               	movwf	7
  7051  0F5B  0801               	movf	1,w
  7052  0F5C  0721               	addwf	?___wmul,w
  7053  0F5D  00A9               	movwf	??_atoi
  7054  0F5E  0822               	movf	?___wmul+1,w
  7055  0F5F  1803               	skipnc
  7056  0F60  0A22               	incf	?___wmul+1,w
  7057  0F61  00AA               	movwf	??_atoi+1
  7058  0F62  0829               	movf	??_atoi,w
  7059  0F63  3ED0               	addlw	208
  7060  0F64  00AC               	movwf	atoi@a
  7061  0F65  30FF               	movlw	255
  7062  0F66  3D2A               	addwfc	??_atoi+1,w
  7063  0F67  00AD               	movwf	atoi@a+1
  7064  0F68  2F3C               	goto	l4608
  7065  0F69                     l4612:	
  7066  0F69  0020               	movlb	0	; select bank0
  7067  0F6A  082B               	movf	atoi@sign,w
  7068  0F6B  1903               	btfsc	3,2
  7069  0F6C  2F79               	goto	l4618
  7070  0F6D  092C               	comf	atoi@a,w
  7071  0F6E  00A9               	movwf	??_atoi
  7072  0F6F  092D               	comf	atoi@a+1,w
  7073  0F70  00AA               	movwf	??_atoi+1
  7074  0F71  0AA9               	incf	??_atoi,f
  7075  0F72  1903               	skipnz
  7076  0F73  0AAA               	incf	??_atoi+1,f
  7077  0F74  0829               	movf	??_atoi,w
  7078  0F75  00A7               	movwf	?_atoi
  7079  0F76  082A               	movf	??_atoi+1,w
  7080  0F77  00A8               	movwf	?_atoi+1
  7081  0F78  0008               	return
  7082  0F79                     l4618:	
  7083  0F79  082D               	movf	atoi@a+1,w
  7084  0F7A  00A8               	movwf	?_atoi+1
  7085  0F7B  082C               	movf	atoi@a,w
  7086  0F7C  00A7               	movwf	?_atoi
  7087  0F7D  0008               	return
  7088  0F7E                     __end_of_atoi:	
  7089                           
  7090                           	psect	text24
  7091  0A1B                     __ptext24:	
  7092 ;; *************** function _isdigit *****************
  7093 ;; Defined at:
  7094 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  7095 ;; Parameters:    Size  Location     Type
  7096 ;;  c               1    wreg     unsigned char 
  7097 ;; Auto vars:     Size  Location     Type
  7098 ;;  c               1    2[BANK0 ] unsigned char 
  7099 ;; Return value:  Size  Location     Type
  7100 ;;		None               void
  7101 ;; Registers used:
  7102 ;;		wreg, status,2, status,0
  7103 ;; Tracked objects:
  7104 ;;		On entry : 0/0
  7105 ;;		On exit  : 0/0
  7106 ;;		Unchanged: 0/0
  7107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7109 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7111 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7112 ;;Total ram usage:        2 bytes
  7113 ;; Hardware stack levels used:    1
  7114 ;; Hardware stack levels required when called:    5
  7115 ;; This function calls:
  7116 ;;		Nothing
  7117 ;; This function is called by:
  7118 ;;		_printf
  7119 ;;		_atoi
  7120 ;; This function uses a non-reentrant model
  7121 ;;
  7122                           
  7123                           
  7124                           ;psect for function _isdigit
  7125  0A1B                     _isdigit:	
  7126                           
  7127                           ;incstack = 0
  7128                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  7129                           ;isdigit@c stored from wreg
  7130  0A1B  0020               	movlb	0	; select bank0
  7131  0A1C  00A2               	movwf	isdigit@c
  7132  0A1D  01A1               	clrf	_isdigit$1484
  7133  0A1E  303A               	movlw	58
  7134  0A1F  0222               	subwf	isdigit@c,w
  7135  0A20  1803               	skipnc
  7136  0A21  2A28               	goto	l4120
  7137  0A22  3030               	movlw	48
  7138  0A23  0222               	subwf	isdigit@c,w
  7139  0A24  1C03               	skipc
  7140  0A25  2A28               	goto	l4120
  7141  0A26  01A1               	clrf	_isdigit$1484
  7142  0A27  0AA1               	incf	_isdigit$1484,f
  7143  0A28                     l4120:	
  7144  0A28  0C21               	rrf	_isdigit$1484,w
  7145  0A29  0008               	return
  7146  0A2A                     __end_of_isdigit:	
  7147                           
  7148                           	psect	text25
  7149  0ADA                     __ptext25:	
  7150 ;; *************** function ___wmul *****************
  7151 ;; Defined at:
  7152 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  7153 ;; Parameters:    Size  Location     Type
  7154 ;;  multiplier      2    1[BANK0 ] unsigned int 
  7155 ;;  multiplicand    2    3[BANK0 ] unsigned int 
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;  product         2    5[BANK0 ] unsigned int 
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  2    1[BANK0 ] unsigned int 
  7160 ;; Registers used:
  7161 ;;		wreg, status,2, status,0
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7167 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7168 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;Total ram usage:        6 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:    5
  7174 ;; This function calls:
  7175 ;;		Nothing
  7176 ;; This function is called by:
  7177 ;;		_printf
  7178 ;;		_atoi
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           
  7183                           ;psect for function ___wmul
  7184  0ADA                     ___wmul:	
  7185                           
  7186                           ;incstack = 0
  7187                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7188  0ADA  0020               	movlb	0	; select bank0
  7189  0ADB  01A5               	clrf	___wmul@product
  7190  0ADC  01A6               	clrf	___wmul@product+1
  7191  0ADD                     l4126:	
  7192  0ADD  1C21               	btfss	___wmul@multiplier,0
  7193  0ADE  2AE3               	goto	l1063
  7194  0ADF  0823               	movf	___wmul@multiplicand,w
  7195  0AE0  07A5               	addwf	___wmul@product,f
  7196  0AE1  0824               	movf	___wmul@multiplicand+1,w
  7197  0AE2  3DA6               	addwfc	___wmul@product+1,f
  7198  0AE3                     l1063:	
  7199  0AE3  3001               	movlw	1
  7200  0AE4                     u3425:	
  7201  0AE4  35A3               	lslf	___wmul@multiplicand,f
  7202  0AE5  0DA4               	rlf	___wmul@multiplicand+1,f
  7203  0AE6  0B89               	decfsz	9,f
  7204  0AE7  2AE4               	goto	u3425
  7205  0AE8  3001               	movlw	1
  7206  0AE9                     u3435:	
  7207  0AE9  36A2               	lsrf	___wmul@multiplier+1,f
  7208  0AEA  0CA1               	rrf	___wmul@multiplier,f
  7209  0AEB  0B89               	decfsz	9,f
  7210  0AEC  2AE9               	goto	u3435
  7211  0AED  0821               	movf	___wmul@multiplier,w
  7212  0AEE  0422               	iorwf	___wmul@multiplier+1,w
  7213  0AEF  1D03               	btfss	3,2
  7214  0AF0  2ADD               	goto	l4126
  7215  0AF1  0826               	movf	___wmul@product+1,w
  7216  0AF2  00A2               	movwf	?___wmul+1
  7217  0AF3  0825               	movf	___wmul@product,w
  7218  0AF4  00A1               	movwf	?___wmul
  7219  0AF5  0008               	return
  7220  0AF6                     __end_of___wmul:	
  7221                           
  7222                           	psect	text26
  7223  09CF                     __ptext26:	
  7224 ;; *************** function _TMR0_HasOverflowOccured *****************
  7225 ;; Defined at:
  7226 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  7227 ;; Parameters:    Size  Location     Type
  7228 ;;		None
  7229 ;; Auto vars:     Size  Location     Type
  7230 ;;		None
  7231 ;; Return value:  Size  Location     Type
  7232 ;;                  1    wreg      unsigned char 
  7233 ;; Registers used:
  7234 ;;		wreg, status,2, status,0
  7235 ;; Tracked objects:
  7236 ;;		On entry : 0/0
  7237 ;;		On exit  : 0/0
  7238 ;;		Unchanged: 0/0
  7239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;Total ram usage:        0 bytes
  7245 ;; Hardware stack levels used:    1
  7246 ;; Hardware stack levels required when called:    5
  7247 ;; This function calls:
  7248 ;;		Nothing
  7249 ;; This function is called by:
  7250 ;;		_PROTOCOL_Loop
  7251 ;; This function uses a non-reentrant model
  7252 ;;
  7253                           
  7254                           
  7255                           ;psect for function _TMR0_HasOverflowOccured
  7256  09CF                     _TMR0_HasOverflowOccured:	
  7257                           
  7258                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  7259                           
  7260                           ;incstack = 0
  7261                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  7262  09CF  0C0B               	rrf	11,w	;volatile
  7263  09D0  0C89               	rrf	9,f
  7264  09D1  3901               	andlw	1
  7265  09D2  0008               	return
  7266  09D3                     __end_of_TMR0_HasOverflowOccured:	
  7267                           
  7268                           	psect	text27
  7269  0A39                     __ptext27:	
  7270 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  7271 ;; Defined at:
  7272 ;;		line 84 in file "protocol.c"
  7273 ;; Parameters:    Size  Location     Type
  7274 ;;  device_id_i2    1    wreg     unsigned char 
  7275 ;; Auto vars:     Size  Location     Type
  7276 ;;  device_id_i2    1    5[BANK0 ] unsigned char 
  7277 ;; Return value:  Size  Location     Type
  7278 ;;                  1    wreg      void 
  7279 ;; Registers used:
  7280 ;;		wreg, status,2, status,0, pclath, cstack
  7281 ;; Tracked objects:
  7282 ;;		On entry : 0/0
  7283 ;;		On exit  : 0/0
  7284 ;;		Unchanged: 0/0
  7285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7288 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7289 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7290 ;;Total ram usage:        2 bytes
  7291 ;; Hardware stack levels used:    1
  7292 ;; Hardware stack levels required when called:    6
  7293 ;; This function calls:
  7294 ;;		_DATAEE_WriteByte
  7295 ;; This function is called by:
  7296 ;;		_PROTOCOL_Loop
  7297 ;; This function uses a non-reentrant model
  7298 ;;
  7299                           
  7300                           
  7301                           ;psect for function _PROTOCOL_Write_Device_Address
  7302  0A39                     _PROTOCOL_Write_Device_Address:	
  7303                           
  7304                           ;incstack = 0
  7305                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  7306                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  7307  0A39  0020               	movlb	0	; select bank0
  7308  0A3A  00A5               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  7309                           
  7310                           ;protocol.c: 85: DATAEE_WriteByte(0, device_id_i2c);
  7311  0A3B  0825               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7312  0A3C  00A4               	movwf	??_PROTOCOL_Write_Device_Address
  7313  0A3D  0824               	movf	??_PROTOCOL_Write_Device_Address,w
  7314  0A3E  00A1               	movwf	DATAEE_WriteByte@bData
  7315  0A3F  3000               	movlw	0
  7316  0A40  318B  23B3         	fcall	_DATAEE_WriteByte
  7317                           
  7318                           ;protocol.c: 86: slave_address = device_id_i2c;
  7319  0A42  0020               	movlb	0	; select bank0
  7320  0A43  0825               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  7321  0A44  00A4               	movwf	??_PROTOCOL_Write_Device_Address
  7322  0A45  0824               	movf	??_PROTOCOL_Write_Device_Address,w
  7323  0A46  0021               	movlb	1	; select bank1
  7324  0A47  00C3               	movwf	_slave_address^(0+128)
  7325  0A48  0008               	return
  7326  0A49                     __end_of_PROTOCOL_Write_Device_Address:	
  7327                           
  7328                           	psect	text28
  7329  09B9                     __ptext28:	
  7330 ;; *************** function _PROTOCOL_STP *****************
  7331 ;; Defined at:
  7332 ;;		line 98 in file "protocol.c"
  7333 ;; Parameters:    Size  Location     Type
  7334 ;;		None
  7335 ;; Auto vars:     Size  Location     Type
  7336 ;;		None
  7337 ;; Return value:  Size  Location     Type
  7338 ;;                  1    wreg      void 
  7339 ;; Registers used:
  7340 ;;		wreg, status,2, status,0
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7350 ;;Total ram usage:        0 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; Hardware stack levels required when called:    5
  7353 ;; This function calls:
  7354 ;;		Nothing
  7355 ;; This function is called by:
  7356 ;;		_PROTOCOL_Loop
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           
  7361                           ;psect for function _PROTOCOL_STP
  7362  09B9                     _PROTOCOL_STP:	
  7363                           
  7364                           ;protocol.c: 100: running = 0;
  7365                           
  7366                           ;incstack = 0
  7367                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  7368  09B9  0021               	movlb	1	; select bank1
  7369  09BA  01C0               	clrf	_running^(0+128)
  7370  09BB  0008               	return
  7371  09BC                     __end_of_PROTOCOL_STP:	
  7372                           
  7373                           	psect	text29
  7374  09CB                     __ptext29:	
  7375 ;; *************** function _PROTOCOL_STA *****************
  7376 ;; Defined at:
  7377 ;;		line 93 in file "protocol.c"
  7378 ;; Parameters:    Size  Location     Type
  7379 ;;		None
  7380 ;; Auto vars:     Size  Location     Type
  7381 ;;		None
  7382 ;; Return value:  Size  Location     Type
  7383 ;;                  1    wreg      void 
  7384 ;; Registers used:
  7385 ;;		wreg, status,2, status,0
  7386 ;; Tracked objects:
  7387 ;;		On entry : 0/0
  7388 ;;		On exit  : 0/0
  7389 ;;		Unchanged: 0/0
  7390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7395 ;;Total ram usage:        0 bytes
  7396 ;; Hardware stack levels used:    1
  7397 ;; Hardware stack levels required when called:    5
  7398 ;; This function calls:
  7399 ;;		Nothing
  7400 ;; This function is called by:
  7401 ;;		_PROTOCOL_Loop
  7402 ;; This function uses a non-reentrant model
  7403 ;;
  7404                           
  7405                           
  7406                           ;psect for function _PROTOCOL_STA
  7407  09CB                     _PROTOCOL_STA:	
  7408                           
  7409                           ;protocol.c: 95: running = 1;
  7410                           
  7411                           ;incstack = 0
  7412                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  7413  09CB  0021               	movlb	1	; select bank1
  7414  09CC  01C0               	clrf	_running^(0+128)
  7415  09CD  0AC0               	incf	_running^(0+128),f
  7416  09CE  0008               	return
  7417  09CF                     __end_of_PROTOCOL_STA:	
  7418                           
  7419                           	psect	text30
  7420  09EB                     __ptext30:	
  7421 ;; *************** function _PROTOCOL_SET *****************
  7422 ;; Defined at:
  7423 ;;		line 111 in file "protocol.c"
  7424 ;; Parameters:    Size  Location     Type
  7425 ;;  value_          1    wreg     unsigned char 
  7426 ;; Auto vars:     Size  Location     Type
  7427 ;;  value_          1    2[BANK0 ] unsigned char 
  7428 ;; Return value:  Size  Location     Type
  7429 ;;                  1    wreg      void 
  7430 ;; Registers used:
  7431 ;;		wreg, status,2, status,0
  7432 ;; Tracked objects:
  7433 ;;		On entry : 0/0
  7434 ;;		On exit  : 0/0
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7440 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7441 ;;Total ram usage:        2 bytes
  7442 ;; Hardware stack levels used:    1
  7443 ;; Hardware stack levels required when called:    5
  7444 ;; This function calls:
  7445 ;;		Nothing
  7446 ;; This function is called by:
  7447 ;;		_PROTOCOL_Loop
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451                           
  7452                           ;psect for function _PROTOCOL_SET
  7453  09EB                     _PROTOCOL_SET:	
  7454                           
  7455                           ;incstack = 0
  7456                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  7457                           ;PROTOCOL_SET@value_ stored from wreg
  7458  09EB  0020               	movlb	0	; select bank0
  7459  09EC  00A2               	movwf	PROTOCOL_SET@value_
  7460                           
  7461                           ;protocol.c: 112: value = value_;
  7462  09ED  0822               	movf	PROTOCOL_SET@value_,w
  7463  09EE  00A1               	movwf	??_PROTOCOL_SET
  7464  09EF  0821               	movf	??_PROTOCOL_SET,w
  7465  09F0  00E0               	movwf	_value
  7466  09F1  0008               	return
  7467  09F2                     __end_of_PROTOCOL_SET:	
  7468                           
  7469                           	psect	text31
  7470  09FB                     __ptext31:	
  7471 ;; *************** function _PROTOCOL_SAV *****************
  7472 ;; Defined at:
  7473 ;;		line 107 in file "protocol.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;		None
  7476 ;; Auto vars:     Size  Location     Type
  7477 ;;		None
  7478 ;; Return value:  Size  Location     Type
  7479 ;;                  1    wreg      void 
  7480 ;; Registers used:
  7481 ;;		wreg, status,2, status,0, pclath, cstack
  7482 ;; Tracked objects:
  7483 ;;		On entry : 0/0
  7484 ;;		On exit  : 0/0
  7485 ;;		Unchanged: 0/0
  7486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7489 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7490 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7491 ;;Total ram usage:        1 bytes
  7492 ;; Hardware stack levels used:    1
  7493 ;; Hardware stack levels required when called:    6
  7494 ;; This function calls:
  7495 ;;		_DATAEE_WriteByte
  7496 ;; This function is called by:
  7497 ;;		_PROTOCOL_Loop
  7498 ;; This function uses a non-reentrant model
  7499 ;;
  7500                           
  7501                           
  7502                           ;psect for function _PROTOCOL_SAV
  7503  09FB                     _PROTOCOL_SAV:	
  7504                           
  7505                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
  7506                           
  7507                           ;incstack = 0
  7508                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  7509  09FB  0020               	movlb	0	; select bank0
  7510  09FC  0860               	movf	_value,w
  7511  09FD  00A4               	movwf	??_PROTOCOL_SAV
  7512  09FE  0824               	movf	??_PROTOCOL_SAV,w
  7513  09FF  00A1               	movwf	DATAEE_WriteByte@bData
  7514  0A00  3001               	movlw	1
  7515  0A01  318B  23B3         	fcall	_DATAEE_WriteByte
  7516  0A03  0008               	return
  7517  0A04                     __end_of_PROTOCOL_SAV:	
  7518                           
  7519                           	psect	text32
  7520  0BB3                     __ptext32:	
  7521 ;; *************** function _DATAEE_WriteByte *****************
  7522 ;; Defined at:
  7523 ;;		line 180 in file "mcc_generated_files/memory.c"
  7524 ;; Parameters:    Size  Location     Type
  7525 ;;  bAdd            1    wreg     unsigned char 
  7526 ;;  bData           1    1[BANK0 ] unsigned char 
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;  bAdd            1    2[BANK0 ] unsigned char 
  7529 ;;  GIEBitValue     1    3[BANK0 ] unsigned char 
  7530 ;; Return value:  Size  Location     Type
  7531 ;;                  1    wreg      void 
  7532 ;; Registers used:
  7533 ;;		wreg, status,2, status,0
  7534 ;; Tracked objects:
  7535 ;;		On entry : 0/0
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7539 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7540 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7543 ;;Total ram usage:        3 bytes
  7544 ;; Hardware stack levels used:    1
  7545 ;; Hardware stack levels required when called:    5
  7546 ;; This function calls:
  7547 ;;		Nothing
  7548 ;; This function is called by:
  7549 ;;		_PROTOCOL_Write_Device_Address
  7550 ;;		_PROTOCOL_SAV
  7551 ;; This function uses a non-reentrant model
  7552 ;;
  7553                           
  7554                           
  7555                           ;psect for function _DATAEE_WriteByte
  7556  0BB3                     _DATAEE_WriteByte:	
  7557                           
  7558                           ;incstack = 0
  7559                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  7560                           ;DATAEE_WriteByte@bAdd stored from wreg
  7561  0BB3  0020               	movlb	0	; select bank0
  7562  0BB4  00A2               	movwf	DATAEE_WriteByte@bAdd
  7563                           
  7564                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  7565  0BB5  01A3               	clrf	DATAEE_WriteByte@GIEBitValue
  7566                           
  7567                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  7568  0BB6  0822               	movf	DATAEE_WriteByte@bAdd,w
  7569  0BB7  0023               	movlb	3	; select bank3
  7570  0BB8  0091               	movwf	17	;volatile
  7571                           
  7572                           ;memory.c: 185: EEDATL = bData;
  7573  0BB9  0020               	movlb	0	; select bank0
  7574  0BBA  0821               	movf	DATAEE_WriteByte@bData,w
  7575  0BBB  0023               	movlb	3	; select bank3
  7576  0BBC  0093               	movwf	19	;volatile
  7577                           
  7578                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  7579  0BBD  1395               	bcf	21,7	;volsfr
  7580                           
  7581                           ;memory.c: 187: EECON1bits.CFGS = 0;
  7582  0BBE  1315               	bcf	21,6	;volsfr
  7583                           
  7584                           ;memory.c: 188: EECON1bits.WREN = 1;
  7585  0BBF  1515               	bsf	21,2	;volsfr
  7586                           
  7587                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  7588  0BC0  3000               	movlw	0
  7589  0BC1  1B8B               	btfsc	11,7	;volatile
  7590  0BC2  3001               	movlw	1
  7591  0BC3  0020               	movlb	0	; select bank0
  7592  0BC4  00A3               	movwf	DATAEE_WriteByte@GIEBitValue
  7593                           
  7594                           ;memory.c: 191: INTCONbits.GIE = 0;
  7595  0BC5  138B               	bcf	11,7	;volatile
  7596                           
  7597                           ;memory.c: 192: EECON2 = 0x55;
  7598  0BC6  3055               	movlw	85
  7599  0BC7  0023               	movlb	3	; select bank3
  7600  0BC8  0096               	movwf	22	;volsfr
  7601                           
  7602                           ;memory.c: 193: EECON2 = 0xAA;
  7603  0BC9  30AA               	movlw	170
  7604  0BCA  0096               	movwf	22	;volsfr
  7605                           
  7606                           ;memory.c: 194: EECON1bits.WR = 1;
  7607  0BCB  1495               	bsf	21,1	;volsfr
  7608  0BCC                     l480:	
  7609                           ;memory.c: 197: {
  7610                           
  7611                           ;memory.c: 196: while (EECON1bits.WR)
  7612                           
  7613  0BCC  1895               	btfsc	21,1	;volsfr
  7614  0BCD  2BCC               	goto	l480
  7615                           
  7616                           ;memory.c: 198: }
  7617                           ;memory.c: 200: EECON1bits.WREN = 0;
  7618  0BCE  1115               	bcf	21,2	;volsfr
  7619                           
  7620                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  7621  0BCF  0020               	movlb	0	; select bank0
  7622  0BD0  0C23               	rrf	DATAEE_WriteByte@GIEBitValue,w
  7623  0BD1  1C03               	skipc
  7624  0BD2  138B               	bcf	11,7	;volatile
  7625  0BD3  1803               	skipnc
  7626  0BD4  178B               	bsf	11,7	;volatile
  7627  0BD5  0008               	return
  7628  0BD6                     __end_of_DATAEE_WriteByte:	
  7629                           
  7630                           	psect	text33
  7631  0002                     __ptext33:	
  7632 ;; *************** function _PROTOCOL_EXT *****************
  7633 ;; Defined at:
  7634 ;;		line 116 in file "protocol.c"
  7635 ;; Parameters:    Size  Location     Type
  7636 ;;  char_buf        1    wreg     PTR unsigned char 
  7637 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  7638 ;; Auto vars:     Size  Location     Type
  7639 ;;  char_buf        1    1[BANK0 ] PTR unsigned char 
  7640 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
  7641 ;; Return value:  Size  Location     Type
  7642 ;;                  1    wreg      void 
  7643 ;; Registers used:
  7644 ;;		wreg, status,2, status,0
  7645 ;; Tracked objects:
  7646 ;;		On entry : 0/0
  7647 ;;		On exit  : 0/0
  7648 ;;		Unchanged: 0/0
  7649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7651 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7653 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7654 ;;Total ram usage:        1 bytes
  7655 ;; Hardware stack levels used:    1
  7656 ;; Hardware stack levels required when called:    5
  7657 ;; This function calls:
  7658 ;;		Nothing
  7659 ;; This function is called by:
  7660 ;;		_PROTOCOL_Loop
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           
  7665                           ;psect for function _PROTOCOL_EXT
  7666  0002                     _PROTOCOL_EXT:	
  7667                           
  7668                           ;incstack = 0
  7669                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0]
  7670  0002  0008               	return
  7671  0003                     __end_of_PROTOCOL_EXT:	
  7672                           
  7673                           	psect	text34
  7674  0B31                     __ptext34:	
  7675 ;; *************** function _EUSART_Read *****************
  7676 ;; Defined at:
  7677 ;;		line 112 in file "mcc_generated_files/eusart.c"
  7678 ;; Parameters:    Size  Location     Type
  7679 ;;		None
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;  readValue       1    2[BANK0 ] unsigned char 
  7682 ;; Return value:  Size  Location     Type
  7683 ;;                  1    wreg      unsigned char 
  7684 ;; Registers used:
  7685 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7694 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;Total ram usage:        2 bytes
  7696 ;; Hardware stack levels used:    1
  7697 ;; Hardware stack levels required when called:    5
  7698 ;; This function calls:
  7699 ;;		Nothing
  7700 ;; This function is called by:
  7701 ;;		_PROTOCOL_Loop
  7702 ;;		_getch
  7703 ;; This function uses a non-reentrant model
  7704 ;;
  7705                           
  7706                           
  7707                           ;psect for function _EUSART_Read
  7708  0B31                     _EUSART_Read:	
  7709                           
  7710                           ;eusart.c: 114: uint8_t readValue = 0;
  7711                           
  7712                           ;incstack = 0
  7713                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  7714  0B31  0020               	movlb	0	; select bank0
  7715  0B32  01A2               	clrf	EUSART_Read@readValue
  7716  0B33                     l4512:	
  7717                           ;eusart.c: 117: {
  7718                           
  7719                           ;eusart.c: 116: while(0 == eusartRxCount)
  7720                           
  7721  0B33  0861               	movf	_eusartRxCount,w	;volatile
  7722  0B34  1903               	btfsc	3,2
  7723  0B35  2B33               	goto	l4512
  7724                           
  7725                           ;eusart.c: 118: }
  7726                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  7727  0B36  0862               	movf	_eusartRxTail,w
  7728  0B37  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  7729  0B38  0086               	movwf	6
  7730  0B39  0187               	clrf	7
  7731  0B3A  0801               	movf	1,w
  7732  0B3B  00A1               	movwf	??_EUSART_Read
  7733  0B3C  0821               	movf	??_EUSART_Read,w
  7734  0B3D  00A2               	movwf	EUSART_Read@readValue
  7735  0B3E  3001               	movlw	1
  7736  0B3F  00A1               	movwf	??_EUSART_Read
  7737  0B40  0821               	movf	??_EUSART_Read,w
  7738  0B41  07E2               	addwf	_eusartRxTail,f	;volatile
  7739                           
  7740                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  7741  0B42  3008               	movlw	8
  7742  0B43  0262               	subwf	_eusartRxTail,w	;volatile
  7743  0B44  1803               	btfsc	3,0
  7744                           
  7745                           ;eusart.c: 122: {
  7746                           ;eusart.c: 123: eusartRxTail = 0;
  7747  0B45  01E2               	clrf	_eusartRxTail	;volatile
  7748                           
  7749                           ;eusart.c: 124: }
  7750                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  7751  0B46  0021               	movlb	1	; select bank1
  7752  0B47  1291               	bcf	17,5	;volatile
  7753                           
  7754                           ;eusart.c: 126: eusartRxCount--;
  7755  0B48  3001               	movlw	1
  7756  0B49  0020               	movlb	0	; select bank0
  7757  0B4A  02E1               	subwf	_eusartRxCount,f	;volatile
  7758                           
  7759                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  7760  0B4B  0021               	movlb	1	; select bank1
  7761  0B4C  1691               	bsf	17,5	;volatile
  7762                           
  7763                           ;eusart.c: 129: return readValue;
  7764  0B4D  0020               	movlb	0	; select bank0
  7765  0B4E  0822               	movf	EUSART_Read@readValue,w
  7766  0B4F  0008               	return
  7767  0B50                     __end_of_EUSART_Read:	
  7768                           
  7769                           	psect	text35
  7770  0E5E                     __ptext35:	
  7771 ;; *************** function _PROTOCOL_Initialize *****************
  7772 ;; Defined at:
  7773 ;;		line 59 in file "protocol.c"
  7774 ;; Parameters:    Size  Location     Type
  7775 ;;  device_id       2    2[BANK0 ] PTR const unsigned char 
  7776 ;;		 -> STR_1(8), 
  7777 ;;  start_handle    1    4[BANK0 ] PTR void 
  7778 ;;		 -> NULL(0), 
  7779 ;;  stop_handler    1    5[BANK0 ] PTR void 
  7780 ;;		 -> NULL(0), 
  7781 ;;  set_handler     1    6[BANK0 ] PTR void 
  7782 ;;		 -> NULL(0), 
  7783 ;;  inv_handler     2    7[BANK0 ] PTR void 
  7784 ;;		 -> inv_handler(1), 
  7785 ;;  scaler          1    9[BANK0 ] unsigned char 
  7786 ;; Auto vars:     Size  Location     Type
  7787 ;;		None
  7788 ;; Return value:  Size  Location     Type
  7789 ;;                  1    wreg      void 
  7790 ;; Registers used:
  7791 ;;		wreg, status,2, status,0, pclath, cstack
  7792 ;; Tracked objects:
  7793 ;;		On entry : 0/0
  7794 ;;		On exit  : 0/0
  7795 ;;		Unchanged: 0/0
  7796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7797 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7799 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7800 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7801 ;;Total ram usage:       10 bytes
  7802 ;; Hardware stack levels used:    1
  7803 ;; Hardware stack levels required when called:    6
  7804 ;; This function calls:
  7805 ;;		_DATAEE_ReadByte
  7806 ;; This function is called by:
  7807 ;;		_main
  7808 ;; This function uses a non-reentrant model
  7809 ;;
  7810                           
  7811                           
  7812                           ;psect for function _PROTOCOL_Initialize
  7813  0E5E                     _PROTOCOL_Initialize:	
  7814                           
  7815                           ;protocol.c: 60: device_id_ = device_id;
  7816                           
  7817                           ;incstack = 0
  7818                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7819  0E5E  0020               	movlb	0	; select bank0
  7820  0E5F  0823               	movf	PROTOCOL_Initialize@device_id+1,w
  7821  0E60  0021               	movlb	1	; select bank1
  7822  0E61  00E3               	movwf	(_device_id_+1)^(0+128)
  7823  0E62  0020               	movlb	0	; select bank0
  7824  0E63  0822               	movf	PROTOCOL_Initialize@device_id,w
  7825  0E64  0021               	movlb	1	; select bank1
  7826  0E65  00E2               	movwf	_device_id_^(0+128)
  7827                           
  7828                           ;protocol.c: 61: PROTOCOL_Start_Handler = start_handler;
  7829  0E66  0020               	movlb	0	; select bank0
  7830  0E67  0824               	movf	PROTOCOL_Initialize@start_handler,w
  7831  0E68  00AA               	movwf	??_PROTOCOL_Initialize
  7832  0E69  3000               	movlw	0
  7833  0E6A  00AB               	movwf	??_PROTOCOL_Initialize+1
  7834  0E6B  082A               	movf	??_PROTOCOL_Initialize,w
  7835  0E6C  0021               	movlb	1	; select bank1
  7836  0E6D  00E8               	movwf	_PROTOCOL_Start_Handler^(0+128)
  7837  0E6E  0020               	movlb	0	; select bank0
  7838  0E6F  082B               	movf	??_PROTOCOL_Initialize+1,w
  7839  0E70  0021               	movlb	1	; select bank1
  7840  0E71  00E9               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  7841                           
  7842                           ;protocol.c: 62: PROTOCOL_Stop_Handler = stop_handler;
  7843  0E72  0020               	movlb	0	; select bank0
  7844  0E73  0825               	movf	PROTOCOL_Initialize@stop_handler,w
  7845  0E74  00AA               	movwf	??_PROTOCOL_Initialize
  7846  0E75  3000               	movlw	0
  7847  0E76  00AB               	movwf	??_PROTOCOL_Initialize+1
  7848  0E77  082A               	movf	??_PROTOCOL_Initialize,w
  7849  0E78  0021               	movlb	1	; select bank1
  7850  0E79  00E6               	movwf	_PROTOCOL_Stop_Handler^(0+128)
  7851  0E7A  0020               	movlb	0	; select bank0
  7852  0E7B  082B               	movf	??_PROTOCOL_Initialize+1,w
  7853  0E7C  0021               	movlb	1	; select bank1
  7854  0E7D  00E7               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+128)
  7855                           
  7856                           ;protocol.c: 63: PROTOCOL_Set_Handler = set_handler;
  7857  0E7E  0020               	movlb	0	; select bank0
  7858  0E7F  0826               	movf	PROTOCOL_Initialize@set_handler,w
  7859  0E80  00AA               	movwf	??_PROTOCOL_Initialize
  7860  0E81  3000               	movlw	0
  7861  0E82  00AB               	movwf	??_PROTOCOL_Initialize+1
  7862  0E83  082A               	movf	??_PROTOCOL_Initialize,w
  7863  0E84  0021               	movlb	1	; select bank1
  7864  0E85  00E4               	movwf	_PROTOCOL_Set_Handler^(0+128)
  7865  0E86  0020               	movlb	0	; select bank0
  7866  0E87  082B               	movf	??_PROTOCOL_Initialize+1,w
  7867  0E88  0021               	movlb	1	; select bank1
  7868  0E89  00E5               	movwf	(_PROTOCOL_Set_Handler+1)^(0+128)
  7869                           
  7870                           ;protocol.c: 66: value = DATAEE_ReadByte(1);
  7871  0E8A  3001               	movlw	1
  7872  0E8B  318A  220E  318E   	fcall	_DATAEE_ReadByte
  7873  0E8E  0020               	movlb	0	; select bank0
  7874  0E8F  00AA               	movwf	??_PROTOCOL_Initialize
  7875  0E90  082A               	movf	??_PROTOCOL_Initialize,w
  7876  0E91  00E0               	movwf	_value
  7877                           
  7878                           ;protocol.c: 68: slave_address = DATAEE_ReadByte(0);
  7879  0E92  3000               	movlw	0
  7880  0E93  318A  220E         	fcall	_DATAEE_ReadByte
  7881  0E95  0020               	movlb	0	; select bank0
  7882  0E96  00AA               	movwf	??_PROTOCOL_Initialize
  7883  0E97  082A               	movf	??_PROTOCOL_Initialize,w
  7884  0E98  0021               	movlb	1	; select bank1
  7885  0E99  00C3               	movwf	_slave_address^(0+128)
  7886                           
  7887                           ;protocol.c: 71: readbuf.status = COMPLETE;
  7888  0E9A  3003               	movlw	3
  7889  0E9B  0020               	movlb	0	; select bank0
  7890  0E9C  00AA               	movwf	??_PROTOCOL_Initialize
  7891  0E9D  082A               	movf	??_PROTOCOL_Initialize,w
  7892  0E9E  0021               	movlb	1	; select bank1
  7893  0E9F  00CC               	movwf	(_readbuf^(0+128)+4)
  7894                           
  7895                           ;protocol.c: 72: PROTOCOL_Inv_Handler = inv_handler;
  7896  0EA0  0020               	movlb	0	; select bank0
  7897  0EA1  0828               	movf	PROTOCOL_Initialize@inv_handler+1,w
  7898  0EA2  0021               	movlb	1	; select bank1
  7899  0EA3  00B3               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+128)
  7900  0EA4  0020               	movlb	0	; select bank0
  7901  0EA5  0827               	movf	PROTOCOL_Initialize@inv_handler,w
  7902  0EA6  0021               	movlb	1	; select bank1
  7903  0EA7  00B2               	movwf	_PROTOCOL_Inv_Handler^(0+128)
  7904                           
  7905                           ;protocol.c: 73: tmr_scaler = scaler;
  7906  0EA8  0020               	movlb	0	; select bank0
  7907  0EA9  0829               	movf	PROTOCOL_Initialize@scaler,w
  7908  0EAA  00AA               	movwf	??_PROTOCOL_Initialize
  7909  0EAB  082A               	movf	??_PROTOCOL_Initialize,w
  7910  0EAC  0021               	movlb	1	; select bank1
  7911  0EAD  00EA               	movwf	_tmr_scaler^(0+128)
  7912  0EAE  0008               	return
  7913  0EAF                     __end_of_PROTOCOL_Initialize:	
  7914                           
  7915                           	psect	text36
  7916  0A0E                     __ptext36:	
  7917 ;; *************** function _DATAEE_ReadByte *****************
  7918 ;; Defined at:
  7919 ;;		line 204 in file "mcc_generated_files/memory.c"
  7920 ;; Parameters:    Size  Location     Type
  7921 ;;  bAdd            1    wreg     unsigned char 
  7922 ;; Auto vars:     Size  Location     Type
  7923 ;;  bAdd            1    1[BANK0 ] unsigned char 
  7924 ;; Return value:  Size  Location     Type
  7925 ;;                  1    wreg      unsigned char 
  7926 ;; Registers used:
  7927 ;;		wreg
  7928 ;; Tracked objects:
  7929 ;;		On entry : 0/0
  7930 ;;		On exit  : 0/0
  7931 ;;		Unchanged: 0/0
  7932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7934 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7936 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7937 ;;Total ram usage:        1 bytes
  7938 ;; Hardware stack levels used:    1
  7939 ;; Hardware stack levels required when called:    5
  7940 ;; This function calls:
  7941 ;;		Nothing
  7942 ;; This function is called by:
  7943 ;;		_PROTOCOL_Initialize
  7944 ;; This function uses a non-reentrant model
  7945 ;;
  7946                           
  7947                           
  7948                           ;psect for function _DATAEE_ReadByte
  7949  0A0E                     _DATAEE_ReadByte:	
  7950                           
  7951                           ;incstack = 0
  7952                           ; Regs used in _DATAEE_ReadByte: [wreg]
  7953                           ;DATAEE_ReadByte@bAdd stored from wreg
  7954  0A0E  0020               	movlb	0	; select bank0
  7955  0A0F  00A1               	movwf	DATAEE_ReadByte@bAdd
  7956                           
  7957                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  7958  0A10  0821               	movf	DATAEE_ReadByte@bAdd,w
  7959  0A11  0023               	movlb	3	; select bank3
  7960  0A12  0091               	movwf	17	;volatile
  7961                           
  7962                           ;memory.c: 207: EECON1bits.CFGS = 0;
  7963  0A13  1315               	bcf	21,6	;volsfr
  7964                           
  7965                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  7966  0A14  1395               	bcf	21,7	;volsfr
  7967                           
  7968                           ;memory.c: 209: EECON1bits.RD = 1;
  7969  0A15  1415               	bsf	21,0	;volsfr
  7970                           
  7971                           ;memory.c: 210: __nop();
  7972  0A16  0000               	nop
  7973                           
  7974                           ;memory.c: 211: __nop();
  7975  0A17  0000               	nop
  7976                           
  7977                           ;memory.c: 213: return (EEDATL);
  7978  0A18  0023               	movlb	3	; select bank3
  7979  0A19  0813               	movf	19,w	;volatile
  7980  0A1A  0008               	return
  7981  0A1B                     __end_of_DATAEE_ReadByte:	
  7982                           
  7983                           	psect	text37
  7984  0B13                     __ptext37:	
  7985 ;; *************** function _PIN_MANAGER_Initialize *****************
  7986 ;; Defined at:
  7987 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  7988 ;; Parameters:    Size  Location     Type
  7989 ;;		None
  7990 ;; Auto vars:     Size  Location     Type
  7991 ;;		None
  7992 ;; Return value:  Size  Location     Type
  7993 ;;                  1    wreg      void 
  7994 ;; Registers used:
  7995 ;;		wreg, status,2
  7996 ;; Tracked objects:
  7997 ;;		On entry : 0/0
  7998 ;;		On exit  : 0/0
  7999 ;;		Unchanged: 0/0
  8000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8005 ;;Total ram usage:        0 bytes
  8006 ;; Hardware stack levels used:    1
  8007 ;; Hardware stack levels required when called:    5
  8008 ;; This function calls:
  8009 ;;		Nothing
  8010 ;; This function is called by:
  8011 ;;		_main
  8012 ;;		_SYSTEM_Initialize
  8013 ;; This function uses a non-reentrant model
  8014 ;;
  8015                           
  8016                           
  8017                           ;psect for function _PIN_MANAGER_Initialize
  8018  0B13                     _PIN_MANAGER_Initialize:	
  8019                           
  8020                           ;pin_manager.c: 56: LATA = 0x00;
  8021                           
  8022                           ;incstack = 0
  8023                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8024  0B13  0022               	movlb	2	; select bank2
  8025  0B14  018C               	clrf	12	;volatile
  8026                           
  8027                           ;pin_manager.c: 57: LATB = 0x00;
  8028  0B15  018D               	clrf	13	;volatile
  8029                           
  8030                           ;pin_manager.c: 58: LATC = 0x00;
  8031  0B16  018E               	clrf	14	;volatile
  8032                           
  8033                           ;pin_manager.c: 63: TRISA = 0x3F;
  8034  0B17  303F               	movlw	63
  8035  0B18  0021               	movlb	1	; select bank1
  8036  0B19  008C               	movwf	12	;volatile
  8037                           
  8038                           ;pin_manager.c: 64: TRISB = 0xF0;
  8039  0B1A  30F0               	movlw	240
  8040  0B1B  008D               	movwf	13	;volatile
  8041                           
  8042                           ;pin_manager.c: 65: TRISC = 0x7F;
  8043  0B1C  307F               	movlw	127
  8044  0B1D  008E               	movwf	14	;volatile
  8045                           
  8046                           ;pin_manager.c: 70: ANSELC = 0x4F;
  8047  0B1E  304F               	movlw	79
  8048  0B1F  0023               	movlb	3	; select bank3
  8049  0B20  008E               	movwf	14	;volatile
  8050                           
  8051                           ;pin_manager.c: 71: ANSELB = 0x00;
  8052  0B21  018D               	clrf	13	;volatile
  8053                           
  8054                           ;pin_manager.c: 72: ANSELA = 0x17;
  8055  0B22  3017               	movlw	23
  8056  0B23  008C               	movwf	12	;volatile
  8057                           
  8058                           ;pin_manager.c: 77: WPUB = 0x00;
  8059  0B24  0024               	movlb	4	; select bank4
  8060  0B25  018D               	clrf	13	;volatile
  8061                           
  8062                           ;pin_manager.c: 78: WPUA = 0x3F;
  8063  0B26  303F               	movlw	63
  8064  0B27  008C               	movwf	12	;volatile
  8065                           
  8066                           ;pin_manager.c: 79: WPUC = 0x7F;
  8067  0B28  307F               	movlw	127
  8068  0B29  008E               	movwf	14	;volatile
  8069                           
  8070                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  8071  0B2A  0021               	movlb	1	; select bank1
  8072  0B2B  1395               	bcf	21,7	;volatile
  8073                           
  8074                           ;pin_manager.c: 86: APFCON1 = 0x00;
  8075  0B2C  0022               	movlb	2	; select bank2
  8076  0B2D  019E               	clrf	30	;volatile
  8077                           
  8078                           ;pin_manager.c: 87: APFCON0 = 0x84;
  8079  0B2E  3084               	movlw	132
  8080  0B2F  009D               	movwf	29	;volatile
  8081  0B30  0008               	return
  8082  0B31                     __end_of_PIN_MANAGER_Initialize:	
  8083                           
  8084                           	psect	text38
  8085  09D3                     __ptext38:	
  8086 ;; *************** function _OSCILLATOR_Initialize *****************
  8087 ;; Defined at:
  8088 ;;		line 81 in file "mcc_generated_files/mcc.c"
  8089 ;; Parameters:    Size  Location     Type
  8090 ;;		None
  8091 ;; Auto vars:     Size  Location     Type
  8092 ;;		None
  8093 ;; Return value:  Size  Location     Type
  8094 ;;                  1    wreg      void 
  8095 ;; Registers used:
  8096 ;;		wreg, status,2
  8097 ;; Tracked objects:
  8098 ;;		On entry : 0/0
  8099 ;;		On exit  : 0/0
  8100 ;;		Unchanged: 0/0
  8101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;Total ram usage:        0 bytes
  8107 ;; Hardware stack levels used:    1
  8108 ;; Hardware stack levels required when called:    5
  8109 ;; This function calls:
  8110 ;;		Nothing
  8111 ;; This function is called by:
  8112 ;;		_main
  8113 ;;		_SYSTEM_Initialize
  8114 ;; This function uses a non-reentrant model
  8115 ;;
  8116                           
  8117                           
  8118                           ;psect for function _OSCILLATOR_Initialize
  8119  09D3                     _OSCILLATOR_Initialize:	
  8120                           
  8121                           ;mcc.c: 84: OSCCON = 0x68;
  8122                           
  8123                           ;incstack = 0
  8124                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8125  09D3  3068               	movlw	104
  8126  09D4  0021               	movlb	1	; select bank1
  8127  09D5  0099               	movwf	25	;volatile
  8128                           
  8129                           ;mcc.c: 86: OSCTUNE = 0x00;
  8130  09D6  0198               	clrf	24	;volatile
  8131  09D7  0008               	return
  8132  09D8                     __end_of_OSCILLATOR_Initialize:	
  8133                           
  8134                           	psect	text39
  8135  0A72                     __ptext39:	
  8136 ;; *************** function _I2C2_Initialize *****************
  8137 ;; Defined at:
  8138 ;;		line 198 in file "mcc_generated_files/i2c2.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;		None
  8141 ;; Auto vars:     Size  Location     Type
  8142 ;;		None
  8143 ;; Return value:  Size  Location     Type
  8144 ;;                  1    wreg      void 
  8145 ;; Registers used:
  8146 ;;		wreg, status,2
  8147 ;; Tracked objects:
  8148 ;;		On entry : 0/0
  8149 ;;		On exit  : 0/0
  8150 ;;		Unchanged: 0/0
  8151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;Total ram usage:        1 bytes
  8157 ;; Hardware stack levels used:    1
  8158 ;; Hardware stack levels required when called:    5
  8159 ;; This function calls:
  8160 ;;		Nothing
  8161 ;; This function is called by:
  8162 ;;		_main
  8163 ;;		_SYSTEM_Initialize
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           
  8168                           ;psect for function _I2C2_Initialize
  8169  0A72                     _I2C2_Initialize:	
  8170                           
  8171                           ;i2c2.c: 200: i2c2_object.pTrHead = i2c2_tr_queue;
  8172                           
  8173                           ;incstack = 0
  8174                           ; Regs used in _I2C2_Initialize: [wreg+status,2]
  8175  0A72  30D9               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  8176  0A73  0020               	movlb	0	; select bank0
  8177  0A74  00A1               	movwf	??_I2C2_Initialize
  8178  0A75  0821               	movf	??_I2C2_Initialize,w
  8179  0A76  00DB               	movwf	low ((_i2c2_object| 0+1))
  8180                           
  8181                           ;i2c2.c: 201: i2c2_object.pTrTail = i2c2_tr_queue;
  8182  0A77  30D9               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  8183  0A78  00A1               	movwf	??_I2C2_Initialize
  8184  0A79  0821               	movf	??_I2C2_Initialize,w
  8185  0A7A  00DA               	movwf	_i2c2_object
  8186                           
  8187                           ;i2c2.c: 202: i2c2_object.trStatus.s.empty = 1;
  8188  0A7B  14DC               	bsf	_i2c2_object+2,1
  8189                           
  8190                           ;i2c2.c: 203: i2c2_object.trStatus.s.full = 0;
  8191  0A7C  105C               	bcf	_i2c2_object+2,0
  8192                           
  8193                           ;i2c2.c: 205: i2c2_object.i2cErrors = 0;
  8194  0A7D  01DE               	clrf	_i2c2_object+4
  8195                           
  8196                           ;i2c2.c: 208: SSP2STAT = 0x00;
  8197  0A7E  0024               	movlb	4	; select bank4
  8198  0A7F  019C               	clrf	28	;volatile
  8199                           
  8200                           ;i2c2.c: 210: SSP2CON1 = 0x28;
  8201  0A80  3028               	movlw	40
  8202  0A81  009D               	movwf	29	;volatile
  8203                           
  8204                           ;i2c2.c: 212: SSP2CON3 = 0x00;
  8205  0A82  019F               	clrf	31	;volatile
  8206                           
  8207                           ;i2c2.c: 214: SSP2ADD = 0x09;
  8208  0A83  3009               	movlw	9
  8209  0A84  009A               	movwf	26	;volatile
  8210                           
  8211                           ;i2c2.c: 218: PIR4bits.SSP2IF = 0;
  8212  0A85  0020               	movlb	0	; select bank0
  8213  0A86  1014               	bcf	20,0	;volatile
  8214                           
  8215                           ;i2c2.c: 220: PIE4bits.SSP2IE = 1;
  8216  0A87  0021               	movlb	1	; select bank1
  8217  0A88  1414               	bsf	20,0	;volatile
  8218  0A89  0008               	return
  8219  0A8A                     __end_of_I2C2_Initialize:	
  8220                           
  8221                           	psect	text40
  8222  0B70                     __ptext40:	
  8223 ;; *************** function _I2C1_Initialize *****************
  8224 ;; Defined at:
  8225 ;;		line 30 in file "mcc_generated_files/i2c1.c"
  8226 ;; Parameters:    Size  Location     Type
  8227 ;;		None
  8228 ;; Auto vars:     Size  Location     Type
  8229 ;;		None
  8230 ;; Return value:  Size  Location     Type
  8231 ;;                  1    wreg      void 
  8232 ;; Registers used:
  8233 ;;		wreg, status,2, status,0, pclath, cstack
  8234 ;; Tracked objects:
  8235 ;;		On entry : 0/0
  8236 ;;		On exit  : 0/0
  8237 ;;		Unchanged: 0/0
  8238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8241 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8242 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8243 ;;Total ram usage:        2 bytes
  8244 ;; Hardware stack levels used:    1
  8245 ;; Hardware stack levels required when called:    6
  8246 ;; This function calls:
  8247 ;;		_PROTOCOL_Read_Device_Address
  8248 ;; This function is called by:
  8249 ;;		_main
  8250 ;;		_SYSTEM_Initialize
  8251 ;; This function uses a non-reentrant model
  8252 ;;
  8253                           
  8254                           
  8255                           ;psect for function _I2C1_Initialize
  8256  0B70                     _I2C1_Initialize:	
  8257                           
  8258                           ;i2c1.c: 34: _delay((unsigned long)((2000)*(4000000/4000.0)));
  8259                           
  8260                           ;incstack = 0
  8261                           ; Regs used in _I2C1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8262  0B70  300B               	movlw	11
  8263  0B71  0020               	movlb	0	; select bank0
  8264  0B72  00A2               	movwf	??_I2C1_Initialize+1
  8265  0B73  3026               	movlw	38
  8266  0B74  00A1               	movwf	??_I2C1_Initialize
  8267  0B75  305D               	movlw	93
  8268  0B76                     u4627:	
  8269  0B76  0B89               	decfsz	9,f
  8270  0B77  2B76               	goto	u4627
  8271  0B78  0BA1               	decfsz	??_I2C1_Initialize,f
  8272  0B79  2B76               	goto	u4627
  8273  0B7A  0BA2               	decfsz	??_I2C1_Initialize+1,f
  8274  0B7B  2B76               	goto	u4627
  8275  0B7C  3200               	nop2
  8276                           
  8277                           ;i2c1.c: 38: SSP1STAT = 0x80;
  8278  0B7D  3080               	movlw	128
  8279  0B7E  0024               	movlb	4	; select bank4
  8280  0B7F  0094               	movwf	20	;volatile
  8281                           
  8282                           ;i2c1.c: 40: SSP1CON1 = 0x26;
  8283  0B80  3026               	movlw	38
  8284  0B81  0095               	movwf	21	;volatile
  8285                           
  8286                           ;i2c1.c: 42: SSP1CON2 = 0x81;
  8287  0B82  3081               	movlw	129
  8288  0B83  0096               	movwf	22	;volatile
  8289                           
  8290                           ;i2c1.c: 44: SSP1CON3 = 0x00;
  8291  0B84  0197               	clrf	23	;volatile
  8292                           
  8293                           ;i2c1.c: 46: SSP1MSK = (0x7F << 1);
  8294  0B85  30FE               	movlw	254
  8295  0B86  0093               	movwf	19	;volatile
  8296                           
  8297                           ;i2c1.c: 48: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  8298  0B87  3189  21B6         	fcall	_PROTOCOL_Read_Device_Address
  8299  0B89  0709               	addwf	9,w
  8300  0B8A  0024               	movlb	4	; select bank4
  8301  0B8B  0092               	movwf	18	;volatile
  8302                           
  8303                           ;i2c1.c: 51: PIR1bits.SSP1IF = 0;
  8304  0B8C  0020               	movlb	0	; select bank0
  8305  0B8D  1191               	bcf	17,3	;volatile
  8306                           
  8307                           ;i2c1.c: 53: PIE1bits.SSP1IE = 1;
  8308  0B8E  0021               	movlb	1	; select bank1
  8309  0B8F  1591               	bsf	17,3	;volatile
  8310  0B90  0008               	return
  8311  0B91                     __end_of_I2C1_Initialize:	
  8312                           
  8313                           	psect	text41
  8314  09B6                     __ptext41:	
  8315 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  8316 ;; Defined at:
  8317 ;;		line 89 in file "protocol.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;		None
  8320 ;; Auto vars:     Size  Location     Type
  8321 ;;		None
  8322 ;; Return value:  Size  Location     Type
  8323 ;;                  1    wreg      unsigned char 
  8324 ;; Registers used:
  8325 ;;		wreg
  8326 ;; Tracked objects:
  8327 ;;		On entry : 0/0
  8328 ;;		On exit  : 0/0
  8329 ;;		Unchanged: 0/0
  8330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8335 ;;Total ram usage:        0 bytes
  8336 ;; Hardware stack levels used:    1
  8337 ;; Hardware stack levels required when called:    5
  8338 ;; This function calls:
  8339 ;;		Nothing
  8340 ;; This function is called by:
  8341 ;;		_I2C1_Initialize
  8342 ;;		_PROTOCOL_Loop
  8343 ;; This function uses a non-reentrant model
  8344 ;;
  8345                           
  8346                           
  8347                           ;psect for function _PROTOCOL_Read_Device_Address
  8348  09B6                     _PROTOCOL_Read_Device_Address:	
  8349                           
  8350                           ;protocol.c: 90: return slave_address;
  8351                           
  8352                           ;incstack = 0
  8353                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  8354  09B6  0021               	movlb	1	; select bank1
  8355  09B7  0843               	movf	_slave_address^(0+128),w
  8356  09B8  0008               	return
  8357  09B9                     __end_of_PROTOCOL_Read_Device_Address:	
  8358                           
  8359                           	psect	text42
  8360  0A8A                     __ptext42:	
  8361 ;; *************** function _EUSART_Initialize *****************
  8362 ;; Defined at:
  8363 ;;		line 75 in file "mcc_generated_files/eusart.c"
  8364 ;; Parameters:    Size  Location     Type
  8365 ;;		None
  8366 ;; Auto vars:     Size  Location     Type
  8367 ;;		None
  8368 ;; Return value:  Size  Location     Type
  8369 ;;                  1    wreg      void 
  8370 ;; Registers used:
  8371 ;;		wreg, status,2
  8372 ;; Tracked objects:
  8373 ;;		On entry : 0/0
  8374 ;;		On exit  : 0/0
  8375 ;;		Unchanged: 0/0
  8376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8380 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8381 ;;Total ram usage:        1 bytes
  8382 ;; Hardware stack levels used:    1
  8383 ;; Hardware stack levels required when called:    5
  8384 ;; This function calls:
  8385 ;;		Nothing
  8386 ;; This function is called by:
  8387 ;;		_main
  8388 ;;		_SYSTEM_Initialize
  8389 ;; This function uses a non-reentrant model
  8390 ;;
  8391                           
  8392                           
  8393                           ;psect for function _EUSART_Initialize
  8394  0A8A                     _EUSART_Initialize:	
  8395                           
  8396                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  8397                           
  8398                           ;incstack = 0
  8399                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  8400  0A8A  0021               	movlb	1	; select bank1
  8401  0A8B  1291               	bcf	17,5	;volatile
  8402                           
  8403                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  8404  0A8C  1211               	bcf	17,4	;volatile
  8405                           
  8406                           ;eusart.c: 84: BAUDCON = 0x08;
  8407  0A8D  3008               	movlw	8
  8408  0A8E  0023               	movlb	3	; select bank3
  8409  0A8F  009F               	movwf	31	;volatile
  8410                           
  8411                           ;eusart.c: 87: RCSTA = 0x90;
  8412  0A90  3090               	movlw	144
  8413  0A91  009D               	movwf	29	;volatile
  8414                           
  8415                           ;eusart.c: 90: TXSTA = 0x24;
  8416  0A92  3024               	movlw	36
  8417  0A93  009E               	movwf	30	;volatile
  8418                           
  8419                           ;eusart.c: 93: SPBRGL = 0x67;
  8420  0A94  3067               	movlw	103
  8421  0A95  009B               	movwf	27	;volatile
  8422                           
  8423                           ;eusart.c: 96: SPBRGH = 0x00;
  8424  0A96  019C               	clrf	28	;volatile
  8425                           
  8426                           ;eusart.c: 100: eusartTxHead = 0;
  8427  0A97  01FC               	clrf	_eusartTxHead	;volatile
  8428                           
  8429                           ;eusart.c: 101: eusartTxTail = 0;
  8430  0A98  01FB               	clrf	_eusartTxTail	;volatile
  8431                           
  8432                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  8433  0A99  3008               	movlw	8
  8434  0A9A  0020               	movlb	0	; select bank0
  8435  0A9B  00A1               	movwf	??_EUSART_Initialize
  8436  0A9C  0821               	movf	??_EUSART_Initialize,w
  8437  0A9D  00FA               	movwf	_eusartTxBufferRemaining	;volatile
  8438                           
  8439                           ;eusart.c: 104: eusartRxHead = 0;
  8440  0A9E  01E3               	clrf	_eusartRxHead	;volatile
  8441                           
  8442                           ;eusart.c: 105: eusartRxTail = 0;
  8443  0A9F  01E2               	clrf	_eusartRxTail	;volatile
  8444                           
  8445                           ;eusart.c: 106: eusartRxCount = 0;
  8446  0AA0  01E1               	clrf	_eusartRxCount	;volatile
  8447                           
  8448                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  8449  0AA1  0021               	movlb	1	; select bank1
  8450  0AA2  1691               	bsf	17,5	;volatile
  8451  0AA3  0008               	return
  8452  0AA4                     __end_of_EUSART_Initialize:	
  8453                           
  8454                           	psect	intentry
  8455  0004                     __pintentry:	
  8456 ;; *************** function _INTERRUPT_InterruptManager *****************
  8457 ;; Defined at:
  8458 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8459 ;; Parameters:    Size  Location     Type
  8460 ;;		None
  8461 ;; Auto vars:     Size  Location     Type
  8462 ;;		None
  8463 ;; Return value:  Size  Location     Type
  8464 ;;                  1    wreg      void 
  8465 ;; Registers used:
  8466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8467 ;; Tracked objects:
  8468 ;;		On entry : 0/0
  8469 ;;		On exit  : 0/0
  8470 ;;		Unchanged: 0/0
  8471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8475 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8476 ;;Total ram usage:        1 bytes
  8477 ;; Hardware stack levels used:    1
  8478 ;; Hardware stack levels required when called:    4
  8479 ;; This function calls:
  8480 ;;		_EUSART_Receive_ISR
  8481 ;;		_EUSART_Transmit_ISR
  8482 ;;		_I2C1_ISR
  8483 ;;		_I2C2_BusCollisionISR
  8484 ;;		_I2C2_ISR
  8485 ;; This function is called by:
  8486 ;;		Interrupt level 1
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490  0004                     _INTERRUPT_InterruptManager:	
  8491                           
  8492                           ;incstack = 0
  8493  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  8494                           
  8495                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8496  0005  3180               	pagesel	$
  8497  0006  0020               	movlb	0	; select bank0
  8498  0007  087F               	movf	127,w
  8499  0008  00A0               	movwf	??_INTERRUPT_InterruptManager
  8500                           
  8501                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  8502  0009  1F0B               	btfss	11,6	;volatile
  8503  000A  2815               	goto	i1l323
  8504  000B  0021               	movlb	1	; select bank1
  8505  000C  1E11               	btfss	17,4	;volatile
  8506  000D  2815               	goto	i1l323
  8507  000E  0020               	movlb	0	; select bank0
  8508  000F  1E11               	btfss	17,4	;volatile
  8509  0010  2815               	goto	i1l323
  8510                           
  8511                           ;interrupt_manager.c: 55: {
  8512                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  8513  0011  318A  22BF  3180   	fcall	_EUSART_Transmit_ISR
  8514                           
  8515                           ;interrupt_manager.c: 57: }
  8516  0014  2843               	goto	i1l333
  8517  0015                     i1l323:	
  8518                           
  8519                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  8520  0015  1F0B               	btfss	11,6	;volatile
  8521  0016  2821               	goto	i1l325
  8522  0017  0021               	movlb	1	; select bank1
  8523  0018  1E91               	btfss	17,5	;volatile
  8524  0019  2821               	goto	i1l325
  8525  001A  0020               	movlb	0	; select bank0
  8526  001B  1E91               	btfss	17,5	;volatile
  8527  001C  2821               	goto	i1l325
  8528                           
  8529                           ;interrupt_manager.c: 59: {
  8530                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  8531  001D  318A  22A4  3180   	fcall	_EUSART_Receive_ISR
  8532                           
  8533                           ;interrupt_manager.c: 61: }
  8534  0020  2843               	goto	i1l333
  8535  0021                     i1l325:	
  8536                           
  8537                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  8538  0021  1F0B               	btfss	11,6	;volatile
  8539  0022  282D               	goto	i1l327
  8540  0023  0021               	movlb	1	; select bank1
  8541  0024  1D91               	btfss	17,3	;volatile
  8542  0025  282D               	goto	i1l327
  8543  0026  0020               	movlb	0	; select bank0
  8544  0027  1D91               	btfss	17,3	;volatile
  8545  0028  282D               	goto	i1l327
  8546                           
  8547                           ;interrupt_manager.c: 63: {
  8548                           ;interrupt_manager.c: 64: I2C1_ISR();
  8549  0029  318C  2420  3180   	fcall	_I2C1_ISR
  8550                           
  8551                           ;interrupt_manager.c: 65: }
  8552  002C  2843               	goto	i1l333
  8553  002D                     i1l327:	
  8554                           
  8555                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE4bits.BCL2IE == 1 && PIR4bi
      +                          ts.BCL2IF == 1)
  8556  002D  1F0B               	btfss	11,6	;volatile
  8557  002E  2839               	goto	i1l329
  8558  002F  0021               	movlb	1	; select bank1
  8559  0030  1C94               	btfss	20,1	;volatile
  8560  0031  2839               	goto	i1l329
  8561  0032  0020               	movlb	0	; select bank0
  8562  0033  1C94               	btfss	20,1	;volatile
  8563  0034  2839               	goto	i1l329
  8564                           
  8565                           ;interrupt_manager.c: 67: {
  8566                           ;interrupt_manager.c: 68: I2C2_BusCollisionISR();
  8567  0035  3189  21A9  3180   	fcall	_I2C2_BusCollisionISR
  8568                           
  8569                           ;interrupt_manager.c: 69: }
  8570  0038  2843               	goto	i1l333
  8571  0039                     i1l329:	
  8572                           
  8573                           ;interrupt_manager.c: 70: else if(INTCONbits.PEIE == 1 && PIE4bits.SSP2IE == 1 && PIR4bi
      +                          ts.SSP2IF == 1)
  8574  0039  1F0B               	btfss	11,6	;volatile
  8575  003A  2843               	goto	i1l333
  8576  003B  0021               	movlb	1	; select bank1
  8577  003C  1C14               	btfss	20,0	;volatile
  8578  003D  2843               	goto	i1l333
  8579  003E  0020               	movlb	0	; select bank0
  8580  003F  1C14               	btfss	20,0	;volatile
  8581  0040  2843               	goto	i1l333
  8582                           
  8583                           ;interrupt_manager.c: 71: {
  8584                           ;interrupt_manager.c: 72: I2C2_ISR();
  8585  0041  3183  23E7         	fcall	_I2C2_ISR
  8586  0043                     i1l333:	
  8587                           ;interrupt_manager.c: 74: else
  8588                           ;interrupt_manager.c: 75: {
  8589                           
  8590                           ;interrupt_manager.c: 73: }
  8591                           
  8592  0043  0020               	movlb	0	; select bank0
  8593  0044  0820               	movf	??_INTERRUPT_InterruptManager,w
  8594  0045  00FF               	movwf	127
  8595  0046  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  8596  0047  0009               	retfie
  8597  0048                     __end_of_INTERRUPT_InterruptManager:	
  8598                           
  8599                           	psect	text44
  8600  03E7                     __ptext44:	
  8601 ;; *************** function _I2C2_ISR *****************
  8602 ;; Defined at:
  8603 ;;		line 233 in file "mcc_generated_files/i2c2.c"
  8604 ;; Parameters:    Size  Location     Type
  8605 ;;		None
  8606 ;; Auto vars:     Size  Location     Type
  8607 ;;		None
  8608 ;; Return value:  Size  Location     Type
  8609 ;;                  1    wreg      void 
  8610 ;; Registers used:
  8611 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8612 ;; Tracked objects:
  8613 ;;		On entry : 0/0
  8614 ;;		On exit  : 0/0
  8615 ;;		Unchanged: 0/0
  8616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8620 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;Total ram usage:        4 bytes
  8622 ;; Hardware stack levels used:    1
  8623 ;; Hardware stack levels required when called:    1
  8624 ;; This function calls:
  8625 ;;		_I2C2_FunctionComplete
  8626 ;;		_I2C2_Stop
  8627 ;; This function is called by:
  8628 ;;		_INTERRUPT_InterruptManager
  8629 ;; This function uses a non-reentrant model
  8630 ;;
  8631                           
  8632                           
  8633                           ;psect for function _I2C2_ISR
  8634  03E7                     _I2C2_ISR:	
  8635                           
  8636                           ;i2c2.c: 236: static uint8_t *pi2c_buf_ptr;
  8637                           ;i2c2.c: 237: static uint16_t i2c_address = 0;
  8638                           ;i2c2.c: 238: static uint8_t i2c_bytes_left = 0;
  8639                           ;i2c2.c: 239: static uint8_t i2c_10bit_address_restart = 0;
  8640                           ;i2c2.c: 241: PIR4bits.SSP2IF = 0;
  8641                           
  8642                           ;incstack = 0
  8643                           ; Regs used in _I2C2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8644  03E7  0020               	movlb	0	; select bank0
  8645  03E8  1014               	bcf	20,0	;volatile
  8646                           
  8647                           ;i2c2.c: 245: if(SSP2CON1bits.WCOL)
  8648  03E9  0024               	movlb	4	; select bank4
  8649  03EA  1F9D               	btfss	29,7	;volatile
  8650  03EB  2D1A               	goto	i1l3778
  8651                           
  8652                           ;i2c2.c: 246: {
  8653                           ;i2c2.c: 248: SSP2CON1bits.WCOL = 0;
  8654  03EC  139D               	bcf	29,7	;volatile
  8655                           
  8656                           ;i2c2.c: 249: i2c2_state = S_MASTER_IDLE;
  8657  03ED  0020               	movlb	0	; select bank0
  8658  03EE  01EA               	clrf	_i2c2_state
  8659                           
  8660                           ;i2c2.c: 250: *(p_i2c2_current->pTrFlag) = I2C2_MESSAGE_FAIL;
  8661  03EF  0867               	movf	_p_i2c2_current,w
  8662  03F0  3E02               	addlw	2
  8663  03F1  0086               	movwf	6
  8664  03F2  0187               	clrf	7
  8665  03F3  0801               	movf	1,w
  8666  03F4  0086               	movwf	6
  8667  03F5  0187               	clrf	7
  8668  03F6  0181               	clrf	1
  8669  03F7  0A81               	incf	1,f
  8670                           
  8671                           ;i2c2.c: 253: p_i2c2_current = (0);
  8672  03F8  01E7               	clrf	_p_i2c2_current
  8673                           
  8674                           ;i2c2.c: 255: return;
  8675  03F9  0008               	return
  8676  03FA                     i1l184:	
  8677                           ;i2c2.c: 260: {
  8678                           ;i2c2.c: 261: case S_MASTER_IDLE:
  8679                           
  8680                           ;i2c2.c: 256: }
  8681                           ;i2c2.c: 259: switch(i2c2_state)
  8682                           
  8683                           
  8684                           ;i2c2.c: 263: if(i2c2_object.trStatus.s.empty != 1)
  8685  03FA  18DC               	btfsc	_i2c2_object+2,1
  8686  03FB  0008               	return
  8687                           
  8688                           ;i2c2.c: 264: {
  8689                           ;i2c2.c: 266: p_i2c2_current = i2c2_object.pTrHead;
  8690  03FC  085B               	movf	low ((_i2c2_object| 0+1)),w
  8691  03FD  00F2               	movwf	??_I2C2_ISR
  8692  03FE  0872               	movf	??_I2C2_ISR,w
  8693  03FF  00E7               	movwf	_p_i2c2_current
  8694                           
  8695                           ;i2c2.c: 267: i2c2_trb_count = i2c2_object.pTrHead->count;
  8696  0400  085B               	movf	low ((_i2c2_object| 0+1)),w
  8697  0401  0086               	movwf	6
  8698  0402  0187               	clrf	7
  8699  0403  0801               	movf	1,w
  8700  0404  00F2               	movwf	??_I2C2_ISR
  8701  0405  0872               	movf	??_I2C2_ISR,w
  8702  0406  00E9               	movwf	_i2c2_trb_count
  8703                           
  8704                           ;i2c2.c: 268: p_i2c2_trb_current = i2c2_object.pTrHead->ptrb_list;
  8705  0407  085B               	movf	low ((_i2c2_object| 0+1)),w
  8706  0408  0086               	movwf	6
  8707  0409  0187               	clrf	7
  8708  040A  3F41               	moviw [1]fsr1
  8709  040B  00E8               	movwf	_p_i2c2_trb_current
  8710                           
  8711                           ;i2c2.c: 270: i2c2_object.pTrHead++;
  8712  040C  3003               	movlw	3
  8713  040D  00F2               	movwf	??_I2C2_ISR
  8714  040E  0872               	movf	??_I2C2_ISR,w
  8715  040F  07DB               	addwf	low ((_i2c2_object| 0+1)),f
  8716                           
  8717                           ;i2c2.c: 273: if(i2c2_object.pTrHead == (i2c2_tr_queue + 1))
  8718  0410  085B               	movf	low ((_i2c2_object| 0+1)),w
  8719  0411  3ADC               	xorlw	(low ((_i2c2_tr_queue| 0+3)))& (0+255)
  8720  0412  1D03               	skipz
  8721  0413  2C18               	goto	i1l3666
  8722                           
  8723                           ;i2c2.c: 274: {
  8724                           ;i2c2.c: 276: i2c2_object.pTrHead = i2c2_tr_queue;
  8725  0414  30D9               	movlw	(low (_i2c2_tr_queue| 0))& (0+255)
  8726  0415  00F2               	movwf	??_I2C2_ISR
  8727  0416  0872               	movf	??_I2C2_ISR,w
  8728  0417  00DB               	movwf	low ((_i2c2_object| 0+1))
  8729  0418                     i1l3666:	
  8730                           
  8731                           ;i2c2.c: 277: }
  8732                           ;i2c2.c: 281: i2c2_object.trStatus.s.full = 0;
  8733  0418  105C               	bcf	_i2c2_object+2,0
  8734                           
  8735                           ;i2c2.c: 284: if(i2c2_object.pTrHead == i2c2_object.pTrTail)
  8736  0419  085B               	movf	low ((_i2c2_object| 0+1)),w
  8737  041A  065A               	xorwf	_i2c2_object,w
  8738  041B  1903               	btfsc	3,2
  8739                           
  8740                           ;i2c2.c: 285: {
  8741                           ;i2c2.c: 287: i2c2_object.trStatus.s.empty = 1;
  8742  041C  14DC               	bsf	_i2c2_object+2,1
  8743                           
  8744                           ;i2c2.c: 288: }
  8745                           ;i2c2.c: 291: SSP2CON2bits.SEN = 1;
  8746  041D  0024               	movlb	4	; select bank4
  8747  041E  141E               	bsf	30,0	;volatile
  8748                           
  8749                           ;i2c2.c: 294: i2c2_state = S_MASTER_SEND_ADDR;
  8750  041F  3002               	movlw	2
  8751  0420  00F2               	movwf	??_I2C2_ISR
  8752  0421  0872               	movf	??_I2C2_ISR,w
  8753  0422  0020               	movlb	0	; select bank0
  8754  0423  00EA               	movwf	_i2c2_state
  8755                           
  8756                           ;i2c2.c: 295: }
  8757                           ;i2c2.c: 297: break;
  8758  0424  0008               	return
  8759  0425                     i1l189:	
  8760                           ;i2c2.c: 299: case S_MASTER_RESTART:
  8761                           
  8762                           
  8763                           ;i2c2.c: 304: SSP2CON2bits.RSEN = 1;
  8764  0425  0024               	movlb	4	; select bank4
  8765  0426  149E               	bsf	30,1	;volatile
  8766                           
  8767                           ;i2c2.c: 307: i2c2_state = S_MASTER_SEND_ADDR;
  8768  0427  3002               	movlw	2
  8769  0428  00F2               	movwf	??_I2C2_ISR
  8770  0429  0872               	movf	??_I2C2_ISR,w
  8771  042A  0020               	movlb	0	; select bank0
  8772  042B  00EA               	movwf	_i2c2_state
  8773                           
  8774                           ;i2c2.c: 309: break;
  8775  042C  0008               	return
  8776  042D                     i1l190:	
  8777                           ;i2c2.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
  8778                           
  8779                           
  8780                           ;i2c2.c: 313: if(SSP2CON2bits.ACKSTAT)
  8781  042D  0024               	movlb	4	; select bank4
  8782  042E  1F1E               	btfss	30,6	;volatile
  8783  042F  2C39               	goto	i1l3678
  8784                           
  8785                           ;i2c2.c: 314: {
  8786                           ;i2c2.c: 315: i2c2_object.i2cErrors++;
  8787  0430  3001               	movlw	1
  8788  0431  00F2               	movwf	??_I2C2_ISR
  8789  0432  0872               	movf	??_I2C2_ISR,w
  8790  0433  0020               	movlb	0	; select bank0
  8791  0434  07DE               	addwf	_i2c2_object+4,f
  8792                           
  8793                           ;i2c2.c: 316: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  8794  0435  3004               	movlw	4
  8795  0436  318A  225A         	fcall	_I2C2_Stop
  8796                           
  8797                           ;i2c2.c: 317: }
  8798  0438  0008               	return
  8799  0439                     i1l3678:	
  8800                           
  8801                           ;i2c2.c: 318: else
  8802                           ;i2c2.c: 319: {
  8803                           ;i2c2.c: 321: SSP2BUF = (i2c_address >> 1) & 0x00FF;
  8804  0439  0020               	movlb	0	; select bank0
  8805  043A  086E               	movf	I2C2_ISR@i2c_address+1,w
  8806  043B  00F3               	movwf	??_I2C2_ISR+1
  8807  043C  086D               	movf	I2C2_ISR@i2c_address,w
  8808  043D  00F2               	movwf	??_I2C2_ISR
  8809  043E  36F3               	lsrf	??_I2C2_ISR+1,f
  8810  043F  0CF2               	rrf	??_I2C2_ISR,f
  8811  0440  0872               	movf	??_I2C2_ISR,w
  8812  0441  0024               	movlb	4	; select bank4
  8813  0442  0099               	movwf	25	;volatile
  8814                           
  8815                           ;i2c2.c: 324: if(i2c_address & 0x01)
  8816  0443  0020               	movlb	0	; select bank0
  8817  0444  1C6D               	btfss	I2C2_ISR@i2c_address,0
  8818  0445  2C4B               	goto	i1l3684
  8819                           
  8820                           ;i2c2.c: 325: {
  8821                           ;i2c2.c: 328: i2c2_state = S_MASTER_10BIT_RESTART;
  8822  0446  300B               	movlw	11
  8823  0447  00F2               	movwf	??_I2C2_ISR
  8824  0448  0872               	movf	??_I2C2_ISR,w
  8825  0449  00EA               	movwf	_i2c2_state
  8826                           
  8827                           ;i2c2.c: 329: }
  8828  044A  0008               	return
  8829  044B                     i1l3684:	
  8830                           
  8831                           ;i2c2.c: 330: else
  8832                           ;i2c2.c: 331: {
  8833                           ;i2c2.c: 333: i2c2_state = S_MASTER_SEND_DATA;
  8834  044B  3003               	movlw	3
  8835  044C  00F2               	movwf	??_I2C2_ISR
  8836  044D  0872               	movf	??_I2C2_ISR,w
  8837  044E  00EA               	movwf	_i2c2_state
  8838                           
  8839                           ;i2c2.c: 334: }
  8840                           ;i2c2.c: 335: }
  8841                           ;i2c2.c: 337: break;
  8842  044F  0008               	return
  8843  0450                     i1l195:	
  8844                           ;i2c2.c: 339: case S_MASTER_10BIT_RESTART:
  8845                           
  8846                           
  8847                           ;i2c2.c: 341: if(SSP2CON2bits.ACKSTAT)
  8848  0450  0024               	movlb	4	; select bank4
  8849  0451  1F1E               	btfss	30,6	;volatile
  8850  0452  2C5C               	goto	i1l196
  8851                           
  8852                           ;i2c2.c: 342: {
  8853                           ;i2c2.c: 343: i2c2_object.i2cErrors++;
  8854  0453  3001               	movlw	1
  8855  0454  00F2               	movwf	??_I2C2_ISR
  8856  0455  0872               	movf	??_I2C2_ISR,w
  8857  0456  0020               	movlb	0	; select bank0
  8858  0457  07DE               	addwf	_i2c2_object+4,f
  8859                           
  8860                           ;i2c2.c: 344: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  8861  0458  3004               	movlw	4
  8862  0459  318A  225A         	fcall	_I2C2_Stop
  8863                           
  8864                           ;i2c2.c: 345: }
  8865  045B  0008               	return
  8866  045C                     i1l196:	
  8867                           
  8868                           ;i2c2.c: 346: else
  8869                           ;i2c2.c: 347: {
  8870                           ;i2c2.c: 350: SSP2CON2bits.RSEN = 1;
  8871  045C  149E               	bsf	30,1	;volatile
  8872                           
  8873                           ;i2c2.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
  8874  045D  0020               	movlb	0	; select bank0
  8875  045E  086E               	movf	I2C2_ISR@i2c_address+1,w
  8876  045F  00F3               	movwf	??_I2C2_ISR+1
  8877  0460  086D               	movf	I2C2_ISR@i2c_address,w
  8878  0461  00F2               	movwf	??_I2C2_ISR
  8879  0462  0873               	movf	??_I2C2_ISR+1,w
  8880  0463  00F2               	movwf	??_I2C2_ISR
  8881  0464  01F3               	clrf	??_I2C2_ISR+1
  8882  0465  3006               	movlw	6
  8883  0466  0572               	andwf	??_I2C2_ISR,w
  8884  0467  00F4               	movwf	??_I2C2_ISR+2
  8885  0468  3000               	movlw	0
  8886  0469  0573               	andwf	??_I2C2_ISR+1,w
  8887  046A  00F5               	movwf	??_I2C2_ISR+3
  8888  046B  30F0               	movlw	240
  8889  046C  0474               	iorwf	??_I2C2_ISR+2,w
  8890  046D  00ED               	movwf	I2C2_ISR@i2c_address
  8891  046E  3000               	movlw	0
  8892  046F  0475               	iorwf	??_I2C2_ISR+3,w
  8893  0470  00EE               	movwf	I2C2_ISR@i2c_address+1
  8894                           
  8895                           ;i2c2.c: 357: i2c_address |= 0x0001;
  8896  0471  146D               	bsf	I2C2_ISR@i2c_address,0
  8897                           
  8898                           ;i2c2.c: 360: i2c_10bit_address_restart = 1;
  8899  0472  01E4               	clrf	I2C2_ISR@i2c_10bit_address_restart
  8900  0473  0AE4               	incf	I2C2_ISR@i2c_10bit_address_restart,f
  8901                           
  8902                           ;i2c2.c: 363: i2c2_state = S_MASTER_SEND_ADDR;
  8903  0474  3002               	movlw	2
  8904  0475  00F2               	movwf	??_I2C2_ISR
  8905  0476  0872               	movf	??_I2C2_ISR,w
  8906  0477  00EA               	movwf	_i2c2_state
  8907                           
  8908                           ;i2c2.c: 364: }
  8909                           ;i2c2.c: 366: break;
  8910  0478  0008               	return
  8911  0479                     i1l3698:	
  8912                           ;i2c2.c: 368: case S_MASTER_SEND_ADDR:
  8913                           
  8914                           
  8915                           ;i2c2.c: 381: if(i2c_10bit_address_restart != 1)
  8916  0479  0364               	decf	I2C2_ISR@i2c_10bit_address_restart,w
  8917  047A  1903               	btfsc	3,2
  8918  047B  2C8D               	goto	i1l3718
  8919                           
  8920                           ;i2c2.c: 382: {
  8921                           ;i2c2.c: 384: i2c_address = p_i2c2_trb_current->address;
  8922  047C  0868               	movf	_p_i2c2_trb_current,w
  8923  047D  0086               	movwf	6
  8924  047E  0187               	clrf	7
  8925  047F  3F40               	moviw [0]fsr1
  8926  0480  00ED               	movwf	I2C2_ISR@i2c_address
  8927  0481  3F41               	moviw [1]fsr1
  8928  0482  00EE               	movwf	I2C2_ISR@i2c_address+1
  8929                           
  8930                           ;i2c2.c: 385: pi2c_buf_ptr = p_i2c2_trb_current->pbuffer;
  8931  0483  0868               	movf	_p_i2c2_trb_current,w
  8932  0484  0086               	movwf	6
  8933  0485  0187               	clrf	7
  8934  0486  3F43               	moviw [3]fsr1
  8935  0487  00E6               	movwf	I2C2_ISR@pi2c_buf_ptr
  8936                           
  8937                           ;i2c2.c: 386: i2c_bytes_left = p_i2c2_trb_current->length;
  8938  0488  0868               	movf	_p_i2c2_trb_current,w
  8939  0489  0086               	movwf	6
  8940  048A  0187               	clrf	7
  8941  048B  3F42               	moviw [2]fsr1
  8942  048C  00E5               	movwf	I2C2_ISR@i2c_bytes_left
  8943  048D                     i1l3718:	
  8944                           ;i2c2.c: 407: }
  8945                           ;i2c2.c: 408: }
  8946                           
  8947                           ;i2c2.c: 406: i2c_10bit_address_restart = 0;
  8948                           
  8949                           ;i2c2.c: 404: i2c2_state = S_MASTER_ACK_ADDR;
  8950                           
  8951                           ;i2c2.c: 400: else
  8952                           ;i2c2.c: 401: {
  8953                           ;i2c2.c: 403: SSP2BUF = i2c_address;
  8954                           
  8955                           ;i2c2.c: 399: }
  8956                           
  8957                           ;i2c2.c: 398: i2c2_state = S_MASTER_SEND_ADDR_10BIT_LSB;
  8958                           
  8959                           ;i2c2.c: 393: {
  8960                           ;i2c2.c: 397: SSP2BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
  8961                           
  8962                           ;i2c2.c: 391: {
  8963                           ;i2c2.c: 392: if (0 == i2c_10bit_address_restart)
  8964                           
  8965                           ;i2c2.c: 387: }
  8966                           ;i2c2.c: 390: if(!1 && (0x0 != i2c_address))
  8967                           
  8968                           
  8969                           ;i2c2.c: 409: else
  8970                           ;i2c2.c: 410: {
  8971                           ;i2c2.c: 412: SSP2BUF = i2c_address;
  8972  048D  086D               	movf	I2C2_ISR@i2c_address,w
  8973  048E  0024               	movlb	4	; select bank4
  8974  048F  0099               	movwf	25	;volatile
  8975                           
  8976                           ;i2c2.c: 413: if(i2c_address & 0x01)
  8977  0490  0020               	movlb	0	; select bank0
  8978  0491  1C6D               	btfss	I2C2_ISR@i2c_address,0
  8979  0492  2C98               	goto	i1l3724
  8980                           
  8981                           ;i2c2.c: 414: {
  8982                           ;i2c2.c: 416: i2c2_state = S_MASTER_ACK_ADDR;
  8983  0493  3005               	movlw	5
  8984  0494  00F2               	movwf	??_I2C2_ISR
  8985  0495  0872               	movf	??_I2C2_ISR,w
  8986  0496  00EA               	movwf	_i2c2_state
  8987                           
  8988                           ;i2c2.c: 417: }
  8989  0497  0008               	return
  8990  0498                     i1l3724:	
  8991                           
  8992                           ;i2c2.c: 418: else
  8993                           ;i2c2.c: 419: {
  8994                           ;i2c2.c: 421: i2c2_state = S_MASTER_SEND_DATA;
  8995  0498  3003               	movlw	3
  8996  0499  00F2               	movwf	??_I2C2_ISR
  8997  049A  0872               	movf	??_I2C2_ISR,w
  8998  049B  00EA               	movwf	_i2c2_state
  8999                           
  9000                           ;i2c2.c: 422: }
  9001                           ;i2c2.c: 423: }
  9002                           ;i2c2.c: 424: break;
  9003  049C  0008               	return
  9004  049D                     i1l206:	
  9005                           ;i2c2.c: 426: case S_MASTER_SEND_DATA:
  9006                           
  9007                           
  9008                           ;i2c2.c: 429: if(SSP2CON2bits.ACKSTAT)
  9009  049D  0024               	movlb	4	; select bank4
  9010  049E  1F1E               	btfss	30,6	;volatile
  9011  049F  2CAB               	goto	i1l3732
  9012                           
  9013                           ;i2c2.c: 430: {
  9014                           ;i2c2.c: 432: i2c2_object.i2cErrors++;
  9015  04A0  3001               	movlw	1
  9016  04A1  00F2               	movwf	??_I2C2_ISR
  9017  04A2  0872               	movf	??_I2C2_ISR,w
  9018  04A3  0020               	movlb	0	; select bank0
  9019  04A4  07DE               	addwf	_i2c2_object+4,f
  9020                           
  9021                           ;i2c2.c: 435: SSP2CON2bits.ACKSTAT = 0;
  9022  04A5  0024               	movlb	4	; select bank4
  9023  04A6  131E               	bcf	30,6	;volatile
  9024                           
  9025                           ;i2c2.c: 438: I2C2_Stop(I2C2_DATA_NO_ACK);
  9026  04A7  3005               	movlw	5
  9027  04A8  318A  225A         	fcall	_I2C2_Stop
  9028                           
  9029                           ;i2c2.c: 440: }
  9030  04AA  0008               	return
  9031  04AB                     i1l3732:	
  9032                           
  9033                           ;i2c2.c: 441: else
  9034                           ;i2c2.c: 442: {
  9035                           ;i2c2.c: 444: if(i2c_bytes_left-- == 0U)
  9036  04AB  3001               	movlw	1
  9037  04AC  0020               	movlb	0	; select bank0
  9038  04AD  02E5               	subwf	I2C2_ISR@i2c_bytes_left,f
  9039  04AE  0A65               	incf	I2C2_ISR@i2c_bytes_left,w
  9040  04AF  1D03               	btfss	3,2
  9041  04B0  2CC5               	goto	i1l3740
  9042                           
  9043                           ;i2c2.c: 445: {
  9044                           ;i2c2.c: 449: p_i2c2_trb_current++;
  9045  04B1  3004               	movlw	4
  9046  04B2  00F2               	movwf	??_I2C2_ISR
  9047  04B3  0872               	movf	??_I2C2_ISR,w
  9048  04B4  07E8               	addwf	_p_i2c2_trb_current,f
  9049                           
  9050                           ;i2c2.c: 452: if(--i2c2_trb_count == 0)
  9051  04B5  3001               	movlw	1
  9052  04B6  02E9               	subwf	_i2c2_trb_count,f
  9053  04B7  1D03               	btfss	3,2
  9054  04B8  2CBD               	goto	i1l210
  9055                           
  9056                           ;i2c2.c: 453: {
  9057                           ;i2c2.c: 454: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
  9058  04B9  3000               	movlw	0
  9059  04BA  318A  225A         	fcall	_I2C2_Stop
  9060                           
  9061                           ;i2c2.c: 455: }
  9062  04BC  0008               	return
  9063  04BD                     i1l210:	
  9064                           
  9065                           ;i2c2.c: 456: else
  9066                           ;i2c2.c: 457: {
  9067                           ;i2c2.c: 464: SSP2CON2bits.RSEN = 1;
  9068  04BD  0024               	movlb	4	; select bank4
  9069  04BE  149E               	bsf	30,1	;volatile
  9070                           
  9071                           ;i2c2.c: 467: i2c2_state = S_MASTER_SEND_ADDR;
  9072  04BF  3002               	movlw	2
  9073  04C0  00F2               	movwf	??_I2C2_ISR
  9074  04C1  0872               	movf	??_I2C2_ISR,w
  9075  04C2  0020               	movlb	0	; select bank0
  9076  04C3  00EA               	movwf	_i2c2_state
  9077                           
  9078                           ;i2c2.c: 469: }
  9079                           ;i2c2.c: 470: }
  9080  04C4  0008               	return
  9081  04C5                     i1l3740:	
  9082                           
  9083                           ;i2c2.c: 471: else
  9084                           ;i2c2.c: 472: {
  9085                           ;i2c2.c: 474: SSP2BUF = *pi2c_buf_ptr++;
  9086  04C5  0866               	movf	I2C2_ISR@pi2c_buf_ptr,w
  9087  04C6  0086               	movwf	6
  9088  04C7  0187               	clrf	7
  9089  04C8  0801               	movf	1,w
  9090  04C9  0024               	movlb	4	; select bank4
  9091  04CA  0099               	movwf	25	;volatile
  9092  04CB  3001               	movlw	1
  9093  04CC  00F2               	movwf	??_I2C2_ISR
  9094  04CD  0872               	movf	??_I2C2_ISR,w
  9095  04CE  0020               	movlb	0	; select bank0
  9096  04CF  07E6               	addwf	I2C2_ISR@pi2c_buf_ptr,f
  9097                           
  9098                           ;i2c2.c: 475: }
  9099                           ;i2c2.c: 476: }
  9100                           ;i2c2.c: 477: break;
  9101  04D0  0008               	return
  9102  04D1                     i1l213:	
  9103                           ;i2c2.c: 479: case S_MASTER_ACK_ADDR:
  9104                           
  9105                           
  9106                           ;i2c2.c: 482: if(SSP2CON2bits.ACKSTAT)
  9107  04D1  0024               	movlb	4	; select bank4
  9108  04D2  1F1E               	btfss	30,6	;volatile
  9109  04D3  2CDF               	goto	i1l214
  9110                           
  9111                           ;i2c2.c: 483: {
  9112                           ;i2c2.c: 486: i2c2_object.i2cErrors++;
  9113  04D4  3001               	movlw	1
  9114  04D5  00F2               	movwf	??_I2C2_ISR
  9115  04D6  0872               	movf	??_I2C2_ISR,w
  9116  04D7  0020               	movlb	0	; select bank0
  9117  04D8  07DE               	addwf	_i2c2_object+4,f
  9118                           
  9119                           ;i2c2.c: 489: I2C2_Stop(I2C2_MESSAGE_ADDRESS_NO_ACK);
  9120  04D9  3004               	movlw	4
  9121  04DA  318A  225A         	fcall	_I2C2_Stop
  9122                           
  9123                           ;i2c2.c: 492: SSP2CON2bits.ACKSTAT = 0;
  9124  04DC  0024               	movlb	4	; select bank4
  9125  04DD  131E               	bcf	30,6	;volatile
  9126                           
  9127                           ;i2c2.c: 493: }
  9128  04DE  0008               	return
  9129  04DF                     i1l214:	
  9130                           
  9131                           ;i2c2.c: 494: else
  9132                           ;i2c2.c: 495: {
  9133                           ;i2c2.c: 496: SSP2CON2bits.RCEN = 1;
  9134  04DF  159E               	bsf	30,3	;volatile
  9135                           
  9136                           ;i2c2.c: 497: i2c2_state = S_MASTER_ACK_RCV_DATA;
  9137  04E0  3008               	movlw	8
  9138  04E1  00F2               	movwf	??_I2C2_ISR
  9139  04E2  0872               	movf	??_I2C2_ISR,w
  9140  04E3  0020               	movlb	0	; select bank0
  9141  04E4  00EA               	movwf	_i2c2_state
  9142                           
  9143                           ;i2c2.c: 498: }
  9144                           ;i2c2.c: 499: break;
  9145  04E5  0008               	return
  9146  04E6                     i1l3752:	
  9147                           ;i2c2.c: 501: case S_MASTER_RCV_DATA:
  9148                           
  9149                           
  9150                           ;i2c2.c: 506: i2c2_state = S_MASTER_ACK_RCV_DATA;
  9151  04E6  3008               	movlw	8
  9152  04E7  00F2               	movwf	??_I2C2_ISR
  9153  04E8  0872               	movf	??_I2C2_ISR,w
  9154  04E9  00EA               	movwf	_i2c2_state
  9155                           
  9156                           ;i2c2.c: 509: SSP2CON2bits.RCEN = 1;
  9157  04EA  0024               	movlb	4	; select bank4
  9158  04EB  159E               	bsf	30,3	;volatile
  9159                           
  9160                           ;i2c2.c: 511: break;
  9161  04EC  0008               	return
  9162  04ED                     i1l3756:	
  9163                           ;i2c2.c: 513: case S_MASTER_ACK_RCV_DATA:
  9164                           
  9165                           
  9166                           ;i2c2.c: 516: *pi2c_buf_ptr++ = SSP2BUF;
  9167  04ED  0024               	movlb	4	; select bank4
  9168  04EE  0819               	movf	25,w	;volatile
  9169  04EF  00F2               	movwf	??_I2C2_ISR
  9170  04F0  0020               	movlb	0	; select bank0
  9171  04F1  0866               	movf	I2C2_ISR@pi2c_buf_ptr,w
  9172  04F2  0086               	movwf	6
  9173  04F3  0187               	clrf	7
  9174  04F4  0872               	movf	??_I2C2_ISR,w
  9175  04F5  0081               	movwf	1
  9176  04F6  3001               	movlw	1
  9177  04F7  00F2               	movwf	??_I2C2_ISR
  9178  04F8  0872               	movf	??_I2C2_ISR,w
  9179  04F9  07E6               	addwf	I2C2_ISR@pi2c_buf_ptr,f
  9180                           
  9181                           ;i2c2.c: 519: if(--i2c_bytes_left)
  9182  04FA  3001               	movlw	1
  9183  04FB  02E5               	subwf	I2C2_ISR@i2c_bytes_left,f
  9184  04FC  1903               	btfsc	3,2
  9185  04FD  2D06               	goto	i1l218
  9186                           
  9187                           ;i2c2.c: 520: {
  9188                           ;i2c2.c: 526: SSP2CON2bits.ACKDT = 0;
  9189  04FE  0024               	movlb	4	; select bank4
  9190  04FF  129E               	bcf	30,5	;volatile
  9191                           
  9192                           ;i2c2.c: 529: i2c2_state = S_MASTER_RCV_DATA;
  9193  0500  3006               	movlw	6
  9194  0501  00F2               	movwf	??_I2C2_ISR
  9195  0502  0872               	movf	??_I2C2_ISR,w
  9196  0503  0020               	movlb	0	; select bank0
  9197  0504  00EA               	movwf	_i2c2_state
  9198                           
  9199                           ;i2c2.c: 530: }
  9200  0505  2D0A               	goto	i1l3768
  9201  0506                     i1l218:	
  9202                           
  9203                           ;i2c2.c: 531: else
  9204                           ;i2c2.c: 532: {
  9205                           ;i2c2.c: 536: SSP2CON2bits.ACKDT = 1;
  9206  0506  0024               	movlb	4	; select bank4
  9207  0507  169E               	bsf	30,5	;volatile
  9208                           
  9209                           ;i2c2.c: 538: I2C2_FunctionComplete();
  9210  0508  318A  2249         	fcall	_I2C2_FunctionComplete
  9211  050A                     i1l3768:	
  9212                           
  9213                           ;i2c2.c: 539: }
  9214                           ;i2c2.c: 542: SSP2CON2bits.ACKEN = 1;
  9215  050A  0024               	movlb	4	; select bank4
  9216  050B  161E               	bsf	30,4	;volatile
  9217                           
  9218                           ;i2c2.c: 543: break;
  9219  050C  0008               	return
  9220  050D                     i1l3770:	
  9221                           ;i2c2.c: 545: case S_MASTER_RCV_STOP:
  9222                           
  9223                           
  9224                           ;i2c2.c: 546: case S_MASTER_SEND_STOP:
  9225                           ;i2c2.c: 549: I2C2_Stop(I2C2_MESSAGE_COMPLETE);
  9226  050D  3000               	movlw	0
  9227  050E  318A  225A         	fcall	_I2C2_Stop
  9228                           
  9229                           ;i2c2.c: 550: break;
  9230  0510  0008               	return
  9231  0511                     i1l3772:	
  9232                           ;i2c2.c: 552: default:
  9233                           
  9234                           
  9235                           ;i2c2.c: 556: i2c2_object.i2cErrors++;
  9236  0511  3001               	movlw	1
  9237  0512  00F2               	movwf	??_I2C2_ISR
  9238  0513  0872               	movf	??_I2C2_ISR,w
  9239  0514  0020               	movlb	0	; select bank0
  9240  0515  07DE               	addwf	_i2c2_object+4,f
  9241                           
  9242                           ;i2c2.c: 557: I2C2_Stop(I2C2_LOST_STATE);
  9243  0516  3006               	movlw	6
  9244  0517  318A  225A         	fcall	_I2C2_Stop
  9245                           
  9246                           ;i2c2.c: 560: }
  9247                           
  9248                           ;i2c2.c: 558: break;
  9249  0519  0008               	return
  9250  051A                     i1l3778:	
  9251  051A  0020               	movlb	0	; select bank0
  9252  051B  086A               	movf	_i2c2_state,w
  9253                           
  9254                           ; Switch size 1, requested type "space"
  9255                           ; Number of cases is 11, Range of values is 0 to 11
  9256                           ; switch strategies available:
  9257                           ; Name         Instructions Cycles
  9258                           ; direct_byte           30     6 (fixed)
  9259                           ; simple_byte           34    18 (average)
  9260                           ; jumptable            260     6 (fixed)
  9261                           ;	Chosen strategy is direct_byte
  9262  051C  0084               	movwf	4
  9263  051D  300C               	movlw	12
  9264  051E  0204               	subwf	4,w
  9265  051F  1803               	skipnc
  9266  0520  2D11               	goto	i1l3772
  9267  0521  3188               	movlp	high i1S4820
  9268  0522  3504               	lslf	4,w
  9269  0523  3E00               	addlw	low i1S4820
  9270  0524  0082               	movwf	2
  9271  0525  0008               	return
  9272  0526                     __end_of_I2C2_ISR:	
  9273                           
  9274                           	psect	swtext1
  9275  0800                     __pswtext1:	
  9276  0800                     i1S4820:	
  9277  0800  3183  2BFA         	ljmp	i1l184
  9278  0802  3184  2C25         	ljmp	i1l189
  9279  0804  3184  2C79         	ljmp	i1l3698
  9280  0806  3184  2C9D         	ljmp	i1l206
  9281  0808  3185  2D0D         	ljmp	i1l3770
  9282  080A  3184  2CD1         	ljmp	i1l213
  9283  080C  3184  2CE6         	ljmp	i1l3752
  9284  080E  3185  2D0D         	ljmp	i1l3770
  9285  0810  3184  2CED         	ljmp	i1l3756
  9286  0812  3185  2D11         	ljmp	i1l3772
  9287  0814  3184  2C2D         	ljmp	i1l190
  9288  0816  3184  2C50         	ljmp	i1l195
  9289                           
  9290                           	psect	text45
  9291  0A5A                     __ptext45:	
  9292 ;; *************** function _I2C2_Stop *****************
  9293 ;; Defined at:
  9294 ;;		line 581 in file "mcc_generated_files/i2c2.c"
  9295 ;; Parameters:    Size  Location     Type
  9296 ;;  completion_c    1    wreg     enum E2972
  9297 ;; Auto vars:     Size  Location     Type
  9298 ;;  completion_c    1    1[COMMON] enum E2972
  9299 ;; Return value:  Size  Location     Type
  9300 ;;                  1    wreg      void 
  9301 ;; Registers used:
  9302 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9303 ;; Tracked objects:
  9304 ;;		On entry : 0/0
  9305 ;;		On exit  : 0/0
  9306 ;;		Unchanged: 0/0
  9307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9309 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9310 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;Total ram usage:        2 bytes
  9313 ;; Hardware stack levels used:    1
  9314 ;; This function calls:
  9315 ;;		Nothing
  9316 ;; This function is called by:
  9317 ;;		_I2C2_ISR
  9318 ;; This function uses a non-reentrant model
  9319 ;;
  9320                           
  9321                           
  9322                           ;psect for function _I2C2_Stop
  9323  0A5A                     _I2C2_Stop:	
  9324                           
  9325                           ;incstack = 0
  9326                           ; Regs used in _I2C2_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
  9327                           ;I2C2_Stop@completion_code stored from wreg
  9328  0A5A  00F1               	movwf	I2C2_Stop@completion_code
  9329                           
  9330                           ;i2c2.c: 584: SSP2CON2bits.PEN = 1;
  9331  0A5B  0024               	movlb	4	; select bank4
  9332  0A5C  151E               	bsf	30,2	;volatile
  9333                           
  9334                           ;i2c2.c: 587: if (p_i2c2_current->pTrFlag != (0))
  9335  0A5D  0020               	movlb	0	; select bank0
  9336  0A5E  0867               	movf	_p_i2c2_current,w
  9337  0A5F  3E02               	addlw	2
  9338  0A60  0086               	movwf	6
  9339  0A61  0187               	clrf	7
  9340  0A62  0801               	movf	1,w
  9341  0A63  1903               	btfsc	3,2
  9342  0A64  2A70               	goto	i1l3454
  9343                           
  9344                           ;i2c2.c: 588: {
  9345                           ;i2c2.c: 590: *(p_i2c2_current->pTrFlag) = completion_code;
  9346  0A65  0871               	movf	I2C2_Stop@completion_code,w
  9347  0A66  00F0               	movwf	??_I2C2_Stop
  9348  0A67  0867               	movf	_p_i2c2_current,w
  9349  0A68  3E02               	addlw	2
  9350  0A69  0086               	movwf	6
  9351  0A6A  0187               	clrf	7
  9352  0A6B  0801               	movf	1,w
  9353  0A6C  0086               	movwf	6
  9354  0A6D  0187               	clrf	7
  9355  0A6E  0870               	movf	??_I2C2_Stop,w
  9356  0A6F  0081               	movwf	1
  9357  0A70                     i1l3454:	
  9358                           
  9359                           ;i2c2.c: 591: }
  9360                           ;i2c2.c: 594: i2c2_state = S_MASTER_IDLE;
  9361  0A70  01EA               	clrf	_i2c2_state
  9362  0A71  0008               	return
  9363  0A72                     __end_of_I2C2_Stop:	
  9364                           
  9365                           	psect	text46
  9366  0A49                     __ptext46:	
  9367 ;; *************** function _I2C2_FunctionComplete *****************
  9368 ;; Defined at:
  9369 ;;		line 563 in file "mcc_generated_files/i2c2.c"
  9370 ;; Parameters:    Size  Location     Type
  9371 ;;		None
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;		None
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  1    wreg      void 
  9376 ;; Registers used:
  9377 ;;		wreg, status,2, status,0
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9386 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9387 ;;Total ram usage:        1 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; This function calls:
  9390 ;;		Nothing
  9391 ;; This function is called by:
  9392 ;;		_I2C2_ISR
  9393 ;; This function uses a non-reentrant model
  9394 ;;
  9395                           
  9396                           
  9397                           ;psect for function _I2C2_FunctionComplete
  9398  0A49                     _I2C2_FunctionComplete:	
  9399                           
  9400                           ;i2c2.c: 567: p_i2c2_trb_current++;
  9401                           
  9402                           ;incstack = 0
  9403                           ; Regs used in _I2C2_FunctionComplete: [wreg+status,2+status,0]
  9404  0A49  3004               	movlw	4
  9405  0A4A  00F0               	movwf	??_I2C2_FunctionComplete
  9406  0A4B  0870               	movf	??_I2C2_FunctionComplete,w
  9407  0A4C  0020               	movlb	0	; select bank0
  9408  0A4D  07E8               	addwf	_p_i2c2_trb_current,f
  9409                           
  9410                           ;i2c2.c: 570: if(--i2c2_trb_count == 0)
  9411  0A4E  3001               	movlw	1
  9412  0A4F  02E9               	subwf	_i2c2_trb_count,f
  9413  0A50  1D03               	btfss	3,2
  9414  0A51  2A57               	goto	i1l225
  9415                           
  9416                           ;i2c2.c: 571: {
  9417                           ;i2c2.c: 572: i2c2_state = S_MASTER_SEND_STOP;
  9418  0A52  3004               	movlw	4
  9419  0A53  00F0               	movwf	??_I2C2_FunctionComplete
  9420  0A54  0870               	movf	??_I2C2_FunctionComplete,w
  9421  0A55  00EA               	movwf	_i2c2_state
  9422                           
  9423                           ;i2c2.c: 573: }
  9424  0A56  0008               	return
  9425  0A57                     i1l225:	
  9426                           
  9427                           ;i2c2.c: 574: else
  9428                           ;i2c2.c: 575: {
  9429                           ;i2c2.c: 576: i2c2_state = S_MASTER_RESTART;
  9430  0A57  01EA               	clrf	_i2c2_state
  9431  0A58  0AEA               	incf	_i2c2_state,f
  9432  0A59  0008               	return
  9433  0A5A                     __end_of_I2C2_FunctionComplete:	
  9434                           
  9435                           	psect	text47
  9436  09A9                     __ptext47:	
  9437 ;; *************** function _I2C2_BusCollisionISR *****************
  9438 ;; Defined at:
  9439 ;;		line 728 in file "mcc_generated_files/i2c2.c"
  9440 ;; Parameters:    Size  Location     Type
  9441 ;;		None
  9442 ;; Auto vars:     Size  Location     Type
  9443 ;;		None
  9444 ;; Return value:  Size  Location     Type
  9445 ;;                  1    wreg      void 
  9446 ;; Registers used:
  9447 ;;		None
  9448 ;; Tracked objects:
  9449 ;;		On entry : 0/0
  9450 ;;		On exit  : 0/0
  9451 ;;		Unchanged: 0/0
  9452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;Total ram usage:        0 bytes
  9458 ;; Hardware stack levels used:    1
  9459 ;; This function calls:
  9460 ;;		Nothing
  9461 ;; This function is called by:
  9462 ;;		_INTERRUPT_InterruptManager
  9463 ;; This function uses a non-reentrant model
  9464 ;;
  9465                           
  9466                           
  9467                           ;psect for function _I2C2_BusCollisionISR
  9468  09A9                     _I2C2_BusCollisionISR:	
  9469                           
  9470                           ;incstack = 0
  9471                           ; Regs used in _I2C2_BusCollisionISR: []
  9472  09A9  0008               	return
  9473  09AA                     __end_of_I2C2_BusCollisionISR:	
  9474                           
  9475                           	psect	text48
  9476  0C20                     __ptext48:	
  9477 ;; *************** function _I2C1_ISR *****************
  9478 ;; Defined at:
  9479 ;;		line 57 in file "mcc_generated_files/i2c1.c"
  9480 ;; Parameters:    Size  Location     Type
  9481 ;;		None
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;  i2c_data        1    9[COMMON] unsigned char 
  9484 ;; Return value:  Size  Location     Type
  9485 ;;                  1    wreg      void 
  9486 ;; Registers used:
  9487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9488 ;; Tracked objects:
  9489 ;;		On entry : 0/0
  9490 ;;		On exit  : 0/0
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;Total ram usage:        2 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; Hardware stack levels required when called:    3
  9500 ;; This function calls:
  9501 ;;		_I2C1_StatusCallback
  9502 ;; This function is called by:
  9503 ;;		_INTERRUPT_InterruptManager
  9504 ;; This function uses a non-reentrant model
  9505 ;;
  9506                           
  9507                           
  9508                           ;psect for function _I2C1_ISR
  9509  0C20                     _I2C1_ISR:	
  9510                           
  9511                           ;i2c1.c: 59: uint8_t i2c_data = 0x55;
  9512                           
  9513                           ;incstack = 0
  9514                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9515  0C20  3055               	movlw	85
  9516  0C21  00F8               	movwf	??_I2C1_ISR
  9517  0C22  0878               	movf	??_I2C1_ISR,w
  9518  0C23  00F9               	movwf	I2C1_ISR@i2c_data
  9519                           
  9520                           ;i2c1.c: 64: PIR1bits.SSP1IF = 0;
  9521  0C24  0020               	movlb	0	; select bank0
  9522  0C25  1191               	bcf	17,3	;volatile
  9523                           
  9524                           ;i2c1.c: 65: i2c_data = SSP1BUF;
  9525  0C26  0024               	movlb	4	; select bank4
  9526  0C27  0811               	movf	17,w	;volatile
  9527  0C28  00F8               	movwf	??_I2C1_ISR
  9528  0C29  0878               	movf	??_I2C1_ISR,w
  9529  0C2A  00F9               	movwf	I2C1_ISR@i2c_data
  9530                           
  9531                           ;i2c1.c: 66: if(1 == SSP1STATbits.R_nW)
  9532  0C2B  1D14               	btfss	20,2	;volatile
  9533  0C2C  2C34               	goto	i1l64
  9534                           
  9535                           ;i2c1.c: 67: {
  9536                           ;i2c1.c: 68: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
  9537  0C2D  1A94               	btfsc	20,5	;volatile
  9538  0C2E  1F16               	btfss	22,6	;volatile
  9539  0C2F  2C32               	goto	i1l3610
  9540                           
  9541                           ;i2c1.c: 69: {
  9542                           ;i2c1.c: 71: I2C1_StatusCallback(I2C1_SLAVE_READ_COMPLETED);
  9543  0C30  3003               	movlw	3
  9544  0C31  2C42               	goto	L3
  9545  0C32                     i1l3610:	
  9546                           ;i2c1.c: 72: }
  9547                           
  9548                           
  9549                           ;i2c1.c: 73: else
  9550                           ;i2c1.c: 74: {
  9551                           ;i2c1.c: 76: I2C1_StatusCallback(I2C1_SLAVE_READ_REQUEST);
  9552  0C32  3001               	movlw	1
  9553  0C33  2C42               	goto	L3
  9554  0C34                     i1l64:	
  9555                           ;i2c1.c: 77: }
  9556                           ;i2c1.c: 78: }
  9557                           
  9558                           
  9559                           ;i2c1.c: 79: else if(0 == SSP1STATbits.D_nA)
  9560  0C34  1A94               	btfsc	20,5	;volatile
  9561  0C35  2C3D               	goto	i1l3618
  9562                           
  9563                           ;i2c1.c: 80: {
  9564                           ;i2c1.c: 83: if(0x00 == i2c_data)
  9565  0C36  0879               	movf	I2C1_ISR@i2c_data,w
  9566  0C37  1D03               	btfss	3,2
  9567  0C38  2C3B               	goto	i1l3616
  9568                           
  9569                           ;i2c1.c: 84: {
  9570                           ;i2c1.c: 86: I2C1_StatusCallback(I2C1_SLAVE_GENERAL_CALL_REQUEST);
  9571  0C39  3004               	movlw	4
  9572  0C3A  2C42               	goto	L3
  9573  0C3B                     i1l3616:	
  9574                           ;i2c1.c: 87: }
  9575                           
  9576                           
  9577                           ;i2c1.c: 88: else
  9578                           ;i2c1.c: 89: {
  9579                           ;i2c1.c: 91: I2C1_StatusCallback(I2C1_SLAVE_WRITE_REQUEST);
  9580  0C3B  3000               	movlw	0
  9581  0C3C  2C42               	goto	L3
  9582  0C3D                     i1l3618:	
  9583                           ;i2c1.c: 92: }
  9584                           ;i2c1.c: 93: }
  9585                           
  9586                           
  9587                           ;i2c1.c: 94: else
  9588                           ;i2c1.c: 95: {
  9589                           ;i2c1.c: 96: I2C_slaveWriteData = i2c_data;
  9590  0C3D  0879               	movf	I2C1_ISR@i2c_data,w
  9591  0C3E  00F8               	movwf	??_I2C1_ISR
  9592  0C3F  0878               	movf	??_I2C1_ISR,w
  9593  0C40  00FD               	movwf	_I2C_slaveWriteData	;volatile
  9594                           
  9595                           ;i2c1.c: 99: I2C1_StatusCallback(I2C1_SLAVE_WRITE_COMPLETED);
  9596  0C41  3002               	movlw	2
  9597  0C42                     L3:	
  9598  0C42  3186  262C         	fcall	_I2C1_StatusCallback
  9599                           
  9600                           ;i2c1.c: 100: }
  9601                           ;i2c1.c: 102: SSP1CON1bits.CKP = 1;
  9602  0C44  0024               	movlb	4	; select bank4
  9603  0C45  1615               	bsf	21,4	;volatile
  9604  0C46  0008               	return
  9605  0C47                     __end_of_I2C1_ISR:	
  9606                           
  9607                           	psect	text49
  9608  062C                     __ptext49:	
  9609 ;; *************** function _I2C1_StatusCallback *****************
  9610 ;; Defined at:
  9611 ;;		line 106 in file "mcc_generated_files/i2c1.c"
  9612 ;; Parameters:    Size  Location     Type
  9613 ;;  i2c_bus_stat    1    wreg     enum E3053
  9614 ;; Auto vars:     Size  Location     Type
  9615 ;;  i2c_bus_stat    1    7[COMMON] enum E3053
  9616 ;;  pdata           2    5[COMMON] PTR unsigned char 
  9617 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  9618 ;;		 -> readbuf.type(1), readbuf(6), 
  9619 ;; Return value:  Size  Location     Type
  9620 ;;                  1    wreg      void 
  9621 ;; Registers used:
  9622 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9623 ;; Tracked objects:
  9624 ;;		On entry : 0/0
  9625 ;;		On exit  : 0/0
  9626 ;;		Unchanged: 0/0
  9627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9630 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9631 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9632 ;;Total ram usage:        4 bytes
  9633 ;; Hardware stack levels used:    1
  9634 ;; Hardware stack levels required when called:    2
  9635 ;; This function calls:
  9636 ;;		_PROTOCOL_Backplane_Slave_Enabled
  9637 ;;		_PROTOCOL_I2C_GET
  9638 ;;		_PROTOCOL_I2C_SEN
  9639 ;;		_PROTOCOL_I2C_WHO
  9640 ;;		_PROTOCOL_INV
  9641 ;;		_PROTOCOL_RST
  9642 ;;		_PROTOCOL_Read_Lock
  9643 ;;		i1_PROTOCOL_EXT
  9644 ;;		i1_PROTOCOL_SAV
  9645 ;;		i1_PROTOCOL_SET
  9646 ;;		i1_PROTOCOL_STA
  9647 ;;		i1_PROTOCOL_STP
  9648 ;; This function is called by:
  9649 ;;		_I2C1_ISR
  9650 ;; This function uses a non-reentrant model
  9651 ;;
  9652                           
  9653                           
  9654                           ;psect for function _I2C1_StatusCallback
  9655  062C                     _I2C1_StatusCallback:	
  9656                           
  9657                           ;incstack = 0
  9658                           ; Regs used in _I2C1_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9659                           ;I2C1_StatusCallback@i2c_bus_state stored from wreg
  9660  062C  00F7               	movwf	I2C1_StatusCallback@i2c_bus_state
  9661                           
  9662                           ;i2c1.c: 109: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  9663                           ;i2c1.c: 110: static uint8_t next = 0x00;
  9664                           ;i2c1.c: 111: static uint8_t ext_len = 0;
  9665                           ;i2c1.c: 112: static uint8_t ext_cnt = 0;
  9666                           ;i2c1.c: 113: static char ext_buf[48];
  9667                           ;i2c1.c: 114: uint8_t *pdata;
  9668                           ;i2c1.c: 115: switch (i2c_bus_state)
  9669  062D  2EEB               	goto	i1l3426
  9670  062E                     i1l86:	
  9671                           ;i2c1.c: 116: {
  9672                           ;i2c1.c: 117: case I2C1_SLAVE_WRITE_REQUEST:
  9673                           
  9674                           
  9675                           ;i2c1.c: 118: slaveWriteType = SLAVE_DATA_ADDRESS;
  9676  062E  0021               	movlb	1	; select bank1
  9677  062F  01C7               	clrf	I2C1_StatusCallback@slaveWriteType^(0+128)
  9678  0630  0AC7               	incf	I2C1_StatusCallback@slaveWriteType^(0+128),f
  9679                           
  9680                           ;i2c1.c: 119: break;
  9681  0631  0008               	return
  9682  0632                     i1l3352:	
  9683                           ;i2c1.c: 121: case I2C1_SLAVE_GENERAL_CALL_REQUEST:
  9684                           
  9685                           
  9686                           ;i2c1.c: 123: slaveWriteType = SLAVE_GENERAL_CALL;
  9687  0632  3002               	movlw	2
  9688  0633  00F4               	movwf	??_I2C1_StatusCallback
  9689  0634  0874               	movf	??_I2C1_StatusCallback,w
  9690  0635  0021               	movlb	1	; select bank1
  9691  0636  00C7               	movwf	I2C1_StatusCallback@slaveWriteType^(0+128)
  9692                           
  9693                           ;i2c1.c: 124: break;
  9694  0637  0008               	return
  9695  0638                     i1l3354:	
  9696                           ;i2c1.c: 132: case 0x01:
  9697                           
  9698                           ;i2c1.c: 131: switch(next) {
  9699                           
  9700                           ;i2c1.c: 129: {
  9701                           ;i2c1.c: 130: case SLAVE_DATA_ADDRESS:
  9702                           
  9703                           ;i2c1.c: 128: switch(slaveWriteType)
  9704                           
  9705                           ;i2c1.c: 126: case I2C1_SLAVE_WRITE_COMPLETED:
  9706                           
  9707                           
  9708                           ;i2c1.c: 133: PROTOCOL_SET(I2C_slaveWriteData);
  9709  0638  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9710  0639  3189  21E4  3186   	fcall	i1_PROTOCOL_SET
  9711  063C  2EAB               	goto	i1l3400
  9712  063D                     i1l3358:	
  9713                           ;i2c1.c: 138: case 0x04:
  9714                           
  9715                           ;i2c1.c: 137: switch(I2C_slaveWriteData) {
  9716                           
  9717                           ;i2c1.c: 136: case 0x00:
  9718                           
  9719                           ;i2c1.c: 135: break;
  9720                           
  9721                           ;i2c1.c: 134: next = 0x00;
  9722                           
  9723                           
  9724                           ;i2c1.c: 139: PROTOCOL_STA();
  9725  063D  3189  21C7  3186   	fcall	i1_PROTOCOL_STA
  9726                           
  9727                           ;i2c1.c: 140: break;
  9728  0640  2EC4               	goto	i1l3410
  9729  0641                     i1l3360:	
  9730                           ;i2c1.c: 141: case 0x05:
  9731                           
  9732                           
  9733                           ;i2c1.c: 142: PROTOCOL_STP();
  9734  0641  3189  21B3  3186   	fcall	i1_PROTOCOL_STP
  9735                           
  9736                           ;i2c1.c: 143: break;
  9737  0644  2EC4               	goto	i1l3410
  9738  0645                     i1l3362:	
  9739                           ;i2c1.c: 144: case 0x03:
  9740                           
  9741                           
  9742                           ;i2c1.c: 145: PROTOCOL_SAV();
  9743  0645  3189  21F2  3186   	fcall	i1_PROTOCOL_SAV
  9744                           
  9745                           ;i2c1.c: 146: break;
  9746  0648  2EC4               	goto	i1l3410
  9747  0649                     i1l3364:	
  9748                           ;i2c1.c: 147: case 0x06:
  9749                           
  9750                           
  9751                           ;i2c1.c: 148: PROTOCOL_INV();
  9752  0649  3189  21C3  3186   	fcall	_PROTOCOL_INV
  9753                           
  9754                           ;i2c1.c: 149: break;
  9755  064C  2EC4               	goto	i1l3410
  9756  064D                     i1l3366:	
  9757                           ;i2c1.c: 150: case 0x0c:
  9758                           
  9759                           
  9760                           ;i2c1.c: 151: PROTOCOL_RST();
  9761  064D  318A  2204  3186   	fcall	_PROTOCOL_RST
  9762                           
  9763                           ;i2c1.c: 152: break;
  9764  0650  2EC4               	goto	i1l3410
  9765  0651                     i1l103:	
  9766                           ;i2c1.c: 153: case 0x08:
  9767                           
  9768                           
  9769                           ;i2c1.c: 154: next = 0x01;
  9770  0651  01EC               	clrf	I2C1_StatusCallback@next
  9771  0652  0AEC               	incf	I2C1_StatusCallback@next,f
  9772                           
  9773                           ;i2c1.c: 155: break;
  9774  0653  2EC4               	goto	i1l3410
  9775  0654                     i1l3368:	
  9776                           ;i2c1.c: 156: case 0x0a:
  9777                           
  9778                           
  9779                           ;i2c1.c: 157: next = 0x02;
  9780  0654  3002               	movlw	2
  9781  0655  2E8A               	goto	L4
  9782  0656                     i1l3372:	
  9783                           ;i2c1.c: 159: }
  9784                           
  9785                           ;i2c1.c: 158: break;
  9786                           
  9787  0656  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9788                           
  9789                           ; Switch size 1, requested type "space"
  9790                           ; Number of cases is 7, Range of values is 3 to 12
  9791                           ; switch strategies available:
  9792                           ; Name         Instructions Cycles
  9793                           ; simple_byte           22    12 (average)
  9794                           ; direct_byte           29     9 (fixed)
  9795                           ; jumptable            263     9 (fixed)
  9796                           ;	Chosen strategy is simple_byte
  9797  0657  3A03               	xorlw	3	; case 3
  9798  0658  1903               	skipnz
  9799  0659  2E45               	goto	i1l3362
  9800  065A  3A07               	xorlw	7	; case 4
  9801  065B  1903               	skipnz
  9802  065C  2E3D               	goto	i1l3358
  9803  065D  3A01               	xorlw	1	; case 5
  9804  065E  1903               	skipnz
  9805  065F  2E41               	goto	i1l3360
  9806  0660  3A03               	xorlw	3	; case 6
  9807  0661  1903               	skipnz
  9808  0662  2E49               	goto	i1l3364
  9809  0663  3A0E               	xorlw	14	; case 8
  9810  0664  1903               	skipnz
  9811  0665  2E51               	goto	i1l103
  9812  0666  3A02               	xorlw	2	; case 10
  9813  0667  1903               	skipnz
  9814  0668  2E54               	goto	i1l3368
  9815  0669  3A06               	xorlw	6	; case 12
  9816  066A  1903               	skipnz
  9817  066B  2E4D               	goto	i1l3366
  9818  066C  2EC4               	goto	i1l3410
  9819                           
  9820                           ;i2c1.c: 161: }
  9821                           
  9822                           ;i2c1.c: 160: break;
  9823  066D  2EC4               	goto	i1l3410
  9824  066E                     i1l3376:	
  9825  066E  0020               	movlb	0	; select bank0
  9826  066F  086C               	movf	I2C1_StatusCallback@next,w
  9827                           
  9828                           ; Switch size 1, requested type "space"
  9829                           ; Number of cases is 2, Range of values is 0 to 1
  9830                           ; switch strategies available:
  9831                           ; Name         Instructions Cycles
  9832                           ; simple_byte            7     4 (average)
  9833                           ; direct_byte           10     6 (fixed)
  9834                           ; jumptable            260     6 (fixed)
  9835                           ;	Chosen strategy is simple_byte
  9836  0670  3A00               	xorlw	0	; case 0
  9837  0671  1903               	skipnz
  9838  0672  2E56               	goto	i1l3372
  9839  0673  3A01               	xorlw	1	; case 1
  9840  0674  1903               	skipnz
  9841  0675  2E38               	goto	i1l3354
  9842  0676  2EC4               	goto	i1l3410
  9843                           
  9844                           ;i2c1.c: 162: break;
  9845  0677  2EC4               	goto	i1l3410
  9846  0678                     i1l3378:	
  9847                           ;i2c1.c: 164: case SLAVE_GENERAL_CALL:
  9848                           
  9849                           
  9850                           ;i2c1.c: 165: if (I2C_slaveWriteData == 0x02) {
  9851  0678  3002               	movlw	2
  9852  0679  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
  9853  067A  1D03               	btfss	3,2
  9854  067B  2EC4               	goto	i1l3410
  9855                           
  9856                           ;i2c1.c: 166: SSP1CON2bits.GCEN = 0;
  9857  067C  0024               	movlb	4	; select bank4
  9858  067D  1396               	bcf	22,7	;volatile
  9859                           
  9860                           ;i2c1.c: 167: PROTOCOL_Backplane_Slave_Enabled();
  9861  067E  3189  21BF  3186   	fcall	_PROTOCOL_Backplane_Slave_Enabled
  9862                           
  9863                           ;i2c1.c: 168: }
  9864                           ;i2c1.c: 169: break;
  9865  0681  2EC4               	goto	i1l3410
  9866  0682                     i1l3384:	
  9867                           ;i2c1.c: 173: case 0x02:
  9868                           
  9869                           ;i2c1.c: 172: switch(next) {
  9870                           
  9871                           ;i2c1.c: 171: case SLAVE_NORMAL_DATA:
  9872                           
  9873                           
  9874                           ;i2c1.c: 174: ext_len = I2C_slaveWriteData;
  9875  0682  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9876  0683  00F4               	movwf	??_I2C1_StatusCallback
  9877  0684  0874               	movf	??_I2C1_StatusCallback,w
  9878  0685  0021               	movlb	1	; select bank1
  9879  0686  00C6               	movwf	I2C1_StatusCallback@ext_len^(0+128)
  9880                           
  9881                           ;i2c1.c: 175: ext_cnt = 0;
  9882  0687  0020               	movlb	0	; select bank0
  9883  0688  01EB               	clrf	I2C1_StatusCallback@ext_cnt
  9884                           
  9885                           ;i2c1.c: 176: next = 0x03;
  9886  0689  3003               	movlw	3
  9887  068A                     L4:	
  9888  068A  00F4               	movwf	??_I2C1_StatusCallback
  9889  068B  0874               	movf	??_I2C1_StatusCallback,w
  9890  068C  00EC               	movwf	I2C1_StatusCallback@next
  9891                           
  9892                           ;i2c1.c: 177: break;
  9893  068D  2EC4               	goto	i1l3410
  9894  068E                     i1l3390:	
  9895                           ;i2c1.c: 178: case 0x03:
  9896                           
  9897                           
  9898                           ;i2c1.c: 179: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
  9899  068E  087D               	movf	_I2C_slaveWriteData,w	;volatile
  9900  068F  00F4               	movwf	??_I2C1_StatusCallback
  9901  0690  086B               	movf	I2C1_StatusCallback@ext_cnt,w
  9902  0691  3EA0               	addlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9903  0692  0086               	movwf	6
  9904  0693  3001               	movlw	1	; select bank3/4
  9905  0694  0087               	movwf	7
  9906  0695  0874               	movf	??_I2C1_StatusCallback,w
  9907  0696  0081               	movwf	1
  9908  0697  3001               	movlw	1
  9909  0698  00F4               	movwf	??_I2C1_StatusCallback
  9910  0699  0874               	movf	??_I2C1_StatusCallback,w
  9911  069A  07EB               	addwf	I2C1_StatusCallback@ext_cnt,f
  9912                           
  9913                           ;i2c1.c: 180: if (ext_cnt >= ext_len) {
  9914  069B  0021               	movlb	1	; select bank1
  9915  069C  0846               	movf	I2C1_StatusCallback@ext_len^(0+128),w
  9916  069D  0020               	movlb	0	; select bank0
  9917  069E  026B               	subwf	I2C1_StatusCallback@ext_cnt,w
  9918  069F  1C03               	skipc
  9919  06A0  2EC4               	goto	i1l3410
  9920                           
  9921                           ;i2c1.c: 181: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
  9922  06A1  3189  21B0  3186   	fcall	_PROTOCOL_Read_Lock
  9923  06A4  3A00               	xorlw	0
  9924  06A5  1D03               	skipz
  9925  06A6  2EAB               	goto	i1l3400
  9926  06A7  30A0               	movlw	(low (I2C1_StatusCallback@ext_buf| (0+256)))& (0+255)
  9927  06A8  3189  21A8  3186   	fcall	i1_PROTOCOL_EXT
  9928  06AB                     i1l3400:	
  9929                           
  9930                           ;i2c1.c: 182: next = 0x00;
  9931  06AB  0020               	movlb	0	; select bank0
  9932  06AC  01EC               	clrf	I2C1_StatusCallback@next
  9933                           
  9934                           ;i2c1.c: 185: }
  9935                           
  9936                           ;i2c1.c: 183: }
  9937                           ;i2c1.c: 184: break;
  9938  06AD  2EC4               	goto	i1l3410
  9939  06AE                     i1l3404:	
  9940  06AE  0020               	movlb	0	; select bank0
  9941  06AF  086C               	movf	I2C1_StatusCallback@next,w
  9942                           
  9943                           ; Switch size 1, requested type "space"
  9944                           ; Number of cases is 2, Range of values is 2 to 3
  9945                           ; switch strategies available:
  9946                           ; Name         Instructions Cycles
  9947                           ; simple_byte            7     4 (average)
  9948                           ; direct_byte           13     9 (fixed)
  9949                           ; jumptable            263     9 (fixed)
  9950                           ;	Chosen strategy is simple_byte
  9951  06B0  3A02               	xorlw	2	; case 2
  9952  06B1  1903               	skipnz
  9953  06B2  2E82               	goto	i1l3384
  9954  06B3  3A01               	xorlw	1	; case 3
  9955  06B4  1903               	skipnz
  9956  06B5  2E8E               	goto	i1l3390
  9957  06B6  2EC4               	goto	i1l3410
  9958                           
  9959                           ;i2c1.c: 190: }
  9960                           
  9961                           ;i2c1.c: 188: break;
  9962                           
  9963                           ;i2c1.c: 187: default:
  9964                           
  9965                           ;i2c1.c: 186: break;
  9966  06B7  2EC4               	goto	i1l3410
  9967  06B8                     i1l3408:	
  9968  06B8  0021               	movlb	1	; select bank1
  9969  06B9  0847               	movf	I2C1_StatusCallback@slaveWriteType^(0+128),w
  9970                           
  9971                           ; Switch size 1, requested type "space"
  9972                           ; Number of cases is 3, Range of values is 0 to 2
  9973                           ; switch strategies available:
  9974                           ; Name         Instructions Cycles
  9975                           ; simple_byte           10     6 (average)
  9976                           ; direct_byte           12     6 (fixed)
  9977                           ; jumptable            260     6 (fixed)
  9978                           ;	Chosen strategy is simple_byte
  9979  06BA  3A00               	xorlw	0	; case 0
  9980  06BB  1903               	skipnz
  9981  06BC  2EAE               	goto	i1l3404
  9982  06BD  3A01               	xorlw	1	; case 1
  9983  06BE  1903               	skipnz
  9984  06BF  2E6E               	goto	i1l3376
  9985  06C0  3A03               	xorlw	3	; case 2
  9986  06C1  1903               	skipnz
  9987  06C2  2E78               	goto	i1l3378
  9988  06C3  2EC4               	goto	i1l3410
  9989  06C4                     i1l3410:	
  9990                           
  9991                           ;i2c1.c: 192: slaveWriteType = SLAVE_NORMAL_DATA;
  9992  06C4  0021               	movlb	1	; select bank1
  9993  06C5  01C7               	clrf	I2C1_StatusCallback@slaveWriteType^(0+128)
  9994                           
  9995                           ;i2c1.c: 193: break;
  9996  06C6  0008               	return
  9997  06C7                     i1l3412:	
  9998                           ;i2c1.c: 197: {
  9999                           ;i2c1.c: 198: case 0x01:
 10000                           
 10001                           ;i2c1.c: 196: switch (I2C_slaveWriteData)
 10002                           
 10003                           ;i2c1.c: 195: case I2C1_SLAVE_READ_REQUEST:
 10004                           
 10005                           
 10006                           ;i2c1.c: 199: SSP1BUF = PROTOCOL_I2C_WHO();
 10007  06C7  3189  21AD         	fcall	_PROTOCOL_I2C_WHO
 10008  06C9  0024               	movlb	4	; select bank4
 10009  06CA  0091               	movwf	17	;volatile
 10010                           
 10011                           ;i2c1.c: 200: break;
 10012  06CB  0008               	return
 10013  06CC                     i1l3414:	
 10014                           ;i2c1.c: 201: case 0x07:
 10015                           
 10016                           
 10017                           ;i2c1.c: 202: pdata = PROTOCOL_I2C_SEN();
 10018  06CC  318E  261B         	fcall	_PROTOCOL_I2C_SEN
 10019  06CE  0871               	movf	?_PROTOCOL_I2C_SEN+1,w
 10020  06CF  00F6               	movwf	I2C1_StatusCallback@pdata+1
 10021  06D0  0870               	movf	?_PROTOCOL_I2C_SEN,w
 10022  06D1  00F5               	movwf	I2C1_StatusCallback@pdata
 10023                           
 10024                           ;i2c1.c: 203: SSP1BUF = *pdata;
 10025  06D2  0875               	movf	I2C1_StatusCallback@pdata,w
 10026  06D3  0086               	movwf	6
 10027  06D4  0876               	movf	I2C1_StatusCallback@pdata+1,w
 10028  06D5  0087               	movwf	7
 10029  06D6  0801               	movf	1,w
 10030  06D7  0024               	movlb	4	; select bank4
 10031  06D8  0091               	movwf	17	;volatile
 10032                           
 10033                           ;i2c1.c: 204: break;
 10034  06D9  0008               	return
 10035  06DA                     i1l3418:	
 10036                           ;i2c1.c: 205: case 0x09:
 10037                           
 10038                           
 10039                           ;i2c1.c: 206: SSP1BUF = PROTOCOL_I2C_GET();
 10040  06DA  3189  21AA         	fcall	_PROTOCOL_I2C_GET
 10041  06DC  0024               	movlb	4	; select bank4
 10042  06DD  0091               	movwf	17	;volatile
 10043                           
 10044                           ;i2c1.c: 208: }
 10045                           
 10046                           ;i2c1.c: 207: break;
 10047  06DE  0008               	return
 10048  06DF                     i1l3422:	
 10049  06DF  087D               	movf	_I2C_slaveWriteData,w	;volatile
 10050                           
 10051                           ; Switch size 1, requested type "space"
 10052                           ; Number of cases is 3, Range of values is 1 to 9
 10053                           ; switch strategies available:
 10054                           ; Name         Instructions Cycles
 10055                           ; simple_byte           10     6 (average)
 10056                           ; direct_byte           27     9 (fixed)
 10057                           ; jumptable            263     9 (fixed)
 10058                           ;	Chosen strategy is simple_byte
 10059  06E0  3A01               	xorlw	1	; case 1
 10060  06E1  1903               	skipnz
 10061  06E2  2EC7               	goto	i1l3412
 10062  06E3  3A06               	xorlw	6	; case 7
 10063  06E4  1903               	skipnz
 10064  06E5  2ECC               	goto	i1l3414
 10065  06E6  3A0E               	xorlw	14	; case 9
 10066  06E7  1903               	skipnz
 10067  06E8  2EDA               	goto	i1l3418
 10068  06E9  2EF5               	goto	i1l124
 10069                           
 10070                           ;i2c1.c: 216: }
 10071                           
 10072                           ;i2c1.c: 214: break;
 10073                           
 10074                           ;i2c1.c: 213: default:
 10075                           
 10076                           ;i2c1.c: 212: break;
 10077                           
 10078                           ;i2c1.c: 211: case I2C1_SLAVE_READ_COMPLETED:
 10079                           
 10080                           ;i2c1.c: 209: break;
 10081  06EA  0008               	return
 10082  06EB                     i1l3426:	
 10083  06EB  0877               	movf	I2C1_StatusCallback@i2c_bus_state,w
 10084                           
 10085                           ; Switch size 1, requested type "space"
 10086                           ; Number of cases is 5, Range of values is 0 to 4
 10087                           ; switch strategies available:
 10088                           ; Name         Instructions Cycles
 10089                           ; direct_byte           16     6 (fixed)
 10090                           ; simple_byte           16     9 (average)
 10091                           ; jumptable            260     6 (fixed)
 10092                           ;	Chosen strategy is direct_byte
 10093  06EC  0084               	movwf	4
 10094  06ED  3005               	movlw	5
 10095  06EE  0204               	subwf	4,w
 10096  06EF  1803               	skipnc
 10097  06F0  0008               	return
 10098  06F1  3188               	movlp	high i1S4822
 10099  06F2  3504               	lslf	4,w
 10100  06F3  3E18               	addlw	low i1S4822
 10101  06F4  0082               	movwf	2
 10102  06F5                     i1l124:	
 10103  06F5  0008               	return
 10104  06F6                     __end_of_I2C1_StatusCallback:	
 10105                           
 10106                           	psect	swtext2
 10107  0818                     __pswtext2:	
 10108  0818                     i1S4822:	
 10109  0818  3186  2E2E         	ljmp	i1l86
 10110  081A  3186  2EDF         	ljmp	i1l3422
 10111  081C  3186  2EB8         	ljmp	i1l3408
 10112  081E  3186  2EF5         	ljmp	i1l124
 10113  0820  3186  2E32         	ljmp	i1l3352
 10114                           
 10115                           	psect	text50
 10116  09B3                     __ptext50:	
 10117 ;; *************** function i1_PROTOCOL_STP *****************
 10118 ;; Defined at:
 10119 ;;		line 98 in file "protocol.c"
 10120 ;; Parameters:    Size  Location     Type
 10121 ;;		None
 10122 ;; Auto vars:     Size  Location     Type
 10123 ;;		None
 10124 ;; Return value:  Size  Location     Type
 10125 ;;                  1    wreg      void 
 10126 ;; Registers used:
 10127 ;;		wreg, status,2, status,0
 10128 ;; Tracked objects:
 10129 ;;		On entry : 0/0
 10130 ;;		On exit  : 0/0
 10131 ;;		Unchanged: 0/0
 10132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;Total ram usage:        0 bytes
 10138 ;; Hardware stack levels used:    1
 10139 ;; This function calls:
 10140 ;;		Nothing
 10141 ;; This function is called by:
 10142 ;;		_I2C1_StatusCallback
 10143 ;; This function uses a non-reentrant model
 10144 ;;
 10145                           
 10146                           
 10147                           ;psect for function i1_PROTOCOL_STP
 10148  09B3                     i1_PROTOCOL_STP:	
 10149                           
 10150                           ;protocol.c: 100: running = 0;
 10151                           
 10152                           ;incstack = 0
 10153                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
 10154  09B3  0021               	movlb	1	; select bank1
 10155  09B4  01C0               	clrf	_running^(0+128)
 10156  09B5  0008               	return
 10157  09B6                     __end_ofi1_PROTOCOL_STP:	
 10158                           
 10159                           	psect	text51
 10160  09C7                     __ptext51:	
 10161 ;; *************** function i1_PROTOCOL_STA *****************
 10162 ;; Defined at:
 10163 ;;		line 93 in file "protocol.c"
 10164 ;; Parameters:    Size  Location     Type
 10165 ;;		None
 10166 ;; Auto vars:     Size  Location     Type
 10167 ;;		None
 10168 ;; Return value:  Size  Location     Type
 10169 ;;                  1    wreg      void 
 10170 ;; Registers used:
 10171 ;;		wreg, status,2, status,0
 10172 ;; Tracked objects:
 10173 ;;		On entry : 0/0
 10174 ;;		On exit  : 0/0
 10175 ;;		Unchanged: 0/0
 10176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10181 ;;Total ram usage:        0 bytes
 10182 ;; Hardware stack levels used:    1
 10183 ;; This function calls:
 10184 ;;		Nothing
 10185 ;; This function is called by:
 10186 ;;		_I2C1_StatusCallback
 10187 ;; This function uses a non-reentrant model
 10188 ;;
 10189                           
 10190                           
 10191                           ;psect for function i1_PROTOCOL_STA
 10192  09C7                     i1_PROTOCOL_STA:	
 10193                           
 10194                           ;protocol.c: 95: running = 1;
 10195                           
 10196                           ;incstack = 0
 10197                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
 10198  09C7  0021               	movlb	1	; select bank1
 10199  09C8  01C0               	clrf	_running^(0+128)
 10200  09C9  0AC0               	incf	_running^(0+128),f
 10201  09CA  0008               	return
 10202  09CB                     __end_ofi1_PROTOCOL_STA:	
 10203                           
 10204                           	psect	text52
 10205  09E4                     __ptext52:	
 10206 ;; *************** function i1_PROTOCOL_SET *****************
 10207 ;; Defined at:
 10208 ;;		line 111 in file "protocol.c"
 10209 ;; Parameters:    Size  Location     Type
 10210 ;;  value_          1    wreg     unsigned char 
 10211 ;; Auto vars:     Size  Location     Type
 10212 ;;  value_          1    1[COMMON] unsigned char 
 10213 ;; Return value:  Size  Location     Type
 10214 ;;                  1    wreg      void 
 10215 ;; Registers used:
 10216 ;;		wreg, status,2, status,0
 10217 ;; Tracked objects:
 10218 ;;		On entry : 0/0
 10219 ;;		On exit  : 0/0
 10220 ;;		Unchanged: 0/0
 10221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;Total ram usage:        2 bytes
 10227 ;; Hardware stack levels used:    1
 10228 ;; This function calls:
 10229 ;;		Nothing
 10230 ;; This function is called by:
 10231 ;;		_I2C1_StatusCallback
 10232 ;; This function uses a non-reentrant model
 10233 ;;
 10234                           
 10235                           
 10236                           ;psect for function i1_PROTOCOL_SET
 10237  09E4                     i1_PROTOCOL_SET:	
 10238                           
 10239                           ;incstack = 0
 10240                           ; Regs used in i1_PROTOCOL_SET: [wreg+status,2+status,0]
 10241                           ;i1PROTOCOL_SET@value_ stored from wreg
 10242  09E4  00F1               	movwf	i1PROTOCOL_SET@value_
 10243                           
 10244                           ;protocol.c: 112: value = value_;
 10245  09E5  0871               	movf	i1PROTOCOL_SET@value_,w
 10246  09E6  00F0               	movwf	??i1_PROTOCOL_SET
 10247  09E7  0870               	movf	??i1_PROTOCOL_SET,w
 10248  09E8  0020               	movlb	0	; select bank0
 10249  09E9  00E0               	movwf	_value
 10250  09EA  0008               	return
 10251  09EB                     __end_ofi1_PROTOCOL_SET:	
 10252                           
 10253                           	psect	text53
 10254  09F2                     __ptext53:	
 10255 ;; *************** function i1_PROTOCOL_SAV *****************
 10256 ;; Defined at:
 10257 ;;		line 107 in file "protocol.c"
 10258 ;; Parameters:    Size  Location     Type
 10259 ;;		None
 10260 ;; Auto vars:     Size  Location     Type
 10261 ;;		None
 10262 ;; Return value:  Size  Location     Type
 10263 ;;                  1    wreg      void 
 10264 ;; Registers used:
 10265 ;;		wreg, status,2, status,0, pclath, cstack
 10266 ;; Tracked objects:
 10267 ;;		On entry : 0/0
 10268 ;;		On exit  : 0/0
 10269 ;;		Unchanged: 0/0
 10270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;Total ram usage:        1 bytes
 10276 ;; Hardware stack levels used:    1
 10277 ;; Hardware stack levels required when called:    1
 10278 ;; This function calls:
 10279 ;;		i1_DATAEE_WriteByte
 10280 ;; This function is called by:
 10281 ;;		_I2C1_StatusCallback
 10282 ;; This function uses a non-reentrant model
 10283 ;;
 10284                           
 10285                           
 10286                           ;psect for function i1_PROTOCOL_SAV
 10287  09F2                     i1_PROTOCOL_SAV:	
 10288                           
 10289                           ;protocol.c: 108: DATAEE_WriteByte(1, value);
 10290                           
 10291                           ;incstack = 0
 10292                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
 10293  09F2  0020               	movlb	0	; select bank0
 10294  09F3  0860               	movf	_value,w
 10295  09F4  00F3               	movwf	??i1_PROTOCOL_SAV
 10296  09F5  0873               	movf	??i1_PROTOCOL_SAV,w
 10297  09F6  00F0               	movwf	i1DATAEE_WriteByte@bData
 10298  09F7  3001               	movlw	1
 10299  09F8  318A  22F6         	fcall	i1_DATAEE_WriteByte
 10300  09FA  0008               	return
 10301  09FB                     __end_ofi1_PROTOCOL_SAV:	
 10302                           
 10303                           	psect	text54
 10304  0AF6                     __ptext54:	
 10305 ;; *************** function i1_DATAEE_WriteByte *****************
 10306 ;; Defined at:
 10307 ;;		line 180 in file "mcc_generated_files/memory.c"
 10308 ;; Parameters:    Size  Location     Type
 10309 ;;  bAdd            1    wreg     unsigned char 
 10310 ;;  bData           1    0[COMMON] unsigned char 
 10311 ;; Auto vars:     Size  Location     Type
 10312 ;;  bAdd            1    1[COMMON] unsigned char 
 10313 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
 10314 ;; Return value:  Size  Location     Type
 10315 ;;                  1    wreg      void 
 10316 ;; Registers used:
 10317 ;;		wreg, status,2, status,0
 10318 ;; Tracked objects:
 10319 ;;		On entry : 0/0
 10320 ;;		On exit  : 0/0
 10321 ;;		Unchanged: 0/0
 10322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10323 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10326 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10327 ;;Total ram usage:        3 bytes
 10328 ;; Hardware stack levels used:    1
 10329 ;; This function calls:
 10330 ;;		Nothing
 10331 ;; This function is called by:
 10332 ;;		i1_PROTOCOL_SAV
 10333 ;; This function uses a non-reentrant model
 10334 ;;
 10335                           
 10336                           
 10337                           ;psect for function i1_DATAEE_WriteByte
 10338  0AF6                     i1_DATAEE_WriteByte:	
 10339                           
 10340                           ;incstack = 0
 10341                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
 10342                           ;i1DATAEE_WriteByte@bAdd stored from wreg
 10343  0AF6  00F1               	movwf	i1DATAEE_WriteByte@bAdd
 10344                           
 10345                           ;memory.c: 182: uint8_t GIEBitValue = 0;
 10346  0AF7  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
 10347                           
 10348                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
 10349  0AF8  0871               	movf	i1DATAEE_WriteByte@bAdd,w
 10350  0AF9  0023               	movlb	3	; select bank3
 10351  0AFA  0091               	movwf	17	;volatile
 10352                           
 10353                           ;memory.c: 185: EEDATL = bData;
 10354  0AFB  0870               	movf	i1DATAEE_WriteByte@bData,w
 10355  0AFC  0093               	movwf	19	;volatile
 10356                           
 10357                           ;memory.c: 186: EECON1bits.EEPGD = 0;
 10358  0AFD  1395               	bcf	21,7	;volsfr
 10359                           
 10360                           ;memory.c: 187: EECON1bits.CFGS = 0;
 10361  0AFE  1315               	bcf	21,6	;volsfr
 10362                           
 10363                           ;memory.c: 188: EECON1bits.WREN = 1;
 10364  0AFF  1515               	bsf	21,2	;volsfr
 10365                           
 10366                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
 10367  0B00  3000               	movlw	0
 10368  0B01  1B8B               	btfsc	11,7	;volatile
 10369  0B02  3001               	movlw	1
 10370  0B03  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
 10371                           
 10372                           ;memory.c: 191: INTCONbits.GIE = 0;
 10373  0B04  138B               	bcf	11,7	;volatile
 10374                           
 10375                           ;memory.c: 192: EECON2 = 0x55;
 10376  0B05  3055               	movlw	85
 10377  0B06  0096               	movwf	22	;volsfr
 10378                           
 10379                           ;memory.c: 193: EECON2 = 0xAA;
 10380  0B07  30AA               	movlw	170
 10381  0B08  0096               	movwf	22	;volsfr
 10382                           
 10383                           ;memory.c: 194: EECON1bits.WR = 1;
 10384  0B09  1495               	bsf	21,1	;volsfr
 10385  0B0A                     i1l480:	
 10386                           ;memory.c: 197: {
 10387                           
 10388                           ;memory.c: 196: while (EECON1bits.WR)
 10389                           
 10390  0B0A  1895               	btfsc	21,1	;volsfr
 10391  0B0B  2B0A               	goto	i1l480
 10392                           
 10393                           ;memory.c: 198: }
 10394                           ;memory.c: 200: EECON1bits.WREN = 0;
 10395  0B0C  1115               	bcf	21,2	;volsfr
 10396                           
 10397                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 10398  0B0D  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
 10399  0B0E  1C03               	skipc
 10400  0B0F  138B               	bcf	11,7	;volatile
 10401  0B10  1803               	skipnc
 10402  0B11  178B               	bsf	11,7	;volatile
 10403  0B12  0008               	return
 10404  0B13                     __end_ofi1_DATAEE_WriteByte:	
 10405                           
 10406                           	psect	text55
 10407  09A8                     __ptext55:	
 10408 ;; *************** function i1_PROTOCOL_EXT *****************
 10409 ;; Defined at:
 10410 ;;		line 116 in file "protocol.c"
 10411 ;; Parameters:    Size  Location     Type
 10412 ;;  char_buf        1    wreg     PTR unsigned char 
 10413 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10414 ;; Auto vars:     Size  Location     Type
 10415 ;;  char_buf        1  (no storage) PTR unsigned char 
 10416 ;;		 -> buf(48), I2C1_StatusCallback@ext_buf(48), 
 10417 ;; Return value:  Size  Location     Type
 10418 ;;                  1    wreg      void 
 10419 ;; Registers used:
 10420 ;;		wreg, status,2, status,0
 10421 ;; Tracked objects:
 10422 ;;		On entry : 0/0
 10423 ;;		On exit  : 0/0
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10430 ;;Total ram usage:        0 bytes
 10431 ;; Hardware stack levels used:    1
 10432 ;; This function calls:
 10433 ;;		Nothing
 10434 ;; This function is called by:
 10435 ;;		_I2C1_StatusCallback
 10436 ;; This function uses a non-reentrant model
 10437 ;;
 10438                           
 10439                           
 10440                           ;psect for function i1_PROTOCOL_EXT
 10441  09A8                     i1_PROTOCOL_EXT:	
 10442                           
 10443                           ;incstack = 0
 10444                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0]
 10445  09A8  0008               	return
 10446  09A9                     __end_ofi1_PROTOCOL_EXT:	
 10447                           
 10448                           	psect	text56
 10449  09B0                     __ptext56:	
 10450 ;; *************** function _PROTOCOL_Read_Lock *****************
 10451 ;; Defined at:
 10452 ;;		line 124 in file "protocol.c"
 10453 ;; Parameters:    Size  Location     Type
 10454 ;;		None
 10455 ;; Auto vars:     Size  Location     Type
 10456 ;;		None
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  1    wreg      unsigned char 
 10459 ;; Registers used:
 10460 ;;		wreg
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10470 ;;Total ram usage:        0 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; This function calls:
 10473 ;;		Nothing
 10474 ;; This function is called by:
 10475 ;;		_I2C1_StatusCallback
 10476 ;; This function uses a non-reentrant model
 10477 ;;
 10478                           
 10479                           
 10480                           ;psect for function _PROTOCOL_Read_Lock
 10481  09B0                     _PROTOCOL_Read_Lock:	
 10482                           
 10483                           ;protocol.c: 125: return locked;
 10484                           
 10485                           ;incstack = 0
 10486                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
 10487  09B0  0021               	movlb	1	; select bank1
 10488  09B1  0841               	movf	_locked^(0+128),w
 10489  09B2  0008               	return
 10490  09B3                     __end_of_PROTOCOL_Read_Lock:	
 10491                           
 10492                           	psect	text57
 10493  0A04                     __ptext57:	
 10494 ;; *************** function _PROTOCOL_RST *****************
 10495 ;; Defined at:
 10496 ;;		line 279 in file "protocol.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;		None
 10499 ;; Auto vars:     Size  Location     Type
 10500 ;;		None
 10501 ;; Return value:  Size  Location     Type
 10502 ;;                  1    wreg      void 
 10503 ;; Registers used:
 10504 ;;		wreg, status,2, status,0
 10505 ;; Tracked objects:
 10506 ;;		On entry : 0/0
 10507 ;;		On exit  : 0/0
 10508 ;;		Unchanged: 0/0
 10509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10512 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10513 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10514 ;;Total ram usage:        1 bytes
 10515 ;; Hardware stack levels used:    1
 10516 ;; This function calls:
 10517 ;;		Nothing
 10518 ;; This function is called by:
 10519 ;;		_I2C1_StatusCallback
 10520 ;; This function uses a non-reentrant model
 10521 ;;
 10522                           
 10523                           
 10524                           ;psect for function _PROTOCOL_RST
 10525  0A04                     _PROTOCOL_RST:	
 10526                           
 10527                           ;protocol.c: 280: if (readbuf.status != TLV_SET) {
 10528                           
 10529                           ;incstack = 0
 10530                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
 10531  0A04  0021               	movlb	1	; select bank1
 10532  0A05  084C               	movf	(_readbuf^(0+128)+4),w
 10533  0A06  1903               	btfsc	3,2
 10534  0A07  0008               	return
 10535                           
 10536                           ;protocol.c: 281: readbuf.buf_cnt = 0;
 10537  0A08  01CD               	clrf	(_readbuf^(0+128)+5)
 10538                           
 10539                           ;protocol.c: 282: readbuf.status = COMPLETE;
 10540  0A09  3003               	movlw	3
 10541  0A0A  00F0               	movwf	??_PROTOCOL_RST
 10542  0A0B  0870               	movf	??_PROTOCOL_RST,w
 10543  0A0C  00CC               	movwf	(_readbuf^(0+128)+4)
 10544  0A0D  0008               	return
 10545  0A0E                     __end_of_PROTOCOL_RST:	
 10546                           
 10547                           	psect	text58
 10548  09C3                     __ptext58:	
 10549 ;; *************** function _PROTOCOL_INV *****************
 10550 ;; Defined at:
 10551 ;;		line 103 in file "protocol.c"
 10552 ;; Parameters:    Size  Location     Type
 10553 ;;		None
 10554 ;; Auto vars:     Size  Location     Type
 10555 ;;		None
 10556 ;; Return value:  Size  Location     Type
 10557 ;;                  1    wreg      void 
 10558 ;; Registers used:
 10559 ;;		None
 10560 ;; Tracked objects:
 10561 ;;		On entry : 0/0
 10562 ;;		On exit  : 0/0
 10563 ;;		Unchanged: 0/0
 10564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10569 ;;Total ram usage:        0 bytes
 10570 ;; Hardware stack levels used:    1
 10571 ;; This function calls:
 10572 ;;		Nothing
 10573 ;; This function is called by:
 10574 ;;		_I2C1_StatusCallback
 10575 ;; This function uses a non-reentrant model
 10576 ;;
 10577                           
 10578                           
 10579                           ;psect for function _PROTOCOL_INV
 10580  09C3                     _PROTOCOL_INV:	
 10581                           
 10582                           ;protocol.c: 104: invoked = 1;
 10583                           
 10584                           ;incstack = 0
 10585                           ; Regs used in _PROTOCOL_INV: []
 10586  09C3  0021               	movlb	1	; select bank1
 10587  09C4  01BF               	clrf	_invoked^(0+128)
 10588  09C5  0ABF               	incf	_invoked^(0+128),f
 10589  09C6  0008               	return
 10590  09C7                     __end_of_PROTOCOL_INV:	
 10591                           
 10592                           	psect	text59
 10593  09AD                     __ptext59:	
 10594 ;; *************** function _PROTOCOL_I2C_WHO *****************
 10595 ;; Defined at:
 10596 ;;		line 199 in file "protocol.c"
 10597 ;; Parameters:    Size  Location     Type
 10598 ;;		None
 10599 ;; Auto vars:     Size  Location     Type
 10600 ;;		None
 10601 ;; Return value:  Size  Location     Type
 10602 ;;                  1    wreg      unsigned char 
 10603 ;; Registers used:
 10604 ;;		wreg
 10605 ;; Tracked objects:
 10606 ;;		On entry : 0/0
 10607 ;;		On exit  : 0/0
 10608 ;;		Unchanged: 0/0
 10609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;Total ram usage:        0 bytes
 10615 ;; Hardware stack levels used:    1
 10616 ;; This function calls:
 10617 ;;		Nothing
 10618 ;; This function is called by:
 10619 ;;		_I2C1_StatusCallback
 10620 ;; This function uses a non-reentrant model
 10621 ;;
 10622                           
 10623                           
 10624                           ;psect for function _PROTOCOL_I2C_WHO
 10625  09AD                     _PROTOCOL_I2C_WHO:	
 10626                           
 10627                           ;protocol.c: 200: return slave_address;
 10628                           
 10629                           ;incstack = 0
 10630                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
 10631  09AD  0021               	movlb	1	; select bank1
 10632  09AE  0843               	movf	_slave_address^(0+128),w
 10633  09AF  0008               	return
 10634  09B0                     __end_of_PROTOCOL_I2C_WHO:	
 10635                           
 10636                           	psect	text60
 10637  0E1B                     __ptext60:	
 10638 ;; *************** function _PROTOCOL_I2C_SEN *****************
 10639 ;; Defined at:
 10640 ;;		line 398 in file "protocol.c"
 10641 ;; Parameters:    Size  Location     Type
 10642 ;;		None
 10643 ;; Auto vars:     Size  Location     Type
 10644 ;;  pdata           2    2[COMMON] PTR unsigned char 
 10645 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
 10646 ;;		 -> readbuf.type(1), readbuf(6), 
 10647 ;; Return value:  Size  Location     Type
 10648 ;;                  2   52[None  ] PTR unsigned char 
 10649 ;; Registers used:
 10650 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10651 ;; Tracked objects:
 10652 ;;		On entry : 0/0
 10653 ;;		On exit  : 0/0
 10654 ;;		Unchanged: 0/0
 10655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10657 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10658 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;Total ram usage:        4 bytes
 10661 ;; Hardware stack levels used:    1
 10662 ;; This function calls:
 10663 ;;		Nothing
 10664 ;; This function is called by:
 10665 ;;		_I2C1_StatusCallback
 10666 ;; This function uses a non-reentrant model
 10667 ;;
 10668                           
 10669                           
 10670                           ;psect for function _PROTOCOL_I2C_SEN
 10671  0E1B                     _PROTOCOL_I2C_SEN:	
 10672                           
 10673                           ;protocol.c: 399: uint8_t *pdata;
 10674                           ;protocol.c: 400: switch(readbuf.status) {
 10675                           
 10676                           ;incstack = 0
 10677                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
 10678  0E1B  2E4A               	goto	i1l3170
 10679  0E1C                     i1l3148:	
 10680                           ;protocol.c: 401: case TLV_SET:
 10681                           
 10682                           
 10683                           ;protocol.c: 402: pdata = &readbuf.type;
 10684  0E1C  30C8               	movlw	low _readbuf
 10685  0E1D  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10686  0E1E  3000               	movlw	high _readbuf
 10687  0E1F  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10688                           
 10689                           ;protocol.c: 403: readbuf.status = TYPE_SENT;
 10690  0E20  0021               	movlb	1	; select bank1
 10691  0E21  01CC               	clrf	(_readbuf^(0+128)+4)
 10692  0E22  0ACC               	incf	(_readbuf^(0+128)+4),f
 10693                           
 10694                           ;protocol.c: 404: break;
 10695  0E23  2E59               	goto	i1l3172
 10696  0E24                     i1l3152:	
 10697                           ;protocol.c: 405: case TYPE_SENT:
 10698                           
 10699                           
 10700                           ;protocol.c: 406: pdata = &readbuf.length;
 10701  0E24  30C9               	movlw	low (_readbuf+1)
 10702  0E25  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10703  0E26  3000               	movlw	high (_readbuf+1)
 10704  0E27  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10705                           
 10706                           ;protocol.c: 407: readbuf.status = LENGTH_SENT;
 10707  0E28  3002               	movlw	2
 10708  0E29  2E41               	goto	L5
 10709  0E2A                     i1l3156:	
 10710                           ;protocol.c: 409: case LENGTH_SENT:
 10711                           
 10712                           ;protocol.c: 408: break;
 10713                           
 10714                           
 10715                           ;protocol.c: 410: if (readbuf.buf_cnt < readbuf.length) {
 10716  0E2A  0849               	movf	(_readbuf^(0+128)+1),w
 10717  0E2B  024D               	subwf	(_readbuf^(0+128)+5),w
 10718  0E2C  1803               	skipnc
 10719  0E2D  2E3B               	goto	i1l3160
 10720                           
 10721                           ;protocol.c: 411: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
 10722  0E2E  084D               	movf	(_readbuf^(0+128)+5),w
 10723  0E2F  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10724  0E30  01F1               	clrf	??_PROTOCOL_I2C_SEN+1
 10725  0E31  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10726  0E32  074A               	addwf	(low ((_readbuf| 0+2)))^(0+128),w
 10727  0E33  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10728  0E34  0871               	movf	??_PROTOCOL_I2C_SEN+1,w
 10729  0E35  3D4B               	addwfc	((low ((_readbuf| 0+2))+1))^(0+128),w
 10730  0E36  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10731  0E37  3001               	movlw	1
 10732  0E38  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10733  0E39  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10734  0E3A  07CD               	addwf	(_readbuf^(0+128)+5),f
 10735  0E3B                     i1l3160:	
 10736                           
 10737                           ;protocol.c: 412: }
 10738                           ;protocol.c: 413: if (readbuf.buf_cnt == readbuf.length) {
 10739  0E3B  084D               	movf	(_readbuf^(0+128)+5),w
 10740  0E3C  0649               	xorwf	(_readbuf^(0+128)+1),w
 10741  0E3D  1D03               	skipz
 10742  0E3E  2E59               	goto	i1l3172
 10743                           
 10744                           ;protocol.c: 414: readbuf.buf_cnt = 0;
 10745  0E3F  01CD               	clrf	(_readbuf^(0+128)+5)
 10746                           
 10747                           ;protocol.c: 415: readbuf.status = COMPLETE;
 10748  0E40  3003               	movlw	3
 10749  0E41                     L5:	
 10750  0E41  00F0               	movwf	??_PROTOCOL_I2C_SEN
 10751  0E42  0870               	movf	??_PROTOCOL_I2C_SEN,w
 10752  0E43  00CC               	movwf	(_readbuf^(0+128)+4)
 10753                           
 10754                           ;protocol.c: 416: }
 10755                           ;protocol.c: 417: break;
 10756  0E44  2E59               	goto	i1l3172
 10757  0E45                     i1l3166:	
 10758                           ;protocol.c: 418: case COMPLETE:
 10759                           
 10760                           
 10761                           ;protocol.c: 419: pdata = &type_no_data;
 10762  0E45  30EC               	movlw	low _type_no_data
 10763  0E46  00F2               	movwf	PROTOCOL_I2C_SEN@pdata
 10764  0E47  3000               	movlw	high _type_no_data
 10765  0E48  00F3               	movwf	PROTOCOL_I2C_SEN@pdata+1
 10766                           
 10767                           ;protocol.c: 421: }
 10768                           
 10769                           ;protocol.c: 420: break;
 10770  0E49  2E59               	goto	i1l3172
 10771  0E4A                     i1l3170:	
 10772  0E4A  0021               	movlb	1	; select bank1
 10773  0E4B  084C               	movf	(_readbuf^(0+128)+4),w
 10774                           
 10775                           ; Switch size 1, requested type "space"
 10776                           ; Number of cases is 4, Range of values is 0 to 3
 10777                           ; switch strategies available:
 10778                           ; Name         Instructions Cycles
 10779                           ; simple_byte           13     7 (average)
 10780                           ; direct_byte           14     6 (fixed)
 10781                           ; jumptable            260     6 (fixed)
 10782                           ;	Chosen strategy is simple_byte
 10783  0E4C  3A00               	xorlw	0	; case 0
 10784  0E4D  1903               	skipnz
 10785  0E4E  2E1C               	goto	i1l3148
 10786  0E4F  3A01               	xorlw	1	; case 1
 10787  0E50  1903               	skipnz
 10788  0E51  2E24               	goto	i1l3152
 10789  0E52  3A03               	xorlw	3	; case 2
 10790  0E53  1903               	skipnz
 10791  0E54  2E2A               	goto	i1l3156
 10792  0E55  3A01               	xorlw	1	; case 3
 10793  0E56  1903               	skipnz
 10794  0E57  2E45               	goto	i1l3166
 10795  0E58  2E59               	goto	i1l3172
 10796  0E59                     i1l3172:	
 10797                           
 10798                           ;protocol.c: 422: return pdata;
 10799  0E59  0873               	movf	PROTOCOL_I2C_SEN@pdata+1,w
 10800  0E5A  00F1               	movwf	?_PROTOCOL_I2C_SEN+1
 10801  0E5B  0872               	movf	PROTOCOL_I2C_SEN@pdata,w
 10802  0E5C  00F0               	movwf	?_PROTOCOL_I2C_SEN
 10803  0E5D  0008               	return
 10804  0E5E                     __end_of_PROTOCOL_I2C_SEN:	
 10805                           
 10806                           	psect	text61
 10807  09AA                     __ptext61:	
 10808 ;; *************** function _PROTOCOL_I2C_GET *****************
 10809 ;; Defined at:
 10810 ;;		line 203 in file "protocol.c"
 10811 ;; Parameters:    Size  Location     Type
 10812 ;;		None
 10813 ;; Auto vars:     Size  Location     Type
 10814 ;;		None
 10815 ;; Return value:  Size  Location     Type
 10816 ;;                  1    wreg      unsigned char 
 10817 ;; Registers used:
 10818 ;;		wreg
 10819 ;; Tracked objects:
 10820 ;;		On entry : 0/0
 10821 ;;		On exit  : 0/0
 10822 ;;		Unchanged: 0/0
 10823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10828 ;;Total ram usage:        0 bytes
 10829 ;; Hardware stack levels used:    1
 10830 ;; This function calls:
 10831 ;;		Nothing
 10832 ;; This function is called by:
 10833 ;;		_I2C1_StatusCallback
 10834 ;; This function uses a non-reentrant model
 10835 ;;
 10836                           
 10837                           
 10838                           ;psect for function _PROTOCOL_I2C_GET
 10839  09AA                     _PROTOCOL_I2C_GET:	
 10840                           
 10841                           ;protocol.c: 204: return value;
 10842                           
 10843                           ;incstack = 0
 10844                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
 10845  09AA  0020               	movlb	0	; select bank0
 10846  09AB  0860               	movf	_value,w
 10847  09AC  0008               	return
 10848  09AD                     __end_of_PROTOCOL_I2C_GET:	
 10849                           
 10850                           	psect	text62
 10851  09BF                     __ptext62:	
 10852 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
 10853 ;; Defined at:
 10854 ;;		line 195 in file "protocol.c"
 10855 ;; Parameters:    Size  Location     Type
 10856 ;;		None
 10857 ;; Auto vars:     Size  Location     Type
 10858 ;;		None
 10859 ;; Return value:  Size  Location     Type
 10860 ;;                  1    wreg      void 
 10861 ;; Registers used:
 10862 ;;		None
 10863 ;; Tracked objects:
 10864 ;;		On entry : 0/0
 10865 ;;		On exit  : 0/0
 10866 ;;		Unchanged: 0/0
 10867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10869 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10871 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10872 ;;Total ram usage:        0 bytes
 10873 ;; Hardware stack levels used:    1
 10874 ;; This function calls:
 10875 ;;		Nothing
 10876 ;; This function is called by:
 10877 ;;		_I2C1_StatusCallback
 10878 ;; This function uses a non-reentrant model
 10879 ;;
 10880                           
 10881                           
 10882                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
 10883  09BF                     _PROTOCOL_Backplane_Slave_Enabled:	
 10884                           
 10885                           ;protocol.c: 196: backplane_slave_enabled = 1;
 10886                           
 10887                           ;incstack = 0
 10888                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
 10889  09BF  0021               	movlb	1	; select bank1
 10890  09C0  01BA               	clrf	_backplane_slave_enabled^(0+128)
 10891  09C1  0ABA               	incf	_backplane_slave_enabled^(0+128),f
 10892  09C2  0008               	return
 10893  09C3                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
 10894                           
 10895                           	psect	text63
 10896  0ABF                     __ptext63:	
 10897 ;; *************** function _EUSART_Transmit_ISR *****************
 10898 ;; Defined at:
 10899 ;;		line 165 in file "mcc_generated_files/eusart.c"
 10900 ;; Parameters:    Size  Location     Type
 10901 ;;		None
 10902 ;; Auto vars:     Size  Location     Type
 10903 ;;		None
 10904 ;; Return value:  Size  Location     Type
 10905 ;;                  1    wreg      void 
 10906 ;; Registers used:
 10907 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10908 ;; Tracked objects:
 10909 ;;		On entry : 0/0
 10910 ;;		On exit  : 0/0
 10911 ;;		Unchanged: 0/0
 10912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10914 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10915 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10916 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10917 ;;Total ram usage:        1 bytes
 10918 ;; Hardware stack levels used:    1
 10919 ;; This function calls:
 10920 ;;		Nothing
 10921 ;; This function is called by:
 10922 ;;		_INTERRUPT_InterruptManager
 10923 ;; This function uses a non-reentrant model
 10924 ;;
 10925                           
 10926                           
 10927                           ;psect for function _EUSART_Transmit_ISR
 10928  0ABF                     _EUSART_Transmit_ISR:	
 10929                           
 10930                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 10931                           
 10932                           ;incstack = 0
 10933                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 10934  0ABF  3008               	movlw	8
 10935  0AC0  027A               	subwf	_eusartTxBufferRemaining,w	;volatile
 10936  0AC1  1803               	skipnc
 10937  0AC2  2AD7               	goto	i1l395
 10938                           
 10939                           ;eusart.c: 170: {
 10940                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
 10941  0AC3  087B               	movf	_eusartTxTail,w
 10942  0AC4  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
 10943  0AC5  0086               	movwf	6
 10944  0AC6  0187               	clrf	7
 10945  0AC7  0801               	movf	1,w
 10946  0AC8  0023               	movlb	3	; select bank3
 10947  0AC9  009A               	movwf	26	;volatile
 10948  0ACA  3001               	movlw	1
 10949  0ACB  00F0               	movwf	??_EUSART_Transmit_ISR
 10950  0ACC  0870               	movf	??_EUSART_Transmit_ISR,w
 10951  0ACD  07FB               	addwf	_eusartTxTail,f	;volatile
 10952                           
 10953                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 10954  0ACE  3008               	movlw	8
 10955  0ACF  027B               	subwf	_eusartTxTail,w	;volatile
 10956  0AD0  1803               	btfsc	3,0
 10957                           
 10958                           ;eusart.c: 173: {
 10959                           ;eusart.c: 174: eusartTxTail = 0;
 10960  0AD1  01FB               	clrf	_eusartTxTail	;volatile
 10961                           
 10962                           ;eusart.c: 175: }
 10963                           ;eusart.c: 176: eusartTxBufferRemaining++;
 10964  0AD2  3001               	movlw	1
 10965  0AD3  00F0               	movwf	??_EUSART_Transmit_ISR
 10966  0AD4  0870               	movf	??_EUSART_Transmit_ISR,w
 10967  0AD5  07FA               	addwf	_eusartTxBufferRemaining,f	;volatile
 10968                           
 10969                           ;eusart.c: 177: }
 10970  0AD6  0008               	return
 10971  0AD7                     i1l395:	
 10972                           
 10973                           ;eusart.c: 178: else
 10974                           ;eusart.c: 179: {
 10975                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 10976  0AD7  0021               	movlb	1	; select bank1
 10977  0AD8  1211               	bcf	17,4	;volatile
 10978  0AD9  0008               	return
 10979  0ADA                     __end_of_EUSART_Transmit_ISR:	
 10980                           
 10981                           	psect	text64
 10982  0AA4                     __ptext64:	
 10983 ;; *************** function _EUSART_Receive_ISR *****************
 10984 ;; Defined at:
 10985 ;;		line 184 in file "mcc_generated_files/eusart.c"
 10986 ;; Parameters:    Size  Location     Type
 10987 ;;		None
 10988 ;; Auto vars:     Size  Location     Type
 10989 ;;		None
 10990 ;; Return value:  Size  Location     Type
 10991 ;;                  1    wreg      void 
 10992 ;; Registers used:
 10993 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10994 ;; Tracked objects:
 10995 ;;		On entry : 0/0
 10996 ;;		On exit  : 0/0
 10997 ;;		Unchanged: 0/0
 10998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11003 ;;Total ram usage:        1 bytes
 11004 ;; Hardware stack levels used:    1
 11005 ;; This function calls:
 11006 ;;		Nothing
 11007 ;; This function is called by:
 11008 ;;		_INTERRUPT_InterruptManager
 11009 ;; This function uses a non-reentrant model
 11010 ;;
 11011                           
 11012                           
 11013                           ;psect for function _EUSART_Receive_ISR
 11014  0AA4                     _EUSART_Receive_ISR:	
 11015                           
 11016                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
 11017                           
 11018                           ;incstack = 0
 11019                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 11020  0AA4  0023               	movlb	3	; select bank3
 11021  0AA5  1C9D               	btfss	29,1	;volatile
 11022  0AA6  2AA9               	goto	i1l3848
 11023                           
 11024                           ;eusart.c: 188: {
 11025                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 11026  0AA7  121D               	bcf	29,4	;volatile
 11027                           
 11028                           ;eusart.c: 192: RCSTAbits.CREN = 1;
 11029  0AA8  161D               	bsf	29,4	;volatile
 11030  0AA9                     i1l3848:	
 11031                           
 11032                           ;eusart.c: 193: }
 11033                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
 11034  0AA9  0819               	movf	25,w	;volatile
 11035  0AAA  00F0               	movwf	??_EUSART_Receive_ISR
 11036  0AAB  0020               	movlb	0	; select bank0
 11037  0AAC  0863               	movf	_eusartRxHead,w
 11038  0AAD  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
 11039  0AAE  0086               	movwf	6
 11040  0AAF  0187               	clrf	7
 11041  0AB0  0870               	movf	??_EUSART_Receive_ISR,w
 11042  0AB1  0081               	movwf	1
 11043  0AB2  3001               	movlw	1
 11044  0AB3  00F0               	movwf	??_EUSART_Receive_ISR
 11045  0AB4  0870               	movf	??_EUSART_Receive_ISR,w
 11046  0AB5  07E3               	addwf	_eusartRxHead,f	;volatile
 11047                           
 11048                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 11049  0AB6  3008               	movlw	8
 11050  0AB7  0263               	subwf	_eusartRxHead,w	;volatile
 11051  0AB8  1803               	btfsc	3,0
 11052                           
 11053                           ;eusart.c: 198: {
 11054                           ;eusart.c: 199: eusartRxHead = 0;
 11055  0AB9  01E3               	clrf	_eusartRxHead	;volatile
 11056                           
 11057                           ;eusart.c: 200: }
 11058                           ;eusart.c: 201: eusartRxCount++;
 11059  0ABA  3001               	movlw	1
 11060  0ABB  00F0               	movwf	??_EUSART_Receive_ISR
 11061  0ABC  0870               	movf	??_EUSART_Receive_ISR,w
 11062  0ABD  07E1               	addwf	_eusartRxCount,f	;volatile
 11063  0ABE  0008               	return
 11064  0ABF                     __end_of_EUSART_Receive_ISR:	
 11065  007E                     btemp	set	126	;btemp
 11066  007E                     int$flags	set	126
 11067  007E                     wtemp0	set	126


Data Sizes:
    Strings     183
    Constant    10
    Data        4
    BSS         202
    Persistent  8
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     58      79
    BANK1            80      2      79
    BANK2            80      0      64
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c2_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 4
		 -> i2c2_write_no_data@buf(BANK0[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[4]), 

    i2c2_tr_queue.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(BANK0[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_4(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    i2c2_read_no_reg_addr@pbuf	PTR unsigned char  size(1) Largest target is 4
		 -> inv_handler@measure(BANK0[4]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), 

    PROTOCOL_I2C_Send_int8_t@pbuffer	PTR char  size(1) Largest target is 2
		 -> PROTOCOL_Send_int8_t@pbuf(BANK1[1]), inv_handler@data(BANK0[2]), 

    PROTOCOL_I2C_Set_TLV@pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C1_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> inv_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), inv_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_1(CODE[8]), 

    S1036$pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), 

    readbuf.pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_10(CODE[4]), buf(BANK2[48]), STR_2(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_1(CODE[8]), I2C2_ISR@i2c_address(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[10]), STR_45(CODE[9]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> STR_36(CODE[14]), STR_35(CODE[9]), STR_34(CODE[10]), STR_33(CODE[9]), 
		 -> STR_32(CODE[10]), STR_31(CODE[9]), STR_30(CODE[7]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[9]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[10]), STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[8]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[9]), STR_17(CODE[6]), 
		 -> STR_16(CODE[10]), STR_13(CODE[10]), STR_9(CODE[10]), STR_5(CODE[10]), 
		 -> STR_3(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(BANK0[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    I2C2_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 4
		 -> i2c2_write_no_data@buf(BANK0[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[4]), 

    I2C2_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterReadTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 4
		 -> inv_handler@measure(BANK0[4]), 

    I2C2_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(1) Largest target is 4
		 -> i2c2_write_no_data@buf(BANK0[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[4]), 

    I2C2_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), 

    i2c2_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(1) Largest target is 4
		 -> i2c2_write_no_data@buf(BANK0[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[4]), 

    i2c2_object.pTrTail.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(BANK0[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    I2C2_MasterTRBInsert@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(BANK0[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    I2C2_MasterRead@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_read@status(COMMON[1]), 

    I2C2_MasterRead@pdata	PTR unsigned char  size(1) Largest target is 4
		 -> inv_handler@measure(BANK0[4]), 

    F3084.pbuffer	PTR unsigned char  size(1) Largest target is 4
		 -> i2c2_write_no_data@buf(BANK0[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[4]), 

    I2C2_MasterWrite@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_write_no_data@status(BANK0[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    I2C2_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 2
		 -> i2c2_write_no_data@buf(BANK0[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), 

    F3079.pbuffer	PTR unsigned char  size(1) Largest target is 4
		 -> i2c2_write_no_data@buf(BANK0[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[4]), 

    I2C2_ISR@pi2c_buf_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> i2c2_write_no_data@buf(BANK0[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[4]), 
		 -> I2C2_ISR@i2c_address(BANK0[2]), NULL(NULL[0]), 

    S264$pbuffer	PTR unsigned char  size(1) Largest target is 4
		 -> i2c2_write_no_data@buf(BANK0[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[4]), 

    p_i2c2_trb_current.pbuffer	PTR unsigned char  size(1) Largest target is 4
		 -> i2c2_write_no_data@buf(BANK0[1]), i2c2_read@reg(COMMON[1]), i2c2_write@buf(BANK0[2]), inv_handler@measure(BANK0[4]), 

    p_i2c2_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), NULL(NULL[0]), 

    i2c2_object.pTrHead.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(BANK0[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    i2c2_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    S276$pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(BANK0[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    p_i2c2_current.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c2_read_no_reg_addr@status(BANK0[1]), i2c2_write_no_data@status(BANK0[1]), i2c2_read@status(COMMON[1]), i2c2_write@status(BANK0[1]), 

    S276$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    p_i2c2_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C2_MasterRead@trBlock(BANK1[4]), I2C2_MasterWrite@trBlock(BANK1[4]), 

    p_i2c2_current	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), NULL(NULL[0]), 

    S287$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    S287$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    i2c2_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c2_tr_queue(BANK1[3]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), 

    I2C1_StatusCallback@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK1[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK2[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C2_ISR->_I2C2_Stop
    _I2C1_ISR->_I2C1_StatusCallback
    _I2C1_StatusCallback->_PROTOCOL_I2C_SEN
    _I2C1_StatusCallback->i1_PROTOCOL_SAV
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _PROTOCOL_Loop->_inv_handler
    _inv_handler->_PROTOCOL_I2C_Send_int8_t
    _i2c2_write_no_data->_I2C2_MasterWrite
    _i2c2_write->_I2C2_MasterWrite
    _I2C2_MasterWrite->_I2C2_MasterWriteTRBBuild
    _i2c2_read_no_reg_addr->_I2C2_MasterRead
    _I2C2_MasterRead->_I2C2_MasterReadTRBBuild
    ___aldiv->___lmul
    _PROTOCOL_I2C_Send_int8_t->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_PROTOCOL_Loop

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   25063
                                             57 BANK0      1     1      0
                  _EUSART_Initialize
                    _I2C1_Initialize
                    _I2C2_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   24525
                                             55 BANK0      2     2      0
                                              0 BANK1      2     2      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                        _inv_handler *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    2040
                                              1 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) _inv_handler                                         16    16      0   15195
                                             39 BANK0     16    16      0
           _PROTOCOL_I2C_Send_int8_t
                            ___aldiv
                             ___lmul
              _i2c2_read_no_reg_addr
                         _i2c2_write
                 _i2c2_write_no_data
 ---------------------------------------------------------------------------------
 (3) _i2c2_write_no_data                                   8     5      3    2475
                                             15 BANK0      8     5      3
                   _I2C2_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _i2c2_write                                          10     6      4    2374
                                             15 BANK0     10     6      4
                   _I2C2_MasterWrite
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterWrite                                     7     3      4    1831
                                              8 BANK0      7     3      4
               _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterWriteTRBBuild                             7     3      4     450
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _i2c2_read_no_reg_addr                                9     5      4    2384
                                             15 BANK0      9     5      4
                    _I2C2_MasterRead
 ---------------------------------------------------------------------------------
 (4) _I2C2_MasterRead                                      7     3      4    1598
                                              8 BANK0      7     3      4
            _I2C2_MasterReadTRBBuild
               _I2C2_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterTRBInsert                                 4     2      2     494
                                              1 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (5) _I2C2_MasterReadTRBBuild                              7     3      4     481
                                              1 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     444
                                              1 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___aldiv                                             15     7      8     753
                                             13 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_I2C_Send_int8_t                             4     3      1    6401
                                             35 BANK0      4     3      1
               _PROTOCOL_I2C_Set_TLV
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    20      4    5341
                                             15 BANK0     20    16      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      93
                                              3 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      62
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     386
                                              9 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     395
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _PROTOCOL_I2C_Set_TLV                                 6     3      3     737
                                              1 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2    1081
                                              7 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      99
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     582
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     315
                                              4 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      31
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     253
                                              4 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     253
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         1     1      0      99
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8     538
                                              2 BANK0     10     2      8
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C2_Initialize                                      1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C1_Initialize                                      2     2      0       0
                                              1 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0     255
                                              0 BANK0      1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _I2C1_ISR
               _I2C2_BusCollisionISR
                           _I2C2_ISR
 ---------------------------------------------------------------------------------
 (8) _I2C2_ISR                                             4     4      0      22
                                              2 COMMON     4     4      0
              _I2C2_FunctionComplete
                          _I2C2_Stop
 ---------------------------------------------------------------------------------
 (9) _I2C2_Stop                                            2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (9) _I2C2_FunctionComplete                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _I2C2_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C1_ISR                                             2     2      0     233
                                              8 COMMON     2     2      0
                _I2C1_StatusCallback
 ---------------------------------------------------------------------------------
 (9) _I2C1_StatusCallback                                  4     4      0     187
                                              4 COMMON     4     4      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                 _PROTOCOL_Read_Lock
                     i1_PROTOCOL_EXT
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SET                                      2     2      0      22
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (11) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_EXT                                      1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Read_Lock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_SEN                                    4     4      0      26
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Initialize
   _I2C1_Initialize
     _PROTOCOL_Read_Device_Address
   _I2C2_Initialize
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _inv_handler *
       _PROTOCOL_I2C_Send_int8_t
         _PROTOCOL_I2C_Set_TLV
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
       ___aldiv
         ___lmul (ARG)
       ___lmul
       _i2c2_read_no_reg_addr
         _I2C2_MasterRead
           _I2C2_MasterReadTRBBuild
           _I2C2_MasterTRBInsert
       _i2c2_write
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
       _i2c2_write_no_data
         _I2C2_MasterWrite
           _I2C2_MasterTRBInsert
           _I2C2_MasterWriteTRBBuild
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
     _strncmp *
   _TMR0_Initialize
   _WDT_Initialize

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_ISR
     _I2C1_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       _PROTOCOL_Read_Lock
       i1_PROTOCOL_EXT
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP
   _I2C2_BusCollisionISR
   _I2C2_ISR
     _I2C2_FunctionComplete
     _I2C2_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3A      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      2      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     11C      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     11C      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Sep 20 08:38:30 2017

                 i2c2_write_no_data@timeout 0033                                           _i 005F  
                                         _j 00B9                                           pc 0002  
               i2c2_read_no_reg_addr@status 0037                      __end_ofi1_PROTOCOL_EXT 09A9  
                    __end_ofi1_PROTOCOL_SAV 09FB                      __end_ofi1_PROTOCOL_SET 09EB  
                    __end_ofi1_PROTOCOL_STA 09CB                      __end_ofi1_PROTOCOL_STP 09B6  
           __end_of_TMR0_HasOverflowOccured 09D3                                 __CFG_CP$OFF 0000  
                     ?_I2C2_MasterTRBInsert 0021                i2c2_read_no_reg_addr@timeout 0035  
                       ___wmul@multiplicand 0023                             _timer0ReloadVal 00C5  
            I2C2_MasterReadTRBBuild@address 0023                                 __CFG_LVP$ON 0000  
                                       l605 01CA                                         l622 0255  
                                       l383 0BE3                                         l480 0BCC  
                                       l570 00A7                                         l548 054C  
                                       l582 0174                                         l746 0256  
                                       l598 0154                                         l942 0C1D  
                              __CFG_CPD$OFF 0000                                         _buf 0120  
                                       _cnt 00C2                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_IESO$ON 0000  
                           inv_handler@data 0051                                ?_EUSART_Read 0070  
                          __end_of_I2C1_ISR 0C47                            __end_of_I2C2_ISR 0526  
                                      l1122 0F8F                                        l1063 0AE3  
                                      l4100 07EB                                        l4102 07F0  
                                      l4120 0A28                                        l4210 00AC  
                                      l4106 07F7                                        l4212 00B5  
                                      l4204 00A2                                        l4126 0ADD  
                                      l4150 0DB9                                        l4310 0202  
                              _tmr_overflow 00BC                                        l4160 0DD4  
                                      l4312 0206                                        l4320 021B  
                                      l4304 01F3                                        l4232 0105  
                                      l4224 00F1                                        l4216 00C2  
                                      l4082 0BF7                                        l4242 0122  
                                      l4410 0CE9                                        l4156 0DCB  
                                      l4148 0DAD                                        l4172 0CF2  
                                      l4068 0BD8                                        l4316 0213  
                                      l4252 0140                                        l4236 0107  
                                      l4260 0156                                        l4404 0CE3  
                                      l4174 0CFE                                        l4182 0D13  
                                      l4326 0220                                        l4254 014B  
                                      l4246 0124                                        l4238 0115  
                                      l4422 0EB7                                        l4190 0CB8  
                                      l4512 0B33                                        l4272 018E  
                                      l4248 0133                                        l4328 0086  
                                      l4424 0ECF                                        l4440 0D7D  
                                      l4096 07E4                                        l4408 0CC6  
                                      l4610 0F40                                        l4602 0F34  
                                      l4178 0D0A                                        l4282 019F  
                                      l4434 0EDF                                        l4426 0EDB  
                                      l4612 0F69                                        l4276 0199  
                                      l4436 0EFB                                        l4444 0D87  
                                      l4196 0C90                                        l4364 0C13  
                                      l4470 0FB0                                        l4462 0FA0  
                                      l4382 0D3E                                        l4710 038F  
                                      l4702 034C                                        l4608 0F3C  
                                      l4296 01E6                                        l4288 01BE  
                                      l4480 0FDE                                        l4472 0FBE  
                                      l4376 0D34                                        l4618 0F79  
                                      l4298 01E9                                        l4386 0D23  
                                      l4722 03E2                                        l4706 036B  
                                      l4484 0FE9                                        l4388 0D44  
                                      l4716 03B3                                        l4652 0282  
                                      l4590 0F17                                        l4398 0CD9  
                                      l4574 0DF7                                        l4582 0DD9  
                                      l4654 0283                                        l4592 0F0F  
                                      l4488 0FF7                                        l4584 0E18  
                                      l4664 0291                                        l4594 0F1C  
                                      l4578 0E0F                                        l4692 030E  
                                      l4684 02D0                                        l4696 0327  
                                      l4688 02F5                                        STR_1 0766  
                                      STR_2 0775                                        STR_3 0782  
                                      STR_4 07A3                                        STR_5 072C  
                                      STR_6 07B3                                        STR_7 079B  
                                      STR_8 07A7                                        STR_9 0736  
                                      _LATA 010C                                        _LATB 010D  
                                      _LATC 010E                                        u4015 0D88  
                                      u4105 0FD3                                        u4025 0D8F  
                                      u4115 0FDF                                        u3425 0AE4  
                                      u3505 0DCC                                        u3435 0AE9  
                                      u4075 0FB3                                        u3535 0CF5  
                                      u4095 0FBF                                        u3465 0DB0  
                                      u3555 0D04                                        u3715 01B4  
                                      u3485 0DBA                                        u3565 0D0B  
                                      u3495 0DC4                                        u3655 011B  
                                      u4607 05B8                                        u4617 05CE  
                                      u4627 0B76                                        u3755 01D9  
                                      i1l64 0C34                                        u4597 055D  
                                      i1l86 062E                                        _TMR0 0015  
                                      _WPUA 020C                                        _WPUB 020D  
                                      _WPUC 020E                                __CFG_WRT$OFF 0000  
                             __CFG_FCMEN$ON 0000                                        _data 00B8  
                                      _atoi 0F0D                                        _main 0D46  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E                 I2C2_MasterReadTRBBuild@ptrb 0027  
                             __CFG_BOREN$ON 0000                                        start 0048  
                             __CFG_MCLRE$ON 0000                         _I2C1_StatusCallback 062C  
                ??_PROTOCOL_I2C_Send_int8_t 0044                             ?i1_PROTOCOL_EXT 0070  
                           ?i1_PROTOCOL_SAV 0070                             ?i1_PROTOCOL_SET 0070  
                 __size_of_DATAEE_WriteByte 0023                             ?i1_PROTOCOL_STA 0070  
                           ?i1_PROTOCOL_STP 0070                     __end_of_TMR0_Initialize 0A39  
                             __CFG_PLLEN$ON 0000                                  _i2c2_state 006A  
                             ?_EUSART_Write 0070                                  _i2c2_write 0BFA  
            __size_of_OSCILLATOR_Initialize 0005               __end_of_OSCILLATOR_Initialize 09D8  
                   _I2C2_MasterReadTRBBuild 0C47                             __end_of___aldiv 1000  
                                     ?_atoi 0027                                       ?_main 0070  
                                     STR_10 079F                                       STR_11 07AF  
                                     STR_12 07AB                                       STR_20 0787  
                                     STR_13 0718                                       STR_14 0797  
                                     STR_22 078B                                       STR_30 076E  
                                     STR_15 0793                                       STR_40 0714  
                                     STR_24 074A                                       STR_32 0740  
                                     STR_16 070E                                       STR_17 077C  
                             __CFG_WDTE$OFF 0000                                       STR_18 075D  
                                     STR_34 0722                                       STR_19 078F  
                                     STR_35 0754                                       STR_36 0700  
                                     STR_39 078B                           __end_of_I2C2_Stop 0A72  
                           __end_of___lwdiv 0DD9                                       i1l103 0651  
                                     i1l210 04BD                                       i1l124 06F5  
            __size_of_I2C2_FunctionComplete 0011                                       i1l213 04D1  
                                     i1l214 04DF                                       i1l206 049D  
                                     i1l225 0A57                                       i1l218 0506  
                                     i1l323 0015                                       i1l325 0021  
                                     i1l333 0043                                       i1l190 042D  
                                     i1l327 002D                                       i1l184 03FA  
                                     i1l329 0039                             __end_of___lwmod 0D18  
                                     i1l195 0450                                       i1l196 045C  
                                     i1l189 0425                                       i1l480 0B0A  
                                     i1l395 0AD7                  PROTOCOL_I2C_Set_TLV@length 0021  
                                     _RCREG 0199               __end_of_I2C2_FunctionComplete 0A5A  
                                     _RCSTA 019D                      i2c2_write@write_status 0035  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E                                       _TXREG 019A  
                                     _TXSTA 019E                         ___lmul@multiplicand 0025  
              __size_of_PROTOCOL_Initialize 0051                  PROTOCOL_I2C_Set_TLV@status 0026  
                         ??_I2C1_Initialize 0021                        ?_I2C1_StatusCallback 0070  
                           _DATAEE_ReadByte 0A0E             ??_PROTOCOL_Write_Device_Address 0024  
                           __end_of_dpowers 0700                              _WDT_Initialize 07FC  
            PROTOCOL_Initialize@inv_handler 0027                             __end_of_isdigit 0A2A  
                              ?_inv_handler 0070                                       _value 0060  
                                     atoi@a 002C                                       atoi@s 002E  
                                     _putch 09D8                I2C2_MasterReadTRBBuild@pdata 0021  
                    ?_i2c2_read_no_reg_addr 002F                                       pclath 000A  
                    ??_PROTOCOL_I2C_Set_TLV 0024                                       status 0003  
                                     wtemp0 007E                             __end_of_strncmp 0E1B  
                         ??_I2C2_MasterRead 002C                           ??_I2C2_Initialize 0021  
                           __initialization 004A                                __end_of_atoi 0F7E  
                              __end_of_main 0D74                      ??_I2C2_MasterTRBInsert 0023  
                            ??_EUSART_Write 0021                              i2c2_write@data 0032  
               ?_INTERRUPT_InterruptManager 0070            __end_of_I2C2_MasterWriteTRBBuild 0B70  
          PROTOCOL_Initialize@start_handler 0024                                      ??_atoi 0029  
                                    ??_main 0059                                 _i2c2_object 005A  
                        _PROTOCOL_Read_Lock 09B0                           inv_handler@status 004C  
                    __end_of_WDT_Initialize 0800                       ??_I2C1_StatusCallback 0074  
                __end_ofi1_DATAEE_WriteByte 0B13                                      i1S4820 0800  
                                    i1S4822 0818                                      _EEADRH 0192  
                                    _EEADRL 0191                                      _EEDATH 0194  
                                    _EEDATL 0193                                      _EECON2 0196  
                                    _ANSELA 018C                                      ?_putch 0070  
                                    _ANSELB 018D                                      _ANSELC 018E  
                       ?_PROTOCOL_Read_Lock 0070                          _PROTOCOL_Loop_Func 00B6  
              __end_of_I2C2_BusCollisionISR 09AA                                      i1l3160 0E3B  
                                    i1l3152 0E24                                      i1l3400 06AB  
                                    i1l3170 0E4A                                      i1l3410 06C4  
                                    i1l3156 0E2A                                      i1l3172 0E59  
                                    i1l3148 0E1C                                      i1l3412 06C7  
                                    i1l3404 06AE                                      i1l3166 0E45  
                                    i1l3414 06CC                                      i1l3422 06DF  
                                    i1l3360 0641                                      i1l3408 06B8  
                                    i1l3352 0632                                      i1l3418 06DA  
                                    i1l3362 0645                                      i1l3354 0638  
                                    i1l3426 06EB                                      i1l3610 0C32  
                                    i1l3364 0649                                      i1l3372 0656  
                                    i1l3390 068E                                      i1l3366 064D  
                                    i1l3358 063D                                      i1l3454 0A70  
                                    i1l3384 0682                                      i1l3368 0654  
                                    i1l3376 066E                                      i1l3616 0C3B  
                                    i1l3378 0678                                      i1l3618 0C3D  
                                    i1l3740 04C5                                      i1l3732 04AB  
                                    i1l3724 0498                                      i1l3718 048D  
                                    i1l3752 04E6                                      i1l3770 050D  
                                    i1l3666 0418                                      i1l3772 0511  
                                    i1l3756 04ED                                      i1l3684 044B  
                                    i1l3678 0439                                      i1l3848 0AA9  
                                    i1l3768 050A                                      i1l3698 0479  
                                    i1l3778 051A                                      _OSCCON 0099  
          __size_of_TMR0_HasOverflowOccured 0004                                      _TMR0IF 005A  
                                    _SPBRGH 019C                                      _SPBRGL 019B  
                                    _WDTCON 0097                       I2C2_MasterRead@length 0028  
            PROTOCOL_Initialize@set_handler 0026                              __CFG_PWRTE$OFF 0000  
                 PROTOCOL_Initialize@scaler 0029                                      ___lmul 0D74  
                                 ??___aldiv 0035                                      ___wmul 0ADA  
                            _p_i2c2_current 0067                              __CFG_STVREN$ON 0000  
                 ??_I2C2_MasterReadTRBBuild 0025                                   ??___lwdiv 0025  
                      ??_PROTOCOL_Read_Lock 0070                                   ??___lwmod 002D  
                              _type_no_data 00EC                         _EUSART_Transmit_ISR 0ABF  
                          ?_TMR0_Initialize 0070                                      _locked 00C1  
                                 ?_I2C1_ISR 0070                                   ?_I2C2_ISR 0070  
                               ?_i2c2_write 002F                    I2C2_Stop@completion_code 0071  
                                    _printf 0081                     __end_of_DATAEE_ReadByte 0A1B  
             I2C2_MasterReadTRBBuild@length 0022                                __pdataCOMMON 007D  
                                 ??_isdigit 0021                    __end_of_PROTOCOL_I2C_GET 09AD  
                  __end_of_PROTOCOL_I2C_SEN 0E5E                    __end_of_PROTOCOL_I2C_WHO 09B0  
                           ?_WDT_Initialize 0070               i1DATAEE_WriteByte@GIEBitValue 0072  
                                 ??_strncmp 0026                   PROTOCOL_Send_uint8_t@pbuf 00E1  
                      ?_EUSART_Transmit_ISR 0070                        __size_of_EUSART_Read 001F  
                   __end_of__initialization 007D                           ?_I2C2_MasterWrite 0028  
                        ??_I2C2_MasterWrite 002C                              __pcstackCOMMON 0070  
                              __pidataBANK1 09BC                            _DATAEE_WriteByte 0BB3  
                            _i2c2_trb_count 0069                               __end_of_putch 09DE  
                                ??_I2C1_ISR 0078                                  ??_I2C2_ISR 0072  
                     __end_of_PROTOCOL_Loop 03E7                              _OPTION_REGbits 0095  
                  _I2C2_MasterWriteTRBBuild 0B50                 __size_of_i2c2_write_no_data 002E  
              I2C2_MasterWriteTRBBuild@ptrb 0027                     PROTOCOL_Send_float@pbuf 00D6  
                     ??_EUSART_Transmit_ISR 0070                                     ??_putch 0023  
                                __pbssBANK0 005A                                  __pbssBANK1 00A0  
                                __pbssBANK2 0120                                  __pbssBANK3 01A0  
                    i1DATAEE_WriteByte@bAdd 0071                          inv_handler@measure 004D  
                      __end_of_EUSART_Write 0BFA                        __size_of_inv_handler 0106  
                       __size_of_i2c2_write 0026                 __size_of_EUSART_Receive_ISR 001B  
                        i2c2_write@dev_addr 002F                            ??i1_PROTOCOL_EXT 0070  
                          ??i1_PROTOCOL_SAV 0073                            ??i1_PROTOCOL_SET 0070  
                          ??i1_PROTOCOL_STA 0070                            ??i1_PROTOCOL_STP 0070  
                       _PROTOCOL_Initialize 0E5E                                  __pmaintext 0D46  
                                   ?___lmul 0021                                     ?___wmul 0021  
                                __pintentry 0004                             _I2C1_Initialize 0B70  
                                   _BAUDCON 019F                              ___lmul@product 0029  
                                _device_id_ 00E2                          i2c2_write@reg_addr 0031  
                                   _APFCON0 011D                                     _APFCON1 011E  
                      _I2C2_BusCollisionISR 09A9                                     ?_printf 002F  
                 i2c2_read_no_reg_addr@pbuf 0031                  I2C1_StatusCallback@ext_buf 01A0  
                I2C1_StatusCallback@ext_cnt 006B                  I2C1_StatusCallback@ext_len 00C6  
                          ?_DATAEE_ReadByte 0070                               _eusartRxCount 0061  
         I2C1_StatusCallback@slaveWriteType 00C7                  PROTOCOL_Send_uint16_t@pbuf 00DE  
                      ?_PROTOCOL_Initialize 0022           I2C2_ISR@i2c_10bit_address_restart 0064  
                    I2C2_MasterRead@address 0029                                   _I2C2_Stop 0A5A  
                   ??_i2c2_read_no_reg_addr 0033                                     _OSCTUNE 0098  
                                   _SSP1ADD 0212                                     _SSP2ADD 021A  
                                   _SSP1BUF 0211                                     _SSP2BUF 0219  
                                   _SSP1MSK 0213                      _PROTOCOL_Start_Handler 00E8  
                           _I2C2_MasterRead 0C6F                             _I2C2_Initialize 0A72  
                   _TMR0_HasOverflowOccured 09CF                        DATAEE_WriteByte@bAdd 0022  
                    I2C2_MasterRead@trBlock 00CE                                     ___aldiv 0F7E  
                           __size_of___lmul 0030                               ?_PROTOCOL_INV 0070  
                             ?_PROTOCOL_EXT 0070                               ?_PROTOCOL_SAV 0070  
                             ?_PROTOCOL_SET 0070                               ?_PROTOCOL_STA 0070  
                             ?_PROTOCOL_RST 0070                               ?_PROTOCOL_STP 0070  
                           __size_of___wmul 001C                                     ___lwdiv 0DA4  
                                   ___lwmod 0CEB                       ?_I2C2_BusCollisionISR 0070  
                 I2C2_MasterTRBInsert@count 0024                                     __ptext1 07FC  
                                   __ptext2 0A2A                                     __ptext3 0256  
                                   __ptext4 0DD9                                     __ptext5 0526  
                                   __ptext6 0D18                                     __ptext7 0BFA  
                                   __ptext8 0C97                                     __ptext9 0B50  
                 I2C2_MasterTRBInsert@pflag 0022                             __size_of_printf 01D5  
                                   _dpowers 06F6                       _OSCILLATOR_Initialize 09D3  
PROTOCOL_Write_Device_Address@device_id_i2c 0025                       ??_PROTOCOL_Initialize 002A  
                                   _isdigit 0A1B                                     _readbuf 00C8  
                                   _sec_cnt 00BE                                     _invoked 00BF  
                          ___aldiv@dividend 0031                    ??_PIN_MANAGER_Initialize 0021  
                                   _sendbuf 0150           __size_of_PROTOCOL_I2C_Send_int8_t 005E  
                                ?_I2C2_Stop 0070                       _I2C2_FunctionComplete 0A49  
                 ?_PROTOCOL_I2C_Send_int8_t 0043                                     _tmr_cnt 00BD  
                                   clrloop0 09DF                                     _running 00C0  
                                   _strncmp 0DD9                        end_of_initialization 007D  
                _PROTOCOL_Extension_Handler 00B4               __size_of_PROTOCOL_I2C_Set_TLV 0022  
                        i1_DATAEE_WriteByte 0AF6                           _EUSART_Initialize 0A8A  
                   __end_of_I2C1_Initialize 0B91                          ?_EUSART_Initialize 0070  
                     I2C2_MasterWrite@pdata 002E                          _p_i2c2_trb_current 0068  
                                 _RCSTAbits 019D                       I2C2_MasterWrite@pflag 002B  
                                   printf@c 0042                                     printf@f 002F  
                          ___aldiv@quotient 0038                              ??_PROTOCOL_INV 0070  
                            ??_PROTOCOL_EXT 0021                              ??_PROTOCOL_SAV 0024  
                            ??_PROTOCOL_SET 0021                              ??_PROTOCOL_STA 0021  
                            ??_PROTOCOL_RST 0070                              ??_PROTOCOL_STP 0021  
                    I2C2_ISR@i2c_bytes_left 0065                         ?i1_DATAEE_WriteByte 0070  
                              __pstringtext 06F6               __size_of_I2C2_MasterTRBInsert 0045  
                              ??_i2c2_write 0033                         ??_EUSART_Initialize 0021  
               __end_of_I2C1_StatusCallback 06F6                            ??_WDT_Initialize 0021  
                         __size_of_I2C1_ISR 0027                           __size_of_I2C2_ISR 013F  
                   __end_of_I2C2_MasterRead 0C97                            __CFG_FOSC$INTOSC 0000  
                   __end_of_I2C2_Initialize 0A8A                           ?_PROTOCOL_I2C_GET 0070  
                         ?_PROTOCOL_I2C_SEN 0070                           ?_PROTOCOL_I2C_WHO 0070  
                     __size_of_EUSART_Write 0024                   ??_TMR0_HasOverflowOccured 0021  
                              inv_handler@t 0053                          ??_PROTOCOL_I2C_GET 0070  
                        ??_PROTOCOL_I2C_SEN 0070                          ??_PROTOCOL_I2C_WHO 0070  
                      ??i1_DATAEE_WriteByte 0071                                  _tmr_scaler 00EA  
                  __end_of_DATAEE_WriteByte 0BD6                   __end_of_EUSART_Initialize 0AA4  
                               printf@width 0040                          __end_of_i2c2_write 0C20  
                      i1PROTOCOL_SET@value_ 0071                      ??_I2C2_BusCollisionISR 0070  
                  I2C1_StatusCallback@pdata 0075                              __end_of___lmul 0DA4  
               __size_of_PROTOCOL_Read_Lock 0003                  ??_I2C2_MasterWriteTRBBuild 0025  
                            __end_of___wmul 0AF6                               __pidataCOMMON 0003  
                              _EUSART_Write 0BD6                      ?_OSCILLATOR_Initialize 0070  
                 __size_of_I2C2_MasterWrite 0028                              __end_of_printf 0256  
                    ?_I2C2_FunctionComplete 0070                              PROTOCOL_Loop@c 00ED  
                       start_initialization 004A                                 ??_I2C2_Stop 0070  
                  __size_of_TMR0_Initialize 000F             __size_of_PIN_MANAGER_Initialize 001E  
                             ??_EUSART_Read 0021                               i2c2_write@buf 0036  
             i2c2_read_no_reg_addr@dev_addr 002F                                 putch@txData 0023  
                       DATAEE_ReadByte@bAdd 0021             I2C2_MasterWriteTRBBuild@address 0023  
                          i2c2_write@status 0038                        I2C2_MasterRead@pdata 002E  
                  ?_I2C2_MasterReadTRBBuild 0021                        I2C2_MasterRead@pflag 002B  
                          ?_I2C1_Initialize 0070                                    ??___lmul 0029  
                          I2C1_ISR@i2c_data 0079                                    ??___wmul 0025  
             I2C2_MasterWriteTRBBuild@pdata 0021                        I2C2_ISR@pi2c_buf_ptr 0066  
                  PROTOCOL_Send_int8_t@pbuf 00E0        __end_of_PROTOCOL_Read_Device_Address 09B9  
     __size_of_PROTOCOL_Read_Device_Address 0003                _PROTOCOL_Read_Device_Address 09B6  
                               __pdataBANK1 00EA                                    ??_printf 0033  
                   i1DATAEE_WriteByte@bData 0070                  __end_of_i2c2_write_no_data 0D46  
               __end_of_EUSART_Transmit_ISR 0ADA                            ?_I2C2_MasterRead 0028  
                               __pbssCOMMON 007A                            ?_I2C2_Initialize 0070  
                                 ___latbits 0002                               __pcstackBANK0 0020  
                             __pcstackBANK1 00ED            I2C1_StatusCallback@i2c_bus_state 0077  
                      _PROTOCOL_Inv_Handler 00B2                                _isdigit$1484 0021  
                             ??_inv_handler 0047                        __end_of_PROTOCOL_INV 09C7  
                      __end_of_PROTOCOL_EXT 0003                        __end_of_PROTOCOL_SAV 0A04  
                      __end_of_PROTOCOL_SET 09F2                        __end_of_PROTOCOL_STA 09CF  
            __size_of_i2c2_read_no_reg_addr 002C                        __end_of_PROTOCOL_RST 0A0E  
                      __end_of_PROTOCOL_STP 09BC               __end_of_i2c2_read_no_reg_addr 0CEB  
                             _i2c2_tr_queue 00D9                  __end_of_EUSART_Receive_ISR 0ABF  
           PROTOCOL_Initialize@stop_handler 0025                  __size_of_EUSART_Initialize 001A  
                       __end_of_EUSART_Read 0B50                      __size_of_PROTOCOL_Loop 0191  
                                 __pnvBANK1 00E2       __end_of_PROTOCOL_Write_Device_Address 0A49  
    __size_of_PROTOCOL_Write_Device_Address 0010               _PROTOCOL_Write_Device_Address 0A39  
                          ___lwdiv@dividend 0023                      _PIN_MANAGER_Initialize 0B13  
                      EUSART_Read@readValue 0022                                    ?___aldiv 002D  
          __end_of_PROTOCOL_I2C_Send_int8_t 0F0D                                    ?___lwdiv 0021  
                                  ?___lwmod 0029                                _eusartRxHead 0063  
                              _eusartTxHead 007C                                _eusartRxTail 0062  
                              _eusartTxTail 007B                                    _I2C1_ISR 0C20  
                                  _I2C2_ISR 03E7               ?_PROTOCOL_Read_Device_Address 0070  
              ??_INTERRUPT_InterruptManager 0020                   PROTOCOL_Send_int16_t@pbuf 00DC  
                                 __pswtext1 0800                                   __pswtext2 0818  
                   _eusartTxBufferRemaining 007A                                    ?_isdigit 0070  
                          ___lwdiv@quotient 0027                    i2c2_write_no_data@status 0036  
                  __size_of_DATAEE_ReadByte 000D                                    ?_strncmp 0021  
                            __size_of_putch 0006                              _eusartRxBuffer 00A0  
           __end_of_I2C2_MasterReadTRBBuild 0C6F                             ___aldiv@divisor 002D  
                         ??_TMR0_Initialize 0021                              _eusartTxBuffer 00A8  
                           ___aldiv@counter 0036                              ___wmul@product 0025  
                                  _LATCbits 010E                        _PROTOCOL_Set_Handler 00E4  
          i2c2_read_no_reg_addr@read_status 0036                                   clear_ram0 09DE  
                       __end_of_inv_handler 062C                                    _PIE1bits 0091  
                                  _PIE4bits 0094                       PROTOCOL_I2C_SEN@pdata 0072  
                  PROTOCOL_I2C_Set_TLV@type 0025         __size_of_INTERRUPT_InterruptManager 0044  
                                  _PIR1bits 0011                                    _PIR4bits 0014  
                                  _SSP1CON1 0215                                    _SSP1CON2 0216  
                                  _SSP1CON3 0217                PROTOCOL_Initialize@device_id 0022  
                                  _SSP2CON1 021D                                    _SSP2CON3 021F  
                                  _SSP1STAT 0214                                    _SSP2STAT 021C  
                            _readbuf_status 00BB                       _PROTOCOL_Stop_Handler 00E6  
               __end_of_PROTOCOL_Initialize 0EAF               I2C2_MasterTRBInsert@ptrb_list 0021  
                   __size_ofi1_PROTOCOL_EXT 0001                     __size_ofi1_PROTOCOL_SAV 0009  
                   __size_ofi1_PROTOCOL_SET 0007                     __size_ofi1_PROTOCOL_STA 0004  
                   __size_ofi1_PROTOCOL_STP 0003                           ___wmul@multiplier 0021  
              __end_of_PROTOCOL_I2C_Set_TLV 0BB3                            _I2C2_MasterWrite 0C97  
                             _PROTOCOL_Loop 0256                                  printf@flag 003F  
                                printf@prec 0037                       DATAEE_WriteByte@bData 0021  
                   I2C1_StatusCallback@next 006C                                 _EUSART_Read 0B31  
                         ___lmul@multiplier 0021                __end_of_I2C2_MasterTRBInsert 07FC  
               PROTOCOL_I2C_Set_TLV@pbuffer 0022                           ?_DATAEE_WriteByte 0021  
  __end_of_PROTOCOL_Backplane_Slave_Enabled 09C3   __size_of_PROTOCOL_Backplane_Slave_Enabled 0004  
        ??_PROTOCOL_Backplane_Slave_Enabled 0070           ?_PROTOCOL_Backplane_Slave_Enabled 0070  
          _PROTOCOL_Backplane_Slave_Enabled 09BF                          ??_DATAEE_WriteByte 0022  
                             _slave_address 00C3                                  _EECON1bits 0195  
            i2c2_write_no_data@write_status 0035                          PROTOCOL_SET@value_ 0022  
                 __size_of_PROTOCOL_I2C_GET 0003                   __size_of_PROTOCOL_I2C_SEN 0043  
                 __size_of_PROTOCOL_I2C_WHO 0003              I2C2_MasterWriteTRBBuild@length 0022  
                   ??_OSCILLATOR_Initialize 0021              ?_PROTOCOL_Write_Device_Address 0070  
                          __size_of___aldiv 0082                            __size_of___lwdiv 0035  
                          __size_of___lwmod 002D                     ??_I2C2_FunctionComplete 0070  
                            ?_PROTOCOL_Loop 0070                    _PROTOCOL_I2C_Send_int8_t 0EAF  
                     __size_of_PROTOCOL_INV 0004                       __size_of_PROTOCOL_EXT 0001  
                     __size_of_PROTOCOL_SAV 0009                       __size_of_PROTOCOL_SET 0007  
                     __size_of_PROTOCOL_STA 0004                       __size_of_PROTOCOL_RST 000A  
                     __size_of_PROTOCOL_STP 0003              ??_PROTOCOL_Read_Device_Address 0021  
                          __size_of_isdigit 000F                             ___lwdiv@divisor 0021  
                               _initialized 00C4                __size_of_I2C1_StatusCallback 00CA  
                           ___lwdiv@counter 0026                       i2c2_write_no_data@buf 0034  
                                  __ptext10 0CBF                                    __ptext11 0C6F  
                                  __ptext20 0CEB                                    __ptext12 07B7  
                                  __ptext21 0DA4                                    __ptext13 0C47  
                                  __ptext30 09EB                                    __ptext22 0B91  
                                  __ptext14 0D74                                    __ptext31 09FB  
                                  __ptext23 0F0D                                    __ptext15 0F7E  
                                  __ptext40 0B70                                    __ptext32 0BB3  
                                  __ptext24 0A1B                                    __ptext16 0EAF  
                                  __ptext41 09B6                                    __ptext33 0002  
                                  __ptext25 0ADA                                    __ptext17 0081  
                                  __ptext50 09B3                                    __ptext42 0A8A  
                                  __ptext34 0B31                                    __ptext26 09CF  
                                  __ptext18 09D8                                    __ptext51 09C7  
                                  __ptext35 0E5E                                    __ptext27 0A39  
                                  __ptext19 0BD6                                    __ptext60 0E1B  
                                  __ptext52 09E4                                    __ptext44 03E7  
                                  __ptext36 0A0E                                    __ptext28 09B9  
                                  __ptext61 09AA                                    __ptext53 09F2  
                                  __ptext45 0A5A                                    __ptext37 0B13  
                                  __ptext29 09CB                                    __ptext62 09BF  
                                  __ptext54 0AF6                                    __ptext46 0A49  
                                  __ptext38 09D3                                    __ptext63 0ABF  
                                  __ptext55 09A8                                    __ptext47 09A9  
                                  __ptext39 0A72                                    __ptext64 0AA4  
                                  __ptext56 09B0                                    __ptext48 0C20  
                                  __ptext57 0A04                                    __ptext49 062C  
                                  __ptext58 09C3                                    __ptext59 09AD  
                              _SSP1CON1bits 0215                                _SSP1CON2bits 0216  
                                  _float100 00B0                 __size_ofi1_DATAEE_WriteByte 001D  
                               _inv_handler 0526                                _SSP2CON1bits 021D  
                              _SSP2CON2bits 021E                 DATAEE_WriteByte@GIEBitValue 0023  
                          __size_of_strncmp 0042                               __size_of_atoi 0071  
                             __size_of_main 002E                                  strncmp@len 0024  
                         ??_DATAEE_ReadByte 0021                     I2C2_MasterWrite@address 0029  
                   _BACKPLANE_SLAVE_ADDRESS 00EB                  __end_of_PROTOCOL_Read_Lock 09B3  
                                  int$flags 007E                                    atoi@sign 002B  
           PROTOCOL_I2C_Send_int8_t@pbuffer 0043                                _PROTOCOL_INV 09C3  
                              _PROTOCOL_EXT 0002                                _PROTOCOL_SAV 09FB  
                              _PROTOCOL_SET 09EB                                _PROTOCOL_STA 09CB  
                              _PROTOCOL_RST 0A04                                _PROTOCOL_STP 09B9  
        __end_of_INTERRUPT_InterruptManager 0048                  _INTERRUPT_InterruptManager 0004  
                                 printf@len 003D                                   printf@val 003B  
                   I2C2_MasterWrite@trBlock 00D2                                _SSP1STATbits 0214  
                  i2c2_read_no_reg_addr@len 0032               __size_of_I2C2_BusCollisionISR 0001  
          __size_of_I2C2_MasterReadTRBBuild 0028                    ?_TMR0_HasOverflowOccured 0070  
                        _I2C_slaveWriteData 007D                                  _INTCONbits 000B  
                                  isdigit@c 0022                     __size_of_WDT_Initialize 0004  
         __size_of_I2C2_MasterWriteTRBBuild 0020                   ?_I2C2_MasterWriteTRBBuild 0021  
                                  intlevel1 0000                            ___lwmod@dividend 002B  
                        _i2c2_write_no_data 0D18                         I2C2_ISR@i2c_address 006D  
                   ?_PIN_MANAGER_Initialize 0070                           __CFG_CLKOUTEN$OFF 0000  
                      _PROTOCOL_I2C_Set_TLV 0B91                                   strncmp@s1 0021  
                                 strncmp@s2 0023                         ?_i2c2_write_no_data 002F  
                   _backplane_slave_enabled 00BA              PROTOCOL_I2C_Send_int8_t@length 0046  
                    I2C2_MasterWrite@length 0028                                    printf@ap 003A  
                                  printf@cp 0038                          _EUSART_Receive_ISR 0AA4  
                           ??_PROTOCOL_Loop 0057                        _I2C2_MasterTRBInsert 07B7  
                  __size_of_I2C1_Initialize 0021                              i1_PROTOCOL_EXT 09A8  
                            i1_PROTOCOL_SAV 09F2                              i1_PROTOCOL_SET 09E4  
                            i1_PROTOCOL_STA 09C7                              i1_PROTOCOL_STP 09B3  
                                _OPTION_REG 0095                         ?_EUSART_Receive_ISR 0070  
                           ___lwmod@divisor 0029                             _TMR0_Initialize 0A2A  
                           ___lwmod@counter 002E                  i2c2_write_no_data@dev_addr 002F  
                              ___aldiv@sign 0037                        ??_i2c2_write_no_data 0032  
               PROTOCOL_Loop@device_address 00EE                        PROTOCOL_EXT@char_buf 0021  
                        EUSART_Write@txData 0022                __size_of_EUSART_Transmit_ISR 001B  
            __end_of_PIN_MANAGER_Initialize 0B31                    __size_of_I2C2_MasterRead 0028  
                  __size_of_I2C2_Initialize 0018                       _i2c2_read_no_reg_addr 0CBF  
                        __size_of_I2C2_Stop 0018                  i2c2_write_no_data@reg_addr 0031  
                      ??_EUSART_Receive_ISR 0070                       ?_PROTOCOL_I2C_Set_TLV 0021  
                  __end_of_I2C2_MasterWrite 0CBF                            _PROTOCOL_I2C_GET 09AA  
                          _PROTOCOL_I2C_SEN 0E1B                            _PROTOCOL_I2C_WHO 09AD  
