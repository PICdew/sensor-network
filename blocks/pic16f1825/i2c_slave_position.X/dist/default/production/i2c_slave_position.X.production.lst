

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Oct 06 02:37:06 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1825
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2,group=3
    28                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    31                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text14,local,class=CODE,merge=1,delta=2,group=3
    33                           	psect	text15,local,class=CODE,merge=1,delta=2,group=3
    34                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2,group=3
    40                           	psect	text22,local,class=CODE,merge=1,delta=2,group=3
    41                           	psect	text23,local,class=CODE,merge=1,delta=2,group=3
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text29,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text40,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	intentry,global,class=CODE,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	swtext1,local,class=CONST,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
    72                           	psect	text53,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
    75                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
    76                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
    77                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
    78                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
    79                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
    80                           	dabs	1,0x7E,2
    81  0000                     
    82                           ; Version 1.41 (B)
    83                           ; Generated 21/02/2017 GMT
    84                           ; 
    85                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC16F1825 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     	;# 
   117  0001                     	;# 
   118  0002                     	;# 
   119  0003                     	;# 
   120  0004                     	;# 
   121  0005                     	;# 
   122  0006                     	;# 
   123  0007                     	;# 
   124  0008                     	;# 
   125  0009                     	;# 
   126  000A                     	;# 
   127  000B                     	;# 
   128  000C                     	;# 
   129  000E                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001E                     	;# 
   143  001F                     	;# 
   144  008C                     	;# 
   145  008E                     	;# 
   146  0091                     	;# 
   147  0092                     	;# 
   148  0093                     	;# 
   149  0095                     	;# 
   150  0096                     	;# 
   151  0097                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009A                     	;# 
   155  009B                     	;# 
   156  009B                     	;# 
   157  009C                     	;# 
   158  009D                     	;# 
   159  009E                     	;# 
   160  010C                     	;# 
   161  010E                     	;# 
   162  0111                     	;# 
   163  0112                     	;# 
   164  0113                     	;# 
   165  0114                     	;# 
   166  0115                     	;# 
   167  0116                     	;# 
   168  0117                     	;# 
   169  0118                     	;# 
   170  0119                     	;# 
   171  011A                     	;# 
   172  011B                     	;# 
   173  011D                     	;# 
   174  011E                     	;# 
   175  018C                     	;# 
   176  018E                     	;# 
   177  0191                     	;# 
   178  0191                     	;# 
   179  0192                     	;# 
   180  0193                     	;# 
   181  0193                     	;# 
   182  0193                     	;# 
   183  0194                     	;# 
   184  0195                     	;# 
   185  0196                     	;# 
   186  0199                     	;# 
   187  019A                     	;# 
   188  019B                     	;# 
   189  019B                     	;# 
   190  019C                     	;# 
   191  019D                     	;# 
   192  019E                     	;# 
   193  019F                     	;# 
   194  020C                     	;# 
   195  020E                     	;# 
   196  0211                     	;# 
   197  0211                     	;# 
   198  0212                     	;# 
   199  0212                     	;# 
   200  0213                     	;# 
   201  0213                     	;# 
   202  0214                     	;# 
   203  0214                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0216                     	;# 
   208  0216                     	;# 
   209  0217                     	;# 
   210  0217                     	;# 
   211  0291                     	;# 
   212  0291                     	;# 
   213  0292                     	;# 
   214  0293                     	;# 
   215  0294                     	;# 
   216  0295                     	;# 
   217  0295                     	;# 
   218  0296                     	;# 
   219  0298                     	;# 
   220  0298                     	;# 
   221  0299                     	;# 
   222  029A                     	;# 
   223  029B                     	;# 
   224  029C                     	;# 
   225  029D                     	;# 
   226  029E                     	;# 
   227  0311                     	;# 
   228  0311                     	;# 
   229  0312                     	;# 
   230  0313                     	;# 
   231  0318                     	;# 
   232  0318                     	;# 
   233  0319                     	;# 
   234  031A                     	;# 
   235  038C                     	;# 
   236  038E                     	;# 
   237  0391                     	;# 
   238  0392                     	;# 
   239  0393                     	;# 
   240  039A                     	;# 
   241  039C                     	;# 
   242  039D                     	;# 
   243  039E                     	;# 
   244  039F                     	;# 
   245  0415                     	;# 
   246  0416                     	;# 
   247  0417                     	;# 
   248  041C                     	;# 
   249  041D                     	;# 
   250  041E                     	;# 
   251  0FE4                     	;# 
   252  0FE5                     	;# 
   253  0FE6                     	;# 
   254  0FE7                     	;# 
   255  0FE8                     	;# 
   256  0FE9                     	;# 
   257  0FEA                     	;# 
   258  0FEB                     	;# 
   259  0FED                     	;# 
   260  0FEE                     	;# 
   261  0FEF                     	;# 
   262  0000                     	;# 
   263  0001                     	;# 
   264  0002                     	;# 
   265  0003                     	;# 
   266  0004                     	;# 
   267  0005                     	;# 
   268  0006                     	;# 
   269  0007                     	;# 
   270  0008                     	;# 
   271  0009                     	;# 
   272  000A                     	;# 
   273  000B                     	;# 
   274  000C                     	;# 
   275  000E                     	;# 
   276  0011                     	;# 
   277  0012                     	;# 
   278  0013                     	;# 
   279  0015                     	;# 
   280  0016                     	;# 
   281  0016                     	;# 
   282  0017                     	;# 
   283  0018                     	;# 
   284  0019                     	;# 
   285  001A                     	;# 
   286  001B                     	;# 
   287  001C                     	;# 
   288  001E                     	;# 
   289  001F                     	;# 
   290  008C                     	;# 
   291  008E                     	;# 
   292  0091                     	;# 
   293  0092                     	;# 
   294  0093                     	;# 
   295  0095                     	;# 
   296  0096                     	;# 
   297  0097                     	;# 
   298  0098                     	;# 
   299  0099                     	;# 
   300  009A                     	;# 
   301  009B                     	;# 
   302  009B                     	;# 
   303  009C                     	;# 
   304  009D                     	;# 
   305  009E                     	;# 
   306  010C                     	;# 
   307  010E                     	;# 
   308  0111                     	;# 
   309  0112                     	;# 
   310  0113                     	;# 
   311  0114                     	;# 
   312  0115                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  0118                     	;# 
   316  0119                     	;# 
   317  011A                     	;# 
   318  011B                     	;# 
   319  011D                     	;# 
   320  011E                     	;# 
   321  018C                     	;# 
   322  018E                     	;# 
   323  0191                     	;# 
   324  0191                     	;# 
   325  0192                     	;# 
   326  0193                     	;# 
   327  0193                     	;# 
   328  0193                     	;# 
   329  0194                     	;# 
   330  0195                     	;# 
   331  0196                     	;# 
   332  0199                     	;# 
   333  019A                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019C                     	;# 
   337  019D                     	;# 
   338  019E                     	;# 
   339  019F                     	;# 
   340  020C                     	;# 
   341  020E                     	;# 
   342  0211                     	;# 
   343  0211                     	;# 
   344  0212                     	;# 
   345  0212                     	;# 
   346  0213                     	;# 
   347  0213                     	;# 
   348  0214                     	;# 
   349  0214                     	;# 
   350  0215                     	;# 
   351  0215                     	;# 
   352  0215                     	;# 
   353  0216                     	;# 
   354  0216                     	;# 
   355  0217                     	;# 
   356  0217                     	;# 
   357  0291                     	;# 
   358  0291                     	;# 
   359  0292                     	;# 
   360  0293                     	;# 
   361  0294                     	;# 
   362  0295                     	;# 
   363  0295                     	;# 
   364  0296                     	;# 
   365  0298                     	;# 
   366  0298                     	;# 
   367  0299                     	;# 
   368  029A                     	;# 
   369  029B                     	;# 
   370  029C                     	;# 
   371  029D                     	;# 
   372  029E                     	;# 
   373  0311                     	;# 
   374  0311                     	;# 
   375  0312                     	;# 
   376  0313                     	;# 
   377  0318                     	;# 
   378  0318                     	;# 
   379  0319                     	;# 
   380  031A                     	;# 
   381  038C                     	;# 
   382  038E                     	;# 
   383  0391                     	;# 
   384  0392                     	;# 
   385  0393                     	;# 
   386  039A                     	;# 
   387  039C                     	;# 
   388  039D                     	;# 
   389  039E                     	;# 
   390  039F                     	;# 
   391  0415                     	;# 
   392  0416                     	;# 
   393  0417                     	;# 
   394  041C                     	;# 
   395  041D                     	;# 
   396  041E                     	;# 
   397  0FE4                     	;# 
   398  0FE5                     	;# 
   399  0FE6                     	;# 
   400  0FE7                     	;# 
   401  0FE8                     	;# 
   402  0FE9                     	;# 
   403  0FEA                     	;# 
   404  0FEB                     	;# 
   405  0FED                     	;# 
   406  0FEE                     	;# 
   407  0FEF                     	;# 
   408  0000                     	;# 
   409  0001                     	;# 
   410  0002                     	;# 
   411  0003                     	;# 
   412  0004                     	;# 
   413  0005                     	;# 
   414  0006                     	;# 
   415  0007                     	;# 
   416  0008                     	;# 
   417  0009                     	;# 
   418  000A                     	;# 
   419  000B                     	;# 
   420  000C                     	;# 
   421  000E                     	;# 
   422  0011                     	;# 
   423  0012                     	;# 
   424  0013                     	;# 
   425  0015                     	;# 
   426  0016                     	;# 
   427  0016                     	;# 
   428  0017                     	;# 
   429  0018                     	;# 
   430  0019                     	;# 
   431  001A                     	;# 
   432  001B                     	;# 
   433  001C                     	;# 
   434  001E                     	;# 
   435  001F                     	;# 
   436  008C                     	;# 
   437  008E                     	;# 
   438  0091                     	;# 
   439  0092                     	;# 
   440  0093                     	;# 
   441  0095                     	;# 
   442  0096                     	;# 
   443  0097                     	;# 
   444  0098                     	;# 
   445  0099                     	;# 
   446  009A                     	;# 
   447  009B                     	;# 
   448  009B                     	;# 
   449  009C                     	;# 
   450  009D                     	;# 
   451  009E                     	;# 
   452  010C                     	;# 
   453  010E                     	;# 
   454  0111                     	;# 
   455  0112                     	;# 
   456  0113                     	;# 
   457  0114                     	;# 
   458  0115                     	;# 
   459  0116                     	;# 
   460  0117                     	;# 
   461  0118                     	;# 
   462  0119                     	;# 
   463  011A                     	;# 
   464  011B                     	;# 
   465  011D                     	;# 
   466  011E                     	;# 
   467  018C                     	;# 
   468  018E                     	;# 
   469  0191                     	;# 
   470  0191                     	;# 
   471  0192                     	;# 
   472  0193                     	;# 
   473  0193                     	;# 
   474  0193                     	;# 
   475  0194                     	;# 
   476  0195                     	;# 
   477  0196                     	;# 
   478  0199                     	;# 
   479  019A                     	;# 
   480  019B                     	;# 
   481  019B                     	;# 
   482  019C                     	;# 
   483  019D                     	;# 
   484  019E                     	;# 
   485  019F                     	;# 
   486  020C                     	;# 
   487  020E                     	;# 
   488  0211                     	;# 
   489  0211                     	;# 
   490  0212                     	;# 
   491  0212                     	;# 
   492  0213                     	;# 
   493  0213                     	;# 
   494  0214                     	;# 
   495  0214                     	;# 
   496  0215                     	;# 
   497  0215                     	;# 
   498  0215                     	;# 
   499  0216                     	;# 
   500  0216                     	;# 
   501  0217                     	;# 
   502  0217                     	;# 
   503  0291                     	;# 
   504  0291                     	;# 
   505  0292                     	;# 
   506  0293                     	;# 
   507  0294                     	;# 
   508  0295                     	;# 
   509  0295                     	;# 
   510  0296                     	;# 
   511  0298                     	;# 
   512  0298                     	;# 
   513  0299                     	;# 
   514  029A                     	;# 
   515  029B                     	;# 
   516  029C                     	;# 
   517  029D                     	;# 
   518  029E                     	;# 
   519  0311                     	;# 
   520  0311                     	;# 
   521  0312                     	;# 
   522  0313                     	;# 
   523  0318                     	;# 
   524  0318                     	;# 
   525  0319                     	;# 
   526  031A                     	;# 
   527  038C                     	;# 
   528  038E                     	;# 
   529  0391                     	;# 
   530  0392                     	;# 
   531  0393                     	;# 
   532  039A                     	;# 
   533  039C                     	;# 
   534  039D                     	;# 
   535  039E                     	;# 
   536  039F                     	;# 
   537  0415                     	;# 
   538  0416                     	;# 
   539  0417                     	;# 
   540  041C                     	;# 
   541  041D                     	;# 
   542  041E                     	;# 
   543  0FE4                     	;# 
   544  0FE5                     	;# 
   545  0FE6                     	;# 
   546  0FE7                     	;# 
   547  0FE8                     	;# 
   548  0FE9                     	;# 
   549  0FEA                     	;# 
   550  0FEB                     	;# 
   551  0FED                     	;# 
   552  0FEE                     	;# 
   553  0FEF                     	;# 
   554  0000                     	;# 
   555  0001                     	;# 
   556  0002                     	;# 
   557  0003                     	;# 
   558  0004                     	;# 
   559  0005                     	;# 
   560  0006                     	;# 
   561  0007                     	;# 
   562  0008                     	;# 
   563  0009                     	;# 
   564  000A                     	;# 
   565  000B                     	;# 
   566  000C                     	;# 
   567  000E                     	;# 
   568  0011                     	;# 
   569  0012                     	;# 
   570  0013                     	;# 
   571  0015                     	;# 
   572  0016                     	;# 
   573  0016                     	;# 
   574  0017                     	;# 
   575  0018                     	;# 
   576  0019                     	;# 
   577  001A                     	;# 
   578  001B                     	;# 
   579  001C                     	;# 
   580  001E                     	;# 
   581  001F                     	;# 
   582  008C                     	;# 
   583  008E                     	;# 
   584  0091                     	;# 
   585  0092                     	;# 
   586  0093                     	;# 
   587  0095                     	;# 
   588  0096                     	;# 
   589  0097                     	;# 
   590  0098                     	;# 
   591  0099                     	;# 
   592  009A                     	;# 
   593  009B                     	;# 
   594  009B                     	;# 
   595  009C                     	;# 
   596  009D                     	;# 
   597  009E                     	;# 
   598  010C                     	;# 
   599  010E                     	;# 
   600  0111                     	;# 
   601  0112                     	;# 
   602  0113                     	;# 
   603  0114                     	;# 
   604  0115                     	;# 
   605  0116                     	;# 
   606  0117                     	;# 
   607  0118                     	;# 
   608  0119                     	;# 
   609  011A                     	;# 
   610  011B                     	;# 
   611  011D                     	;# 
   612  011E                     	;# 
   613  018C                     	;# 
   614  018E                     	;# 
   615  0191                     	;# 
   616  0191                     	;# 
   617  0192                     	;# 
   618  0193                     	;# 
   619  0193                     	;# 
   620  0193                     	;# 
   621  0194                     	;# 
   622  0195                     	;# 
   623  0196                     	;# 
   624  0199                     	;# 
   625  019A                     	;# 
   626  019B                     	;# 
   627  019B                     	;# 
   628  019C                     	;# 
   629  019D                     	;# 
   630  019E                     	;# 
   631  019F                     	;# 
   632  020C                     	;# 
   633  020E                     	;# 
   634  0211                     	;# 
   635  0211                     	;# 
   636  0212                     	;# 
   637  0212                     	;# 
   638  0213                     	;# 
   639  0213                     	;# 
   640  0214                     	;# 
   641  0214                     	;# 
   642  0215                     	;# 
   643  0215                     	;# 
   644  0215                     	;# 
   645  0216                     	;# 
   646  0216                     	;# 
   647  0217                     	;# 
   648  0217                     	;# 
   649  0291                     	;# 
   650  0291                     	;# 
   651  0292                     	;# 
   652  0293                     	;# 
   653  0294                     	;# 
   654  0295                     	;# 
   655  0295                     	;# 
   656  0296                     	;# 
   657  0298                     	;# 
   658  0298                     	;# 
   659  0299                     	;# 
   660  029A                     	;# 
   661  029B                     	;# 
   662  029C                     	;# 
   663  029D                     	;# 
   664  029E                     	;# 
   665  0311                     	;# 
   666  0311                     	;# 
   667  0312                     	;# 
   668  0313                     	;# 
   669  0318                     	;# 
   670  0318                     	;# 
   671  0319                     	;# 
   672  031A                     	;# 
   673  038C                     	;# 
   674  038E                     	;# 
   675  0391                     	;# 
   676  0392                     	;# 
   677  0393                     	;# 
   678  039A                     	;# 
   679  039C                     	;# 
   680  039D                     	;# 
   681  039E                     	;# 
   682  039F                     	;# 
   683  0415                     	;# 
   684  0416                     	;# 
   685  0417                     	;# 
   686  041C                     	;# 
   687  041D                     	;# 
   688  041E                     	;# 
   689  0FE4                     	;# 
   690  0FE5                     	;# 
   691  0FE6                     	;# 
   692  0FE7                     	;# 
   693  0FE8                     	;# 
   694  0FE9                     	;# 
   695  0FEA                     	;# 
   696  0FEB                     	;# 
   697  0FED                     	;# 
   698  0FEE                     	;# 
   699  0FEF                     	;# 
   700  0000                     	;# 
   701  0001                     	;# 
   702  0002                     	;# 
   703  0003                     	;# 
   704  0004                     	;# 
   705  0005                     	;# 
   706  0006                     	;# 
   707  0007                     	;# 
   708  0008                     	;# 
   709  0009                     	;# 
   710  000A                     	;# 
   711  000B                     	;# 
   712  000C                     	;# 
   713  000E                     	;# 
   714  0011                     	;# 
   715  0012                     	;# 
   716  0013                     	;# 
   717  0015                     	;# 
   718  0016                     	;# 
   719  0016                     	;# 
   720  0017                     	;# 
   721  0018                     	;# 
   722  0019                     	;# 
   723  001A                     	;# 
   724  001B                     	;# 
   725  001C                     	;# 
   726  001E                     	;# 
   727  001F                     	;# 
   728  008C                     	;# 
   729  008E                     	;# 
   730  0091                     	;# 
   731  0092                     	;# 
   732  0093                     	;# 
   733  0095                     	;# 
   734  0096                     	;# 
   735  0097                     	;# 
   736  0098                     	;# 
   737  0099                     	;# 
   738  009A                     	;# 
   739  009B                     	;# 
   740  009B                     	;# 
   741  009C                     	;# 
   742  009D                     	;# 
   743  009E                     	;# 
   744  010C                     	;# 
   745  010E                     	;# 
   746  0111                     	;# 
   747  0112                     	;# 
   748  0113                     	;# 
   749  0114                     	;# 
   750  0115                     	;# 
   751  0116                     	;# 
   752  0117                     	;# 
   753  0118                     	;# 
   754  0119                     	;# 
   755  011A                     	;# 
   756  011B                     	;# 
   757  011D                     	;# 
   758  011E                     	;# 
   759  018C                     	;# 
   760  018E                     	;# 
   761  0191                     	;# 
   762  0191                     	;# 
   763  0192                     	;# 
   764  0193                     	;# 
   765  0193                     	;# 
   766  0193                     	;# 
   767  0194                     	;# 
   768  0195                     	;# 
   769  0196                     	;# 
   770  0199                     	;# 
   771  019A                     	;# 
   772  019B                     	;# 
   773  019B                     	;# 
   774  019C                     	;# 
   775  019D                     	;# 
   776  019E                     	;# 
   777  019F                     	;# 
   778  020C                     	;# 
   779  020E                     	;# 
   780  0211                     	;# 
   781  0211                     	;# 
   782  0212                     	;# 
   783  0212                     	;# 
   784  0213                     	;# 
   785  0213                     	;# 
   786  0214                     	;# 
   787  0214                     	;# 
   788  0215                     	;# 
   789  0215                     	;# 
   790  0215                     	;# 
   791  0216                     	;# 
   792  0216                     	;# 
   793  0217                     	;# 
   794  0217                     	;# 
   795  0291                     	;# 
   796  0291                     	;# 
   797  0292                     	;# 
   798  0293                     	;# 
   799  0294                     	;# 
   800  0295                     	;# 
   801  0295                     	;# 
   802  0296                     	;# 
   803  0298                     	;# 
   804  0298                     	;# 
   805  0299                     	;# 
   806  029A                     	;# 
   807  029B                     	;# 
   808  029C                     	;# 
   809  029D                     	;# 
   810  029E                     	;# 
   811  0311                     	;# 
   812  0311                     	;# 
   813  0312                     	;# 
   814  0313                     	;# 
   815  0318                     	;# 
   816  0318                     	;# 
   817  0319                     	;# 
   818  031A                     	;# 
   819  038C                     	;# 
   820  038E                     	;# 
   821  0391                     	;# 
   822  0392                     	;# 
   823  0393                     	;# 
   824  039A                     	;# 
   825  039C                     	;# 
   826  039D                     	;# 
   827  039E                     	;# 
   828  039F                     	;# 
   829  0415                     	;# 
   830  0416                     	;# 
   831  0417                     	;# 
   832  041C                     	;# 
   833  041D                     	;# 
   834  041E                     	;# 
   835  0FE4                     	;# 
   836  0FE5                     	;# 
   837  0FE6                     	;# 
   838  0FE7                     	;# 
   839  0FE8                     	;# 
   840  0FE9                     	;# 
   841  0FEA                     	;# 
   842  0FEB                     	;# 
   843  0FED                     	;# 
   844  0FEE                     	;# 
   845  0FEF                     	;# 
   846  0000                     	;# 
   847  0001                     	;# 
   848  0002                     	;# 
   849  0003                     	;# 
   850  0004                     	;# 
   851  0005                     	;# 
   852  0006                     	;# 
   853  0007                     	;# 
   854  0008                     	;# 
   855  0009                     	;# 
   856  000A                     	;# 
   857  000B                     	;# 
   858  000C                     	;# 
   859  000E                     	;# 
   860  0011                     	;# 
   861  0012                     	;# 
   862  0013                     	;# 
   863  0015                     	;# 
   864  0016                     	;# 
   865  0016                     	;# 
   866  0017                     	;# 
   867  0018                     	;# 
   868  0019                     	;# 
   869  001A                     	;# 
   870  001B                     	;# 
   871  001C                     	;# 
   872  001E                     	;# 
   873  001F                     	;# 
   874  008C                     	;# 
   875  008E                     	;# 
   876  0091                     	;# 
   877  0092                     	;# 
   878  0093                     	;# 
   879  0095                     	;# 
   880  0096                     	;# 
   881  0097                     	;# 
   882  0098                     	;# 
   883  0099                     	;# 
   884  009A                     	;# 
   885  009B                     	;# 
   886  009B                     	;# 
   887  009C                     	;# 
   888  009D                     	;# 
   889  009E                     	;# 
   890  010C                     	;# 
   891  010E                     	;# 
   892  0111                     	;# 
   893  0112                     	;# 
   894  0113                     	;# 
   895  0114                     	;# 
   896  0115                     	;# 
   897  0116                     	;# 
   898  0117                     	;# 
   899  0118                     	;# 
   900  0119                     	;# 
   901  011A                     	;# 
   902  011B                     	;# 
   903  011D                     	;# 
   904  011E                     	;# 
   905  018C                     	;# 
   906  018E                     	;# 
   907  0191                     	;# 
   908  0191                     	;# 
   909  0192                     	;# 
   910  0193                     	;# 
   911  0193                     	;# 
   912  0193                     	;# 
   913  0194                     	;# 
   914  0195                     	;# 
   915  0196                     	;# 
   916  0199                     	;# 
   917  019A                     	;# 
   918  019B                     	;# 
   919  019B                     	;# 
   920  019C                     	;# 
   921  019D                     	;# 
   922  019E                     	;# 
   923  019F                     	;# 
   924  020C                     	;# 
   925  020E                     	;# 
   926  0211                     	;# 
   927  0211                     	;# 
   928  0212                     	;# 
   929  0212                     	;# 
   930  0213                     	;# 
   931  0213                     	;# 
   932  0214                     	;# 
   933  0214                     	;# 
   934  0215                     	;# 
   935  0215                     	;# 
   936  0215                     	;# 
   937  0216                     	;# 
   938  0216                     	;# 
   939  0217                     	;# 
   940  0217                     	;# 
   941  0291                     	;# 
   942  0291                     	;# 
   943  0292                     	;# 
   944  0293                     	;# 
   945  0294                     	;# 
   946  0295                     	;# 
   947  0295                     	;# 
   948  0296                     	;# 
   949  0298                     	;# 
   950  0298                     	;# 
   951  0299                     	;# 
   952  029A                     	;# 
   953  029B                     	;# 
   954  029C                     	;# 
   955  029D                     	;# 
   956  029E                     	;# 
   957  0311                     	;# 
   958  0311                     	;# 
   959  0312                     	;# 
   960  0313                     	;# 
   961  0318                     	;# 
   962  0318                     	;# 
   963  0319                     	;# 
   964  031A                     	;# 
   965  038C                     	;# 
   966  038E                     	;# 
   967  0391                     	;# 
   968  0392                     	;# 
   969  0393                     	;# 
   970  039A                     	;# 
   971  039C                     	;# 
   972  039D                     	;# 
   973  039E                     	;# 
   974  039F                     	;# 
   975  0415                     	;# 
   976  0416                     	;# 
   977  0417                     	;# 
   978  041C                     	;# 
   979  041D                     	;# 
   980  041E                     	;# 
   981  0FE4                     	;# 
   982  0FE5                     	;# 
   983  0FE6                     	;# 
   984  0FE7                     	;# 
   985  0FE8                     	;# 
   986  0FE9                     	;# 
   987  0FEA                     	;# 
   988  0FEB                     	;# 
   989  0FED                     	;# 
   990  0FEE                     	;# 
   991  0FEF                     	;# 
   992  0000                     	;# 
   993  0001                     	;# 
   994  0002                     	;# 
   995  0003                     	;# 
   996  0004                     	;# 
   997  0005                     	;# 
   998  0006                     	;# 
   999  0007                     	;# 
  1000  0008                     	;# 
  1001  0009                     	;# 
  1002  000A                     	;# 
  1003  000B                     	;# 
  1004  000C                     	;# 
  1005  000E                     	;# 
  1006  0011                     	;# 
  1007  0012                     	;# 
  1008  0013                     	;# 
  1009  0015                     	;# 
  1010  0016                     	;# 
  1011  0016                     	;# 
  1012  0017                     	;# 
  1013  0018                     	;# 
  1014  0019                     	;# 
  1015  001A                     	;# 
  1016  001B                     	;# 
  1017  001C                     	;# 
  1018  001E                     	;# 
  1019  001F                     	;# 
  1020  008C                     	;# 
  1021  008E                     	;# 
  1022  0091                     	;# 
  1023  0092                     	;# 
  1024  0093                     	;# 
  1025  0095                     	;# 
  1026  0096                     	;# 
  1027  0097                     	;# 
  1028  0098                     	;# 
  1029  0099                     	;# 
  1030  009A                     	;# 
  1031  009B                     	;# 
  1032  009B                     	;# 
  1033  009C                     	;# 
  1034  009D                     	;# 
  1035  009E                     	;# 
  1036  010C                     	;# 
  1037  010E                     	;# 
  1038  0111                     	;# 
  1039  0112                     	;# 
  1040  0113                     	;# 
  1041  0114                     	;# 
  1042  0115                     	;# 
  1043  0116                     	;# 
  1044  0117                     	;# 
  1045  0118                     	;# 
  1046  0119                     	;# 
  1047  011A                     	;# 
  1048  011B                     	;# 
  1049  011D                     	;# 
  1050  011E                     	;# 
  1051  018C                     	;# 
  1052  018E                     	;# 
  1053  0191                     	;# 
  1054  0191                     	;# 
  1055  0192                     	;# 
  1056  0193                     	;# 
  1057  0193                     	;# 
  1058  0193                     	;# 
  1059  0194                     	;# 
  1060  0195                     	;# 
  1061  0196                     	;# 
  1062  0199                     	;# 
  1063  019A                     	;# 
  1064  019B                     	;# 
  1065  019B                     	;# 
  1066  019C                     	;# 
  1067  019D                     	;# 
  1068  019E                     	;# 
  1069  019F                     	;# 
  1070  020C                     	;# 
  1071  020E                     	;# 
  1072  0211                     	;# 
  1073  0211                     	;# 
  1074  0212                     	;# 
  1075  0212                     	;# 
  1076  0213                     	;# 
  1077  0213                     	;# 
  1078  0214                     	;# 
  1079  0214                     	;# 
  1080  0215                     	;# 
  1081  0215                     	;# 
  1082  0215                     	;# 
  1083  0216                     	;# 
  1084  0216                     	;# 
  1085  0217                     	;# 
  1086  0217                     	;# 
  1087  0291                     	;# 
  1088  0291                     	;# 
  1089  0292                     	;# 
  1090  0293                     	;# 
  1091  0294                     	;# 
  1092  0295                     	;# 
  1093  0295                     	;# 
  1094  0296                     	;# 
  1095  0298                     	;# 
  1096  0298                     	;# 
  1097  0299                     	;# 
  1098  029A                     	;# 
  1099  029B                     	;# 
  1100  029C                     	;# 
  1101  029D                     	;# 
  1102  029E                     	;# 
  1103  0311                     	;# 
  1104  0311                     	;# 
  1105  0312                     	;# 
  1106  0313                     	;# 
  1107  0318                     	;# 
  1108  0318                     	;# 
  1109  0319                     	;# 
  1110  031A                     	;# 
  1111  038C                     	;# 
  1112  038E                     	;# 
  1113  0391                     	;# 
  1114  0392                     	;# 
  1115  0393                     	;# 
  1116  039A                     	;# 
  1117  039C                     	;# 
  1118  039D                     	;# 
  1119  039E                     	;# 
  1120  039F                     	;# 
  1121  0415                     	;# 
  1122  0416                     	;# 
  1123  0417                     	;# 
  1124  041C                     	;# 
  1125  041D                     	;# 
  1126  041E                     	;# 
  1127  0FE4                     	;# 
  1128  0FE5                     	;# 
  1129  0FE6                     	;# 
  1130  0FE7                     	;# 
  1131  0FE8                     	;# 
  1132  0FE9                     	;# 
  1133  0FEA                     	;# 
  1134  0FEB                     	;# 
  1135  0FED                     	;# 
  1136  0FEE                     	;# 
  1137  0FEF                     	;# 
  1138  0000                     	;# 
  1139  0001                     	;# 
  1140  0002                     	;# 
  1141  0003                     	;# 
  1142  0004                     	;# 
  1143  0005                     	;# 
  1144  0006                     	;# 
  1145  0007                     	;# 
  1146  0008                     	;# 
  1147  0009                     	;# 
  1148  000A                     	;# 
  1149  000B                     	;# 
  1150  000C                     	;# 
  1151  000E                     	;# 
  1152  0011                     	;# 
  1153  0012                     	;# 
  1154  0013                     	;# 
  1155  0015                     	;# 
  1156  0016                     	;# 
  1157  0016                     	;# 
  1158  0017                     	;# 
  1159  0018                     	;# 
  1160  0019                     	;# 
  1161  001A                     	;# 
  1162  001B                     	;# 
  1163  001C                     	;# 
  1164  001E                     	;# 
  1165  001F                     	;# 
  1166  008C                     	;# 
  1167  008E                     	;# 
  1168  0091                     	;# 
  1169  0092                     	;# 
  1170  0093                     	;# 
  1171  0095                     	;# 
  1172  0096                     	;# 
  1173  0097                     	;# 
  1174  0098                     	;# 
  1175  0099                     	;# 
  1176  009A                     	;# 
  1177  009B                     	;# 
  1178  009B                     	;# 
  1179  009C                     	;# 
  1180  009D                     	;# 
  1181  009E                     	;# 
  1182  010C                     	;# 
  1183  010E                     	;# 
  1184  0111                     	;# 
  1185  0112                     	;# 
  1186  0113                     	;# 
  1187  0114                     	;# 
  1188  0115                     	;# 
  1189  0116                     	;# 
  1190  0117                     	;# 
  1191  0118                     	;# 
  1192  0119                     	;# 
  1193  011A                     	;# 
  1194  011B                     	;# 
  1195  011D                     	;# 
  1196  011E                     	;# 
  1197  018C                     	;# 
  1198  018E                     	;# 
  1199  0191                     	;# 
  1200  0191                     	;# 
  1201  0192                     	;# 
  1202  0193                     	;# 
  1203  0193                     	;# 
  1204  0193                     	;# 
  1205  0194                     	;# 
  1206  0195                     	;# 
  1207  0196                     	;# 
  1208  0199                     	;# 
  1209  019A                     	;# 
  1210  019B                     	;# 
  1211  019B                     	;# 
  1212  019C                     	;# 
  1213  019D                     	;# 
  1214  019E                     	;# 
  1215  019F                     	;# 
  1216  020C                     	;# 
  1217  020E                     	;# 
  1218  0211                     	;# 
  1219  0211                     	;# 
  1220  0212                     	;# 
  1221  0212                     	;# 
  1222  0213                     	;# 
  1223  0213                     	;# 
  1224  0214                     	;# 
  1225  0214                     	;# 
  1226  0215                     	;# 
  1227  0215                     	;# 
  1228  0215                     	;# 
  1229  0216                     	;# 
  1230  0216                     	;# 
  1231  0217                     	;# 
  1232  0217                     	;# 
  1233  0291                     	;# 
  1234  0291                     	;# 
  1235  0292                     	;# 
  1236  0293                     	;# 
  1237  0294                     	;# 
  1238  0295                     	;# 
  1239  0295                     	;# 
  1240  0296                     	;# 
  1241  0298                     	;# 
  1242  0298                     	;# 
  1243  0299                     	;# 
  1244  029A                     	;# 
  1245  029B                     	;# 
  1246  029C                     	;# 
  1247  029D                     	;# 
  1248  029E                     	;# 
  1249  0311                     	;# 
  1250  0311                     	;# 
  1251  0312                     	;# 
  1252  0313                     	;# 
  1253  0318                     	;# 
  1254  0318                     	;# 
  1255  0319                     	;# 
  1256  031A                     	;# 
  1257  038C                     	;# 
  1258  038E                     	;# 
  1259  0391                     	;# 
  1260  0392                     	;# 
  1261  0393                     	;# 
  1262  039A                     	;# 
  1263  039C                     	;# 
  1264  039D                     	;# 
  1265  039E                     	;# 
  1266  039F                     	;# 
  1267  0415                     	;# 
  1268  0416                     	;# 
  1269  0417                     	;# 
  1270  041C                     	;# 
  1271  041D                     	;# 
  1272  041E                     	;# 
  1273  0FE4                     	;# 
  1274  0FE5                     	;# 
  1275  0FE6                     	;# 
  1276  0FE7                     	;# 
  1277  0FE8                     	;# 
  1278  0FE9                     	;# 
  1279  0FEA                     	;# 
  1280  0FEB                     	;# 
  1281  0FED                     	;# 
  1282  0FEE                     	;# 
  1283  0FEF                     	;# 
  1284  0000                     	;# 
  1285  0001                     	;# 
  1286  0002                     	;# 
  1287  0003                     	;# 
  1288  0004                     	;# 
  1289  0005                     	;# 
  1290  0006                     	;# 
  1291  0007                     	;# 
  1292  0008                     	;# 
  1293  0009                     	;# 
  1294  000A                     	;# 
  1295  000B                     	;# 
  1296  000C                     	;# 
  1297  000E                     	;# 
  1298  0011                     	;# 
  1299  0012                     	;# 
  1300  0013                     	;# 
  1301  0015                     	;# 
  1302  0016                     	;# 
  1303  0016                     	;# 
  1304  0017                     	;# 
  1305  0018                     	;# 
  1306  0019                     	;# 
  1307  001A                     	;# 
  1308  001B                     	;# 
  1309  001C                     	;# 
  1310  001E                     	;# 
  1311  001F                     	;# 
  1312  008C                     	;# 
  1313  008E                     	;# 
  1314  0091                     	;# 
  1315  0092                     	;# 
  1316  0093                     	;# 
  1317  0095                     	;# 
  1318  0096                     	;# 
  1319  0097                     	;# 
  1320  0098                     	;# 
  1321  0099                     	;# 
  1322  009A                     	;# 
  1323  009B                     	;# 
  1324  009B                     	;# 
  1325  009C                     	;# 
  1326  009D                     	;# 
  1327  009E                     	;# 
  1328  010C                     	;# 
  1329  010E                     	;# 
  1330  0111                     	;# 
  1331  0112                     	;# 
  1332  0113                     	;# 
  1333  0114                     	;# 
  1334  0115                     	;# 
  1335  0116                     	;# 
  1336  0117                     	;# 
  1337  0118                     	;# 
  1338  0119                     	;# 
  1339  011A                     	;# 
  1340  011B                     	;# 
  1341  011D                     	;# 
  1342  011E                     	;# 
  1343  018C                     	;# 
  1344  018E                     	;# 
  1345  0191                     	;# 
  1346  0191                     	;# 
  1347  0192                     	;# 
  1348  0193                     	;# 
  1349  0193                     	;# 
  1350  0193                     	;# 
  1351  0194                     	;# 
  1352  0195                     	;# 
  1353  0196                     	;# 
  1354  0199                     	;# 
  1355  019A                     	;# 
  1356  019B                     	;# 
  1357  019B                     	;# 
  1358  019C                     	;# 
  1359  019D                     	;# 
  1360  019E                     	;# 
  1361  019F                     	;# 
  1362  020C                     	;# 
  1363  020E                     	;# 
  1364  0211                     	;# 
  1365  0211                     	;# 
  1366  0212                     	;# 
  1367  0212                     	;# 
  1368  0213                     	;# 
  1369  0213                     	;# 
  1370  0214                     	;# 
  1371  0214                     	;# 
  1372  0215                     	;# 
  1373  0215                     	;# 
  1374  0215                     	;# 
  1375  0216                     	;# 
  1376  0216                     	;# 
  1377  0217                     	;# 
  1378  0217                     	;# 
  1379  0291                     	;# 
  1380  0291                     	;# 
  1381  0292                     	;# 
  1382  0293                     	;# 
  1383  0294                     	;# 
  1384  0295                     	;# 
  1385  0295                     	;# 
  1386  0296                     	;# 
  1387  0298                     	;# 
  1388  0298                     	;# 
  1389  0299                     	;# 
  1390  029A                     	;# 
  1391  029B                     	;# 
  1392  029C                     	;# 
  1393  029D                     	;# 
  1394  029E                     	;# 
  1395  0311                     	;# 
  1396  0311                     	;# 
  1397  0312                     	;# 
  1398  0313                     	;# 
  1399  0318                     	;# 
  1400  0318                     	;# 
  1401  0319                     	;# 
  1402  031A                     	;# 
  1403  038C                     	;# 
  1404  038E                     	;# 
  1405  0391                     	;# 
  1406  0392                     	;# 
  1407  0393                     	;# 
  1408  039A                     	;# 
  1409  039C                     	;# 
  1410  039D                     	;# 
  1411  039E                     	;# 
  1412  039F                     	;# 
  1413  0415                     	;# 
  1414  0416                     	;# 
  1415  0417                     	;# 
  1416  041C                     	;# 
  1417  041D                     	;# 
  1418  041E                     	;# 
  1419  0FE4                     	;# 
  1420  0FE5                     	;# 
  1421  0FE6                     	;# 
  1422  0FE7                     	;# 
  1423  0FE8                     	;# 
  1424  0FE9                     	;# 
  1425  0FEA                     	;# 
  1426  0FEB                     	;# 
  1427  0FED                     	;# 
  1428  0FEE                     	;# 
  1429  0FEF                     	;# 
  1430  0000                     	;# 
  1431  0001                     	;# 
  1432  0002                     	;# 
  1433  0003                     	;# 
  1434  0004                     	;# 
  1435  0005                     	;# 
  1436  0006                     	;# 
  1437  0007                     	;# 
  1438  0008                     	;# 
  1439  0009                     	;# 
  1440  000A                     	;# 
  1441  000B                     	;# 
  1442  000C                     	;# 
  1443  000E                     	;# 
  1444  0011                     	;# 
  1445  0012                     	;# 
  1446  0013                     	;# 
  1447  0015                     	;# 
  1448  0016                     	;# 
  1449  0016                     	;# 
  1450  0017                     	;# 
  1451  0018                     	;# 
  1452  0019                     	;# 
  1453  001A                     	;# 
  1454  001B                     	;# 
  1455  001C                     	;# 
  1456  001E                     	;# 
  1457  001F                     	;# 
  1458  008C                     	;# 
  1459  008E                     	;# 
  1460  0091                     	;# 
  1461  0092                     	;# 
  1462  0093                     	;# 
  1463  0095                     	;# 
  1464  0096                     	;# 
  1465  0097                     	;# 
  1466  0098                     	;# 
  1467  0099                     	;# 
  1468  009A                     	;# 
  1469  009B                     	;# 
  1470  009B                     	;# 
  1471  009C                     	;# 
  1472  009D                     	;# 
  1473  009E                     	;# 
  1474  010C                     	;# 
  1475  010E                     	;# 
  1476  0111                     	;# 
  1477  0112                     	;# 
  1478  0113                     	;# 
  1479  0114                     	;# 
  1480  0115                     	;# 
  1481  0116                     	;# 
  1482  0117                     	;# 
  1483  0118                     	;# 
  1484  0119                     	;# 
  1485  011A                     	;# 
  1486  011B                     	;# 
  1487  011D                     	;# 
  1488  011E                     	;# 
  1489  018C                     	;# 
  1490  018E                     	;# 
  1491  0191                     	;# 
  1492  0191                     	;# 
  1493  0192                     	;# 
  1494  0193                     	;# 
  1495  0193                     	;# 
  1496  0193                     	;# 
  1497  0194                     	;# 
  1498  0195                     	;# 
  1499  0196                     	;# 
  1500  0199                     	;# 
  1501  019A                     	;# 
  1502  019B                     	;# 
  1503  019B                     	;# 
  1504  019C                     	;# 
  1505  019D                     	;# 
  1506  019E                     	;# 
  1507  019F                     	;# 
  1508  020C                     	;# 
  1509  020E                     	;# 
  1510  0211                     	;# 
  1511  0211                     	;# 
  1512  0212                     	;# 
  1513  0212                     	;# 
  1514  0213                     	;# 
  1515  0213                     	;# 
  1516  0214                     	;# 
  1517  0214                     	;# 
  1518  0215                     	;# 
  1519  0215                     	;# 
  1520  0215                     	;# 
  1521  0216                     	;# 
  1522  0216                     	;# 
  1523  0217                     	;# 
  1524  0217                     	;# 
  1525  0291                     	;# 
  1526  0291                     	;# 
  1527  0292                     	;# 
  1528  0293                     	;# 
  1529  0294                     	;# 
  1530  0295                     	;# 
  1531  0295                     	;# 
  1532  0296                     	;# 
  1533  0298                     	;# 
  1534  0298                     	;# 
  1535  0299                     	;# 
  1536  029A                     	;# 
  1537  029B                     	;# 
  1538  029C                     	;# 
  1539  029D                     	;# 
  1540  029E                     	;# 
  1541  0311                     	;# 
  1542  0311                     	;# 
  1543  0312                     	;# 
  1544  0313                     	;# 
  1545  0318                     	;# 
  1546  0318                     	;# 
  1547  0319                     	;# 
  1548  031A                     	;# 
  1549  038C                     	;# 
  1550  038E                     	;# 
  1551  0391                     	;# 
  1552  0392                     	;# 
  1553  0393                     	;# 
  1554  039A                     	;# 
  1555  039C                     	;# 
  1556  039D                     	;# 
  1557  039E                     	;# 
  1558  039F                     	;# 
  1559  0415                     	;# 
  1560  0416                     	;# 
  1561  0417                     	;# 
  1562  041C                     	;# 
  1563  041D                     	;# 
  1564  041E                     	;# 
  1565  0FE4                     	;# 
  1566  0FE5                     	;# 
  1567  0FE6                     	;# 
  1568  0FE7                     	;# 
  1569  0FE8                     	;# 
  1570  0FE9                     	;# 
  1571  0FEA                     	;# 
  1572  0FEB                     	;# 
  1573  0FED                     	;# 
  1574  0FEE                     	;# 
  1575  0FEF                     	;# 
  1576                           
  1577                           	psect	idataCOMMON
  1578  0003                     __pidataCOMMON:	
  1579                           
  1580                           ;initializer for _I2C_slaveWriteData
  1581  0003  3455               	retlw	85
  1582                           
  1583                           	psect	idataBANK0
  1584  0D1C                     __pidataBANK0:	
  1585                           
  1586                           ;initializer for _tmr_scaler
  1587  0D1C  3401               	retlw	1
  1588                           
  1589                           ;initializer for _continuity
  1590  0D1D  34FA               	retlw	250
  1591                           
  1592                           ;initializer for _threshold
  1593  0D1E  3432               	retlw	50
  1594                           
  1595                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1596  0D1F  3401               	retlw	1
  1597                           
  1598                           ;initializer for _type_no_data
  1599  0D20  3406               	retlw	6
  1600                           
  1601                           	psect	stringtext
  1602  03C5                     __pstringtext:	
  1603  03C5                     _dpowers:	
  1604  03C5  3401               	retlw	1
  1605  03C6  3400               	retlw	0
  1606  03C7  340A               	retlw	10
  1607  03C8  3400               	retlw	0
  1608  03C9  3464               	retlw	100
  1609  03CA  3400               	retlw	0
  1610  03CB  34E8               	retlw	232
  1611  03CC  3403               	retlw	3
  1612  03CD  3410               	retlw	16
  1613  03CE  3427               	retlw	39
  1614  03CF                     __end_of_dpowers:	
  1615  03CF                     _ANALOG_IN:	
  1616  03CF  3402               	retlw	2
  1617  03D0  3401               	retlw	1
  1618  03D1  3400               	retlw	0
  1619  03D2  3407               	retlw	7
  1620  03D3                     __end_of_ANALOG_IN:	
  1621  000B                     _INTCONbits	set	11
  1622  0015                     _TMR0	set	21
  1623  0011                     _PIR1bits	set	17
  1624  005A                     _TMR0IF	set	90
  1625  0095                     _OPTION_REG	set	149
  1626  009D                     _ADCON0bits	set	157
  1627  009C                     _ADRESH	set	156
  1628  009B                     _ADRESL	set	155
  1629  009E                     _ADCON1	set	158
  1630  009D                     _ADCON0	set	157
  1631  0097                     _WDTCON	set	151
  1632  0098                     _OSCTUNE	set	152
  1633  0099                     _OSCCON	set	153
  1634  0095                     _OPTION_REGbits	set	149
  1635  008E                     _TRISC	set	142
  1636  008C                     _TRISA	set	140
  1637  0091                     _PIE1bits	set	145
  1638  010E                     _LATCbits	set	270
  1639  011D                     _APFCON0	set	285
  1640  011E                     _APFCON1	set	286
  1641  010E                     _LATC	set	270
  1642  010C                     _LATA	set	268
  1643  0193                     _EEDATL	set	403
  1644  0195                     _EECON1bits	set	405
  1645  0191                     _EEADRL	set	401
  1646  0196                     _EECON2	set	406
  1647  0199                     _RCREG	set	409
  1648  019D                     _RCSTAbits	set	413
  1649  019A                     _TXREG	set	410
  1650  019C                     _SPBRGH	set	412
  1651  019B                     _SPBRGL	set	411
  1652  019E                     _TXSTA	set	414
  1653  019D                     _RCSTA	set	413
  1654  019F                     _BAUDCON	set	415
  1655  018C                     _ANSELA	set	396
  1656  018E                     _ANSELC	set	398
  1657  020E                     _WPUC	set	526
  1658  020C                     _WPUA	set	524
  1659  0215                     _SSP1CON1bits	set	533
  1660  0216                     _SSP1CON2bits	set	534
  1661  0214                     _SSP1STATbits	set	532
  1662  0211                     _SSP1BUF	set	529
  1663  0212                     _SSP1ADD	set	530
  1664  0213                     _SSP1MSK	set	531
  1665  0217                     _SSP1CON3	set	535
  1666  0216                     _SSP1CON2	set	534
  1667  0215                     _SSP1CON1	set	533
  1668  0214                     _SSP1STAT	set	532
  1669  03D3                     STR_1:	
  1670  03D3  344D               	retlw	77	;'M'
  1671  03D4  3455               	retlw	85	;'U'
  1672  03D5  344C               	retlw	76	;'L'
  1673  03D6  3454               	retlw	84	;'T'
  1674  03D7  3449               	retlw	73	;'I'
  1675  03D8  345F               	retlw	95	;'_'
  1676  03D9  3441               	retlw	65	;'A'
  1677  03DA  3431               	retlw	49	;'1'
  1678  03DB  3433               	retlw	51	;'3'
  1679  03DC  3432               	retlw	50	;'2'
  1680  03DD  3434               	retlw	52	;'4'
  1681  03DE  344C               	retlw	76	;'L'
  1682  03DF  3455               	retlw	85	;'U'
  1683  03E0  3441               	retlw	65	;'A'
  1684  03E1  345F               	retlw	95	;'_'
  1685  03E2  3454               	retlw	84	;'T'
  1686  03E3  3400               	retlw	0
  1687  03E4                     STR_36:	
  1688  03E4  3449               	retlw	73	;'I'
  1689  03E5  344C               	retlw	76	;'L'
  1690  03E6  344C               	retlw	76	;'L'
  1691  03E7  3445               	retlw	69	;'E'
  1692  03E8  3447               	retlw	71	;'G'
  1693  03E9  3441               	retlw	65	;'A'
  1694  03EA  344C               	retlw	76	;'L'
  1695  03EB  345F               	retlw	95	;'_'
  1696  03EC  3454               	retlw	84	;'T'
  1697  03ED  3459               	retlw	89	;'Y'
  1698  03EE  3450               	retlw	80	;'P'
  1699  03EF  3445               	retlw	69	;'E'
  1700  03F0  340A               	retlw	10
  1701  03F1  3400               	retlw	0
  1702  03F2                     STR_16:	
  1703  03F2  3424               	retlw	36	;'$'
  1704  03F3  343A               	retlw	58	;':'
  1705  03F4  3452               	retlw	82	;'R'
  1706  03F5  3444               	retlw	68	;'D'
  1707  03F6  3441               	retlw	65	;'A'
  1708  03F7  343A               	retlw	58	;':'
  1709  03F8  3425               	retlw	37	;'%'
  1710  03F9  3464               	retlw	100	;'d'
  1711  03FA  340A               	retlw	10
  1712  03FB  3400               	retlw	0
  1713  03FC                     STR_13:	
  1714  03FC  3424               	retlw	36	;'$'
  1715  03FD  343A               	retlw	58	;':'
  1716  03FE  3447               	retlw	71	;'G'
  1717  03FF  3445               	retlw	69	;'E'
  1718  0400  3454               	retlw	84	;'T'
  1719  0401  343A               	retlw	58	;':'
  1720  0402  3425               	retlw	37	;'%'
  1721  0403  3464               	retlw	100	;'d'
  1722  0404  340A               	retlw	10
  1723  0405  3400               	retlw	0
  1724  0406                     STR_34:	
  1725  0406  342D               	retlw	45	;'-'
  1726  0407  3425               	retlw	37	;'%'
  1727  0408  3464               	retlw	100	;'d'
  1728  0409  342E               	retlw	46	;'.'
  1729  040A  3425               	retlw	37	;'%'
  1730  040B  3430               	retlw	48	;'0'
  1731  040C  3432               	retlw	50	;'2'
  1732  040D  3464               	retlw	100	;'d'
  1733  040E  340A               	retlw	10
  1734  040F  3400               	retlw	0
  1735  0410                     STR_5:	
  1736  0410  3424               	retlw	36	;'$'
  1737  0411  343A               	retlw	58	;':'
  1738  0412  3457               	retlw	87	;'W'
  1739  0413  3448               	retlw	72	;'H'
  1740  0414  344F               	retlw	79	;'O'
  1741  0415  343A               	retlw	58	;':'
  1742  0416  3425               	retlw	37	;'%'
  1743  0417  3473               	retlw	115	;'s'
  1744  0418  340A               	retlw	10
  1745  0419  3400               	retlw	0
  1746  041A                     STR_9:	
  1747  041A  342A               	retlw	42	;'*'
  1748  041B  343A               	retlw	58	;':'
  1749  041C  3453               	retlw	83	;'S'
  1750  041D  3454               	retlw	84	;'T'
  1751  041E  3450               	retlw	80	;'P'
  1752  041F  343A               	retlw	58	;':'
  1753  0420  3425               	retlw	37	;'%'
  1754  0421  3473               	retlw	115	;'s'
  1755  0422  340A               	retlw	10
  1756  0423  3400               	retlw	0
  1757  0424                     STR_32:	
  1758  0424  342D               	retlw	45	;'-'
  1759  0425  3425               	retlw	37	;'%'
  1760  0426  3464               	retlw	100	;'d'
  1761  0427  342E               	retlw	46	;'.'
  1762  0428  3425               	retlw	37	;'%'
  1763  0429  3430               	retlw	48	;'0'
  1764  042A  3432               	retlw	50	;'2'
  1765  042B  3464               	retlw	100	;'d'
  1766  042C  342C               	retlw	44	;','
  1767  042D  3400               	retlw	0
  1768  042E                     STR_24:	
  1769  042E  3455               	retlw	85	;'U'
  1770  042F  3449               	retlw	73	;'I'
  1771  0430  344E               	retlw	78	;'N'
  1772  0431  3454               	retlw	84	;'T'
  1773  0432  3431               	retlw	49	;'1'
  1774  0433  3436               	retlw	54	;'6'
  1775  0434  345F               	retlw	95	;'_'
  1776  0435  3454               	retlw	84	;'T'
  1777  0436  343A               	retlw	58	;':'
  1778  0437  3400               	retlw	0
  1779  0438                     STR_35:	
  1780  0438  344E               	retlw	78	;'N'
  1781  0439  344F               	retlw	79	;'O'
  1782  043A  345F               	retlw	95	;'_'
  1783  043B  3444               	retlw	68	;'D'
  1784  043C  3441               	retlw	65	;'A'
  1785  043D  3454               	retlw	84	;'T'
  1786  043E  3441               	retlw	65	;'A'
  1787  043F  340A               	retlw	10
  1788  0440  3400               	retlw	0
  1789  0441                     STR_18:	
  1790  0441  3455               	retlw	85	;'U'
  1791  0442  3449               	retlw	73	;'I'
  1792  0443  344E               	retlw	78	;'N'
  1793  0444  3454               	retlw	84	;'T'
  1794  0445  3438               	retlw	56	;'8'
  1795  0446  345F               	retlw	95	;'_'
  1796  0447  3454               	retlw	84	;'T'
  1797  0448  343A               	retlw	58	;':'
  1798  0449  3400               	retlw	0
  1799  044A                     STR_30:	
  1800  044A  3446               	retlw	70	;'F'
  1801  044B  344C               	retlw	76	;'L'
  1802  044C  344F               	retlw	79	;'O'
  1803  044D  3441               	retlw	65	;'A'
  1804  044E  3454               	retlw	84	;'T'
  1805  044F  343A               	retlw	58	;':'
  1806  0450  3400               	retlw	0
  1807  0451                     STR_2:	
  1808  0451  3428               	retlw	40	;'('
  1809  0452  346E               	retlw	110	;'n'
  1810  0453  3475               	retlw	117	;'u'
  1811  0454  346C               	retlw	108	;'l'
  1812  0455  346C               	retlw	108	;'l'
  1813  0456  3429               	retlw	41	;')'
  1814  0457  3400               	retlw	0
  1815  0458                     STR_17:	
  1816  0458  3425               	retlw	37	;'%'
  1817  0459  3425               	retlw	37	;'%'
  1818  045A  3425               	retlw	37	;'%'
  1819  045B  3464               	retlw	100	;'d'
  1820  045C  343A               	retlw	58	;':'
  1821  045D  3400               	retlw	0
  1822  045E                     STR_3:	
  1823  045E  3423               	retlw	35	;'#'
  1824  045F  3425               	retlw	37	;'%'
  1825  0460  3473               	retlw	115	;'s'
  1826  0461  340A               	retlw	10
  1827  0462  3400               	retlw	0
  1828  0463                     STR_20:	
  1829  0463  3425               	retlw	37	;'%'
  1830  0464  3475               	retlw	117	;'u'
  1831  0465  340A               	retlw	10
  1832  0466  3400               	retlw	0
  1833  0467                     STR_22:	
  1834  0467  3425               	retlw	37	;'%'
  1835  0468  3464               	retlw	100	;'d'
  1836  0469  342C               	retlw	44	;','
  1837  046A  3400               	retlw	0
  1838  046B                     STR_19:	
  1839  046B  3425               	retlw	37	;'%'
  1840  046C  3475               	retlw	117	;'u'
  1841  046D  342C               	retlw	44	;','
  1842  046E  3400               	retlw	0
  1843  046F                     STR_15:	
  1844  046F  3452               	retlw	82	;'R'
  1845  0470  3444               	retlw	68	;'D'
  1846  0471  3441               	retlw	65	;'A'
  1847  0472  3400               	retlw	0
  1848  0473                     STR_14:	
  1849  0473  3457               	retlw	87	;'W'
  1850  0474  3444               	retlw	68	;'D'
  1851  0475  3441               	retlw	65	;'A'
  1852  0476  3400               	retlw	0
  1853  0477                     STR_7:	
  1854  0477  3453               	retlw	83	;'S'
  1855  0478  3454               	retlw	84	;'T'
  1856  0479  3441               	retlw	65	;'A'
  1857  047A  3400               	retlw	0
  1858  047B                     STR_10:	
  1859  047B  3441               	retlw	65	;'A'
  1860  047C  3443               	retlw	67	;'C'
  1861  047D  344B               	retlw	75	;'K'
  1862  047E  3400               	retlw	0
  1863  047F                     STR_4:	
  1864  047F  3457               	retlw	87	;'W'
  1865  0480  3448               	retlw	72	;'H'
  1866  0481  344F               	retlw	79	;'O'
  1867  0482  3400               	retlw	0
  1868  0483                     STR_8:	
  1869  0483  3453               	retlw	83	;'S'
  1870  0484  3454               	retlw	84	;'T'
  1871  0485  3450               	retlw	80	;'P'
  1872  0486  3400               	retlw	0
  1873  0487                     STR_12:	
  1874  0487  3447               	retlw	71	;'G'
  1875  0488  3445               	retlw	69	;'E'
  1876  0489  3454               	retlw	84	;'T'
  1877  048A  3400               	retlw	0
  1878  048B                     STR_11:	
  1879  048B  3453               	retlw	83	;'S'
  1880  048C  3445               	retlw	69	;'E'
  1881  048D  3454               	retlw	84	;'T'
  1882  048E  3400               	retlw	0
  1883  048F                     STR_6:	
  1884  048F  3453               	retlw	83	;'S'
  1885  0490  3441               	retlw	65	;'A'
  1886  0491  3456               	retlw	86	;'V'
  1887  0492  3400               	retlw	0
  1888  03F8                     
  1889                           ; #config settings
  1890  0000                     
  1891                           	psect	cinit
  1892  0032                     start_initialization:	
  1893  0032                     __initialization:	
  1894                           
  1895                           ; Initialize objects allocated to COMMON
  1896  0032  3180  2003  3180   	fcall	__pidataCOMMON	;fetch initializer
  1897  0035  00FD               	movwf	__pdataCOMMON& (0+127)
  1898                           
  1899                           ; Initialize objects allocated to BANK0
  1900  0036  301C               	movlw	low __pidataBANK0
  1901  0037  0084               	movwf	4
  1902  0038  308D               	movlw	(high __pidataBANK0)| (0+128)
  1903  0039  0085               	movwf	5
  1904  003A  0012               	moviw fsr0++
  1905  003B  00EB               	movwf	__pdataBANK0& (0+127)
  1906  003C  0012               	moviw fsr0++
  1907  003D  00EC               	movwf	(__pdataBANK0+1)& (0+127)
  1908  003E  0012               	moviw fsr0++
  1909  003F  00ED               	movwf	(__pdataBANK0+2)& (0+127)
  1910  0040  0012               	moviw fsr0++
  1911  0041  00EE               	movwf	(__pdataBANK0+3)& (0+127)
  1912  0042  0012               	moviw fsr0++
  1913  0043  00EF               	movwf	(__pdataBANK0+4)& (0+127)
  1914                           
  1915                           ; Clear objects allocated to COMMON
  1916  0044  01FC               	clrf	__pbssCOMMON& (0+127)
  1917                           
  1918                           ; Clear objects allocated to BANK0
  1919  0045  3052               	movlw	low __pbssBANK0
  1920  0046  0084               	movwf	4
  1921  0047  3000               	movlw	high __pbssBANK0
  1922  0048  0085               	movwf	5
  1923  0049  3019               	movlw	25
  1924  004A  318D  2527  3180   	fcall	clear_ram0
  1925                           
  1926                           ; Clear objects allocated to BANK1
  1927  004D  30A0               	movlw	low __pbssBANK1
  1928  004E  0084               	movwf	4
  1929  004F  3000               	movlw	high __pbssBANK1
  1930  0050  0085               	movwf	5
  1931  0051  304B               	movlw	75
  1932  0052  318D  2527  3180   	fcall	clear_ram0
  1933                           
  1934                           ; Clear objects allocated to BANK2
  1935  0055  3020               	movlw	low __pbssBANK2
  1936  0056  0084               	movwf	4
  1937  0057  3001               	movlw	high __pbssBANK2
  1938  0058  0085               	movwf	5
  1939  0059  3030               	movlw	48
  1940  005A  318D  2527  3180   	fcall	clear_ram0
  1941                           
  1942                           ; Clear objects allocated to BANK3
  1943  005D  30A0               	movlw	low __pbssBANK3
  1944  005E  0084               	movwf	4
  1945  005F  3001               	movlw	high __pbssBANK3
  1946  0060  0085               	movwf	5
  1947  0061  3030               	movlw	48
  1948  0062  318D  2527         	fcall	clear_ram0
  1949  0064                     end_of_initialization:	
  1950                           ;End of C runtime variable initialization code
  1951                           
  1952  0064                     __end_of__initialization:	
  1953  0064  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1954  0065  0020               	movlb	0
  1955  0066  3187  2F95         	ljmp	_main	;jump to C main() function
  1956                           
  1957                           	psect	bssCOMMON
  1958  007C                     __pbssCOMMON:	
  1959  007C                     _eusartTxHead:	
  1960  007C                     	ds	1
  1961                           
  1962                           	psect	dataCOMMON
  1963  007D                     __pdataCOMMON:	
  1964  007D                     _I2C_slaveWriteData:	
  1965  007D                     	ds	1
  1966                           
  1967                           	psect	bssBANK0
  1968  0052                     __pbssBANK0:	
  1969  0052                     _PROTOCOL_Set_Handler:	
  1970  0052                     	ds	2
  1971  0054                     _PROTOCOL_Stop_Handler:	
  1972  0054                     	ds	2
  1973  0056                     _i:	
  1974  0056                     	ds	1
  1975  0057                     _backplane_slave_enabled:	
  1976  0057                     	ds	1
  1977  0058                     _tmr_overflow:	
  1978  0058                     	ds	1
  1979  0059                     _tmr_cnt:	
  1980  0059                     	ds	1
  1981  005A                     _sec_cnt:	
  1982  005A                     	ds	1
  1983  005B                     _invoked:	
  1984  005B                     	ds	1
  1985  005C                     _running:	
  1986  005C                     	ds	1
  1987  005D                     _locked:	
  1988  005D                     	ds	1
  1989  005E                     _value:	
  1990  005E                     	ds	1
  1991  005F                     _cnt:	
  1992  005F                     	ds	1
  1993  0060                     _slave_address:	
  1994  0060                     	ds	1
  1995  0061                     _eusartRxCount:	
  1996  0061                     	ds	1
  1997  0062                     _eusartRxTail:	
  1998  0062                     	ds	1
  1999  0063                     _eusartRxHead:	
  2000  0063                     	ds	1
  2001  0064                     _eusartTxBufferRemaining:	
  2002  0064                     	ds	1
  2003  0065                     _eusartTxTail:	
  2004  0065                     	ds	1
  2005  0066                     _timer0ReloadVal:	
  2006  0066                     	ds	1
  2007  0067                     I2C_StatusCallback@ext_cnt:	
  2008  0067                     	ds	1
  2009  0068                     I2C_StatusCallback@ext_len:	
  2010  0068                     	ds	1
  2011  0069                     I2C_StatusCallback@next:	
  2012  0069                     	ds	1
  2013  006A                     I2C_StatusCallback@slaveWriteType:	
  2014  006A                     	ds	1
  2015                           
  2016                           	psect	dataBANK0
  2017  006B                     __pdataBANK0:	
  2018  006B                     _tmr_scaler:	
  2019  006B                     	ds	1
  2020  006C                     _continuity:	
  2021  006C                     	ds	1
  2022  006D                     _threshold:	
  2023  006D                     	ds	1
  2024  006E                     _BACKPLANE_SLAVE_ADDRESS:	
  2025  006E                     	ds	1
  2026  006F                     _type_no_data:	
  2027  006F                     	ds	1
  2028                           
  2029                           	psect	bssBANK1
  2030  00A0                     __pbssBANK1:	
  2031  00A0                     _eusartRxBuffer:	
  2032  00A0                     	ds	8
  2033  00A8                     _eusartTxBuffer:	
  2034  00A8                     	ds	8
  2035  00B0                     _count:	
  2036  00B0                     	ds	4
  2037  00B4                     _analog_in_flags:	
  2038  00B4                     	ds	4
  2039  00B8                     _float100:	
  2040  00B8                     	ds	2
  2041  00BA                     _device_id_:	
  2042  00BA                     	ds	2
  2043  00BC                     _PROTOCOL_Tick_Handler:	
  2044  00BC                     	ds	2
  2045  00BE                     _PROTOCOL_Inv_Handler:	
  2046  00BE                     	ds	2
  2047  00C0                     _PROTOCOL_Extension_Handler:	
  2048  00C0                     	ds	2
  2049  00C2                     _PROTOCOL_Loop_Func:	
  2050  00C2                     	ds	2
  2051  00C4                     _PROTOCOL_Start_Handler:	
  2052  00C4                     	ds	2
  2053  00C6                     _data:	
  2054  00C6                     	ds	1
  2055  00C7                     _j:	
  2056  00C7                     	ds	1
  2057  00C8                     _readbuf_status:	
  2058  00C8                     	ds	1
  2059  00C9                     _sendbuf:	
  2060  00C9                     	ds	16
  2061  00D9                     _readbuf:	
  2062  00D9                     	ds	5
  2063  00DE                     _position:	
  2064  00DE                     	ds	4
  2065  00E2                     PROTOCOL_Send_float@pbuf:	
  2066  00E2                     	ds	3
  2067  00E5                     PROTOCOL_Send_int16_t@pbuf:	
  2068  00E5                     	ds	2
  2069  00E7                     PROTOCOL_Send_uint16_t@pbuf:	
  2070  00E7                     	ds	2
  2071  00E9                     PROTOCOL_Send_int8_t@pbuf:	
  2072  00E9                     	ds	1
  2073  00EA                     PROTOCOL_Send_uint8_t@pbuf:	
  2074  00EA                     	ds	1
  2075                           
  2076                           	psect	bssBANK2
  2077  0120                     __pbssBANK2:	
  2078  0120                     _buf:	
  2079  0120                     	ds	48
  2080                           
  2081                           	psect	bssBANK3
  2082  01A0                     __pbssBANK3:	
  2083  01A0                     I2C_StatusCallback@ext_buf:	
  2084  01A0                     	ds	48
  2085                           
  2086                           	psect	clrtext
  2087  0D27                     clear_ram0:	
  2088                           ;	Called with FSR0 containing the base address, and
  2089                           ;	WREG with the size to clear
  2090                           
  2091  0D27  0064               	clrwdt	;clear the watchdog before getting into this loop
  2092  0D28                     clrloop0:	
  2093  0D28  0180               	clrf	0	;clear RAM location pointed to by FSR
  2094  0D29  3101               	addfsr 0,1
  2095  0D2A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2096  0D2B  2D28               	goto	clrloop0	;have we reached the end yet?
  2097  0D2C  3400               	retlw	0	;all done for this memory range, return
  2098                           
  2099                           	psect	cstackCOMMON
  2100  0070                     __pcstackCOMMON:	
  2101  0070                     ?_isdigit:	
  2102  0070                     ?_PROTOCOL_Read_Device_Address:	
  2103                           ; 1 bit 
  2104                           
  2105  0070                     ?_I2C_StatusCallback:	
  2106                           ; 1 bytes @ 0x0
  2107                           
  2108  0070                     ?_PROTOCOL_SET:	
  2109                           ; 1 bytes @ 0x0
  2110                           
  2111  0070                     ?_PROTOCOL_STA:	
  2112                           ; 1 bytes @ 0x0
  2113                           
  2114  0070                     ?_PROTOCOL_STP:	
  2115                           ; 1 bytes @ 0x0
  2116                           
  2117  0070                     ?_PROTOCOL_SAV:	
  2118                           ; 1 bytes @ 0x0
  2119                           
  2120  0070                     ?_PROTOCOL_INV:	
  2121                           ; 1 bytes @ 0x0
  2122                           
  2123  0070                     ??_PROTOCOL_INV:	
  2124                           ; 1 bytes @ 0x0
  2125                           
  2126  0070                     ?_PROTOCOL_RST:	
  2127                           ; 1 bytes @ 0x0
  2128                           
  2129  0070                     ??_PROTOCOL_RST:	
  2130                           ; 1 bytes @ 0x0
  2131                           
  2132  0070                     ?_PROTOCOL_Backplane_Slave_Enabled:	
  2133                           ; 1 bytes @ 0x0
  2134                           
  2135  0070                     ??_PROTOCOL_Backplane_Slave_Enabled:	
  2136                           ; 1 bytes @ 0x0
  2137                           
  2138  0070                     ?_PROTOCOL_Read_Lock:	
  2139                           ; 1 bytes @ 0x0
  2140                           
  2141  0070                     ??_PROTOCOL_Read_Lock:	
  2142                           ; 1 bytes @ 0x0
  2143                           
  2144  0070                     ?_PROTOCOL_EXT:	
  2145                           ; 1 bytes @ 0x0
  2146                           
  2147  0070                     ?_PROTOCOL_I2C_WHO:	
  2148                           ; 1 bytes @ 0x0
  2149                           
  2150  0070                     ??_PROTOCOL_I2C_WHO:	
  2151                           ; 1 bytes @ 0x0
  2152                           
  2153  0070                     ?_PROTOCOL_I2C_SEN:	
  2154                           ; 1 bytes @ 0x0
  2155                           
  2156  0070                     ??_PROTOCOL_I2C_SEN:	
  2157                           ; 1 bytes @ 0x0
  2158                           
  2159  0070                     ?_PROTOCOL_I2C_GET:	
  2160                           ; 1 bytes @ 0x0
  2161                           
  2162  0070                     ??_PROTOCOL_I2C_GET:	
  2163                           ; 1 bytes @ 0x0
  2164                           
  2165  0070                     ?_OSCILLATOR_Initialize:	
  2166                           ; 1 bytes @ 0x0
  2167                           
  2168  0070                     ?_WDT_Initialize:	
  2169                           ; 1 bytes @ 0x0
  2170                           
  2171  0070                     ?_ADC_Initialize:	
  2172                           ; 1 bytes @ 0x0
  2173                           
  2174  0070                     ?_TMR0_Initialize:	
  2175                           ; 1 bytes @ 0x0
  2176                           
  2177  0070                     ?_EUSART_Initialize:	
  2178                           ; 1 bytes @ 0x0
  2179                           
  2180  0070                     ?_EUSART_Transmit_ISR:	
  2181                           ; 1 bytes @ 0x0
  2182                           
  2183  0070                     ??_EUSART_Transmit_ISR:	
  2184                           ; 1 bytes @ 0x0
  2185                           
  2186  0070                     ?_EUSART_Receive_ISR:	
  2187                           ; 1 bytes @ 0x0
  2188                           
  2189  0070                     ??_EUSART_Receive_ISR:	
  2190                           ; 1 bytes @ 0x0
  2191                           
  2192  0070                     ?_PROTOCOL_Loop:	
  2193                           ; 1 bytes @ 0x0
  2194                           
  2195  0070                     ?_putch:	
  2196                           ; 1 bytes @ 0x0
  2197                           
  2198  0070                     ?_DATAEE_ReadByte:	
  2199                           ; 1 bytes @ 0x0
  2200                           
  2201  0070                     ?_I2C_Initialize:	
  2202                           ; 1 bytes @ 0x0
  2203                           
  2204  0070                     ?_I2C_ISR:	
  2205                           ; 1 bytes @ 0x0
  2206                           
  2207  0070                     ?_PIN_MANAGER_Initialize:	
  2208                           ; 1 bytes @ 0x0
  2209                           
  2210  0070                     ?_ADC_SelectChannel:	
  2211                           ; 1 bytes @ 0x0
  2212                           
  2213  0070                     ?_ADC_StartConversion:	
  2214                           ; 1 bytes @ 0x0
  2215                           
  2216  0070                     ?_ADC_IsConversionDone:	
  2217                           ; 1 bytes @ 0x0
  2218                           
  2219  0070                     ?_TMR0_HasOverflowOccured:	
  2220                           ; 1 bytes @ 0x0
  2221                           
  2222  0070                     ?_INTERRUPT_InterruptManager:	
  2223                           ; 1 bytes @ 0x0
  2224                           
  2225  0070                     ?_led_blink:	
  2226                           ; 1 bytes @ 0x0
  2227                           
  2228  0070                     ?_init:	
  2229                           ; 1 bytes @ 0x0
  2230                           
  2231  0070                     ?_loop_func:	
  2232                           ; 1 bytes @ 0x0
  2233                           
  2234  0070                     ?_main:	
  2235                           ; 1 bytes @ 0x0
  2236                           
  2237  0070                     ?_EUSART_Read:	
  2238                           ; 1 bytes @ 0x0
  2239                           
  2240  0070                     ?_EUSART_Write:	
  2241                           ; 1 bytes @ 0x0
  2242                           
  2243  0070                     ?_PROTOCOL_Write_Device_Address:	
  2244                           ; 1 bytes @ 0x0
  2245                           
  2246  0070                     ?i1_set_handler:	
  2247                           ; 1 bytes @ 0x0
  2248                           
  2249  0070                     ?i1_PROTOCOL_STA:	
  2250                           ; 1 bytes @ 0x0
  2251                           
  2252  0070                     ??i1_PROTOCOL_STA:	
  2253                           ; 1 bytes @ 0x0
  2254                           
  2255  0070                     ?i1_PROTOCOL_STP:	
  2256                           ; 1 bytes @ 0x0
  2257                           
  2258  0070                     ??i1_PROTOCOL_STP:	
  2259                           ; 1 bytes @ 0x0
  2260                           
  2261  0070                     ?i1_PROTOCOL_SAV:	
  2262                           ; 1 bytes @ 0x0
  2263                           
  2264  0070                     ?i1_PROTOCOL_SET:	
  2265                           ; 1 bytes @ 0x0
  2266                           
  2267  0070                     ?i1_PROTOCOL_EXT:	
  2268                           ; 1 bytes @ 0x0
  2269                           
  2270  0070                     ??i1_PROTOCOL_EXT:	
  2271                           ; 1 bytes @ 0x0
  2272                           
  2273  0070                     ?i1_DATAEE_WriteByte:	
  2274                           ; 1 bytes @ 0x0
  2275                           
  2276  0070                     i1set_handler@value:	
  2277                           ; 1 bytes @ 0x0
  2278                           
  2279  0070                     i1DATAEE_WriteByte@bData:	
  2280                           ; 1 bytes @ 0x0
  2281                           
  2282                           
  2283                           ; 1 bytes @ 0x0
  2284  0070                     	ds	1
  2285  0071                     ??i1_set_handler:	
  2286  0071                     ??i1_DATAEE_WriteByte:	
  2287                           ; 1 bytes @ 0x1
  2288                           
  2289  0071                     PROTOCOL_I2C_SEN@pdata:	
  2290                           ; 1 bytes @ 0x1
  2291                           
  2292  0071                     i1DATAEE_WriteByte@bAdd:	
  2293                           ; 1 bytes @ 0x1
  2294                           
  2295                           
  2296                           ; 1 bytes @ 0x1
  2297  0071                     	ds	1
  2298  0072                     i1set_handler@mask:	
  2299  0072                     i1DATAEE_WriteByte@GIEBitValue:	
  2300                           ; 1 bytes @ 0x2
  2301                           
  2302                           
  2303                           ; 1 bytes @ 0x2
  2304  0072                     	ds	1
  2305  0073                     ??i1_PROTOCOL_SAV:	
  2306  0073                     i1set_handler@i:	
  2307                           ; 1 bytes @ 0x3
  2308                           
  2309                           
  2310                           ; 1 bytes @ 0x3
  2311  0073                     	ds	1
  2312  0074                     ??i1_PROTOCOL_SET:	
  2313                           
  2314                           ; 1 bytes @ 0x4
  2315  0074                     	ds	1
  2316  0075                     i1PROTOCOL_SET@value_:	
  2317                           
  2318                           ; 1 bytes @ 0x5
  2319  0075                     	ds	1
  2320  0076                     ??_I2C_StatusCallback:	
  2321                           
  2322                           ; 1 bytes @ 0x6
  2323  0076                     	ds	1
  2324  0077                     I2C_StatusCallback@i2c_bus_state:	
  2325                           
  2326                           ; 1 bytes @ 0x7
  2327  0077                     	ds	1
  2328  0078                     I2C_StatusCallback@pdata:	
  2329                           
  2330                           ; 1 bytes @ 0x8
  2331  0078                     	ds	1
  2332  0079                     ??_I2C_ISR:	
  2333                           
  2334                           ; 1 bytes @ 0x9
  2335  0079                     	ds	1
  2336  007A                     I2C_ISR@i2c_data:	
  2337                           
  2338                           ; 1 bytes @ 0xA
  2339  007A                     	ds	1
  2340  007B                     ??_INTERRUPT_InterruptManager:	
  2341                           
  2342                           ; 1 bytes @ 0xB
  2343  007B                     	ds	1
  2344                           
  2345                           	psect	cstackBANK0
  2346  0020                     __pcstackBANK0:	
  2347  0020                     ??_PROTOCOL_Read_Device_Address:	
  2348  0020                     ??_PROTOCOL_STA:	
  2349                           ; 1 bytes @ 0x0
  2350                           
  2351  0020                     ??_PROTOCOL_STP:	
  2352                           ; 1 bytes @ 0x0
  2353                           
  2354  0020                     ??_PROTOCOL_EXT:	
  2355                           ; 1 bytes @ 0x0
  2356                           
  2357  0020                     ??_OSCILLATOR_Initialize:	
  2358                           ; 1 bytes @ 0x0
  2359                           
  2360  0020                     ??_WDT_Initialize:	
  2361                           ; 1 bytes @ 0x0
  2362                           
  2363  0020                     ??_ADC_Initialize:	
  2364                           ; 1 bytes @ 0x0
  2365                           
  2366  0020                     ??_TMR0_Initialize:	
  2367                           ; 1 bytes @ 0x0
  2368                           
  2369  0020                     ??_EUSART_Initialize:	
  2370                           ; 1 bytes @ 0x0
  2371                           
  2372  0020                     ?_PROTOCOL_Set_Func:	
  2373                           ; 1 bytes @ 0x0
  2374                           
  2375  0020                     ??_isdigit:	
  2376                           ; 1 bytes @ 0x0
  2377                           
  2378  0020                     ??_DATAEE_ReadByte:	
  2379                           ; 1 bytes @ 0x0
  2380                           
  2381  0020                     ?_DATAEE_WriteByte:	
  2382                           ; 1 bytes @ 0x0
  2383                           
  2384  0020                     ??_I2C_Initialize:	
  2385                           ; 1 bytes @ 0x0
  2386                           
  2387  0020                     ??_PIN_MANAGER_Initialize:	
  2388                           ; 1 bytes @ 0x0
  2389                           
  2390  0020                     ??_ADC_SelectChannel:	
  2391                           ; 1 bytes @ 0x0
  2392                           
  2393  0020                     ??_ADC_StartConversion:	
  2394                           ; 1 bytes @ 0x0
  2395                           
  2396  0020                     ??_ADC_IsConversionDone:	
  2397                           ; 1 bytes @ 0x0
  2398                           
  2399  0020                     ??_TMR0_HasOverflowOccured:	
  2400                           ; 1 bytes @ 0x0
  2401                           
  2402  0020                     ??_led_blink:	
  2403                           ; 1 bytes @ 0x0
  2404                           
  2405  0020                     ??_init:	
  2406                           ; 1 bytes @ 0x0
  2407                           
  2408  0020                     ?_set_handler:	
  2409                           ; 1 bytes @ 0x0
  2410                           
  2411  0020                     ??_EUSART_Read:	
  2412                           ; 1 bytes @ 0x0
  2413                           
  2414  0020                     ??_EUSART_Write:	
  2415                           ; 1 bytes @ 0x0
  2416                           
  2417  0020                     ?_PROTOCOL_I2C_Set_TLV:	
  2418                           ; 1 bytes @ 0x0
  2419                           
  2420  0020                     ?_abs:	
  2421                           ; 1 bytes @ 0x0
  2422                           
  2423  0020                     ?_strncmp:	
  2424                           ; 2 bytes @ 0x0
  2425                           
  2426  0020                     ?_ADC_GetConversionResult:	
  2427                           ; 2 bytes @ 0x0
  2428                           
  2429  0020                     ?___wmul:	
  2430                           ; 2 bytes @ 0x0
  2431                           
  2432  0020                     ?___lwdiv:	
  2433                           ; 2 bytes @ 0x0
  2434                           
  2435  0020                     set_handler@value:	
  2436                           ; 2 bytes @ 0x0
  2437                           
  2438  0020                     PROTOCOL_EXT@char_buf:	
  2439                           ; 1 bytes @ 0x0
  2440                           
  2441  0020                     PROTOCOL_I2C_Set_TLV@length:	
  2442                           ; 1 bytes @ 0x0
  2443                           
  2444  0020                     _isdigit$1172:	
  2445                           ; 1 bytes @ 0x0
  2446                           
  2447  0020                     DATAEE_WriteByte@bData:	
  2448                           ; 1 bytes @ 0x0
  2449                           
  2450  0020                     DATAEE_ReadByte@bAdd:	
  2451                           ; 1 bytes @ 0x0
  2452                           
  2453  0020                     PROTOCOL_Set_Func@loop_func:	
  2454                           ; 1 bytes @ 0x0
  2455                           
  2456  0020                     ___wmul@multiplier:	
  2457                           ; 2 bytes @ 0x0
  2458                           
  2459  0020                     abs@a:	
  2460                           ; 2 bytes @ 0x0
  2461                           
  2462  0020                     ___lwdiv@divisor:	
  2463                           ; 2 bytes @ 0x0
  2464                           
  2465  0020                     strncmp@s1:	
  2466                           ; 2 bytes @ 0x0
  2467                           
  2468                           
  2469                           ; 2 bytes @ 0x0
  2470  0020                     	ds	1
  2471  0021                     ??_DATAEE_WriteByte:	
  2472  0021                     ??_set_handler:	
  2473                           ; 1 bytes @ 0x1
  2474                           
  2475  0021                     ADC_SelectChannel@channel:	
  2476                           ; 1 bytes @ 0x1
  2477                           
  2478  0021                     init@i:	
  2479                           ; 1 bytes @ 0x1
  2480                           
  2481  0021                     EUSART_Read@readValue:	
  2482                           ; 1 bytes @ 0x1
  2483                           
  2484  0021                     EUSART_Write@txData:	
  2485                           ; 1 bytes @ 0x1
  2486                           
  2487  0021                     PROTOCOL_I2C_Set_TLV@pbuffer:	
  2488                           ; 1 bytes @ 0x1
  2489                           
  2490  0021                     isdigit@c:	
  2491                           ; 1 bytes @ 0x1
  2492                           
  2493  0021                     DATAEE_WriteByte@bAdd:	
  2494                           ; 1 bytes @ 0x1
  2495                           
  2496                           
  2497                           ; 1 bytes @ 0x1
  2498  0021                     	ds	1
  2499  0022                     ??_abs:	
  2500  0022                     ??_PROTOCOL_Set_Func:	
  2501                           ; 1 bytes @ 0x2
  2502                           
  2503  0022                     ??_putch:	
  2504                           ; 1 bytes @ 0x2
  2505                           
  2506  0022                     ??_ADC_GetConversionResult:	
  2507                           ; 1 bytes @ 0x2
  2508                           
  2509  0022                     ??_PROTOCOL_I2C_Set_TLV:	
  2510                           ; 1 bytes @ 0x2
  2511                           
  2512  0022                     set_handler@mask:	
  2513                           ; 1 bytes @ 0x2
  2514                           
  2515  0022                     putch@txData:	
  2516                           ; 1 bytes @ 0x2
  2517                           
  2518  0022                     strncmp@s2:	
  2519                           ; 1 bytes @ 0x2
  2520                           
  2521  0022                     DATAEE_WriteByte@GIEBitValue:	
  2522                           ; 1 bytes @ 0x2
  2523                           
  2524  0022                     ___wmul@multiplicand:	
  2525                           ; 1 bytes @ 0x2
  2526                           
  2527  0022                     ___lwdiv@dividend:	
  2528                           ; 2 bytes @ 0x2
  2529                           
  2530                           
  2531                           ; 2 bytes @ 0x2
  2532  0022                     	ds	1
  2533  0023                     ??_PROTOCOL_SAV:	
  2534  0023                     ??_PROTOCOL_Write_Device_Address:	
  2535                           ; 1 bytes @ 0x3
  2536                           
  2537  0023                     set_handler@i:	
  2538                           ; 1 bytes @ 0x3
  2539                           
  2540  0023                     PROTOCOL_I2C_Set_TLV@type:	
  2541                           ; 1 bytes @ 0x3
  2542                           
  2543  0023                     strncmp@len:	
  2544                           ; 1 bytes @ 0x3
  2545                           
  2546                           
  2547                           ; 2 bytes @ 0x3
  2548  0023                     	ds	1
  2549  0024                     ??_PROTOCOL_SET:	
  2550  0024                     ?_PROTOCOL_Initialize:	
  2551                           ; 1 bytes @ 0x4
  2552                           
  2553  0024                     ??___wmul:	
  2554                           ; 1 bytes @ 0x4
  2555                           
  2556  0024                     ??___lwdiv:	
  2557                           ; 1 bytes @ 0x4
  2558                           
  2559  0024                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  2560                           ; 1 bytes @ 0x4
  2561                           
  2562  0024                     PROTOCOL_I2C_Set_TLV@status:	
  2563                           ; 1 bytes @ 0x4
  2564                           
  2565  0024                     PROTOCOL_Initialize@device_id:	
  2566                           ; 1 bytes @ 0x4
  2567                           
  2568  0024                     ___wmul@product:	
  2569                           ; 2 bytes @ 0x4
  2570                           
  2571                           
  2572                           ; 2 bytes @ 0x4
  2573  0024                     	ds	1
  2574  0025                     ??_strncmp:	
  2575  0025                     PROTOCOL_SET@value_:	
  2576                           ; 1 bytes @ 0x5
  2577                           
  2578  0025                     ___lwdiv@quotient:	
  2579                           ; 1 bytes @ 0x5
  2580                           
  2581                           
  2582                           ; 2 bytes @ 0x5
  2583  0025                     	ds	1
  2584  0026                     ?_atoi:	
  2585  0026                     PROTOCOL_Initialize@start_handler:	
  2586                           ; 2 bytes @ 0x6
  2587                           
  2588                           
  2589                           ; 1 bytes @ 0x6
  2590  0026                     	ds	1
  2591  0027                     PROTOCOL_Initialize@stop_handler:	
  2592  0027                     ___lwdiv@counter:	
  2593                           ; 1 bytes @ 0x7
  2594                           
  2595                           
  2596                           ; 1 bytes @ 0x7
  2597  0027                     	ds	1
  2598  0028                     ??_atoi:	
  2599  0028                     ?___lwmod:	
  2600                           ; 1 bytes @ 0x8
  2601                           
  2602  0028                     PROTOCOL_Initialize@set_handler:	
  2603                           ; 2 bytes @ 0x8
  2604                           
  2605  0028                     ___lwmod@divisor:	
  2606                           ; 2 bytes @ 0x8
  2607                           
  2608                           
  2609                           ; 2 bytes @ 0x8
  2610  0028                     	ds	2
  2611  002A                     PROTOCOL_Initialize@inv_handler:	
  2612  002A                     atoi@sign:	
  2613                           ; 1 bytes @ 0xA
  2614                           
  2615  002A                     ___lwmod@dividend:	
  2616                           ; 1 bytes @ 0xA
  2617                           
  2618                           
  2619                           ; 2 bytes @ 0xA
  2620  002A                     	ds	1
  2621  002B                     PROTOCOL_Initialize@scaler:	
  2622  002B                     atoi@a:	
  2623                           ; 1 bytes @ 0xB
  2624                           
  2625                           
  2626                           ; 2 bytes @ 0xB
  2627  002B                     	ds	1
  2628  002C                     ??_PROTOCOL_Initialize:	
  2629  002C                     ??___lwmod:	
  2630                           ; 1 bytes @ 0xC
  2631                           
  2632                           
  2633                           ; 1 bytes @ 0xC
  2634  002C                     	ds	1
  2635  002D                     atoi@s:	
  2636  002D                     ___lwmod@counter:	
  2637                           ; 1 bytes @ 0xD
  2638                           
  2639                           
  2640                           ; 1 bytes @ 0xD
  2641  002D                     	ds	1
  2642  002E                     ?_printf:	
  2643  002E                     printf@f:	
  2644                           ; 2 bytes @ 0xE
  2645                           
  2646                           
  2647                           ; 2 bytes @ 0xE
  2648  002E                     	ds	4
  2649  0032                     ??_printf:	
  2650                           
  2651                           ; 1 bytes @ 0x12
  2652  0032                     	ds	4
  2653  0036                     printf@prec:	
  2654                           
  2655                           ; 1 bytes @ 0x16
  2656  0036                     	ds	1
  2657  0037                     printf@cp:	
  2658                           
  2659                           ; 2 bytes @ 0x17
  2660  0037                     	ds	2
  2661  0039                     printf@ap:	
  2662                           
  2663                           ; 1 bytes @ 0x19
  2664  0039                     	ds	1
  2665  003A                     printf@val:	
  2666                           
  2667                           ; 2 bytes @ 0x1A
  2668  003A                     	ds	2
  2669  003C                     printf@len:	
  2670                           
  2671                           ; 2 bytes @ 0x1C
  2672  003C                     	ds	2
  2673  003E                     printf@flag:	
  2674                           
  2675                           ; 1 bytes @ 0x1E
  2676  003E                     	ds	1
  2677  003F                     printf@width:	
  2678                           
  2679                           ; 2 bytes @ 0x1F
  2680  003F                     	ds	2
  2681  0041                     printf@c:	
  2682                           
  2683                           ; 1 bytes @ 0x21
  2684  0041                     	ds	1
  2685  0042                     ?_PROTOCOL_I2C_Send_uint8_t:	
  2686  0042                     PROTOCOL_I2C_Send_uint8_t@pbuffer:	
  2687                           ; 1 bytes @ 0x22
  2688                           
  2689                           
  2690                           ; 1 bytes @ 0x22
  2691  0042                     	ds	1
  2692  0043                     ??_PROTOCOL_I2C_Send_uint8_t:	
  2693                           
  2694                           ; 1 bytes @ 0x23
  2695  0043                     	ds	3
  2696  0046                     PROTOCOL_I2C_Send_uint8_t@length:	
  2697                           
  2698                           ; 1 bytes @ 0x26
  2699  0046                     	ds	1
  2700  0047                     ??_loop_func:	
  2701                           
  2702                           ; 1 bytes @ 0x27
  2703  0047                     	ds	1
  2704  0048                     loop_func@out:	
  2705                           
  2706                           ; 2 bytes @ 0x28
  2707  0048                     	ds	2
  2708  004A                     loop_func@transition_detected:	
  2709                           
  2710                           ; 1 bytes @ 0x2A
  2711  004A                     	ds	1
  2712  004B                     loop_func@v:	
  2713                           
  2714                           ; 2 bytes @ 0x2B
  2715  004B                     	ds	2
  2716  004D                     loop_func@i:	
  2717                           
  2718                           ; 1 bytes @ 0x2D
  2719  004D                     	ds	1
  2720  004E                     ??_PROTOCOL_Loop:	
  2721                           
  2722                           ; 1 bytes @ 0x2E
  2723  004E                     	ds	2
  2724  0050                     PROTOCOL_Loop@c:	
  2725                           
  2726                           ; 1 bytes @ 0x30
  2727  0050                     	ds	1
  2728  0051                     PROTOCOL_Loop@device_address:	
  2729                           
  2730                           ; 1 bytes @ 0x31
  2731  0051                     	ds	1
  2732  0052                     ??_main:	
  2733                           
  2734                           	psect	maintext
  2735  0795                     __pmaintext:	
  2736                           ; 1 bytes @ 0x32
  2737 ;;
  2738 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2739 ;;
  2740 ;; *************** function _main *****************
  2741 ;; Defined at:
  2742 ;;		line 139 in file "main.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;		None
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;		None
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  1    wreg      void 
  2749 ;; Registers used:
  2750 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2751 ;; Tracked objects:
  2752 ;;		On entry : B1F/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2760 ;;Total ram usage:        0 bytes
  2761 ;; Hardware stack levels required when called:   11
  2762 ;; This function calls:
  2763 ;;		_ADC_Initialize
  2764 ;;		_EUSART_Initialize
  2765 ;;		_I2C_Initialize
  2766 ;;		_OSCILLATOR_Initialize
  2767 ;;		_PIN_MANAGER_Initialize
  2768 ;;		_PROTOCOL_Initialize
  2769 ;;		_PROTOCOL_Loop
  2770 ;;		_PROTOCOL_Set_Func
  2771 ;;		_TMR0_Initialize
  2772 ;;		_WDT_Initialize
  2773 ;;		_init
  2774 ;; This function is called by:
  2775 ;;		Startup code after reset
  2776 ;; This function uses a non-reentrant model
  2777 ;;
  2778                           
  2779                           
  2780                           ;psect for function _main
  2781  0795                     _main:	
  2782                           
  2783                           ;main.c: 141: init();
  2784                           
  2785                           ;incstack = 0
  2786                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2787  0795  318E  2623  3187   	fcall	_init
  2788                           
  2789                           ;main.c: 144: PROTOCOL_Initialize("MULTI_A1324LUA_T", (0), (0), set_handler, (0), 1);
  2790  0798  30D3               	movlw	low (STR_1| (0+32768))
  2791  0799  0020               	movlb	0	; select bank0
  2792  079A  00A4               	movwf	PROTOCOL_Initialize@device_id
  2793  079B  3083               	movlw	high (STR_1| (0+32768))
  2794  079C  00A5               	movwf	PROTOCOL_Initialize@device_id+1
  2795  079D  01A6               	clrf	PROTOCOL_Initialize@start_handler
  2796  079E  01A7               	clrf	PROTOCOL_Initialize@stop_handler
  2797  079F  30A1               	movlw	low _set_handler
  2798  07A0  00A8               	movwf	PROTOCOL_Initialize@set_handler
  2799  07A1  300F               	movlw	high _set_handler
  2800  07A2  00A9               	movwf	PROTOCOL_Initialize@set_handler+1
  2801  07A3  01AA               	clrf	PROTOCOL_Initialize@inv_handler
  2802  07A4  01AB               	clrf	PROTOCOL_Initialize@scaler
  2803  07A5  0AAB               	incf	PROTOCOL_Initialize@scaler,f
  2804  07A6  3186  267C  3187   	fcall	_PROTOCOL_Initialize
  2805                           
  2806                           ;main.c: 145: PROTOCOL_Set_Func(loop_func);
  2807  07A9  3057               	movlw	low _loop_func
  2808  07AA  0020               	movlb	0	; select bank0
  2809  07AB  00A0               	movwf	PROTOCOL_Set_Func@loop_func
  2810  07AC  3005               	movlw	high _loop_func
  2811  07AD  00A1               	movwf	PROTOCOL_Set_Func@loop_func+1
  2812  07AE  318D  2550  3187   	fcall	_PROTOCOL_Set_Func
  2813                           
  2814                           ;main.c: 148: PIN_MANAGER_Initialize();
  2815  07B1  318D  25F1  3187   	fcall	_PIN_MANAGER_Initialize
  2816                           
  2817                           ;main.c: 149: OSCILLATOR_Initialize();
  2818  07B4  318D  2517  3187   	fcall	_OSCILLATOR_Initialize
  2819                           
  2820                           ;main.c: 150: WDT_Initialize();
  2821  07B7  318D  2513  3187   	fcall	_WDT_Initialize
  2822                           
  2823                           ;main.c: 151: ADC_Initialize();
  2824  07BA  318D  252D  3187   	fcall	_ADC_Initialize
  2825                           
  2826                           ;main.c: 152: TMR0_Initialize();
  2827  07BD  318D  257E  3187   	fcall	_TMR0_Initialize
  2828                           
  2829                           ;main.c: 155: (INTCONbits.GIE = 1);
  2830  07C0  178B               	bsf	11,7	;volatile
  2831                           
  2832                           ;main.c: 156: (INTCONbits.PEIE = 1);
  2833  07C1  170B               	bsf	11,6	;volatile
  2834                           
  2835                           ;main.c: 159: EUSART_Initialize();
  2836  07C2  318E  2609  3187   	fcall	_EUSART_Initialize
  2837                           
  2838                           ;main.c: 162: I2C_Initialize();
  2839  07C5  318E  26ED  3187   	fcall	_I2C_Initialize
  2840                           
  2841                           ;main.c: 165: PROTOCOL_Loop();
  2842  07C8  3182  223D         	fcall	_PROTOCOL_Loop
  2843  07CA  3180  2830         	ljmp	start
  2844  07CC                     __end_of_main:	
  2845                           
  2846                           	psect	text1
  2847  0E23                     __ptext1:	
  2848 ;; *************** function _init *****************
  2849 ;; Defined at:
  2850 ;;		line 57 in file "main.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;		None
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;  i               1    1[BANK0 ] unsigned char 
  2855 ;; Return value:  Size  Location     Type
  2856 ;;                  1    wreg      void 
  2857 ;; Registers used:
  2858 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2859 ;; Tracked objects:
  2860 ;;		On entry : 0/0
  2861 ;;		On exit  : 0/0
  2862 ;;		Unchanged: 0/0
  2863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2866 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2867 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2868 ;;Total ram usage:        2 bytes
  2869 ;; Hardware stack levels used:    1
  2870 ;; Hardware stack levels required when called:    5
  2871 ;; This function calls:
  2872 ;;		Nothing
  2873 ;; This function is called by:
  2874 ;;		_main
  2875 ;; This function uses a non-reentrant model
  2876 ;;
  2877                           
  2878                           
  2879                           ;psect for function _init
  2880  0E23                     _init:	
  2881                           
  2882                           ;main.c: 58: uint8_t i;
  2883                           ;main.c: 59: for(i=0; i<4; i++) {
  2884                           
  2885                           ;incstack = 0
  2886                           ; Regs used in _init: [wreg+fsr1l+fsr1h+status,2+status,0]
  2887  0E23  0020               	movlb	0	; select bank0
  2888  0E24  01A1               	clrf	init@i
  2889  0E25                     L1:	
  2890  0E25  3004               	movlw	4
  2891  0E26  0221               	subwf	init@i,w
  2892  0E27  1803               	btfsc	3,0
  2893  0E28  0008               	return
  2894                           
  2895                           ;main.c: 60: position[i] = 0;
  2896  0E29  0821               	movf	init@i,w
  2897  0E2A  3EDE               	addlw	(low (_position| 0))& (0+255)
  2898  0E2B  0086               	movwf	6
  2899  0E2C  0187               	clrf	7
  2900  0E2D  0181               	clrf	1
  2901                           
  2902                           ;main.c: 61: count[i] = 0;
  2903  0E2E  0821               	movf	init@i,w
  2904  0E2F  3EB0               	addlw	(low (_count| 0))& (0+255)
  2905  0E30  0086               	movwf	6
  2906  0E31  0187               	clrf	7
  2907  0E32  0181               	clrf	1
  2908                           
  2909                           ;main.c: 62: analog_in_flags[i] = 0;
  2910  0E33  0821               	movf	init@i,w
  2911  0E34  3EB4               	addlw	(low (_analog_in_flags| 0))& (0+255)
  2912  0E35  0086               	movwf	6
  2913  0E36  0187               	clrf	7
  2914  0E37  0181               	clrf	1
  2915  0E38  3001               	movlw	1
  2916  0E39  00A0               	movwf	??_init
  2917  0E3A  0820               	movf	??_init,w
  2918  0E3B  07A1               	addwf	init@i,f
  2919  0E3C  2E25               	goto	L1
  2920  0E3D                     __end_of_init:	
  2921                           
  2922                           	psect	text2
  2923  0D13                     __ptext2:	
  2924 ;; *************** function _WDT_Initialize *****************
  2925 ;; Defined at:
  2926 ;;		line 89 in file "mcc_generated_files/mcc.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;		None
  2929 ;; Auto vars:     Size  Location     Type
  2930 ;;		None
  2931 ;; Return value:  Size  Location     Type
  2932 ;;                  1    wreg      void 
  2933 ;; Registers used:
  2934 ;;		wreg
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2944 ;;Total ram usage:        0 bytes
  2945 ;; Hardware stack levels used:    1
  2946 ;; Hardware stack levels required when called:    5
  2947 ;; This function calls:
  2948 ;;		Nothing
  2949 ;; This function is called by:
  2950 ;;		_main
  2951 ;;		_SYSTEM_Initialize
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           
  2956                           ;psect for function _WDT_Initialize
  2957  0D13                     _WDT_Initialize:	
  2958                           
  2959                           ;mcc.c: 92: WDTCON = 0x16;
  2960                           
  2961                           ;incstack = 0
  2962                           ; Regs used in _WDT_Initialize: [wreg]
  2963  0D13  3016               	movlw	22
  2964  0D14  0021               	movlb	1	; select bank1
  2965  0D15  0097               	movwf	23	;volatile
  2966  0D16  0008               	return
  2967  0D17                     __end_of_WDT_Initialize:	
  2968                           
  2969                           	psect	text3
  2970  0D7E                     __ptext3:	
  2971 ;; *************** function _TMR0_Initialize *****************
  2972 ;; Defined at:
  2973 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;		None
  2976 ;; Auto vars:     Size  Location     Type
  2977 ;;		None
  2978 ;; Return value:  Size  Location     Type
  2979 ;;                  1    wreg      void 
  2980 ;; Registers used:
  2981 ;;		wreg, status,2
  2982 ;; Tracked objects:
  2983 ;;		On entry : 0/0
  2984 ;;		On exit  : 0/0
  2985 ;;		Unchanged: 0/0
  2986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2990 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2991 ;;Total ram usage:        1 bytes
  2992 ;; Hardware stack levels used:    1
  2993 ;; Hardware stack levels required when called:    5
  2994 ;; This function calls:
  2995 ;;		Nothing
  2996 ;; This function is called by:
  2997 ;;		_main
  2998 ;;		_SYSTEM_Initialize
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           
  3003                           ;psect for function _TMR0_Initialize
  3004  0D7E                     _TMR0_Initialize:	
  3005                           
  3006                           ;tmr0.c: 67: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD4 & 0x3F);
  3007                           
  3008                           ;incstack = 0
  3009                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  3010  0D7E  0021               	movlb	1	; select bank1
  3011  0D7F  0815               	movf	21,w	;volatile
  3012  0D80  39C0               	andlw	192
  3013  0D81  3814               	iorlw	20
  3014  0D82  0095               	movwf	21	;volatile
  3015                           
  3016                           ;tmr0.c: 70: TMR0 = 0x06;
  3017  0D83  3006               	movlw	6
  3018  0D84  0020               	movlb	0	; select bank0
  3019  0D85  0095               	movwf	21	;volatile
  3020                           
  3021                           ;tmr0.c: 73: timer0ReloadVal= 6;
  3022  0D86  3006               	movlw	6
  3023  0D87  00A0               	movwf	??_TMR0_Initialize
  3024  0D88  0820               	movf	??_TMR0_Initialize,w
  3025  0D89  00E6               	movwf	_timer0ReloadVal	;volatile
  3026                           
  3027                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  3028  0D8A  110B               	bcf	11,2	;volatile
  3029  0D8B  0008               	return
  3030  0D8C                     __end_of_TMR0_Initialize:	
  3031                           
  3032                           	psect	text4
  3033  0D50                     __ptext4:	
  3034 ;; *************** function _PROTOCOL_Set_Func *****************
  3035 ;; Defined at:
  3036 ;;		line 77 in file "protocol.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;  loop_func       2    0[BANK0 ] PTR void 
  3039 ;;		 -> loop_func(1), 
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;		None
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  1    wreg      void 
  3044 ;; Registers used:
  3045 ;;		wreg
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3051 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3054 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3055 ;;Total ram usage:        2 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:    5
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_main
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           
  3066                           ;psect for function _PROTOCOL_Set_Func
  3067  0D50                     _PROTOCOL_Set_Func:	
  3068                           
  3069                           ;protocol.c: 78: PROTOCOL_Loop_Func = loop_func;
  3070                           
  3071                           ;incstack = 0
  3072                           ; Regs used in _PROTOCOL_Set_Func: [wreg]
  3073  0D50  0020               	movlb	0	; select bank0
  3074  0D51  0821               	movf	PROTOCOL_Set_Func@loop_func+1,w
  3075  0D52  0021               	movlb	1	; select bank1
  3076  0D53  00C3               	movwf	(_PROTOCOL_Loop_Func+1)^(0+128)
  3077  0D54  0020               	movlb	0	; select bank0
  3078  0D55  0820               	movf	PROTOCOL_Set_Func@loop_func,w
  3079  0D56  0021               	movlb	1	; select bank1
  3080  0D57  00C2               	movwf	_PROTOCOL_Loop_Func^(0+128)
  3081  0D58  0008               	return
  3082  0D59                     __end_of_PROTOCOL_Set_Func:	
  3083                           
  3084                           	psect	text5
  3085  023D                     __ptext5:	
  3086 ;; *************** function _PROTOCOL_Loop *****************
  3087 ;; Defined at:
  3088 ;;		line 136 in file "protocol.c"
  3089 ;; Parameters:    Size  Location     Type
  3090 ;;		None
  3091 ;; Auto vars:     Size  Location     Type
  3092 ;;  device_addre    1   49[BANK0 ] unsigned char 
  3093 ;;  c               1   48[BANK0 ] unsigned char 
  3094 ;; Return value:  Size  Location     Type
  3095 ;;                  1    wreg      void 
  3096 ;; Registers used:
  3097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3098 ;; Tracked objects:
  3099 ;;		On entry : 0/0
  3100 ;;		On exit  : 0/0
  3101 ;;		Unchanged: 0/0
  3102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3104 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3105 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3106 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3107 ;;Total ram usage:        4 bytes
  3108 ;; Hardware stack levels used:    1
  3109 ;; Hardware stack levels required when called:   10
  3110 ;; This function calls:
  3111 ;;		Absolute function
  3112 ;;		_EUSART_Read
  3113 ;;		_PROTOCOL_EXT
  3114 ;;		_PROTOCOL_Read_Device_Address
  3115 ;;		_PROTOCOL_SAV
  3116 ;;		_PROTOCOL_SET
  3117 ;;		_PROTOCOL_STA
  3118 ;;		_PROTOCOL_STP
  3119 ;;		_PROTOCOL_Write_Device_Address
  3120 ;;		_TMR0_HasOverflowOccured
  3121 ;;		_atoi
  3122 ;;		_loop_func
  3123 ;;		_printf
  3124 ;;		_strncmp
  3125 ;; This function is called by:
  3126 ;;		_main
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           
  3131                           ;psect for function _PROTOCOL_Loop
  3132  023D                     _PROTOCOL_Loop:	
  3133  023D                     l618:	
  3134                           ;incstack = 0
  3135                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3136                           ;protocol.c: 137: uint8_t device_address;
  3137                           ;protocol.c: 138: uint8_t c;
  3138                           ;protocol.c: 139: while (1) {
  3139                           
  3140                           
  3141                           ;protocol.c: 140: tmr_overflow = TMR0_HasOverflowOccured();
  3142  023D  318D  250F  3182   	fcall	_TMR0_HasOverflowOccured
  3143  0240  0020               	movlb	0	; select bank0
  3144  0241  00CE               	movwf	??_PROTOCOL_Loop
  3145  0242  084E               	movf	??_PROTOCOL_Loop,w
  3146  0243  00D8               	movwf	_tmr_overflow
  3147                           
  3148                           ;protocol.c: 141: if (tmr_overflow) {
  3149  0244  0858               	movf	_tmr_overflow,w
  3150  0245  1903               	btfsc	3,2
  3151  0246  2A65               	goto	l4435
  3152                           
  3153                           ;protocol.c: 142: TMR0IF = 0;
  3154  0247  110B               	bcf	11,2	;volatile
  3155                           
  3156                           ;protocol.c: 144: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  3157  0248  0021               	movlb	1	; select bank1
  3158  0249  083E               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3159  024A  043F               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3160  024B  1903               	btfsc	3,2
  3161  024C  2A65               	goto	l4435
  3162  024D  3001               	movlw	1
  3163  024E  0020               	movlb	0	; select bank0
  3164  024F  00CE               	movwf	??_PROTOCOL_Loop
  3165  0250  084E               	movf	??_PROTOCOL_Loop,w
  3166  0251  07D9               	addwf	_tmr_cnt,f
  3167  0252  085E               	movf	_value,w
  3168  0253  0259               	subwf	_tmr_cnt,w
  3169  0254  1C03               	skipc
  3170  0255  2A65               	goto	l4435
  3171                           
  3172                           ;protocol.c: 145: tmr_cnt = 0;
  3173  0256  01D9               	clrf	_tmr_cnt
  3174                           
  3175                           ;protocol.c: 146: if (++sec_cnt >= tmr_scaler) {
  3176  0257  3001               	movlw	1
  3177  0258  00CE               	movwf	??_PROTOCOL_Loop
  3178  0259  084E               	movf	??_PROTOCOL_Loop,w
  3179  025A  07DA               	addwf	_sec_cnt,f
  3180  025B  086B               	movf	_tmr_scaler,w
  3181  025C  025A               	subwf	_sec_cnt,w
  3182  025D  1C03               	skipc
  3183  025E  2A65               	goto	l4435
  3184                           
  3185                           ;protocol.c: 147: if (running) invoked = 1;
  3186  025F  085C               	movf	_running,w
  3187  0260  1903               	btfsc	3,2
  3188  0261  2A64               	goto	l4433
  3189  0262  01DB               	clrf	_invoked
  3190  0263  0ADB               	incf	_invoked,f
  3191  0264                     l4433:	
  3192                           
  3193                           ;protocol.c: 148: sec_cnt = 0;
  3194  0264  01DA               	clrf	_sec_cnt
  3195  0265                     l4435:	
  3196                           
  3197                           ;protocol.c: 149: }
  3198                           ;protocol.c: 150: }
  3199                           ;protocol.c: 151: }
  3200                           ;protocol.c: 152: if (invoked && PROTOCOL_Inv_Handler) {
  3201  0265  0020               	movlb	0	; select bank0
  3202  0266  085B               	movf	_invoked,w
  3203  0267  1903               	btfsc	3,2
  3204  0268  2A70               	goto	l4441
  3205                           
  3206                           ;protocol.c: 153: PROTOCOL_Inv_Handler();
  3207  0269  0021               	movlb	1	; select bank1
  3208  026A  083E               	movf	_PROTOCOL_Inv_Handler^(0+128),w
  3209  026B  043F               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+128),w
  3210  026C  1903               	btfsc	3,2
  3211  026D  2A70               	goto	l4441
  3212                           
  3213                           ;protocol.c: 154: invoked = 0;
  3214  026E  0020               	movlb	0	; select bank0
  3215  026F  01DB               	clrf	_invoked
  3216  0270                     l4441:	
  3217                           
  3218                           ;protocol.c: 155: }
  3219                           ;protocol.c: 156: if (PROTOCOL_Loop_Func) PROTOCOL_Loop_Func();
  3220  0270  0021               	movlb	1	; select bank1
  3221  0271  0842               	movf	_PROTOCOL_Loop_Func^(0+128),w
  3222  0272  0443               	iorwf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  3223  0273  1903               	btfsc	3,2
  3224  0274  2A7A               	goto	l4445
  3225  0275  0843               	movf	(_PROTOCOL_Loop_Func+1)^(0+128),w
  3226  0276  008A               	movwf	10
  3227  0277  0842               	movf	_PROTOCOL_Loop_Func^(0+128),w
  3228  0278  000A               	callw
  3229  0279  3182               	pagesel	$
  3230  027A                     l4445:	
  3231                           
  3232                           ;protocol.c: 157: if ((eusartRxCount)) {
  3233  027A  0020               	movlb	0	; select bank0
  3234  027B  0861               	movf	_eusartRxCount,w	;volatile
  3235  027C  1903               	btfsc	3,2
  3236  027D  2A3D               	goto	l618
  3237                           
  3238                           ;protocol.c: 158: c = EUSART_Read();
  3239  027E  318E  26AE  3182   	fcall	_EUSART_Read
  3240  0281  0020               	movlb	0	; select bank0
  3241  0282  00CE               	movwf	??_PROTOCOL_Loop
  3242  0283  084E               	movf	??_PROTOCOL_Loop,w
  3243  0284  00D0               	movwf	PROTOCOL_Loop@c
  3244                           
  3245                           ;protocol.c: 159: buf[cnt++] = c;
  3246  0285  0850               	movf	PROTOCOL_Loop@c,w
  3247  0286  00CE               	movwf	??_PROTOCOL_Loop
  3248  0287  085F               	movf	_cnt,w
  3249  0288  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3250  0289  0086               	movwf	6
  3251  028A  3001               	movlw	1	; select bank2/3
  3252  028B  0087               	movwf	7
  3253  028C  084E               	movf	??_PROTOCOL_Loop,w
  3254  028D  0081               	movwf	1
  3255  028E  3001               	movlw	1
  3256  028F  00CE               	movwf	??_PROTOCOL_Loop
  3257  0290  084E               	movf	??_PROTOCOL_Loop,w
  3258  0291  07DF               	addwf	_cnt,f
  3259                           
  3260                           ;protocol.c: 160: if (c == '\n') {
  3261  0292  300A               	movlw	10
  3262  0293  0650               	xorwf	PROTOCOL_Loop@c,w
  3263  0294  1D03               	btfss	3,2
  3264  0295  2A3D               	goto	l618
  3265                           
  3266                           ;protocol.c: 161: buf[--cnt] = '\0';
  3267  0296  3001               	movlw	1
  3268  0297  02DF               	subwf	_cnt,f
  3269  0298  085F               	movf	_cnt,w
  3270  0299  3E20               	addlw	(low (_buf| (0+256)))& (0+255)
  3271  029A  0086               	movwf	6
  3272  029B  3001               	movlw	1	; select bank2/3
  3273  029C  0087               	movwf	7
  3274  029D  0181               	clrf	1
  3275                           
  3276                           ;protocol.c: 162: cnt = 0;
  3277  029E  01DF               	clrf	_cnt
  3278                           
  3279                           ;protocol.c: 163: printf("#%s\n", buf);
  3280  029F  305E               	movlw	low (STR_3| (0+32768))
  3281  02A0  00AE               	movwf	printf@f
  3282  02A1  3084               	movlw	high (STR_3| (0+32768))
  3283  02A2  00AF               	movwf	printf@f+1
  3284  02A3  3020               	movlw	low _buf
  3285  02A4  00B0               	movwf	low ((?_printf| 0+2))
  3286  02A5  3001               	movlw	high _buf
  3287  02A6  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3288  02A7  3180  2068  3182   	fcall	_printf
  3289                           
  3290                           ;protocol.c: 164: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  3291  02AA  0020               	movlb	0	; select bank0
  3292  02AB  036E               	decf	_BACKPLANE_SLAVE_ADDRESS,w
  3293  02AC  1903               	btfsc	3,2
  3294  02AD  2AB3               	goto	l4465
  3295                           
  3296                           ;protocol.c: 165: PROTOCOL_EXT(buf);
  3297  02AE  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3298  02AF  3180  2002  3182   	fcall	_PROTOCOL_EXT
  3299                           
  3300                           ;protocol.c: 166: } else if (!strncmp(("WHO"), (buf), 3)) {
  3301  02B2  2A3D               	goto	l618
  3302  02B3                     l4465:	
  3303  02B3  307F               	movlw	low (STR_4| (0+32768))
  3304  02B4  0020               	movlb	0	; select bank0
  3305  02B5  00A0               	movwf	strncmp@s1
  3306  02B6  3084               	movlw	high (STR_4| (0+32768))
  3307  02B7  00A1               	movwf	strncmp@s1+1
  3308  02B8  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3309  02B9  00CE               	movwf	??_PROTOCOL_Loop
  3310  02BA  084E               	movf	??_PROTOCOL_Loop,w
  3311  02BB  00A2               	movwf	strncmp@s2
  3312  02BC  3003               	movlw	3
  3313  02BD  00A3               	movwf	strncmp@len
  3314  02BE  3000               	movlw	0
  3315  02BF  00A4               	movwf	strncmp@len+1
  3316  02C0  3187  2717  3182   	fcall	_strncmp
  3317  02C3  0020               	movlb	0	; select bank0
  3318  02C4  0820               	movf	?_strncmp,w
  3319  02C5  0421               	iorwf	?_strncmp+1,w
  3320  02C6  1D03               	btfss	3,2
  3321  02C7  2AD8               	goto	l4469
  3322                           
  3323                           ;protocol.c: 167: printf("$:WHO:%s\n", device_id_);
  3324  02C8  3010               	movlw	low (STR_5| (0+32768))
  3325  02C9  00AE               	movwf	printf@f
  3326  02CA  3084               	movlw	high (STR_5| (0+32768))
  3327  02CB  00AF               	movwf	printf@f+1
  3328  02CC  0021               	movlb	1	; select bank1
  3329  02CD  083B               	movf	(_device_id_+1)^(0+128),w
  3330  02CE  0020               	movlb	0	; select bank0
  3331  02CF  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3332  02D0  0021               	movlb	1	; select bank1
  3333  02D1  083A               	movf	_device_id_^(0+128),w
  3334  02D2  0020               	movlb	0	; select bank0
  3335  02D3  00B0               	movwf	low ((?_printf| 0+2))
  3336  02D4  3180  2068  3182   	fcall	_printf
  3337                           
  3338                           ;protocol.c: 168: } else if (!strncmp(("SAV"), (buf), 3)) {
  3339  02D7  2A3D               	goto	l618
  3340  02D8                     l4469:	
  3341  02D8  308F               	movlw	low (STR_6| (0+32768))
  3342  02D9  0020               	movlb	0	; select bank0
  3343  02DA  00A0               	movwf	strncmp@s1
  3344  02DB  3084               	movlw	high (STR_6| (0+32768))
  3345  02DC  00A1               	movwf	strncmp@s1+1
  3346  02DD  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3347  02DE  00CE               	movwf	??_PROTOCOL_Loop
  3348  02DF  084E               	movf	??_PROTOCOL_Loop,w
  3349  02E0  00A2               	movwf	strncmp@s2
  3350  02E1  3003               	movlw	3
  3351  02E2  00A3               	movwf	strncmp@len
  3352  02E3  3000               	movlw	0
  3353  02E4  00A4               	movwf	strncmp@len+1
  3354  02E5  3187  2717  3182   	fcall	_strncmp
  3355  02E8  0020               	movlb	0	; select bank0
  3356  02E9  0820               	movf	?_strncmp,w
  3357  02EA  0421               	iorwf	?_strncmp+1,w
  3358  02EB  1D03               	btfss	3,2
  3359  02EC  2AF1               	goto	l4473
  3360                           
  3361                           ;protocol.c: 169: PROTOCOL_SAV();
  3362  02ED  318D  253E  3182   	fcall	_PROTOCOL_SAV
  3363                           
  3364                           ;protocol.c: 170: } else if (!strncmp(("STA"), (buf), 3)) {
  3365  02F0  2A3D               	goto	l618
  3366  02F1                     l4473:	
  3367  02F1  3077               	movlw	low (STR_7| (0+32768))
  3368  02F2  0020               	movlb	0	; select bank0
  3369  02F3  00A0               	movwf	strncmp@s1
  3370  02F4  3084               	movlw	high (STR_7| (0+32768))
  3371  02F5  00A1               	movwf	strncmp@s1+1
  3372  02F6  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3373  02F7  00CE               	movwf	??_PROTOCOL_Loop
  3374  02F8  084E               	movf	??_PROTOCOL_Loop,w
  3375  02F9  00A2               	movwf	strncmp@s2
  3376  02FA  3003               	movlw	3
  3377  02FB  00A3               	movwf	strncmp@len
  3378  02FC  3000               	movlw	0
  3379  02FD  00A4               	movwf	strncmp@len+1
  3380  02FE  3187  2717  3182   	fcall	_strncmp
  3381  0301  0020               	movlb	0	; select bank0
  3382  0302  0820               	movf	?_strncmp,w
  3383  0303  0421               	iorwf	?_strncmp+1,w
  3384  0304  1D03               	btfss	3,2
  3385  0305  2B0A               	goto	l4477
  3386                           
  3387                           ;protocol.c: 171: PROTOCOL_STA();
  3388  0306  318D  250B  3182   	fcall	_PROTOCOL_STA
  3389                           
  3390                           ;protocol.c: 172: } else if (!strncmp(("STP"), (buf), 3)) {
  3391  0309  2A3D               	goto	l618
  3392  030A                     l4477:	
  3393  030A  3083               	movlw	low (STR_8| (0+32768))
  3394  030B  0020               	movlb	0	; select bank0
  3395  030C  00A0               	movwf	strncmp@s1
  3396  030D  3084               	movlw	high (STR_8| (0+32768))
  3397  030E  00A1               	movwf	strncmp@s1+1
  3398  030F  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3399  0310  00CE               	movwf	??_PROTOCOL_Loop
  3400  0311  084E               	movf	??_PROTOCOL_Loop,w
  3401  0312  00A2               	movwf	strncmp@s2
  3402  0313  3003               	movlw	3
  3403  0314  00A3               	movwf	strncmp@len
  3404  0315  3000               	movlw	0
  3405  0316  00A4               	movwf	strncmp@len+1
  3406  0317  3187  2717  3182   	fcall	_strncmp
  3407  031A  0020               	movlb	0	; select bank0
  3408  031B  0820               	movf	?_strncmp,w
  3409  031C  0421               	iorwf	?_strncmp+1,w
  3410  031D  1D03               	btfss	3,2
  3411  031E  2B2F               	goto	l4483
  3412                           
  3413                           ;protocol.c: 173: PROTOCOL_STP();
  3414  031F  318C  24F9  3182   	fcall	_PROTOCOL_STP
  3415                           
  3416                           ;protocol.c: 174: printf("*:STP:%s\n", "ACK");
  3417  0322  301A               	movlw	low (STR_9| (0+32768))
  3418  0323  0020               	movlb	0	; select bank0
  3419  0324  00AE               	movwf	printf@f
  3420  0325  3084               	movlw	high (STR_9| (0+32768))
  3421  0326  00AF               	movwf	printf@f+1
  3422  0327  307B               	movlw	low (STR_10| (0+32768))
  3423  0328  00B0               	movwf	low ((?_printf| 0+2))
  3424  0329  3084               	movlw	high (STR_10| (0+32768))
  3425  032A  00B1               	movwf	(low ((?_printf| 0+2))+1)
  3426  032B  3180  2068  3182   	fcall	_printf
  3427                           
  3428                           ;protocol.c: 175: } else if (!strncmp(("SET"), (buf), 3)) {
  3429  032E  2A3D               	goto	l618
  3430  032F                     l4483:	
  3431  032F  308B               	movlw	low (STR_11| (0+32768))
  3432  0330  0020               	movlb	0	; select bank0
  3433  0331  00A0               	movwf	strncmp@s1
  3434  0332  3084               	movlw	high (STR_11| (0+32768))
  3435  0333  00A1               	movwf	strncmp@s1+1
  3436  0334  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3437  0335  00CE               	movwf	??_PROTOCOL_Loop
  3438  0336  084E               	movf	??_PROTOCOL_Loop,w
  3439  0337  00A2               	movwf	strncmp@s2
  3440  0338  3003               	movlw	3
  3441  0339  00A3               	movwf	strncmp@len
  3442  033A  3000               	movlw	0
  3443  033B  00A4               	movwf	strncmp@len+1
  3444  033C  3187  2717  3182   	fcall	_strncmp
  3445  033F  0020               	movlb	0	; select bank0
  3446  0340  0820               	movf	?_strncmp,w
  3447  0341  0421               	iorwf	?_strncmp+1,w
  3448  0342  1D03               	btfss	3,2
  3449  0343  2B4E               	goto	l4487
  3450                           
  3451                           ;protocol.c: 176: PROTOCOL_SET(atoi(&buf[4]));
  3452  0344  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3453  0345  3186  260B  3182   	fcall	_atoi
  3454  0348  0020               	movlb	0	; select bank0
  3455  0349  0826               	movf	?_atoi,w
  3456  034A  318D  25DD  3182   	fcall	_PROTOCOL_SET
  3457                           
  3458                           ;protocol.c: 177: } else if (!strncmp(("GET"), (buf), 3)) {
  3459  034D  2A3D               	goto	l618
  3460  034E                     l4487:	
  3461  034E  3087               	movlw	low (STR_12| (0+32768))
  3462  034F  0020               	movlb	0	; select bank0
  3463  0350  00A0               	movwf	strncmp@s1
  3464  0351  3084               	movlw	high (STR_12| (0+32768))
  3465  0352  00A1               	movwf	strncmp@s1+1
  3466  0353  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3467  0354  00CE               	movwf	??_PROTOCOL_Loop
  3468  0355  084E               	movf	??_PROTOCOL_Loop,w
  3469  0356  00A2               	movwf	strncmp@s2
  3470  0357  3003               	movlw	3
  3471  0358  00A3               	movwf	strncmp@len
  3472  0359  3000               	movlw	0
  3473  035A  00A4               	movwf	strncmp@len+1
  3474  035B  3187  2717  3182   	fcall	_strncmp
  3475  035E  0020               	movlb	0	; select bank0
  3476  035F  0820               	movf	?_strncmp,w
  3477  0360  0421               	iorwf	?_strncmp+1,w
  3478  0361  1D03               	btfss	3,2
  3479  0362  2B72               	goto	l4491
  3480                           
  3481                           ;protocol.c: 178: printf("$:GET:%d\n", value);
  3482  0363  30FC               	movlw	low (STR_13| (0+32768))
  3483  0364  00AE               	movwf	printf@f
  3484  0365  3083               	movlw	high (STR_13| (0+32768))
  3485  0366  00AF               	movwf	printf@f+1
  3486  0367  085E               	movf	_value,w
  3487  0368  00CE               	movwf	??_PROTOCOL_Loop
  3488  0369  01CF               	clrf	??_PROTOCOL_Loop+1
  3489  036A  084E               	movf	??_PROTOCOL_Loop,w
  3490  036B  00B0               	movwf	?_printf+2
  3491  036C  084F               	movf	??_PROTOCOL_Loop+1,w
  3492  036D  00B1               	movwf	?_printf+3
  3493  036E  3180  2068  3182   	fcall	_printf
  3494                           
  3495                           ;protocol.c: 179: } else if (!strncmp(("WDA"), (buf), 3)) {
  3496  0371  2A3D               	goto	l618
  3497  0372                     l4491:	
  3498  0372  3073               	movlw	low (STR_14| (0+32768))
  3499  0373  0020               	movlb	0	; select bank0
  3500  0374  00A0               	movwf	strncmp@s1
  3501  0375  3084               	movlw	high (STR_14| (0+32768))
  3502  0376  00A1               	movwf	strncmp@s1+1
  3503  0377  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3504  0378  00CE               	movwf	??_PROTOCOL_Loop
  3505  0379  084E               	movf	??_PROTOCOL_Loop,w
  3506  037A  00A2               	movwf	strncmp@s2
  3507  037B  3003               	movlw	3
  3508  037C  00A3               	movwf	strncmp@len
  3509  037D  3000               	movlw	0
  3510  037E  00A4               	movwf	strncmp@len+1
  3511  037F  3187  2717  3182   	fcall	_strncmp
  3512  0382  0020               	movlb	0	; select bank0
  3513  0383  0820               	movf	?_strncmp,w
  3514  0384  0421               	iorwf	?_strncmp+1,w
  3515  0385  1D03               	btfss	3,2
  3516  0386  2B95               	goto	l4497
  3517                           
  3518                           ;protocol.c: 180: device_address = atoi(&buf[4]);
  3519  0387  3024               	movlw	(low ((_buf| (0+256)+4)))& (0+255)
  3520  0388  3186  260B  3182   	fcall	_atoi
  3521  038B  0020               	movlb	0	; select bank0
  3522  038C  0826               	movf	?_atoi,w
  3523  038D  00CE               	movwf	??_PROTOCOL_Loop
  3524  038E  084E               	movf	??_PROTOCOL_Loop,w
  3525  038F  00D1               	movwf	PROTOCOL_Loop@device_address
  3526                           
  3527                           ;protocol.c: 181: PROTOCOL_Write_Device_Address(device_address);
  3528  0390  0851               	movf	PROTOCOL_Loop@device_address,w
  3529  0391  318D  258C  3182   	fcall	_PROTOCOL_Write_Device_Address
  3530                           
  3531                           ;protocol.c: 182: } else if (!strncmp(("RDA"), (buf), 3)) {
  3532  0394  2A3D               	goto	l618
  3533  0395                     l4497:	
  3534  0395  306F               	movlw	low (STR_15| (0+32768))
  3535  0396  0020               	movlb	0	; select bank0
  3536  0397  00A0               	movwf	strncmp@s1
  3537  0398  3084               	movlw	high (STR_15| (0+32768))
  3538  0399  00A1               	movwf	strncmp@s1+1
  3539  039A  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3540  039B  00CE               	movwf	??_PROTOCOL_Loop
  3541  039C  084E               	movf	??_PROTOCOL_Loop,w
  3542  039D  00A2               	movwf	strncmp@s2
  3543  039E  3003               	movlw	3
  3544  039F  00A3               	movwf	strncmp@len
  3545  03A0  3000               	movlw	0
  3546  03A1  00A4               	movwf	strncmp@len+1
  3547  03A2  3187  2717  3182   	fcall	_strncmp
  3548  03A5  0020               	movlb	0	; select bank0
  3549  03A6  0820               	movf	?_strncmp,w
  3550  03A7  0421               	iorwf	?_strncmp+1,w
  3551  03A8  1D03               	btfss	3,2
  3552  03A9  2BC0               	goto	l4503
  3553                           
  3554                           ;protocol.c: 183: device_address = PROTOCOL_Read_Device_Address();
  3555  03AA  318C  24F6  3182   	fcall	_PROTOCOL_Read_Device_Address
  3556  03AD  0020               	movlb	0	; select bank0
  3557  03AE  00CE               	movwf	??_PROTOCOL_Loop
  3558  03AF  084E               	movf	??_PROTOCOL_Loop,w
  3559  03B0  00D1               	movwf	PROTOCOL_Loop@device_address
  3560                           
  3561                           ;protocol.c: 184: printf("$:RDA:%d\n", device_address);
  3562  03B1  30F2               	movlw	low (STR_16| (0+32768))
  3563  03B2  00AE               	movwf	printf@f
  3564  03B3  3083               	movlw	high (STR_16| (0+32768))
  3565  03B4  00AF               	movwf	printf@f+1
  3566  03B5  0851               	movf	PROTOCOL_Loop@device_address,w
  3567  03B6  00CE               	movwf	??_PROTOCOL_Loop
  3568  03B7  01CF               	clrf	??_PROTOCOL_Loop+1
  3569  03B8  084E               	movf	??_PROTOCOL_Loop,w
  3570  03B9  00B0               	movwf	?_printf+2
  3571  03BA  084F               	movf	??_PROTOCOL_Loop+1,w
  3572  03BB  00B1               	movwf	?_printf+3
  3573  03BC  3180  2068  3182   	fcall	_printf
  3574                           
  3575                           ;protocol.c: 185: } else {
  3576  03BF  2A3D               	goto	l618
  3577  03C0                     l4503:	
  3578                           
  3579                           ;protocol.c: 186: PROTOCOL_EXT(buf);
  3580  03C0  3020               	movlw	(low (_buf| (0+256)))& (0+255)
  3581  03C1  3180  2002  3182   	fcall	_PROTOCOL_EXT
  3582  03C4  2A3D               	goto	l618
  3583  03C5                     __end_of_PROTOCOL_Loop:	
  3584                           
  3585                           	psect	text6
  3586  0717                     __ptext6:	
  3587 ;; *************** function _strncmp *****************
  3588 ;; Defined at:
  3589 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  3590 ;; Parameters:    Size  Location     Type
  3591 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3592 ;;		 -> STR_15(4), STR_14(4), STR_12(4), STR_11(4), 
  3593 ;;		 -> STR_8(4), STR_7(4), STR_6(4), STR_4(4), 
  3594 ;;  s2              1    2[BANK0 ] PTR const unsigned char 
  3595 ;;		 -> buf(48), 
  3596 ;;  len             2    3[BANK0 ] unsigned int 
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;		None
  3599 ;; Return value:  Size  Location     Type
  3600 ;;                  2    0[BANK0 ] int 
  3601 ;; Registers used:
  3602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3603 ;; Tracked objects:
  3604 ;;		On entry : 0/0
  3605 ;;		On exit  : 0/0
  3606 ;;		Unchanged: 0/0
  3607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3608 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3610 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3611 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3612 ;;Total ram usage:        7 bytes
  3613 ;; Hardware stack levels used:    1
  3614 ;; Hardware stack levels required when called:    5
  3615 ;; This function calls:
  3616 ;;		Nothing
  3617 ;; This function is called by:
  3618 ;;		_PROTOCOL_Loop
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           
  3623                           ;psect for function _strncmp
  3624  0717                     _strncmp:	
  3625  0717                     l2999:	
  3626                           ;incstack = 0
  3627                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  3628                           
  3629  0717  3001               	movlw	1
  3630  0718  0020               	movlb	0	; select bank0
  3631  0719  02A3               	subwf	strncmp@len,f
  3632  071A  3000               	movlw	0
  3633  071B  3BA4               	subwfb	strncmp@len+1,f
  3634  071C  0A23               	incf	strncmp@len,w
  3635  071D  1903               	btfsc	3,2
  3636  071E  0A24               	incf	strncmp@len+1,w
  3637  071F  1903               	btfsc	3,2
  3638  0720  2F56               	goto	l3001
  3639  0721  0020               	movlb	0	; select bank0
  3640  0722  0820               	movf	strncmp@s1,w
  3641  0723  0084               	movwf	4
  3642  0724  0821               	movf	strncmp@s1+1,w
  3643  0725  0085               	movwf	5
  3644  0726  0012               	moviw fsr0++
  3645  0727  1903               	btfsc	3,2
  3646  0728  2F35               	goto	l2991
  3647  0729  0822               	movf	strncmp@s2,w
  3648  072A  0086               	movwf	6
  3649  072B  3001               	movlw	1	; select bank2/3
  3650  072C  0087               	movwf	7
  3651  072D  0820               	movf	strncmp@s1,w
  3652  072E  0084               	movwf	4
  3653  072F  0821               	movf	strncmp@s1+1,w
  3654  0730  0085               	movwf	5
  3655  0731  0800               	movf	0,w	;code access
  3656  0732  0601               	xorwf	1,w
  3657  0733  1903               	skipnz
  3658  0734  2F4D               	goto	l2995
  3659  0735                     l2991:	
  3660  0735  0822               	movf	strncmp@s2,w
  3661  0736  0086               	movwf	6
  3662  0737  3001               	movlw	1	; select bank2/3
  3663  0738  0087               	movwf	7
  3664  0739  0801               	movf	1,w
  3665  073A  00A5               	movwf	??_strncmp
  3666  073B  01A6               	clrf	??_strncmp+1
  3667  073C  09A5               	comf	??_strncmp,f
  3668  073D  09A6               	comf	??_strncmp+1,f
  3669  073E  0AA5               	incf	??_strncmp,f
  3670  073F  1903               	skipnz
  3671  0740  0AA6               	incf	??_strncmp+1,f
  3672  0741  0820               	movf	strncmp@s1,w
  3673  0742  0084               	movwf	4
  3674  0743  0821               	movf	strncmp@s1+1,w
  3675  0744  0085               	movwf	5
  3676  0745  0800               	movf	0,w	;code access
  3677  0746  0725               	addwf	??_strncmp,w
  3678  0747  00A0               	movwf	?_strncmp
  3679  0748  0826               	movf	??_strncmp+1,w
  3680  0749  1803               	skipnc
  3681  074A  0A26               	incf	??_strncmp+1,w
  3682  074B  00A1               	movwf	?_strncmp+1
  3683  074C  0008               	return
  3684  074D                     l2995:	
  3685  074D  3001               	movlw	1
  3686  074E  07A0               	addwf	strncmp@s1,f
  3687  074F  3000               	movlw	0
  3688  0750  3DA1               	addwfc	strncmp@s1+1,f
  3689  0751  3001               	movlw	1
  3690  0752  00A5               	movwf	??_strncmp
  3691  0753  0825               	movf	??_strncmp,w
  3692  0754  07A2               	addwf	strncmp@s2,f
  3693  0755  2F17               	goto	l2999
  3694  0756                     l3001:	
  3695  0756  01A0               	clrf	?_strncmp
  3696  0757  01A1               	clrf	?_strncmp+1
  3697  0758  0008               	return
  3698  0759                     __end_of_strncmp:	
  3699                           
  3700                           	psect	text7
  3701  0557                     __ptext7:	
  3702 ;; *************** function _loop_func *****************
  3703 ;; Defined at:
  3704 ;;		line 80 in file "main.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;		None
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;  v               2   43[BANK0 ] unsigned int 
  3709 ;;  out             2   40[BANK0 ] unsigned int 
  3710 ;;  i               1   45[BANK0 ] unsigned char 
  3711 ;;  transition_d    1   42[BANK0 ] unsigned char 
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  1    wreg      void 
  3714 ;; Registers used:
  3715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3722 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3723 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3724 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3725 ;;Total ram usage:        7 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    9
  3728 ;; This function calls:
  3729 ;;		_ADC_GetConversionResult
  3730 ;;		_ADC_IsConversionDone
  3731 ;;		_ADC_SelectChannel
  3732 ;;		_ADC_StartConversion
  3733 ;;		_PROTOCOL_I2C_Send_uint8_t
  3734 ;;		_abs
  3735 ;;		_led_blink
  3736 ;; This function is called by:
  3737 ;;		_main
  3738 ;;		_PROTOCOL_Loop
  3739 ;; This function uses a non-reentrant model
  3740 ;;
  3741                           
  3742                           
  3743                           ;psect for function _loop_func
  3744  0557                     _loop_func:	
  3745                           
  3746                           ;main.c: 81: uint8_t i;
  3747                           ;main.c: 82: bool transition_detected = 0;
  3748                           
  3749                           ;incstack = 0
  3750                           ; Regs used in _loop_func: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3751  0557  0020               	movlb	0	; select bank0
  3752  0558  01CA               	clrf	loop_func@transition_detected
  3753                           
  3754                           ;main.c: 83: for (i=0; i < 4; i++) {
  3755  0559  01CD               	clrf	loop_func@i
  3756  055A  3004               	movlw	4
  3757  055B  024D               	subwf	loop_func@i,w
  3758  055C  1803               	btfsc	3,0
  3759  055D  2DFB               	goto	l2939
  3760  055E                     l2893:	
  3761                           
  3762                           ;main.c: 84: if (analog_in_flags[i] == 0) continue;
  3763  055E  084D               	movf	loop_func@i,w
  3764  055F  3EB4               	addlw	(low (_analog_in_flags| 0))& (0+255)
  3765  0560  0086               	movwf	6
  3766  0561  0187               	clrf	7
  3767  0562  0801               	movf	1,w
  3768  0563  1903               	btfsc	3,2
  3769  0564  2DF3               	goto	l2935
  3770                           
  3771                           ;main.c: 86: ADC_SelectChannel(ANALOG_IN[i]);
  3772  0565  084D               	movf	loop_func@i,w
  3773  0566  3ECF               	addlw	low (_ANALOG_IN| (0+32768))
  3774  0567  0084               	movwf	4
  3775  0568  3083               	movlw	high (_ANALOG_IN| (0+32768))
  3776  0569  1803               	skipnc
  3777  056A  3E01               	addlw	1
  3778  056B  0085               	movwf	5
  3779  056C  0800               	movf	0,w	;code access
  3780  056D  318D  25B9  3185   	fcall	_ADC_SelectChannel
  3781                           
  3782                           ;main.c: 88: ADC_StartConversion();
  3783  0570  318C  24FC  3185   	fcall	_ADC_StartConversion
  3784  0573                     l2901:	
  3785                           ;main.c: 89: while(!ADC_IsConversionDone());
  3786                           
  3787  0573  3187  27F9  3185   	fcall	_ADC_IsConversionDone
  3788  0576  3A00               	xorlw	0
  3789  0577  1903               	skipnz
  3790  0578  2D73               	goto	l2901
  3791                           
  3792                           ;main.c: 90: adc_result_t out = ADC_GetConversionResult();
  3793  0579  318D  2547  3185   	fcall	_ADC_GetConversionResult
  3794  057C  0020               	movlb	0	; select bank0
  3795  057D  0821               	movf	?_ADC_GetConversionResult+1,w
  3796  057E  00C9               	movwf	loop_func@out+1
  3797  057F  0820               	movf	?_ADC_GetConversionResult,w
  3798  0580  00C8               	movwf	loop_func@out
  3799                           
  3800                           ;main.c: 91: uint16_t v = abs(out - 511);
  3801  0581  0848               	movf	loop_func@out,w
  3802  0582  3E01               	addlw	1
  3803  0583  00A0               	movwf	abs@a
  3804  0584  30FE               	movlw	254
  3805  0585  3D49               	addwfc	loop_func@out+1,w
  3806  0586  00A1               	movwf	abs@a+1
  3807  0587  318D  25AA  3185   	fcall	_abs
  3808  058A  0020               	movlb	0	; select bank0
  3809  058B  0821               	movf	?_abs+1,w
  3810  058C  00CC               	movwf	loop_func@v+1
  3811  058D  0820               	movf	?_abs,w
  3812  058E  00CB               	movwf	loop_func@v
  3813                           
  3814                           ;main.c: 107: switch (position[i]) {
  3815  058F  2DE7               	goto	l2933
  3816  0590                     l2907:	
  3817                           ;main.c: 108: case 0:
  3818                           
  3819                           
  3820                           ;main.c: 109: if (v >= 50) count[i]++;
  3821  0590  3000               	movlw	0
  3822  0591  024C               	subwf	loop_func@v+1,w
  3823  0592  3032               	movlw	50
  3824  0593  1903               	skipnz
  3825  0594  024B               	subwf	loop_func@v,w
  3826  0595  1C03               	skipc
  3827  0596  2DA0               	goto	l2911
  3828  0597  3001               	movlw	1
  3829  0598  00C7               	movwf	??_loop_func
  3830  0599  084D               	movf	loop_func@i,w
  3831  059A  3EB0               	addlw	(low (_count| 0))& (0+255)
  3832  059B  0086               	movwf	6
  3833  059C  0187               	clrf	7
  3834  059D  0847               	movf	??_loop_func,w
  3835  059E  0781               	addwf	1,f
  3836  059F  2DA5               	goto	l338
  3837  05A0                     l2911:	
  3838                           
  3839                           ;main.c: 110: else count[i] = 0;
  3840  05A0  084D               	movf	loop_func@i,w
  3841  05A1  3EB0               	addlw	(low (_count| 0))& (0+255)
  3842  05A2  0086               	movwf	6
  3843  05A3  0187               	clrf	7
  3844  05A4  0181               	clrf	1
  3845  05A5                     l338:	
  3846                           
  3847                           ;main.c: 112: if (count[i] >= 250) {
  3848  05A5  084D               	movf	loop_func@i,w
  3849  05A6  3EB0               	addlw	(low (_count| 0))& (0+255)
  3850  05A7  0086               	movwf	6
  3851  05A8  0187               	clrf	7
  3852  05A9  30FA               	movlw	250
  3853  05AA  0201               	subwf	1,w
  3854  05AB  1C03               	skipc
  3855  05AC  2DF3               	goto	l2935
  3856                           
  3857                           ;main.c: 113: count[i] = 0;
  3858  05AD  084D               	movf	loop_func@i,w
  3859  05AE  3EB0               	addlw	(low (_count| 0))& (0+255)
  3860  05AF  0086               	movwf	6
  3861  05B0  0187               	clrf	7
  3862  05B1  0181               	clrf	1
  3863                           
  3864                           ;main.c: 114: position[i] = 1;
  3865  05B2  084D               	movf	loop_func@i,w
  3866  05B3  3EDE               	addlw	(low (_position| 0))& (0+255)
  3867  05B4  0086               	movwf	6
  3868  05B5  0187               	clrf	7
  3869  05B6  0181               	clrf	1
  3870  05B7  0A81               	incf	1,f
  3871  05B8  2DE0               	goto	L2
  3872  05B9                     l2919:	
  3873                           ;main.c: 120: case 1:
  3874                           
  3875                           ;main.c: 117: }
  3876                           ;main.c: 118: break;
  3877                           
  3878                           ;main.c: 116: transition_detected = 1;
  3879                           
  3880                           ;main.c: 115: led_blink();
  3881                           
  3882                           
  3883                           ;main.c: 121: if (v < 50) count[i]++;
  3884  05B9  3000               	movlw	0
  3885  05BA  024C               	subwf	loop_func@v+1,w
  3886  05BB  3032               	movlw	50
  3887  05BC  1903               	skipnz
  3888  05BD  024B               	subwf	loop_func@v,w
  3889  05BE  1803               	skipnc
  3890  05BF  2DC9               	goto	l2923
  3891  05C0  3001               	movlw	1
  3892  05C1  00C7               	movwf	??_loop_func
  3893  05C2  084D               	movf	loop_func@i,w
  3894  05C3  3EB0               	addlw	(low (_count| 0))& (0+255)
  3895  05C4  0086               	movwf	6
  3896  05C5  0187               	clrf	7
  3897  05C6  0847               	movf	??_loop_func,w
  3898  05C7  0781               	addwf	1,f
  3899  05C8  2DCE               	goto	l343
  3900  05C9                     l2923:	
  3901                           
  3902                           ;main.c: 122: else count[i] = 0;
  3903  05C9  084D               	movf	loop_func@i,w
  3904  05CA  3EB0               	addlw	(low (_count| 0))& (0+255)
  3905  05CB  0086               	movwf	6
  3906  05CC  0187               	clrf	7
  3907  05CD  0181               	clrf	1
  3908  05CE                     l343:	
  3909                           
  3910                           ;main.c: 124: if (count[i] >= 250) {
  3911  05CE  084D               	movf	loop_func@i,w
  3912  05CF  3EB0               	addlw	(low (_count| 0))& (0+255)
  3913  05D0  0086               	movwf	6
  3914  05D1  0187               	clrf	7
  3915  05D2  30FA               	movlw	250
  3916  05D3  0201               	subwf	1,w
  3917  05D4  1C03               	skipc
  3918  05D5  2DF3               	goto	l2935
  3919                           
  3920                           ;main.c: 125: count[i] = 0;
  3921  05D6  084D               	movf	loop_func@i,w
  3922  05D7  3EB0               	addlw	(low (_count| 0))& (0+255)
  3923  05D8  0086               	movwf	6
  3924  05D9  0187               	clrf	7
  3925  05DA  0181               	clrf	1
  3926                           
  3927                           ;main.c: 126: position[i] = 0;
  3928  05DB  084D               	movf	loop_func@i,w
  3929  05DC  3EDE               	addlw	(low (_position| 0))& (0+255)
  3930  05DD  0086               	movwf	6
  3931  05DE  0187               	clrf	7
  3932  05DF  0181               	clrf	1
  3933  05E0                     L2:	
  3934                           
  3935                           ;main.c: 127: led_blink();
  3936  05E0  318D  2570  3185   	fcall	_led_blink
  3937                           
  3938                           ;main.c: 128: transition_detected = 1;
  3939  05E3  0020               	movlb	0	; select bank0
  3940  05E4  01CA               	clrf	loop_func@transition_detected
  3941  05E5  0ACA               	incf	loop_func@transition_detected,f
  3942                           
  3943                           ;main.c: 131: }
  3944                           
  3945                           ;main.c: 129: }
  3946                           ;main.c: 130: break;
  3947  05E6  2DF3               	goto	l2935
  3948  05E7                     l2933:	
  3949  05E7  084D               	movf	loop_func@i,w
  3950  05E8  3EDE               	addlw	(low (_position| 0))& (0+255)
  3951  05E9  0086               	movwf	6
  3952  05EA  0187               	clrf	7
  3953  05EB  0801               	movf	1,w
  3954                           
  3955                           ; Switch size 1, requested type "space"
  3956                           ; Number of cases is 2, Range of values is 0 to 1
  3957                           ; switch strategies available:
  3958                           ; Name         Instructions Cycles
  3959                           ; simple_byte            7     4 (average)
  3960                           ; direct_byte           10     6 (fixed)
  3961                           ; jumptable            260     6 (fixed)
  3962                           ;	Chosen strategy is simple_byte
  3963  05EC  3A00               	xorlw	0	; case 0
  3964  05ED  1903               	skipnz
  3965  05EE  2D90               	goto	l2907
  3966  05EF  3A01               	xorlw	1	; case 1
  3967  05F0  1903               	skipnz
  3968  05F1  2DB9               	goto	l2919
  3969  05F2  2DF3               	goto	l2935
  3970  05F3                     l2935:	
  3971  05F3  3001               	movlw	1
  3972  05F4  00C7               	movwf	??_loop_func
  3973  05F5  0847               	movf	??_loop_func,w
  3974  05F6  07CD               	addwf	loop_func@i,f
  3975  05F7  3004               	movlw	4
  3976  05F8  024D               	subwf	loop_func@i,w
  3977  05F9  1C03               	skipc
  3978  05FA  2D5E               	goto	l2893
  3979  05FB                     l2939:	
  3980                           
  3981                           ;main.c: 132: }
  3982                           ;main.c: 133: if (transition_detected) {
  3983  05FB  084A               	movf	loop_func@transition_detected,w
  3984  05FC  1903               	btfsc	3,2
  3985  05FD  2E06               	goto	l2943
  3986                           
  3987                           ;main.c: 134: PROTOCOL_I2C_Send_uint8_t(4, position);
  3988  05FE  30DE               	movlw	(low (_position| 0))& (0+255)
  3989  05FF  00C7               	movwf	??_loop_func
  3990  0600  0847               	movf	??_loop_func,w
  3991  0601  00C2               	movwf	PROTOCOL_I2C_Send_uint8_t@pbuffer
  3992  0602  3004               	movlw	4
  3993  0603  3186  26D0  3185   	fcall	_PROTOCOL_I2C_Send_uint8_t
  3994  0606                     l2943:	
  3995                           
  3996                           ;main.c: 135: }
  3997                           ;main.c: 136: _delay((unsigned long)((1000)*(4000000/4000000.0)));
  3998  0606  30C8               	movlw	200
  3999  0607                     u4127:	
  4000  0607  3200               	nop2
  4001  0608  0B89               	decfsz	9,f
  4002  0609  2E07               	goto	u4127
  4003  060A  0008               	return
  4004  060B                     __end_of_loop_func:	
  4005                           
  4006                           	psect	text8
  4007  0D70                     __ptext8:	
  4008 ;; *************** function _led_blink *****************
  4009 ;; Defined at:
  4010 ;;		line 51 in file "main.c"
  4011 ;; Parameters:    Size  Location     Type
  4012 ;;		None
  4013 ;; Auto vars:     Size  Location     Type
  4014 ;;		None
  4015 ;; Return value:  Size  Location     Type
  4016 ;;                  1    wreg      void 
  4017 ;; Registers used:
  4018 ;;		wreg
  4019 ;; Tracked objects:
  4020 ;;		On entry : 0/0
  4021 ;;		On exit  : 0/0
  4022 ;;		Unchanged: 0/0
  4023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4026 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4027 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4028 ;;Total ram usage:        1 bytes
  4029 ;; Hardware stack levels used:    1
  4030 ;; Hardware stack levels required when called:    5
  4031 ;; This function calls:
  4032 ;;		Nothing
  4033 ;; This function is called by:
  4034 ;;		_loop_func
  4035 ;; This function uses a non-reentrant model
  4036 ;;
  4037                           
  4038                           
  4039                           ;psect for function _led_blink
  4040  0D70                     _led_blink:	
  4041                           
  4042                           ;main.c: 52: LATCbits.LATC2 = 0;
  4043                           
  4044                           ;incstack = 0
  4045                           ; Regs used in _led_blink: [wreg]
  4046  0D70  0022               	movlb	2	; select bank2
  4047  0D71  110E               	bcf	14,2	;volatile
  4048                           
  4049                           ;main.c: 53: _delay((unsigned long)((3)*(4000000/4000.0)));
  4050  0D72  3004               	movlw	4
  4051  0D73  0020               	movlb	0	; select bank0
  4052  0D74  00A0               	movwf	??_led_blink
  4053  0D75  30E4               	movlw	228
  4054  0D76                     u4137:	
  4055  0D76  0B89               	decfsz	9,f
  4056  0D77  2D76               	goto	u4137
  4057  0D78  0BA0               	decfsz	??_led_blink,f
  4058  0D79  2D76               	goto	u4137
  4059  0D7A  0000               	nop
  4060                           
  4061                           ;main.c: 54: LATCbits.LATC2 = 1;
  4062  0D7B  0022               	movlb	2	; select bank2
  4063  0D7C  150E               	bsf	14,2	;volatile
  4064  0D7D  0008               	return
  4065  0D7E                     __end_of_led_blink:	
  4066                           
  4067                           	psect	text9
  4068  0DAA                     __ptext9:	
  4069 ;; *************** function _abs *****************
  4070 ;; Defined at:
  4071 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abs.c"
  4072 ;; Parameters:    Size  Location     Type
  4073 ;;  a               2    0[BANK0 ] int 
  4074 ;; Auto vars:     Size  Location     Type
  4075 ;;		None
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  2    0[BANK0 ] int 
  4078 ;; Registers used:
  4079 ;;		wreg, status,2, status,0
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : 0/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4085 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4087 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4088 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4089 ;;Total ram usage:        4 bytes
  4090 ;; Hardware stack levels used:    1
  4091 ;; Hardware stack levels required when called:    5
  4092 ;; This function calls:
  4093 ;;		Nothing
  4094 ;; This function is called by:
  4095 ;;		_loop_func
  4096 ;; This function uses a non-reentrant model
  4097 ;;
  4098                           
  4099                           
  4100                           ;psect for function _abs
  4101  0DAA                     _abs:	
  4102                           
  4103                           ;incstack = 0
  4104                           ; Regs used in _abs: [wreg+status,2+status,0]
  4105  0DAA  0020               	movlb	0	; select bank0
  4106  0DAB  1FA1               	btfss	abs@a+1,7
  4107  0DAC  0008               	return
  4108  0DAD  0920               	comf	abs@a,w
  4109  0DAE  00A2               	movwf	??_abs
  4110  0DAF  0921               	comf	abs@a+1,w
  4111  0DB0  00A3               	movwf	??_abs+1
  4112  0DB1  0AA2               	incf	??_abs,f
  4113  0DB2  1903               	skipnz
  4114  0DB3  0AA3               	incf	??_abs+1,f
  4115  0DB4  0822               	movf	??_abs,w
  4116  0DB5  00A0               	movwf	?_abs
  4117  0DB6  0823               	movf	??_abs+1,w
  4118  0DB7  00A1               	movwf	?_abs+1
  4119  0DB8  0008               	return
  4120  0DB9                     __end_of_abs:	
  4121                           
  4122                           	psect	text10
  4123  06D0                     __ptext10:	
  4124 ;; *************** function _PROTOCOL_I2C_Send_uint8_t *****************
  4125 ;; Defined at:
  4126 ;;		line 292 in file "protocol.c"
  4127 ;; Parameters:    Size  Location     Type
  4128 ;;  length          1    wreg     unsigned char 
  4129 ;;  pbuffer         1   34[BANK0 ] PTR unsigned char 
  4130 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), position(4), 
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;  length          1   38[BANK0 ] unsigned char 
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  1    wreg      void 
  4135 ;; Registers used:
  4136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 0/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4142 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4143 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4144 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4145 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4146 ;;Total ram usage:        5 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:    8
  4149 ;; This function calls:
  4150 ;;		_PROTOCOL_I2C_Set_TLV
  4151 ;;		_printf
  4152 ;; This function is called by:
  4153 ;;		_loop_func
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           
  4158                           ;psect for function _PROTOCOL_I2C_Send_uint8_t
  4159  06D0                     _PROTOCOL_I2C_Send_uint8_t:	
  4160                           
  4161                           ;incstack = 0
  4162                           ; Regs used in _PROTOCOL_I2C_Send_uint8_t: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4163                           ;PROTOCOL_I2C_Send_uint8_t@length stored from wreg
  4164  06D0  0020               	movlb	0	; select bank0
  4165  06D1  00C6               	movwf	PROTOCOL_I2C_Send_uint8_t@length
  4166                           
  4167                           ;protocol.c: 293: if (backplane_slave_enabled) {
  4168  06D2  0857               	movf	_backplane_slave_enabled,w
  4169  06D3  1903               	btfsc	3,2
  4170  06D4  2EE1               	goto	l2731
  4171                           
  4172                           ;protocol.c: 294: PROTOCOL_I2C_Set_TLV(0x01, length, &pbuffer[0]);
  4173  06D5  0846               	movf	PROTOCOL_I2C_Send_uint8_t@length,w
  4174  06D6  00C3               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4175  06D7  0843               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4176  06D8  00A0               	movwf	PROTOCOL_I2C_Set_TLV@length
  4177  06D9  0842               	movf	PROTOCOL_I2C_Send_uint8_t@pbuffer,w
  4178  06DA  00C4               	movwf	??_PROTOCOL_I2C_Send_uint8_t+1
  4179  06DB  0844               	movf	??_PROTOCOL_I2C_Send_uint8_t+1,w
  4180  06DC  00A1               	movwf	PROTOCOL_I2C_Set_TLV@pbuffer
  4181  06DD  3001               	movlw	1
  4182  06DE  318E  26CD         	fcall	_PROTOCOL_I2C_Set_TLV
  4183                           
  4184                           ;protocol.c: 295: } else {
  4185  06E0  0008               	return
  4186  06E1                     l2731:	
  4187                           
  4188                           ;protocol.c: 296: length--;
  4189  06E1  3001               	movlw	1
  4190  06E2  0020               	movlb	0	; select bank0
  4191  06E3  02C6               	subwf	PROTOCOL_I2C_Send_uint8_t@length,f
  4192                           
  4193                           ;protocol.c: 297: for(i=0; i<length; i++) printf("%d,", pbuffer[i]);
  4194  06E4  01D6               	clrf	_i
  4195  06E5                     l2739:	
  4196  06E5  0846               	movf	PROTOCOL_I2C_Send_uint8_t@length,w
  4197  06E6  0256               	subwf	_i,w
  4198  06E7  1803               	btfsc	3,0
  4199  06E8  2F03               	goto	l2741
  4200  06E9  3067               	movlw	low (STR_22| (0+32768))
  4201  06EA  00AE               	movwf	printf@f
  4202  06EB  3084               	movlw	high (STR_22| (0+32768))
  4203  06EC  00AF               	movwf	printf@f+1
  4204  06ED  0856               	movf	_i,w
  4205  06EE  0742               	addwf	PROTOCOL_I2C_Send_uint8_t@pbuffer,w
  4206  06EF  00C3               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4207  06F0  0843               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4208  06F1  0086               	movwf	6
  4209  06F2  0187               	clrf	7
  4210  06F3  0801               	movf	1,w
  4211  06F4  00C4               	movwf	??_PROTOCOL_I2C_Send_uint8_t+1
  4212  06F5  01C5               	clrf	??_PROTOCOL_I2C_Send_uint8_t+2
  4213  06F6  0844               	movf	??_PROTOCOL_I2C_Send_uint8_t+1,w
  4214  06F7  00B0               	movwf	?_printf+2
  4215  06F8  0845               	movf	??_PROTOCOL_I2C_Send_uint8_t+2,w
  4216  06F9  00B1               	movwf	?_printf+3
  4217  06FA  3180  2068  3186   	fcall	_printf
  4218  06FD  3001               	movlw	1
  4219  06FE  0020               	movlb	0	; select bank0
  4220  06FF  00C3               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4221  0700  0843               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4222  0701  07D6               	addwf	_i,f
  4223  0702  2EE5               	goto	l2739
  4224  0703                     l2741:	
  4225                           
  4226                           ;protocol.c: 298: printf("%d\n", pbuffer[i]);
  4227  0703  30F8               	movlw	low ((STR_16+6)| (0+32768))
  4228  0704  00AE               	movwf	printf@f
  4229  0705  3083               	movlw	high ((STR_16+6)| (0+32768))
  4230  0706  00AF               	movwf	printf@f+1
  4231  0707  0856               	movf	_i,w
  4232  0708  0742               	addwf	PROTOCOL_I2C_Send_uint8_t@pbuffer,w
  4233  0709  00C3               	movwf	??_PROTOCOL_I2C_Send_uint8_t
  4234  070A  0843               	movf	??_PROTOCOL_I2C_Send_uint8_t,w
  4235  070B  0086               	movwf	6
  4236  070C  0187               	clrf	7
  4237  070D  0801               	movf	1,w
  4238  070E  00C4               	movwf	??_PROTOCOL_I2C_Send_uint8_t+1
  4239  070F  01C5               	clrf	??_PROTOCOL_I2C_Send_uint8_t+2
  4240  0710  0844               	movf	??_PROTOCOL_I2C_Send_uint8_t+1,w
  4241  0711  00B0               	movwf	?_printf+2
  4242  0712  0845               	movf	??_PROTOCOL_I2C_Send_uint8_t+2,w
  4243  0713  00B1               	movwf	?_printf+3
  4244  0714  3180  2068         	fcall	_printf
  4245  0716  0008               	return
  4246  0717                     __end_of_PROTOCOL_I2C_Send_uint8_t:	
  4247                           
  4248                           	psect	text11
  4249  0068                     __ptext11:	
  4250 ;; *************** function _printf *****************
  4251 ;; Defined at:
  4252 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4253 ;; Parameters:    Size  Location     Type
  4254 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4255 ;;		 -> STR_48(10), STR_47(9), STR_46(10), STR_45(9), 
  4256 ;;		 -> STR_44(4), STR_43(4), STR_42(4), STR_41(4), 
  4257 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_37(4), 
  4258 ;;		 -> STR_36(14), STR_35(9), STR_34(10), STR_33(9), 
  4259 ;;		 -> STR_32(10), STR_31(9), STR_30(7), STR_29(4), 
  4260 ;;		 -> STR_28(4), STR_27(9), STR_26(4), STR_25(4), 
  4261 ;;		 -> STR_24(10), STR_23(4), STR_22(4), STR_21(8), 
  4262 ;;		 -> STR_20(4), STR_19(4), STR_18(9), STR_17(6), 
  4263 ;;		 -> STR_16(10), STR_13(10), STR_9(10), STR_5(10), 
  4264 ;;		 -> STR_3(5), 
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;  tmpval          4    0        struct .
  4267 ;;  width           2   31[BANK0 ] int 
  4268 ;;  len             2   28[BANK0 ] unsigned int 
  4269 ;;  val             2   26[BANK0 ] unsigned int 
  4270 ;;  cp              2   23[BANK0 ] PTR const unsigned char 
  4271 ;;		 -> STR_10(4), buf(48), STR_2(7), ROM(8192), 
  4272 ;;		 -> printf@c(1), STR_1(17), 
  4273 ;;  c               1   33[BANK0 ] char 
  4274 ;;  flag            1   30[BANK0 ] unsigned char 
  4275 ;;  ap              1   25[BANK0 ] PTR void [1]
  4276 ;;		 -> ?_printf(2), 
  4277 ;;  prec            1   22[BANK0 ] char 
  4278 ;; Return value:  Size  Location     Type
  4279 ;;                  2   14[BANK0 ] int 
  4280 ;; Registers used:
  4281 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4282 ;; Tracked objects:
  4283 ;;		On entry : 0/0
  4284 ;;		On exit  : 0/0
  4285 ;;		Unchanged: 0/0
  4286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4287 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4288 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4289 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4291 ;;Total ram usage:       20 bytes
  4292 ;; Hardware stack levels used:    1
  4293 ;; Hardware stack levels required when called:    7
  4294 ;; This function calls:
  4295 ;;		___lwdiv
  4296 ;;		___lwmod
  4297 ;;		___wmul
  4298 ;;		_isdigit
  4299 ;;		_putch
  4300 ;; This function is called by:
  4301 ;;		_PROTOCOL_Loop
  4302 ;;		_PROTOCOL_I2C_Send_uint8_t
  4303 ;; This function uses a non-reentrant model
  4304 ;;
  4305                           
  4306                           
  4307                           ;psect for function _printf
  4308  0068                     _printf:	
  4309                           
  4310                           ;doprnt.c: 466: va_list ap;
  4311                           ;doprnt.c: 499: signed char c;
  4312                           ;doprnt.c: 501: int width;
  4313                           ;doprnt.c: 506: signed char prec;
  4314                           ;doprnt.c: 508: unsigned char flag;
  4315                           ;doprnt.c: 523: union {
  4316                           ;doprnt.c: 524: unsigned long vd;
  4317                           ;doprnt.c: 525: double integ;
  4318                           ;doprnt.c: 526: } tmpval;
  4319                           ;doprnt.c: 528: unsigned int val;
  4320                           ;doprnt.c: 529: unsigned len;
  4321                           ;doprnt.c: 530: const char * cp;
  4322                           ;doprnt.c: 533: *ap = __va_start();
  4323                           
  4324                           ;incstack = 0
  4325                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4326  0068  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
  4327  0069  0020               	movlb	0	; select bank0
  4328  006A  00B2               	movwf	??_printf
  4329  006B  0832               	movf	??_printf,w
  4330  006C  00B9               	movwf	printf@ap
  4331  006D                     l2579:	
  4332                           ;doprnt.c: 536: while(c = *f++) {
  4333                           
  4334  006D  0020               	movlb	0	; select bank0
  4335  006E  082F               	movf	printf@f+1,w
  4336  006F  00B3               	movwf	??_printf+1
  4337  0070  082E               	movf	printf@f,w
  4338  0071  00B2               	movwf	??_printf
  4339  0072  0AAE               	incf	printf@f,f
  4340  0073  1903               	skipnz
  4341  0074  0AAF               	incf	printf@f+1,f
  4342  0075  0832               	movf	??_printf,w
  4343  0076  0084               	movwf	4
  4344  0077  0833               	movf	??_printf+1,w
  4345  0078  0085               	movwf	5
  4346  0079  0800               	movf	0,w	;code access
  4347  007A  00B4               	movwf	??_printf+2
  4348  007B  0834               	movf	??_printf+2,w
  4349  007C  00C1               	movwf	printf@c
  4350  007D  0841               	movf	printf@c,w
  4351  007E  1903               	btfsc	3,2
  4352  007F  0008               	return
  4353                           
  4354                           ;doprnt.c: 538: if(c != '%')
  4355  0080  3025               	movlw	37
  4356  0081  0641               	xorwf	printf@c,w
  4357  0082  1903               	btfsc	3,2
  4358  0083  2889               	goto	l2455
  4359                           
  4360                           ;doprnt.c: 540: {
  4361                           ;doprnt.c: 541: (putch(c) );
  4362  0084  0841               	movf	printf@c,w
  4363  0085  318D  2521  3180   	fcall	_putch
  4364                           
  4365                           ;doprnt.c: 542: continue;
  4366  0088  286D               	goto	l2579
  4367  0089                     l2455:	
  4368                           
  4369                           ;doprnt.c: 543: }
  4370                           ;doprnt.c: 546: width = 0;
  4371  0089  0020               	movlb	0	; select bank0
  4372  008A  01BF               	clrf	printf@width
  4373  008B  01C0               	clrf	printf@width+1
  4374                           
  4375                           ;doprnt.c: 548: flag = 0;
  4376  008C  01BE               	clrf	printf@flag
  4377                           
  4378                           ;doprnt.c: 551: switch(*f) {
  4379                           
  4380                           ;doprnt.c: 550: for(;;) {
  4381  008D  2893               	goto	l2461
  4382  008E                     l367:	
  4383                           ;doprnt.c: 579: case '0':
  4384                           
  4385                           
  4386                           ;doprnt.c: 580: flag |= 0x04;
  4387  008E  153E               	bsf	printf@flag,2
  4388                           
  4389                           ;doprnt.c: 581: f++;
  4390  008F  3001               	movlw	1
  4391  0090  07AE               	addwf	printf@f,f
  4392  0091  3000               	movlw	0
  4393  0092  3DAF               	addwfc	printf@f+1,f
  4394  0093                     l2461:	
  4395                           ;doprnt.c: 584: }
  4396                           
  4397                           ;doprnt.c: 582: continue;
  4398                           
  4399  0093  082E               	movf	printf@f,w
  4400  0094  0084               	movwf	4
  4401  0095  082F               	movf	printf@f+1,w
  4402  0096  0085               	movwf	5
  4403  0097  0800               	movf	0,w	;code access
  4404                           
  4405                           ; Switch size 1, requested type "space"
  4406                           ; Number of cases is 1, Range of values is 48 to 48
  4407                           ; switch strategies available:
  4408                           ; Name         Instructions Cycles
  4409                           ; simple_byte            4     3 (average)
  4410                           ; direct_byte           11     9 (fixed)
  4411                           ; jumptable            263     9 (fixed)
  4412                           ;	Chosen strategy is simple_byte
  4413  0098  3A30               	xorlw	48	; case 48
  4414  0099  1903               	skipnz
  4415  009A  288E               	goto	l367
  4416  009B  289C               	goto	l2463
  4417  009C                     l2463:	
  4418                           ;doprnt.c: 586: }
  4419                           
  4420                           ;doprnt.c: 585: break;
  4421                           
  4422                           
  4423                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4424  009C  082E               	movf	printf@f,w
  4425  009D  0084               	movwf	4
  4426  009E  082F               	movf	printf@f+1,w
  4427  009F  0085               	movwf	5
  4428  00A0  0800               	movf	0,w	;code access
  4429  00A1  318D  259B  3180   	fcall	_isdigit
  4430  00A4  1C03               	btfss	3,0
  4431  00A5  293D               	goto	l2511
  4432                           
  4433                           ;doprnt.c: 598: width = 0;
  4434  00A6  0020               	movlb	0	; select bank0
  4435  00A7  01BF               	clrf	printf@width
  4436  00A8  01C0               	clrf	printf@width+1
  4437  00A9                     l2467:	
  4438                           ;doprnt.c: 599: do {
  4439                           
  4440                           
  4441                           ;doprnt.c: 600: width *= 10;
  4442  00A9  300A               	movlw	10
  4443  00AA  0020               	movlb	0	; select bank0
  4444  00AB  00A0               	movwf	___wmul@multiplier
  4445  00AC  3000               	movlw	0
  4446  00AD  00A1               	movwf	___wmul@multiplier+1
  4447  00AE  0840               	movf	printf@width+1,w
  4448  00AF  00A3               	movwf	___wmul@multiplicand+1
  4449  00B0  083F               	movf	printf@width,w
  4450  00B1  00A2               	movwf	___wmul@multiplicand
  4451  00B2  318E  2658  3180   	fcall	___wmul
  4452  00B5  0020               	movlb	0	; select bank0
  4453  00B6  0821               	movf	?___wmul+1,w
  4454  00B7  00C0               	movwf	printf@width+1
  4455  00B8  0820               	movf	?___wmul,w
  4456  00B9  00BF               	movwf	printf@width
  4457                           
  4458                           ;doprnt.c: 601: width += *f++ - '0';
  4459  00BA  082E               	movf	printf@f,w
  4460  00BB  0084               	movwf	4
  4461  00BC  082F               	movf	printf@f+1,w
  4462  00BD  0085               	movwf	5
  4463  00BE  0800               	movf	0,w	;code access
  4464  00BF  3ED0               	addlw	208
  4465  00C0  00B2               	movwf	??_printf
  4466  00C1  30FF               	movlw	255
  4467  00C2  1803               	skipnc
  4468  00C3  3000               	movlw	0
  4469  00C4  00B3               	movwf	??_printf+1
  4470  00C5  0832               	movf	??_printf,w
  4471  00C6  07BF               	addwf	printf@width,f
  4472  00C7  0833               	movf	??_printf+1,w
  4473  00C8  3DC0               	addwfc	printf@width+1,f
  4474  00C9  3001               	movlw	1
  4475  00CA  07AE               	addwf	printf@f,f
  4476  00CB  3000               	movlw	0
  4477  00CC  3DAF               	addwfc	printf@f+1,f
  4478                           
  4479                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4480  00CD  082E               	movf	printf@f,w
  4481  00CE  0084               	movwf	4
  4482  00CF  082F               	movf	printf@f+1,w
  4483  00D0  0085               	movwf	5
  4484  00D1  0800               	movf	0,w	;code access
  4485  00D2  318D  259B  3180   	fcall	_isdigit
  4486  00D5  1C03               	btfss	3,0
  4487  00D6  293D               	goto	l2511
  4488  00D7  28A9               	goto	l2467
  4489  00D8                     l2475:	
  4490                           ;doprnt.c: 728: case 's':
  4491                           
  4492                           ;doprnt.c: 698: case 'i':
  4493                           ;doprnt.c: 699: break;
  4494                           
  4495                           ;doprnt.c: 697: case 'd':
  4496                           
  4497                           ;doprnt.c: 638: goto alldone;
  4498                           
  4499                           ;doprnt.c: 637: case 0:
  4500                           
  4501                           ;doprnt.c: 608: }
  4502                           ;doprnt.c: 635: switch(c = *f++) {
  4503                           
  4504                           
  4505                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4506  00D8  0020               	movlb	0	; select bank0
  4507  00D9  0839               	movf	printf@ap,w
  4508  00DA  0086               	movwf	6
  4509  00DB  0187               	clrf	7
  4510  00DC  3F40               	moviw [0]fsr1
  4511  00DD  00B7               	movwf	printf@cp
  4512  00DE  3F41               	moviw [1]fsr1
  4513  00DF  00B8               	movwf	printf@cp+1
  4514  00E0  3002               	movlw	2
  4515  00E1  00B2               	movwf	??_printf
  4516  00E2  0832               	movf	??_printf,w
  4517  00E3  07B9               	addwf	printf@ap,f
  4518                           
  4519                           ;doprnt.c: 740: if(!cp)
  4520  00E4  0837               	movf	printf@cp,w
  4521  00E5  0438               	iorwf	printf@cp+1,w
  4522  00E6  1D03               	btfss	3,2
  4523  00E7  28EC               	goto	l2483
  4524                           
  4525                           ;doprnt.c: 741: cp = "(null)";
  4526  00E8  3051               	movlw	low (STR_2| (0+32768))
  4527  00E9  00B7               	movwf	printf@cp
  4528  00EA  3084               	movlw	high (STR_2| (0+32768))
  4529  00EB  00B8               	movwf	printf@cp+1
  4530  00EC                     l2483:	
  4531                           
  4532                           ;doprnt.c: 745: len = 0;
  4533  00EC  01BC               	clrf	printf@len
  4534  00ED  01BD               	clrf	printf@len+1
  4535  00EE                     l2487:	
  4536                           ;doprnt.c: 746: while(cp[len])
  4537                           
  4538  00EE  0837               	movf	printf@cp,w
  4539  00EF  073C               	addwf	printf@len,w
  4540  00F0  0084               	movwf	4
  4541  00F1  0838               	movf	printf@cp+1,w
  4542  00F2  3D3D               	addwfc	printf@len+1,w
  4543  00F3  0085               	movwf	5
  4544  00F4  0012               	moviw fsr0++
  4545  00F5  1903               	btfsc	3,2
  4546  00F6  28FC               	goto	l2489
  4547                           
  4548                           ;doprnt.c: 747: len++;
  4549  00F7  3001               	movlw	1
  4550  00F8  07BC               	addwf	printf@len,f
  4551  00F9  3000               	movlw	0
  4552  00FA  3DBD               	addwfc	printf@len+1,f
  4553  00FB  28EE               	goto	l2487
  4554  00FC                     l2489:	
  4555                           ;doprnt.c: 750: dostring:
  4556                           
  4557                           
  4558                           ;doprnt.c: 757: if(width > len)
  4559  00FC  0840               	movf	printf@width+1,w
  4560  00FD  023D               	subwf	printf@len+1,w
  4561  00FE  1D03               	skipz
  4562  00FF  2902               	goto	u1565
  4563  0100  083F               	movf	printf@width,w
  4564  0101  023C               	subwf	printf@len,w
  4565  0102                     u1565:	
  4566  0102  1803               	skipnc
  4567  0103  2909               	goto	l2493
  4568                           
  4569                           ;doprnt.c: 758: width -= len;
  4570  0104  083C               	movf	printf@len,w
  4571  0105  02BF               	subwf	printf@width,f
  4572  0106  083D               	movf	printf@len+1,w
  4573  0107  3BC0               	subwfb	printf@width+1,f
  4574  0108  290B               	goto	l2497
  4575  0109                     l2493:	
  4576                           
  4577                           ;doprnt.c: 759: else
  4578                           ;doprnt.c: 760: width = 0;
  4579  0109  01BF               	clrf	printf@width
  4580  010A  01C0               	clrf	printf@width+1
  4581  010B                     l2497:	
  4582                           ;doprnt.c: 764: while(width--)
  4583                           
  4584  010B  30FF               	movlw	255
  4585  010C  0020               	movlb	0	; select bank0
  4586  010D  07BF               	addwf	printf@width,f
  4587  010E  30FF               	movlw	255
  4588  010F  3DC0               	addwfc	printf@width+1,f
  4589  0110  0A3F               	incf	printf@width,w
  4590  0111  1903               	btfsc	3,2
  4591  0112  0A40               	incf	printf@width+1,w
  4592  0113  1903               	btfsc	3,2
  4593  0114  2927               	goto	l2503
  4594                           
  4595                           ;doprnt.c: 765: (putch(' ') );
  4596  0115  3020               	movlw	32
  4597  0116  318D  2521  3180   	fcall	_putch
  4598  0119  290B               	goto	l2497
  4599  011A                     l2499:	
  4600                           ;doprnt.c: 767: while(len--)
  4601                           
  4602                           
  4603                           ;doprnt.c: 768: (putch(*cp++) );
  4604  011A  0837               	movf	printf@cp,w
  4605  011B  0084               	movwf	4
  4606  011C  0838               	movf	printf@cp+1,w
  4607  011D  0085               	movwf	5
  4608  011E  0800               	movf	0,w	;code access
  4609  011F  318D  2521  3180   	fcall	_putch
  4610  0122  3001               	movlw	1
  4611  0123  0020               	movlb	0	; select bank0
  4612  0124  07B7               	addwf	printf@cp,f
  4613  0125  3000               	movlw	0
  4614  0126  3DB8               	addwfc	printf@cp+1,f
  4615  0127                     l2503:	
  4616  0127  3001               	movlw	1
  4617  0128  02BC               	subwf	printf@len,f
  4618  0129  3000               	movlw	0
  4619  012A  3BBD               	subwfb	printf@len+1,f
  4620  012B  0A3C               	incf	printf@len,w
  4621  012C  1D03               	skipz
  4622  012D  291A               	goto	l2499
  4623  012E  0A3D               	incf	printf@len+1,w
  4624  012F  1903               	btfsc	3,2
  4625  0130  286D               	goto	l2579
  4626  0131  291A               	goto	l2499
  4627  0132                     l2505:	
  4628                           ;doprnt.c: 802: default:
  4629                           
  4630                           ;doprnt.c: 774: continue;
  4631                           
  4632                           
  4633                           ;doprnt.c: 805: cp = (char *)&c;
  4634  0132  3041               	movlw	low printf@c
  4635  0133  00B7               	movwf	printf@cp
  4636  0134  3000               	movlw	high printf@c
  4637  0135  00B8               	movwf	printf@cp+1
  4638                           
  4639                           ;doprnt.c: 806: len = 1;
  4640  0136  3001               	movlw	1
  4641  0137  00BC               	movwf	printf@len
  4642  0138  3000               	movlw	0
  4643  0139  00BD               	movwf	printf@len+1
  4644                           
  4645                           ;doprnt.c: 807: goto dostring;
  4646  013A  28FC               	goto	l2489
  4647  013B                     l395:	
  4648                           ;doprnt.c: 817: case 'u':
  4649                           
  4650                           
  4651                           ;doprnt.c: 818: flag |= 0x40;
  4652  013B  173E               	bsf	printf@flag,6
  4653                           
  4654                           ;doprnt.c: 822: }
  4655                           
  4656                           ;doprnt.c: 819: break;
  4657  013C  295B               	goto	l379
  4658  013D                     l2511:	
  4659  013D  0020               	movlb	0	; select bank0
  4660  013E  082F               	movf	printf@f+1,w
  4661  013F  00B3               	movwf	??_printf+1
  4662  0140  082E               	movf	printf@f,w
  4663  0141  00B2               	movwf	??_printf
  4664  0142  0AAE               	incf	printf@f,f
  4665  0143  1903               	skipnz
  4666  0144  0AAF               	incf	printf@f+1,f
  4667  0145  0832               	movf	??_printf,w
  4668  0146  0084               	movwf	4
  4669  0147  0833               	movf	??_printf+1,w
  4670  0148  0085               	movwf	5
  4671  0149  0800               	movf	0,w	;code access
  4672  014A  00C1               	movwf	printf@c
  4673                           
  4674                           ; Switch size 1, requested type "space"
  4675                           ; Number of cases is 5, Range of values is 0 to 117
  4676                           ; switch strategies available:
  4677                           ; Name         Instructions Cycles
  4678                           ; simple_byte           16     9 (average)
  4679                           ; direct_byte          242     6 (fixed)
  4680                           ; jumptable            260     6 (fixed)
  4681                           ;	Chosen strategy is simple_byte
  4682  014B  3A00               	xorlw	0	; case 0
  4683  014C  1903               	skipnz
  4684  014D  2A3C               	goto	l419
  4685  014E  3A64               	xorlw	100	; case 100
  4686  014F  1903               	skipnz
  4687  0150  295B               	goto	l379
  4688  0151  3A0D               	xorlw	13	; case 105
  4689  0152  1903               	skipnz
  4690  0153  295B               	goto	l379
  4691  0154  3A1A               	xorlw	26	; case 115
  4692  0155  1903               	skipnz
  4693  0156  28D8               	goto	l2475
  4694  0157  3A06               	xorlw	6	; case 117
  4695  0158  1903               	skipnz
  4696  0159  293B               	goto	l395
  4697  015A  2932               	goto	l2505
  4698  015B                     l379:	
  4699                           
  4700                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  4701  015B  0020               	movlb	0	; select bank0
  4702  015C  1B3E               	btfsc	printf@flag,6
  4703  015D  2975               	goto	l2523
  4704                           
  4705                           ;doprnt.c: 1253: {
  4706                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4707  015E  0839               	movf	printf@ap,w
  4708  015F  0086               	movwf	6
  4709  0160  0187               	clrf	7
  4710  0161  3F40               	moviw [0]fsr1
  4711  0162  00BA               	movwf	printf@val
  4712  0163  3F41               	moviw [1]fsr1
  4713  0164  00BB               	movwf	printf@val+1
  4714  0165  3002               	movlw	2
  4715  0166  00B2               	movwf	??_printf
  4716  0167  0832               	movf	??_printf,w
  4717  0168  07B9               	addwf	printf@ap,f
  4718                           
  4719                           ;doprnt.c: 1261: if((int)val < 0) {
  4720  0169  1FBB               	btfss	printf@val+1,7
  4721  016A  2980               	goto	l2527
  4722                           
  4723                           ;doprnt.c: 1262: flag |= 0x03;
  4724  016B  3003               	movlw	3
  4725  016C  00B2               	movwf	??_printf
  4726  016D  0832               	movf	??_printf,w
  4727  016E  04BE               	iorwf	printf@flag,f
  4728                           
  4729                           ;doprnt.c: 1263: val = -val;
  4730  016F  09BA               	comf	printf@val,f
  4731  0170  09BB               	comf	printf@val+1,f
  4732  0171  0ABA               	incf	printf@val,f
  4733  0172  1903               	skipnz
  4734  0173  0ABB               	incf	printf@val+1,f
  4735                           
  4736                           ;doprnt.c: 1264: }
  4737                           ;doprnt.c: 1266: }
  4738  0174  2980               	goto	l2527
  4739  0175                     l2523:	
  4740                           
  4741                           ;doprnt.c: 1268: else
  4742                           ;doprnt.c: 1273: {
  4743                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4744  0175  0839               	movf	printf@ap,w
  4745  0176  0086               	movwf	6
  4746  0177  0187               	clrf	7
  4747  0178  3F40               	moviw [0]fsr1
  4748  0179  00BA               	movwf	printf@val
  4749  017A  3F41               	moviw [1]fsr1
  4750  017B  00BB               	movwf	printf@val+1
  4751  017C  3002               	movlw	2
  4752  017D  00B2               	movwf	??_printf
  4753  017E  0832               	movf	??_printf,w
  4754  017F  07B9               	addwf	printf@ap,f
  4755  0180                     l2527:	
  4756                           
  4757                           ;doprnt.c: 1287: }
  4758                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4759  0180  01C1               	clrf	printf@c
  4760  0181  0AC1               	incf	printf@c,f
  4761  0182  3005               	movlw	5
  4762  0183  0641               	xorwf	printf@c,w
  4763  0184  1903               	btfsc	3,2
  4764  0185  29A5               	goto	l2539
  4765  0186                     l2533:	
  4766                           
  4767                           ;doprnt.c: 1306: if(val < dpowers[c])
  4768  0186  0841               	movf	printf@c,w
  4769  0187  00B2               	movwf	??_printf
  4770  0188  01B3               	clrf	??_printf+1
  4771  0189  35B2               	lslf	??_printf,f
  4772  018A  0DB3               	rlf	??_printf+1,f
  4773  018B  30C5               	movlw	low (_dpowers| (0+32768))
  4774  018C  0732               	addwf	??_printf,w
  4775  018D  0084               	movwf	4
  4776  018E  3083               	movlw	high (_dpowers| (0+32768))
  4777  018F  3D33               	addwfc	??_printf+1,w
  4778  0190  0085               	movwf	5
  4779  0191  3F00               	moviw [0]fsr0
  4780  0192  00B4               	movwf	??_printf+2
  4781  0193  3F01               	moviw [1]fsr0
  4782  0194  00B5               	movwf	??_printf+3
  4783  0195  0835               	movf	??_printf+3,w
  4784  0196  023B               	subwf	printf@val+1,w
  4785  0197  1D03               	skipz
  4786  0198  299B               	goto	u1625
  4787  0199  0834               	movf	??_printf+2,w
  4788  019A  023A               	subwf	printf@val,w
  4789  019B                     u1625:	
  4790  019B  1C03               	btfss	3,0
  4791  019C  29A5               	goto	l2539
  4792                           
  4793                           ;doprnt.c: 1307: break;
  4794  019D  3001               	movlw	1
  4795  019E  00B2               	movwf	??_printf
  4796  019F  0832               	movf	??_printf,w
  4797  01A0  07C1               	addwf	printf@c,f
  4798  01A1  3005               	movlw	5
  4799  01A2  0641               	xorwf	printf@c,w
  4800  01A3  1D03               	btfss	3,2
  4801  01A4  2986               	goto	l2533
  4802  01A5                     l2539:	
  4803                           
  4804                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4805  01A5  083F               	movf	printf@width,w
  4806  01A6  0440               	iorwf	printf@width+1,w
  4807  01A7  1903               	btfsc	3,2
  4808  01A8  29B1               	goto	l402
  4809  01A9  083E               	movf	printf@flag,w
  4810  01AA  3903               	andlw	3
  4811  01AB  1903               	btfsc	3,2
  4812  01AC  29B1               	goto	l402
  4813                           
  4814                           ;doprnt.c: 1346: width--;
  4815  01AD  30FF               	movlw	255
  4816  01AE  07BF               	addwf	printf@width,f
  4817  01AF  30FF               	movlw	255
  4818  01B0  3DC0               	addwfc	printf@width+1,f
  4819  01B1                     l402:	
  4820                           
  4821                           ;doprnt.c: 1381: if(width > c)
  4822  01B1  0841               	movf	printf@c,w
  4823  01B2  00B2               	movwf	??_printf
  4824  01B3  01B3               	clrf	??_printf+1
  4825  01B4  1BB2               	btfsc	??_printf,7
  4826  01B5  03B3               	decf	??_printf+1,f
  4827  01B6  0833               	movf	??_printf+1,w
  4828  01B7  3A80               	xorlw	128
  4829  01B8  00B4               	movwf	??_printf+2
  4830  01B9  0840               	movf	printf@width+1,w
  4831  01BA  3A80               	xorlw	128
  4832  01BB  0234               	subwf	??_printf+2,w
  4833  01BC  1D03               	skipz
  4834  01BD  29C0               	goto	u1665
  4835  01BE  083F               	movf	printf@width,w
  4836  01BF  0232               	subwf	??_printf,w
  4837  01C0                     u1665:	
  4838  01C0  1803               	skipnc
  4839  01C1  29CD               	goto	l2547
  4840                           
  4841                           ;doprnt.c: 1382: width -= c;
  4842  01C2  0020               	movlb	0	; select bank0
  4843  01C3  0841               	movf	printf@c,w
  4844  01C4  00B2               	movwf	??_printf
  4845  01C5  01B3               	clrf	??_printf+1
  4846  01C6  1BB2               	btfsc	??_printf,7
  4847  01C7  03B3               	decf	??_printf+1,f
  4848  01C8  0832               	movf	??_printf,w
  4849  01C9  02BF               	subwf	printf@width,f
  4850  01CA  0833               	movf	??_printf+1,w
  4851  01CB  3BC0               	subwfb	printf@width+1,f
  4852  01CC  29D0               	goto	l2549
  4853  01CD                     l2547:	
  4854                           
  4855                           ;doprnt.c: 1383: else
  4856                           ;doprnt.c: 1384: width = 0;
  4857  01CD  0020               	movlb	0	; select bank0
  4858  01CE  01BF               	clrf	printf@width
  4859  01CF  01C0               	clrf	printf@width+1
  4860  01D0                     l2549:	
  4861                           
  4862                           ;doprnt.c: 1387: if(flag & 0x04) {
  4863  01D0  1D3E               	btfss	printf@flag,2
  4864  01D1  29E9               	goto	l2561
  4865                           
  4866                           ;doprnt.c: 1392: if(flag & 0x03)
  4867  01D2  083E               	movf	printf@flag,w
  4868  01D3  3903               	andlw	3
  4869  01D4  1903               	btfsc	3,2
  4870  01D5  29DA               	goto	l2555
  4871                           
  4872                           ;doprnt.c: 1393: (putch('-') );
  4873  01D6  302D               	movlw	45
  4874  01D7  318D  2521  3180   	fcall	_putch
  4875  01DA                     l2555:	
  4876                           
  4877                           ;doprnt.c: 1415: if(width)
  4878  01DA  0020               	movlb	0	; select bank0
  4879  01DB                     L4:	
  4880  01DB  083F               	movf	printf@width,w
  4881  01DC  0440               	iorwf	printf@width+1,w
  4882  01DD  1903               	btfsc	3,2
  4883  01DE  2A02               	goto	l2571
  4884                           
  4885                           ;doprnt.c: 1417: (putch('0') );
  4886                           
  4887                           ;doprnt.c: 1416: do
  4888  01DF  3030               	movlw	48
  4889  01E0  318D  2521  3180   	fcall	_putch
  4890                           
  4891                           ;doprnt.c: 1418: while(--width);
  4892  01E3  30FF               	movlw	255
  4893  01E4  0020               	movlb	0	; select bank0
  4894  01E5  07BF               	addwf	printf@width,f
  4895  01E6  30FF               	movlw	255
  4896  01E7  3DC0               	addwfc	printf@width+1,f
  4897  01E8  29DB               	goto	L4
  4898  01E9                     l2561:	
  4899                           ;doprnt.c: 1420: } else
  4900                           
  4901                           
  4902                           ;doprnt.c: 1422: {
  4903                           ;doprnt.c: 1424: if(width
  4904                           ;doprnt.c: 1428: )
  4905  01E9  083F               	movf	printf@width,w
  4906  01EA  0440               	iorwf	printf@width+1,w
  4907  01EB  1903               	btfsc	3,2
  4908  01EC  29FA               	goto	l2567
  4909  01ED                     l2563:	
  4910                           ;doprnt.c: 1429: do
  4911                           
  4912                           
  4913                           ;doprnt.c: 1430: (putch(' ') );
  4914  01ED  3020               	movlw	32
  4915  01EE  318D  2521  3180   	fcall	_putch
  4916                           
  4917                           ;doprnt.c: 1431: while(--width);
  4918  01F1  30FF               	movlw	255
  4919  01F2  0020               	movlb	0	; select bank0
  4920  01F3  07BF               	addwf	printf@width,f
  4921  01F4  30FF               	movlw	255
  4922  01F5  3DC0               	addwfc	printf@width+1,f
  4923  01F6  083F               	movf	printf@width,w
  4924  01F7  0440               	iorwf	printf@width+1,w
  4925  01F8  1D03               	btfss	3,2
  4926  01F9  29ED               	goto	l2563
  4927  01FA                     l2567:	
  4928                           
  4929                           ;doprnt.c: 1438: if(flag & 0x03)
  4930  01FA  083E               	movf	printf@flag,w
  4931  01FB  3903               	andlw	3
  4932  01FC  1903               	btfsc	3,2
  4933  01FD  2A02               	goto	l2571
  4934                           
  4935                           ;doprnt.c: 1439: (putch('-') );
  4936  01FE  302D               	movlw	45
  4937  01FF  318D  2521  3180   	fcall	_putch
  4938  0202                     l2571:	
  4939                           
  4940                           ;doprnt.c: 1469: }
  4941                           ;doprnt.c: 1472: prec = c;
  4942  0202  0020               	movlb	0	; select bank0
  4943  0203  0841               	movf	printf@c,w
  4944  0204  00B2               	movwf	??_printf
  4945  0205  0832               	movf	??_printf,w
  4946  0206  00B6               	movwf	printf@prec
  4947  0207                     l2577:	
  4948                           ;doprnt.c: 1474: while(prec--) {
  4949                           
  4950  0207  30FF               	movlw	255
  4951  0208  0020               	movlb	0	; select bank0
  4952  0209  00B2               	movwf	??_printf
  4953  020A  0832               	movf	??_printf,w
  4954  020B  07B6               	addwf	printf@prec,f
  4955  020C  0A36               	incf	printf@prec,w
  4956  020D  1903               	btfsc	3,2
  4957  020E  286D               	goto	l2579
  4958                           
  4959                           ;doprnt.c: 1478: {
  4960                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4961  020F  300A               	movlw	10
  4962  0210  00A8               	movwf	___lwmod@divisor
  4963  0211  3000               	movlw	0
  4964  0212  00A9               	movwf	___lwmod@divisor+1
  4965  0213  0836               	movf	printf@prec,w
  4966  0214  00B2               	movwf	??_printf
  4967  0215  01B3               	clrf	??_printf+1
  4968  0216  35B2               	lslf	??_printf,f
  4969  0217  0DB3               	rlf	??_printf+1,f
  4970  0218  30C5               	movlw	low (_dpowers| (0+32768))
  4971  0219  0732               	addwf	??_printf,w
  4972  021A  0084               	movwf	4
  4973  021B  3083               	movlw	high (_dpowers| (0+32768))
  4974  021C  3D33               	addwfc	??_printf+1,w
  4975  021D  0085               	movwf	5
  4976  021E  3F00               	moviw [0]fsr0
  4977  021F  00A0               	movwf	___lwdiv@divisor
  4978  0220  3F01               	moviw [1]fsr0
  4979  0221  00A1               	movwf	___lwdiv@divisor+1
  4980  0222  083B               	movf	printf@val+1,w
  4981  0223  00A3               	movwf	___lwdiv@dividend+1
  4982  0224  083A               	movf	printf@val,w
  4983  0225  00A2               	movwf	___lwdiv@dividend
  4984  0226  318F  27CB  3180   	fcall	___lwdiv
  4985  0229  0020               	movlb	0	; select bank0
  4986  022A  0821               	movf	?___lwdiv+1,w
  4987  022B  00AB               	movwf	___lwmod@dividend+1
  4988  022C  0820               	movf	?___lwdiv,w
  4989  022D  00AA               	movwf	___lwmod@dividend
  4990  022E  3187  27CC  3180   	fcall	___lwmod
  4991  0231  0020               	movlb	0	; select bank0
  4992  0232  0828               	movf	?___lwmod,w
  4993  0233  3E30               	addlw	48
  4994  0234  00B4               	movwf	??_printf+2
  4995  0235  0834               	movf	??_printf+2,w
  4996  0236  00C1               	movwf	printf@c
  4997                           
  4998                           ;doprnt.c: 1523: }
  4999                           ;doprnt.c: 1524: (putch(c) );
  5000  0237  0841               	movf	printf@c,w
  5001  0238  318D  2521  3180   	fcall	_putch
  5002  023B  2A07               	goto	l2577
  5003  023C                     l419:	
  5004                           ;doprnt.c: 1540: return 0;
  5005                           ;	Return value of _printf is never used
  5006                           
  5007                           ;doprnt.c: 1525: }
  5008                           ;doprnt.c: 1533: }
  5009                           ;doprnt.c: 1535: alldone:
  5010                           
  5011  023C  0008               	return
  5012  023D                     __end_of_printf:	
  5013                           
  5014                           	psect	text12
  5015  0D21                     __ptext12:	
  5016 ;; *************** function _putch *****************
  5017 ;; Defined at:
  5018 ;;		line 160 in file "mcc_generated_files/eusart.c"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;  txData          1    wreg     unsigned char 
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;  txData          1    2[BANK0 ] unsigned char 
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  1    wreg      void 
  5025 ;; Registers used:
  5026 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5035 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5036 ;;Total ram usage:        1 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; Hardware stack levels required when called:    6
  5039 ;; This function calls:
  5040 ;;		_EUSART_Write
  5041 ;; This function is called by:
  5042 ;;		_printf
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046                           
  5047                           ;psect for function _putch
  5048  0D21                     _putch:	
  5049                           
  5050                           ;incstack = 0
  5051                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5052                           ;putch@txData stored from wreg
  5053  0D21  0020               	movlb	0	; select bank0
  5054  0D22  00A2               	movwf	putch@txData
  5055                           
  5056                           ;eusart.c: 162: EUSART_Write(txData);
  5057  0D23  0822               	movf	putch@txData,w
  5058  0D24  318F  2731         	fcall	_EUSART_Write
  5059  0D26  0008               	return
  5060  0D27                     __end_of_putch:	
  5061                           
  5062                           	psect	text13
  5063  0F31                     __ptext13:	
  5064 ;; *************** function _EUSART_Write *****************
  5065 ;; Defined at:
  5066 ;;		line 132 in file "mcc_generated_files/eusart.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;  txData          1    wreg     unsigned char 
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;  txData          1    1[BANK0 ] unsigned char 
  5071 ;; Return value:  Size  Location     Type
  5072 ;;                  1    wreg      void 
  5073 ;; Registers used:
  5074 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5082 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;Total ram usage:        2 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    5
  5087 ;; This function calls:
  5088 ;;		Nothing
  5089 ;; This function is called by:
  5090 ;;		_putch
  5091 ;; This function uses a non-reentrant model
  5092 ;;
  5093                           
  5094                           
  5095                           ;psect for function _EUSART_Write
  5096  0F31                     _EUSART_Write:	
  5097                           
  5098                           ;incstack = 0
  5099                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  5100                           ;EUSART_Write@txData stored from wreg
  5101  0F31  0020               	movlb	0	; select bank0
  5102  0F32  00A1               	movwf	EUSART_Write@txData
  5103  0F33                     l2357:	
  5104                           ;eusart.c: 135: {
  5105                           
  5106                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
  5107                           
  5108  0F33  0864               	movf	_eusartTxBufferRemaining,w	;volatile
  5109  0F34  1903               	btfsc	3,2
  5110  0F35  2F33               	goto	l2357
  5111                           
  5112                           ;eusart.c: 136: }
  5113                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
  5114  0F36  0021               	movlb	1	; select bank1
  5115  0F37  1A11               	btfsc	17,4	;volatile
  5116  0F38  2F3E               	goto	l469
  5117                           
  5118                           ;eusart.c: 139: {
  5119                           ;eusart.c: 140: TXREG = txData;
  5120  0F39  0020               	movlb	0	; select bank0
  5121  0F3A  0821               	movf	EUSART_Write@txData,w
  5122  0F3B  0023               	movlb	3	; select bank3
  5123  0F3C  009A               	movwf	26	;volatile
  5124                           
  5125                           ;eusart.c: 141: }
  5126  0F3D  2F52               	goto	l2371
  5127  0F3E                     l469:	
  5128                           
  5129                           ;eusart.c: 142: else
  5130                           ;eusart.c: 143: {
  5131                           ;eusart.c: 144: PIE1bits.TXIE = 0;
  5132  0F3E  1211               	bcf	17,4	;volatile
  5133                           
  5134                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
  5135  0F3F  0020               	movlb	0	; select bank0
  5136  0F40  0821               	movf	EUSART_Write@txData,w
  5137  0F41  00A0               	movwf	??_EUSART_Write
  5138  0F42  087C               	movf	_eusartTxHead,w
  5139  0F43  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  5140  0F44  0086               	movwf	6
  5141  0F45  0187               	clrf	7
  5142  0F46  0820               	movf	??_EUSART_Write,w
  5143  0F47  0081               	movwf	1
  5144  0F48  3001               	movlw	1
  5145  0F49  00A0               	movwf	??_EUSART_Write
  5146  0F4A  0820               	movf	??_EUSART_Write,w
  5147  0F4B  07FC               	addwf	_eusartTxHead,f	;volatile
  5148                           
  5149                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  5150  0F4C  3008               	movlw	8
  5151  0F4D  027C               	subwf	_eusartTxHead,w	;volatile
  5152  0F4E  1803               	btfsc	3,0
  5153                           
  5154                           ;eusart.c: 147: {
  5155                           ;eusart.c: 148: eusartTxHead = 0;
  5156  0F4F  01FC               	clrf	_eusartTxHead	;volatile
  5157                           
  5158                           ;eusart.c: 149: }
  5159                           ;eusart.c: 150: eusartTxBufferRemaining--;
  5160  0F50  3001               	movlw	1
  5161  0F51  02E4               	subwf	_eusartTxBufferRemaining,f	;volatile
  5162  0F52                     l2371:	
  5163                           
  5164                           ;eusart.c: 151: }
  5165                           ;eusart.c: 152: PIE1bits.TXIE = 1;
  5166  0F52  0021               	movlb	1	; select bank1
  5167  0F53  1611               	bsf	17,4	;volatile
  5168  0F54  0008               	return
  5169  0F55                     __end_of_EUSART_Write:	
  5170                           
  5171                           	psect	text14
  5172  07CC                     __ptext14:	
  5173 ;; *************** function ___lwmod *****************
  5174 ;; Defined at:
  5175 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  5176 ;; Parameters:    Size  Location     Type
  5177 ;;  divisor         2    8[BANK0 ] unsigned int 
  5178 ;;  dividend        2   10[BANK0 ] unsigned int 
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;  counter         1   13[BANK0 ] unsigned char 
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  2    8[BANK0 ] unsigned int 
  5183 ;; Registers used:
  5184 ;;		wreg, status,2, status,0
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/0
  5187 ;;		On exit  : 0/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5190 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5191 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5192 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5193 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5194 ;;Total ram usage:        6 bytes
  5195 ;; Hardware stack levels used:    1
  5196 ;; Hardware stack levels required when called:    5
  5197 ;; This function calls:
  5198 ;;		Nothing
  5199 ;; This function is called by:
  5200 ;;		_printf
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204                           
  5205                           ;psect for function ___lwmod
  5206  07CC                     ___lwmod:	
  5207                           
  5208                           ;incstack = 0
  5209                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  5210  07CC  0020               	movlb	0	; select bank0
  5211  07CD  0828               	movf	___lwmod@divisor,w
  5212  07CE  0429               	iorwf	___lwmod@divisor+1,w
  5213  07CF  1903               	btfsc	3,2
  5214  07D0  2FF4               	goto	l2445
  5215  07D1  01AD               	clrf	___lwmod@counter
  5216  07D2  0AAD               	incf	___lwmod@counter,f
  5217  07D3                     l2435:	
  5218  07D3  1BA9               	btfsc	___lwmod@divisor+1,7
  5219  07D4  2FDF               	goto	l2437
  5220  07D5  3001               	movlw	1
  5221  07D6                     u1465:	
  5222  07D6  35A8               	lslf	___lwmod@divisor,f
  5223  07D7  0DA9               	rlf	___lwmod@divisor+1,f
  5224  07D8  0B89               	decfsz	9,f
  5225  07D9  2FD6               	goto	u1465
  5226  07DA  3001               	movlw	1
  5227  07DB  00AC               	movwf	??___lwmod
  5228  07DC  082C               	movf	??___lwmod,w
  5229  07DD  07AD               	addwf	___lwmod@counter,f
  5230  07DE  2FD3               	goto	l2435
  5231  07DF                     l2437:	
  5232  07DF  0829               	movf	___lwmod@divisor+1,w
  5233  07E0  022B               	subwf	___lwmod@dividend+1,w
  5234  07E1  1D03               	skipz
  5235  07E2  2FE5               	goto	u1485
  5236  07E3  0828               	movf	___lwmod@divisor,w
  5237  07E4  022A               	subwf	___lwmod@dividend,w
  5238  07E5                     u1485:	
  5239  07E5  1C03               	skipc
  5240  07E6  2FEB               	goto	l2441
  5241  07E7  0828               	movf	___lwmod@divisor,w
  5242  07E8  02AA               	subwf	___lwmod@dividend,f
  5243  07E9  0829               	movf	___lwmod@divisor+1,w
  5244  07EA  3BAB               	subwfb	___lwmod@dividend+1,f
  5245  07EB                     l2441:	
  5246  07EB  3001               	movlw	1
  5247  07EC                     u1495:	
  5248  07EC  36A9               	lsrf	___lwmod@divisor+1,f
  5249  07ED  0CA8               	rrf	___lwmod@divisor,f
  5250  07EE  0B89               	decfsz	9,f
  5251  07EF  2FEC               	goto	u1495
  5252  07F0  3001               	movlw	1
  5253  07F1  02AD               	subwf	___lwmod@counter,f
  5254  07F2  1D03               	btfss	3,2
  5255  07F3  2FDF               	goto	l2437
  5256  07F4                     l2445:	
  5257  07F4  082B               	movf	___lwmod@dividend+1,w
  5258  07F5  00A9               	movwf	?___lwmod+1
  5259  07F6  082A               	movf	___lwmod@dividend,w
  5260  07F7  00A8               	movwf	?___lwmod
  5261  07F8  0008               	return
  5262  07F9                     __end_of___lwmod:	
  5263                           
  5264                           	psect	text15
  5265  0FCB                     __ptext15:	
  5266 ;; *************** function ___lwdiv *****************
  5267 ;; Defined at:
  5268 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5269 ;; Parameters:    Size  Location     Type
  5270 ;;  divisor         2    0[BANK0 ] unsigned int 
  5271 ;;  dividend        2    2[BANK0 ] unsigned int 
  5272 ;; Auto vars:     Size  Location     Type
  5273 ;;  quotient        2    5[BANK0 ] unsigned int 
  5274 ;;  counter         1    7[BANK0 ] unsigned char 
  5275 ;; Return value:  Size  Location     Type
  5276 ;;                  2    0[BANK0 ] unsigned int 
  5277 ;; Registers used:
  5278 ;;		wreg, status,2, status,0
  5279 ;; Tracked objects:
  5280 ;;		On entry : 0/0
  5281 ;;		On exit  : 0/0
  5282 ;;		Unchanged: 0/0
  5283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5284 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5285 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5286 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5287 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5288 ;;Total ram usage:        8 bytes
  5289 ;; Hardware stack levels used:    1
  5290 ;; Hardware stack levels required when called:    5
  5291 ;; This function calls:
  5292 ;;		Nothing
  5293 ;; This function is called by:
  5294 ;;		_printf
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           
  5299                           ;psect for function ___lwdiv
  5300  0FCB                     ___lwdiv:	
  5301                           
  5302                           ;incstack = 0
  5303                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5304  0FCB  0020               	movlb	0	; select bank0
  5305  0FCC  01A5               	clrf	___lwdiv@quotient
  5306  0FCD  01A6               	clrf	___lwdiv@quotient+1
  5307  0FCE  0820               	movf	___lwdiv@divisor,w
  5308  0FCF  0421               	iorwf	___lwdiv@divisor+1,w
  5309  0FD0  1903               	btfsc	3,2
  5310  0FD1  2FFB               	goto	l2423
  5311  0FD2  01A7               	clrf	___lwdiv@counter
  5312  0FD3  0AA7               	incf	___lwdiv@counter,f
  5313  0FD4                     l2411:	
  5314  0FD4  1BA1               	btfsc	___lwdiv@divisor+1,7
  5315  0FD5  2FE0               	goto	l2413
  5316  0FD6  3001               	movlw	1
  5317  0FD7                     u1395:	
  5318  0FD7  35A0               	lslf	___lwdiv@divisor,f
  5319  0FD8  0DA1               	rlf	___lwdiv@divisor+1,f
  5320  0FD9  0B89               	decfsz	9,f
  5321  0FDA  2FD7               	goto	u1395
  5322  0FDB  3001               	movlw	1
  5323  0FDC  00A4               	movwf	??___lwdiv
  5324  0FDD  0824               	movf	??___lwdiv,w
  5325  0FDE  07A7               	addwf	___lwdiv@counter,f
  5326  0FDF  2FD4               	goto	l2411
  5327  0FE0                     l2413:	
  5328  0FE0  3001               	movlw	1
  5329  0FE1                     u1415:	
  5330  0FE1  35A5               	lslf	___lwdiv@quotient,f
  5331  0FE2  0DA6               	rlf	___lwdiv@quotient+1,f
  5332  0FE3  0B89               	decfsz	9,f
  5333  0FE4  2FE1               	goto	u1415
  5334  0FE5  0821               	movf	___lwdiv@divisor+1,w
  5335  0FE6  0223               	subwf	___lwdiv@dividend+1,w
  5336  0FE7  1D03               	skipz
  5337  0FE8  2FEB               	goto	u1425
  5338  0FE9  0820               	movf	___lwdiv@divisor,w
  5339  0FEA  0222               	subwf	___lwdiv@dividend,w
  5340  0FEB                     u1425:	
  5341  0FEB  1C03               	skipc
  5342  0FEC  2FF2               	goto	l2419
  5343  0FED  0820               	movf	___lwdiv@divisor,w
  5344  0FEE  02A2               	subwf	___lwdiv@dividend,f
  5345  0FEF  0821               	movf	___lwdiv@divisor+1,w
  5346  0FF0  3BA3               	subwfb	___lwdiv@dividend+1,f
  5347  0FF1  1425               	bsf	___lwdiv@quotient,0
  5348  0FF2                     l2419:	
  5349  0FF2  3001               	movlw	1
  5350  0FF3                     u1435:	
  5351  0FF3  36A1               	lsrf	___lwdiv@divisor+1,f
  5352  0FF4  0CA0               	rrf	___lwdiv@divisor,f
  5353  0FF5  0B89               	decfsz	9,f
  5354  0FF6  2FF3               	goto	u1435
  5355  0FF7  3001               	movlw	1
  5356  0FF8  02A7               	subwf	___lwdiv@counter,f
  5357  0FF9  1D03               	btfss	3,2
  5358  0FFA  2FE0               	goto	l2413
  5359  0FFB                     l2423:	
  5360  0FFB  0826               	movf	___lwdiv@quotient+1,w
  5361  0FFC  00A1               	movwf	?___lwdiv+1
  5362  0FFD  0825               	movf	___lwdiv@quotient,w
  5363  0FFE  00A0               	movwf	?___lwdiv
  5364  0FFF  0008               	return
  5365  1000                     __end_of___lwdiv:	
  5366                           
  5367                           	psect	text16
  5368  0ECD                     __ptext16:	
  5369 ;; *************** function _PROTOCOL_I2C_Set_TLV *****************
  5370 ;; Defined at:
  5371 ;;		line 213 in file "protocol.c"
  5372 ;; Parameters:    Size  Location     Type
  5373 ;;  type            1    wreg     unsigned char 
  5374 ;;  length          1    0[BANK0 ] unsigned char 
  5375 ;;  pbuffer         1    1[BANK0 ] PTR unsigned char 
  5376 ;;		 -> PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), position(4), 
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;  type            1    3[BANK0 ] unsigned char 
  5379 ;;  status          1    4[BANK0 ] enum E3128
  5380 ;; Return value:  Size  Location     Type
  5381 ;;                  1    wreg      void 
  5382 ;; Registers used:
  5383 ;;		wreg, status,2, status,0
  5384 ;; Tracked objects:
  5385 ;;		On entry : 0/0
  5386 ;;		On exit  : 0/0
  5387 ;;		Unchanged: 0/0
  5388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5389 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5390 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5391 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5392 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5393 ;;Total ram usage:        5 bytes
  5394 ;; Hardware stack levels used:    1
  5395 ;; Hardware stack levels required when called:    5
  5396 ;; This function calls:
  5397 ;;		Nothing
  5398 ;; This function is called by:
  5399 ;;		_PROTOCOL_I2C_Send_uint8_t
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           
  5404                           ;psect for function _PROTOCOL_I2C_Set_TLV
  5405  0ECD                     _PROTOCOL_I2C_Set_TLV:	
  5406                           
  5407                           ;incstack = 0
  5408                           ; Regs used in _PROTOCOL_I2C_Set_TLV: [wreg+status,2+status,0]
  5409                           ;PROTOCOL_I2C_Set_TLV@type stored from wreg
  5410  0ECD  0020               	movlb	0	; select bank0
  5411  0ECE  00A3               	movwf	PROTOCOL_I2C_Set_TLV@type
  5412                           
  5413                           ;protocol.c: 214: READBUF_STATUS status = readbuf.status;
  5414  0ECF  0021               	movlb	1	; select bank1
  5415  0ED0  085C               	movf	(_readbuf^(0+128)+3),w
  5416  0ED1  0020               	movlb	0	; select bank0
  5417  0ED2  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5418  0ED3  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5419  0ED4  00A4               	movwf	PROTOCOL_I2C_Set_TLV@status
  5420                           
  5421                           ;protocol.c: 215: if (status == COMPLETE) {
  5422  0ED5  3003               	movlw	3
  5423  0ED6  0624               	xorwf	PROTOCOL_I2C_Set_TLV@status,w
  5424  0ED7  1D03               	btfss	3,2
  5425  0ED8  0008               	return
  5426                           
  5427                           ;protocol.c: 216: readbuf.type = type;
  5428  0ED9  0823               	movf	PROTOCOL_I2C_Set_TLV@type,w
  5429  0EDA  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5430  0EDB  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5431  0EDC  0021               	movlb	1	; select bank1
  5432  0EDD  00D9               	movwf	_readbuf^(0+128)
  5433                           
  5434                           ;protocol.c: 217: readbuf.length = length;
  5435  0EDE  0020               	movlb	0	; select bank0
  5436  0EDF  0820               	movf	PROTOCOL_I2C_Set_TLV@length,w
  5437  0EE0  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5438  0EE1  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5439  0EE2  0021               	movlb	1	; select bank1
  5440  0EE3  00DA               	movwf	(_readbuf^(0+128)+1)
  5441                           
  5442                           ;protocol.c: 218: readbuf.pbuffer = pbuffer;
  5443  0EE4  0020               	movlb	0	; select bank0
  5444  0EE5  0821               	movf	PROTOCOL_I2C_Set_TLV@pbuffer,w
  5445  0EE6  00A2               	movwf	??_PROTOCOL_I2C_Set_TLV
  5446  0EE7  0822               	movf	??_PROTOCOL_I2C_Set_TLV,w
  5447  0EE8  0021               	movlb	1	; select bank1
  5448  0EE9  00DB               	movwf	(low ((_readbuf| 0+2)))^(0+128)
  5449                           
  5450                           ;protocol.c: 219: readbuf.buf_cnt = 0;
  5451  0EEA  01DD               	clrf	(_readbuf^(0+128)+4)
  5452                           
  5453                           ;protocol.c: 220: readbuf.status = TLV_SET;
  5454  0EEB  01DC               	clrf	(_readbuf^(0+128)+3)
  5455  0EEC  0008               	return
  5456  0EED                     __end_of_PROTOCOL_I2C_Set_TLV:	
  5457                           
  5458                           	psect	text17
  5459  0CFC                     __ptext17:	
  5460 ;; *************** function _ADC_StartConversion *****************
  5461 ;; Defined at:
  5462 ;;		line 90 in file "mcc_generated_files/adc.c"
  5463 ;; Parameters:    Size  Location     Type
  5464 ;;		None
  5465 ;; Auto vars:     Size  Location     Type
  5466 ;;		None
  5467 ;; Return value:  Size  Location     Type
  5468 ;;                  1    wreg      void 
  5469 ;; Registers used:
  5470 ;;		None
  5471 ;; Tracked objects:
  5472 ;;		On entry : 0/0
  5473 ;;		On exit  : 0/0
  5474 ;;		Unchanged: 0/0
  5475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5480 ;;Total ram usage:        0 bytes
  5481 ;; Hardware stack levels used:    1
  5482 ;; Hardware stack levels required when called:    5
  5483 ;; This function calls:
  5484 ;;		Nothing
  5485 ;; This function is called by:
  5486 ;;		_loop_func
  5487 ;; This function uses a non-reentrant model
  5488 ;;
  5489                           
  5490                           
  5491                           ;psect for function _ADC_StartConversion
  5492  0CFC                     _ADC_StartConversion:	
  5493                           
  5494                           ;adc.c: 93: ADCON0bits.GO_nDONE = 1;
  5495                           
  5496                           ;incstack = 0
  5497                           ; Regs used in _ADC_StartConversion: []
  5498  0CFC  0021               	movlb	1	; select bank1
  5499  0CFD  149D               	bsf	29,1	;volatile
  5500  0CFE  0008               	return
  5501  0CFF                     __end_of_ADC_StartConversion:	
  5502                           
  5503                           	psect	text18
  5504  0DB9                     __ptext18:	
  5505 ;; *************** function _ADC_SelectChannel *****************
  5506 ;; Defined at:
  5507 ;;		line 82 in file "mcc_generated_files/adc.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;  channel         1    wreg     enum E2698
  5510 ;; Auto vars:     Size  Location     Type
  5511 ;;  channel         1    1[BANK0 ] enum E2698
  5512 ;; Return value:  Size  Location     Type
  5513 ;;                  1    wreg      void 
  5514 ;; Registers used:
  5515 ;;		wreg, status,2, status,0
  5516 ;; Tracked objects:
  5517 ;;		On entry : 0/0
  5518 ;;		On exit  : 0/0
  5519 ;;		Unchanged: 0/0
  5520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5524 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5525 ;;Total ram usage:        2 bytes
  5526 ;; Hardware stack levels used:    1
  5527 ;; Hardware stack levels required when called:    5
  5528 ;; This function calls:
  5529 ;;		Nothing
  5530 ;; This function is called by:
  5531 ;;		_loop_func
  5532 ;; This function uses a non-reentrant model
  5533 ;;
  5534                           
  5535                           
  5536                           ;psect for function _ADC_SelectChannel
  5537  0DB9                     _ADC_SelectChannel:	
  5538                           
  5539                           ;incstack = 0
  5540                           ; Regs used in _ADC_SelectChannel: [wreg+status,2+status,0]
  5541                           ;ADC_SelectChannel@channel stored from wreg
  5542  0DB9  0020               	movlb	0	; select bank0
  5543  0DBA  00A1               	movwf	ADC_SelectChannel@channel
  5544                           
  5545                           ;adc.c: 85: ADCON0bits.CHS = channel;
  5546  0DBB  0821               	movf	ADC_SelectChannel@channel,w
  5547  0DBC  00A0               	movwf	??_ADC_SelectChannel
  5548  0DBD  0DA0               	rlf	??_ADC_SelectChannel,f
  5549  0DBE  0DA0               	rlf	??_ADC_SelectChannel,f
  5550  0DBF  0021               	movlb	1	; select bank1
  5551  0DC0  081D               	movf	29,w	;volatile
  5552  0DC1  0020               	movlb	0	; select bank0
  5553  0DC2  0620               	xorwf	??_ADC_SelectChannel,w
  5554  0DC3  3983               	andlw	-125
  5555  0DC4  0620               	xorwf	??_ADC_SelectChannel,w
  5556  0DC5  0021               	movlb	1	; select bank1
  5557  0DC6  009D               	movwf	29	;volatile
  5558                           
  5559                           ;adc.c: 87: ADCON0bits.ADON = 1;
  5560  0DC7  141D               	bsf	29,0	;volatile
  5561  0DC8  0008               	return
  5562  0DC9                     __end_of_ADC_SelectChannel:	
  5563                           
  5564                           	psect	text19
  5565  07F9                     __ptext19:	
  5566 ;; *************** function _ADC_IsConversionDone *****************
  5567 ;; Defined at:
  5568 ;;		line 97 in file "mcc_generated_files/adc.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;		None
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;		None
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  1    wreg      unsigned char 
  5575 ;; Registers used:
  5576 ;;		wreg, status,0
  5577 ;; Tracked objects:
  5578 ;;		On entry : 0/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5586 ;;Total ram usage:        0 bytes
  5587 ;; Hardware stack levels used:    1
  5588 ;; Hardware stack levels required when called:    5
  5589 ;; This function calls:
  5590 ;;		Nothing
  5591 ;; This function is called by:
  5592 ;;		_loop_func
  5593 ;; This function uses a non-reentrant model
  5594 ;;
  5595                           
  5596                           
  5597                           ;psect for function _ADC_IsConversionDone
  5598  07F9                     _ADC_IsConversionDone:	
  5599                           
  5600                           ;adc.c: 100: return ((bool)(!ADCON0bits.GO_nDONE));
  5601                           
  5602                           ;incstack = 0
  5603                           ; Regs used in _ADC_IsConversionDone: [wreg+status,0]
  5604  07F9  1003               	clrc
  5605  07FA  0021               	movlb	1	; select bank1
  5606  07FB  1C9D               	btfss	29,1	;volatile
  5607  07FC  1403               	setc
  5608  07FD  3000               	movlw	0
  5609  07FE  3D09               	addwfc	9,w
  5610  07FF  0008               	return
  5611  0800                     __end_of_ADC_IsConversionDone:	
  5612                           
  5613                           	psect	text20
  5614  0D47                     __ptext20:	
  5615 ;; *************** function _ADC_GetConversionResult *****************
  5616 ;; Defined at:
  5617 ;;		line 103 in file "mcc_generated_files/adc.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;		None
  5620 ;; Auto vars:     Size  Location     Type
  5621 ;;		None
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  2    0[BANK0 ] unsigned int 
  5624 ;; Registers used:
  5625 ;;		wreg
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5631 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5634 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5635 ;;Total ram usage:        2 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; Hardware stack levels required when called:    5
  5638 ;; This function calls:
  5639 ;;		Nothing
  5640 ;; This function is called by:
  5641 ;;		_loop_func
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           
  5646                           ;psect for function _ADC_GetConversionResult
  5647  0D47                     _ADC_GetConversionResult:	
  5648                           
  5649                           ;adc.c: 106: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  5650                           
  5651                           ;incstack = 0
  5652                           ; Regs used in _ADC_GetConversionResult: [wreg]
  5653  0D47  0021               	movlb	1	; select bank1
  5654  0D48  081C               	movf	28,w	;volatile
  5655  0D49  0020               	movlb	0	; select bank0
  5656  0D4A  00A1               	movwf	?_ADC_GetConversionResult+1
  5657  0D4B  0021               	movlb	1	; select bank1
  5658  0D4C  081B               	movf	27,w	;volatile
  5659  0D4D  0020               	movlb	0	; select bank0
  5660  0D4E  00A0               	movwf	?_ADC_GetConversionResult
  5661  0D4F  0008               	return
  5662  0D50                     __end_of_ADC_GetConversionResult:	
  5663                           
  5664                           	psect	text21
  5665  060B                     __ptext21:	
  5666 ;; *************** function _atoi *****************
  5667 ;; Defined at:
  5668 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
  5669 ;; Parameters:    Size  Location     Type
  5670 ;;  s               1    wreg     PTR const unsigned char 
  5671 ;;		 -> buf(48), 
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;  s               1   13[BANK0 ] PTR const unsigned char 
  5674 ;;		 -> buf(48), 
  5675 ;;  a               2   11[BANK0 ] int 
  5676 ;;  sign            1   10[BANK0 ] unsigned char 
  5677 ;; Return value:  Size  Location     Type
  5678 ;;                  2    6[BANK0 ] int 
  5679 ;; Registers used:
  5680 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5681 ;; Tracked objects:
  5682 ;;		On entry : 0/0
  5683 ;;		On exit  : 0/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5686 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5687 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5688 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5689 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5690 ;;Total ram usage:        8 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; Hardware stack levels required when called:    6
  5693 ;; This function calls:
  5694 ;;		___wmul
  5695 ;;		_isdigit
  5696 ;; This function is called by:
  5697 ;;		_PROTOCOL_Loop
  5698 ;; This function uses a non-reentrant model
  5699 ;;
  5700                           
  5701                           
  5702                           ;psect for function _atoi
  5703  060B                     _atoi:	
  5704                           
  5705                           ;incstack = 0
  5706                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5707                           ;atoi@s stored from wreg
  5708  060B  0020               	movlb	0	; select bank0
  5709  060C  00AD               	movwf	atoi@s
  5710  060D                     l3009:	
  5711  060D  082D               	movf	atoi@s,w
  5712  060E  0086               	movwf	6
  5713  060F  3001               	movlw	1	; select bank2/3
  5714  0610  0087               	movwf	7
  5715  0611  3020               	movlw	32
  5716  0612  0601               	xorwf	1,w
  5717  0613  1D03               	btfss	3,2
  5718  0614  2E1A               	goto	l3011
  5719  0615                     l3007:	
  5720  0615  3001               	movlw	1
  5721  0616  00A8               	movwf	??_atoi
  5722  0617  0828               	movf	??_atoi,w
  5723  0618  07AD               	addwf	atoi@s,f
  5724  0619  2E0D               	goto	l3009
  5725  061A                     l3011:	
  5726  061A  082D               	movf	atoi@s,w
  5727  061B  0086               	movwf	6
  5728  061C  3001               	movlw	1	; select bank2/3
  5729  061D  0087               	movwf	7
  5730  061E  3009               	movlw	9
  5731  061F  0601               	xorwf	1,w
  5732  0620  1903               	btfsc	3,2
  5733  0621  2E15               	goto	l3007
  5734  0622  01AB               	clrf	atoi@a
  5735  0623  01AC               	clrf	atoi@a+1
  5736  0624  01AA               	clrf	atoi@sign
  5737  0625  082D               	movf	atoi@s,w
  5738  0626  0086               	movwf	6
  5739  0627  3001               	movlw	1	; select bank2/3
  5740  0628  0087               	movwf	7
  5741  0629  302D               	movlw	45
  5742  062A  0601               	xorwf	1,w
  5743  062B  1D03               	btfss	3,2
  5744  062C  2E32               	goto	l3019
  5745  062D  3001               	movlw	1
  5746  062E  00A8               	movwf	??_atoi
  5747  062F  0828               	movf	??_atoi,w
  5748  0630  07AA               	addwf	atoi@sign,f
  5749  0631  2E3A               	goto	l3025
  5750  0632                     l3019:	
  5751  0632  082D               	movf	atoi@s,w
  5752  0633  0086               	movwf	6
  5753  0634  3001               	movlw	1	; select bank2/3
  5754  0635  0087               	movwf	7
  5755  0636  302B               	movlw	43
  5756  0637  0601               	xorwf	1,w
  5757  0638  1D03               	btfss	3,2
  5758  0639  2E3E               	goto	l3027
  5759  063A                     l3025:	
  5760  063A  3001               	movlw	1
  5761  063B  00A8               	movwf	??_atoi
  5762  063C  0828               	movf	??_atoi,w
  5763  063D  07AD               	addwf	atoi@s,f
  5764  063E                     l3027:	
  5765  063E  082D               	movf	atoi@s,w
  5766  063F  0086               	movwf	6
  5767  0640  3001               	movlw	1	; select bank2/3
  5768  0641  0087               	movwf	7
  5769  0642  0801               	movf	1,w
  5770  0643  318D  259B  3186   	fcall	_isdigit
  5771  0646  1C03               	btfss	3,0
  5772  0647  2E67               	goto	l3029
  5773  0648  0020               	movlb	0	; select bank0
  5774  0649  082C               	movf	atoi@a+1,w
  5775  064A  00A1               	movwf	___wmul@multiplier+1
  5776  064B  082B               	movf	atoi@a,w
  5777  064C  00A0               	movwf	___wmul@multiplier
  5778  064D  300A               	movlw	10
  5779  064E  00A2               	movwf	___wmul@multiplicand
  5780  064F  3000               	movlw	0
  5781  0650  00A3               	movwf	___wmul@multiplicand+1
  5782  0651  318E  2658  3186   	fcall	___wmul
  5783  0654  0020               	movlb	0	; select bank0
  5784  0655  082D               	movf	atoi@s,w
  5785  0656  0086               	movwf	6
  5786  0657  3001               	movlw	1	; select bank2/3
  5787  0658  0087               	movwf	7
  5788  0659  0801               	movf	1,w
  5789  065A  0720               	addwf	?___wmul,w
  5790  065B  00A8               	movwf	??_atoi
  5791  065C  0821               	movf	?___wmul+1,w
  5792  065D  1803               	skipnc
  5793  065E  0A21               	incf	?___wmul+1,w
  5794  065F  00A9               	movwf	??_atoi+1
  5795  0660  0828               	movf	??_atoi,w
  5796  0661  3ED0               	addlw	208
  5797  0662  00AB               	movwf	atoi@a
  5798  0663  30FF               	movlw	255
  5799  0664  3D29               	addwfc	??_atoi+1,w
  5800  0665  00AC               	movwf	atoi@a+1
  5801  0666  2E3A               	goto	l3025
  5802  0667                     l3029:	
  5803  0667  0020               	movlb	0	; select bank0
  5804  0668  082A               	movf	atoi@sign,w
  5805  0669  1903               	btfsc	3,2
  5806  066A  2E77               	goto	l3035
  5807  066B  092B               	comf	atoi@a,w
  5808  066C  00A8               	movwf	??_atoi
  5809  066D  092C               	comf	atoi@a+1,w
  5810  066E  00A9               	movwf	??_atoi+1
  5811  066F  0AA8               	incf	??_atoi,f
  5812  0670  1903               	skipnz
  5813  0671  0AA9               	incf	??_atoi+1,f
  5814  0672  0828               	movf	??_atoi,w
  5815  0673  00A6               	movwf	?_atoi
  5816  0674  0829               	movf	??_atoi+1,w
  5817  0675  00A7               	movwf	?_atoi+1
  5818  0676  0008               	return
  5819  0677                     l3035:	
  5820  0677  082C               	movf	atoi@a+1,w
  5821  0678  00A7               	movwf	?_atoi+1
  5822  0679  082B               	movf	atoi@a,w
  5823  067A  00A6               	movwf	?_atoi
  5824  067B  0008               	return
  5825  067C                     __end_of_atoi:	
  5826                           
  5827                           	psect	text22
  5828  0D9B                     __ptext22:	
  5829 ;; *************** function _isdigit *****************
  5830 ;; Defined at:
  5831 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  5832 ;; Parameters:    Size  Location     Type
  5833 ;;  c               1    wreg     unsigned char 
  5834 ;; Auto vars:     Size  Location     Type
  5835 ;;  c               1    1[BANK0 ] unsigned char 
  5836 ;; Return value:  Size  Location     Type
  5837 ;;		None               void
  5838 ;; Registers used:
  5839 ;;		wreg, status,2, status,0
  5840 ;; Tracked objects:
  5841 ;;		On entry : 0/0
  5842 ;;		On exit  : 0/0
  5843 ;;		Unchanged: 0/0
  5844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5846 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5848 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5849 ;;Total ram usage:        2 bytes
  5850 ;; Hardware stack levels used:    1
  5851 ;; Hardware stack levels required when called:    5
  5852 ;; This function calls:
  5853 ;;		Nothing
  5854 ;; This function is called by:
  5855 ;;		_printf
  5856 ;;		_atoi
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           
  5861                           ;psect for function _isdigit
  5862  0D9B                     _isdigit:	
  5863                           
  5864                           ;incstack = 0
  5865                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  5866                           ;isdigit@c stored from wreg
  5867  0D9B  0020               	movlb	0	; select bank0
  5868  0D9C  00A1               	movwf	isdigit@c
  5869  0D9D  01A0               	clrf	_isdigit$1172
  5870  0D9E  303A               	movlw	58
  5871  0D9F  0221               	subwf	isdigit@c,w
  5872  0DA0  1803               	skipnc
  5873  0DA1  2DA8               	goto	l2383
  5874  0DA2  3030               	movlw	48
  5875  0DA3  0221               	subwf	isdigit@c,w
  5876  0DA4  1C03               	skipc
  5877  0DA5  2DA8               	goto	l2383
  5878  0DA6  01A0               	clrf	_isdigit$1172
  5879  0DA7  0AA0               	incf	_isdigit$1172,f
  5880  0DA8                     l2383:	
  5881  0DA8  0C20               	rrf	_isdigit$1172,w
  5882  0DA9  0008               	return
  5883  0DAA                     __end_of_isdigit:	
  5884                           
  5885                           	psect	text23
  5886  0E58                     __ptext23:	
  5887 ;; *************** function ___wmul *****************
  5888 ;; Defined at:
  5889 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5892 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5893 ;; Auto vars:     Size  Location     Type
  5894 ;;  product         2    4[BANK0 ] unsigned int 
  5895 ;; Return value:  Size  Location     Type
  5896 ;;                  2    0[BANK0 ] unsigned int 
  5897 ;; Registers used:
  5898 ;;		wreg, status,2, status,0
  5899 ;; Tracked objects:
  5900 ;;		On entry : 0/0
  5901 ;;		On exit  : 0/0
  5902 ;;		Unchanged: 0/0
  5903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5904 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5905 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5907 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5908 ;;Total ram usage:        6 bytes
  5909 ;; Hardware stack levels used:    1
  5910 ;; Hardware stack levels required when called:    5
  5911 ;; This function calls:
  5912 ;;		Nothing
  5913 ;; This function is called by:
  5914 ;;		_printf
  5915 ;;		_atoi
  5916 ;; This function uses a non-reentrant model
  5917 ;;
  5918                           
  5919                           
  5920                           ;psect for function ___wmul
  5921  0E58                     ___wmul:	
  5922                           
  5923                           ;incstack = 0
  5924                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5925  0E58  0020               	movlb	0	; select bank0
  5926  0E59  01A4               	clrf	___wmul@product
  5927  0E5A  01A5               	clrf	___wmul@product+1
  5928  0E5B                     l2389:	
  5929  0E5B  1C20               	btfss	___wmul@multiplier,0
  5930  0E5C  2E61               	goto	l889
  5931  0E5D  0822               	movf	___wmul@multiplicand,w
  5932  0E5E  07A4               	addwf	___wmul@product,f
  5933  0E5F  0823               	movf	___wmul@multiplicand+1,w
  5934  0E60  3DA5               	addwfc	___wmul@product+1,f
  5935  0E61                     l889:	
  5936  0E61  3001               	movlw	1
  5937  0E62                     u1355:	
  5938  0E62  35A2               	lslf	___wmul@multiplicand,f
  5939  0E63  0DA3               	rlf	___wmul@multiplicand+1,f
  5940  0E64  0B89               	decfsz	9,f
  5941  0E65  2E62               	goto	u1355
  5942  0E66  3001               	movlw	1
  5943  0E67                     u1365:	
  5944  0E67  36A1               	lsrf	___wmul@multiplier+1,f
  5945  0E68  0CA0               	rrf	___wmul@multiplier,f
  5946  0E69  0B89               	decfsz	9,f
  5947  0E6A  2E67               	goto	u1365
  5948  0E6B  0820               	movf	___wmul@multiplier,w
  5949  0E6C  0421               	iorwf	___wmul@multiplier+1,w
  5950  0E6D  1D03               	btfss	3,2
  5951  0E6E  2E5B               	goto	l2389
  5952  0E6F  0825               	movf	___wmul@product+1,w
  5953  0E70  00A1               	movwf	?___wmul+1
  5954  0E71  0824               	movf	___wmul@product,w
  5955  0E72  00A0               	movwf	?___wmul
  5956  0E73  0008               	return
  5957  0E74                     __end_of___wmul:	
  5958                           
  5959                           	psect	text24
  5960  0D0F                     __ptext24:	
  5961 ;; *************** function _TMR0_HasOverflowOccured *****************
  5962 ;; Defined at:
  5963 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  5964 ;; Parameters:    Size  Location     Type
  5965 ;;		None
  5966 ;; Auto vars:     Size  Location     Type
  5967 ;;		None
  5968 ;; Return value:  Size  Location     Type
  5969 ;;                  1    wreg      unsigned char 
  5970 ;; Registers used:
  5971 ;;		wreg, status,2, status,0
  5972 ;; Tracked objects:
  5973 ;;		On entry : 0/0
  5974 ;;		On exit  : 0/0
  5975 ;;		Unchanged: 0/0
  5976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5981 ;;Total ram usage:        0 bytes
  5982 ;; Hardware stack levels used:    1
  5983 ;; Hardware stack levels required when called:    5
  5984 ;; This function calls:
  5985 ;;		Nothing
  5986 ;; This function is called by:
  5987 ;;		_PROTOCOL_Loop
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           
  5992                           ;psect for function _TMR0_HasOverflowOccured
  5993  0D0F                     _TMR0_HasOverflowOccured:	
  5994                           
  5995                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  5996                           
  5997                           ;incstack = 0
  5998                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  5999  0D0F  0C0B               	rrf	11,w	;volatile
  6000  0D10  0C89               	rrf	9,f
  6001  0D11  3901               	andlw	1
  6002  0D12  0008               	return
  6003  0D13                     __end_of_TMR0_HasOverflowOccured:	
  6004                           
  6005                           	psect	text25
  6006  0D8C                     __ptext25:	
  6007 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  6008 ;; Defined at:
  6009 ;;		line 89 in file "protocol.c"
  6010 ;; Parameters:    Size  Location     Type
  6011 ;;  device_id_i2    1    wreg     unsigned char 
  6012 ;; Auto vars:     Size  Location     Type
  6013 ;;  device_id_i2    1    4[BANK0 ] unsigned char 
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  1    wreg      void 
  6016 ;; Registers used:
  6017 ;;		wreg, status,2, status,0, pclath, cstack
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6025 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6027 ;;Total ram usage:        2 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    6
  6030 ;; This function calls:
  6031 ;;		_DATAEE_WriteByte
  6032 ;; This function is called by:
  6033 ;;		_PROTOCOL_Loop
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           
  6038                           ;psect for function _PROTOCOL_Write_Device_Address
  6039  0D8C                     _PROTOCOL_Write_Device_Address:	
  6040                           
  6041                           ;incstack = 0
  6042                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  6043                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  6044  0D8C  0020               	movlb	0	; select bank0
  6045  0D8D  00A4               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  6046                           
  6047                           ;protocol.c: 90: DATAEE_WriteByte(0, device_id_i2c);
  6048  0D8E  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6049  0D8F  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6050  0D90  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6051  0D91  00A0               	movwf	DATAEE_WriteByte@bData
  6052  0D92  3000               	movlw	0
  6053  0D93  318F  270E         	fcall	_DATAEE_WriteByte
  6054                           
  6055                           ;protocol.c: 91: slave_address = device_id_i2c;
  6056  0D95  0020               	movlb	0	; select bank0
  6057  0D96  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6058  0D97  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6059  0D98  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6060  0D99  00E0               	movwf	_slave_address
  6061  0D9A  0008               	return
  6062  0D9B                     __end_of_PROTOCOL_Write_Device_Address:	
  6063                           
  6064                           	psect	text26
  6065  0CF9                     __ptext26:	
  6066 ;; *************** function _PROTOCOL_STP *****************
  6067 ;; Defined at:
  6068 ;;		line 103 in file "protocol.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;		None
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;		None
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  1    wreg      void 
  6075 ;; Registers used:
  6076 ;;		wreg, status,2, status,0
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;Total ram usage:        0 bytes
  6087 ;; Hardware stack levels used:    1
  6088 ;; Hardware stack levels required when called:    5
  6089 ;; This function calls:
  6090 ;;		Nothing
  6091 ;; This function is called by:
  6092 ;;		_PROTOCOL_Loop
  6093 ;; This function uses a non-reentrant model
  6094 ;;
  6095                           
  6096                           
  6097                           ;psect for function _PROTOCOL_STP
  6098  0CF9                     _PROTOCOL_STP:	
  6099                           
  6100                           ;protocol.c: 105: running = 0;
  6101                           
  6102                           ;incstack = 0
  6103                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  6104  0CF9  0020               	movlb	0	; select bank0
  6105  0CFA  01DC               	clrf	_running
  6106  0CFB  0008               	return
  6107  0CFC                     __end_of_PROTOCOL_STP:	
  6108                           
  6109                           	psect	text27
  6110  0D0B                     __ptext27:	
  6111 ;; *************** function _PROTOCOL_STA *****************
  6112 ;; Defined at:
  6113 ;;		line 98 in file "protocol.c"
  6114 ;; Parameters:    Size  Location     Type
  6115 ;;		None
  6116 ;; Auto vars:     Size  Location     Type
  6117 ;;		None
  6118 ;; Return value:  Size  Location     Type
  6119 ;;                  1    wreg      void 
  6120 ;; Registers used:
  6121 ;;		wreg, status,2, status,0
  6122 ;; Tracked objects:
  6123 ;;		On entry : 0/0
  6124 ;;		On exit  : 0/0
  6125 ;;		Unchanged: 0/0
  6126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;Total ram usage:        0 bytes
  6132 ;; Hardware stack levels used:    1
  6133 ;; Hardware stack levels required when called:    5
  6134 ;; This function calls:
  6135 ;;		Nothing
  6136 ;; This function is called by:
  6137 ;;		_PROTOCOL_Loop
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           
  6142                           ;psect for function _PROTOCOL_STA
  6143  0D0B                     _PROTOCOL_STA:	
  6144                           
  6145                           ;protocol.c: 100: running = 1;
  6146                           
  6147                           ;incstack = 0
  6148                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  6149  0D0B  0020               	movlb	0	; select bank0
  6150  0D0C  01DC               	clrf	_running
  6151  0D0D  0ADC               	incf	_running,f
  6152  0D0E  0008               	return
  6153  0D0F                     __end_of_PROTOCOL_STA:	
  6154                           
  6155                           	psect	text28
  6156  0DDD                     __ptext28:	
  6157 ;; *************** function _PROTOCOL_SET *****************
  6158 ;; Defined at:
  6159 ;;		line 116 in file "protocol.c"
  6160 ;; Parameters:    Size  Location     Type
  6161 ;;  value_          1    wreg     unsigned char 
  6162 ;; Auto vars:     Size  Location     Type
  6163 ;;  value_          1    5[BANK0 ] unsigned char 
  6164 ;; Return value:  Size  Location     Type
  6165 ;;                  1    wreg      void 
  6166 ;; Registers used:
  6167 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6168 ;; Tracked objects:
  6169 ;;		On entry : 0/0
  6170 ;;		On exit  : 0/0
  6171 ;;		Unchanged: 0/0
  6172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6174 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6176 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6177 ;;Total ram usage:        2 bytes
  6178 ;; Hardware stack levels used:    1
  6179 ;; Hardware stack levels required when called:    6
  6180 ;; This function calls:
  6181 ;;		Absolute function
  6182 ;;		_set_handler
  6183 ;; This function is called by:
  6184 ;;		_PROTOCOL_Loop
  6185 ;; This function uses a non-reentrant model
  6186 ;;
  6187                           
  6188                           
  6189                           ;psect for function _PROTOCOL_SET
  6190  0DDD                     _PROTOCOL_SET:	
  6191                           
  6192                           ;incstack = 0
  6193                           ; Regs used in _PROTOCOL_SET: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6194                           ;PROTOCOL_SET@value_ stored from wreg
  6195  0DDD  0020               	movlb	0	; select bank0
  6196  0DDE  00A5               	movwf	PROTOCOL_SET@value_
  6197                           
  6198                           ;protocol.c: 117: value = value_;
  6199  0DDF  0825               	movf	PROTOCOL_SET@value_,w
  6200  0DE0  00A4               	movwf	??_PROTOCOL_SET
  6201  0DE1  0824               	movf	??_PROTOCOL_SET,w
  6202  0DE2  00DE               	movwf	_value
  6203                           
  6204                           ;protocol.c: 118: if (PROTOCOL_Set_Handler) PROTOCOL_Set_Handler(value);
  6205  0DE3  0852               	movf	_PROTOCOL_Set_Handler,w
  6206  0DE4  0453               	iorwf	_PROTOCOL_Set_Handler+1,w
  6207  0DE5  1903               	btfsc	3,2
  6208  0DE6  0008               	return
  6209  0DE7  085E               	movf	_value,w
  6210  0DE8  00A4               	movwf	??_PROTOCOL_SET
  6211  0DE9  0824               	movf	??_PROTOCOL_SET,w
  6212  0DEA  00A0               	movwf	set_handler@value
  6213  0DEB  0853               	movf	_PROTOCOL_Set_Handler+1,w
  6214  0DEC  008A               	movwf	10
  6215  0DED  0852               	movf	_PROTOCOL_Set_Handler,w
  6216  0DEE  000A               	callw
  6217  0DEF  318D               	pagesel	$
  6218  0DF0  0008               	return
  6219  0DF1                     __end_of_PROTOCOL_SET:	
  6220                           
  6221                           	psect	text29
  6222  0D3E                     __ptext29:	
  6223 ;; *************** function _PROTOCOL_SAV *****************
  6224 ;; Defined at:
  6225 ;;		line 112 in file "protocol.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;		None
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;		None
  6230 ;; Return value:  Size  Location     Type
  6231 ;;                  1    wreg      void 
  6232 ;; Registers used:
  6233 ;;		wreg, status,2, status,0, pclath, cstack
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6241 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6242 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6243 ;;Total ram usage:        1 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:    6
  6246 ;; This function calls:
  6247 ;;		_DATAEE_WriteByte
  6248 ;; This function is called by:
  6249 ;;		_PROTOCOL_Loop
  6250 ;; This function uses a non-reentrant model
  6251 ;;
  6252                           
  6253                           
  6254                           ;psect for function _PROTOCOL_SAV
  6255  0D3E                     _PROTOCOL_SAV:	
  6256                           
  6257                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  6258                           
  6259                           ;incstack = 0
  6260                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  6261  0D3E  0020               	movlb	0	; select bank0
  6262  0D3F  085E               	movf	_value,w
  6263  0D40  00A3               	movwf	??_PROTOCOL_SAV
  6264  0D41  0823               	movf	??_PROTOCOL_SAV,w
  6265  0D42  00A0               	movwf	DATAEE_WriteByte@bData
  6266  0D43  3001               	movlw	1
  6267  0D44  318F  270E         	fcall	_DATAEE_WriteByte
  6268  0D46  0008               	return
  6269  0D47                     __end_of_PROTOCOL_SAV:	
  6270                           
  6271                           	psect	text30
  6272  0F0E                     __ptext30:	
  6273 ;; *************** function _DATAEE_WriteByte *****************
  6274 ;; Defined at:
  6275 ;;		line 180 in file "mcc_generated_files/memory.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;  bAdd            1    wreg     unsigned char 
  6278 ;;  bData           1    0[BANK0 ] unsigned char 
  6279 ;; Auto vars:     Size  Location     Type
  6280 ;;  bAdd            1    1[BANK0 ] unsigned char 
  6281 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  6282 ;; Return value:  Size  Location     Type
  6283 ;;                  1    wreg      void 
  6284 ;; Registers used:
  6285 ;;		wreg, status,2, status,0
  6286 ;; Tracked objects:
  6287 ;;		On entry : 0/0
  6288 ;;		On exit  : 0/0
  6289 ;;		Unchanged: 0/0
  6290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6291 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6292 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6294 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6295 ;;Total ram usage:        3 bytes
  6296 ;; Hardware stack levels used:    1
  6297 ;; Hardware stack levels required when called:    5
  6298 ;; This function calls:
  6299 ;;		Nothing
  6300 ;; This function is called by:
  6301 ;;		_PROTOCOL_Write_Device_Address
  6302 ;;		_PROTOCOL_SAV
  6303 ;; This function uses a non-reentrant model
  6304 ;;
  6305                           
  6306                           
  6307                           ;psect for function _DATAEE_WriteByte
  6308  0F0E                     _DATAEE_WriteByte:	
  6309                           
  6310                           ;incstack = 0
  6311                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
  6312                           ;DATAEE_WriteByte@bAdd stored from wreg
  6313  0F0E  0020               	movlb	0	; select bank0
  6314  0F0F  00A1               	movwf	DATAEE_WriteByte@bAdd
  6315                           
  6316                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  6317  0F10  01A2               	clrf	DATAEE_WriteByte@GIEBitValue
  6318                           
  6319                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  6320  0F11  0821               	movf	DATAEE_WriteByte@bAdd,w
  6321  0F12  0023               	movlb	3	; select bank3
  6322  0F13  0091               	movwf	17	;volatile
  6323                           
  6324                           ;memory.c: 185: EEDATL = bData;
  6325  0F14  0020               	movlb	0	; select bank0
  6326  0F15  0820               	movf	DATAEE_WriteByte@bData,w
  6327  0F16  0023               	movlb	3	; select bank3
  6328  0F17  0093               	movwf	19	;volatile
  6329                           
  6330                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  6331  0F18  1395               	bcf	21,7	;volsfr
  6332                           
  6333                           ;memory.c: 187: EECON1bits.CFGS = 0;
  6334  0F19  1315               	bcf	21,6	;volsfr
  6335                           
  6336                           ;memory.c: 188: EECON1bits.WREN = 1;
  6337  0F1A  1515               	bsf	21,2	;volsfr
  6338                           
  6339                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  6340  0F1B  3000               	movlw	0
  6341  0F1C  1B8B               	btfsc	11,7	;volatile
  6342  0F1D  3001               	movlw	1
  6343  0F1E  0020               	movlb	0	; select bank0
  6344  0F1F  00A2               	movwf	DATAEE_WriteByte@GIEBitValue
  6345                           
  6346                           ;memory.c: 191: INTCONbits.GIE = 0;
  6347  0F20  138B               	bcf	11,7	;volatile
  6348                           
  6349                           ;memory.c: 192: EECON2 = 0x55;
  6350  0F21  3055               	movlw	85
  6351  0F22  0023               	movlb	3	; select bank3
  6352  0F23  0096               	movwf	22	;volsfr
  6353                           
  6354                           ;memory.c: 193: EECON2 = 0xAA;
  6355  0F24  30AA               	movlw	170
  6356  0F25  0096               	movwf	22	;volsfr
  6357                           
  6358                           ;memory.c: 194: EECON1bits.WR = 1;
  6359  0F26  1495               	bsf	21,1	;volsfr
  6360  0F27                     l1317:	
  6361                           ;memory.c: 197: {
  6362                           
  6363                           ;memory.c: 196: while (EECON1bits.WR)
  6364                           
  6365  0F27  1895               	btfsc	21,1	;volsfr
  6366  0F28  2F27               	goto	l1317
  6367                           
  6368                           ;memory.c: 198: }
  6369                           ;memory.c: 200: EECON1bits.WREN = 0;
  6370  0F29  1115               	bcf	21,2	;volsfr
  6371                           
  6372                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  6373  0F2A  0020               	movlb	0	; select bank0
  6374  0F2B  0C22               	rrf	DATAEE_WriteByte@GIEBitValue,w
  6375  0F2C  1C03               	skipc
  6376  0F2D  138B               	bcf	11,7	;volatile
  6377  0F2E  1803               	skipnc
  6378  0F2F  178B               	bsf	11,7	;volatile
  6379  0F30  0008               	return
  6380  0F31                     __end_of_DATAEE_WriteByte:	
  6381                           
  6382                           	psect	text31
  6383  0002                     __ptext31:	
  6384 ;; *************** function _PROTOCOL_EXT *****************
  6385 ;; Defined at:
  6386 ;;		line 121 in file "protocol.c"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;  char_buf        1    wreg     PTR unsigned char 
  6389 ;;		 -> buf(48), I2C_StatusCallback@ext_buf(48), 
  6390 ;; Auto vars:     Size  Location     Type
  6391 ;;  char_buf        1    0[BANK0 ] PTR unsigned char 
  6392 ;;		 -> buf(48), I2C_StatusCallback@ext_buf(48), 
  6393 ;; Return value:  Size  Location     Type
  6394 ;;                  1    wreg      void 
  6395 ;; Registers used:
  6396 ;;		wreg, status,2, status,0
  6397 ;; Tracked objects:
  6398 ;;		On entry : 0/0
  6399 ;;		On exit  : 0/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6403 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6405 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6406 ;;Total ram usage:        1 bytes
  6407 ;; Hardware stack levels used:    1
  6408 ;; Hardware stack levels required when called:    5
  6409 ;; This function calls:
  6410 ;;		Nothing
  6411 ;; This function is called by:
  6412 ;;		_PROTOCOL_Loop
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           
  6417                           ;psect for function _PROTOCOL_EXT
  6418  0002                     _PROTOCOL_EXT:	
  6419                           
  6420                           ;incstack = 0
  6421                           ; Regs used in _PROTOCOL_EXT: [wreg+status,2+status,0]
  6422  0002  0008               	return
  6423  0003                     __end_of_PROTOCOL_EXT:	
  6424                           
  6425                           	psect	text32
  6426  0EAE                     __ptext32:	
  6427 ;; *************** function _EUSART_Read *****************
  6428 ;; Defined at:
  6429 ;;		line 112 in file "mcc_generated_files/eusart.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;		None
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;  readValue       1    1[BANK0 ] unsigned char 
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  1    wreg      unsigned char 
  6436 ;; Registers used:
  6437 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6445 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6446 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6447 ;;Total ram usage:        2 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:    5
  6450 ;; This function calls:
  6451 ;;		Nothing
  6452 ;; This function is called by:
  6453 ;;		_PROTOCOL_Loop
  6454 ;; This function uses a non-reentrant model
  6455 ;;
  6456                           
  6457                           
  6458                           ;psect for function _EUSART_Read
  6459  0EAE                     _EUSART_Read:	
  6460                           
  6461                           ;eusart.c: 114: uint8_t readValue = 0;
  6462                           
  6463                           ;incstack = 0
  6464                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  6465  0EAE  0020               	movlb	0	; select bank0
  6466  0EAF  01A1               	clrf	EUSART_Read@readValue
  6467  0EB0                     l2947:	
  6468                           ;eusart.c: 117: {
  6469                           
  6470                           ;eusart.c: 116: while(0 == eusartRxCount)
  6471                           
  6472  0EB0  0861               	movf	_eusartRxCount,w	;volatile
  6473  0EB1  1903               	btfsc	3,2
  6474  0EB2  2EB0               	goto	l2947
  6475                           
  6476                           ;eusart.c: 118: }
  6477                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  6478  0EB3  0862               	movf	_eusartRxTail,w
  6479  0EB4  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  6480  0EB5  0086               	movwf	6
  6481  0EB6  0187               	clrf	7
  6482  0EB7  0801               	movf	1,w
  6483  0EB8  00A0               	movwf	??_EUSART_Read
  6484  0EB9  0820               	movf	??_EUSART_Read,w
  6485  0EBA  00A1               	movwf	EUSART_Read@readValue
  6486  0EBB  3001               	movlw	1
  6487  0EBC  00A0               	movwf	??_EUSART_Read
  6488  0EBD  0820               	movf	??_EUSART_Read,w
  6489  0EBE  07E2               	addwf	_eusartRxTail,f	;volatile
  6490                           
  6491                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  6492  0EBF  3008               	movlw	8
  6493  0EC0  0262               	subwf	_eusartRxTail,w	;volatile
  6494  0EC1  1803               	btfsc	3,0
  6495                           
  6496                           ;eusart.c: 122: {
  6497                           ;eusart.c: 123: eusartRxTail = 0;
  6498  0EC2  01E2               	clrf	_eusartRxTail	;volatile
  6499                           
  6500                           ;eusart.c: 124: }
  6501                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  6502  0EC3  0021               	movlb	1	; select bank1
  6503  0EC4  1291               	bcf	17,5	;volatile
  6504                           
  6505                           ;eusart.c: 126: eusartRxCount--;
  6506  0EC5  3001               	movlw	1
  6507  0EC6  0020               	movlb	0	; select bank0
  6508  0EC7  02E1               	subwf	_eusartRxCount,f	;volatile
  6509                           
  6510                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  6511  0EC8  0021               	movlb	1	; select bank1
  6512  0EC9  1691               	bsf	17,5	;volatile
  6513                           
  6514                           ;eusart.c: 129: return readValue;
  6515  0ECA  0020               	movlb	0	; select bank0
  6516  0ECB  0821               	movf	EUSART_Read@readValue,w
  6517  0ECC  0008               	return
  6518  0ECD                     __end_of_EUSART_Read:	
  6519                           
  6520                           	psect	text33
  6521  067C                     __ptext33:	
  6522 ;; *************** function _PROTOCOL_Initialize *****************
  6523 ;; Defined at:
  6524 ;;		line 60 in file "protocol.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;  device_id       2    4[BANK0 ] PTR const unsigned char 
  6527 ;;		 -> STR_1(17), 
  6528 ;;  start_handle    1    6[BANK0 ] PTR void 
  6529 ;;		 -> NULL(0), 
  6530 ;;  stop_handler    1    7[BANK0 ] PTR void 
  6531 ;;		 -> NULL(0), 
  6532 ;;  set_handler     2    8[BANK0 ] PTR void 
  6533 ;;		 -> set_handler(1), 
  6534 ;;  inv_handler     1   10[BANK0 ] PTR void 
  6535 ;;		 -> NULL(0), 
  6536 ;;  scaler          1   11[BANK0 ] unsigned char 
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;		None
  6539 ;; Return value:  Size  Location     Type
  6540 ;;                  1    wreg      void 
  6541 ;; Registers used:
  6542 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6548 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6552 ;;Total ram usage:       10 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; Hardware stack levels required when called:    6
  6555 ;; This function calls:
  6556 ;;		Absolute function
  6557 ;;		_DATAEE_ReadByte
  6558 ;;		_set_handler
  6559 ;; This function is called by:
  6560 ;;		_main
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           
  6565                           ;psect for function _PROTOCOL_Initialize
  6566  067C                     _PROTOCOL_Initialize:	
  6567                           
  6568                           ;protocol.c: 61: device_id_ = device_id;
  6569                           
  6570                           ;incstack = 0
  6571                           ; Regs used in _PROTOCOL_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6572  067C  0020               	movlb	0	; select bank0
  6573  067D  0825               	movf	PROTOCOL_Initialize@device_id+1,w
  6574  067E  0021               	movlb	1	; select bank1
  6575  067F  00BB               	movwf	(_device_id_+1)^(0+128)
  6576  0680  0020               	movlb	0	; select bank0
  6577  0681  0824               	movf	PROTOCOL_Initialize@device_id,w
  6578  0682  0021               	movlb	1	; select bank1
  6579  0683  00BA               	movwf	_device_id_^(0+128)
  6580                           
  6581                           ;protocol.c: 62: PROTOCOL_Start_Handler = start_handler;
  6582  0684  0020               	movlb	0	; select bank0
  6583  0685  0826               	movf	PROTOCOL_Initialize@start_handler,w
  6584  0686  00AC               	movwf	??_PROTOCOL_Initialize
  6585  0687  3000               	movlw	0
  6586  0688  00AD               	movwf	??_PROTOCOL_Initialize+1
  6587  0689  082C               	movf	??_PROTOCOL_Initialize,w
  6588  068A  0021               	movlb	1	; select bank1
  6589  068B  00C4               	movwf	_PROTOCOL_Start_Handler^(0+128)
  6590  068C  0020               	movlb	0	; select bank0
  6591  068D  082D               	movf	??_PROTOCOL_Initialize+1,w
  6592  068E  0021               	movlb	1	; select bank1
  6593  068F  00C5               	movwf	(_PROTOCOL_Start_Handler+1)^(0+128)
  6594                           
  6595                           ;protocol.c: 63: PROTOCOL_Stop_Handler = stop_handler;
  6596  0690  0020               	movlb	0	; select bank0
  6597  0691  0827               	movf	PROTOCOL_Initialize@stop_handler,w
  6598  0692  00AC               	movwf	??_PROTOCOL_Initialize
  6599  0693  3000               	movlw	0
  6600  0694  00AD               	movwf	??_PROTOCOL_Initialize+1
  6601  0695  082C               	movf	??_PROTOCOL_Initialize,w
  6602  0696  00D4               	movwf	_PROTOCOL_Stop_Handler
  6603  0697  082D               	movf	??_PROTOCOL_Initialize+1,w
  6604  0698  00D5               	movwf	_PROTOCOL_Stop_Handler+1
  6605                           
  6606                           ;protocol.c: 64: PROTOCOL_Set_Handler = set_handler;
  6607  0699  0829               	movf	PROTOCOL_Initialize@set_handler+1,w
  6608  069A  00D3               	movwf	_PROTOCOL_Set_Handler+1
  6609  069B  0828               	movf	PROTOCOL_Initialize@set_handler,w
  6610  069C  00D2               	movwf	_PROTOCOL_Set_Handler
  6611                           
  6612                           ;protocol.c: 67: value = DATAEE_ReadByte(1);
  6613  069D  3001               	movlw	1
  6614  069E  318D  2563  3186   	fcall	_DATAEE_ReadByte
  6615  06A1  0020               	movlb	0	; select bank0
  6616  06A2  00AC               	movwf	??_PROTOCOL_Initialize
  6617  06A3  082C               	movf	??_PROTOCOL_Initialize,w
  6618  06A4  00DE               	movwf	_value
  6619                           
  6620                           ;protocol.c: 68: if (PROTOCOL_Set_Handler) PROTOCOL_Set_Handler(value);
  6621  06A5  0852               	movf	_PROTOCOL_Set_Handler,w
  6622  06A6  0453               	iorwf	_PROTOCOL_Set_Handler+1,w
  6623  06A7  1903               	btfsc	3,2
  6624  06A8  2EB2               	goto	l4405
  6625  06A9  085E               	movf	_value,w
  6626  06AA  00AC               	movwf	??_PROTOCOL_Initialize
  6627  06AB  082C               	movf	??_PROTOCOL_Initialize,w
  6628  06AC  00A0               	movwf	set_handler@value
  6629  06AD  0853               	movf	_PROTOCOL_Set_Handler+1,w
  6630  06AE  008A               	movwf	10
  6631  06AF  0852               	movf	_PROTOCOL_Set_Handler,w
  6632  06B0  000A               	callw
  6633  06B1  3186               	pagesel	$
  6634  06B2                     l4405:	
  6635                           
  6636                           ;protocol.c: 69: slave_address = DATAEE_ReadByte(0);
  6637  06B2  3000               	movlw	0
  6638  06B3  318D  2563         	fcall	_DATAEE_ReadByte
  6639  06B5  0020               	movlb	0	; select bank0
  6640  06B6  00AC               	movwf	??_PROTOCOL_Initialize
  6641  06B7  082C               	movf	??_PROTOCOL_Initialize,w
  6642  06B8  00E0               	movwf	_slave_address
  6643                           
  6644                           ;protocol.c: 72: readbuf.status = COMPLETE;
  6645  06B9  3003               	movlw	3
  6646  06BA  00AC               	movwf	??_PROTOCOL_Initialize
  6647  06BB  082C               	movf	??_PROTOCOL_Initialize,w
  6648  06BC  0021               	movlb	1	; select bank1
  6649  06BD  00DC               	movwf	(_readbuf^(0+128)+3)
  6650                           
  6651                           ;protocol.c: 73: PROTOCOL_Inv_Handler = inv_handler;
  6652  06BE  0020               	movlb	0	; select bank0
  6653  06BF  082A               	movf	PROTOCOL_Initialize@inv_handler,w
  6654  06C0  00AC               	movwf	??_PROTOCOL_Initialize
  6655  06C1  3000               	movlw	0
  6656  06C2  00AD               	movwf	??_PROTOCOL_Initialize+1
  6657  06C3  082C               	movf	??_PROTOCOL_Initialize,w
  6658  06C4  0021               	movlb	1	; select bank1
  6659  06C5  00BE               	movwf	_PROTOCOL_Inv_Handler^(0+128)
  6660  06C6  0020               	movlb	0	; select bank0
  6661  06C7  082D               	movf	??_PROTOCOL_Initialize+1,w
  6662  06C8  0021               	movlb	1	; select bank1
  6663  06C9  00BF               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+128)
  6664                           
  6665                           ;protocol.c: 74: tmr_scaler = scaler;
  6666  06CA  0020               	movlb	0	; select bank0
  6667  06CB  082B               	movf	PROTOCOL_Initialize@scaler,w
  6668  06CC  00AC               	movwf	??_PROTOCOL_Initialize
  6669  06CD  082C               	movf	??_PROTOCOL_Initialize,w
  6670  06CE  00EB               	movwf	_tmr_scaler
  6671  06CF  0008               	return
  6672  06D0                     __end_of_PROTOCOL_Initialize:	
  6673                           
  6674                           	psect	text34
  6675  0FA1                     __ptext34:	
  6676 ;; *************** function _set_handler *****************
  6677 ;; Defined at:
  6678 ;;		line 66 in file "main.c"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;  value           1    0[BANK0 ] unsigned char 
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;  i               1    3[BANK0 ] unsigned char 
  6683 ;;  mask            1    2[BANK0 ] unsigned char 
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  1    wreg      void 
  6686 ;; Registers used:
  6687 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6693 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6695 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6696 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6697 ;;Total ram usage:        4 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; Hardware stack levels required when called:    5
  6700 ;; This function calls:
  6701 ;;		Nothing
  6702 ;; This function is called by:
  6703 ;;		_main
  6704 ;;		i1_PROTOCOL_SET
  6705 ;;		_PROTOCOL_SET
  6706 ;;		_PROTOCOL_Initialize
  6707 ;; This function uses a non-reentrant model
  6708 ;;
  6709                           
  6710                           
  6711                           ;psect for function _set_handler
  6712  0FA1                     _set_handler:	
  6713                           
  6714                           ;Skip over the trampoline to the duplicate function for level 1
  6715  0FA1  1C7E               	btfss	126,0
  6716  0FA2  2FA5               	goto	l2701
  6717  0FA3  318F  2F55         	ljmp	i1l2591
  6718  0FA5                     _set_handler$intlevel0:	
  6719  0FA5                     l2701:	
  6720                           ;incstack = 0
  6721                           ; Regs used in _set_handler: [wreg+fsr1l+fsr1h+status,2+status,0]
  6722                           
  6723                           
  6724                           ;main.c: 67: uint8_t i;
  6725                           ;main.c: 68: uint8_t mask = 0b00000001;
  6726  0FA5  0020               	movlb	0	; select bank0
  6727  0FA6  01A2               	clrf	set_handler@mask
  6728  0FA7  0AA2               	incf	set_handler@mask,f
  6729                           
  6730                           ;main.c: 69: for(i=0; i<4; i++) {
  6731  0FA8  01A3               	clrf	set_handler@i
  6732  0FA9                     L5:	
  6733  0FA9  3004               	movlw	4
  6734  0FAA  0223               	subwf	set_handler@i,w
  6735  0FAB  1803               	btfsc	3,0
  6736  0FAC  0008               	return
  6737                           
  6738                           ;main.c: 70: if ((value & mask) == 0) {
  6739  0FAD  0820               	movf	set_handler@value,w
  6740  0FAE  0522               	andwf	set_handler@mask,w
  6741  0FAF  1D03               	btfss	3,2
  6742  0FB0  2FBC               	goto	l2713
  6743                           
  6744                           ;main.c: 71: analog_in_flags[i] = 0;
  6745  0FB1  0823               	movf	set_handler@i,w
  6746  0FB2  3EB4               	addlw	(low (_analog_in_flags| 0))& (0+255)
  6747  0FB3  0086               	movwf	6
  6748  0FB4  0187               	clrf	7
  6749  0FB5  0181               	clrf	1
  6750                           
  6751                           ;main.c: 72: position[i] = 0;
  6752  0FB6  0823               	movf	set_handler@i,w
  6753  0FB7  3EDE               	addlw	(low (_position| 0))& (0+255)
  6754  0FB8  0086               	movwf	6
  6755  0FB9  0187               	clrf	7
  6756  0FBA  0181               	clrf	1
  6757                           
  6758                           ;main.c: 73: } else {
  6759  0FBB  2FC2               	goto	l2715
  6760  0FBC                     l2713:	
  6761                           
  6762                           ;main.c: 74: analog_in_flags[i] = 1;
  6763  0FBC  0823               	movf	set_handler@i,w
  6764  0FBD  3EB4               	addlw	(low (_analog_in_flags| 0))& (0+255)
  6765  0FBE  0086               	movwf	6
  6766  0FBF  0187               	clrf	7
  6767  0FC0  0181               	clrf	1
  6768  0FC1  0A81               	incf	1,f
  6769  0FC2                     l2715:	
  6770                           
  6771                           ;main.c: 75: }
  6772                           ;main.c: 76: mask = mask << 1;
  6773  0FC2  3522               	lslf	set_handler@mask,w
  6774  0FC3  00A1               	movwf	??_set_handler
  6775  0FC4  0821               	movf	??_set_handler,w
  6776  0FC5  00A2               	movwf	set_handler@mask
  6777  0FC6  3001               	movlw	1
  6778  0FC7  00A1               	movwf	??_set_handler
  6779  0FC8  0821               	movf	??_set_handler,w
  6780  0FC9  07A3               	addwf	set_handler@i,f
  6781  0FCA  2FA9               	goto	L5
  6782  0FCB                     __end_of_set_handler:	
  6783                           
  6784                           	psect	text35
  6785  0D63                     __ptext35:	
  6786 ;; *************** function _DATAEE_ReadByte *****************
  6787 ;; Defined at:
  6788 ;;		line 204 in file "mcc_generated_files/memory.c"
  6789 ;; Parameters:    Size  Location     Type
  6790 ;;  bAdd            1    wreg     unsigned char 
  6791 ;; Auto vars:     Size  Location     Type
  6792 ;;  bAdd            1    0[BANK0 ] unsigned char 
  6793 ;; Return value:  Size  Location     Type
  6794 ;;                  1    wreg      unsigned char 
  6795 ;; Registers used:
  6796 ;;		wreg
  6797 ;; Tracked objects:
  6798 ;;		On entry : 0/0
  6799 ;;		On exit  : 0/0
  6800 ;;		Unchanged: 0/0
  6801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6803 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6805 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6806 ;;Total ram usage:        1 bytes
  6807 ;; Hardware stack levels used:    1
  6808 ;; Hardware stack levels required when called:    5
  6809 ;; This function calls:
  6810 ;;		Nothing
  6811 ;; This function is called by:
  6812 ;;		_PROTOCOL_Initialize
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           
  6817                           ;psect for function _DATAEE_ReadByte
  6818  0D63                     _DATAEE_ReadByte:	
  6819                           
  6820                           ;incstack = 0
  6821                           ; Regs used in _DATAEE_ReadByte: [wreg]
  6822                           ;DATAEE_ReadByte@bAdd stored from wreg
  6823  0D63  0020               	movlb	0	; select bank0
  6824  0D64  00A0               	movwf	DATAEE_ReadByte@bAdd
  6825                           
  6826                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
  6827  0D65  0820               	movf	DATAEE_ReadByte@bAdd,w
  6828  0D66  0023               	movlb	3	; select bank3
  6829  0D67  0091               	movwf	17	;volatile
  6830                           
  6831                           ;memory.c: 207: EECON1bits.CFGS = 0;
  6832  0D68  1315               	bcf	21,6	;volsfr
  6833                           
  6834                           ;memory.c: 208: EECON1bits.EEPGD = 0;
  6835  0D69  1395               	bcf	21,7	;volsfr
  6836                           
  6837                           ;memory.c: 209: EECON1bits.RD = 1;
  6838  0D6A  1415               	bsf	21,0	;volsfr
  6839                           
  6840                           ;memory.c: 210: __nop();
  6841  0D6B  0000               	nop
  6842                           
  6843                           ;memory.c: 211: __nop();
  6844  0D6C  0000               	nop
  6845                           
  6846                           ;memory.c: 213: return (EEDATL);
  6847  0D6D  0023               	movlb	3	; select bank3
  6848  0D6E  0813               	movf	19,w	;volatile
  6849  0D6F  0008               	return
  6850  0D70                     __end_of_DATAEE_ReadByte:	
  6851                           
  6852                           	psect	text36
  6853  0DF1                     __ptext36:	
  6854 ;; *************** function _PIN_MANAGER_Initialize *****************
  6855 ;; Defined at:
  6856 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  6857 ;; Parameters:    Size  Location     Type
  6858 ;;		None
  6859 ;; Auto vars:     Size  Location     Type
  6860 ;;		None
  6861 ;; Return value:  Size  Location     Type
  6862 ;;                  1    wreg      void 
  6863 ;; Registers used:
  6864 ;;		wreg, status,2
  6865 ;; Tracked objects:
  6866 ;;		On entry : 0/0
  6867 ;;		On exit  : 0/0
  6868 ;;		Unchanged: 0/0
  6869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6874 ;;Total ram usage:        0 bytes
  6875 ;; Hardware stack levels used:    1
  6876 ;; Hardware stack levels required when called:    5
  6877 ;; This function calls:
  6878 ;;		Nothing
  6879 ;; This function is called by:
  6880 ;;		_main
  6881 ;;		_SYSTEM_Initialize
  6882 ;; This function uses a non-reentrant model
  6883 ;;
  6884                           
  6885                           
  6886                           ;psect for function _PIN_MANAGER_Initialize
  6887  0DF1                     _PIN_MANAGER_Initialize:	
  6888                           
  6889                           ;pin_manager.c: 57: LATA = 0x00;
  6890                           
  6891                           ;incstack = 0
  6892                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6893  0DF1  0022               	movlb	2	; select bank2
  6894  0DF2  018C               	clrf	12	;volatile
  6895                           
  6896                           ;pin_manager.c: 58: LATC = 0x00;
  6897  0DF3  018E               	clrf	14	;volatile
  6898                           
  6899                           ;pin_manager.c: 63: TRISA = 0x3F;
  6900  0DF4  303F               	movlw	63
  6901  0DF5  0021               	movlb	1	; select bank1
  6902  0DF6  008C               	movwf	12	;volatile
  6903                           
  6904                           ;pin_manager.c: 64: TRISC = 0x3B;
  6905  0DF7  303B               	movlw	59
  6906  0DF8  008E               	movwf	14	;volatile
  6907                           
  6908                           ;pin_manager.c: 69: ANSELC = 0x08;
  6909  0DF9  3008               	movlw	8
  6910  0DFA  0023               	movlb	3	; select bank3
  6911  0DFB  008E               	movwf	14	;volatile
  6912                           
  6913                           ;pin_manager.c: 70: ANSELA = 0x17;
  6914  0DFC  3017               	movlw	23
  6915  0DFD  008C               	movwf	12	;volatile
  6916                           
  6917                           ;pin_manager.c: 75: WPUA = 0x38;
  6918  0DFE  3038               	movlw	56
  6919  0DFF  0024               	movlb	4	; select bank4
  6920  0E00  008C               	movwf	12	;volatile
  6921                           
  6922                           ;pin_manager.c: 76: WPUC = 0x30;
  6923  0E01  3030               	movlw	48
  6924  0E02  008E               	movwf	14	;volatile
  6925                           
  6926                           ;pin_manager.c: 77: OPTION_REGbits.nWPUEN = 0;
  6927  0E03  0021               	movlb	1	; select bank1
  6928  0E04  1395               	bcf	21,7	;volatile
  6929                           
  6930                           ;pin_manager.c: 83: APFCON1 = 0x00;
  6931  0E05  0022               	movlb	2	; select bank2
  6932  0E06  019E               	clrf	30	;volatile
  6933                           
  6934                           ;pin_manager.c: 84: APFCON0 = 0x00;
  6935  0E07  019D               	clrf	29	;volatile
  6936  0E08  0008               	return
  6937  0E09                     __end_of_PIN_MANAGER_Initialize:	
  6938                           
  6939                           	psect	text37
  6940  0D17                     __ptext37:	
  6941 ;; *************** function _OSCILLATOR_Initialize *****************
  6942 ;; Defined at:
  6943 ;;		line 81 in file "mcc_generated_files/mcc.c"
  6944 ;; Parameters:    Size  Location     Type
  6945 ;;		None
  6946 ;; Auto vars:     Size  Location     Type
  6947 ;;		None
  6948 ;; Return value:  Size  Location     Type
  6949 ;;                  1    wreg      void 
  6950 ;; Registers used:
  6951 ;;		wreg, status,2
  6952 ;; Tracked objects:
  6953 ;;		On entry : 0/0
  6954 ;;		On exit  : 0/0
  6955 ;;		Unchanged: 0/0
  6956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6961 ;;Total ram usage:        0 bytes
  6962 ;; Hardware stack levels used:    1
  6963 ;; Hardware stack levels required when called:    5
  6964 ;; This function calls:
  6965 ;;		Nothing
  6966 ;; This function is called by:
  6967 ;;		_main
  6968 ;;		_SYSTEM_Initialize
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           
  6973                           ;psect for function _OSCILLATOR_Initialize
  6974  0D17                     _OSCILLATOR_Initialize:	
  6975                           
  6976                           ;mcc.c: 84: OSCCON = 0x68;
  6977                           
  6978                           ;incstack = 0
  6979                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6980  0D17  3068               	movlw	104
  6981  0D18  0021               	movlb	1	; select bank1
  6982  0D19  0099               	movwf	25	;volatile
  6983                           
  6984                           ;mcc.c: 86: OSCTUNE = 0x00;
  6985  0D1A  0198               	clrf	24	;volatile
  6986  0D1B  0008               	return
  6987  0D1C                     __end_of_OSCILLATOR_Initialize:	
  6988                           
  6989                           	psect	text38
  6990  0EED                     __ptext38:	
  6991 ;; *************** function _I2C_Initialize *****************
  6992 ;; Defined at:
  6993 ;;		line 30 in file "mcc_generated_files/i2c.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;		None
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;		None
  6998 ;; Return value:  Size  Location     Type
  6999 ;;                  1    wreg      void 
  7000 ;; Registers used:
  7001 ;;		wreg, status,2, status,0, pclath, cstack
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7009 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7010 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7011 ;;Total ram usage:        2 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; Hardware stack levels required when called:    6
  7014 ;; This function calls:
  7015 ;;		_PROTOCOL_Read_Device_Address
  7016 ;; This function is called by:
  7017 ;;		_main
  7018 ;;		_SYSTEM_Initialize
  7019 ;; This function uses a non-reentrant model
  7020 ;;
  7021                           
  7022                           
  7023                           ;psect for function _I2C_Initialize
  7024  0EED                     _I2C_Initialize:	
  7025                           
  7026                           ;i2c.c: 34: _delay((unsigned long)((2000)*(4000000/4000.0)));
  7027                           
  7028                           ;incstack = 0
  7029                           ; Regs used in _I2C_Initialize: [wreg+status,2+status,0+pclath+cstack]
  7030  0EED  300B               	movlw	11
  7031  0EEE  0020               	movlb	0	; select bank0
  7032  0EEF  00A1               	movwf	??_I2C_Initialize+1
  7033  0EF0  3026               	movlw	38
  7034  0EF1  00A0               	movwf	??_I2C_Initialize
  7035  0EF2  305D               	movlw	93
  7036  0EF3                     u4147:	
  7037  0EF3  0B89               	decfsz	9,f
  7038  0EF4  2EF3               	goto	u4147
  7039  0EF5  0BA0               	decfsz	??_I2C_Initialize,f
  7040  0EF6  2EF3               	goto	u4147
  7041  0EF7  0BA1               	decfsz	??_I2C_Initialize+1,f
  7042  0EF8  2EF3               	goto	u4147
  7043  0EF9  3200               	nop2
  7044                           
  7045                           ;i2c.c: 38: SSP1STAT = 0x80;
  7046  0EFA  3080               	movlw	128
  7047  0EFB  0024               	movlb	4	; select bank4
  7048  0EFC  0094               	movwf	20	;volatile
  7049                           
  7050                           ;i2c.c: 40: SSP1CON1 = 0x26;
  7051  0EFD  3026               	movlw	38
  7052  0EFE  0095               	movwf	21	;volatile
  7053                           
  7054                           ;i2c.c: 42: SSP1CON2 = 0x81;
  7055  0EFF  3081               	movlw	129
  7056  0F00  0096               	movwf	22	;volatile
  7057                           
  7058                           ;i2c.c: 44: SSP1CON3 = 0x00;
  7059  0F01  0197               	clrf	23	;volatile
  7060                           
  7061                           ;i2c.c: 46: SSP1MSK = (0x7F << 1);
  7062  0F02  30FE               	movlw	254
  7063  0F03  0093               	movwf	19	;volatile
  7064                           
  7065                           ;i2c.c: 48: SSP1ADD = (PROTOCOL_Read_Device_Address() << 1);
  7066  0F04  318C  24F6         	fcall	_PROTOCOL_Read_Device_Address
  7067  0F06  0709               	addwf	9,w
  7068  0F07  0024               	movlb	4	; select bank4
  7069  0F08  0092               	movwf	18	;volatile
  7070                           
  7071                           ;i2c.c: 51: PIR1bits.SSP1IF = 0;
  7072  0F09  0020               	movlb	0	; select bank0
  7073  0F0A  1191               	bcf	17,3	;volatile
  7074                           
  7075                           ;i2c.c: 53: PIE1bits.SSP1IE = 1;
  7076  0F0B  0021               	movlb	1	; select bank1
  7077  0F0C  1591               	bsf	17,3	;volatile
  7078  0F0D  0008               	return
  7079  0F0E                     __end_of_I2C_Initialize:	
  7080                           
  7081                           	psect	text39
  7082  0CF6                     __ptext39:	
  7083 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  7084 ;; Defined at:
  7085 ;;		line 94 in file "protocol.c"
  7086 ;; Parameters:    Size  Location     Type
  7087 ;;		None
  7088 ;; Auto vars:     Size  Location     Type
  7089 ;;		None
  7090 ;; Return value:  Size  Location     Type
  7091 ;;                  1    wreg      unsigned char 
  7092 ;; Registers used:
  7093 ;;		wreg
  7094 ;; Tracked objects:
  7095 ;;		On entry : 0/0
  7096 ;;		On exit  : 0/0
  7097 ;;		Unchanged: 0/0
  7098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7103 ;;Total ram usage:        0 bytes
  7104 ;; Hardware stack levels used:    1
  7105 ;; Hardware stack levels required when called:    5
  7106 ;; This function calls:
  7107 ;;		Nothing
  7108 ;; This function is called by:
  7109 ;;		_I2C_Initialize
  7110 ;;		_PROTOCOL_Loop
  7111 ;; This function uses a non-reentrant model
  7112 ;;
  7113                           
  7114                           
  7115                           ;psect for function _PROTOCOL_Read_Device_Address
  7116  0CF6                     _PROTOCOL_Read_Device_Address:	
  7117                           
  7118                           ;protocol.c: 95: return slave_address;
  7119                           
  7120                           ;incstack = 0
  7121                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  7122  0CF6  0020               	movlb	0	; select bank0
  7123  0CF7  0860               	movf	_slave_address,w
  7124  0CF8  0008               	return
  7125  0CF9                     __end_of_PROTOCOL_Read_Device_Address:	
  7126                           
  7127                           	psect	text40
  7128  0E09                     __ptext40:	
  7129 ;; *************** function _EUSART_Initialize *****************
  7130 ;; Defined at:
  7131 ;;		line 75 in file "mcc_generated_files/eusart.c"
  7132 ;; Parameters:    Size  Location     Type
  7133 ;;		None
  7134 ;; Auto vars:     Size  Location     Type
  7135 ;;		None
  7136 ;; Return value:  Size  Location     Type
  7137 ;;                  1    wreg      void 
  7138 ;; Registers used:
  7139 ;;		wreg, status,2
  7140 ;; Tracked objects:
  7141 ;;		On entry : 0/0
  7142 ;;		On exit  : 0/0
  7143 ;;		Unchanged: 0/0
  7144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7147 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7148 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7149 ;;Total ram usage:        1 bytes
  7150 ;; Hardware stack levels used:    1
  7151 ;; Hardware stack levels required when called:    5
  7152 ;; This function calls:
  7153 ;;		Nothing
  7154 ;; This function is called by:
  7155 ;;		_main
  7156 ;;		_SYSTEM_Initialize
  7157 ;; This function uses a non-reentrant model
  7158 ;;
  7159                           
  7160                           
  7161                           ;psect for function _EUSART_Initialize
  7162  0E09                     _EUSART_Initialize:	
  7163                           
  7164                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  7165                           
  7166                           ;incstack = 0
  7167                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  7168  0E09  0021               	movlb	1	; select bank1
  7169  0E0A  1291               	bcf	17,5	;volatile
  7170                           
  7171                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  7172  0E0B  1211               	bcf	17,4	;volatile
  7173                           
  7174                           ;eusart.c: 84: BAUDCON = 0x08;
  7175  0E0C  3008               	movlw	8
  7176  0E0D  0023               	movlb	3	; select bank3
  7177  0E0E  009F               	movwf	31	;volatile
  7178                           
  7179                           ;eusart.c: 87: RCSTA = 0x90;
  7180  0E0F  3090               	movlw	144
  7181  0E10  009D               	movwf	29	;volatile
  7182                           
  7183                           ;eusart.c: 90: TXSTA = 0x24;
  7184  0E11  3024               	movlw	36
  7185  0E12  009E               	movwf	30	;volatile
  7186                           
  7187                           ;eusart.c: 93: SPBRGL = 0x67;
  7188  0E13  3067               	movlw	103
  7189  0E14  009B               	movwf	27	;volatile
  7190                           
  7191                           ;eusart.c: 96: SPBRGH = 0x00;
  7192  0E15  019C               	clrf	28	;volatile
  7193                           
  7194                           ;eusart.c: 100: eusartTxHead = 0;
  7195  0E16  01FC               	clrf	_eusartTxHead	;volatile
  7196                           
  7197                           ;eusart.c: 101: eusartTxTail = 0;
  7198  0E17  0020               	movlb	0	; select bank0
  7199  0E18  01E5               	clrf	_eusartTxTail	;volatile
  7200                           
  7201                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  7202  0E19  3008               	movlw	8
  7203  0E1A  00A0               	movwf	??_EUSART_Initialize
  7204  0E1B  0820               	movf	??_EUSART_Initialize,w
  7205  0E1C  00E4               	movwf	_eusartTxBufferRemaining	;volatile
  7206                           
  7207                           ;eusart.c: 104: eusartRxHead = 0;
  7208  0E1D  01E3               	clrf	_eusartRxHead	;volatile
  7209                           
  7210                           ;eusart.c: 105: eusartRxTail = 0;
  7211  0E1E  01E2               	clrf	_eusartRxTail	;volatile
  7212                           
  7213                           ;eusart.c: 106: eusartRxCount = 0;
  7214  0E1F  01E1               	clrf	_eusartRxCount	;volatile
  7215                           
  7216                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  7217  0E20  0021               	movlb	1	; select bank1
  7218  0E21  1691               	bsf	17,5	;volatile
  7219  0E22  0008               	return
  7220  0E23                     __end_of_EUSART_Initialize:	
  7221                           
  7222                           	psect	text41
  7223  0D2D                     __ptext41:	
  7224 ;; *************** function _ADC_Initialize *****************
  7225 ;; Defined at:
  7226 ;;		line 64 in file "mcc_generated_files/adc.c"
  7227 ;; Parameters:    Size  Location     Type
  7228 ;;		None
  7229 ;; Auto vars:     Size  Location     Type
  7230 ;;		None
  7231 ;; Return value:  Size  Location     Type
  7232 ;;                  1    wreg      void 
  7233 ;; Registers used:
  7234 ;;		wreg, status,2
  7235 ;; Tracked objects:
  7236 ;;		On entry : 0/0
  7237 ;;		On exit  : 0/0
  7238 ;;		Unchanged: 0/0
  7239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7244 ;;Total ram usage:        0 bytes
  7245 ;; Hardware stack levels used:    1
  7246 ;; Hardware stack levels required when called:    5
  7247 ;; This function calls:
  7248 ;;		Nothing
  7249 ;; This function is called by:
  7250 ;;		_main
  7251 ;;		_SYSTEM_Initialize
  7252 ;; This function uses a non-reentrant model
  7253 ;;
  7254                           
  7255                           
  7256                           ;psect for function _ADC_Initialize
  7257  0D2D                     _ADC_Initialize:	
  7258                           
  7259                           ;adc.c: 69: ADCON0 = 0x01;
  7260                           
  7261                           ;incstack = 0
  7262                           ; Regs used in _ADC_Initialize: [wreg+status,2]
  7263  0D2D  3001               	movlw	1
  7264  0D2E  0021               	movlb	1	; select bank1
  7265  0D2F  009D               	movwf	29	;volatile
  7266                           
  7267                           ;adc.c: 72: ADCON1 = 0xC0;
  7268  0D30  30C0               	movlw	192
  7269  0D31  009E               	movwf	30	;volatile
  7270                           
  7271                           ;adc.c: 75: ADRESL = 0x00;
  7272  0D32  019B               	clrf	27	;volatile
  7273                           
  7274                           ;adc.c: 78: ADRESH = 0x00;
  7275  0D33  019C               	clrf	28	;volatile
  7276  0D34  0008               	return
  7277  0D35                     __end_of_ADC_Initialize:	
  7278                           
  7279                           	psect	intentry
  7280  0004                     __pintentry:	
  7281 ;; *************** function _INTERRUPT_InterruptManager *****************
  7282 ;; Defined at:
  7283 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;		None
  7286 ;; Auto vars:     Size  Location     Type
  7287 ;;		None
  7288 ;; Return value:  Size  Location     Type
  7289 ;;                  1    wreg      void 
  7290 ;; Registers used:
  7291 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7292 ;; Tracked objects:
  7293 ;;		On entry : 0/0
  7294 ;;		On exit  : 0/0
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7299 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7300 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7301 ;;Total ram usage:        1 bytes
  7302 ;; Hardware stack levels used:    1
  7303 ;; Hardware stack levels required when called:    4
  7304 ;; This function calls:
  7305 ;;		_EUSART_Receive_ISR
  7306 ;;		_EUSART_Transmit_ISR
  7307 ;;		_I2C_ISR
  7308 ;; This function is called by:
  7309 ;;		Interrupt level 1
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313  0004                     _INTERRUPT_InterruptManager:	
  7314                           
  7315                           ;incstack = 0
  7316  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7317                           
  7318                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7319  0005  3180               	pagesel	$
  7320  0006  0020               	movlb	0	; select bank0
  7321  0007  087F               	movf	127,w
  7322  0008  00FB               	movwf	??_INTERRUPT_InterruptManager
  7323                           
  7324                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
  7325  0009  1F0B               	btfss	11,6	;volatile
  7326  000A  2815               	goto	i1l252
  7327  000B  0021               	movlb	1	; select bank1
  7328  000C  1E11               	btfss	17,4	;volatile
  7329  000D  2815               	goto	i1l252
  7330  000E  0020               	movlb	0	; select bank0
  7331  000F  1E11               	btfss	17,4	;volatile
  7332  0010  2815               	goto	i1l252
  7333                           
  7334                           ;interrupt_manager.c: 55: {
  7335                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
  7336  0011  318E  2674  3180   	fcall	_EUSART_Transmit_ISR
  7337                           
  7338                           ;interrupt_manager.c: 57: }
  7339  0014  282B               	goto	i1l258
  7340  0015                     i1l252:	
  7341                           
  7342                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
  7343  0015  1F0B               	btfss	11,6	;volatile
  7344  0016  2821               	goto	i1l254
  7345  0017  0021               	movlb	1	; select bank1
  7346  0018  1E91               	btfss	17,5	;volatile
  7347  0019  2821               	goto	i1l254
  7348  001A  0020               	movlb	0	; select bank0
  7349  001B  1E91               	btfss	17,5	;volatile
  7350  001C  2821               	goto	i1l254
  7351                           
  7352                           ;interrupt_manager.c: 59: {
  7353                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
  7354  001D  318E  263D  3180   	fcall	_EUSART_Receive_ISR
  7355                           
  7356                           ;interrupt_manager.c: 61: }
  7357  0020  282B               	goto	i1l258
  7358  0021                     i1l254:	
  7359                           
  7360                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
  7361  0021  1F0B               	btfss	11,6	;volatile
  7362  0022  282B               	goto	i1l258
  7363  0023  0021               	movlb	1	; select bank1
  7364  0024  1D91               	btfss	17,3	;volatile
  7365  0025  282B               	goto	i1l258
  7366  0026  0020               	movlb	0	; select bank0
  7367  0027  1D91               	btfss	17,3	;volatile
  7368  0028  282B               	goto	i1l258
  7369                           
  7370                           ;interrupt_manager.c: 63: {
  7371                           ;interrupt_manager.c: 64: I2C_ISR();
  7372  0029  318F  277A         	fcall	_I2C_ISR
  7373  002B                     i1l258:	
  7374                           ;interrupt_manager.c: 66: else
  7375                           ;interrupt_manager.c: 67: {
  7376                           
  7377                           ;interrupt_manager.c: 65: }
  7378                           
  7379  002B  087B               	movf	??_INTERRUPT_InterruptManager,w
  7380  002C  0020               	movlb	0	; select bank0
  7381  002D  00FF               	movwf	127
  7382  002E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7383  002F  0009               	retfie
  7384  0030                     __end_of_INTERRUPT_InterruptManager:	
  7385                           
  7386                           	psect	text43
  7387  0F7A                     __ptext43:	
  7388 ;; *************** function _I2C_ISR *****************
  7389 ;; Defined at:
  7390 ;;		line 57 in file "mcc_generated_files/i2c.c"
  7391 ;; Parameters:    Size  Location     Type
  7392 ;;		None
  7393 ;; Auto vars:     Size  Location     Type
  7394 ;;  i2c_data        1   10[COMMON] unsigned char 
  7395 ;; Return value:  Size  Location     Type
  7396 ;;                  1    wreg      void 
  7397 ;; Registers used:
  7398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7399 ;; Tracked objects:
  7400 ;;		On entry : 0/0
  7401 ;;		On exit  : 0/0
  7402 ;;		Unchanged: 0/0
  7403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7405 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7406 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7407 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7408 ;;Total ram usage:        2 bytes
  7409 ;; Hardware stack levels used:    1
  7410 ;; Hardware stack levels required when called:    3
  7411 ;; This function calls:
  7412 ;;		_I2C_StatusCallback
  7413 ;; This function is called by:
  7414 ;;		_INTERRUPT_InterruptManager
  7415 ;; This function uses a non-reentrant model
  7416 ;;
  7417                           
  7418                           
  7419                           ;psect for function _I2C_ISR
  7420  0F7A                     _I2C_ISR:	
  7421                           
  7422                           ;i2c.c: 59: uint8_t i2c_data = 0x55;
  7423                           
  7424                           ;incstack = 0
  7425                           ; Regs used in _I2C_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7426  0F7A  3055               	movlw	85
  7427  0F7B  00F9               	movwf	??_I2C_ISR
  7428  0F7C  0879               	movf	??_I2C_ISR,w
  7429  0F7D  00FA               	movwf	I2C_ISR@i2c_data
  7430                           
  7431                           ;i2c.c: 64: PIR1bits.SSP1IF = 0;
  7432  0F7E  0020               	movlb	0	; select bank0
  7433  0F7F  1191               	bcf	17,3	;volatile
  7434                           
  7435                           ;i2c.c: 65: i2c_data = SSP1BUF;
  7436  0F80  0024               	movlb	4	; select bank4
  7437  0F81  0811               	movf	17,w	;volatile
  7438  0F82  00F9               	movwf	??_I2C_ISR
  7439  0F83  0879               	movf	??_I2C_ISR,w
  7440  0F84  00FA               	movwf	I2C_ISR@i2c_data
  7441                           
  7442                           ;i2c.c: 66: if(1 == SSP1STATbits.R_nW)
  7443  0F85  1D14               	btfss	20,2	;volatile
  7444  0F86  2F8E               	goto	i1l64
  7445                           
  7446                           ;i2c.c: 67: {
  7447                           ;i2c.c: 68: if((1 == SSP1STATbits.D_nA) && (1 == SSP1CON2bits.ACKSTAT))
  7448  0F87  1A94               	btfsc	20,5	;volatile
  7449  0F88  1F16               	btfss	22,6	;volatile
  7450  0F89  2F8C               	goto	i1l4381
  7451                           
  7452                           ;i2c.c: 69: {
  7453                           ;i2c.c: 71: I2C_StatusCallback(I2C_SLAVE_READ_COMPLETED);
  7454  0F8A  3003               	movlw	3
  7455  0F8B  2F9C               	goto	L6
  7456  0F8C                     i1l4381:	
  7457                           ;i2c.c: 72: }
  7458                           
  7459                           
  7460                           ;i2c.c: 73: else
  7461                           ;i2c.c: 74: {
  7462                           ;i2c.c: 76: I2C_StatusCallback(I2C_SLAVE_READ_REQUEST);
  7463  0F8C  3001               	movlw	1
  7464  0F8D  2F9C               	goto	L6
  7465  0F8E                     i1l64:	
  7466                           ;i2c.c: 77: }
  7467                           ;i2c.c: 78: }
  7468                           
  7469                           
  7470                           ;i2c.c: 79: else if(0 == SSP1STATbits.D_nA)
  7471  0F8E  1A94               	btfsc	20,5	;volatile
  7472  0F8F  2F97               	goto	i1l4389
  7473                           
  7474                           ;i2c.c: 80: {
  7475                           ;i2c.c: 83: if(0x00 == i2c_data)
  7476  0F90  087A               	movf	I2C_ISR@i2c_data,w
  7477  0F91  1D03               	btfss	3,2
  7478  0F92  2F95               	goto	i1l4387
  7479                           
  7480                           ;i2c.c: 84: {
  7481                           ;i2c.c: 86: I2C_StatusCallback(I2C_SLAVE_GENERAL_CALL_REQUEST);
  7482  0F93  3004               	movlw	4
  7483  0F94  2F9C               	goto	L6
  7484  0F95                     i1l4387:	
  7485                           ;i2c.c: 87: }
  7486                           
  7487                           
  7488                           ;i2c.c: 88: else
  7489                           ;i2c.c: 89: {
  7490                           ;i2c.c: 91: I2C_StatusCallback(I2C_SLAVE_WRITE_REQUEST);
  7491  0F95  3000               	movlw	0
  7492  0F96  2F9C               	goto	L6
  7493  0F97                     i1l4389:	
  7494                           ;i2c.c: 92: }
  7495                           ;i2c.c: 93: }
  7496                           
  7497                           
  7498                           ;i2c.c: 94: else
  7499                           ;i2c.c: 95: {
  7500                           ;i2c.c: 96: I2C_slaveWriteData = i2c_data;
  7501  0F97  087A               	movf	I2C_ISR@i2c_data,w
  7502  0F98  00F9               	movwf	??_I2C_ISR
  7503  0F99  0879               	movf	??_I2C_ISR,w
  7504  0F9A  00FD               	movwf	_I2C_slaveWriteData	;volatile
  7505                           
  7506                           ;i2c.c: 99: I2C_StatusCallback(I2C_SLAVE_WRITE_COMPLETED);
  7507  0F9B  3002               	movlw	2
  7508  0F9C                     L6:	
  7509  0F9C  3184  2493         	fcall	_I2C_StatusCallback
  7510                           
  7511                           ;i2c.c: 100: }
  7512                           ;i2c.c: 102: SSP1CON1bits.CKP = 1;
  7513  0F9E  0024               	movlb	4	; select bank4
  7514  0F9F  1615               	bsf	21,4	;volatile
  7515  0FA0  0008               	return
  7516  0FA1                     __end_of_I2C_ISR:	
  7517                           
  7518                           	psect	text44
  7519  0493                     __ptext44:	
  7520 ;; *************** function _I2C_StatusCallback *****************
  7521 ;; Defined at:
  7522 ;;		line 106 in file "mcc_generated_files/i2c.c"
  7523 ;; Parameters:    Size  Location     Type
  7524 ;;  i2c_bus_stat    1    wreg     enum E2702
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;  i2c_bus_stat    1    7[COMMON] enum E2702
  7527 ;;  pdata           1    8[COMMON] PTR unsigned char 
  7528 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  7529 ;;		 -> readbuf.type(1), readbuf(5), position(4), 
  7530 ;; Return value:  Size  Location     Type
  7531 ;;                  1    wreg      void 
  7532 ;; Registers used:
  7533 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7534 ;; Tracked objects:
  7535 ;;		On entry : 0/0
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7540 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7543 ;;Total ram usage:        3 bytes
  7544 ;; Hardware stack levels used:    1
  7545 ;; Hardware stack levels required when called:    2
  7546 ;; This function calls:
  7547 ;;		_PROTOCOL_Backplane_Slave_Enabled
  7548 ;;		_PROTOCOL_I2C_GET
  7549 ;;		_PROTOCOL_I2C_SEN
  7550 ;;		_PROTOCOL_I2C_WHO
  7551 ;;		_PROTOCOL_INV
  7552 ;;		_PROTOCOL_RST
  7553 ;;		_PROTOCOL_Read_Lock
  7554 ;;		i1_PROTOCOL_EXT
  7555 ;;		i1_PROTOCOL_SAV
  7556 ;;		i1_PROTOCOL_SET
  7557 ;;		i1_PROTOCOL_STA
  7558 ;;		i1_PROTOCOL_STP
  7559 ;; This function is called by:
  7560 ;;		_I2C_ISR
  7561 ;; This function uses a non-reentrant model
  7562 ;;
  7563                           
  7564                           
  7565                           ;psect for function _I2C_StatusCallback
  7566  0493                     _I2C_StatusCallback:	
  7567                           
  7568                           ;incstack = 0
  7569                           ; Regs used in _I2C_StatusCallback: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7570                           ;I2C_StatusCallback@i2c_bus_state stored from wreg
  7571  0493  00F7               	movwf	I2C_StatusCallback@i2c_bus_state
  7572                           
  7573                           ;i2c.c: 109: static uint8_t slaveWriteType = SLAVE_NORMAL_DATA;
  7574                           ;i2c.c: 110: static uint8_t next = 0x00;
  7575                           ;i2c.c: 111: static uint8_t ext_len = 0;
  7576                           ;i2c.c: 112: static uint8_t ext_cnt = 0;
  7577                           ;i2c.c: 113: static char ext_buf[48];
  7578                           ;i2c.c: 114: uint8_t *pdata;
  7579                           ;i2c.c: 115: switch (i2c_bus_state)
  7580  0494  2D4C               	goto	i1l4355
  7581  0495                     i1l86:	
  7582                           ;i2c.c: 116: {
  7583                           ;i2c.c: 117: case I2C_SLAVE_WRITE_REQUEST:
  7584                           
  7585                           
  7586                           ;i2c.c: 118: slaveWriteType = SLAVE_DATA_ADDRESS;
  7587  0495  0020               	movlb	0	; select bank0
  7588  0496  01EA               	clrf	I2C_StatusCallback@slaveWriteType
  7589  0497  0AEA               	incf	I2C_StatusCallback@slaveWriteType,f
  7590                           
  7591                           ;i2c.c: 119: break;
  7592  0498  0008               	return
  7593  0499                     i1l4281:	
  7594                           ;i2c.c: 121: case I2C_SLAVE_GENERAL_CALL_REQUEST:
  7595                           
  7596                           
  7597                           ;i2c.c: 123: slaveWriteType = SLAVE_GENERAL_CALL;
  7598  0499  3002               	movlw	2
  7599  049A  00F6               	movwf	??_I2C_StatusCallback
  7600  049B  0876               	movf	??_I2C_StatusCallback,w
  7601  049C  0020               	movlb	0	; select bank0
  7602  049D  00EA               	movwf	I2C_StatusCallback@slaveWriteType
  7603                           
  7604                           ;i2c.c: 124: break;
  7605  049E  0008               	return
  7606  049F                     i1l4283:	
  7607                           ;i2c.c: 132: case 0x01:
  7608                           
  7609                           ;i2c.c: 131: switch(next) {
  7610                           
  7611                           ;i2c.c: 129: {
  7612                           ;i2c.c: 130: case SLAVE_DATA_ADDRESS:
  7613                           
  7614                           ;i2c.c: 128: switch(slaveWriteType)
  7615                           
  7616                           ;i2c.c: 126: case I2C_SLAVE_WRITE_COMPLETED:
  7617                           
  7618                           
  7619                           ;i2c.c: 133: PROTOCOL_SET(I2C_slaveWriteData);
  7620  049F  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7621  04A0  318D  25C9  3184   	fcall	i1_PROTOCOL_SET
  7622  04A3  2D0E               	goto	i1l4329
  7623  04A4                     i1l4287:	
  7624                           ;i2c.c: 138: case 0x04:
  7625                           
  7626                           ;i2c.c: 137: switch(I2C_slaveWriteData) {
  7627                           
  7628                           ;i2c.c: 136: case 0x00:
  7629                           
  7630                           ;i2c.c: 135: break;
  7631                           
  7632                           ;i2c.c: 134: next = 0x00;
  7633                           
  7634                           
  7635                           ;i2c.c: 139: PROTOCOL_STA();
  7636  04A4  318D  2507  3184   	fcall	i1_PROTOCOL_STA
  7637                           
  7638                           ;i2c.c: 140: break;
  7639  04A7  2D27               	goto	i1l4339
  7640  04A8                     i1l4289:	
  7641                           ;i2c.c: 141: case 0x05:
  7642                           
  7643                           
  7644                           ;i2c.c: 142: PROTOCOL_STP();
  7645  04A8  318C  24F3  3184   	fcall	i1_PROTOCOL_STP
  7646                           
  7647                           ;i2c.c: 143: break;
  7648  04AB  2D27               	goto	i1l4339
  7649  04AC                     i1l4291:	
  7650                           ;i2c.c: 144: case 0x03:
  7651                           
  7652                           
  7653                           ;i2c.c: 145: PROTOCOL_SAV();
  7654  04AC  318D  2535  3184   	fcall	i1_PROTOCOL_SAV
  7655                           
  7656                           ;i2c.c: 146: break;
  7657  04AF  2D27               	goto	i1l4339
  7658  04B0                     i1l4293:	
  7659                           ;i2c.c: 147: case 0x06:
  7660                           
  7661                           
  7662                           ;i2c.c: 148: PROTOCOL_INV();
  7663  04B0  318D  2503  3184   	fcall	_PROTOCOL_INV
  7664                           
  7665                           ;i2c.c: 149: break;
  7666  04B3  2D27               	goto	i1l4339
  7667  04B4                     i1l4295:	
  7668                           ;i2c.c: 150: case 0x0c:
  7669                           
  7670                           
  7671                           ;i2c.c: 151: PROTOCOL_RST();
  7672  04B4  318D  2559  3184   	fcall	_PROTOCOL_RST
  7673                           
  7674                           ;i2c.c: 152: break;
  7675  04B7  2D27               	goto	i1l4339
  7676  04B8                     i1l103:	
  7677                           ;i2c.c: 153: case 0x08:
  7678                           
  7679                           
  7680                           ;i2c.c: 154: next = 0x01;
  7681  04B8  01E9               	clrf	I2C_StatusCallback@next
  7682  04B9  0AE9               	incf	I2C_StatusCallback@next,f
  7683                           
  7684                           ;i2c.c: 155: break;
  7685  04BA  2D27               	goto	i1l4339
  7686  04BB                     i1l4297:	
  7687                           ;i2c.c: 156: case 0x0a:
  7688                           
  7689                           
  7690                           ;i2c.c: 157: next = 0x02;
  7691  04BB  3002               	movlw	2
  7692  04BC  2CEF               	goto	L7
  7693  04BD                     i1l4301:	
  7694                           ;i2c.c: 159: }
  7695                           
  7696                           ;i2c.c: 158: break;
  7697                           
  7698  04BD  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7699                           
  7700                           ; Switch size 1, requested type "space"
  7701                           ; Number of cases is 7, Range of values is 3 to 12
  7702                           ; switch strategies available:
  7703                           ; Name         Instructions Cycles
  7704                           ; simple_byte           22    12 (average)
  7705                           ; direct_byte           29     9 (fixed)
  7706                           ; jumptable            263     9 (fixed)
  7707                           ;	Chosen strategy is simple_byte
  7708  04BE  3A03               	xorlw	3	; case 3
  7709  04BF  1903               	skipnz
  7710  04C0  2CAC               	goto	i1l4291
  7711  04C1  3A07               	xorlw	7	; case 4
  7712  04C2  1903               	skipnz
  7713  04C3  2CA4               	goto	i1l4287
  7714  04C4  3A01               	xorlw	1	; case 5
  7715  04C5  1903               	skipnz
  7716  04C6  2CA8               	goto	i1l4289
  7717  04C7  3A03               	xorlw	3	; case 6
  7718  04C8  1903               	skipnz
  7719  04C9  2CB0               	goto	i1l4293
  7720  04CA  3A0E               	xorlw	14	; case 8
  7721  04CB  1903               	skipnz
  7722  04CC  2CB8               	goto	i1l103
  7723  04CD  3A02               	xorlw	2	; case 10
  7724  04CE  1903               	skipnz
  7725  04CF  2CBB               	goto	i1l4297
  7726  04D0  3A06               	xorlw	6	; case 12
  7727  04D1  1903               	skipnz
  7728  04D2  2CB4               	goto	i1l4295
  7729  04D3  2D27               	goto	i1l4339
  7730                           
  7731                           ;i2c.c: 161: }
  7732                           
  7733                           ;i2c.c: 160: break;
  7734  04D4  2D27               	goto	i1l4339
  7735  04D5                     i1l4305:	
  7736  04D5  0869               	movf	I2C_StatusCallback@next,w
  7737                           
  7738                           ; Switch size 1, requested type "space"
  7739                           ; Number of cases is 2, Range of values is 0 to 1
  7740                           ; switch strategies available:
  7741                           ; Name         Instructions Cycles
  7742                           ; simple_byte            7     4 (average)
  7743                           ; direct_byte           10     6 (fixed)
  7744                           ; jumptable            260     6 (fixed)
  7745                           ;	Chosen strategy is simple_byte
  7746  04D6  3A00               	xorlw	0	; case 0
  7747  04D7  1903               	skipnz
  7748  04D8  2CBD               	goto	i1l4301
  7749  04D9  3A01               	xorlw	1	; case 1
  7750  04DA  1903               	skipnz
  7751  04DB  2C9F               	goto	i1l4283
  7752  04DC  2D27               	goto	i1l4339
  7753                           
  7754                           ;i2c.c: 162: break;
  7755  04DD  2D27               	goto	i1l4339
  7756  04DE                     i1l4307:	
  7757                           ;i2c.c: 164: case SLAVE_GENERAL_CALL:
  7758                           
  7759                           
  7760                           ;i2c.c: 165: if (I2C_slaveWriteData == 0x02) {
  7761  04DE  3002               	movlw	2
  7762  04DF  067D               	xorwf	_I2C_slaveWriteData,w	;volatile
  7763  04E0  1D03               	btfss	3,2
  7764  04E1  2D27               	goto	i1l4339
  7765                           
  7766                           ;i2c.c: 166: SSP1CON2bits.GCEN = 0;
  7767  04E2  0024               	movlb	4	; select bank4
  7768  04E3  1396               	bcf	22,7	;volatile
  7769                           
  7770                           ;i2c.c: 167: PROTOCOL_Backplane_Slave_Enabled();
  7771  04E4  318C  24FF  3184   	fcall	_PROTOCOL_Backplane_Slave_Enabled
  7772                           
  7773                           ;i2c.c: 168: }
  7774                           ;i2c.c: 169: break;
  7775  04E7  2D27               	goto	i1l4339
  7776  04E8                     i1l4313:	
  7777                           ;i2c.c: 173: case 0x02:
  7778                           
  7779                           ;i2c.c: 172: switch(next) {
  7780                           
  7781                           ;i2c.c: 171: case SLAVE_NORMAL_DATA:
  7782                           
  7783                           
  7784                           ;i2c.c: 174: ext_len = I2C_slaveWriteData;
  7785  04E8  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7786  04E9  00F6               	movwf	??_I2C_StatusCallback
  7787  04EA  0876               	movf	??_I2C_StatusCallback,w
  7788  04EB  0020               	movlb	0	; select bank0
  7789  04EC  00E8               	movwf	I2C_StatusCallback@ext_len
  7790                           
  7791                           ;i2c.c: 175: ext_cnt = 0;
  7792  04ED  01E7               	clrf	I2C_StatusCallback@ext_cnt
  7793                           
  7794                           ;i2c.c: 176: next = 0x03;
  7795  04EE  3003               	movlw	3
  7796  04EF                     L7:	
  7797  04EF  00F6               	movwf	??_I2C_StatusCallback
  7798  04F0  0876               	movf	??_I2C_StatusCallback,w
  7799  04F1  00E9               	movwf	I2C_StatusCallback@next
  7800                           
  7801                           ;i2c.c: 177: break;
  7802  04F2  2D27               	goto	i1l4339
  7803  04F3                     i1l4319:	
  7804                           ;i2c.c: 178: case 0x03:
  7805                           
  7806                           
  7807                           ;i2c.c: 179: ext_buf[ext_cnt++] = (char)I2C_slaveWriteData;
  7808  04F3  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7809  04F4  00F6               	movwf	??_I2C_StatusCallback
  7810  04F5  0867               	movf	I2C_StatusCallback@ext_cnt,w
  7811  04F6  3EA0               	addlw	(low (I2C_StatusCallback@ext_buf| (0+256)))& (0+255)
  7812  04F7  0086               	movwf	6
  7813  04F8  3001               	movlw	1	; select bank3/4
  7814  04F9  0087               	movwf	7
  7815  04FA  0876               	movf	??_I2C_StatusCallback,w
  7816  04FB  0081               	movwf	1
  7817  04FC  3001               	movlw	1
  7818  04FD  00F6               	movwf	??_I2C_StatusCallback
  7819  04FE  0876               	movf	??_I2C_StatusCallback,w
  7820  04FF  07E7               	addwf	I2C_StatusCallback@ext_cnt,f
  7821                           
  7822                           ;i2c.c: 180: if (ext_cnt >= ext_len) {
  7823  0500  0868               	movf	I2C_StatusCallback@ext_len,w
  7824  0501  0267               	subwf	I2C_StatusCallback@ext_cnt,w
  7825  0502  1C03               	skipc
  7826  0503  2D27               	goto	i1l4339
  7827                           
  7828                           ;i2c.c: 181: if (!PROTOCOL_Read_Lock()) PROTOCOL_EXT(&ext_buf[0]);
  7829  0504  318C  24F0  3184   	fcall	_PROTOCOL_Read_Lock
  7830  0507  3A00               	xorlw	0
  7831  0508  1D03               	skipz
  7832  0509  2D0E               	goto	i1l4329
  7833  050A  30A0               	movlw	(low (I2C_StatusCallback@ext_buf| (0+256)))& (0+255)
  7834  050B  318C  24E9  3184   	fcall	i1_PROTOCOL_EXT
  7835  050E                     i1l4329:	
  7836                           
  7837                           ;i2c.c: 182: next = 0x00;
  7838  050E  0020               	movlb	0	; select bank0
  7839  050F  01E9               	clrf	I2C_StatusCallback@next
  7840                           
  7841                           ;i2c.c: 185: }
  7842                           
  7843                           ;i2c.c: 183: }
  7844                           ;i2c.c: 184: break;
  7845  0510  2D27               	goto	i1l4339
  7846  0511                     i1l4333:	
  7847  0511  0020               	movlb	0	; select bank0
  7848  0512  0869               	movf	I2C_StatusCallback@next,w
  7849                           
  7850                           ; Switch size 1, requested type "space"
  7851                           ; Number of cases is 2, Range of values is 2 to 3
  7852                           ; switch strategies available:
  7853                           ; Name         Instructions Cycles
  7854                           ; simple_byte            7     4 (average)
  7855                           ; direct_byte           13     9 (fixed)
  7856                           ; jumptable            263     9 (fixed)
  7857                           ;	Chosen strategy is simple_byte
  7858  0513  3A02               	xorlw	2	; case 2
  7859  0514  1903               	skipnz
  7860  0515  2CE8               	goto	i1l4313
  7861  0516  3A01               	xorlw	1	; case 3
  7862  0517  1903               	skipnz
  7863  0518  2CF3               	goto	i1l4319
  7864  0519  2D27               	goto	i1l4339
  7865                           
  7866                           ;i2c.c: 190: }
  7867                           
  7868                           ;i2c.c: 188: break;
  7869                           
  7870                           ;i2c.c: 187: default:
  7871                           
  7872                           ;i2c.c: 186: break;
  7873  051A  2D27               	goto	i1l4339
  7874  051B                     i1l4337:	
  7875  051B  0020               	movlb	0	; select bank0
  7876  051C  086A               	movf	I2C_StatusCallback@slaveWriteType,w
  7877                           
  7878                           ; Switch size 1, requested type "space"
  7879                           ; Number of cases is 3, Range of values is 0 to 2
  7880                           ; switch strategies available:
  7881                           ; Name         Instructions Cycles
  7882                           ; simple_byte           10     6 (average)
  7883                           ; direct_byte           12     6 (fixed)
  7884                           ; jumptable            260     6 (fixed)
  7885                           ;	Chosen strategy is simple_byte
  7886  051D  3A00               	xorlw	0	; case 0
  7887  051E  1903               	skipnz
  7888  051F  2D11               	goto	i1l4333
  7889  0520  3A01               	xorlw	1	; case 1
  7890  0521  1903               	skipnz
  7891  0522  2CD5               	goto	i1l4305
  7892  0523  3A03               	xorlw	3	; case 2
  7893  0524  1903               	skipnz
  7894  0525  2CDE               	goto	i1l4307
  7895  0526  2D27               	goto	i1l4339
  7896  0527                     i1l4339:	
  7897                           
  7898                           ;i2c.c: 192: slaveWriteType = SLAVE_NORMAL_DATA;
  7899  0527  0020               	movlb	0	; select bank0
  7900  0528  01EA               	clrf	I2C_StatusCallback@slaveWriteType
  7901                           
  7902                           ;i2c.c: 193: break;
  7903  0529  0008               	return
  7904  052A                     i1l4341:	
  7905                           ;i2c.c: 197: {
  7906                           ;i2c.c: 198: case 0x01:
  7907                           
  7908                           ;i2c.c: 196: switch (I2C_slaveWriteData)
  7909                           
  7910                           ;i2c.c: 195: case I2C_SLAVE_READ_REQUEST:
  7911                           
  7912                           
  7913                           ;i2c.c: 199: SSP1BUF = PROTOCOL_I2C_WHO();
  7914  052A  318C  24ED         	fcall	_PROTOCOL_I2C_WHO
  7915  052C  0024               	movlb	4	; select bank4
  7916  052D  0091               	movwf	17	;volatile
  7917                           
  7918                           ;i2c.c: 200: break;
  7919  052E  0008               	return
  7920  052F                     i1l4343:	
  7921                           ;i2c.c: 201: case 0x07:
  7922                           
  7923                           
  7924                           ;i2c.c: 202: pdata = PROTOCOL_I2C_SEN();
  7925  052F  3187  2759         	fcall	_PROTOCOL_I2C_SEN
  7926  0531  00F6               	movwf	??_I2C_StatusCallback
  7927  0532  0876               	movf	??_I2C_StatusCallback,w
  7928  0533  00F8               	movwf	I2C_StatusCallback@pdata
  7929                           
  7930                           ;i2c.c: 203: SSP1BUF = *pdata;
  7931  0534  0878               	movf	I2C_StatusCallback@pdata,w
  7932  0535  0086               	movwf	6
  7933  0536  0187               	clrf	7
  7934  0537  0801               	movf	1,w
  7935  0538  0024               	movlb	4	; select bank4
  7936  0539  0091               	movwf	17	;volatile
  7937                           
  7938                           ;i2c.c: 204: break;
  7939  053A  0008               	return
  7940  053B                     i1l4347:	
  7941                           ;i2c.c: 205: case 0x09:
  7942                           
  7943                           
  7944                           ;i2c.c: 206: SSP1BUF = PROTOCOL_I2C_GET();
  7945  053B  318C  24EA         	fcall	_PROTOCOL_I2C_GET
  7946  053D  0024               	movlb	4	; select bank4
  7947  053E  0091               	movwf	17	;volatile
  7948                           
  7949                           ;i2c.c: 208: }
  7950                           
  7951                           ;i2c.c: 207: break;
  7952  053F  0008               	return
  7953  0540                     i1l4351:	
  7954  0540  087D               	movf	_I2C_slaveWriteData,w	;volatile
  7955                           
  7956                           ; Switch size 1, requested type "space"
  7957                           ; Number of cases is 3, Range of values is 1 to 9
  7958                           ; switch strategies available:
  7959                           ; Name         Instructions Cycles
  7960                           ; simple_byte           10     6 (average)
  7961                           ; direct_byte           27     9 (fixed)
  7962                           ; jumptable            263     9 (fixed)
  7963                           ;	Chosen strategy is simple_byte
  7964  0541  3A01               	xorlw	1	; case 1
  7965  0542  1903               	skipnz
  7966  0543  2D2A               	goto	i1l4341
  7967  0544  3A06               	xorlw	6	; case 7
  7968  0545  1903               	skipnz
  7969  0546  2D2F               	goto	i1l4343
  7970  0547  3A0E               	xorlw	14	; case 9
  7971  0548  1903               	skipnz
  7972  0549  2D3B               	goto	i1l4347
  7973  054A  2D56               	goto	i1l124
  7974                           
  7975                           ;i2c.c: 216: }
  7976                           
  7977                           ;i2c.c: 214: break;
  7978                           
  7979                           ;i2c.c: 213: default:
  7980                           
  7981                           ;i2c.c: 212: break;
  7982                           
  7983                           ;i2c.c: 211: case I2C_SLAVE_READ_COMPLETED:
  7984                           
  7985                           ;i2c.c: 209: break;
  7986  054B  0008               	return
  7987  054C                     i1l4355:	
  7988  054C  0877               	movf	I2C_StatusCallback@i2c_bus_state,w
  7989                           
  7990                           ; Switch size 1, requested type "space"
  7991                           ; Number of cases is 5, Range of values is 0 to 4
  7992                           ; switch strategies available:
  7993                           ; Name         Instructions Cycles
  7994                           ; direct_byte           16     6 (fixed)
  7995                           ; simple_byte           16     9 (average)
  7996                           ; jumptable            260     6 (fixed)
  7997                           ;	Chosen strategy is direct_byte
  7998  054D  0084               	movwf	4
  7999  054E  3005               	movlw	5
  8000  054F  0204               	subwf	4,w
  8001  0550  1803               	skipnc
  8002  0551  0008               	return
  8003  0552  3188               	movlp	high i1S4579
  8004  0553  3504               	lslf	4,w
  8005  0554  3E00               	addlw	low i1S4579
  8006  0555  0082               	movwf	2
  8007  0556                     i1l124:	
  8008  0556  0008               	return
  8009  0557                     __end_of_I2C_StatusCallback:	
  8010                           
  8011                           	psect	swtext1
  8012  0800                     __pswtext1:	
  8013  0800                     i1S4579:	
  8014  0800  3184  2C95         	ljmp	i1l86
  8015  0802  3185  2D40         	ljmp	i1l4351
  8016  0804  3185  2D1B         	ljmp	i1l4337
  8017  0806  3185  2D56         	ljmp	i1l124
  8018  0808  3184  2C99         	ljmp	i1l4281
  8019                           
  8020                           	psect	text45
  8021  0CF3                     __ptext45:	
  8022 ;; *************** function i1_PROTOCOL_STP *****************
  8023 ;; Defined at:
  8024 ;;		line 103 in file "protocol.c"
  8025 ;; Parameters:    Size  Location     Type
  8026 ;;		None
  8027 ;; Auto vars:     Size  Location     Type
  8028 ;;		None
  8029 ;; Return value:  Size  Location     Type
  8030 ;;                  1    wreg      void 
  8031 ;; Registers used:
  8032 ;;		wreg, status,2, status,0
  8033 ;; Tracked objects:
  8034 ;;		On entry : 0/0
  8035 ;;		On exit  : 0/0
  8036 ;;		Unchanged: 0/0
  8037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8042 ;;Total ram usage:        0 bytes
  8043 ;; Hardware stack levels used:    1
  8044 ;; This function calls:
  8045 ;;		Nothing
  8046 ;; This function is called by:
  8047 ;;		_I2C_StatusCallback
  8048 ;; This function uses a non-reentrant model
  8049 ;;
  8050                           
  8051                           
  8052                           ;psect for function i1_PROTOCOL_STP
  8053  0CF3                     i1_PROTOCOL_STP:	
  8054                           
  8055                           ;protocol.c: 105: running = 0;
  8056                           
  8057                           ;incstack = 0
  8058                           ; Regs used in i1_PROTOCOL_STP: [wreg+status,2+status,0]
  8059  0CF3  0020               	movlb	0	; select bank0
  8060  0CF4  01DC               	clrf	_running
  8061  0CF5  0008               	return
  8062  0CF6                     __end_ofi1_PROTOCOL_STP:	
  8063                           
  8064                           	psect	text46
  8065  0D07                     __ptext46:	
  8066 ;; *************** function i1_PROTOCOL_STA *****************
  8067 ;; Defined at:
  8068 ;;		line 98 in file "protocol.c"
  8069 ;; Parameters:    Size  Location     Type
  8070 ;;		None
  8071 ;; Auto vars:     Size  Location     Type
  8072 ;;		None
  8073 ;; Return value:  Size  Location     Type
  8074 ;;                  1    wreg      void 
  8075 ;; Registers used:
  8076 ;;		wreg, status,2, status,0
  8077 ;; Tracked objects:
  8078 ;;		On entry : 0/0
  8079 ;;		On exit  : 0/0
  8080 ;;		Unchanged: 0/0
  8081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8086 ;;Total ram usage:        0 bytes
  8087 ;; Hardware stack levels used:    1
  8088 ;; This function calls:
  8089 ;;		Nothing
  8090 ;; This function is called by:
  8091 ;;		_I2C_StatusCallback
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           
  8096                           ;psect for function i1_PROTOCOL_STA
  8097  0D07                     i1_PROTOCOL_STA:	
  8098                           
  8099                           ;protocol.c: 100: running = 1;
  8100                           
  8101                           ;incstack = 0
  8102                           ; Regs used in i1_PROTOCOL_STA: [wreg+status,2+status,0]
  8103  0D07  0020               	movlb	0	; select bank0
  8104  0D08  01DC               	clrf	_running
  8105  0D09  0ADC               	incf	_running,f
  8106  0D0A  0008               	return
  8107  0D0B                     __end_ofi1_PROTOCOL_STA:	
  8108                           
  8109                           	psect	text47
  8110  0DC9                     __ptext47:	
  8111 ;; *************** function i1_PROTOCOL_SET *****************
  8112 ;; Defined at:
  8113 ;;		line 116 in file "protocol.c"
  8114 ;; Parameters:    Size  Location     Type
  8115 ;;  value_          1    wreg     unsigned char 
  8116 ;; Auto vars:     Size  Location     Type
  8117 ;;  value_          1    5[COMMON] unsigned char 
  8118 ;; Return value:  Size  Location     Type
  8119 ;;                  1    wreg      void 
  8120 ;; Registers used:
  8121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8122 ;; Tracked objects:
  8123 ;;		On entry : 0/0
  8124 ;;		On exit  : 0/0
  8125 ;;		Unchanged: 0/0
  8126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8128 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8131 ;;Total ram usage:        2 bytes
  8132 ;; Hardware stack levels used:    1
  8133 ;; Hardware stack levels required when called:    1
  8134 ;; This function calls:
  8135 ;;		Absolute function
  8136 ;;		i1_set_handler
  8137 ;; This function is called by:
  8138 ;;		_I2C_StatusCallback
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           
  8143                           ;psect for function i1_PROTOCOL_SET
  8144  0DC9                     i1_PROTOCOL_SET:	
  8145                           
  8146                           ;incstack = 0
  8147                           ; Regs used in i1_PROTOCOL_SET: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8148                           ;i1PROTOCOL_SET@value_ stored from wreg
  8149  0DC9  00F5               	movwf	i1PROTOCOL_SET@value_
  8150                           
  8151                           ;protocol.c: 117: value = value_;
  8152  0DCA  0875               	movf	i1PROTOCOL_SET@value_,w
  8153  0DCB  00F4               	movwf	??i1_PROTOCOL_SET
  8154  0DCC  0874               	movf	??i1_PROTOCOL_SET,w
  8155  0DCD  0020               	movlb	0	; select bank0
  8156  0DCE  00DE               	movwf	_value
  8157                           
  8158                           ;protocol.c: 118: if (PROTOCOL_Set_Handler) PROTOCOL_Set_Handler(value);
  8159  0DCF  0852               	movf	_PROTOCOL_Set_Handler,w
  8160  0DD0  0453               	iorwf	_PROTOCOL_Set_Handler+1,w
  8161  0DD1  1903               	btfsc	3,2
  8162  0DD2  0008               	return
  8163  0DD3  085E               	movf	_value,w
  8164  0DD4  00F4               	movwf	??i1_PROTOCOL_SET
  8165  0DD5  0874               	movf	??i1_PROTOCOL_SET,w
  8166  0DD6  00F0               	movwf	i1set_handler@value
  8167  0DD7  0853               	movf	_PROTOCOL_Set_Handler+1,w
  8168  0DD8  008A               	movwf	10
  8169  0DD9  0852               	movf	_PROTOCOL_Set_Handler,w
  8170  0DDA  000A               	callw
  8171  0DDB  318D               	pagesel	$
  8172  0DDC  0008               	return
  8173  0DDD                     __end_ofi1_PROTOCOL_SET:	
  8174                           
  8175                           	psect	text48
  8176  0F55                     __ptext48:	
  8177 ;; *************** function i1_set_handler *****************
  8178 ;; Defined at:
  8179 ;;		line 66 in file "main.c"
  8180 ;; Parameters:    Size  Location     Type
  8181 ;;  value           1    0[COMMON] unsigned char 
  8182 ;; Auto vars:     Size  Location     Type
  8183 ;;  set_handler     1    3[COMMON] unsigned char 
  8184 ;;  set_handler     1    2[COMMON] unsigned char 
  8185 ;; Return value:  Size  Location     Type
  8186 ;;                  1    wreg      void 
  8187 ;; Registers used:
  8188 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8189 ;; Tracked objects:
  8190 ;;		On entry : 0/0
  8191 ;;		On exit  : 0/0
  8192 ;;		Unchanged: 0/0
  8193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8194 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8195 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8196 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;Total ram usage:        4 bytes
  8199 ;; Hardware stack levels used:    1
  8200 ;; This function calls:
  8201 ;;		Nothing
  8202 ;; This function is called by:
  8203 ;; This function uses a non-reentrant model
  8204 ;;
  8205                           
  8206                           
  8207                           ;psect for function i1_set_handler
  8208  0F55                     i1_set_handler:	
  8209  0F55                     i1l2591:	
  8210                           ;incstack = 0
  8211                           ; Regs used in i1_set_handler: [wreg+fsr1l+fsr1h+status,2+status,0]
  8212                           
  8213                           
  8214                           ;main.c: 67: uint8_t i;
  8215                           ;main.c: 68: uint8_t mask = 0b00000001;
  8216  0F55  01F2               	clrf	i1set_handler@mask
  8217  0F56  0AF2               	incf	i1set_handler@mask,f
  8218                           
  8219                           ;main.c: 69: for(i=0; i<4; i++) {
  8220  0F57  01F3               	clrf	i1set_handler@i
  8221  0F58                     L8:	
  8222  0F58  3004               	movlw	4
  8223  0F59  0273               	subwf	i1set_handler@i,w
  8224  0F5A  1803               	btfsc	3,0
  8225  0F5B  0008               	return
  8226                           
  8227                           ;main.c: 70: if ((value & mask) == 0) {
  8228  0F5C  0870               	movf	i1set_handler@value,w
  8229  0F5D  0572               	andwf	i1set_handler@mask,w
  8230  0F5E  1D03               	btfss	3,2
  8231  0F5F  2F6B               	goto	i1l2603
  8232                           
  8233                           ;main.c: 71: analog_in_flags[i] = 0;
  8234  0F60  0873               	movf	i1set_handler@i,w
  8235  0F61  3EB4               	addlw	(low (_analog_in_flags| 0))& (0+255)
  8236  0F62  0086               	movwf	6
  8237  0F63  0187               	clrf	7
  8238  0F64  0181               	clrf	1
  8239                           
  8240                           ;main.c: 72: position[i] = 0;
  8241  0F65  0873               	movf	i1set_handler@i,w
  8242  0F66  3EDE               	addlw	(low (_position| 0))& (0+255)
  8243  0F67  0086               	movwf	6
  8244  0F68  0187               	clrf	7
  8245  0F69  0181               	clrf	1
  8246                           
  8247                           ;main.c: 73: } else {
  8248  0F6A  2F71               	goto	i1l2605
  8249  0F6B                     i1l2603:	
  8250                           
  8251                           ;main.c: 74: analog_in_flags[i] = 1;
  8252  0F6B  0873               	movf	i1set_handler@i,w
  8253  0F6C  3EB4               	addlw	(low (_analog_in_flags| 0))& (0+255)
  8254  0F6D  0086               	movwf	6
  8255  0F6E  0187               	clrf	7
  8256  0F6F  0181               	clrf	1
  8257  0F70  0A81               	incf	1,f
  8258  0F71                     i1l2605:	
  8259                           
  8260                           ;main.c: 75: }
  8261                           ;main.c: 76: mask = mask << 1;
  8262  0F71  3572               	lslf	i1set_handler@mask,w
  8263  0F72  00F1               	movwf	??i1_set_handler
  8264  0F73  0871               	movf	??i1_set_handler,w
  8265  0F74  00F2               	movwf	i1set_handler@mask
  8266  0F75  3001               	movlw	1
  8267  0F76  00F1               	movwf	??i1_set_handler
  8268  0F77  0871               	movf	??i1_set_handler,w
  8269  0F78  07F3               	addwf	i1set_handler@i,f
  8270  0F79  2F58               	goto	L8
  8271  0F7A                     __end_ofi1_set_handler:	
  8272                           
  8273                           	psect	text49
  8274  0D35                     __ptext49:	
  8275 ;; *************** function i1_PROTOCOL_SAV *****************
  8276 ;; Defined at:
  8277 ;;		line 112 in file "protocol.c"
  8278 ;; Parameters:    Size  Location     Type
  8279 ;;		None
  8280 ;; Auto vars:     Size  Location     Type
  8281 ;;		None
  8282 ;; Return value:  Size  Location     Type
  8283 ;;                  1    wreg      void 
  8284 ;; Registers used:
  8285 ;;		wreg, status,2, status,0, pclath, cstack
  8286 ;; Tracked objects:
  8287 ;;		On entry : 0/0
  8288 ;;		On exit  : 0/0
  8289 ;;		Unchanged: 0/0
  8290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8293 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;Total ram usage:        1 bytes
  8296 ;; Hardware stack levels used:    1
  8297 ;; Hardware stack levels required when called:    1
  8298 ;; This function calls:
  8299 ;;		i1_DATAEE_WriteByte
  8300 ;; This function is called by:
  8301 ;;		_I2C_StatusCallback
  8302 ;; This function uses a non-reentrant model
  8303 ;;
  8304                           
  8305                           
  8306                           ;psect for function i1_PROTOCOL_SAV
  8307  0D35                     i1_PROTOCOL_SAV:	
  8308                           
  8309                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  8310                           
  8311                           ;incstack = 0
  8312                           ; Regs used in i1_PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  8313  0D35  0020               	movlb	0	; select bank0
  8314  0D36  085E               	movf	_value,w
  8315  0D37  00F3               	movwf	??i1_PROTOCOL_SAV
  8316  0D38  0873               	movf	??i1_PROTOCOL_SAV,w
  8317  0D39  00F0               	movwf	i1DATAEE_WriteByte@bData
  8318  0D3A  3001               	movlw	1
  8319  0D3B  318E  2691         	fcall	i1_DATAEE_WriteByte
  8320  0D3D  0008               	return
  8321  0D3E                     __end_ofi1_PROTOCOL_SAV:	
  8322                           
  8323                           	psect	text50
  8324  0E91                     __ptext50:	
  8325 ;; *************** function i1_DATAEE_WriteByte *****************
  8326 ;; Defined at:
  8327 ;;		line 180 in file "mcc_generated_files/memory.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;  bAdd            1    wreg     unsigned char 
  8330 ;;  bData           1    0[COMMON] unsigned char 
  8331 ;; Auto vars:     Size  Location     Type
  8332 ;;  bAdd            1    1[COMMON] unsigned char 
  8333 ;;  DATAEE_Write    1    2[COMMON] unsigned char 
  8334 ;; Return value:  Size  Location     Type
  8335 ;;                  1    wreg      void 
  8336 ;; Registers used:
  8337 ;;		wreg, status,2, status,0
  8338 ;; Tracked objects:
  8339 ;;		On entry : 0/0
  8340 ;;		On exit  : 0/0
  8341 ;;		Unchanged: 0/0
  8342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8343 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8344 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8346 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8347 ;;Total ram usage:        3 bytes
  8348 ;; Hardware stack levels used:    1
  8349 ;; This function calls:
  8350 ;;		Nothing
  8351 ;; This function is called by:
  8352 ;;		i1_PROTOCOL_SAV
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           
  8357                           ;psect for function i1_DATAEE_WriteByte
  8358  0E91                     i1_DATAEE_WriteByte:	
  8359                           
  8360                           ;incstack = 0
  8361                           ; Regs used in i1_DATAEE_WriteByte: [wreg+status,2+status,0]
  8362                           ;i1DATAEE_WriteByte@bAdd stored from wreg
  8363  0E91  00F1               	movwf	i1DATAEE_WriteByte@bAdd
  8364                           
  8365                           ;memory.c: 182: uint8_t GIEBitValue = 0;
  8366  0E92  01F2               	clrf	i1DATAEE_WriteByte@GIEBitValue
  8367                           
  8368                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
  8369  0E93  0871               	movf	i1DATAEE_WriteByte@bAdd,w
  8370  0E94  0023               	movlb	3	; select bank3
  8371  0E95  0091               	movwf	17	;volatile
  8372                           
  8373                           ;memory.c: 185: EEDATL = bData;
  8374  0E96  0870               	movf	i1DATAEE_WriteByte@bData,w
  8375  0E97  0093               	movwf	19	;volatile
  8376                           
  8377                           ;memory.c: 186: EECON1bits.EEPGD = 0;
  8378  0E98  1395               	bcf	21,7	;volsfr
  8379                           
  8380                           ;memory.c: 187: EECON1bits.CFGS = 0;
  8381  0E99  1315               	bcf	21,6	;volsfr
  8382                           
  8383                           ;memory.c: 188: EECON1bits.WREN = 1;
  8384  0E9A  1515               	bsf	21,2	;volsfr
  8385                           
  8386                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
  8387  0E9B  3000               	movlw	0
  8388  0E9C  1B8B               	btfsc	11,7	;volatile
  8389  0E9D  3001               	movlw	1
  8390  0E9E  00F2               	movwf	i1DATAEE_WriteByte@GIEBitValue
  8391                           
  8392                           ;memory.c: 191: INTCONbits.GIE = 0;
  8393  0E9F  138B               	bcf	11,7	;volatile
  8394                           
  8395                           ;memory.c: 192: EECON2 = 0x55;
  8396  0EA0  3055               	movlw	85
  8397  0EA1  0096               	movwf	22	;volsfr
  8398                           
  8399                           ;memory.c: 193: EECON2 = 0xAA;
  8400  0EA2  30AA               	movlw	170
  8401  0EA3  0096               	movwf	22	;volsfr
  8402                           
  8403                           ;memory.c: 194: EECON1bits.WR = 1;
  8404  0EA4  1495               	bsf	21,1	;volsfr
  8405  0EA5                     i1l1317:	
  8406                           ;memory.c: 197: {
  8407                           
  8408                           ;memory.c: 196: while (EECON1bits.WR)
  8409                           
  8410  0EA5  1895               	btfsc	21,1	;volsfr
  8411  0EA6  2EA5               	goto	i1l1317
  8412                           
  8413                           ;memory.c: 198: }
  8414                           ;memory.c: 200: EECON1bits.WREN = 0;
  8415  0EA7  1115               	bcf	21,2	;volsfr
  8416                           
  8417                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
  8418  0EA8  0C72               	rrf	i1DATAEE_WriteByte@GIEBitValue,w
  8419  0EA9  1C03               	skipc
  8420  0EAA  138B               	bcf	11,7	;volatile
  8421  0EAB  1803               	skipnc
  8422  0EAC  178B               	bsf	11,7	;volatile
  8423  0EAD  0008               	return
  8424  0EAE                     __end_ofi1_DATAEE_WriteByte:	
  8425                           
  8426                           	psect	text51
  8427  0CE9                     __ptext51:	
  8428 ;; *************** function i1_PROTOCOL_EXT *****************
  8429 ;; Defined at:
  8430 ;;		line 121 in file "protocol.c"
  8431 ;; Parameters:    Size  Location     Type
  8432 ;;  char_buf        1    wreg     PTR unsigned char 
  8433 ;;		 -> buf(48), I2C_StatusCallback@ext_buf(48), 
  8434 ;; Auto vars:     Size  Location     Type
  8435 ;;  char_buf        1  (no storage) PTR unsigned char 
  8436 ;;		 -> buf(48), I2C_StatusCallback@ext_buf(48), 
  8437 ;; Return value:  Size  Location     Type
  8438 ;;                  1    wreg      void 
  8439 ;; Registers used:
  8440 ;;		wreg, status,2, status,0
  8441 ;; Tracked objects:
  8442 ;;		On entry : 0/0
  8443 ;;		On exit  : 0/0
  8444 ;;		Unchanged: 0/0
  8445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8449 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8450 ;;Total ram usage:        0 bytes
  8451 ;; Hardware stack levels used:    1
  8452 ;; This function calls:
  8453 ;;		Nothing
  8454 ;; This function is called by:
  8455 ;;		_I2C_StatusCallback
  8456 ;; This function uses a non-reentrant model
  8457 ;;
  8458                           
  8459                           
  8460                           ;psect for function i1_PROTOCOL_EXT
  8461  0CE9                     i1_PROTOCOL_EXT:	
  8462                           
  8463                           ;incstack = 0
  8464                           ; Regs used in i1_PROTOCOL_EXT: [wreg+status,2+status,0]
  8465  0CE9  0008               	return
  8466  0CEA                     __end_ofi1_PROTOCOL_EXT:	
  8467                           
  8468                           	psect	text52
  8469  0CF0                     __ptext52:	
  8470 ;; *************** function _PROTOCOL_Read_Lock *****************
  8471 ;; Defined at:
  8472 ;;		line 129 in file "protocol.c"
  8473 ;; Parameters:    Size  Location     Type
  8474 ;;		None
  8475 ;; Auto vars:     Size  Location     Type
  8476 ;;		None
  8477 ;; Return value:  Size  Location     Type
  8478 ;;                  1    wreg      unsigned char 
  8479 ;; Registers used:
  8480 ;;		wreg
  8481 ;; Tracked objects:
  8482 ;;		On entry : 0/0
  8483 ;;		On exit  : 0/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8490 ;;Total ram usage:        0 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; This function calls:
  8493 ;;		Nothing
  8494 ;; This function is called by:
  8495 ;;		_I2C_StatusCallback
  8496 ;; This function uses a non-reentrant model
  8497 ;;
  8498                           
  8499                           
  8500                           ;psect for function _PROTOCOL_Read_Lock
  8501  0CF0                     _PROTOCOL_Read_Lock:	
  8502                           
  8503                           ;protocol.c: 130: return locked;
  8504                           
  8505                           ;incstack = 0
  8506                           ; Regs used in _PROTOCOL_Read_Lock: [wreg]
  8507  0CF0  0020               	movlb	0	; select bank0
  8508  0CF1  085D               	movf	_locked,w
  8509  0CF2  0008               	return
  8510  0CF3                     __end_of_PROTOCOL_Read_Lock:	
  8511                           
  8512                           	psect	text53
  8513  0D59                     __ptext53:	
  8514 ;; *************** function _PROTOCOL_RST *****************
  8515 ;; Defined at:
  8516 ;;		line 285 in file "protocol.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;		None
  8519 ;; Auto vars:     Size  Location     Type
  8520 ;;		None
  8521 ;; Return value:  Size  Location     Type
  8522 ;;                  1    wreg      void 
  8523 ;; Registers used:
  8524 ;;		wreg, status,2, status,0
  8525 ;; Tracked objects:
  8526 ;;		On entry : 0/0
  8527 ;;		On exit  : 0/0
  8528 ;;		Unchanged: 0/0
  8529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8532 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8533 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8534 ;;Total ram usage:        1 bytes
  8535 ;; Hardware stack levels used:    1
  8536 ;; This function calls:
  8537 ;;		Nothing
  8538 ;; This function is called by:
  8539 ;;		_I2C_StatusCallback
  8540 ;; This function uses a non-reentrant model
  8541 ;;
  8542                           
  8543                           
  8544                           ;psect for function _PROTOCOL_RST
  8545  0D59                     _PROTOCOL_RST:	
  8546                           
  8547                           ;protocol.c: 286: if (readbuf.status != TLV_SET) {
  8548                           
  8549                           ;incstack = 0
  8550                           ; Regs used in _PROTOCOL_RST: [wreg+status,2+status,0]
  8551  0D59  0021               	movlb	1	; select bank1
  8552  0D5A  085C               	movf	(_readbuf^(0+128)+3),w
  8553  0D5B  1903               	btfsc	3,2
  8554  0D5C  0008               	return
  8555                           
  8556                           ;protocol.c: 287: readbuf.buf_cnt = 0;
  8557  0D5D  01DD               	clrf	(_readbuf^(0+128)+4)
  8558                           
  8559                           ;protocol.c: 288: readbuf.status = COMPLETE;
  8560  0D5E  3003               	movlw	3
  8561  0D5F  00F0               	movwf	??_PROTOCOL_RST
  8562  0D60  0870               	movf	??_PROTOCOL_RST,w
  8563  0D61  00DC               	movwf	(_readbuf^(0+128)+3)
  8564  0D62  0008               	return
  8565  0D63                     __end_of_PROTOCOL_RST:	
  8566                           
  8567                           	psect	text54
  8568  0D03                     __ptext54:	
  8569 ;; *************** function _PROTOCOL_INV *****************
  8570 ;; Defined at:
  8571 ;;		line 108 in file "protocol.c"
  8572 ;; Parameters:    Size  Location     Type
  8573 ;;		None
  8574 ;; Auto vars:     Size  Location     Type
  8575 ;;		None
  8576 ;; Return value:  Size  Location     Type
  8577 ;;                  1    wreg      void 
  8578 ;; Registers used:
  8579 ;;		None
  8580 ;; Tracked objects:
  8581 ;;		On entry : 0/0
  8582 ;;		On exit  : 0/0
  8583 ;;		Unchanged: 0/0
  8584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8589 ;;Total ram usage:        0 bytes
  8590 ;; Hardware stack levels used:    1
  8591 ;; This function calls:
  8592 ;;		Nothing
  8593 ;; This function is called by:
  8594 ;;		_I2C_StatusCallback
  8595 ;; This function uses a non-reentrant model
  8596 ;;
  8597                           
  8598                           
  8599                           ;psect for function _PROTOCOL_INV
  8600  0D03                     _PROTOCOL_INV:	
  8601                           
  8602                           ;protocol.c: 109: invoked = 1;
  8603                           
  8604                           ;incstack = 0
  8605                           ; Regs used in _PROTOCOL_INV: []
  8606  0D03  0020               	movlb	0	; select bank0
  8607  0D04  01DB               	clrf	_invoked
  8608  0D05  0ADB               	incf	_invoked,f
  8609  0D06  0008               	return
  8610  0D07                     __end_of_PROTOCOL_INV:	
  8611                           
  8612                           	psect	text55
  8613  0CED                     __ptext55:	
  8614 ;; *************** function _PROTOCOL_I2C_WHO *****************
  8615 ;; Defined at:
  8616 ;;		line 205 in file "protocol.c"
  8617 ;; Parameters:    Size  Location     Type
  8618 ;;		None
  8619 ;; Auto vars:     Size  Location     Type
  8620 ;;		None
  8621 ;; Return value:  Size  Location     Type
  8622 ;;                  1    wreg      unsigned char 
  8623 ;; Registers used:
  8624 ;;		wreg
  8625 ;; Tracked objects:
  8626 ;;		On entry : 0/0
  8627 ;;		On exit  : 0/0
  8628 ;;		Unchanged: 0/0
  8629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8634 ;;Total ram usage:        0 bytes
  8635 ;; Hardware stack levels used:    1
  8636 ;; This function calls:
  8637 ;;		Nothing
  8638 ;; This function is called by:
  8639 ;;		_I2C_StatusCallback
  8640 ;; This function uses a non-reentrant model
  8641 ;;
  8642                           
  8643                           
  8644                           ;psect for function _PROTOCOL_I2C_WHO
  8645  0CED                     _PROTOCOL_I2C_WHO:	
  8646                           
  8647                           ;protocol.c: 206: return slave_address;
  8648                           
  8649                           ;incstack = 0
  8650                           ; Regs used in _PROTOCOL_I2C_WHO: [wreg]
  8651  0CED  0020               	movlb	0	; select bank0
  8652  0CEE  0860               	movf	_slave_address,w
  8653  0CEF  0008               	return
  8654  0CF0                     __end_of_PROTOCOL_I2C_WHO:	
  8655                           
  8656                           	psect	text56
  8657  0759                     __ptext56:	
  8658 ;; *************** function _PROTOCOL_I2C_SEN *****************
  8659 ;; Defined at:
  8660 ;;		line 404 in file "protocol.c"
  8661 ;; Parameters:    Size  Location     Type
  8662 ;;		None
  8663 ;; Auto vars:     Size  Location     Type
  8664 ;;  pdata           1    1[COMMON] PTR unsigned char 
  8665 ;;		 -> type_no_data(1), PROTOCOL_Send_uint8_t@pbuf(1), sendbuf(16), readbuf.length(1), 
  8666 ;;		 -> readbuf.type(1), readbuf(5), position(4), 
  8667 ;; Return value:  Size  Location     Type
  8668 ;;                  1    wreg      PTR unsigned char 
  8669 ;; Registers used:
  8670 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8671 ;; Tracked objects:
  8672 ;;		On entry : 0/0
  8673 ;;		On exit  : 0/0
  8674 ;;		Unchanged: 0/0
  8675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8677 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8678 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8679 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8680 ;;Total ram usage:        2 bytes
  8681 ;; Hardware stack levels used:    1
  8682 ;; This function calls:
  8683 ;;		Nothing
  8684 ;; This function is called by:
  8685 ;;		_I2C_StatusCallback
  8686 ;; This function uses a non-reentrant model
  8687 ;;
  8688                           
  8689                           
  8690                           ;psect for function _PROTOCOL_I2C_SEN
  8691  0759                     _PROTOCOL_I2C_SEN:	
  8692                           
  8693                           ;protocol.c: 405: uint8_t *pdata;
  8694                           ;protocol.c: 406: switch(readbuf.status) {
  8695                           
  8696                           ;incstack = 0
  8697                           ; Regs used in _PROTOCOL_I2C_SEN: [wreg-fsr0h+status,2+status,0]
  8698  0759  2F84               	goto	i1l2671
  8699  075A                     i1l2651:	
  8700                           ;protocol.c: 407: case TLV_SET:
  8701                           
  8702                           
  8703                           ;protocol.c: 408: pdata = &readbuf.type;
  8704  075A  30D9               	movlw	(low (_readbuf| 0))& (0+255)
  8705  075B  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8706  075C  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8707  075D  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8708                           
  8709                           ;protocol.c: 409: readbuf.status = TYPE_SENT;
  8710  075E  0021               	movlb	1	; select bank1
  8711  075F  01DC               	clrf	(_readbuf^(0+128)+3)
  8712  0760  0ADC               	incf	(_readbuf^(0+128)+3),f
  8713                           
  8714                           ;protocol.c: 410: break;
  8715  0761  2F93               	goto	i1l2673
  8716  0762                     i1l2655:	
  8717                           ;protocol.c: 411: case TYPE_SENT:
  8718                           
  8719                           
  8720                           ;protocol.c: 412: pdata = &readbuf.length;
  8721  0762  30DA               	movlw	(low ((_readbuf| 0+1)))& (0+255)
  8722  0763  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8723  0764  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8724  0765  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8725                           
  8726                           ;protocol.c: 413: readbuf.status = LENGTH_SENT;
  8727  0766  3002               	movlw	2
  8728  0767  2F7B               	goto	L9
  8729  0768                     i1l2657:	
  8730                           ;protocol.c: 415: case LENGTH_SENT:
  8731                           
  8732                           ;protocol.c: 414: break;
  8733                           
  8734                           
  8735                           ;protocol.c: 416: if (readbuf.buf_cnt < readbuf.length) {
  8736  0768  085A               	movf	(_readbuf^(0+128)+1),w
  8737  0769  025D               	subwf	(_readbuf^(0+128)+4),w
  8738  076A  1803               	skipnc
  8739  076B  2F75               	goto	i1l2661
  8740                           
  8741                           ;protocol.c: 417: pdata = &readbuf.pbuffer[readbuf.buf_cnt++];
  8742  076C  085B               	movf	(low ((_readbuf| 0+2)))^(0+128),w
  8743  076D  075D               	addwf	(_readbuf^(0+128)+4),w
  8744  076E  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8745  076F  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8746  0770  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8747  0771  3001               	movlw	1
  8748  0772  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8749  0773  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8750  0774  07DD               	addwf	(_readbuf^(0+128)+4),f
  8751  0775                     i1l2661:	
  8752                           
  8753                           ;protocol.c: 418: }
  8754                           ;protocol.c: 419: if (readbuf.buf_cnt == readbuf.length) {
  8755  0775  085D               	movf	(_readbuf^(0+128)+4),w
  8756  0776  065A               	xorwf	(_readbuf^(0+128)+1),w
  8757  0777  1D03               	skipz
  8758  0778  2F93               	goto	i1l2673
  8759                           
  8760                           ;protocol.c: 420: readbuf.buf_cnt = 0;
  8761  0779  01DD               	clrf	(_readbuf^(0+128)+4)
  8762                           
  8763                           ;protocol.c: 421: readbuf.status = COMPLETE;
  8764  077A  3003               	movlw	3
  8765  077B                     L9:	
  8766  077B  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8767  077C  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8768  077D  00DC               	movwf	(_readbuf^(0+128)+3)
  8769                           
  8770                           ;protocol.c: 422: }
  8771                           ;protocol.c: 423: break;
  8772  077E  2F93               	goto	i1l2673
  8773  077F                     i1l2667:	
  8774                           ;protocol.c: 424: case COMPLETE:
  8775                           
  8776                           
  8777                           ;protocol.c: 425: pdata = &type_no_data;
  8778  077F  306F               	movlw	(low (_type_no_data| 0))& (0+255)
  8779  0780  00F0               	movwf	??_PROTOCOL_I2C_SEN
  8780  0781  0870               	movf	??_PROTOCOL_I2C_SEN,w
  8781  0782  00F1               	movwf	PROTOCOL_I2C_SEN@pdata
  8782                           
  8783                           ;protocol.c: 427: }
  8784                           
  8785                           ;protocol.c: 426: break;
  8786  0783  2F93               	goto	i1l2673
  8787  0784                     i1l2671:	
  8788  0784  0021               	movlb	1	; select bank1
  8789  0785  085C               	movf	(_readbuf^(0+128)+3),w
  8790                           
  8791                           ; Switch size 1, requested type "space"
  8792                           ; Number of cases is 4, Range of values is 0 to 3
  8793                           ; switch strategies available:
  8794                           ; Name         Instructions Cycles
  8795                           ; simple_byte           13     7 (average)
  8796                           ; direct_byte           14     6 (fixed)
  8797                           ; jumptable            260     6 (fixed)
  8798                           ;	Chosen strategy is simple_byte
  8799  0786  3A00               	xorlw	0	; case 0
  8800  0787  1903               	skipnz
  8801  0788  2F5A               	goto	i1l2651
  8802  0789  3A01               	xorlw	1	; case 1
  8803  078A  1903               	skipnz
  8804  078B  2F62               	goto	i1l2655
  8805  078C  3A03               	xorlw	3	; case 2
  8806  078D  1903               	skipnz
  8807  078E  2F68               	goto	i1l2657
  8808  078F  3A01               	xorlw	1	; case 3
  8809  0790  1903               	skipnz
  8810  0791  2F7F               	goto	i1l2667
  8811  0792  2F93               	goto	i1l2673
  8812  0793                     i1l2673:	
  8813                           
  8814                           ;protocol.c: 428: return pdata;
  8815  0793  0871               	movf	PROTOCOL_I2C_SEN@pdata,w
  8816  0794  0008               	return
  8817  0795                     __end_of_PROTOCOL_I2C_SEN:	
  8818                           
  8819                           	psect	text57
  8820  0CEA                     __ptext57:	
  8821 ;; *************** function _PROTOCOL_I2C_GET *****************
  8822 ;; Defined at:
  8823 ;;		line 209 in file "protocol.c"
  8824 ;; Parameters:    Size  Location     Type
  8825 ;;		None
  8826 ;; Auto vars:     Size  Location     Type
  8827 ;;		None
  8828 ;; Return value:  Size  Location     Type
  8829 ;;                  1    wreg      unsigned char 
  8830 ;; Registers used:
  8831 ;;		wreg
  8832 ;; Tracked objects:
  8833 ;;		On entry : 0/0
  8834 ;;		On exit  : 0/0
  8835 ;;		Unchanged: 0/0
  8836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8841 ;;Total ram usage:        0 bytes
  8842 ;; Hardware stack levels used:    1
  8843 ;; This function calls:
  8844 ;;		Nothing
  8845 ;; This function is called by:
  8846 ;;		_I2C_StatusCallback
  8847 ;; This function uses a non-reentrant model
  8848 ;;
  8849                           
  8850                           
  8851                           ;psect for function _PROTOCOL_I2C_GET
  8852  0CEA                     _PROTOCOL_I2C_GET:	
  8853                           
  8854                           ;protocol.c: 210: return value;
  8855                           
  8856                           ;incstack = 0
  8857                           ; Regs used in _PROTOCOL_I2C_GET: [wreg]
  8858  0CEA  0020               	movlb	0	; select bank0
  8859  0CEB  085E               	movf	_value,w
  8860  0CEC  0008               	return
  8861  0CED                     __end_of_PROTOCOL_I2C_GET:	
  8862                           
  8863                           	psect	text58
  8864  0CFF                     __ptext58:	
  8865 ;; *************** function _PROTOCOL_Backplane_Slave_Enabled *****************
  8866 ;; Defined at:
  8867 ;;		line 201 in file "protocol.c"
  8868 ;; Parameters:    Size  Location     Type
  8869 ;;		None
  8870 ;; Auto vars:     Size  Location     Type
  8871 ;;		None
  8872 ;; Return value:  Size  Location     Type
  8873 ;;                  1    wreg      void 
  8874 ;; Registers used:
  8875 ;;		None
  8876 ;; Tracked objects:
  8877 ;;		On entry : 0/0
  8878 ;;		On exit  : 0/0
  8879 ;;		Unchanged: 0/0
  8880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8885 ;;Total ram usage:        0 bytes
  8886 ;; Hardware stack levels used:    1
  8887 ;; This function calls:
  8888 ;;		Nothing
  8889 ;; This function is called by:
  8890 ;;		_I2C_StatusCallback
  8891 ;; This function uses a non-reentrant model
  8892 ;;
  8893                           
  8894                           
  8895                           ;psect for function _PROTOCOL_Backplane_Slave_Enabled
  8896  0CFF                     _PROTOCOL_Backplane_Slave_Enabled:	
  8897                           
  8898                           ;protocol.c: 202: backplane_slave_enabled = 1;
  8899                           
  8900                           ;incstack = 0
  8901                           ; Regs used in _PROTOCOL_Backplane_Slave_Enabled: []
  8902  0CFF  0020               	movlb	0	; select bank0
  8903  0D00  01D7               	clrf	_backplane_slave_enabled
  8904  0D01  0AD7               	incf	_backplane_slave_enabled,f
  8905  0D02  0008               	return
  8906  0D03                     __end_of_PROTOCOL_Backplane_Slave_Enabled:	
  8907                           
  8908                           	psect	text59
  8909  0E74                     __ptext59:	
  8910 ;; *************** function _EUSART_Transmit_ISR *****************
  8911 ;; Defined at:
  8912 ;;		line 165 in file "mcc_generated_files/eusart.c"
  8913 ;; Parameters:    Size  Location     Type
  8914 ;;		None
  8915 ;; Auto vars:     Size  Location     Type
  8916 ;;		None
  8917 ;; Return value:  Size  Location     Type
  8918 ;;                  1    wreg      void 
  8919 ;; Registers used:
  8920 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8921 ;; Tracked objects:
  8922 ;;		On entry : 0/0
  8923 ;;		On exit  : 0/0
  8924 ;;		Unchanged: 0/0
  8925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8928 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8930 ;;Total ram usage:        1 bytes
  8931 ;; Hardware stack levels used:    1
  8932 ;; This function calls:
  8933 ;;		Nothing
  8934 ;; This function is called by:
  8935 ;;		_INTERRUPT_InterruptManager
  8936 ;; This function uses a non-reentrant model
  8937 ;;
  8938                           
  8939                           
  8940                           ;psect for function _EUSART_Transmit_ISR
  8941  0E74                     _EUSART_Transmit_ISR:	
  8942                           
  8943                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  8944                           
  8945                           ;incstack = 0
  8946                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8947  0E74  3008               	movlw	8
  8948  0E75  0020               	movlb	0	; select bank0
  8949  0E76  0264               	subwf	_eusartTxBufferRemaining,w	;volatile
  8950  0E77  1803               	skipnc
  8951  0E78  2E8E               	goto	i1l481
  8952                           
  8953                           ;eusart.c: 170: {
  8954                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
  8955  0E79  0865               	movf	_eusartTxTail,w
  8956  0E7A  3EA8               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  8957  0E7B  0086               	movwf	6
  8958  0E7C  0187               	clrf	7
  8959  0E7D  0801               	movf	1,w
  8960  0E7E  0023               	movlb	3	; select bank3
  8961  0E7F  009A               	movwf	26	;volatile
  8962  0E80  3001               	movlw	1
  8963  0E81  00F0               	movwf	??_EUSART_Transmit_ISR
  8964  0E82  0870               	movf	??_EUSART_Transmit_ISR,w
  8965  0E83  0020               	movlb	0	; select bank0
  8966  0E84  07E5               	addwf	_eusartTxTail,f	;volatile
  8967                           
  8968                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  8969  0E85  3008               	movlw	8
  8970  0E86  0265               	subwf	_eusartTxTail,w	;volatile
  8971  0E87  1803               	btfsc	3,0
  8972                           
  8973                           ;eusart.c: 173: {
  8974                           ;eusart.c: 174: eusartTxTail = 0;
  8975  0E88  01E5               	clrf	_eusartTxTail	;volatile
  8976                           
  8977                           ;eusart.c: 175: }
  8978                           ;eusart.c: 176: eusartTxBufferRemaining++;
  8979  0E89  3001               	movlw	1
  8980  0E8A  00F0               	movwf	??_EUSART_Transmit_ISR
  8981  0E8B  0870               	movf	??_EUSART_Transmit_ISR,w
  8982  0E8C  07E4               	addwf	_eusartTxBufferRemaining,f	;volatile
  8983                           
  8984                           ;eusart.c: 177: }
  8985  0E8D  0008               	return
  8986  0E8E                     i1l481:	
  8987                           
  8988                           ;eusart.c: 178: else
  8989                           ;eusart.c: 179: {
  8990                           ;eusart.c: 180: PIE1bits.TXIE = 0;
  8991  0E8E  0021               	movlb	1	; select bank1
  8992  0E8F  1211               	bcf	17,4	;volatile
  8993  0E90  0008               	return
  8994  0E91                     __end_of_EUSART_Transmit_ISR:	
  8995                           
  8996                           	psect	text60
  8997  0E3D                     __ptext60:	
  8998 ;; *************** function _EUSART_Receive_ISR *****************
  8999 ;; Defined at:
  9000 ;;		line 184 in file "mcc_generated_files/eusart.c"
  9001 ;; Parameters:    Size  Location     Type
  9002 ;;		None
  9003 ;; Auto vars:     Size  Location     Type
  9004 ;;		None
  9005 ;; Return value:  Size  Location     Type
  9006 ;;                  1    wreg      void 
  9007 ;; Registers used:
  9008 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9009 ;; Tracked objects:
  9010 ;;		On entry : 0/0
  9011 ;;		On exit  : 0/0
  9012 ;;		Unchanged: 0/0
  9013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9016 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9017 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9018 ;;Total ram usage:        1 bytes
  9019 ;; Hardware stack levels used:    1
  9020 ;; This function calls:
  9021 ;;		Nothing
  9022 ;; This function is called by:
  9023 ;;		_INTERRUPT_InterruptManager
  9024 ;; This function uses a non-reentrant model
  9025 ;;
  9026                           
  9027                           
  9028                           ;psect for function _EUSART_Receive_ISR
  9029  0E3D                     _EUSART_Receive_ISR:	
  9030                           
  9031                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
  9032                           
  9033                           ;incstack = 0
  9034                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  9035  0E3D  0023               	movlb	3	; select bank3
  9036  0E3E  1C9D               	btfss	29,1	;volatile
  9037  0E3F  2E42               	goto	i1l3143
  9038                           
  9039                           ;eusart.c: 188: {
  9040                           ;eusart.c: 191: RCSTAbits.CREN = 0;
  9041  0E40  121D               	bcf	29,4	;volatile
  9042                           
  9043                           ;eusart.c: 192: RCSTAbits.CREN = 1;
  9044  0E41  161D               	bsf	29,4	;volatile
  9045  0E42                     i1l3143:	
  9046                           
  9047                           ;eusart.c: 193: }
  9048                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
  9049  0E42  0819               	movf	25,w	;volatile
  9050  0E43  00F0               	movwf	??_EUSART_Receive_ISR
  9051  0E44  0020               	movlb	0	; select bank0
  9052  0E45  0863               	movf	_eusartRxHead,w
  9053  0E46  3EA0               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  9054  0E47  0086               	movwf	6
  9055  0E48  0187               	clrf	7
  9056  0E49  0870               	movf	??_EUSART_Receive_ISR,w
  9057  0E4A  0081               	movwf	1
  9058  0E4B  3001               	movlw	1
  9059  0E4C  00F0               	movwf	??_EUSART_Receive_ISR
  9060  0E4D  0870               	movf	??_EUSART_Receive_ISR,w
  9061  0E4E  07E3               	addwf	_eusartRxHead,f	;volatile
  9062                           
  9063                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  9064  0E4F  3008               	movlw	8
  9065  0E50  0263               	subwf	_eusartRxHead,w	;volatile
  9066  0E51  1803               	btfsc	3,0
  9067                           
  9068                           ;eusart.c: 198: {
  9069                           ;eusart.c: 199: eusartRxHead = 0;
  9070  0E52  01E3               	clrf	_eusartRxHead	;volatile
  9071                           
  9072                           ;eusart.c: 200: }
  9073                           ;eusart.c: 201: eusartRxCount++;
  9074  0E53  3001               	movlw	1
  9075  0E54  00F0               	movwf	??_EUSART_Receive_ISR
  9076  0E55  0870               	movf	??_EUSART_Receive_ISR,w
  9077  0E56  07E1               	addwf	_eusartRxCount,f	;volatile
  9078  0E57  0008               	return
  9079  0E58                     __end_of_EUSART_Receive_ISR:	
  9080  007E                     btemp	set	126	;btemp
  9081  007E                     int$flags	set	126
  9082  007E                     wtemp0	set	126


Data Sizes:
    Strings     192
    Constant    14
    Data        6
    BSS         197
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     50      80
    BANK1            80      0      75
    BANK2            80      0      48
    BANK3            80      0      48
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C_StatusCallback@ext_buf(BANK3[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_15(CODE[4]), STR_14(CODE[4]), STR_12(CODE[4]), STR_11(CODE[4]), 
		 -> STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[4]), STR_4(CODE[4]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), 

    PROTOCOL_I2C_SEN@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), position(BANK1[4]), 

    PROTOCOL_I2C_Send_uint8_t@pbuffer	PTR unsigned char  size(1) Largest target is 4
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), position(BANK1[4]), 

    PROTOCOL_I2C_Set_TLV@pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), position(BANK1[4]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK2[48]), I2C_StatusCallback@ext_buf(BANK3[48]), 

    PROTOCOL_Tick_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Set_Func@loop_func	PTR void  size(2) Largest target is 1
		 -> loop_func(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), loop_func(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@set_handler	PTR void  size(2) Largest target is 1
		 -> set_handler(), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), set_handler(), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_1(CODE[17]), 

    S758$pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), position(BANK1[4]), 

    readbuf.pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), position(BANK1[4]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_10(CODE[4]), buf(BANK2[48]), STR_2(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_1(CODE[17]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 14
		 -> STR_48(CODE[10]), STR_47(CODE[9]), STR_46(CODE[10]), STR_45(CODE[9]), 
		 -> STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[4]), STR_41(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> STR_36(CODE[14]), STR_35(CODE[9]), STR_34(CODE[10]), STR_33(CODE[9]), 
		 -> STR_32(CODE[10]), STR_31(CODE[9]), STR_30(CODE[7]), STR_29(CODE[4]), 
		 -> STR_28(CODE[4]), STR_27(CODE[9]), STR_26(CODE[4]), STR_25(CODE[4]), 
		 -> STR_24(CODE[10]), STR_23(CODE[4]), STR_22(CODE[4]), STR_21(CODE[8]), 
		 -> STR_20(CODE[4]), STR_19(CODE[4]), STR_18(CODE[9]), STR_17(CODE[6]), 
		 -> STR_16(CODE[10]), STR_13(CODE[10]), STR_9(CODE[10]), STR_5(CODE[10]), 
		 -> STR_3(CODE[5]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), position(BANK1[4]), 

    I2C_StatusCallback@pdata	PTR unsigned char  size(1) Largest target is 16
		 -> type_no_data(BANK0[1]), PROTOCOL_Send_uint8_t@pbuf(BANK1[1]), sendbuf(BANK1[16]), readbuf.length(BANK1[1]), 
		 -> readbuf.type(BANK1[1]), readbuf(BANK1[5]), position(BANK1[4]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C_ISR
    _I2C_ISR->_I2C_StatusCallback
    _I2C_StatusCallback->i1_PROTOCOL_SET
    i1_PROTOCOL_SET->i1_set_handler
    i1_PROTOCOL_SAV->i1_DATAEE_WriteByte

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _PROTOCOL_Loop->_loop_func
    _loop_func->_PROTOCOL_I2C_Send_uint8_t
    _PROTOCOL_I2C_Send_uint8_t->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _atoi->___wmul
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SET->_set_handler
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_Initialize->_set_handler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   15645
                     _ADC_Initialize
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
                  _PROTOCOL_Set_Func
                    _TMR0_Initialize
                     _WDT_Initialize
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0     112
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR0_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Func                                    2     0      2      86
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0   13971
                                             46 BANK0      4     4      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                          _loop_func *
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              7     2      5    1670
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 (2) _loop_func                                            7     7      0    6048
                                             39 BANK0      7     7      0
            _ADC_GetConversionResult
               _ADC_IsConversionDone
                  _ADC_SelectChannel
                _ADC_StartConversion
          _PROTOCOL_I2C_Send_uint8_t
                                _abs
                          _led_blink
 ---------------------------------------------------------------------------------
 (3) _led_blink                                            1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _abs                                                  4     2      2     538
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _PROTOCOL_I2C_Send_uint8_t                            5     4      1    5063
                                             34 BANK0      5     4      1
               _PROTOCOL_I2C_Set_TLV
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              24    20      4    4212
                                             14 BANK0     20    16      4
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      66
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (4) _EUSART_Write                                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     287
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     290
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _PROTOCOL_I2C_Set_TLV                                 5     3      2     625
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _ADC_StartConversion                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_SelectChannel                                    2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_IsConversionDone                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_GetConversionResult                              2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 8     6      2     830
                                              6 BANK0      8     6      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     474
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     240
                                              3 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0     336
                                              4 BANK0      2     2      0
                   Absolute function *
                        _set_handler *
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     196
                                              3 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     196
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         1     1      0      90
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      24
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8    1476
                                              4 BANK0     10     2      8
                   Absolute function *
                    _DATAEE_ReadByte
                        _set_handler *
 ---------------------------------------------------------------------------------
 (3) _set_handler                                          4     3      1     266
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (1) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Initialize                                       2     2      0       0
                                              0 BANK0      2     2      0
       _PROTOCOL_Read_Device_Address
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           1     1      0     721
                                             11 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                            _I2C_ISR
 ---------------------------------------------------------------------------------
 (8) _I2C_ISR                                              2     2      0     721
                                              9 COMMON     2     2      0
                 _I2C_StatusCallback
 ---------------------------------------------------------------------------------
 (9) _I2C_StatusCallback                                   3     3      0     551
                                              6 COMMON     3     3      0
   _PROTOCOL_Backplane_Slave_Enabled
                   _PROTOCOL_I2C_GET
                   _PROTOCOL_I2C_SEN
                   _PROTOCOL_I2C_WHO
                       _PROTOCOL_INV
                       _PROTOCOL_RST
                 _PROTOCOL_Read_Lock
                     i1_PROTOCOL_EXT
                     i1_PROTOCOL_SAV
                     i1_PROTOCOL_SET
                     i1_PROTOCOL_STA
                     i1_PROTOCOL_STP
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STP                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_STA                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SET                                      2     2      0     276
                                              4 COMMON     2     2      0
                   Absolute function *
                      i1_set_handler *
 ---------------------------------------------------------------------------------
 (11) i1_set_handler                                       4     3      1     206
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_SAV                                      1     1      0      94
                                              3 COMMON     1     1      0
                 i1_DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (11) i1_DATAEE_WriteByte                                  3     2      1      94
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (10) i1_PROTOCOL_EXT                                      1     1      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Read_Lock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_RST                                        1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_INV                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_WHO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_SEN                                    2     2      0      26
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_I2C_GET                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _PROTOCOL_Backplane_Slave_Enabled                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (8) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _EUSART_Initialize
   _I2C_Initialize
     _PROTOCOL_Read_Device_Address
   _OSCILLATOR_Initialize
   _PIN_MANAGER_Initialize
   _PROTOCOL_Initialize
     Absolute function(Fake) *
     _DATAEE_ReadByte *
     _set_handler *
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
       Absolute function(Fake) *
       _set_handler *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _loop_func *
       _ADC_GetConversionResult
       _ADC_IsConversionDone
       _ADC_SelectChannel
       _ADC_StartConversion
       _PROTOCOL_I2C_Send_uint8_t
         _PROTOCOL_I2C_Set_TLV
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _EUSART_Write
       _abs
       _led_blink
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _EUSART_Write
     _strncmp *
   _PROTOCOL_Set_Func
   _TMR0_Initialize
   _WDT_Initialize
   _init

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C_ISR
     _I2C_StatusCallback
       _PROTOCOL_Backplane_Slave_Enabled
       _PROTOCOL_I2C_GET
       _PROTOCOL_I2C_SEN
       _PROTOCOL_I2C_WHO
       _PROTOCOL_INV
       _PROTOCOL_RST
       _PROTOCOL_Read_Lock
       i1_PROTOCOL_EXT
       i1_PROTOCOL_SAV
         i1_DATAEE_WriteByte
       i1_PROTOCOL_SET
         Absolute function(Fake) *
         i1_set_handler *
       i1_PROTOCOL_STA
       i1_PROTOCOL_STP

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     32      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      4B       7       93.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      30       9       60.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      30      11       60.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     109      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     109      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Oct 06 02:37:06 2017

                                         _i 0056                                           _j 00C7  
                                         pc 0002                      __end_ofi1_PROTOCOL_EXT 0CEA  
                    __end_ofi1_PROTOCOL_SAV 0D3E                      __end_ofi1_PROTOCOL_SET 0DDD  
                    __end_ofi1_PROTOCOL_STA 0D0B                      __end_ofi1_PROTOCOL_STP 0CF6  
           __end_of_TMR0_HasOverflowOccured 0D13                                 __CFG_CP$OFF 0000  
                       ___wmul@multiplicand 0022                             _timer0ReloadVal 0066  
                               __CFG_LVP$ON 0000                                         l402 01B1  
                                       l343 05CE                                         l338 05A5  
                                       l419 023C                                         l367 008E  
                                       l618 023D                                         l395 013B  
                                       l379 015B                                         l469 0F3E  
                                       l889 0E61                                __CFG_CPD$OFF 0000  
              loop_func@transition_detected 004A                             __end_of_I2C_ISR 0FA1  
                                       _abs 0DAA                                         _buf 0120  
                                       _cnt 005F                                __CFG_BORV$LO 0000  
                                       wreg 0009                                __CFG_IESO$ON 0000  
                 I2C_StatusCallback@ext_buf 01A0                   I2C_StatusCallback@ext_cnt 0067  
                 I2C_StatusCallback@ext_len 0068                                ?_EUSART_Read 0070  
                                      ?_abs 0020                                        l3001 0756  
                                      l3011 061A                                        l1317 0F27  
                                      l3007 0615                                        l3025 063A  
                                      l3009 060D                                        l3035 0677  
                                      l3027 063E                                        l3019 0632  
                                      l2411 0FD4                                        l3029 0667  
                                      l2413 0FE0                                        l2423 0FFB  
                                      l2503 0127                                        l2511 013D  
                                      l2441 07EB                                        l2505 0132  
                                      l2419 0FF2                                        l2435 07D3  
                                      l2371 0F52                                        l2523 0175  
                                      l2701 0FA5                                        l2437 07DF  
                                      l2445 07F4                                        l2357 0F33  
                                      l2533 0186                                        l2461 0093  
                                      l2383 0DA8                                        l2527 0180  
                                      l2463 009C                                        l2455 0089  
                              _tmr_overflow 0058                                        l2713 0FBC  
                                      l2561 01E9                                        l2715 0FC2  
                                      l2563 01ED                                        l2571 0202  
                                      l2555 01DA                                        l2547 01CD  
                                      l2539 01A5                                        l2483 00EC  
                                      l2475 00D8                                        l2467 00A9  
                                      l2731 06E1                                        l4405 06B2  
                                      l2389 0E5B                                        l2549 01D0  
                                      l2493 0109                                        l2741 0703  
                                      l2901 0573                                        l2567 01FA  
                                      l2487 00EE                                        l2911 05A0  
                                      l4503 03C0                                        l2577 0207  
                                      l2497 010B                                        l2489 00FC  
                                      l4441 0270                                        l4433 0264  
                                      l2499 011A                                        l2579 006D  
                                      l2739 06E5                                        l2923 05C9  
                                      l2907 0590                                        l4435 0265  
                                      l2933 05E7                                        l4445 027A  
                                      l2943 0606                                        l2919 05B9  
                                      l2935 05F3                                        l4473 02F1  
                                      l4465 02B3                                        l2947 0EB0  
                                      l2939 05FB                                        l4491 0372  
                                      l4483 032F                                        l2893 055E  
                                      l4477 030A                                        l4469 02D8  
                                      l2991 0735                                        l4487 034E  
                                      l4497 0395                                        l2995 074D  
                                      l2999 0717                                        STR_1 03D3  
                                      STR_2 0451                                        STR_3 045E  
                                      STR_4 047F                                        STR_5 0410  
                                      STR_6 048F                                        STR_7 0477  
                                      STR_8 0483                                        STR_9 041A  
                                      _LATA 010C                                        u1415 0FE1  
                                      _LATC 010E                                        u1425 0FEB  
                                      u1355 0E62                                        u1435 0FF3  
                                      u1365 0E67                                        u1465 07D6  
                                      u1625 019B                                        u1395 0FD7  
                                      u1485 07E5                                        u1565 0102  
                                      u1495 07EC                                        u4127 0607  
                                      u1665 01C0                                        u4137 0D76  
                                      u4147 0EF3                                        i1l64 0F8E  
                                      i1l86 0495                                        _TMR0 0015  
                                      _WPUA 020C                                        _WPUC 020E  
                              __CFG_WRT$OFF 0000                               __CFG_FCMEN$ON 0000  
                                      abs@a 0020                                        _data 00C6  
                                      _atoi 060B                                        _main 0795  
                                      _init 0E23                                        fsr0h 0005  
                                      fsr1h 0007                                        indf0 0000  
                                      fsr0l 0004                                        indf1 0001  
                                      fsr1l 0006                                        btemp 007E  
                             __CFG_BOREN$ON 0000                                        start 0030  
                             __CFG_MCLRE$ON 0000                                       ??_abs 0022  
                           ?i1_PROTOCOL_EXT 0070                             ?i1_PROTOCOL_SAV 0070  
                           ?i1_PROTOCOL_SET 0070                   __size_of_DATAEE_WriteByte 0023  
                           ?i1_PROTOCOL_STA 0070                             ?i1_PROTOCOL_STP 0070  
                   __end_of_TMR0_Initialize 0D8C                               __CFG_PLLEN$ON 0000  
                             ?_EUSART_Write 0070              __size_of_OSCILLATOR_Initialize 0005  
             __end_of_OSCILLATOR_Initialize 0D1C                                       ?_atoi 0026  
                                     ?_main 0070                                       ?_init 0070  
                                     STR_10 047B                                       STR_11 048B  
                                     STR_12 0487                                       STR_20 0463  
                                     STR_13 03FC                                       STR_14 0473  
                                     STR_22 0467                                       STR_30 044A  
                                     STR_15 046F                                       STR_24 042E  
                                     STR_32 0424                                       STR_16 03F2  
                                     STR_17 0458                               __CFG_WDTE$OFF 0000  
                                     STR_18 0441                                       STR_34 0406  
                                     STR_19 046B                                       STR_35 0438  
                                     STR_36 03E4                                       STR_37 0467  
                                     STR_38 03F8                             __end_of___lwdiv 1000  
                                     i1l103 04B8                                       i1l124 0556  
                                     i1l252 0015                                       i1l254 0021  
                           __end_of___lwmod 07F9                                       i1l258 002B  
                                     i1l481 0E8E                           _PROTOCOL_Set_Func 0D50  
                PROTOCOL_I2C_Set_TLV@length 0020                                       _RCREG 0199  
                                     _RCSTA 019D                                       _TRISA 008C  
                                     _TRISC 008E                                       _TXREG 019A  
                                     _TXSTA 019E            __size_of_ADC_GetConversionResult 0009  
              __size_of_PROTOCOL_Initialize 0054                  PROTOCOL_I2C_Set_TLV@status 0024  
                        ?_PROTOCOL_Set_Func 0020                             _DATAEE_ReadByte 0D63  
           ??_PROTOCOL_Write_Device_Address 0023                             __end_of_dpowers 03CF  
                            _WDT_Initialize 0D13                                       _count 00B0  
            PROTOCOL_Initialize@inv_handler 002A                             __end_of_isdigit 0DAA  
                                     _value 005E                                       atoi@a 002B  
                                     atoi@s 002D                                       _putch 0D21  
                                     init@i 0021                                       pclath 000A  
                       ??_PROTOCOL_Set_Func 0022                           __end_of_ANALOG_IN 03D3  
                    ??_PROTOCOL_I2C_Set_TLV 0022                                       status 0003  
                                     wtemp0 007E                             __end_of_strncmp 0759  
                     _set_handler$intlevel0 0FA5                             __initialization 0032  
                              __end_of_atoi 067C                                __end_of_main 07CC  
                              __end_of_init 0E3D                              ??_EUSART_Write 0020  
                                 ??_I2C_ISR 0079                 ?_INTERRUPT_InterruptManager 0070  
                 __end_of_PROTOCOL_Set_Func 0D59            PROTOCOL_Initialize@start_handler 0026  
               ??_PROTOCOL_I2C_Send_uint8_t 0043                                      ??_atoi 0028  
                                    ??_main 0052                                      ??_init 0020  
                        _PROTOCOL_Read_Lock 0CF0                      __end_of_WDT_Initialize 0D17  
                __end_ofi1_DATAEE_WriteByte 0EAE               __size_of_ADC_IsConversionDone 0007  
                                    _ADCON0 009D                                      _ADCON1 009E  
                                    i1S4579 0800                                      _ADRESH 009C  
                                    _ADRESL 009B                                      _EEADRL 0191  
                                    _EEDATL 0193                                      _EECON2 0196  
                                    _ANSELA 018C                                      ?_putch 0070  
                                    _ANSELC 018E                         ?_PROTOCOL_Read_Lock 0070  
                        _PROTOCOL_Loop_Func 00C2                                      i1l1317 0EA5  
                                    i1l3143 0E42                                      i1l2603 0F6B  
                                    i1l2605 0F71                                      i1l4301 04BD  
                                    i1l4313 04E8                                      i1l4305 04D5  
                                    i1l2651 075A                                      i1l4307 04DE  
                                    i1l2661 0775                                      i1l4341 052A  
                                    i1l4333 0511                                      i1l2655 0762  
                                    i1l2671 0784                                      i1l2591 0F55  
                                    i1l4343 052F                                      i1l4351 0540  
                                    i1l4319 04F3                                      i1l2657 0768  
                                    i1l2673 0793                                      i1l4329 050E  
                                    i1l4337 051B                                      i1l4281 0499  
                                    i1l2667 077F                                      i1l4347 053B  
                                    i1l4291 04AC                                      i1l4339 0527  
                                    i1l4283 049F                                      i1l4355 054C  
                                    i1l4293 04B0                                      i1l4381 0F8C  
                                    i1l4295 04B4                                      i1l4287 04A4  
                                    i1l4297 04BB                                      i1l4289 04A8  
                                    i1l4387 0F95                                      i1l4389 0F97  
                    I2C_StatusCallback@next 0069                                      _OSCCON 0099  
          __size_of_TMR0_HasOverflowOccured 0004                                      _TMR0IF 005A  
                                    _SPBRGH 019C                                      _SPBRGL 019B  
                                    _WDTCON 0097              PROTOCOL_Initialize@set_handler 0028  
                              ?_set_handler 0020                              __CFG_PWRTE$OFF 0000  
                 PROTOCOL_Initialize@scaler 002B                                      ___wmul 0E58  
                            __CFG_STVREN$ON 0000                                   ??___lwdiv 0024  
                      ??_PROTOCOL_Read_Lock 0070                                   ??___lwmod 002C  
                              _type_no_data 006F                         _EUSART_Transmit_ISR 0E74  
                          ?_TMR0_Initialize 0070                                      _locked 005D  
                        _I2C_StatusCallback 0493                     __size_of_I2C_Initialize 0021  
                                    _printf 0068                     __end_of_DATAEE_ReadByte 0D70  
                              __pdataCOMMON 007D                                   ??_isdigit 0020  
                  __end_of_PROTOCOL_I2C_GET 0CED                    __end_of_PROTOCOL_I2C_SEN 0795  
                  __end_of_PROTOCOL_I2C_WHO 0CF0                             ?_WDT_Initialize 0070  
                       ?_I2C_StatusCallback 0070               i1DATAEE_WriteByte@GIEBitValue 0072  
          PROTOCOL_I2C_Send_uint8_t@pbuffer 0042                                   ??_strncmp 0025  
                 PROTOCOL_Send_uint8_t@pbuf 00EA                        ?_EUSART_Transmit_ISR 0070  
                      __size_of_EUSART_Read 001F                   _PROTOCOL_I2C_Send_uint8_t 06D0  
                   __end_of__initialization 0064                        ??_I2C_StatusCallback 0076  
              __size_of_ADC_StartConversion 0003                              __pcstackCOMMON 0070  
                              __pidataBANK0 0D1C                            _DATAEE_WriteByte 0F0E  
                             __end_of_putch 0D27                  __size_of_PROTOCOL_Set_Func 0009  
                     __end_of_PROTOCOL_Loop 03C5                     _ADC_GetConversionResult 0D47  
                            _OPTION_REGbits 0095                          __size_of_led_blink 000E  
                   PROTOCOL_Send_float@pbuf 00E2                       ??_EUSART_Transmit_ISR 0070  
                                   ??_putch 0022                                  __pbssBANK0 0052  
                                __pbssBANK1 00A0                                  __pbssBANK2 0120  
                                __pbssBANK3 01A0                      i1DATAEE_WriteByte@bAdd 0071  
                      __end_of_EUSART_Write 0F55                 __size_of_EUSART_Receive_ISR 001B  
                          ??i1_PROTOCOL_EXT 0070                            ??i1_PROTOCOL_SAV 0073  
                          ??i1_PROTOCOL_SET 0074                            ??i1_PROTOCOL_STA 0070  
                          ??i1_PROTOCOL_STP 0070                         _PROTOCOL_Initialize 067C  
                                __pmaintext 0795                           i1set_handler@mask 0072  
                                   ?___wmul 0020                                  __pintentry 0004  
                        __size_of_loop_func 00B4                                     _I2C_ISR 0F7A  
                                   _BAUDCON 019F                                  _device_id_ 00BA  
                                   _APFCON0 011D                                     _APFCON1 011E  
                                   ?_printf 002E                     __size_of_ADC_Initialize 0008  
                          ?_DATAEE_ReadByte 0070                               _eusartRxCount 0061  
                   I2C_StatusCallback@pdata 0078            I2C_StatusCallback@slaveWriteType 006A  
                PROTOCOL_Send_uint16_t@pbuf 00E7                        ?_PROTOCOL_Initialize 0024  
                    __size_ofi1_set_handler 0025                                     _OSCTUNE 0098  
                                   _SSP1ADD 0212                                     _SSP1BUF 0211  
                                   _SSP1MSK 0213                      _PROTOCOL_Start_Handler 00C4  
                   _TMR0_HasOverflowOccured 0D0F                        DATAEE_WriteByte@bAdd 0021  
                                _continuity 006C                                   _ANALOG_IN 03CF  
                      __size_of_set_handler 002A                           __end_of_led_blink 0D7E  
                             ?_PROTOCOL_INV 0070                               ?_PROTOCOL_EXT 0070  
                             ?_PROTOCOL_SAV 0070                               ?_PROTOCOL_SET 0070  
                             ?_PROTOCOL_STA 0070                               ?_PROTOCOL_RST 0070  
                             ?_PROTOCOL_STP 0070                             __size_of___wmul 001C  
                                   ___lwdiv 0FCB                                     ___lwmod 07CC  
                 ??_ADC_GetConversionResult 0022                              _I2C_Initialize 0EED  
                                   __ptext1 0E23                                     __ptext2 0D13  
                                   __ptext3 0D7E                                     __ptext4 0D50  
                                   __ptext5 023D                                     __ptext6 0717  
                                   __ptext7 0557                                     __ptext8 0D70  
                                   __ptext9 0DAA                             __size_of_printf 01D5  
                                   _dpowers 03C5                       _OSCILLATOR_Initialize 0D17  
                              __size_of_abs 000F  PROTOCOL_Write_Device_Address@device_id_i2c 0024  
                     ??_PROTOCOL_Initialize 002C                                     _isdigit 0D9B  
                                   _readbuf 00D9                                     _sec_cnt 005A  
                                   _invoked 005B                    ??_PIN_MANAGER_Initialize 0020  
                                   _sendbuf 00C9                                     _tmr_cnt 0059  
                                   clrloop0 0D28                                     _running 005C  
                                   _strncmp 0717                        end_of_initialization 0064  
                         __end_of_loop_func 060B                             _analog_in_flags 00B4  
                _PROTOCOL_Extension_Handler 00C0               __size_of_PROTOCOL_I2C_Set_TLV 0020  
                        i1_DATAEE_WriteByte 0E91                           _EUSART_Initialize 0E09  
              __end_of_ADC_IsConversionDone 0800                               i1_set_handler 0F55  
                        ?_EUSART_Initialize 0070                       _PROTOCOL_Tick_Handler 00BC  
                                 _RCSTAbits 019D                                     printf@c 0041  
                                   printf@f 002E                              ??_PROTOCOL_INV 0070  
                            ??_PROTOCOL_EXT 0020                              ??_PROTOCOL_SAV 0023  
                            ??_PROTOCOL_SET 0024                              ??_PROTOCOL_STA 0020  
                            ??_PROTOCOL_RST 0070                              ??_PROTOCOL_STP 0020  
                    __end_of_I2C_Initialize 0F0E                         ?i1_DATAEE_WriteByte 0070  
                              __pstringtext 03C5                         ??_EUSART_Initialize 0020  
                          ??_WDT_Initialize 0020                            __CFG_FOSC$INTOSC 0000  
                         ?_PROTOCOL_I2C_GET 0070                            set_handler@value 0020  
                         ?_PROTOCOL_I2C_SEN 0070                           ?_PROTOCOL_I2C_WHO 0070  
                     __size_of_EUSART_Write 0024                         _ADC_StartConversion 0CFC  
                 ??_TMR0_HasOverflowOccured 0020                          ??_PROTOCOL_I2C_GET 0070  
                        ??_PROTOCOL_I2C_SEN 0070                          ??_PROTOCOL_I2C_WHO 0070  
                      ??i1_DATAEE_WriteByte 0071                                  _tmr_scaler 006B  
                  __end_of_DATAEE_WriteByte 0F31                   __end_of_EUSART_Initialize 0E23  
                               printf@width 003F                        i1PROTOCOL_SET@value_ 0075  
                            ?i1_set_handler 0070                        ?_ADC_StartConversion 0070  
                           ?_I2C_Initialize 0070                 __size_of_PROTOCOL_Read_Lock 0003  
                            __end_of___wmul 0E74                               __pidataCOMMON 0003  
                              _EUSART_Write 0F31                              _ADC_Initialize 0D2D  
                    ?_OSCILLATOR_Initialize 0070                              __end_of_printf 023D  
                            PROTOCOL_Loop@c 0050                         start_initialization 0032  
                  __size_of_TMR0_Initialize 000E             __size_of_PIN_MANAGER_Initialize 0018  
                               __end_of_abs 0DB9                               ??_EUSART_Read 0020  
                               putch@txData 0022                         DATAEE_ReadByte@bAdd 0020  
                     ??_ADC_StartConversion 0020                 __size_of_I2C_StatusCallback 00C4  
                                  ??___wmul 0024                    PROTOCOL_Send_int8_t@pbuf 00E9  
      __end_of_PROTOCOL_Read_Device_Address 0CF9       __size_of_PROTOCOL_Read_Device_Address 0003  
              _PROTOCOL_Read_Device_Address 0CF6                      __end_of_ADC_Initialize 0D35  
                               __pdataBANK0 006B                                    ?_I2C_ISR 0070  
           PROTOCOL_I2C_Send_uint8_t@length 0046                                    ??_printf 0032  
                   i1DATAEE_WriteByte@bData 0070                 __end_of_EUSART_Transmit_ISR 0E91  
                               __pbssCOMMON 007C                                   ___latbits 0002  
                             __pcstackBANK0 0020                        _ADC_IsConversionDone 07F9  
                      _PROTOCOL_Inv_Handler 00BE                                _isdigit$1172 0020  
                      __end_of_PROTOCOL_INV 0D07                        __end_of_PROTOCOL_EXT 0003  
                      __end_of_PROTOCOL_SAV 0D47                        __end_of_PROTOCOL_SET 0DF1  
                      __end_of_PROTOCOL_STA 0D0F                        __end_of_PROTOCOL_RST 0D63  
                      __end_of_PROTOCOL_STP 0CFC                  __end_of_EUSART_Receive_ISR 0E58  
           PROTOCOL_Initialize@stop_handler 0027                  __size_of_EUSART_Initialize 001A  
                           ??i1_set_handler 0071                         __end_of_EUSART_Read 0ECD  
                    __size_of_PROTOCOL_Loop 0188       __end_of_PROTOCOL_Write_Device_Address 0D9B  
    __size_of_PROTOCOL_Write_Device_Address 000F               _PROTOCOL_Write_Device_Address 0D8C  
                          ___lwdiv@dividend 0022                      _PIN_MANAGER_Initialize 0DF1  
                      EUSART_Read@readValue 0021                           _ADC_SelectChannel 0DB9  
                                  ?___lwdiv 0020                                    ?___lwmod 0028  
                           ?_ADC_Initialize 0070                                _eusartRxHead 0063  
                        ?_ADC_SelectChannel 0070                                _eusartTxHead 007C  
                              _eusartRxTail 0062                          i1set_handler@value 0070  
                              _eusartTxTail 0065               ?_PROTOCOL_Read_Device_Address 0070  
              ??_INTERRUPT_InterruptManager 007B                   PROTOCOL_Send_int16_t@pbuf 00E5  
                                 _led_blink 0D70                                   __pswtext1 0800  
                                loop_func@i 004D                                  loop_func@v 004B  
                   _eusartTxBufferRemaining 0064                                    ?_isdigit 0070  
                       ??_ADC_SelectChannel 0020                       ?_ADC_IsConversionDone 0070  
                          ___lwdiv@quotient 0025                    __size_of_DATAEE_ReadByte 000D  
                                  ?_strncmp 0020                              __size_of_putch 0006  
                            _eusartRxBuffer 00A0                           ??_TMR0_Initialize 0020  
                            _eusartTxBuffer 00A8                              ___wmul@product 0024  
                                  _LATCbits 010E                        _PROTOCOL_Set_Handler 0052  
                                 clear_ram0 0D27                               ??_set_handler 0021  
                                  _PIE1bits 0091                                   _loop_func 0557  
                 __end_of_ADC_SelectChannel 0DC9                       PROTOCOL_I2C_SEN@pdata 0071  
                  PROTOCOL_I2C_Set_TLV@type 0023         __size_of_INTERRUPT_InterruptManager 002C  
                                  _PIR1bits 0011                                    _SSP1CON1 0215  
                                  _SSP1CON2 0216                                    _SSP1CON3 0217  
              PROTOCOL_Initialize@device_id 0024                                    _SSP1STAT 0214  
                            _readbuf_status 00C8                       _PROTOCOL_Stop_Handler 0054  
               __end_of_PROTOCOL_Initialize 06D0                                loop_func@out 0048  
                                 _threshold 006D                             set_handler@mask 0022  
                          __size_of_I2C_ISR 0027                                  ?_led_blink 0070  
                                _ADCON0bits 009D                     __size_ofi1_PROTOCOL_EXT 0001  
                   __size_ofi1_PROTOCOL_SAV 0009                     __size_ofi1_PROTOCOL_SET 0014  
                   __size_ofi1_PROTOCOL_STA 0004                     __size_ofi1_PROTOCOL_STP 0003  
                         ___wmul@multiplier 0020                __end_of_PROTOCOL_I2C_Set_TLV 0EED  
                             _PROTOCOL_Loop 023D                    ADC_SelectChannel@channel 0021  
                                printf@flag 003E                                  printf@prec 0036  
                     DATAEE_WriteByte@bData 0020                                 _EUSART_Read 0EAE  
               PROTOCOL_I2C_Set_TLV@pbuffer 0021                           ?_DATAEE_WriteByte 0020  
  __end_of_PROTOCOL_Backplane_Slave_Enabled 0D03   __size_of_PROTOCOL_Backplane_Slave_Enabled 0004  
        ??_PROTOCOL_Backplane_Slave_Enabled 0070           ?_PROTOCOL_Backplane_Slave_Enabled 0070  
          _PROTOCOL_Backplane_Slave_Enabled 0CFF                          ??_DATAEE_WriteByte 0021  
                             _slave_address 0060                                  _EECON1bits 0195  
                        PROTOCOL_SET@value_ 0025                                  ?_loop_func 0070  
                          ??_I2C_Initialize 0020                   __size_of_PROTOCOL_I2C_GET 0003  
                 __size_of_PROTOCOL_I2C_SEN 003C                   __size_of_PROTOCOL_I2C_WHO 0003  
                  ?_ADC_GetConversionResult 0020                     ??_OSCILLATOR_Initialize 0020  
                PROTOCOL_Set_Func@loop_func 0020                         __end_of_set_handler 0FCB  
            ?_PROTOCOL_Write_Device_Address 0070                             I2C_ISR@i2c_data 007A  
                          __size_of___lwdiv 0035                            __size_of___lwmod 002D  
                            ?_PROTOCOL_Loop 0070                      ??_ADC_IsConversionDone 0020  
                     __size_of_PROTOCOL_INV 0004                       __size_of_PROTOCOL_EXT 0001  
                     __size_of_PROTOCOL_SAV 0009                       __size_of_PROTOCOL_SET 0014  
                     __size_of_PROTOCOL_STA 0004                       __size_of_PROTOCOL_RST 000A  
                     __size_of_PROTOCOL_STP 0003              ??_PROTOCOL_Read_Device_Address 0020  
                          __size_of_isdigit 000F                             ___lwdiv@divisor 0020  
                           ___lwdiv@counter 0027                                    __ptext10 06D0  
                                  __ptext11 0068                                    __ptext20 0D47  
                                  __ptext12 0D21                                    __ptext21 060B  
                                  __ptext13 0F31                                    __ptext30 0F0E  
                                  __ptext22 0D9B                                    __ptext14 07CC  
                                  __ptext31 0002                                    __ptext23 0E58  
                                  __ptext15 0FCB                                    __ptext40 0E09  
                                  __ptext32 0EAE                                    __ptext24 0D0F  
                                  __ptext16 0ECD                                    __ptext41 0D2D  
                                  __ptext33 067C                                    __ptext25 0D8C  
                                  __ptext17 0CFC                                    __ptext50 0E91  
                                  __ptext34 0FA1                                    __ptext26 0CF9  
                                  __ptext18 0DB9                                    __ptext51 0CE9  
                                  __ptext43 0F7A                                    __ptext35 0D63  
                                  __ptext27 0D0B                                    __ptext19 07F9  
                                  __ptext60 0E3D                                    __ptext52 0CF0  
                                  __ptext44 0493                                    __ptext36 0DF1  
                                  __ptext28 0DDD                                    __ptext53 0D59  
                                  __ptext45 0CF3                                    __ptext37 0D17  
                                  __ptext29 0D3E                                    __ptext54 0D03  
                                  __ptext46 0D07                                    __ptext38 0EED  
                                  __ptext55 0CED                                    __ptext47 0DC9  
                                  __ptext39 0CF6                                    __ptext56 0759  
                                  __ptext48 0F55                                    __ptext57 0CEA  
                                  __ptext49 0D35                                    __ptext58 0CFF  
                                  __ptext59 0E74                                _SSP1CON1bits 0215  
                              _SSP1CON2bits 0216                                    _float100 00B8  
               __size_ofi1_DATAEE_WriteByte 001D                                set_handler@i 0023  
               DATAEE_WriteByte@GIEBitValue 0022                            __size_of_strncmp 0042  
                             __size_of_atoi 0071                               __size_of_main 0037  
                             __size_of_init 001A                                  strncmp@len 0023  
                         ??_DATAEE_ReadByte 0020                  __size_of_ADC_SelectChannel 0010  
                   _BACKPLANE_SLAVE_ADDRESS 006E                  __end_of_PROTOCOL_Read_Lock 0CF3  
                                  int$flags 007E                                    _position 00DE  
                                  atoi@sign 002A                                _PROTOCOL_INV 0D03  
                              _PROTOCOL_EXT 0002                                _PROTOCOL_SAV 0D3E  
                              _PROTOCOL_SET 0DDD                                _PROTOCOL_STA 0D0B  
                              _PROTOCOL_RST 0D59                                _PROTOCOL_STP 0CF9  
        __end_of_INTERRUPT_InterruptManager 0030                  _INTERRUPT_InterruptManager 0004  
                                 printf@len 003C                                   printf@val 003A  
                              _SSP1STATbits 0214          __size_of_PROTOCOL_I2C_Send_uint8_t 0047  
                ?_PROTOCOL_I2C_Send_uint8_t 0042                                 ??_led_blink 0020  
                  ?_TMR0_HasOverflowOccured 0070                          _I2C_slaveWriteData 007D  
                                _INTCONbits 000B                                    isdigit@c 0021  
                   __size_of_WDT_Initialize 0004                                    intlevel1 0000  
               __end_of_ADC_StartConversion 0CFF                              i1set_handler@i 0073  
                          ___lwmod@dividend 002A                     ?_PIN_MANAGER_Initialize 0070  
           __end_of_ADC_GetConversionResult 0D50                           __CFG_CLKOUTEN$OFF 0000  
                __end_of_I2C_StatusCallback 0557                                 ??_loop_func 0047  
                      _PROTOCOL_I2C_Set_TLV 0ECD                                 _set_handler 0FA1  
                                 strncmp@s1 0020                                   strncmp@s2 0022  
           I2C_StatusCallback@i2c_bus_state 0077                            ??_ADC_Initialize 0020  
                   _backplane_slave_enabled 0057                                    printf@ap 0039  
                                  printf@cp 0037                          _EUSART_Receive_ISR 0E3D  
                           ??_PROTOCOL_Loop 004E                              i1_PROTOCOL_EXT 0CE9  
                            i1_PROTOCOL_SAV 0D35                              i1_PROTOCOL_SET 0DC9  
                            i1_PROTOCOL_STA 0D07                              i1_PROTOCOL_STP 0CF3  
         __end_of_PROTOCOL_I2C_Send_uint8_t 0717                                  _OPTION_REG 0095  
                       ?_EUSART_Receive_ISR 0070                             ___lwmod@divisor 0028  
                           _TMR0_Initialize 0D7E                             ___lwmod@counter 002D  
               PROTOCOL_Loop@device_address 0051                        PROTOCOL_EXT@char_buf 0020  
                        EUSART_Write@txData 0021                __size_of_EUSART_Transmit_ISR 001D  
            __end_of_PIN_MANAGER_Initialize 0E09                        ??_EUSART_Receive_ISR 0070  
                     ?_PROTOCOL_I2C_Set_TLV 0020                            _PROTOCOL_I2C_GET 0CEA  
                     __end_ofi1_set_handler 0F7A                            _PROTOCOL_I2C_SEN 0759  
                          _PROTOCOL_I2C_WHO 0CED  
