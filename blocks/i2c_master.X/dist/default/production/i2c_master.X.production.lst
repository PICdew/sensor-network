

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Sep 21 20:01:18 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    17                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    33                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    50                           	psect	text28,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2,group=3
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2,group=3
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2,group=3
    71                           	psect	text49,local,class=CODE,merge=1,delta=2,group=3
    72                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
    73                           	psect	text51,local,class=CODE,merge=1,delta=2,group=3
    74                           	psect	text52,local,class=CODE,merge=1,delta=2,group=3
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2,group=3
    77                           	psect	text55,local,class=CODE,merge=1,delta=2,group=3
    78                           	psect	text56,local,class=CODE,merge=1,delta=2,group=3
    79                           	psect	text57,local,class=CODE,merge=1,delta=2,group=3
    80                           	psect	text58,local,class=CODE,merge=1,delta=2
    81                           	psect	text59,local,class=CODE,merge=1,delta=2
    82                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
    83                           	psect	text61,local,class=CODE,merge=1,delta=2
    84                           	psect	intentry,global,class=CODE,delta=2
    85                           	psect	text63,local,class=CODE,merge=1,delta=2
    86                           	psect	swtext1,local,class=CONST,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	dabs	1,0x620,48
    93                           	dabs	1,0x5A0,80
    94                           	dabs	1,0x530,64
    95                           	dabs	1,0x2330,0,_cmd_buf
    96                           	dabs	1,0x7E,2
    97  0000                     
    98                           ; Version 1.41 (B)
    99                           ; Generated 21/02/2017 GMT
   100                           ; 
   101                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC16F1829 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     	;# 
   133  0001                     	;# 
   134  0002                     	;# 
   135  0003                     	;# 
   136  0004                     	;# 
   137  0005                     	;# 
   138  0006                     	;# 
   139  0007                     	;# 
   140  0008                     	;# 
   141  0009                     	;# 
   142  000A                     	;# 
   143  000B                     	;# 
   144  000C                     	;# 
   145  000D                     	;# 
   146  000E                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001E                     	;# 
   161  001F                     	;# 
   162  008C                     	;# 
   163  008D                     	;# 
   164  008E                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0094                     	;# 
   169  0095                     	;# 
   170  0096                     	;# 
   171  0097                     	;# 
   172  0098                     	;# 
   173  0099                     	;# 
   174  009A                     	;# 
   175  009B                     	;# 
   176  009B                     	;# 
   177  009C                     	;# 
   178  009D                     	;# 
   179  009E                     	;# 
   180  010C                     	;# 
   181  010D                     	;# 
   182  010E                     	;# 
   183  0111                     	;# 
   184  0112                     	;# 
   185  0113                     	;# 
   186  0114                     	;# 
   187  0115                     	;# 
   188  0116                     	;# 
   189  0117                     	;# 
   190  0118                     	;# 
   191  0119                     	;# 
   192  011A                     	;# 
   193  011B                     	;# 
   194  011D                     	;# 
   195  011E                     	;# 
   196  018C                     	;# 
   197  018D                     	;# 
   198  018E                     	;# 
   199  0191                     	;# 
   200  0191                     	;# 
   201  0192                     	;# 
   202  0193                     	;# 
   203  0193                     	;# 
   204  0193                     	;# 
   205  0194                     	;# 
   206  0195                     	;# 
   207  0196                     	;# 
   208  0199                     	;# 
   209  019A                     	;# 
   210  019B                     	;# 
   211  019B                     	;# 
   212  019C                     	;# 
   213  019D                     	;# 
   214  019E                     	;# 
   215  019F                     	;# 
   216  020C                     	;# 
   217  020D                     	;# 
   218  020E                     	;# 
   219  0211                     	;# 
   220  0211                     	;# 
   221  0212                     	;# 
   222  0212                     	;# 
   223  0213                     	;# 
   224  0213                     	;# 
   225  0214                     	;# 
   226  0214                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0215                     	;# 
   230  0216                     	;# 
   231  0216                     	;# 
   232  0217                     	;# 
   233  0217                     	;# 
   234  0219                     	;# 
   235  021A                     	;# 
   236  021B                     	;# 
   237  021C                     	;# 
   238  021D                     	;# 
   239  021E                     	;# 
   240  021F                     	;# 
   241  0291                     	;# 
   242  0291                     	;# 
   243  0292                     	;# 
   244  0293                     	;# 
   245  0294                     	;# 
   246  0295                     	;# 
   247  0295                     	;# 
   248  0296                     	;# 
   249  0298                     	;# 
   250  0298                     	;# 
   251  0299                     	;# 
   252  029A                     	;# 
   253  029B                     	;# 
   254  029C                     	;# 
   255  029D                     	;# 
   256  029E                     	;# 
   257  0311                     	;# 
   258  0311                     	;# 
   259  0312                     	;# 
   260  0313                     	;# 
   261  0318                     	;# 
   262  0318                     	;# 
   263  0319                     	;# 
   264  031A                     	;# 
   265  038C                     	;# 
   266  038D                     	;# 
   267  038E                     	;# 
   268  0391                     	;# 
   269  0392                     	;# 
   270  0393                     	;# 
   271  0394                     	;# 
   272  0395                     	;# 
   273  0396                     	;# 
   274  039A                     	;# 
   275  039C                     	;# 
   276  039D                     	;# 
   277  039E                     	;# 
   278  039F                     	;# 
   279  0415                     	;# 
   280  0416                     	;# 
   281  0417                     	;# 
   282  041C                     	;# 
   283  041D                     	;# 
   284  041E                     	;# 
   285  0FE4                     	;# 
   286  0FE5                     	;# 
   287  0FE6                     	;# 
   288  0FE7                     	;# 
   289  0FE8                     	;# 
   290  0FE9                     	;# 
   291  0FEA                     	;# 
   292  0FEB                     	;# 
   293  0FED                     	;# 
   294  0FEE                     	;# 
   295  0FEF                     	;# 
   296  0000                     	;# 
   297  0001                     	;# 
   298  0002                     	;# 
   299  0003                     	;# 
   300  0004                     	;# 
   301  0005                     	;# 
   302  0006                     	;# 
   303  0007                     	;# 
   304  0008                     	;# 
   305  0009                     	;# 
   306  000A                     	;# 
   307  000B                     	;# 
   308  000C                     	;# 
   309  000D                     	;# 
   310  000E                     	;# 
   311  0011                     	;# 
   312  0012                     	;# 
   313  0013                     	;# 
   314  0014                     	;# 
   315  0015                     	;# 
   316  0016                     	;# 
   317  0016                     	;# 
   318  0017                     	;# 
   319  0018                     	;# 
   320  0019                     	;# 
   321  001A                     	;# 
   322  001B                     	;# 
   323  001C                     	;# 
   324  001E                     	;# 
   325  001F                     	;# 
   326  008C                     	;# 
   327  008D                     	;# 
   328  008E                     	;# 
   329  0091                     	;# 
   330  0092                     	;# 
   331  0093                     	;# 
   332  0094                     	;# 
   333  0095                     	;# 
   334  0096                     	;# 
   335  0097                     	;# 
   336  0098                     	;# 
   337  0099                     	;# 
   338  009A                     	;# 
   339  009B                     	;# 
   340  009B                     	;# 
   341  009C                     	;# 
   342  009D                     	;# 
   343  009E                     	;# 
   344  010C                     	;# 
   345  010D                     	;# 
   346  010E                     	;# 
   347  0111                     	;# 
   348  0112                     	;# 
   349  0113                     	;# 
   350  0114                     	;# 
   351  0115                     	;# 
   352  0116                     	;# 
   353  0117                     	;# 
   354  0118                     	;# 
   355  0119                     	;# 
   356  011A                     	;# 
   357  011B                     	;# 
   358  011D                     	;# 
   359  011E                     	;# 
   360  018C                     	;# 
   361  018D                     	;# 
   362  018E                     	;# 
   363  0191                     	;# 
   364  0191                     	;# 
   365  0192                     	;# 
   366  0193                     	;# 
   367  0193                     	;# 
   368  0193                     	;# 
   369  0194                     	;# 
   370  0195                     	;# 
   371  0196                     	;# 
   372  0199                     	;# 
   373  019A                     	;# 
   374  019B                     	;# 
   375  019B                     	;# 
   376  019C                     	;# 
   377  019D                     	;# 
   378  019E                     	;# 
   379  019F                     	;# 
   380  020C                     	;# 
   381  020D                     	;# 
   382  020E                     	;# 
   383  0211                     	;# 
   384  0211                     	;# 
   385  0212                     	;# 
   386  0212                     	;# 
   387  0213                     	;# 
   388  0213                     	;# 
   389  0214                     	;# 
   390  0214                     	;# 
   391  0215                     	;# 
   392  0215                     	;# 
   393  0215                     	;# 
   394  0216                     	;# 
   395  0216                     	;# 
   396  0217                     	;# 
   397  0217                     	;# 
   398  0219                     	;# 
   399  021A                     	;# 
   400  021B                     	;# 
   401  021C                     	;# 
   402  021D                     	;# 
   403  021E                     	;# 
   404  021F                     	;# 
   405  0291                     	;# 
   406  0291                     	;# 
   407  0292                     	;# 
   408  0293                     	;# 
   409  0294                     	;# 
   410  0295                     	;# 
   411  0295                     	;# 
   412  0296                     	;# 
   413  0298                     	;# 
   414  0298                     	;# 
   415  0299                     	;# 
   416  029A                     	;# 
   417  029B                     	;# 
   418  029C                     	;# 
   419  029D                     	;# 
   420  029E                     	;# 
   421  0311                     	;# 
   422  0311                     	;# 
   423  0312                     	;# 
   424  0313                     	;# 
   425  0318                     	;# 
   426  0318                     	;# 
   427  0319                     	;# 
   428  031A                     	;# 
   429  038C                     	;# 
   430  038D                     	;# 
   431  038E                     	;# 
   432  0391                     	;# 
   433  0392                     	;# 
   434  0393                     	;# 
   435  0394                     	;# 
   436  0395                     	;# 
   437  0396                     	;# 
   438  039A                     	;# 
   439  039C                     	;# 
   440  039D                     	;# 
   441  039E                     	;# 
   442  039F                     	;# 
   443  0415                     	;# 
   444  0416                     	;# 
   445  0417                     	;# 
   446  041C                     	;# 
   447  041D                     	;# 
   448  041E                     	;# 
   449  0FE4                     	;# 
   450  0FE5                     	;# 
   451  0FE6                     	;# 
   452  0FE7                     	;# 
   453  0FE8                     	;# 
   454  0FE9                     	;# 
   455  0FEA                     	;# 
   456  0FEB                     	;# 
   457  0FED                     	;# 
   458  0FEE                     	;# 
   459  0FEF                     	;# 
   460  0000                     	;# 
   461  0001                     	;# 
   462  0002                     	;# 
   463  0003                     	;# 
   464  0004                     	;# 
   465  0005                     	;# 
   466  0006                     	;# 
   467  0007                     	;# 
   468  0008                     	;# 
   469  0009                     	;# 
   470  000A                     	;# 
   471  000B                     	;# 
   472  000C                     	;# 
   473  000D                     	;# 
   474  000E                     	;# 
   475  0011                     	;# 
   476  0012                     	;# 
   477  0013                     	;# 
   478  0014                     	;# 
   479  0015                     	;# 
   480  0016                     	;# 
   481  0016                     	;# 
   482  0017                     	;# 
   483  0018                     	;# 
   484  0019                     	;# 
   485  001A                     	;# 
   486  001B                     	;# 
   487  001C                     	;# 
   488  001E                     	;# 
   489  001F                     	;# 
   490  008C                     	;# 
   491  008D                     	;# 
   492  008E                     	;# 
   493  0091                     	;# 
   494  0092                     	;# 
   495  0093                     	;# 
   496  0094                     	;# 
   497  0095                     	;# 
   498  0096                     	;# 
   499  0097                     	;# 
   500  0098                     	;# 
   501  0099                     	;# 
   502  009A                     	;# 
   503  009B                     	;# 
   504  009B                     	;# 
   505  009C                     	;# 
   506  009D                     	;# 
   507  009E                     	;# 
   508  010C                     	;# 
   509  010D                     	;# 
   510  010E                     	;# 
   511  0111                     	;# 
   512  0112                     	;# 
   513  0113                     	;# 
   514  0114                     	;# 
   515  0115                     	;# 
   516  0116                     	;# 
   517  0117                     	;# 
   518  0118                     	;# 
   519  0119                     	;# 
   520  011A                     	;# 
   521  011B                     	;# 
   522  011D                     	;# 
   523  011E                     	;# 
   524  018C                     	;# 
   525  018D                     	;# 
   526  018E                     	;# 
   527  0191                     	;# 
   528  0191                     	;# 
   529  0192                     	;# 
   530  0193                     	;# 
   531  0193                     	;# 
   532  0193                     	;# 
   533  0194                     	;# 
   534  0195                     	;# 
   535  0196                     	;# 
   536  0199                     	;# 
   537  019A                     	;# 
   538  019B                     	;# 
   539  019B                     	;# 
   540  019C                     	;# 
   541  019D                     	;# 
   542  019E                     	;# 
   543  019F                     	;# 
   544  020C                     	;# 
   545  020D                     	;# 
   546  020E                     	;# 
   547  0211                     	;# 
   548  0211                     	;# 
   549  0212                     	;# 
   550  0212                     	;# 
   551  0213                     	;# 
   552  0213                     	;# 
   553  0214                     	;# 
   554  0214                     	;# 
   555  0215                     	;# 
   556  0215                     	;# 
   557  0215                     	;# 
   558  0216                     	;# 
   559  0216                     	;# 
   560  0217                     	;# 
   561  0217                     	;# 
   562  0219                     	;# 
   563  021A                     	;# 
   564  021B                     	;# 
   565  021C                     	;# 
   566  021D                     	;# 
   567  021E                     	;# 
   568  021F                     	;# 
   569  0291                     	;# 
   570  0291                     	;# 
   571  0292                     	;# 
   572  0293                     	;# 
   573  0294                     	;# 
   574  0295                     	;# 
   575  0295                     	;# 
   576  0296                     	;# 
   577  0298                     	;# 
   578  0298                     	;# 
   579  0299                     	;# 
   580  029A                     	;# 
   581  029B                     	;# 
   582  029C                     	;# 
   583  029D                     	;# 
   584  029E                     	;# 
   585  0311                     	;# 
   586  0311                     	;# 
   587  0312                     	;# 
   588  0313                     	;# 
   589  0318                     	;# 
   590  0318                     	;# 
   591  0319                     	;# 
   592  031A                     	;# 
   593  038C                     	;# 
   594  038D                     	;# 
   595  038E                     	;# 
   596  0391                     	;# 
   597  0392                     	;# 
   598  0393                     	;# 
   599  0394                     	;# 
   600  0395                     	;# 
   601  0396                     	;# 
   602  039A                     	;# 
   603  039C                     	;# 
   604  039D                     	;# 
   605  039E                     	;# 
   606  039F                     	;# 
   607  0415                     	;# 
   608  0416                     	;# 
   609  0417                     	;# 
   610  041C                     	;# 
   611  041D                     	;# 
   612  041E                     	;# 
   613  0FE4                     	;# 
   614  0FE5                     	;# 
   615  0FE6                     	;# 
   616  0FE7                     	;# 
   617  0FE8                     	;# 
   618  0FE9                     	;# 
   619  0FEA                     	;# 
   620  0FEB                     	;# 
   621  0FED                     	;# 
   622  0FEE                     	;# 
   623  0FEF                     	;# 
   624  0000                     	;# 
   625  0001                     	;# 
   626  0002                     	;# 
   627  0003                     	;# 
   628  0004                     	;# 
   629  0005                     	;# 
   630  0006                     	;# 
   631  0007                     	;# 
   632  0008                     	;# 
   633  0009                     	;# 
   634  000A                     	;# 
   635  000B                     	;# 
   636  000C                     	;# 
   637  000D                     	;# 
   638  000E                     	;# 
   639  0011                     	;# 
   640  0012                     	;# 
   641  0013                     	;# 
   642  0014                     	;# 
   643  0015                     	;# 
   644  0016                     	;# 
   645  0016                     	;# 
   646  0017                     	;# 
   647  0018                     	;# 
   648  0019                     	;# 
   649  001A                     	;# 
   650  001B                     	;# 
   651  001C                     	;# 
   652  001E                     	;# 
   653  001F                     	;# 
   654  008C                     	;# 
   655  008D                     	;# 
   656  008E                     	;# 
   657  0091                     	;# 
   658  0092                     	;# 
   659  0093                     	;# 
   660  0094                     	;# 
   661  0095                     	;# 
   662  0096                     	;# 
   663  0097                     	;# 
   664  0098                     	;# 
   665  0099                     	;# 
   666  009A                     	;# 
   667  009B                     	;# 
   668  009B                     	;# 
   669  009C                     	;# 
   670  009D                     	;# 
   671  009E                     	;# 
   672  010C                     	;# 
   673  010D                     	;# 
   674  010E                     	;# 
   675  0111                     	;# 
   676  0112                     	;# 
   677  0113                     	;# 
   678  0114                     	;# 
   679  0115                     	;# 
   680  0116                     	;# 
   681  0117                     	;# 
   682  0118                     	;# 
   683  0119                     	;# 
   684  011A                     	;# 
   685  011B                     	;# 
   686  011D                     	;# 
   687  011E                     	;# 
   688  018C                     	;# 
   689  018D                     	;# 
   690  018E                     	;# 
   691  0191                     	;# 
   692  0191                     	;# 
   693  0192                     	;# 
   694  0193                     	;# 
   695  0193                     	;# 
   696  0193                     	;# 
   697  0194                     	;# 
   698  0195                     	;# 
   699  0196                     	;# 
   700  0199                     	;# 
   701  019A                     	;# 
   702  019B                     	;# 
   703  019B                     	;# 
   704  019C                     	;# 
   705  019D                     	;# 
   706  019E                     	;# 
   707  019F                     	;# 
   708  020C                     	;# 
   709  020D                     	;# 
   710  020E                     	;# 
   711  0211                     	;# 
   712  0211                     	;# 
   713  0212                     	;# 
   714  0212                     	;# 
   715  0213                     	;# 
   716  0213                     	;# 
   717  0214                     	;# 
   718  0214                     	;# 
   719  0215                     	;# 
   720  0215                     	;# 
   721  0215                     	;# 
   722  0216                     	;# 
   723  0216                     	;# 
   724  0217                     	;# 
   725  0217                     	;# 
   726  0219                     	;# 
   727  021A                     	;# 
   728  021B                     	;# 
   729  021C                     	;# 
   730  021D                     	;# 
   731  021E                     	;# 
   732  021F                     	;# 
   733  0291                     	;# 
   734  0291                     	;# 
   735  0292                     	;# 
   736  0293                     	;# 
   737  0294                     	;# 
   738  0295                     	;# 
   739  0295                     	;# 
   740  0296                     	;# 
   741  0298                     	;# 
   742  0298                     	;# 
   743  0299                     	;# 
   744  029A                     	;# 
   745  029B                     	;# 
   746  029C                     	;# 
   747  029D                     	;# 
   748  029E                     	;# 
   749  0311                     	;# 
   750  0311                     	;# 
   751  0312                     	;# 
   752  0313                     	;# 
   753  0318                     	;# 
   754  0318                     	;# 
   755  0319                     	;# 
   756  031A                     	;# 
   757  038C                     	;# 
   758  038D                     	;# 
   759  038E                     	;# 
   760  0391                     	;# 
   761  0392                     	;# 
   762  0393                     	;# 
   763  0394                     	;# 
   764  0395                     	;# 
   765  0396                     	;# 
   766  039A                     	;# 
   767  039C                     	;# 
   768  039D                     	;# 
   769  039E                     	;# 
   770  039F                     	;# 
   771  0415                     	;# 
   772  0416                     	;# 
   773  0417                     	;# 
   774  041C                     	;# 
   775  041D                     	;# 
   776  041E                     	;# 
   777  0FE4                     	;# 
   778  0FE5                     	;# 
   779  0FE6                     	;# 
   780  0FE7                     	;# 
   781  0FE8                     	;# 
   782  0FE9                     	;# 
   783  0FEA                     	;# 
   784  0FEB                     	;# 
   785  0FED                     	;# 
   786  0FEE                     	;# 
   787  0FEF                     	;# 
   788  0000                     	;# 
   789  0001                     	;# 
   790  0002                     	;# 
   791  0003                     	;# 
   792  0004                     	;# 
   793  0005                     	;# 
   794  0006                     	;# 
   795  0007                     	;# 
   796  0008                     	;# 
   797  0009                     	;# 
   798  000A                     	;# 
   799  000B                     	;# 
   800  000C                     	;# 
   801  000D                     	;# 
   802  000E                     	;# 
   803  0011                     	;# 
   804  0012                     	;# 
   805  0013                     	;# 
   806  0014                     	;# 
   807  0015                     	;# 
   808  0016                     	;# 
   809  0016                     	;# 
   810  0017                     	;# 
   811  0018                     	;# 
   812  0019                     	;# 
   813  001A                     	;# 
   814  001B                     	;# 
   815  001C                     	;# 
   816  001E                     	;# 
   817  001F                     	;# 
   818  008C                     	;# 
   819  008D                     	;# 
   820  008E                     	;# 
   821  0091                     	;# 
   822  0092                     	;# 
   823  0093                     	;# 
   824  0094                     	;# 
   825  0095                     	;# 
   826  0096                     	;# 
   827  0097                     	;# 
   828  0098                     	;# 
   829  0099                     	;# 
   830  009A                     	;# 
   831  009B                     	;# 
   832  009B                     	;# 
   833  009C                     	;# 
   834  009D                     	;# 
   835  009E                     	;# 
   836  010C                     	;# 
   837  010D                     	;# 
   838  010E                     	;# 
   839  0111                     	;# 
   840  0112                     	;# 
   841  0113                     	;# 
   842  0114                     	;# 
   843  0115                     	;# 
   844  0116                     	;# 
   845  0117                     	;# 
   846  0118                     	;# 
   847  0119                     	;# 
   848  011A                     	;# 
   849  011B                     	;# 
   850  011D                     	;# 
   851  011E                     	;# 
   852  018C                     	;# 
   853  018D                     	;# 
   854  018E                     	;# 
   855  0191                     	;# 
   856  0191                     	;# 
   857  0192                     	;# 
   858  0193                     	;# 
   859  0193                     	;# 
   860  0193                     	;# 
   861  0194                     	;# 
   862  0195                     	;# 
   863  0196                     	;# 
   864  0199                     	;# 
   865  019A                     	;# 
   866  019B                     	;# 
   867  019B                     	;# 
   868  019C                     	;# 
   869  019D                     	;# 
   870  019E                     	;# 
   871  019F                     	;# 
   872  020C                     	;# 
   873  020D                     	;# 
   874  020E                     	;# 
   875  0211                     	;# 
   876  0211                     	;# 
   877  0212                     	;# 
   878  0212                     	;# 
   879  0213                     	;# 
   880  0213                     	;# 
   881  0214                     	;# 
   882  0214                     	;# 
   883  0215                     	;# 
   884  0215                     	;# 
   885  0215                     	;# 
   886  0216                     	;# 
   887  0216                     	;# 
   888  0217                     	;# 
   889  0217                     	;# 
   890  0219                     	;# 
   891  021A                     	;# 
   892  021B                     	;# 
   893  021C                     	;# 
   894  021D                     	;# 
   895  021E                     	;# 
   896  021F                     	;# 
   897  0291                     	;# 
   898  0291                     	;# 
   899  0292                     	;# 
   900  0293                     	;# 
   901  0294                     	;# 
   902  0295                     	;# 
   903  0295                     	;# 
   904  0296                     	;# 
   905  0298                     	;# 
   906  0298                     	;# 
   907  0299                     	;# 
   908  029A                     	;# 
   909  029B                     	;# 
   910  029C                     	;# 
   911  029D                     	;# 
   912  029E                     	;# 
   913  0311                     	;# 
   914  0311                     	;# 
   915  0312                     	;# 
   916  0313                     	;# 
   917  0318                     	;# 
   918  0318                     	;# 
   919  0319                     	;# 
   920  031A                     	;# 
   921  038C                     	;# 
   922  038D                     	;# 
   923  038E                     	;# 
   924  0391                     	;# 
   925  0392                     	;# 
   926  0393                     	;# 
   927  0394                     	;# 
   928  0395                     	;# 
   929  0396                     	;# 
   930  039A                     	;# 
   931  039C                     	;# 
   932  039D                     	;# 
   933  039E                     	;# 
   934  039F                     	;# 
   935  0415                     	;# 
   936  0416                     	;# 
   937  0417                     	;# 
   938  041C                     	;# 
   939  041D                     	;# 
   940  041E                     	;# 
   941  0FE4                     	;# 
   942  0FE5                     	;# 
   943  0FE6                     	;# 
   944  0FE7                     	;# 
   945  0FE8                     	;# 
   946  0FE9                     	;# 
   947  0FEA                     	;# 
   948  0FEB                     	;# 
   949  0FED                     	;# 
   950  0FEE                     	;# 
   951  0FEF                     	;# 
   952  0000                     	;# 
   953  0001                     	;# 
   954  0002                     	;# 
   955  0003                     	;# 
   956  0004                     	;# 
   957  0005                     	;# 
   958  0006                     	;# 
   959  0007                     	;# 
   960  0008                     	;# 
   961  0009                     	;# 
   962  000A                     	;# 
   963  000B                     	;# 
   964  000C                     	;# 
   965  000D                     	;# 
   966  000E                     	;# 
   967  0011                     	;# 
   968  0012                     	;# 
   969  0013                     	;# 
   970  0014                     	;# 
   971  0015                     	;# 
   972  0016                     	;# 
   973  0016                     	;# 
   974  0017                     	;# 
   975  0018                     	;# 
   976  0019                     	;# 
   977  001A                     	;# 
   978  001B                     	;# 
   979  001C                     	;# 
   980  001E                     	;# 
   981  001F                     	;# 
   982  008C                     	;# 
   983  008D                     	;# 
   984  008E                     	;# 
   985  0091                     	;# 
   986  0092                     	;# 
   987  0093                     	;# 
   988  0094                     	;# 
   989  0095                     	;# 
   990  0096                     	;# 
   991  0097                     	;# 
   992  0098                     	;# 
   993  0099                     	;# 
   994  009A                     	;# 
   995  009B                     	;# 
   996  009B                     	;# 
   997  009C                     	;# 
   998  009D                     	;# 
   999  009E                     	;# 
  1000  010C                     	;# 
  1001  010D                     	;# 
  1002  010E                     	;# 
  1003  0111                     	;# 
  1004  0112                     	;# 
  1005  0113                     	;# 
  1006  0114                     	;# 
  1007  0115                     	;# 
  1008  0116                     	;# 
  1009  0117                     	;# 
  1010  0118                     	;# 
  1011  0119                     	;# 
  1012  011A                     	;# 
  1013  011B                     	;# 
  1014  011D                     	;# 
  1015  011E                     	;# 
  1016  018C                     	;# 
  1017  018D                     	;# 
  1018  018E                     	;# 
  1019  0191                     	;# 
  1020  0191                     	;# 
  1021  0192                     	;# 
  1022  0193                     	;# 
  1023  0193                     	;# 
  1024  0193                     	;# 
  1025  0194                     	;# 
  1026  0195                     	;# 
  1027  0196                     	;# 
  1028  0199                     	;# 
  1029  019A                     	;# 
  1030  019B                     	;# 
  1031  019B                     	;# 
  1032  019C                     	;# 
  1033  019D                     	;# 
  1034  019E                     	;# 
  1035  019F                     	;# 
  1036  020C                     	;# 
  1037  020D                     	;# 
  1038  020E                     	;# 
  1039  0211                     	;# 
  1040  0211                     	;# 
  1041  0212                     	;# 
  1042  0212                     	;# 
  1043  0213                     	;# 
  1044  0213                     	;# 
  1045  0214                     	;# 
  1046  0214                     	;# 
  1047  0215                     	;# 
  1048  0215                     	;# 
  1049  0215                     	;# 
  1050  0216                     	;# 
  1051  0216                     	;# 
  1052  0217                     	;# 
  1053  0217                     	;# 
  1054  0219                     	;# 
  1055  021A                     	;# 
  1056  021B                     	;# 
  1057  021C                     	;# 
  1058  021D                     	;# 
  1059  021E                     	;# 
  1060  021F                     	;# 
  1061  0291                     	;# 
  1062  0291                     	;# 
  1063  0292                     	;# 
  1064  0293                     	;# 
  1065  0294                     	;# 
  1066  0295                     	;# 
  1067  0295                     	;# 
  1068  0296                     	;# 
  1069  0298                     	;# 
  1070  0298                     	;# 
  1071  0299                     	;# 
  1072  029A                     	;# 
  1073  029B                     	;# 
  1074  029C                     	;# 
  1075  029D                     	;# 
  1076  029E                     	;# 
  1077  0311                     	;# 
  1078  0311                     	;# 
  1079  0312                     	;# 
  1080  0313                     	;# 
  1081  0318                     	;# 
  1082  0318                     	;# 
  1083  0319                     	;# 
  1084  031A                     	;# 
  1085  038C                     	;# 
  1086  038D                     	;# 
  1087  038E                     	;# 
  1088  0391                     	;# 
  1089  0392                     	;# 
  1090  0393                     	;# 
  1091  0394                     	;# 
  1092  0395                     	;# 
  1093  0396                     	;# 
  1094  039A                     	;# 
  1095  039C                     	;# 
  1096  039D                     	;# 
  1097  039E                     	;# 
  1098  039F                     	;# 
  1099  0415                     	;# 
  1100  0416                     	;# 
  1101  0417                     	;# 
  1102  041C                     	;# 
  1103  041D                     	;# 
  1104  041E                     	;# 
  1105  0FE4                     	;# 
  1106  0FE5                     	;# 
  1107  0FE6                     	;# 
  1108  0FE7                     	;# 
  1109  0FE8                     	;# 
  1110  0FE9                     	;# 
  1111  0FEA                     	;# 
  1112  0FEB                     	;# 
  1113  0FED                     	;# 
  1114  0FEE                     	;# 
  1115  0FEF                     	;# 
  1116  0000                     	;# 
  1117  0001                     	;# 
  1118  0002                     	;# 
  1119  0003                     	;# 
  1120  0004                     	;# 
  1121  0005                     	;# 
  1122  0006                     	;# 
  1123  0007                     	;# 
  1124  0008                     	;# 
  1125  0009                     	;# 
  1126  000A                     	;# 
  1127  000B                     	;# 
  1128  000C                     	;# 
  1129  000D                     	;# 
  1130  000E                     	;# 
  1131  0011                     	;# 
  1132  0012                     	;# 
  1133  0013                     	;# 
  1134  0014                     	;# 
  1135  0015                     	;# 
  1136  0016                     	;# 
  1137  0016                     	;# 
  1138  0017                     	;# 
  1139  0018                     	;# 
  1140  0019                     	;# 
  1141  001A                     	;# 
  1142  001B                     	;# 
  1143  001C                     	;# 
  1144  001E                     	;# 
  1145  001F                     	;# 
  1146  008C                     	;# 
  1147  008D                     	;# 
  1148  008E                     	;# 
  1149  0091                     	;# 
  1150  0092                     	;# 
  1151  0093                     	;# 
  1152  0094                     	;# 
  1153  0095                     	;# 
  1154  0096                     	;# 
  1155  0097                     	;# 
  1156  0098                     	;# 
  1157  0099                     	;# 
  1158  009A                     	;# 
  1159  009B                     	;# 
  1160  009B                     	;# 
  1161  009C                     	;# 
  1162  009D                     	;# 
  1163  009E                     	;# 
  1164  010C                     	;# 
  1165  010D                     	;# 
  1166  010E                     	;# 
  1167  0111                     	;# 
  1168  0112                     	;# 
  1169  0113                     	;# 
  1170  0114                     	;# 
  1171  0115                     	;# 
  1172  0116                     	;# 
  1173  0117                     	;# 
  1174  0118                     	;# 
  1175  0119                     	;# 
  1176  011A                     	;# 
  1177  011B                     	;# 
  1178  011D                     	;# 
  1179  011E                     	;# 
  1180  018C                     	;# 
  1181  018D                     	;# 
  1182  018E                     	;# 
  1183  0191                     	;# 
  1184  0191                     	;# 
  1185  0192                     	;# 
  1186  0193                     	;# 
  1187  0193                     	;# 
  1188  0193                     	;# 
  1189  0194                     	;# 
  1190  0195                     	;# 
  1191  0196                     	;# 
  1192  0199                     	;# 
  1193  019A                     	;# 
  1194  019B                     	;# 
  1195  019B                     	;# 
  1196  019C                     	;# 
  1197  019D                     	;# 
  1198  019E                     	;# 
  1199  019F                     	;# 
  1200  020C                     	;# 
  1201  020D                     	;# 
  1202  020E                     	;# 
  1203  0211                     	;# 
  1204  0211                     	;# 
  1205  0212                     	;# 
  1206  0212                     	;# 
  1207  0213                     	;# 
  1208  0213                     	;# 
  1209  0214                     	;# 
  1210  0214                     	;# 
  1211  0215                     	;# 
  1212  0215                     	;# 
  1213  0215                     	;# 
  1214  0216                     	;# 
  1215  0216                     	;# 
  1216  0217                     	;# 
  1217  0217                     	;# 
  1218  0219                     	;# 
  1219  021A                     	;# 
  1220  021B                     	;# 
  1221  021C                     	;# 
  1222  021D                     	;# 
  1223  021E                     	;# 
  1224  021F                     	;# 
  1225  0291                     	;# 
  1226  0291                     	;# 
  1227  0292                     	;# 
  1228  0293                     	;# 
  1229  0294                     	;# 
  1230  0295                     	;# 
  1231  0295                     	;# 
  1232  0296                     	;# 
  1233  0298                     	;# 
  1234  0298                     	;# 
  1235  0299                     	;# 
  1236  029A                     	;# 
  1237  029B                     	;# 
  1238  029C                     	;# 
  1239  029D                     	;# 
  1240  029E                     	;# 
  1241  0311                     	;# 
  1242  0311                     	;# 
  1243  0312                     	;# 
  1244  0313                     	;# 
  1245  0318                     	;# 
  1246  0318                     	;# 
  1247  0319                     	;# 
  1248  031A                     	;# 
  1249  038C                     	;# 
  1250  038D                     	;# 
  1251  038E                     	;# 
  1252  0391                     	;# 
  1253  0392                     	;# 
  1254  0393                     	;# 
  1255  0394                     	;# 
  1256  0395                     	;# 
  1257  0396                     	;# 
  1258  039A                     	;# 
  1259  039C                     	;# 
  1260  039D                     	;# 
  1261  039E                     	;# 
  1262  039F                     	;# 
  1263  0415                     	;# 
  1264  0416                     	;# 
  1265  0417                     	;# 
  1266  041C                     	;# 
  1267  041D                     	;# 
  1268  041E                     	;# 
  1269  0FE4                     	;# 
  1270  0FE5                     	;# 
  1271  0FE6                     	;# 
  1272  0FE7                     	;# 
  1273  0FE8                     	;# 
  1274  0FE9                     	;# 
  1275  0FEA                     	;# 
  1276  0FEB                     	;# 
  1277  0FED                     	;# 
  1278  0FEE                     	;# 
  1279  0FEF                     	;# 
  1280  0000                     	;# 
  1281  0001                     	;# 
  1282  0002                     	;# 
  1283  0003                     	;# 
  1284  0004                     	;# 
  1285  0005                     	;# 
  1286  0006                     	;# 
  1287  0007                     	;# 
  1288  0008                     	;# 
  1289  0009                     	;# 
  1290  000A                     	;# 
  1291  000B                     	;# 
  1292  000C                     	;# 
  1293  000D                     	;# 
  1294  000E                     	;# 
  1295  0011                     	;# 
  1296  0012                     	;# 
  1297  0013                     	;# 
  1298  0014                     	;# 
  1299  0015                     	;# 
  1300  0016                     	;# 
  1301  0016                     	;# 
  1302  0017                     	;# 
  1303  0018                     	;# 
  1304  0019                     	;# 
  1305  001A                     	;# 
  1306  001B                     	;# 
  1307  001C                     	;# 
  1308  001E                     	;# 
  1309  001F                     	;# 
  1310  008C                     	;# 
  1311  008D                     	;# 
  1312  008E                     	;# 
  1313  0091                     	;# 
  1314  0092                     	;# 
  1315  0093                     	;# 
  1316  0094                     	;# 
  1317  0095                     	;# 
  1318  0096                     	;# 
  1319  0097                     	;# 
  1320  0098                     	;# 
  1321  0099                     	;# 
  1322  009A                     	;# 
  1323  009B                     	;# 
  1324  009B                     	;# 
  1325  009C                     	;# 
  1326  009D                     	;# 
  1327  009E                     	;# 
  1328  010C                     	;# 
  1329  010D                     	;# 
  1330  010E                     	;# 
  1331  0111                     	;# 
  1332  0112                     	;# 
  1333  0113                     	;# 
  1334  0114                     	;# 
  1335  0115                     	;# 
  1336  0116                     	;# 
  1337  0117                     	;# 
  1338  0118                     	;# 
  1339  0119                     	;# 
  1340  011A                     	;# 
  1341  011B                     	;# 
  1342  011D                     	;# 
  1343  011E                     	;# 
  1344  018C                     	;# 
  1345  018D                     	;# 
  1346  018E                     	;# 
  1347  0191                     	;# 
  1348  0191                     	;# 
  1349  0192                     	;# 
  1350  0193                     	;# 
  1351  0193                     	;# 
  1352  0193                     	;# 
  1353  0194                     	;# 
  1354  0195                     	;# 
  1355  0196                     	;# 
  1356  0199                     	;# 
  1357  019A                     	;# 
  1358  019B                     	;# 
  1359  019B                     	;# 
  1360  019C                     	;# 
  1361  019D                     	;# 
  1362  019E                     	;# 
  1363  019F                     	;# 
  1364  020C                     	;# 
  1365  020D                     	;# 
  1366  020E                     	;# 
  1367  0211                     	;# 
  1368  0211                     	;# 
  1369  0212                     	;# 
  1370  0212                     	;# 
  1371  0213                     	;# 
  1372  0213                     	;# 
  1373  0214                     	;# 
  1374  0214                     	;# 
  1375  0215                     	;# 
  1376  0215                     	;# 
  1377  0215                     	;# 
  1378  0216                     	;# 
  1379  0216                     	;# 
  1380  0217                     	;# 
  1381  0217                     	;# 
  1382  0219                     	;# 
  1383  021A                     	;# 
  1384  021B                     	;# 
  1385  021C                     	;# 
  1386  021D                     	;# 
  1387  021E                     	;# 
  1388  021F                     	;# 
  1389  0291                     	;# 
  1390  0291                     	;# 
  1391  0292                     	;# 
  1392  0293                     	;# 
  1393  0294                     	;# 
  1394  0295                     	;# 
  1395  0295                     	;# 
  1396  0296                     	;# 
  1397  0298                     	;# 
  1398  0298                     	;# 
  1399  0299                     	;# 
  1400  029A                     	;# 
  1401  029B                     	;# 
  1402  029C                     	;# 
  1403  029D                     	;# 
  1404  029E                     	;# 
  1405  0311                     	;# 
  1406  0311                     	;# 
  1407  0312                     	;# 
  1408  0313                     	;# 
  1409  0318                     	;# 
  1410  0318                     	;# 
  1411  0319                     	;# 
  1412  031A                     	;# 
  1413  038C                     	;# 
  1414  038D                     	;# 
  1415  038E                     	;# 
  1416  0391                     	;# 
  1417  0392                     	;# 
  1418  0393                     	;# 
  1419  0394                     	;# 
  1420  0395                     	;# 
  1421  0396                     	;# 
  1422  039A                     	;# 
  1423  039C                     	;# 
  1424  039D                     	;# 
  1425  039E                     	;# 
  1426  039F                     	;# 
  1427  0415                     	;# 
  1428  0416                     	;# 
  1429  0417                     	;# 
  1430  041C                     	;# 
  1431  041D                     	;# 
  1432  041E                     	;# 
  1433  0FE4                     	;# 
  1434  0FE5                     	;# 
  1435  0FE6                     	;# 
  1436  0FE7                     	;# 
  1437  0FE8                     	;# 
  1438  0FE9                     	;# 
  1439  0FEA                     	;# 
  1440  0FEB                     	;# 
  1441  0FED                     	;# 
  1442  0FEE                     	;# 
  1443  0FEF                     	;# 
  1444  0000                     	;# 
  1445  0001                     	;# 
  1446  0002                     	;# 
  1447  0003                     	;# 
  1448  0004                     	;# 
  1449  0005                     	;# 
  1450  0006                     	;# 
  1451  0007                     	;# 
  1452  0008                     	;# 
  1453  0009                     	;# 
  1454  000A                     	;# 
  1455  000B                     	;# 
  1456  000C                     	;# 
  1457  000D                     	;# 
  1458  000E                     	;# 
  1459  0011                     	;# 
  1460  0012                     	;# 
  1461  0013                     	;# 
  1462  0014                     	;# 
  1463  0015                     	;# 
  1464  0016                     	;# 
  1465  0016                     	;# 
  1466  0017                     	;# 
  1467  0018                     	;# 
  1468  0019                     	;# 
  1469  001A                     	;# 
  1470  001B                     	;# 
  1471  001C                     	;# 
  1472  001E                     	;# 
  1473  001F                     	;# 
  1474  008C                     	;# 
  1475  008D                     	;# 
  1476  008E                     	;# 
  1477  0091                     	;# 
  1478  0092                     	;# 
  1479  0093                     	;# 
  1480  0094                     	;# 
  1481  0095                     	;# 
  1482  0096                     	;# 
  1483  0097                     	;# 
  1484  0098                     	;# 
  1485  0099                     	;# 
  1486  009A                     	;# 
  1487  009B                     	;# 
  1488  009B                     	;# 
  1489  009C                     	;# 
  1490  009D                     	;# 
  1491  009E                     	;# 
  1492  010C                     	;# 
  1493  010D                     	;# 
  1494  010E                     	;# 
  1495  0111                     	;# 
  1496  0112                     	;# 
  1497  0113                     	;# 
  1498  0114                     	;# 
  1499  0115                     	;# 
  1500  0116                     	;# 
  1501  0117                     	;# 
  1502  0118                     	;# 
  1503  0119                     	;# 
  1504  011A                     	;# 
  1505  011B                     	;# 
  1506  011D                     	;# 
  1507  011E                     	;# 
  1508  018C                     	;# 
  1509  018D                     	;# 
  1510  018E                     	;# 
  1511  0191                     	;# 
  1512  0191                     	;# 
  1513  0192                     	;# 
  1514  0193                     	;# 
  1515  0193                     	;# 
  1516  0193                     	;# 
  1517  0194                     	;# 
  1518  0195                     	;# 
  1519  0196                     	;# 
  1520  0199                     	;# 
  1521  019A                     	;# 
  1522  019B                     	;# 
  1523  019B                     	;# 
  1524  019C                     	;# 
  1525  019D                     	;# 
  1526  019E                     	;# 
  1527  019F                     	;# 
  1528  020C                     	;# 
  1529  020D                     	;# 
  1530  020E                     	;# 
  1531  0211                     	;# 
  1532  0211                     	;# 
  1533  0212                     	;# 
  1534  0212                     	;# 
  1535  0213                     	;# 
  1536  0213                     	;# 
  1537  0214                     	;# 
  1538  0214                     	;# 
  1539  0215                     	;# 
  1540  0215                     	;# 
  1541  0215                     	;# 
  1542  0216                     	;# 
  1543  0216                     	;# 
  1544  0217                     	;# 
  1545  0217                     	;# 
  1546  0219                     	;# 
  1547  021A                     	;# 
  1548  021B                     	;# 
  1549  021C                     	;# 
  1550  021D                     	;# 
  1551  021E                     	;# 
  1552  021F                     	;# 
  1553  0291                     	;# 
  1554  0291                     	;# 
  1555  0292                     	;# 
  1556  0293                     	;# 
  1557  0294                     	;# 
  1558  0295                     	;# 
  1559  0295                     	;# 
  1560  0296                     	;# 
  1561  0298                     	;# 
  1562  0298                     	;# 
  1563  0299                     	;# 
  1564  029A                     	;# 
  1565  029B                     	;# 
  1566  029C                     	;# 
  1567  029D                     	;# 
  1568  029E                     	;# 
  1569  0311                     	;# 
  1570  0311                     	;# 
  1571  0312                     	;# 
  1572  0313                     	;# 
  1573  0318                     	;# 
  1574  0318                     	;# 
  1575  0319                     	;# 
  1576  031A                     	;# 
  1577  038C                     	;# 
  1578  038D                     	;# 
  1579  038E                     	;# 
  1580  0391                     	;# 
  1581  0392                     	;# 
  1582  0393                     	;# 
  1583  0394                     	;# 
  1584  0395                     	;# 
  1585  0396                     	;# 
  1586  039A                     	;# 
  1587  039C                     	;# 
  1588  039D                     	;# 
  1589  039E                     	;# 
  1590  039F                     	;# 
  1591  0415                     	;# 
  1592  0416                     	;# 
  1593  0417                     	;# 
  1594  041C                     	;# 
  1595  041D                     	;# 
  1596  041E                     	;# 
  1597  0FE4                     	;# 
  1598  0FE5                     	;# 
  1599  0FE6                     	;# 
  1600  0FE7                     	;# 
  1601  0FE8                     	;# 
  1602  0FE9                     	;# 
  1603  0FEA                     	;# 
  1604  0FEB                     	;# 
  1605  0FED                     	;# 
  1606  0FEE                     	;# 
  1607  0FEF                     	;# 
  1608  0000                     	;# 
  1609  0001                     	;# 
  1610  0002                     	;# 
  1611  0003                     	;# 
  1612  0004                     	;# 
  1613  0005                     	;# 
  1614  0006                     	;# 
  1615  0007                     	;# 
  1616  0008                     	;# 
  1617  0009                     	;# 
  1618  000A                     	;# 
  1619  000B                     	;# 
  1620  000C                     	;# 
  1621  000D                     	;# 
  1622  000E                     	;# 
  1623  0011                     	;# 
  1624  0012                     	;# 
  1625  0013                     	;# 
  1626  0014                     	;# 
  1627  0015                     	;# 
  1628  0016                     	;# 
  1629  0016                     	;# 
  1630  0017                     	;# 
  1631  0018                     	;# 
  1632  0019                     	;# 
  1633  001A                     	;# 
  1634  001B                     	;# 
  1635  001C                     	;# 
  1636  001E                     	;# 
  1637  001F                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0093                     	;# 
  1644  0094                     	;# 
  1645  0095                     	;# 
  1646  0096                     	;# 
  1647  0097                     	;# 
  1648  0098                     	;# 
  1649  0099                     	;# 
  1650  009A                     	;# 
  1651  009B                     	;# 
  1652  009B                     	;# 
  1653  009C                     	;# 
  1654  009D                     	;# 
  1655  009E                     	;# 
  1656  010C                     	;# 
  1657  010D                     	;# 
  1658  010E                     	;# 
  1659  0111                     	;# 
  1660  0112                     	;# 
  1661  0113                     	;# 
  1662  0114                     	;# 
  1663  0115                     	;# 
  1664  0116                     	;# 
  1665  0117                     	;# 
  1666  0118                     	;# 
  1667  0119                     	;# 
  1668  011A                     	;# 
  1669  011B                     	;# 
  1670  011D                     	;# 
  1671  011E                     	;# 
  1672  018C                     	;# 
  1673  018D                     	;# 
  1674  018E                     	;# 
  1675  0191                     	;# 
  1676  0191                     	;# 
  1677  0192                     	;# 
  1678  0193                     	;# 
  1679  0193                     	;# 
  1680  0193                     	;# 
  1681  0194                     	;# 
  1682  0195                     	;# 
  1683  0196                     	;# 
  1684  0199                     	;# 
  1685  019A                     	;# 
  1686  019B                     	;# 
  1687  019B                     	;# 
  1688  019C                     	;# 
  1689  019D                     	;# 
  1690  019E                     	;# 
  1691  019F                     	;# 
  1692  020C                     	;# 
  1693  020D                     	;# 
  1694  020E                     	;# 
  1695  0211                     	;# 
  1696  0211                     	;# 
  1697  0212                     	;# 
  1698  0212                     	;# 
  1699  0213                     	;# 
  1700  0213                     	;# 
  1701  0214                     	;# 
  1702  0214                     	;# 
  1703  0215                     	;# 
  1704  0215                     	;# 
  1705  0215                     	;# 
  1706  0216                     	;# 
  1707  0216                     	;# 
  1708  0217                     	;# 
  1709  0217                     	;# 
  1710  0219                     	;# 
  1711  021A                     	;# 
  1712  021B                     	;# 
  1713  021C                     	;# 
  1714  021D                     	;# 
  1715  021E                     	;# 
  1716  021F                     	;# 
  1717  0291                     	;# 
  1718  0291                     	;# 
  1719  0292                     	;# 
  1720  0293                     	;# 
  1721  0294                     	;# 
  1722  0295                     	;# 
  1723  0295                     	;# 
  1724  0296                     	;# 
  1725  0298                     	;# 
  1726  0298                     	;# 
  1727  0299                     	;# 
  1728  029A                     	;# 
  1729  029B                     	;# 
  1730  029C                     	;# 
  1731  029D                     	;# 
  1732  029E                     	;# 
  1733  0311                     	;# 
  1734  0311                     	;# 
  1735  0312                     	;# 
  1736  0313                     	;# 
  1737  0318                     	;# 
  1738  0318                     	;# 
  1739  0319                     	;# 
  1740  031A                     	;# 
  1741  038C                     	;# 
  1742  038D                     	;# 
  1743  038E                     	;# 
  1744  0391                     	;# 
  1745  0392                     	;# 
  1746  0393                     	;# 
  1747  0394                     	;# 
  1748  0395                     	;# 
  1749  0396                     	;# 
  1750  039A                     	;# 
  1751  039C                     	;# 
  1752  039D                     	;# 
  1753  039E                     	;# 
  1754  039F                     	;# 
  1755  0415                     	;# 
  1756  0416                     	;# 
  1757  0417                     	;# 
  1758  041C                     	;# 
  1759  041D                     	;# 
  1760  041E                     	;# 
  1761  0FE4                     	;# 
  1762  0FE5                     	;# 
  1763  0FE6                     	;# 
  1764  0FE7                     	;# 
  1765  0FE8                     	;# 
  1766  0FE9                     	;# 
  1767  0FEA                     	;# 
  1768  0FEB                     	;# 
  1769  0FED                     	;# 
  1770  0FEE                     	;# 
  1771  0FEF                     	;_cmd_buf
  1772                           
  1773                           	psect	idataBANK1
  1774  0002                     __pidataBANK1:	
  1775                           
  1776                           ;initializer for put_cmd@idx
  1777  0002  34FF               	retlw	-1
  1778                           
  1779                           ;initializer for _BACKPLANE_SLAVE_ADDRESS
  1780  0003  3401               	retlw	1
  1781                           
  1782                           	psect	idataBANK2
  1783  11E8                     __pidataBANK2:	
  1784                           
  1785                           ;initializer for _tmr_scaler
  1786  11E8  3401               	retlw	1
  1787                           
  1788                           ;initializer for dev_map_iterator@start
  1789  11E9  3401               	retlw	1
  1790                           
  1791                           ;initializer for _type_no_data
  1792  11EA  3406               	retlw	6
  1793                           
  1794                           	psect	stringtext
  1795  1000                     __pstringtext:	
  1796  1000                     _dpowers:	
  1797  1000  3401               	retlw	1
  1798  1001  3400               	retlw	0
  1799  1002  340A               	retlw	10
  1800  1003  3400               	retlw	0
  1801  1004  3464               	retlw	100
  1802  1005  3400               	retlw	0
  1803  1006  34E8               	retlw	232
  1804  1007  3403               	retlw	3
  1805  1008  3410               	retlw	16
  1806  1009  3427               	retlw	39
  1807  100A                     __end_of_dpowers:	
  1808  100A                     _MAX_Y:	
  1809  100A  3404               	retlw	4
  1810  100B                     __end_of_MAX_Y:	
  1811  0015                     _TMR0	set	21
  1812  0012                     _PIR2bits	set	18
  1813  000B                     _INTCONbits	set	11
  1814  0011                     _PIR1bits	set	17
  1815  005A                     _TMR0IF	set	90
  1816  0095                     _OPTION_REG	set	149
  1817  0097                     _WDTCON	set	151
  1818  0098                     _OSCTUNE	set	152
  1819  0099                     _OSCCON	set	153
  1820  0092                     _PIE2bits	set	146
  1821  0095                     _OPTION_REGbits	set	149
  1822  008E                     _TRISC	set	142
  1823  008D                     _TRISB	set	141
  1824  008C                     _TRISA	set	140
  1825  0091                     _PIE1bits	set	145
  1826  04D6                     _PLLR	set	1238
  1827  010E                     _LATCbits	set	270
  1828  011D                     _APFCON0	set	285
  1829  011E                     _APFCON1	set	286
  1830  010E                     _LATC	set	270
  1831  010D                     _LATB	set	269
  1832  010C                     _LATA	set	268
  1833  018C                     _ANSELA	set	396
  1834  018D                     _ANSELB	set	397
  1835  018E                     _ANSELC	set	398
  1836  0199                     _RCREG	set	409
  1837  019D                     _RCSTAbits	set	413
  1838  019A                     _TXREG	set	410
  1839  019C                     _SPBRGH	set	412
  1840  019B                     _SPBRGL	set	411
  1841  019E                     _TXSTA	set	414
  1842  019D                     _RCSTA	set	413
  1843  019F                     _BAUDCON	set	415
  1844  0196                     _EECON2	set	406
  1845  0193                     _EEDATL	set	403
  1846  0194                     _EEDATH	set	404
  1847  0195                     _EECON1bits	set	405
  1848  0192                     _EEADRH	set	402
  1849  0191                     _EEADRL	set	401
  1850  020E                     _WPUC	set	526
  1851  020C                     _WPUA	set	524
  1852  020D                     _WPUB	set	525
  1853  0211                     _SSP1BUF	set	529
  1854  0216                     _SSP1CON2bits	set	534
  1855  0215                     _SSP1CON1bits	set	533
  1856  0212                     _SSP1ADD	set	530
  1857  0217                     _SSP1CON3	set	535
  1858  0215                     _SSP1CON1	set	533
  1859  0214                     _SSP1STAT	set	532
  1860  100B                     STR_25:	
  1861  100B  3421               	retlw	33	;'!'
  1862  100C  343A               	retlw	58	;':'
  1863  100D  3457               	retlw	87	;'W'
  1864  100E  3453               	retlw	83	;'S'
  1865  100F  3443               	retlw	67	;'C'
  1866  1010  343A               	retlw	58	;':'
  1867  1011  3450               	retlw	80	;'P'
  1868  1012  344F               	retlw	79	;'O'
  1869  1013  3453               	retlw	83	;'S'
  1870  1014  3420               	retlw	32	;' '
  1871  1015  344C               	retlw	76	;'L'
  1872  1016  3441               	retlw	65	;'A'
  1873  1017  3452               	retlw	82	;'R'
  1874  1018  3447               	retlw	71	;'G'
  1875  1019  3445               	retlw	69	;'E'
  1876  101A  3452               	retlw	82	;'R'
  1877  101B  3420               	retlw	32	;' '
  1878  101C  3454               	retlw	84	;'T'
  1879  101D  3448               	retlw	72	;'H'
  1880  101E  3441               	retlw	65	;'A'
  1881  101F  344E               	retlw	78	;'N'
  1882  1020  3420               	retlw	32	;' '
  1883  1021  3432               	retlw	50	;'2'
  1884  1022  3437               	retlw	55	;'7'
  1885  1023  340A               	retlw	10
  1886  1024  3400               	retlw	0
  1887  1025                     STR_23:	
  1888  1025  3421               	retlw	33	;'!'
  1889  1026  343A               	retlw	58	;':'
  1890  1027  3450               	retlw	80	;'P'
  1891  1028  344F               	retlw	79	;'O'
  1892  1029  3453               	retlw	83	;'S'
  1893  102A  343A               	retlw	58	;':'
  1894  102B  3450               	retlw	80	;'P'
  1895  102C  344F               	retlw	79	;'O'
  1896  102D  3453               	retlw	83	;'S'
  1897  102E  3420               	retlw	32	;' '
  1898  102F  344C               	retlw	76	;'L'
  1899  1030  3441               	retlw	65	;'A'
  1900  1031  3452               	retlw	82	;'R'
  1901  1032  3447               	retlw	71	;'G'
  1902  1033  3445               	retlw	69	;'E'
  1903  1034  3452               	retlw	82	;'R'
  1904  1035  3420               	retlw	32	;' '
  1905  1036  3454               	retlw	84	;'T'
  1906  1037  3448               	retlw	72	;'H'
  1907  1038  3441               	retlw	65	;'A'
  1908  1039  344E               	retlw	78	;'N'
  1909  103A  3420               	retlw	32	;' '
  1910  103B  3432               	retlw	50	;'2'
  1911  103C  3437               	retlw	55	;'7'
  1912  103D  340A               	retlw	10
  1913  103E  3400               	retlw	0
  1914  103F                     STR_17:	
  1915  103F  3421               	retlw	33	;'!'
  1916  1040  343A               	retlw	58	;':'
  1917  1041  3425               	retlw	37	;'%'
  1918  1042  3425               	retlw	37	;'%'
  1919  1043  3425               	retlw	37	;'%'
  1920  1044  3464               	retlw	100	;'d'
  1921  1045  343A               	retlw	58	;':'
  1922  1046  3455               	retlw	85	;'U'
  1923  1047  344E               	retlw	78	;'N'
  1924  1048  3444               	retlw	68	;'D'
  1925  1049  3445               	retlw	69	;'E'
  1926  104A  3454               	retlw	84	;'T'
  1927  104B  3445               	retlw	69	;'E'
  1928  104C  3443               	retlw	67	;'C'
  1929  104D  3454               	retlw	84	;'T'
  1930  104E  3445               	retlw	69	;'E'
  1931  104F  3444               	retlw	68	;'D'
  1932  1050  345F               	retlw	95	;'_'
  1933  1051  3444               	retlw	68	;'D'
  1934  1052  3445               	retlw	69	;'E'
  1935  1053  3456               	retlw	86	;'V'
  1936  1054  3449               	retlw	73	;'I'
  1937  1055  3443               	retlw	67	;'C'
  1938  1056  3445               	retlw	69	;'E'
  1939  1057  340A               	retlw	10
  1940  1058  3400               	retlw	0
  1941  1059                     STR_12:	
  1942  1059  3421               	retlw	33	;'!'
  1943  105A  343A               	retlw	58	;':'
  1944  105B  344E               	retlw	78	;'N'
  1945  105C  344F               	retlw	79	;'O'
  1946  105D  3420               	retlw	32	;' '
  1947  105E  3441               	retlw	65	;'A'
  1948  105F  3443               	retlw	67	;'C'
  1949  1060  344B               	retlw	75	;'K'
  1950  1061  3420               	retlw	32	;' '
  1951  1062  3446               	retlw	70	;'F'
  1952  1063  3452               	retlw	82	;'R'
  1953  1064  344F               	retlw	79	;'O'
  1954  1065  344D               	retlw	77	;'M'
  1955  1066  3420               	retlw	32	;' '
  1956  1067  3449               	retlw	73	;'I'
  1957  1068  3432               	retlw	50	;'2'
  1958  1069  3443               	retlw	67	;'C'
  1959  106A  3420               	retlw	32	;' '
  1960  106B  3453               	retlw	83	;'S'
  1961  106C  344C               	retlw	76	;'L'
  1962  106D  3441               	retlw	65	;'A'
  1963  106E  3456               	retlw	86	;'V'
  1964  106F  3445               	retlw	69	;'E'
  1965  1070  340A               	retlw	10
  1966  1071  3400               	retlw	0
  1967  1072                     STR_16:	
  1968  1072  3421               	retlw	33	;'!'
  1969  1073  343A               	retlw	58	;':'
  1970  1074  344D               	retlw	77	;'M'
  1971  1075  3441               	retlw	65	;'A'
  1972  1076  3450               	retlw	80	;'P'
  1973  1077  343A               	retlw	58	;':'
  1974  1078  344E               	retlw	78	;'N'
  1975  1079  344F               	retlw	79	;'O'
  1976  107A  3420               	retlw	32	;' '
  1977  107B  3453               	retlw	83	;'S'
  1978  107C  344C               	retlw	76	;'L'
  1979  107D  3441               	retlw	65	;'A'
  1980  107E  3456               	retlw	86	;'V'
  1981  107F  3445               	retlw	69	;'E'
  1982  1080  3420               	retlw	32	;' '
  1983  1081  3446               	retlw	70	;'F'
  1984  1082  344F               	retlw	79	;'O'
  1985  1083  3455               	retlw	85	;'U'
  1986  1084  344E               	retlw	78	;'N'
  1987  1085  3444               	retlw	68	;'D'
  1988  1086  340A               	retlw	10
  1989  1087  3400               	retlw	0
  1990  1088                     STR_18:	
  1991  1088  3421               	retlw	33	;'!'
  1992  1089  343A               	retlw	58	;':'
  1993  108A  3425               	retlw	37	;'%'
  1994  108B  3425               	retlw	37	;'%'
  1995  108C  3425               	retlw	37	;'%'
  1996  108D  3464               	retlw	100	;'d'
  1997  108E  343A               	retlw	58	;':'
  1998  108F  344E               	retlw	78	;'N'
  1999  1090  3445               	retlw	69	;'E'
  2000  1091  3454               	retlw	84	;'T'
  2001  1092  3457               	retlw	87	;'W'
  2002  1093  344F               	retlw	79	;'O'
  2003  1094  3452               	retlw	82	;'R'
  2004  1095  344B               	retlw	75	;'K'
  2005  1096  345F               	retlw	95	;'_'
  2006  1097  3445               	retlw	69	;'E'
  2007  1098  3452               	retlw	82	;'R'
  2008  1099  3452               	retlw	82	;'R'
  2009  109A  344F               	retlw	79	;'O'
  2010  109B  3452               	retlw	82	;'R'
  2011  109C  340A               	retlw	10
  2012  109D  3400               	retlw	0
  2013  109E                     STR_33:	
  2014  109E  3442               	retlw	66	;'B'
  2015  109F  3441               	retlw	65	;'A'
  2016  10A0  3443               	retlw	67	;'C'
  2017  10A1  344B               	retlw	75	;'K'
  2018  10A2  3450               	retlw	80	;'P'
  2019  10A3  344C               	retlw	76	;'L'
  2020  10A4  3441               	retlw	65	;'A'
  2021  10A5  344E               	retlw	78	;'N'
  2022  10A6  3445               	retlw	69	;'E'
  2023  10A7  342D               	retlw	45	;'-'
  2024  10A8  344D               	retlw	77	;'M'
  2025  10A9  3441               	retlw	65	;'A'
  2026  10AA  3453               	retlw	83	;'S'
  2027  10AB  3454               	retlw	84	;'T'
  2028  10AC  3445               	retlw	69	;'E'
  2029  10AD  3452               	retlw	82	;'R'
  2030  10AE  3400               	retlw	0
  2031  10AF                     STR_68:	
  2032  10AF  3449               	retlw	73	;'I'
  2033  10B0  344C               	retlw	76	;'L'
  2034  10B1  344C               	retlw	76	;'L'
  2035  10B2  3445               	retlw	69	;'E'
  2036  10B3  3447               	retlw	71	;'G'
  2037  10B4  3441               	retlw	65	;'A'
  2038  10B5  344C               	retlw	76	;'L'
  2039  10B6  345F               	retlw	95	;'_'
  2040  10B7  3454               	retlw	84	;'T'
  2041  10B8  3459               	retlw	89	;'Y'
  2042  10B9  3450               	retlw	80	;'P'
  2043  10BA  3445               	retlw	69	;'E'
  2044  10BB  340A               	retlw	10
  2045  10BC  3400               	retlw	0
  2046  10BD                     STR_8:	
  2047  10BD  3421               	retlw	33	;'!'
  2048  10BE  343A               	retlw	58	;':'
  2049  10BF  3453               	retlw	83	;'S'
  2050  10C0  3454               	retlw	84	;'T'
  2051  10C1  3450               	retlw	80	;'P'
  2052  10C2  343A               	retlw	58	;':'
  2053  10C3  344E               	retlw	78	;'N'
  2054  10C4  3441               	retlw	65	;'A'
  2055  10C5  3443               	retlw	67	;'C'
  2056  10C6  344B               	retlw	75	;'K'
  2057  10C7  340A               	retlw	10
  2058  10C8  3400               	retlw	0
  2059  10C9                     STR_7:	
  2060  10C9  342A               	retlw	42	;'*'
  2061  10CA  343A               	retlw	58	;':'
  2062  10CB  3453               	retlw	83	;'S'
  2063  10CC  3454               	retlw	84	;'T'
  2064  10CD  3450               	retlw	80	;'P'
  2065  10CE  343A               	retlw	58	;':'
  2066  10CF  3441               	retlw	65	;'A'
  2067  10D0  3443               	retlw	67	;'C'
  2068  10D1  344B               	retlw	75	;'K'
  2069  10D2  340A               	retlw	10
  2070  10D3  3400               	retlw	0
  2071  10D4                     STR_48:	
  2072  10D4  3424               	retlw	36	;'$'
  2073  10D5  343A               	retlw	58	;':'
  2074  10D6  3452               	retlw	82	;'R'
  2075  10D7  3444               	retlw	68	;'D'
  2076  10D8  3441               	retlw	65	;'A'
  2077  10D9  343A               	retlw	58	;':'
  2078  10DA  3425               	retlw	37	;'%'
  2079  10DB  3464               	retlw	100	;'d'
  2080  10DC  340A               	retlw	10
  2081  10DD  3400               	retlw	0
  2082  10DE                     STR_66:	
  2083  10DE  342D               	retlw	45	;'-'
  2084  10DF  3425               	retlw	37	;'%'
  2085  10E0  3464               	retlw	100	;'d'
  2086  10E1  342E               	retlw	46	;'.'
  2087  10E2  3425               	retlw	37	;'%'
  2088  10E3  3430               	retlw	48	;'0'
  2089  10E4  3432               	retlw	50	;'2'
  2090  10E5  3464               	retlw	100	;'d'
  2091  10E6  340A               	retlw	10
  2092  10E7  3400               	retlw	0
  2093  10E8                     STR_37:	
  2094  10E8  3424               	retlw	36	;'$'
  2095  10E9  343A               	retlw	58	;':'
  2096  10EA  3457               	retlw	87	;'W'
  2097  10EB  3448               	retlw	72	;'H'
  2098  10EC  344F               	retlw	79	;'O'
  2099  10ED  343A               	retlw	58	;':'
  2100  10EE  3425               	retlw	37	;'%'
  2101  10EF  3473               	retlw	115	;'s'
  2102  10F0  340A               	retlw	10
  2103  10F1  3400               	retlw	0
  2104  10F2                     STR_41:	
  2105  10F2  342A               	retlw	42	;'*'
  2106  10F3  343A               	retlw	58	;':'
  2107  10F4  3453               	retlw	83	;'S'
  2108  10F5  3454               	retlw	84	;'T'
  2109  10F6  3450               	retlw	80	;'P'
  2110  10F7  343A               	retlw	58	;':'
  2111  10F8  3425               	retlw	37	;'%'
  2112  10F9  3473               	retlw	115	;'s'
  2113  10FA  340A               	retlw	10
  2114  10FB  3400               	retlw	0
  2115  10FC                     STR_64:	
  2116  10FC  342D               	retlw	45	;'-'
  2117  10FD  3425               	retlw	37	;'%'
  2118  10FE  3464               	retlw	100	;'d'
  2119  10FF  342E               	retlw	46	;'.'
  2120  1100  3425               	retlw	37	;'%'
  2121  1101  3430               	retlw	48	;'0'
  2122  1102  3432               	retlw	50	;'2'
  2123  1103  3464               	retlw	100	;'d'
  2124  1104  342C               	retlw	44	;','
  2125  1105  3400               	retlw	0
  2126  1106                     STR_56:	
  2127  1106  3455               	retlw	85	;'U'
  2128  1107  3449               	retlw	73	;'I'
  2129  1108  344E               	retlw	78	;'N'
  2130  1109  3454               	retlw	84	;'T'
  2131  110A  3431               	retlw	49	;'1'
  2132  110B  3436               	retlw	54	;'6'
  2133  110C  345F               	retlw	95	;'_'
  2134  110D  3454               	retlw	84	;'T'
  2135  110E  343A               	retlw	58	;':'
  2136  110F  3400               	retlw	0
  2137  1110                     STR_2:	
  2138  1110  3424               	retlw	36	;'$'
  2139  1111  343A               	retlw	58	;':'
  2140  1112  3457               	retlw	87	;'W'
  2141  1113  3448               	retlw	72	;'H'
  2142  1114  344F               	retlw	79	;'O'
  2143  1115  343A               	retlw	58	;':'
  2144  1116  3425               	retlw	37	;'%'
  2145  1117  3464               	retlw	100	;'d'
  2146  1118  340A               	retlw	10
  2147  1119  3400               	retlw	0
  2148  111A                     STR_11:	
  2149  111A  3424               	retlw	36	;'$'
  2150  111B  343A               	retlw	58	;':'
  2151  111C  3447               	retlw	71	;'G'
  2152  111D  3445               	retlw	69	;'E'
  2153  111E  3454               	retlw	84	;'T'
  2154  111F  343A               	retlw	58	;':'
  2155  1120  3425               	retlw	37	;'%'
  2156  1121  3464               	retlw	100	;'d'
  2157  1122  340A               	retlw	10
  2158  1123  3400               	retlw	0
  2159  1124                     STR_67:	
  2160  1124  344E               	retlw	78	;'N'
  2161  1125  344F               	retlw	79	;'O'
  2162  1126  345F               	retlw	95	;'_'
  2163  1127  3444               	retlw	68	;'D'
  2164  1128  3441               	retlw	65	;'A'
  2165  1129  3454               	retlw	84	;'T'
  2166  112A  3441               	retlw	65	;'A'
  2167  112B  340A               	retlw	10
  2168  112C  3400               	retlw	0
  2169  112D                     STR_50:	
  2170  112D  3455               	retlw	85	;'U'
  2171  112E  3449               	retlw	73	;'I'
  2172  112F  344E               	retlw	78	;'N'
  2173  1130  3454               	retlw	84	;'T'
  2174  1131  3438               	retlw	56	;'8'
  2175  1132  345F               	retlw	95	;'_'
  2176  1133  3454               	retlw	84	;'T'
  2177  1134  343A               	retlw	58	;':'
  2178  1135  3400               	retlw	0
  2179  1136                     STR_62:	
  2180  1136  3446               	retlw	70	;'F'
  2181  1137  344C               	retlw	76	;'L'
  2182  1138  344F               	retlw	79	;'O'
  2183  1139  3441               	retlw	65	;'A'
  2184  113A  3454               	retlw	84	;'T'
  2185  113B  343A               	retlw	58	;':'
  2186  113C  3400               	retlw	0
  2187  113D                     STR_34:	
  2188  113D  3428               	retlw	40	;'('
  2189  113E  346E               	retlw	110	;'n'
  2190  113F  3475               	retlw	117	;'u'
  2191  1140  346C               	retlw	108	;'l'
  2192  1141  346C               	retlw	108	;'l'
  2193  1142  3429               	retlw	41	;')'
  2194  1143  3400               	retlw	0
  2195  1144                     STR_27:	
  2196  1144  3424               	retlw	36	;'$'
  2197  1145  343A               	retlw	58	;':'
  2198  1146  3452               	retlw	82	;'R'
  2199  1147  3453               	retlw	83	;'S'
  2200  1148  3443               	retlw	67	;'C'
  2201  1149  343A               	retlw	58	;':'
  2202  114A  3400               	retlw	0
  2203  114B                     STR_13:	
  2204  114B  3424               	retlw	36	;'$'
  2205  114C  343A               	retlw	58	;':'
  2206  114D  344D               	retlw	77	;'M'
  2207  114E  3441               	retlw	65	;'A'
  2208  114F  3450               	retlw	80	;'P'
  2209  1150  343A               	retlw	58	;':'
  2210  1151  3400               	retlw	0
  2211  1152                     STR_49:	
  2212  1152  3425               	retlw	37	;'%'
  2213  1153  3425               	retlw	37	;'%'
  2214  1154  3425               	retlw	37	;'%'
  2215  1155  3464               	retlw	100	;'d'
  2216  1156  343A               	retlw	58	;':'
  2217  1157  3400               	retlw	0
  2218  1158                     STR_35:	
  2219  1158  3423               	retlw	35	;'#'
  2220  1159  3425               	retlw	37	;'%'
  2221  115A  3473               	retlw	115	;'s'
  2222  115B  340A               	retlw	10
  2223  115C  3400               	retlw	0
  2224  115D                     STR_52:	
  2225  115D  3425               	retlw	37	;'%'
  2226  115E  3475               	retlw	117	;'u'
  2227  115F  340A               	retlw	10
  2228  1160  3400               	retlw	0
  2229  1161                     STR_51:	
  2230  1161  3425               	retlw	37	;'%'
  2231  1162  3475               	retlw	117	;'u'
  2232  1163  342C               	retlw	44	;','
  2233  1164  3400               	retlw	0
  2234  1165                     STR_47:	
  2235  1165  3452               	retlw	82	;'R'
  2236  1166  3444               	retlw	68	;'D'
  2237  1167  3441               	retlw	65	;'A'
  2238  1168  3400               	retlw	0
  2239  1169                     STR_46:	
  2240  1169  3457               	retlw	87	;'W'
  2241  116A  3444               	retlw	68	;'D'
  2242  116B  3441               	retlw	65	;'A'
  2243  116C  3400               	retlw	0
  2244  116D                     STR_42:	
  2245  116D  3441               	retlw	65	;'A'
  2246  116E  3443               	retlw	67	;'C'
  2247  116F  344B               	retlw	75	;'K'
  2248  1170  3400               	retlw	0
  2249  1171                     STR_14:	
  2250  1171  3425               	retlw	37	;'%'
  2251  1172  3464               	retlw	100	;'d'
  2252  1173  342C               	retlw	44	;','
  2253  1174  3400               	retlw	0
  2254  1175                     STR_5:	
  2255  1175  3453               	retlw	83	;'S'
  2256  1176  3454               	retlw	84	;'T'
  2257  1177  3441               	retlw	65	;'A'
  2258  1178  3400               	retlw	0
  2259  1179                     STR_20:	
  2260  1179  3449               	retlw	73	;'I'
  2261  117A  3432               	retlw	50	;'2'
  2262  117B  3443               	retlw	67	;'C'
  2263  117C  3400               	retlw	0
  2264  117D                     STR_31:	
  2265  117D  3443               	retlw	67	;'C'
  2266  117E  3453               	retlw	83	;'S'
  2267  117F  3443               	retlw	67	;'C'
  2268  1180  3400               	retlw	0
  2269  1181                     STR_26:	
  2270  1181  3452               	retlw	82	;'R'
  2271  1182  3453               	retlw	83	;'S'
  2272  1183  3443               	retlw	67	;'C'
  2273  1184  3400               	retlw	0
  2274  1185                     STR_24:	
  2275  1185  3457               	retlw	87	;'W'
  2276  1186  3453               	retlw	83	;'S'
  2277  1187  3443               	retlw	67	;'C'
  2278  1188  3400               	retlw	0
  2279  1189                     STR_32:	
  2280  1189  3453               	retlw	83	;'S'
  2281  118A  3445               	retlw	69	;'E'
  2282  118B  344E               	retlw	78	;'N'
  2283  118C  3400               	retlw	0
  2284  118D                     STR_1:	
  2285  118D  3457               	retlw	87	;'W'
  2286  118E  3448               	retlw	72	;'H'
  2287  118F  344F               	retlw	79	;'O'
  2288  1190  3400               	retlw	0
  2289  1191                     STR_21:	
  2290  1191  344D               	retlw	77	;'M'
  2291  1192  3441               	retlw	65	;'A'
  2292  1193  3450               	retlw	80	;'P'
  2293  1194  3400               	retlw	0
  2294  1195                     STR_6:	
  2295  1195  3453               	retlw	83	;'S'
  2296  1196  3454               	retlw	84	;'T'
  2297  1197  3450               	retlw	80	;'P'
  2298  1198  3400               	retlw	0
  2299  1199                     STR_22:	
  2300  1199  3450               	retlw	80	;'P'
  2301  119A  344F               	retlw	79	;'O'
  2302  119B  3453               	retlw	83	;'S'
  2303  119C  3400               	retlw	0
  2304  119D                     STR_10:	
  2305  119D  3447               	retlw	71	;'G'
  2306  119E  3445               	retlw	69	;'E'
  2307  119F  3454               	retlw	84	;'T'
  2308  11A0  3400               	retlw	0
  2309  11A1                     STR_9:	
  2310  11A1  3453               	retlw	83	;'S'
  2311  11A2  3445               	retlw	69	;'E'
  2312  11A3  3454               	retlw	84	;'T'
  2313  11A4  3400               	retlw	0
  2314  11A5                     STR_4:	
  2315  11A5  3453               	retlw	83	;'S'
  2316  11A6  3441               	retlw	65	;'A'
  2317  11A7  3456               	retlw	86	;'V'
  2318  11A8  3400               	retlw	0
  2319  11A9                     STR_28:	
  2320  11A9  3425               	retlw	37	;'%'
  2321  11AA  3464               	retlw	100	;'d'
  2322  11AB  347C               	retlw	124	;'|'
  2323  11AC  3400               	retlw	0
  2324  11AD                     STR_3:	
  2325  11AD  3421               	retlw	33	;'!'
  2326  11AE  340A               	retlw	10
  2327  11AF  3400               	retlw	0
  2328  1088                     
  2329                           ; #config settings
  2330  0000                     
  2331                           	psect	cinit
  2332  003E                     start_initialization:	
  2333  003E                     __initialization:		;BIGRAM
  2334                           
  2335                           ; Initialize objects allocated to BANK1
  2336  003E  0021               	movlb	1	; select bank1
  2337  003F  3180  2002  3180   	fcall	__pidataBANK1	;fetch initializer
  2338  0042  00ED               	movwf	__pdataBANK1& (0+127)
  2339  0043  3180  2003  3180   	fcall	__pidataBANK1+1	;fetch initializer
  2340  0046  00EE               	movwf	(__pdataBANK1+1)& (0+127)
  2341                           
  2342                           ; Initialize objects allocated to BANK2
  2343  0047  0022               	movlb	2	; select bank2
  2344  0048  3191  21E8  3180   	fcall	__pidataBANK2	;fetch initializer
  2345  004B  00E2               	movwf	__pdataBANK2& (0+127)
  2346  004C  3191  21E9  3180   	fcall	__pidataBANK2+1	;fetch initializer
  2347  004F  00E3               	movwf	(__pdataBANK2+1)& (0+127)
  2348  0050  3191  21EA  3180   	fcall	__pidataBANK2+2	;fetch initializer
  2349  0053  00E4               	movwf	(__pdataBANK2+2)& (0+127)
  2350                           
  2351                           ; Clear objects allocated to BIGRAM
  2352  0054  3030               	movlw	low (0+9008)
  2353  0055  0084               	movwf	4
  2354  0056  3023               	movlw	high (0+9008)
  2355  0057  0085               	movwf	5
  2356  0058  30C0               	movlw	192
  2357  0059  00FE               	movwf	btemp
  2358  005A  3000               	movlw	0
  2359  005B  00FF               	movwf	btemp+1
  2360  005C  3192  222F  3180   	fcall	clear_ram0
  2361                           
  2362                           ; Clear objects allocated to COMMON
  2363  005F  01F0               	clrf	__pbssCOMMON& (0+127)
  2364  0060  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  2365  0061  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  2366  0062  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  2367  0063  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  2368  0064  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  2369  0065  01F6               	clrf	(__pbssCOMMON+6)& (0+127)
  2370                           
  2371                           ; Clear objects allocated to BANK0
  2372  0066  0020               	movlb	0	; select bank0
  2373  0067  01EB               	clrf	__pbssBANK0& (0+127)
  2374  0068  01EC               	clrf	(__pbssBANK0+1)& (0+127)
  2375  0069  01ED               	clrf	(__pbssBANK0+2)& (0+127)
  2376  006A  01EE               	clrf	(__pbssBANK0+3)& (0+127)
  2377                           
  2378                           ; Clear objects allocated to BANK1
  2379  006B  30D9               	movlw	low __pbssBANK1
  2380  006C  0084               	movwf	4
  2381  006D  3000               	movlw	high __pbssBANK1
  2382  006E  0085               	movwf	5
  2383  006F  3014               	movlw	20
  2384  0070  00FE               	movwf	btemp
  2385  0071  3000               	movlw	0
  2386  0072  00FF               	movwf	btemp+1
  2387  0073  3192  222F  3180   	fcall	clear_ram0
  2388                           
  2389                           ; Clear objects allocated to BANK2
  2390  0076  3020               	movlw	low __pbssBANK2
  2391  0077  0084               	movwf	4
  2392  0078  3001               	movlw	high __pbssBANK2
  2393  0079  0085               	movwf	5
  2394  007A  3042               	movlw	66
  2395  007B  00FE               	movwf	btemp
  2396  007C  3000               	movlw	0
  2397  007D  00FF               	movwf	btemp+1
  2398  007E  3192  222F  3180   	fcall	clear_ram0
  2399                           
  2400                           ; Clear objects allocated to BANK3
  2401  0081  30A0               	movlw	low __pbssBANK3
  2402  0082  0084               	movwf	4
  2403  0083  3001               	movlw	high __pbssBANK3
  2404  0084  0085               	movwf	5
  2405  0085  302C               	movlw	44
  2406  0086  00FE               	movwf	btemp
  2407  0087  3000               	movlw	0
  2408  0088  00FF               	movwf	btemp+1
  2409  0089  3192  222F  3180   	fcall	clear_ram0
  2410                           
  2411                           ; Clear objects allocated to BANK4
  2412  008C  3020               	movlw	low __pbssBANK4
  2413  008D  0084               	movwf	4
  2414  008E  3002               	movlw	high __pbssBANK4
  2415  008F  0085               	movwf	5
  2416  0090  3040               	movlw	64
  2417  0091  00FE               	movwf	btemp
  2418  0092  3000               	movlw	0
  2419  0093  00FF               	movwf	btemp+1
  2420  0094  3192  222F  3180   	fcall	clear_ram0
  2421                           
  2422                           ; Clear objects allocated to BANK5
  2423  0097  30A0               	movlw	low __pbssBANK5
  2424  0098  0084               	movwf	4
  2425  0099  3002               	movlw	high __pbssBANK5
  2426  009A  0085               	movwf	5
  2427  009B  3040               	movlw	64
  2428  009C  00FE               	movwf	btemp
  2429  009D  3000               	movlw	0
  2430  009E  00FF               	movwf	btemp+1
  2431  009F  3192  222F  3180   	fcall	clear_ram0
  2432                           
  2433                           ; Clear objects allocated to BANK6
  2434  00A2  3020               	movlw	low __pbssBANK6
  2435  00A3  0084               	movwf	4
  2436  00A4  3003               	movlw	high __pbssBANK6
  2437  00A5  0085               	movwf	5
  2438  00A6  3040               	movlw	64
  2439  00A7  00FE               	movwf	btemp
  2440  00A8  3000               	movlw	0
  2441  00A9  00FF               	movwf	btemp+1
  2442  00AA  3192  222F         	fcall	clear_ram0
  2443  00AC                     end_of_initialization:	
  2444                           ;End of C runtime variable initialization code
  2445                           
  2446  00AC                     __end_of__initialization:	
  2447  00AC  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2448  00AD  0020               	movlb	0
  2449  00AE  3195  2D3A         	ljmp	_main	;jump to C main() function
  2450                           
  2451                           	psect	bssCOMMON
  2452  0070                     __pbssCOMMON:	
  2453  0070                     inv_handler@t:	
  2454  0070                     	ds	2
  2455  0072                     _eusartRxTail:	
  2456  0072                     	ds	1
  2457  0073                     _eusartRxHead:	
  2458  0073                     	ds	1
  2459  0074                     _eusartTxBufferRemaining:	
  2460  0074                     	ds	1
  2461  0075                     _eusartTxTail:	
  2462  0075                     	ds	1
  2463  0076                     _eusartTxHead:	
  2464  0076                     	ds	1
  2465                           
  2466                           	psect	bssBANK0
  2467  006B                     __pbssBANK0:	
  2468  006B                     _i:	
  2469  006B                     	ds	1
  2470  006C                     command_handler@pos:	
  2471  006C                     	ds	1
  2472  006D                     I2C1_ISR@i2c_address:	
  2473  006D                     	ds	2
  2474                           
  2475                           	psect	bssBANK1
  2476  00D9                     __pbssBANK1:	
  2477  00D9                     _i2c1_object:	
  2478  00D9                     	ds	5
  2479  00DE                     _value:	
  2480  00DE                     	ds	1
  2481  00DF                     _cnt:	
  2482  00DF                     	ds	1
  2483  00E0                     _slave_address:	
  2484  00E0                     	ds	1
  2485  00E1                     tick_handler@cmd_next:	
  2486  00E1                     	ds	1
  2487  00E2                     dev_map_iterator@yy:	
  2488  00E2                     	ds	1
  2489  00E3                     dev_map_iterator@xx:	
  2490  00E3                     	ds	1
  2491  00E4                     _devs:	
  2492  00E4                     	ds	1
  2493  00E5                     _timer0ReloadVal:	
  2494  00E5                     	ds	1
  2495  00E6                     _eusartRxCount:	
  2496  00E6                     	ds	1
  2497  00E7                     I2C1_ISR@i2c_10bit_address_restart:	
  2498  00E7                     	ds	1
  2499  00E8                     I2C1_ISR@i2c_bytes_left:	
  2500  00E8                     	ds	1
  2501  00E9                     _p_i2c1_current:	
  2502  00E9                     	ds	1
  2503  00EA                     _p_i2c1_trb_current:	
  2504  00EA                     	ds	1
  2505  00EB                     _i2c1_trb_count:	
  2506  00EB                     	ds	1
  2507  00EC                     _i2c1_state:	
  2508  00EC                     	ds	1
  2509                           
  2510                           	psect	dataBANK1
  2511  00ED                     __pdataBANK1:	
  2512  00ED                     put_cmd@idx:	
  2513  00ED                     	ds	1
  2514  00EE                     _BACKPLANE_SLAVE_ADDRESS:	
  2515  00EE                     	ds	1
  2516                           
  2517                           	psect	bssBANK2
  2518  0120                     __pbssBANK2:	
  2519  0120                     _dev_map:	
  2520  0120                     	ds	4
  2521  0124                     _float100:	
  2522  0124                     	ds	2
  2523  0126                     _device_id_:	
  2524  0126                     	ds	2
  2525  0128                     _PROTOCOL_Tick_Handler:	
  2526  0128                     	ds	2
  2527  012A                     _PROTOCOL_Inv_Handler:	
  2528  012A                     	ds	2
  2529  012C                     _PROTOCOL_Extension_Handler:	
  2530  012C                     	ds	2
  2531  012E                     _PROTOCOL_Loop_Func:	
  2532  012E                     	ds	2
  2533  0130                     _PROTOCOL_Set_Handler:	
  2534  0130                     	ds	2
  2535  0132                     _PROTOCOL_Stop_Handler:	
  2536  0132                     	ds	2
  2537  0134                     _PROTOCOL_Start_Handler:	
  2538  0134                     	ds	2
  2539  0136                     tick_handler@t:	
  2540  0136                     	ds	2
  2541  0138                     I2C1_ISR@pi2c_buf_ptr:	
  2542  0138                     	ds	2
  2543  013A                     _data:	
  2544  013A                     	ds	1
  2545  013B                     _j:	
  2546  013B                     	ds	1
  2547  013C                     _backplane_slave_enabled:	
  2548  013C                     	ds	1
  2549  013D                     _readbuf_status:	
  2550  013D                     	ds	1
  2551  013E                     _tmr_overflow:	
  2552  013E                     	ds	1
  2553  013F                     _tmr_cnt:	
  2554  013F                     	ds	1
  2555  0140                     _sec_cnt:	
  2556  0140                     	ds	1
  2557  0141                     _invoked:	
  2558  0141                     	ds	1
  2559  0142                     _running:	
  2560  0142                     	ds	1
  2561  0143                     _locked:	
  2562  0143                     	ds	1
  2563  0144                     _do_func:	
  2564  0144                     	ds	1
  2565  0145                     _timer_cnt:	
  2566  0145                     	ds	1
  2567  0146                     _readbuf:	
  2568  0146                     	ds	6
  2569  014C                     I2C1_MasterRead@trBlock:	
  2570  014C                     	ds	5
  2571  0151                     I2C1_MasterWrite@trBlock:	
  2572  0151                     	ds	5
  2573  0156                     PROTOCOL_Send_float@pbuf:	
  2574  0156                     	ds	3
  2575  0159                     _i2c1_tr_queue:	
  2576  0159                     	ds	3
  2577  015C                     PROTOCOL_Send_int16_t@pbuf:	
  2578  015C                     	ds	2
  2579  015E                     PROTOCOL_Send_uint16_t@pbuf:	
  2580  015E                     	ds	2
  2581  0160                     PROTOCOL_Send_int8_t@pbuf:	
  2582  0160                     	ds	1
  2583  0161                     PROTOCOL_Send_uint8_t@pbuf:	
  2584  0161                     	ds	1
  2585                           
  2586                           	psect	dataBANK2
  2587  0162                     __pdataBANK2:	
  2588  0162                     _tmr_scaler:	
  2589  0162                     	ds	1
  2590  0163                     dev_map_iterator@start:	
  2591  0163                     	ds	1
  2592  0164                     _type_no_data:	
  2593  0164                     	ds	1
  2594                           
  2595                           	psect	bssBANK3
  2596  01A0                     __pbssBANK3:	
  2597  01A0                     _schedule:	
  2598  01A0                     	ds	28
  2599  01BC                     _read_buf:	
  2600  01BC                     	ds	16
  2601                           
  2602                           	psect	bssBANK4
  2603  0220                     __pbssBANK4:	
  2604  0220                     _buf:	
  2605  0220                     	ds	48
  2606  0250                     _sendbuf:	
  2607  0250                     	ds	16
  2608                           
  2609                           	psect	bssBANK5
  2610  02A0                     __pbssBANK5:	
  2611  02A0                     _eusartTxBuffer:	
  2612  02A0                     	ds	64
  2613                           
  2614                           	psect	bssBANK6
  2615  0320                     __pbssBANK6:	
  2616  0320                     _eusartRxBuffer:	
  2617  0320                     	ds	64
  2618                           
  2619                           	psect	clrtext
  2620  122F                     clear_ram0:	
  2621                           ;	Called with FSR0 containing the base address, and
  2622                           ;	btemp/btemp+1 has the size to clear
  2623                           
  2624  122F  0064               	clrwdt	;clear the watchdog before getting into this loop
  2625  1230                     clrloop0:	
  2626  1230  0180               	clrf	0	;clear RAM location pointed to by FSR
  2627  1231  3101               	addfsr 0,1
  2628  1232  3001               	movlw	1
  2629  1233  02FE               	subwf	126,f
  2630  1234  3000               	movlw	0
  2631  1235  3BFF               	subwfb	127,f
  2632  1236  087F               	movf	127,w
  2633  1237  047E               	iorwf	126,w
  2634  1238  1903               	btfsc	3,2
  2635  1239  3400               	retlw	0	;all done for this memory range, return
  2636  123A  2A30               	goto	clrloop0	;have we reached the end yet?
  2637                           
  2638                           	psect	cstackBANK1
  2639  00A0                     __pcstackBANK1:	
  2640  00A0                     exec_remote_cmd@send_buf:	
  2641                           
  2642                           ; 50 bytes @ 0x0
  2643  00A0                     	ds	50
  2644  00D2                     exec_remote_cmd@idx:	
  2645                           
  2646                           ; 1 bytes @ 0x32
  2647  00D2                     	ds	1
  2648  00D3                     exec_remote_cmd@j:	
  2649                           
  2650                           ; 1 bytes @ 0x33
  2651  00D3                     	ds	1
  2652  00D4                     exec_remote_cmd@i:	
  2653                           
  2654                           ; 1 bytes @ 0x34
  2655  00D4                     	ds	1
  2656  00D5                     exec_remote_cmd@status:	
  2657                           
  2658                           ; 1 bytes @ 0x35
  2659  00D5                     	ds	1
  2660  00D6                     exec_remote_cmd@data:	
  2661                           
  2662                           ; 1 bytes @ 0x36
  2663  00D6                     	ds	1
  2664  00D7                     exec_remote_cmd@buf:	
  2665                           
  2666                           ; 2 bytes @ 0x37
  2667  00D7                     	ds	2
  2668                           
  2669                           	psect	cstackCOMMON
  2670  0077                     __pcstackCOMMON:	
  2671  0077                     ?_isdigit:	
  2672  0077                     ?_I2C1_Stop:	
  2673                           ; 1 bit 
  2674                           
  2675  0077                     ??_I2C1_Stop:	
  2676                           ; 1 bytes @ 0x0
  2677                           
  2678  0077                     ?_I2C1_FunctionComplete:	
  2679                           ; 1 bytes @ 0x0
  2680                           
  2681  0077                     ??_I2C1_FunctionComplete:	
  2682                           ; 1 bytes @ 0x0
  2683                           
  2684  0077                     ?_OSCILLATOR_Initialize:	
  2685                           ; 1 bytes @ 0x0
  2686                           
  2687  0077                     ?_WDT_Initialize:	
  2688                           ; 1 bytes @ 0x0
  2689                           
  2690  0077                     ?_TMR0_Initialize:	
  2691                           ; 1 bytes @ 0x0
  2692                           
  2693  0077                     ?_PROTOCOL_Loop:	
  2694                           ; 1 bytes @ 0x0
  2695                           
  2696  0077                     ?_I2C1_Initialize:	
  2697                           ; 1 bytes @ 0x0
  2698                           
  2699  0077                     ?_I2C1_ISR:	
  2700                           ; 1 bytes @ 0x0
  2701                           
  2702  0077                     ?_I2C1_BusCollisionISR:	
  2703                           ; 1 bytes @ 0x0
  2704                           
  2705  0077                     ??_I2C1_BusCollisionISR:	
  2706                           ; 1 bytes @ 0x0
  2707                           
  2708  0077                     ?_DATAEE_ReadByte:	
  2709                           ; 1 bytes @ 0x0
  2710                           
  2711  0077                     ?_EUSART_Initialize:	
  2712                           ; 1 bytes @ 0x0
  2713                           
  2714  0077                     ?_EUSART_Read:	
  2715                           ; 1 bytes @ 0x0
  2716                           
  2717  0077                     ?_EUSART_Write:	
  2718                           ; 1 bytes @ 0x0
  2719                           
  2720  0077                     ?_putch:	
  2721                           ; 1 bytes @ 0x0
  2722                           
  2723  0077                     ?_EUSART_Transmit_ISR:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  0077                     ??_EUSART_Transmit_ISR:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  0077                     ?_EUSART_Receive_ISR:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  0077                     ??_EUSART_Receive_ISR:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  0077                     ?_PIN_MANAGER_Initialize:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  0077                     ?_INTERRUPT_InterruptManager:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  0077                     ?_SYSTEM_Initialize:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  0077                     ?_TMR0_HasOverflowOccured:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  0077                     ?_exec_remote_cmd:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750  0077                     ?_init:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753  0077                     ?_add_dev:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756  0077                     ?_del_dev:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759  0077                     ?_dev_map_iterator:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762  0077                     ?_scan_dev:	
  2763                           ; 1 bytes @ 0x0
  2764                           
  2765  0077                     ?_check_plg:	
  2766                           ; 1 bytes @ 0x0
  2767                           
  2768  0077                     ?_detected:	
  2769                           ; 1 bytes @ 0x0
  2770                           
  2771  0077                     ?_print_dev_map:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774  0077                     ?_sen:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777  0077                     ?_one_shot_sen:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780  0077                     ?_fetch:	
  2781                           ; 1 bytes @ 0x0
  2782                           
  2783  0077                     ?_tick_handler:	
  2784                           ; 1 bytes @ 0x0
  2785                           
  2786  0077                     ?_inv_handler:	
  2787                           ; 1 bytes @ 0x0
  2788                           
  2789  0077                     ?_put_cmd:	
  2790                           ; 1 bytes @ 0x0
  2791                           
  2792  0077                     ?_main:	
  2793                           ; 1 bytes @ 0x0
  2794                           
  2795  0077                     ?_PROTOCOL_Write_Device_Address:	
  2796                           ; 1 bytes @ 0x0
  2797                           
  2798  0077                     ?_PROTOCOL_Read_Device_Address:	
  2799                           ; 1 bytes @ 0x0
  2800                           
  2801  0077                     ?_PROTOCOL_STA:	
  2802                           ; 1 bytes @ 0x0
  2803                           
  2804  0077                     ?_PROTOCOL_STP:	
  2805                           ; 1 bytes @ 0x0
  2806                           
  2807  0077                     ?_PROTOCOL_SAV:	
  2808                           ; 1 bytes @ 0x0
  2809                           
  2810  0077                     ?_PROTOCOL_SET:	
  2811                           ; 1 bytes @ 0x0
  2812                           
  2813  0077                     ?_PROTOCOL_EXT:	
  2814                           ; 1 bytes @ 0x0
  2815                           
  2816                           
  2817                           ; 1 bytes @ 0x0
  2818  0077                     	ds	1
  2819  0078                     I2C1_Stop@completion_code:	
  2820                           
  2821                           ; 1 bytes @ 0x1
  2822  0078                     	ds	1
  2823  0079                     ??_I2C1_ISR:	
  2824                           
  2825                           ; 1 bytes @ 0x2
  2826  0079                     	ds	4
  2827  007D                     ??_INTERRUPT_InterruptManager:	
  2828                           
  2829                           ; 1 bytes @ 0x6
  2830  007D                     	ds	1
  2831                           
  2832                           	psect	cstackBANK0
  2833  0020                     __pcstackBANK0:	
  2834  0020                     ?_I2C1_MasterWriteTRBBuild:	
  2835  0020                     ?_I2C1_MasterTRBInsert:	
  2836                           ; 1 bytes @ 0x0
  2837                           
  2838  0020                     ?_I2C1_MasterReadTRBBuild:	
  2839                           ; 1 bytes @ 0x0
  2840                           
  2841  0020                     ??_OSCILLATOR_Initialize:	
  2842                           ; 1 bytes @ 0x0
  2843                           
  2844  0020                     ??_WDT_Initialize:	
  2845                           ; 1 bytes @ 0x0
  2846                           
  2847  0020                     ??_TMR0_Initialize:	
  2848                           ; 1 bytes @ 0x0
  2849                           
  2850  0020                     ?_PROTOCOL_Set_Extension_Handler:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853  0020                     ?_PROTOCOL_Set_Tick_Handler:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856  0020                     ??_isdigit:	
  2857                           ; 1 bytes @ 0x0
  2858                           
  2859  0020                     ??_I2C1_Initialize:	
  2860                           ; 1 bytes @ 0x0
  2861                           
  2862  0020                     ?_DATAEE_WriteByte:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0020                     ??_DATAEE_ReadByte:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0020                     ??_EUSART_Initialize:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871  0020                     ??_EUSART_Read:	
  2872                           ; 1 bytes @ 0x0
  2873                           
  2874  0020                     ??_EUSART_Write:	
  2875                           ; 1 bytes @ 0x0
  2876                           
  2877  0020                     ??_PIN_MANAGER_Initialize:	
  2878                           ; 1 bytes @ 0x0
  2879                           
  2880  0020                     ??_TMR0_HasOverflowOccured:	
  2881                           ; 1 bytes @ 0x0
  2882                           
  2883  0020                     ??_dev_map_iterator:	
  2884                           ; 1 bytes @ 0x0
  2885                           
  2886  0020                     ??_PROTOCOL_Read_Device_Address:	
  2887                           ; 1 bytes @ 0x0
  2888                           
  2889  0020                     ??_PROTOCOL_STA:	
  2890                           ; 1 bytes @ 0x0
  2891                           
  2892  0020                     ??_PROTOCOL_STP:	
  2893                           ; 1 bytes @ 0x0
  2894                           
  2895  0020                     ??_PROTOCOL_SET:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0020                     ?_strncmp:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0020                     ?_concat:	
  2902                           ; 2 bytes @ 0x0
  2903                           
  2904  0020                     ?___wmul:	
  2905                           ; 2 bytes @ 0x0
  2906                           
  2907  0020                     ?___awdiv:	
  2908                           ; 2 bytes @ 0x0
  2909                           
  2910  0020                     ?___awmod:	
  2911                           ; 2 bytes @ 0x0
  2912                           
  2913  0020                     ?___lwdiv:	
  2914                           ; 2 bytes @ 0x0
  2915                           
  2916  0020                     I2C1_MasterTRBInsert@ptrb_list:	
  2917                           ; 2 bytes @ 0x0
  2918                           
  2919  0020                     I2C1_MasterWriteTRBBuild@pdata:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0020                     DATAEE_WriteByte@bData:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0020                     DATAEE_ReadByte@bAdd:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0020                     concat@lsb:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0020                     _isdigit$1459:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0020                     I2C1_MasterReadTRBBuild@pdata:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0020                     PROTOCOL_Set_Extension_Handler@extension_handler:	
  2938                           ; 2 bytes @ 0x0
  2939                           
  2940  0020                     PROTOCOL_Set_Tick_Handler@tick_handler:	
  2941                           ; 2 bytes @ 0x0
  2942                           
  2943  0020                     ___wmul@multiplier:	
  2944                           ; 2 bytes @ 0x0
  2945                           
  2946  0020                     ___awdiv@divisor:	
  2947                           ; 2 bytes @ 0x0
  2948                           
  2949  0020                     ___awmod@divisor:	
  2950                           ; 2 bytes @ 0x0
  2951                           
  2952  0020                     ___lwdiv@divisor:	
  2953                           ; 2 bytes @ 0x0
  2954                           
  2955  0020                     strncmp@s1:	
  2956                           ; 2 bytes @ 0x0
  2957                           
  2958                           
  2959                           ; 2 bytes @ 0x0
  2960  0020                     	ds	1
  2961  0021                     ?_PROTOCOL_Initialize:	
  2962  0021                     ??_DATAEE_WriteByte:	
  2963                           ; 1 bytes @ 0x1
  2964                           
  2965  0021                     ??_SYSTEM_Initialize:	
  2966                           ; 1 bytes @ 0x1
  2967                           
  2968  0021                     I2C1_MasterTRBInsert@pflag:	
  2969                           ; 1 bytes @ 0x1
  2970                           
  2971  0021                     I2C1_MasterWriteTRBBuild@length:	
  2972                           ; 1 bytes @ 0x1
  2973                           
  2974  0021                     DATAEE_WriteByte@bAdd:	
  2975                           ; 1 bytes @ 0x1
  2976                           
  2977  0021                     EUSART_Read@readValue:	
  2978                           ; 1 bytes @ 0x1
  2979                           
  2980  0021                     EUSART_Write@txData:	
  2981                           ; 1 bytes @ 0x1
  2982                           
  2983  0021                     PROTOCOL_SET@value_:	
  2984                           ; 1 bytes @ 0x1
  2985                           
  2986  0021                     isdigit@c:	
  2987                           ; 1 bytes @ 0x1
  2988                           
  2989  0021                     PROTOCOL_Initialize@device_id:	
  2990                           ; 1 bytes @ 0x1
  2991                           
  2992                           
  2993                           ; 2 bytes @ 0x1
  2994  0021                     	ds	1
  2995  0022                     ??_I2C1_MasterTRBInsert:	
  2996  0022                     ??_PROTOCOL_Set_Extension_Handler:	
  2997                           ; 1 bytes @ 0x2
  2998                           
  2999  0022                     ??_PROTOCOL_Set_Tick_Handler:	
  3000                           ; 1 bytes @ 0x2
  3001                           
  3002  0022                     ??_putch:	
  3003                           ; 1 bytes @ 0x2
  3004                           
  3005  0022                     ??_concat:	
  3006                           ; 1 bytes @ 0x2
  3007                           
  3008  0022                     I2C1_MasterReadTRBBuild@length:	
  3009                           ; 1 bytes @ 0x2
  3010                           
  3011  0022                     DATAEE_WriteByte@GIEBitValue:	
  3012                           ; 1 bytes @ 0x2
  3013                           
  3014  0022                     putch@txData:	
  3015                           ; 1 bytes @ 0x2
  3016                           
  3017  0022                     I2C1_MasterWriteTRBBuild@address:	
  3018                           ; 1 bytes @ 0x2
  3019                           
  3020  0022                     ___wmul@multiplicand:	
  3021                           ; 2 bytes @ 0x2
  3022                           
  3023  0022                     ___awdiv@dividend:	
  3024                           ; 2 bytes @ 0x2
  3025                           
  3026  0022                     ___awmod@dividend:	
  3027                           ; 2 bytes @ 0x2
  3028                           
  3029  0022                     ___lwdiv@dividend:	
  3030                           ; 2 bytes @ 0x2
  3031                           
  3032  0022                     strncmp@s2:	
  3033                           ; 2 bytes @ 0x2
  3034                           
  3035                           
  3036                           ; 2 bytes @ 0x2
  3037  0022                     	ds	1
  3038  0023                     ??_PROTOCOL_Write_Device_Address:	
  3039  0023                     ??_PROTOCOL_SAV:	
  3040                           ; 1 bytes @ 0x3
  3041                           
  3042  0023                     I2C1_MasterTRBInsert@count:	
  3043                           ; 1 bytes @ 0x3
  3044                           
  3045  0023                     PROTOCOL_Initialize@start_handler:	
  3046                           ; 1 bytes @ 0x3
  3047                           
  3048  0023                     I2C1_MasterReadTRBBuild@address:	
  3049                           ; 1 bytes @ 0x3
  3050                           
  3051                           
  3052                           ; 2 bytes @ 0x3
  3053  0023                     	ds	1
  3054  0024                     ??_I2C1_MasterWriteTRBBuild:	
  3055  0024                     ??___wmul:	
  3056                           ; 1 bytes @ 0x4
  3057                           
  3058  0024                     ??___awdiv:	
  3059                           ; 1 bytes @ 0x4
  3060                           
  3061  0024                     ??___awmod:	
  3062                           ; 1 bytes @ 0x4
  3063                           
  3064  0024                     ??___lwdiv:	
  3065                           ; 1 bytes @ 0x4
  3066                           
  3067  0024                     PROTOCOL_Initialize@stop_handler:	
  3068                           ; 1 bytes @ 0x4
  3069                           
  3070  0024                     PROTOCOL_Write_Device_Address@device_id_i2c:	
  3071                           ; 1 bytes @ 0x4
  3072                           
  3073  0024                     ___wmul@product:	
  3074                           ; 1 bytes @ 0x4
  3075                           
  3076  0024                     strncmp@len:	
  3077                           ; 2 bytes @ 0x4
  3078                           
  3079                           
  3080                           ; 2 bytes @ 0x4
  3081  0024                     	ds	1
  3082  0025                     ??_I2C1_MasterReadTRBBuild:	
  3083  0025                     PROTOCOL_Initialize@set_handler:	
  3084                           ; 1 bytes @ 0x5
  3085                           
  3086  0025                     ___awdiv@counter:	
  3087                           ; 1 bytes @ 0x5
  3088                           
  3089  0025                     ___awmod@counter:	
  3090                           ; 1 bytes @ 0x5
  3091                           
  3092  0025                     ___lwdiv@counter:	
  3093                           ; 1 bytes @ 0x5
  3094                           
  3095                           
  3096                           ; 1 bytes @ 0x5
  3097  0025                     	ds	1
  3098  0026                     ??_strncmp:	
  3099  0026                     ?_atoi:	
  3100                           ; 1 bytes @ 0x6
  3101                           
  3102  0026                     ?_strcpy:	
  3103                           ; 2 bytes @ 0x6
  3104                           
  3105  0026                     I2C1_MasterWriteTRBBuild@ptrb:	
  3106                           ; 2 bytes @ 0x6
  3107                           
  3108  0026                     dev_map_iterator@exist:	
  3109                           ; 1 bytes @ 0x6
  3110                           
  3111  0026                     ___awdiv@sign:	
  3112                           ; 1 bytes @ 0x6
  3113                           
  3114  0026                     ___awmod@sign:	
  3115                           ; 1 bytes @ 0x6
  3116                           
  3117  0026                     PROTOCOL_Initialize@inv_handler:	
  3118                           ; 1 bytes @ 0x6
  3119                           
  3120  0026                     atoi@s:	
  3121                           ; 2 bytes @ 0x6
  3122                           
  3123  0026                     ___lwdiv@quotient:	
  3124                           ; 2 bytes @ 0x6
  3125                           
  3126  0026                     strcpy@to:	
  3127                           ; 2 bytes @ 0x6
  3128                           
  3129                           
  3130                           ; 2 bytes @ 0x6
  3131  0026                     	ds	1
  3132  0027                     ?_I2C1_MasterWrite:	
  3133  0027                     ?_abs:	
  3134                           ; 1 bytes @ 0x7
  3135                           
  3136  0027                     I2C1_MasterWrite@length:	
  3137                           ; 2 bytes @ 0x7
  3138                           
  3139  0027                     I2C1_MasterReadTRBBuild@ptrb:	
  3140                           ; 1 bytes @ 0x7
  3141                           
  3142  0027                     dev_map_iterator@dev_addr:	
  3143                           ; 1 bytes @ 0x7
  3144                           
  3145  0027                     concat@msb:	
  3146                           ; 1 bytes @ 0x7
  3147                           
  3148  0027                     abs@a:	
  3149                           ; 1 bytes @ 0x7
  3150                           
  3151  0027                     ___awdiv@quotient:	
  3152                           ; 2 bytes @ 0x7
  3153                           
  3154                           
  3155                           ; 2 bytes @ 0x7
  3156  0027                     	ds	1
  3157  0028                     ??_atoi:	
  3158  0028                     ?_I2C1_MasterRead:	
  3159                           ; 1 bytes @ 0x8
  3160                           
  3161  0028                     ?___lwmod:	
  3162                           ; 1 bytes @ 0x8
  3163                           
  3164  0028                     PROTOCOL_Initialize@scaler:	
  3165                           ; 2 bytes @ 0x8
  3166                           
  3167  0028                     strcpy@from:	
  3168                           ; 1 bytes @ 0x8
  3169                           
  3170  0028                     I2C1_MasterWrite@address:	
  3171                           ; 1 bytes @ 0x8
  3172                           
  3173  0028                     I2C1_MasterRead@pdata:	
  3174                           ; 2 bytes @ 0x8
  3175                           
  3176  0028                     ___lwmod@divisor:	
  3177                           ; 2 bytes @ 0x8
  3178                           
  3179                           
  3180                           ; 2 bytes @ 0x8
  3181  0028                     	ds	1
  3182  0029                     ??_strcpy:	
  3183  0029                     ??_PROTOCOL_Initialize:	
  3184                           ; 1 bytes @ 0x9
  3185                           
  3186  0029                     ??_abs:	
  3187                           ; 1 bytes @ 0x9
  3188                           
  3189  0029                     ??_init:	
  3190                           ; 1 bytes @ 0x9
  3191                           
  3192  0029                     ??_add_dev:	
  3193                           ; 1 bytes @ 0x9
  3194                           
  3195  0029                     ??_del_dev:	
  3196                           ; 1 bytes @ 0x9
  3197                           
  3198  0029                     ??_detected:	
  3199                           ; 1 bytes @ 0x9
  3200                           
  3201                           
  3202                           ; 1 bytes @ 0x9
  3203  0029                     	ds	1
  3204  002A                     I2C1_MasterWrite@pflag:	
  3205  002A                     I2C1_MasterRead@length:	
  3206                           ; 1 bytes @ 0xA
  3207                           
  3208  002A                     atoi@sign:	
  3209                           ; 1 bytes @ 0xA
  3210                           
  3211  002A                     ___lwmod@dividend:	
  3212                           ; 1 bytes @ 0xA
  3213                           
  3214  002A                     strcpy@cp:	
  3215                           ; 2 bytes @ 0xA
  3216                           
  3217                           
  3218                           ; 2 bytes @ 0xA
  3219  002A                     	ds	1
  3220  002B                     ??_I2C1_MasterWrite:	
  3221  002B                     I2C1_MasterRead@address:	
  3222                           ; 1 bytes @ 0xB
  3223                           
  3224  002B                     atoi@a:	
  3225                           ; 2 bytes @ 0xB
  3226                           
  3227                           
  3228                           ; 2 bytes @ 0xB
  3229  002B                     	ds	1
  3230  002C                     ??_put_cmd:	
  3231  002C                     ??___lwmod:	
  3232                           ; 1 bytes @ 0xC
  3233                           
  3234  002C                     add_dev@x:	
  3235                           ; 1 bytes @ 0xC
  3236                           
  3237  002C                     del_dev@x:	
  3238                           ; 1 bytes @ 0xC
  3239                           
  3240  002C                     detected@y:	
  3241                           ; 1 bytes @ 0xC
  3242                           
  3243                           
  3244                           ; 1 bytes @ 0xC
  3245  002C                     	ds	1
  3246  002D                     I2C1_MasterWrite@pdata:	
  3247  002D                     I2C1_MasterRead@pflag:	
  3248                           ; 1 bytes @ 0xD
  3249                           
  3250  002D                     add_dev@old_map:	
  3251                           ; 1 bytes @ 0xD
  3252                           
  3253  002D                     del_dev@old_map:	
  3254                           ; 1 bytes @ 0xD
  3255                           
  3256  002D                     detected@x:	
  3257                           ; 1 bytes @ 0xD
  3258                           
  3259  002D                     ___lwmod@counter:	
  3260                           ; 1 bytes @ 0xD
  3261                           
  3262                           
  3263                           ; 1 bytes @ 0xD
  3264  002D                     	ds	1
  3265  002E                     ?_i2c1_write_no_data:	
  3266  002E                     ?_i2c1_write:	
  3267                           ; 1 bytes @ 0xE
  3268                           
  3269  002E                     ??_I2C1_MasterRead:	
  3270                           ; 1 bytes @ 0xE
  3271                           
  3272  002E                     ?_printf:	
  3273                           ; 1 bytes @ 0xE
  3274                           
  3275  002E                     add_dev@new_map:	
  3276                           ; 2 bytes @ 0xE
  3277                           
  3278  002E                     del_dev@new_map:	
  3279                           ; 1 bytes @ 0xE
  3280                           
  3281  002E                     detected@exist:	
  3282                           ; 1 bytes @ 0xE
  3283                           
  3284  002E                     i2c1_write@dev_addr:	
  3285                           ; 1 bytes @ 0xE
  3286                           
  3287  002E                     i2c1_write_no_data@dev_addr:	
  3288                           ; 2 bytes @ 0xE
  3289                           
  3290  002E                     printf@f:	
  3291                           ; 2 bytes @ 0xE
  3292                           
  3293                           
  3294                           ; 2 bytes @ 0xE
  3295  002E                     	ds	1
  3296  002F                     init@dev_addr:	
  3297  002F                     add_dev@y:	
  3298                           ; 1 bytes @ 0xF
  3299                           
  3300  002F                     del_dev@y:	
  3301                           ; 1 bytes @ 0xF
  3302                           
  3303  002F                     detected@dev_addr:	
  3304                           ; 1 bytes @ 0xF
  3305                           
  3306                           
  3307                           ; 1 bytes @ 0xF
  3308  002F                     	ds	1
  3309  0030                     ?_i2c1_read:	
  3310  0030                     init@y:	
  3311                           ; 1 bytes @ 0x10
  3312                           
  3313  0030                     add_dev@dev_addr:	
  3314                           ; 1 bytes @ 0x10
  3315                           
  3316  0030                     del_dev@dev_addr:	
  3317                           ; 1 bytes @ 0x10
  3318                           
  3319  0030                     i2c1_write@pbuf:	
  3320                           ; 1 bytes @ 0x10
  3321                           
  3322  0030                     i2c1_write_no_data@reg_addr:	
  3323                           ; 1 bytes @ 0x10
  3324                           
  3325  0030                     i2c1_read@dev_addr:	
  3326                           ; 1 bytes @ 0x10
  3327                           
  3328                           
  3329                           ; 2 bytes @ 0x10
  3330  0030                     	ds	1
  3331  0031                     ??_i2c1_write_no_data:	
  3332  0031                     init@i:	
  3333                           ; 1 bytes @ 0x11
  3334                           
  3335  0031                     put_cmd@buf:	
  3336                           ; 1 bytes @ 0x11
  3337                           
  3338  0031                     i2c1_write@len:	
  3339                           ; 1 bytes @ 0x11
  3340                           
  3341                           
  3342                           ; 1 bytes @ 0x11
  3343  0031                     	ds	1
  3344  0032                     ??_i2c1_write:	
  3345  0032                     i2c1_read@reg_addr:	
  3346                           ; 1 bytes @ 0x12
  3347                           
  3348  0032                     i2c1_write_no_data@write_status:	
  3349                           ; 1 bytes @ 0x12
  3350                           
  3351                           
  3352                           ; 1 bytes @ 0x12
  3353  0032                     	ds	1
  3354  0033                     i2c1_write_no_data@buf:	
  3355  0033                     i2c1_read@pbuf:	
  3356                           ; 1 bytes @ 0x13
  3357                           
  3358                           
  3359                           ; 2 bytes @ 0x13
  3360  0033                     	ds	1
  3361  0034                     ??_printf:	
  3362  0034                     i2c1_write@write_status:	
  3363                           ; 1 bytes @ 0x14
  3364                           
  3365  0034                     i2c1_write_no_data@status:	
  3366                           ; 1 bytes @ 0x14
  3367                           
  3368                           
  3369                           ; 1 bytes @ 0x14
  3370  0034                     	ds	1
  3371  0035                     i2c1_write@status:	
  3372  0035                     i2c1_read@len:	
  3373                           ; 1 bytes @ 0x15
  3374                           
  3375                           
  3376                           ; 1 bytes @ 0x15
  3377  0035                     	ds	1
  3378  0036                     ??_i2c1_read:	
  3379                           
  3380                           ; 1 bytes @ 0x16
  3381  0036                     	ds	2
  3382  0038                     i2c1_read@read_status:	
  3383  0038                     printf@prec:	
  3384                           ; 1 bytes @ 0x18
  3385                           
  3386                           
  3387                           ; 1 bytes @ 0x18
  3388  0038                     	ds	1
  3389  0039                     i2c1_read@reg:	
  3390  0039                     printf@cp:	
  3391                           ; 1 bytes @ 0x19
  3392                           
  3393                           
  3394                           ; 2 bytes @ 0x19
  3395  0039                     	ds	1
  3396  003A                     i2c1_read@status:	
  3397                           
  3398                           ; 1 bytes @ 0x1A
  3399  003A                     	ds	1
  3400  003B                     ??_scan_dev:	
  3401  003B                     printf@ap:	
  3402                           ; 1 bytes @ 0x1B
  3403                           
  3404                           
  3405                           ; 1 bytes @ 0x1B
  3406  003B                     	ds	1
  3407  003C                     printf@val:	
  3408                           
  3409                           ; 2 bytes @ 0x1C
  3410  003C                     	ds	2
  3411  003E                     scan_dev@status:	
  3412  003E                     printf@len:	
  3413                           ; 1 bytes @ 0x1E
  3414                           
  3415                           
  3416                           ; 2 bytes @ 0x1E
  3417  003E                     	ds	1
  3418  003F                     scan_dev@dev_addr:	
  3419                           
  3420                           ; 1 bytes @ 0x1F
  3421  003F                     	ds	1
  3422  0040                     ??_check_plg:	
  3423  0040                     printf@flag:	
  3424                           ; 1 bytes @ 0x20
  3425                           
  3426                           
  3427                           ; 1 bytes @ 0x20
  3428  0040                     	ds	1
  3429  0041                     printf@width:	
  3430                           
  3431                           ; 2 bytes @ 0x21
  3432  0041                     	ds	1
  3433  0042                     check_plg@status:	
  3434                           
  3435                           ; 1 bytes @ 0x22
  3436  0042                     	ds	1
  3437  0043                     printf@c:	
  3438                           
  3439                           ; 1 bytes @ 0x23
  3440  0043                     	ds	1
  3441  0044                     ?_PROTOCOL_Print_TLV:	
  3442  0044                     ??_exec_remote_cmd:	
  3443                           ; 1 bytes @ 0x24
  3444                           
  3445  0044                     ??_print_dev_map:	
  3446                           ; 1 bytes @ 0x24
  3447                           
  3448  0044                     PROTOCOL_Print_TLV@type:	
  3449                           ; 1 bytes @ 0x24
  3450                           
  3451                           
  3452                           ; 1 bytes @ 0x24
  3453  0044                     	ds	1
  3454  0045                     PROTOCOL_Print_TLV@length:	
  3455                           
  3456                           ; 1 bytes @ 0x25
  3457  0045                     	ds	1
  3458  0046                     print_dev_map@i:	
  3459  0046                     PROTOCOL_Print_TLV@pbuffer:	
  3460                           ; 1 bytes @ 0x26
  3461                           
  3462                           
  3463                           ; 1 bytes @ 0x26
  3464  0046                     	ds	1
  3465  0047                     ??_PROTOCOL_Print_TLV:	
  3466  0047                     print_dev_map@len:	
  3467                           ; 1 bytes @ 0x27
  3468                           
  3469                           
  3470                           ; 1 bytes @ 0x27
  3471  0047                     	ds	2
  3472  0049                     ??_tick_handler:	
  3473                           
  3474                           ; 1 bytes @ 0x29
  3475  0049                     	ds	1
  3476  004A                     PROTOCOL_Print_TLV@dev_addr:	
  3477                           
  3478                           ; 1 bytes @ 0x2A
  3479  004A                     	ds	1
  3480  004B                     PROTOCOL_Print_TLV@v:	
  3481                           
  3482                           ; 2 bytes @ 0x2B
  3483  004B                     	ds	2
  3484  004D                     ??_sen:	
  3485                           
  3486                           ; 1 bytes @ 0x2D
  3487  004D                     	ds	5
  3488  0052                     sen@type:	
  3489                           
  3490                           ; 1 bytes @ 0x32
  3491  0052                     	ds	1
  3492  0053                     sen@length:	
  3493                           
  3494                           ; 1 bytes @ 0x33
  3495  0053                     	ds	1
  3496  0054                     sen@status:	
  3497                           
  3498                           ; 1 bytes @ 0x34
  3499  0054                     	ds	1
  3500  0055                     sen@dev_addr:	
  3501                           
  3502                           ; 1 bytes @ 0x35
  3503  0055                     	ds	1
  3504  0056                     ??_one_shot_sen:	
  3505  0056                     ??_fetch:	
  3506                           ; 1 bytes @ 0x36
  3507                           
  3508                           
  3509                           ; 1 bytes @ 0x36
  3510  0056                     	ds	3
  3511  0059                     one_shot_sen@status:	
  3512  0059                     fetch@status:	
  3513                           ; 1 bytes @ 0x39
  3514                           
  3515                           
  3516                           ; 1 bytes @ 0x39
  3517  0059                     	ds	1
  3518  005A                     one_shot_sen@dev_addr:	
  3519  005A                     fetch@sch:	
  3520                           ; 1 bytes @ 0x3A
  3521                           
  3522                           
  3523                           ; 1 bytes @ 0x3A
  3524  005A                     	ds	1
  3525  005B                     ?_command_handler:	
  3526  005B                     fetch@pos:	
  3527                           ; 1 bytes @ 0x3B
  3528                           
  3529  005B                     command_handler@buf:	
  3530                           ; 1 bytes @ 0x3B
  3531                           
  3532                           
  3533                           ; 1 bytes @ 0x3B
  3534  005B                     	ds	1
  3535  005C                     ??_command_handler:	
  3536  005C                     fetch@dev_addr:	
  3537                           ; 1 bytes @ 0x3C
  3538                           
  3539                           
  3540                           ; 1 bytes @ 0x3C
  3541  005C                     	ds	1
  3542  005D                     ??_inv_handler:	
  3543                           
  3544                           ; 1 bytes @ 0x3D
  3545  005D                     	ds	6
  3546  0063                     command_handler@dev_addr:	
  3547                           
  3548                           ; 1 bytes @ 0x43
  3549  0063                     	ds	1
  3550  0064                     command_handler@i:	
  3551                           
  3552                           ; 1 bytes @ 0x44
  3553  0064                     	ds	1
  3554  0065                     ??_PROTOCOL_EXT:	
  3555                           
  3556                           ; 1 bytes @ 0x45
  3557  0065                     	ds	1
  3558  0066                     PROTOCOL_EXT@char_buf:	
  3559                           
  3560                           ; 1 bytes @ 0x46
  3561  0066                     	ds	1
  3562  0067                     ??_PROTOCOL_Loop:	
  3563                           
  3564                           ; 1 bytes @ 0x47
  3565  0067                     	ds	2
  3566  0069                     PROTOCOL_Loop@c:	
  3567                           
  3568                           ; 1 bytes @ 0x49
  3569  0069                     	ds	1
  3570  006A                     PROTOCOL_Loop@device_address:	
  3571                           
  3572                           ; 1 bytes @ 0x4A
  3573  006A                     	ds	1
  3574  006B                     ??_main:	
  3575                           
  3576                           	psect	maintext
  3577  153A                     __pmaintext:	
  3578                           ; 1 bytes @ 0x4B
  3579 ;;
  3580 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3581 ;;
  3582 ;; *************** function _main *****************
  3583 ;; Defined at:
  3584 ;;		line 403 in file "main.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;		None
  3587 ;; Auto vars:     Size  Location     Type
  3588 ;;		None
  3589 ;; Return value:  Size  Location     Type
  3590 ;;                  1    wreg      void 
  3591 ;; Registers used:
  3592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3593 ;; Tracked objects:
  3594 ;;		On entry : B1F/0
  3595 ;;		On exit  : 0/0
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3601 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3602 ;;Total ram usage:        0 bytes
  3603 ;; Hardware stack levels required when called:   12
  3604 ;; This function calls:
  3605 ;;		_PROTOCOL_Initialize
  3606 ;;		_PROTOCOL_Loop
  3607 ;;		_PROTOCOL_Set_Extension_Handler
  3608 ;;		_PROTOCOL_Set_Tick_Handler
  3609 ;;		_SYSTEM_Initialize
  3610 ;;		_init
  3611 ;; This function is called by:
  3612 ;;		Startup code after reset
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           
  3617                           ;psect for function _main
  3618  153A                     _main:	
  3619                           
  3620                           ;main.c: 405: init();
  3621                           
  3622                           ;incstack = 0
  3623                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3624  153A  318A  2254  3195   	fcall	_init
  3625                           
  3626                           ;main.c: 407: SYSTEM_Initialize();
  3627  153D  3192  2299  3195   	fcall	_SYSTEM_Initialize
  3628                           
  3629                           ;main.c: 408: (INTCONbits.GIE = 1);
  3630  1540  178B               	bsf	11,7	;volatile
  3631                           
  3632                           ;main.c: 409: (INTCONbits.PEIE = 1);
  3633  1541  170B               	bsf	11,6	;volatile
  3634                           
  3635                           ;main.c: 411: PROTOCOL_Initialize("BACKPLANE-MASTER", (0), (0), (0), inv_handler, 1);
  3636  1542  309E               	movlw	low (STR_33| (0+32768))
  3637  1543  0020               	movlb	0	; select bank0
  3638  1544  00A1               	movwf	PROTOCOL_Initialize@device_id
  3639  1545  3090               	movlw	high (STR_33| (0+32768))
  3640  1546  00A2               	movwf	PROTOCOL_Initialize@device_id+1
  3641  1547  01A3               	clrf	PROTOCOL_Initialize@start_handler
  3642  1548  01A4               	clrf	PROTOCOL_Initialize@stop_handler
  3643  1549  01A5               	clrf	PROTOCOL_Initialize@set_handler
  3644  154A  30CE               	movlw	low _inv_handler
  3645  154B  00A6               	movwf	PROTOCOL_Initialize@inv_handler
  3646  154C  300A               	movlw	high _inv_handler
  3647  154D  00A7               	movwf	PROTOCOL_Initialize@inv_handler+1
  3648  154E  01A8               	clrf	PROTOCOL_Initialize@scaler
  3649  154F  0AA8               	incf	PROTOCOL_Initialize@scaler,f
  3650  1550  3188  2093  3195   	fcall	_PROTOCOL_Initialize
  3651                           
  3652                           ;main.c: 412: PROTOCOL_Set_Extension_Handler(command_handler);
  3653  1553  303E               	movlw	low _command_handler
  3654  1554  0020               	movlb	0	; select bank0
  3655  1555  00A0               	movwf	PROTOCOL_Set_Extension_Handler@extension_handler
  3656  1556  300E               	movlw	high _command_handler
  3657  1557  00A1               	movwf	PROTOCOL_Set_Extension_Handler@extension_handler+1
  3658  1558  3192  2208  3195   	fcall	_PROTOCOL_Set_Extension_Handler
  3659                           
  3660                           ;main.c: 413: PROTOCOL_Set_Tick_Handler(tick_handler);
  3661  155B  30D2               	movlw	low _tick_handler
  3662  155C  0020               	movlb	0	; select bank0
  3663  155D  00A0               	movwf	PROTOCOL_Set_Tick_Handler@tick_handler
  3664  155E  3016               	movlw	high _tick_handler
  3665  155F  00A1               	movwf	PROTOCOL_Set_Tick_Handler@tick_handler+1
  3666  1560  3192  2211  3195   	fcall	_PROTOCOL_Set_Tick_Handler
  3667                           
  3668                           ;main.c: 414: PROTOCOL_Loop();
  3669  1563  318C  24A0         	fcall	_PROTOCOL_Loop
  3670  1565  3180  283C         	ljmp	start
  3671  1567                     __end_of_main:	
  3672                           
  3673                           	psect	text1
  3674  0A54                     __ptext1:	
  3675 ;; *************** function _init *****************
  3676 ;; Defined at:
  3677 ;;		line 98 in file "main.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;		None
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;  i               1   17[BANK0 ] unsigned char 
  3682 ;;  y               1   16[BANK0 ] unsigned char 
  3683 ;;  dev_addr        1   15[BANK0 ] unsigned char 
  3684 ;;  k               1    0        unsigned char 
  3685 ;;  j               1    0        unsigned char 
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3696 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3697 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3698 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3699 ;;Total ram usage:        9 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    4
  3702 ;; This function calls:
  3703 ;;		_DATAEE_ReadByte
  3704 ;;		___awdiv
  3705 ;;		___wmul
  3706 ;; This function is called by:
  3707 ;;		_main
  3708 ;; This function uses a non-reentrant model
  3709 ;;
  3710                           
  3711                           
  3712                           ;psect for function _init
  3713  0A54                     _init:	
  3714                           
  3715                           ;main.c: 99: uint8_t y, i, j, k, dev_addr;
  3716                           ;main.c: 102: for (y=0; y<MAX_Y; y++) {
  3717                           
  3718                           ;incstack = 0
  3719                           ; Regs used in _init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3720  0A54  0020               	movlb	0	; select bank0
  3721  0A55  01B0               	clrf	init@y
  3722  0A56  300A               	movlw	low (_MAX_Y| (0+32768))
  3723  0A57  0084               	movwf	4
  3724  0A58  3090               	movlw	high (_MAX_Y| (0+32768))
  3725  0A59  0085               	movwf	5
  3726  0A5A  0800               	movf	0,w	;code access
  3727  0A5B  0230               	subwf	init@y,w
  3728  0A5C  1803               	btfsc	3,0
  3729  0A5D  2A70               	goto	l5979
  3730  0A5E                     l5973:	
  3731                           
  3732                           ;main.c: 103: dev_map[y] = 0;
  3733  0A5E  0830               	movf	init@y,w
  3734  0A5F  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  3735  0A60  0086               	movwf	6
  3736  0A61  3001               	movlw	1	; select bank2/3
  3737  0A62  0087               	movwf	7
  3738  0A63  0181               	clrf	1
  3739  0A64  3001               	movlw	1
  3740  0A65  00A9               	movwf	??_init
  3741  0A66  0829               	movf	??_init,w
  3742  0A67  07B0               	addwf	init@y,f
  3743  0A68  300A               	movlw	low (_MAX_Y| (0+32768))
  3744  0A69  0084               	movwf	4
  3745  0A6A  3090               	movlw	high (_MAX_Y| (0+32768))
  3746  0A6B  0085               	movwf	5
  3747  0A6C  0800               	movf	0,w	;code access
  3748  0A6D  0230               	subwf	init@y,w
  3749  0A6E  1C03               	skipc
  3750  0A6F  2A5E               	goto	l5973
  3751  0A70                     l5979:	
  3752                           
  3753                           ;main.c: 104: }
  3754                           ;main.c: 107: for (i=0; i<4; i++) cmd_buf[i][0] = '\0';
  3755  0A70  01B1               	clrf	init@i
  3756  0A71  3004               	movlw	4
  3757  0A72  0231               	subwf	init@i,w
  3758  0A73  1803               	btfsc	3,0
  3759  0A74  2A97               	goto	l5991
  3760  0A75                     l5985:	
  3761  0A75  0831               	movf	init@i,w
  3762  0A76  00A9               	movwf	??_init
  3763  0A77  01AA               	clrf	??_init+1
  3764  0A78  0829               	movf	??_init,w
  3765  0A79  00A0               	movwf	___wmul@multiplier
  3766  0A7A  082A               	movf	??_init+1,w
  3767  0A7B  00A1               	movwf	___wmul@multiplier+1
  3768  0A7C  3030               	movlw	48
  3769  0A7D  00A2               	movwf	___wmul@multiplicand
  3770  0A7E  3000               	movlw	0
  3771  0A7F  00A3               	movwf	___wmul@multiplicand+1
  3772  0A80  3193  235A  318A   	fcall	___wmul
  3773  0A83  3030               	movlw	48
  3774  0A84  0020               	movlb	0	; select bank0
  3775  0A85  00AB               	movwf	??_init+2
  3776  0A86  3023               	movlw	35
  3777  0A87  00AC               	movwf	??_init+3
  3778  0A88  0820               	movf	?___wmul,w
  3779  0A89  072B               	addwf	??_init+2,w
  3780  0A8A  0086               	movwf	6
  3781  0A8B  0821               	movf	?___wmul+1,w
  3782  0A8C  3D2C               	addwfc	??_init+3,w
  3783  0A8D  0087               	movwf	7
  3784  0A8E  0181               	clrf	1
  3785  0A8F  3001               	movlw	1
  3786  0A90  00A9               	movwf	??_init
  3787  0A91  0829               	movf	??_init,w
  3788  0A92  07B1               	addwf	init@i,f
  3789  0A93  3004               	movlw	4
  3790  0A94  0231               	subwf	init@i,w
  3791  0A95  1C03               	skipc
  3792  0A96  2A75               	goto	l5985
  3793  0A97                     l5991:	
  3794                           
  3795                           ;main.c: 110: for (i=0; i<28; i++) {
  3796  0A97  01B1               	clrf	init@i
  3797  0A98                     L1:	
  3798  0A98  301C               	movlw	28
  3799  0A99  0231               	subwf	init@i,w
  3800  0A9A  1803               	btfsc	3,0
  3801  0A9B  0008               	return
  3802                           
  3803                           ;main.c: 111: dev_addr = DATAEE_ReadByte(1+i+1);
  3804  0A9C  0831               	movf	init@i,w
  3805  0A9D  3E02               	addlw	2
  3806  0A9E  3192  223B  318A   	fcall	_DATAEE_ReadByte
  3807  0AA1  0020               	movlb	0	; select bank0
  3808  0AA2  00A9               	movwf	??_init
  3809  0AA3  0829               	movf	??_init,w
  3810  0AA4  00AF               	movwf	init@dev_addr
  3811                           
  3812                           ;main.c: 112: schedule[i/4][i%4] = dev_addr;
  3813  0AA5  082F               	movf	init@dev_addr,w
  3814  0AA6  00A9               	movwf	??_init
  3815  0AA7  3004               	movlw	4
  3816  0AA8  00A0               	movwf	___awdiv@divisor
  3817  0AA9  3000               	movlw	0
  3818  0AAA  00A1               	movwf	___awdiv@divisor+1
  3819  0AAB  0831               	movf	init@i,w
  3820  0AAC  00AA               	movwf	??_init+1
  3821  0AAD  01AB               	clrf	??_init+2
  3822  0AAE  082A               	movf	??_init+1,w
  3823  0AAF  00A2               	movwf	___awdiv@dividend
  3824  0AB0  082B               	movf	??_init+2,w
  3825  0AB1  00A3               	movwf	___awdiv@dividend+1
  3826  0AB2  3188  20E5  318A   	fcall	___awdiv
  3827  0AB5  0020               	movlb	0	; select bank0
  3828  0AB6  0820               	movf	?___awdiv,w
  3829  0AB7  00AC               	movwf	??_init+3
  3830  0AB8  3002               	movlw	2
  3831  0AB9                     u7035:	
  3832  0AB9  35AC               	lslf	??_init+3,f
  3833  0ABA  0B89               	decfsz	9,f
  3834  0ABB  2AB9               	goto	u7035
  3835  0ABC  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  3836  0ABD  072C               	addwf	??_init+3,w
  3837  0ABE  00AD               	movwf	??_init+4
  3838  0ABF  0831               	movf	init@i,w
  3839  0AC0  3903               	andlw	3
  3840  0AC1  072D               	addwf	??_init+4,w
  3841  0AC2  00AE               	movwf	??_init+5
  3842  0AC3  082E               	movf	??_init+5,w
  3843  0AC4  0086               	movwf	6
  3844  0AC5  3001               	movlw	1	; select bank3/4
  3845  0AC6  0087               	movwf	7
  3846  0AC7  0829               	movf	??_init,w
  3847  0AC8  0081               	movwf	1
  3848  0AC9  3001               	movlw	1
  3849  0ACA  00A9               	movwf	??_init
  3850  0ACB  0829               	movf	??_init,w
  3851  0ACC  07B1               	addwf	init@i,f
  3852  0ACD  2A98               	goto	L1
  3853  0ACE                     __end_of_init:	
  3854                           
  3855                           	psect	text2
  3856  1299                     __ptext2:	
  3857 ;; *************** function _SYSTEM_Initialize *****************
  3858 ;; Defined at:
  3859 ;;		line 69 in file "mcc_generated_files/mcc.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;		None
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;		None
  3864 ;; Return value:  Size  Location     Type
  3865 ;;                  1    wreg      void 
  3866 ;; Registers used:
  3867 ;;		wreg, status,2, status,0, pclath, cstack
  3868 ;; Tracked objects:
  3869 ;;		On entry : 0/0
  3870 ;;		On exit  : 0/0
  3871 ;;		Unchanged: 0/0
  3872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3877 ;;Total ram usage:        0 bytes
  3878 ;; Hardware stack levels used:    1
  3879 ;; Hardware stack levels required when called:    4
  3880 ;; This function calls:
  3881 ;;		_EUSART_Initialize
  3882 ;;		_I2C1_Initialize
  3883 ;;		_OSCILLATOR_Initialize
  3884 ;;		_PIN_MANAGER_Initialize
  3885 ;;		_TMR0_Initialize
  3886 ;;		_WDT_Initialize
  3887 ;; This function is called by:
  3888 ;;		_main
  3889 ;; This function uses a non-reentrant model
  3890 ;;
  3891                           
  3892                           
  3893                           ;psect for function _SYSTEM_Initialize
  3894  1299                     _SYSTEM_Initialize:	
  3895                           
  3896                           ;mcc.c: 72: PIN_MANAGER_Initialize();
  3897                           
  3898                           ;incstack = 0
  3899                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3900  1299  3193  2392  3192   	fcall	_PIN_MANAGER_Initialize
  3901                           
  3902                           ;mcc.c: 73: OSCILLATOR_Initialize();
  3903  129C  3191  21F9  3192   	fcall	_OSCILLATOR_Initialize
  3904                           
  3905                           ;mcc.c: 74: WDT_Initialize();
  3906  129F  3187  27FC  3192   	fcall	_WDT_Initialize
  3907                           
  3908                           ;mcc.c: 75: I2C1_Initialize();
  3909  12A2  3193  2376  3192   	fcall	_I2C1_Initialize
  3910                           
  3911                           ;mcc.c: 76: TMR0_Initialize();
  3912  12A5  3192  2224  3192   	fcall	_TMR0_Initialize
  3913                           
  3914                           ;mcc.c: 77: EUSART_Initialize();
  3915  12A8  3192  22ED         	fcall	_EUSART_Initialize
  3916  12AA  0008               	return
  3917  12AB                     __end_of_SYSTEM_Initialize:	
  3918                           
  3919                           	psect	text3
  3920  07FC                     __ptext3:	
  3921 ;; *************** function _WDT_Initialize *****************
  3922 ;; Defined at:
  3923 ;;		line 92 in file "mcc_generated_files/mcc.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;		None
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;		None
  3928 ;; Return value:  Size  Location     Type
  3929 ;;                  1    wreg      void 
  3930 ;; Registers used:
  3931 ;;		wreg
  3932 ;; Tracked objects:
  3933 ;;		On entry : 0/0
  3934 ;;		On exit  : 0/0
  3935 ;;		Unchanged: 0/0
  3936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3938 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3940 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3941 ;;Total ram usage:        0 bytes
  3942 ;; Hardware stack levels used:    1
  3943 ;; Hardware stack levels required when called:    3
  3944 ;; This function calls:
  3945 ;;		Nothing
  3946 ;; This function is called by:
  3947 ;;		_SYSTEM_Initialize
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951                           
  3952                           ;psect for function _WDT_Initialize
  3953  07FC                     _WDT_Initialize:	
  3954                           
  3955                           ;mcc.c: 95: WDTCON = 0x16;
  3956                           
  3957                           ;incstack = 0
  3958                           ; Regs used in _WDT_Initialize: [wreg]
  3959  07FC  3016               	movlw	22
  3960  07FD  0021               	movlb	1	; select bank1
  3961  07FE  0097               	movwf	23	;volatile
  3962  07FF  0008               	return
  3963  0800                     __end_of_WDT_Initialize:	
  3964                           
  3965                           	psect	text4
  3966  1224                     __ptext4:	
  3967 ;; *************** function _TMR0_Initialize *****************
  3968 ;; Defined at:
  3969 ;;		line 62 in file "mcc_generated_files/tmr0.c"
  3970 ;; Parameters:    Size  Location     Type
  3971 ;;		None
  3972 ;; Auto vars:     Size  Location     Type
  3973 ;;		None
  3974 ;; Return value:  Size  Location     Type
  3975 ;;                  1    wreg      void 
  3976 ;; Registers used:
  3977 ;;		wreg, status,2
  3978 ;; Tracked objects:
  3979 ;;		On entry : 0/0
  3980 ;;		On exit  : 0/0
  3981 ;;		Unchanged: 0/0
  3982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3987 ;;Total ram usage:        0 bytes
  3988 ;; Hardware stack levels used:    1
  3989 ;; Hardware stack levels required when called:    3
  3990 ;; This function calls:
  3991 ;;		Nothing
  3992 ;; This function is called by:
  3993 ;;		_SYSTEM_Initialize
  3994 ;; This function uses a non-reentrant model
  3995 ;;
  3996                           
  3997                           
  3998                           ;psect for function _TMR0_Initialize
  3999  1224                     _TMR0_Initialize:	
  4000                           
  4001                           ;tmr0.c: 67: OPTION_REG = (OPTION_REG & 0xC0) | 0xD7 & 0x3F;
  4002                           
  4003                           ;incstack = 0
  4004                           ; Regs used in _TMR0_Initialize: [wreg+status,2]
  4005  1224  0021               	movlb	1	; select bank1
  4006  1225  0815               	movf	21,w	;volatile
  4007  1226  39C0               	andlw	192
  4008  1227  3817               	iorlw	23
  4009  1228  0095               	movwf	21	;volatile
  4010                           
  4011                           ;tmr0.c: 70: TMR0 = 0x00;
  4012  1229  0020               	movlb	0	; select bank0
  4013  122A  0195               	clrf	21	;volatile
  4014                           
  4015                           ;tmr0.c: 73: timer0ReloadVal= 0;
  4016  122B  0021               	movlb	1	; select bank1
  4017  122C  01E5               	clrf	_timer0ReloadVal^(0+128)	;volatile
  4018                           
  4019                           ;tmr0.c: 76: INTCONbits.TMR0IF = 0;
  4020  122D  110B               	bcf	11,2	;volatile
  4021  122E  0008               	return
  4022  122F                     __end_of_TMR0_Initialize:	
  4023                           
  4024                           	psect	text5
  4025  1392                     __ptext5:	
  4026 ;; *************** function _PIN_MANAGER_Initialize *****************
  4027 ;; Defined at:
  4028 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
  4029 ;; Parameters:    Size  Location     Type
  4030 ;;		None
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;		None
  4033 ;; Return value:  Size  Location     Type
  4034 ;;                  1    wreg      void 
  4035 ;; Registers used:
  4036 ;;		wreg, status,2
  4037 ;; Tracked objects:
  4038 ;;		On entry : 0/0
  4039 ;;		On exit  : 0/0
  4040 ;;		Unchanged: 0/0
  4041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4046 ;;Total ram usage:        0 bytes
  4047 ;; Hardware stack levels used:    1
  4048 ;; Hardware stack levels required when called:    3
  4049 ;; This function calls:
  4050 ;;		Nothing
  4051 ;; This function is called by:
  4052 ;;		_SYSTEM_Initialize
  4053 ;; This function uses a non-reentrant model
  4054 ;;
  4055                           
  4056                           
  4057                           ;psect for function _PIN_MANAGER_Initialize
  4058  1392                     _PIN_MANAGER_Initialize:	
  4059                           
  4060                           ;pin_manager.c: 56: LATA = 0x00;
  4061                           
  4062                           ;incstack = 0
  4063                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  4064  1392  0022               	movlb	2	; select bank2
  4065  1393  018C               	clrf	12	;volatile
  4066                           
  4067                           ;pin_manager.c: 57: LATB = 0x00;
  4068  1394  018D               	clrf	13	;volatile
  4069                           
  4070                           ;pin_manager.c: 58: LATC = 0x00;
  4071  1395  018E               	clrf	14	;volatile
  4072                           
  4073                           ;pin_manager.c: 63: TRISA = 0x3F;
  4074  1396  303F               	movlw	63
  4075  1397  0021               	movlb	1	; select bank1
  4076  1398  008C               	movwf	12	;volatile
  4077                           
  4078                           ;pin_manager.c: 64: TRISB = 0xF0;
  4079  1399  30F0               	movlw	240
  4080  139A  008D               	movwf	13	;volatile
  4081                           
  4082                           ;pin_manager.c: 65: TRISC = 0x7F;
  4083  139B  307F               	movlw	127
  4084  139C  008E               	movwf	14	;volatile
  4085                           
  4086                           ;pin_manager.c: 70: ANSELC = 0x4F;
  4087  139D  304F               	movlw	79
  4088  139E  0023               	movlb	3	; select bank3
  4089  139F  008E               	movwf	14	;volatile
  4090                           
  4091                           ;pin_manager.c: 71: ANSELB = 0x20;
  4092  13A0  3020               	movlw	32
  4093  13A1  008D               	movwf	13	;volatile
  4094                           
  4095                           ;pin_manager.c: 72: ANSELA = 0x17;
  4096  13A2  3017               	movlw	23
  4097  13A3  008C               	movwf	12	;volatile
  4098                           
  4099                           ;pin_manager.c: 77: WPUB = 0x00;
  4100  13A4  0024               	movlb	4	; select bank4
  4101  13A5  018D               	clrf	13	;volatile
  4102                           
  4103                           ;pin_manager.c: 78: WPUA = 0x3F;
  4104  13A6  303F               	movlw	63
  4105  13A7  008C               	movwf	12	;volatile
  4106                           
  4107                           ;pin_manager.c: 79: WPUC = 0xBF;
  4108  13A8  30BF               	movlw	191
  4109  13A9  008E               	movwf	14	;volatile
  4110                           
  4111                           ;pin_manager.c: 80: OPTION_REGbits.nWPUEN = 0;
  4112  13AA  0021               	movlb	1	; select bank1
  4113  13AB  1395               	bcf	21,7	;volatile
  4114                           
  4115                           ;pin_manager.c: 86: APFCON1 = 0x00;
  4116  13AC  0022               	movlb	2	; select bank2
  4117  13AD  019E               	clrf	30	;volatile
  4118                           
  4119                           ;pin_manager.c: 87: APFCON0 = 0x84;
  4120  13AE  3084               	movlw	132
  4121  13AF  009D               	movwf	29	;volatile
  4122  13B0  0008               	return
  4123  13B1                     __end_of_PIN_MANAGER_Initialize:	
  4124                           
  4125                           	psect	text6
  4126  11F9                     __ptext6:	
  4127 ;; *************** function _OSCILLATOR_Initialize *****************
  4128 ;; Defined at:
  4129 ;;		line 80 in file "mcc_generated_files/mcc.c"
  4130 ;; Parameters:    Size  Location     Type
  4131 ;;		None
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;		None
  4134 ;; Return value:  Size  Location     Type
  4135 ;;                  1    wreg      void 
  4136 ;; Registers used:
  4137 ;;		wreg, status,2
  4138 ;; Tracked objects:
  4139 ;;		On entry : 0/0
  4140 ;;		On exit  : 0/0
  4141 ;;		Unchanged: 0/0
  4142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4147 ;;Total ram usage:        0 bytes
  4148 ;; Hardware stack levels used:    1
  4149 ;; Hardware stack levels required when called:    3
  4150 ;; This function calls:
  4151 ;;		Nothing
  4152 ;; This function is called by:
  4153 ;;		_SYSTEM_Initialize
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           
  4158                           ;psect for function _OSCILLATOR_Initialize
  4159  11F9                     _OSCILLATOR_Initialize:	
  4160                           
  4161                           ;mcc.c: 83: OSCCON = 0x70;
  4162                           
  4163                           ;incstack = 0
  4164                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  4165  11F9  3070               	movlw	112
  4166  11FA  0021               	movlb	1	; select bank1
  4167  11FB  0099               	movwf	25	;volatile
  4168                           
  4169                           ;mcc.c: 85: OSCTUNE = 0x00;
  4170  11FC  0198               	clrf	24	;volatile
  4171  11FD                     l355:	
  4172                           ;mcc.c: 88: {
  4173                           
  4174                           ;mcc.c: 87: while(PLLR == 0)
  4175                           
  4176  11FD  1B1A               	btfsc	26,6	;volatile
  4177  11FE  0008               	return
  4178  11FF  29FD               	goto	l355
  4179  1200                     __end_of_OSCILLATOR_Initialize:	
  4180                           
  4181                           	psect	text7
  4182  1376                     __ptext7:	
  4183 ;; *************** function _I2C1_Initialize *****************
  4184 ;; Defined at:
  4185 ;;		line 198 in file "mcc_generated_files/i2c1.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;		None
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;		None
  4190 ;; Return value:  Size  Location     Type
  4191 ;;                  1    wreg      void 
  4192 ;; Registers used:
  4193 ;;		wreg, status,2
  4194 ;; Tracked objects:
  4195 ;;		On entry : 0/0
  4196 ;;		On exit  : 0/0
  4197 ;;		Unchanged: 0/0
  4198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4201 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;Total ram usage:        1 bytes
  4204 ;; Hardware stack levels used:    1
  4205 ;; Hardware stack levels required when called:    3
  4206 ;; This function calls:
  4207 ;;		Nothing
  4208 ;; This function is called by:
  4209 ;;		_SYSTEM_Initialize
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213                           
  4214                           ;psect for function _I2C1_Initialize
  4215  1376                     _I2C1_Initialize:	
  4216                           
  4217                           ;i2c1.c: 200: i2c1_object.pTrHead = i2c1_tr_queue;
  4218                           
  4219                           ;incstack = 0
  4220                           ; Regs used in _I2C1_Initialize: [wreg+status,2]
  4221  1376  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
  4222  1377  0020               	movlb	0	; select bank0
  4223  1378  00A0               	movwf	??_I2C1_Initialize
  4224  1379  0820               	movf	??_I2C1_Initialize,w
  4225  137A  0021               	movlb	1	; select bank1
  4226  137B  00DA               	movwf	(low ((_i2c1_object| 0+1)))^(0+128)
  4227                           
  4228                           ;i2c1.c: 201: i2c1_object.pTrTail = i2c1_tr_queue;
  4229  137C  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
  4230  137D  0020               	movlb	0	; select bank0
  4231  137E  00A0               	movwf	??_I2C1_Initialize
  4232  137F  0820               	movf	??_I2C1_Initialize,w
  4233  1380  0021               	movlb	1	; select bank1
  4234  1381  00D9               	movwf	_i2c1_object^(0+128)
  4235                           
  4236                           ;i2c1.c: 202: i2c1_object.trStatus.s.empty = 1;
  4237  1382  14DB               	bsf	(_i2c1_object^(0+128)+2),1
  4238                           
  4239                           ;i2c1.c: 203: i2c1_object.trStatus.s.full = 0;
  4240  1383  105B               	bcf	(_i2c1_object^(0+128)+2),0
  4241                           
  4242                           ;i2c1.c: 205: i2c1_object.i2cErrors = 0;
  4243  1384  01DD               	clrf	(_i2c1_object^(0+128)+4)
  4244                           
  4245                           ;i2c1.c: 208: SSP1STAT = 0x80;
  4246  1385  3080               	movlw	128
  4247  1386  0024               	movlb	4	; select bank4
  4248  1387  0094               	movwf	20	;volatile
  4249                           
  4250                           ;i2c1.c: 210: SSP1CON1 = 0x28;
  4251  1388  3028               	movlw	40
  4252  1389  0095               	movwf	21	;volatile
  4253                           
  4254                           ;i2c1.c: 212: SSP1CON3 = 0x00;
  4255  138A  0197               	clrf	23	;volatile
  4256                           
  4257                           ;i2c1.c: 214: SSP1ADD = 0x4F;
  4258  138B  304F               	movlw	79
  4259  138C  0092               	movwf	18	;volatile
  4260                           
  4261                           ;i2c1.c: 218: PIR1bits.SSP1IF = 0;
  4262  138D  0020               	movlb	0	; select bank0
  4263  138E  1191               	bcf	17,3	;volatile
  4264                           
  4265                           ;i2c1.c: 220: PIE1bits.SSP1IE = 1;
  4266  138F  0021               	movlb	1	; select bank1
  4267  1390  1591               	bsf	17,3	;volatile
  4268  1391  0008               	return
  4269  1392                     __end_of_I2C1_Initialize:	
  4270                           
  4271                           	psect	text8
  4272  12ED                     __ptext8:	
  4273 ;; *************** function _EUSART_Initialize *****************
  4274 ;; Defined at:
  4275 ;;		line 75 in file "mcc_generated_files/eusart.c"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;		None
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;		None
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  1    wreg      void 
  4282 ;; Registers used:
  4283 ;;		wreg, status,2
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4292 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4293 ;;Total ram usage:        1 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    3
  4296 ;; This function calls:
  4297 ;;		Nothing
  4298 ;; This function is called by:
  4299 ;;		_SYSTEM_Initialize
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           
  4304                           ;psect for function _EUSART_Initialize
  4305  12ED                     _EUSART_Initialize:	
  4306                           
  4307                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  4308                           
  4309                           ;incstack = 0
  4310                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  4311  12ED  0021               	movlb	1	; select bank1
  4312  12EE  1291               	bcf	17,5	;volatile
  4313                           
  4314                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  4315  12EF  1211               	bcf	17,4	;volatile
  4316                           
  4317                           ;eusart.c: 84: BAUDCON = 0x08;
  4318  12F0  3008               	movlw	8
  4319  12F1  0023               	movlb	3	; select bank3
  4320  12F2  009F               	movwf	31	;volatile
  4321                           
  4322                           ;eusart.c: 87: RCSTA = 0x90;
  4323  12F3  3090               	movlw	144
  4324  12F4  009D               	movwf	29	;volatile
  4325                           
  4326                           ;eusart.c: 90: TXSTA = 0x24;
  4327  12F5  3024               	movlw	36
  4328  12F6  009E               	movwf	30	;volatile
  4329                           
  4330                           ;eusart.c: 93: SPBRGL = 0x44;
  4331  12F7  3044               	movlw	68
  4332  12F8  009B               	movwf	27	;volatile
  4333                           
  4334                           ;eusart.c: 96: SPBRGH = 0x00;
  4335  12F9  019C               	clrf	28	;volatile
  4336                           
  4337                           ;eusart.c: 100: eusartTxHead = 0;
  4338  12FA  01F6               	clrf	_eusartTxHead	;volatile
  4339                           
  4340                           ;eusart.c: 101: eusartTxTail = 0;
  4341  12FB  01F5               	clrf	_eusartTxTail	;volatile
  4342                           
  4343                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  4344  12FC  3040               	movlw	64
  4345  12FD  0020               	movlb	0	; select bank0
  4346  12FE  00A0               	movwf	??_EUSART_Initialize
  4347  12FF  0820               	movf	??_EUSART_Initialize,w
  4348  1300  00F4               	movwf	_eusartTxBufferRemaining	;volatile
  4349                           
  4350                           ;eusart.c: 104: eusartRxHead = 0;
  4351  1301  01F3               	clrf	_eusartRxHead	;volatile
  4352                           
  4353                           ;eusart.c: 105: eusartRxTail = 0;
  4354  1302  01F2               	clrf	_eusartRxTail	;volatile
  4355                           
  4356                           ;eusart.c: 106: eusartRxCount = 0;
  4357  1303  0021               	movlb	1	; select bank1
  4358  1304  01E6               	clrf	_eusartRxCount^(0+128)	;volatile
  4359                           
  4360                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  4361  1305  1691               	bsf	17,5	;volatile
  4362  1306  0008               	return
  4363  1307                     __end_of_EUSART_Initialize:	
  4364                           
  4365                           	psect	text9
  4366  1211                     __ptext9:	
  4367 ;; *************** function _PROTOCOL_Set_Tick_Handler *****************
  4368 ;; Defined at:
  4369 ;;		line 85 in file "protocol.c"
  4370 ;; Parameters:    Size  Location     Type
  4371 ;;  tick_handler    2    0[BANK0 ] PTR void 
  4372 ;;		 -> tick_handler(1), 
  4373 ;; Auto vars:     Size  Location     Type
  4374 ;;		None
  4375 ;; Return value:  Size  Location     Type
  4376 ;;                  1    wreg      void 
  4377 ;; Registers used:
  4378 ;;		wreg
  4379 ;; Tracked objects:
  4380 ;;		On entry : 0/0
  4381 ;;		On exit  : 0/0
  4382 ;;		Unchanged: 0/0
  4383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4384 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4387 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4388 ;;Total ram usage:        2 bytes
  4389 ;; Hardware stack levels used:    1
  4390 ;; Hardware stack levels required when called:    3
  4391 ;; This function calls:
  4392 ;;		Nothing
  4393 ;; This function is called by:
  4394 ;;		_main
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398                           
  4399                           ;psect for function _PROTOCOL_Set_Tick_Handler
  4400  1211                     _PROTOCOL_Set_Tick_Handler:	
  4401                           
  4402                           ;protocol.c: 86: PROTOCOL_Tick_Handler = tick_handler;
  4403                           
  4404                           ;incstack = 0
  4405                           ; Regs used in _PROTOCOL_Set_Tick_Handler: [wreg]
  4406  1211  0020               	movlb	0	; select bank0
  4407  1212  0821               	movf	PROTOCOL_Set_Tick_Handler@tick_handler+1,w
  4408  1213  0022               	movlb	2	; select bank2
  4409  1214  00A9               	movwf	(_PROTOCOL_Tick_Handler+1)^(0+256)
  4410  1215  0020               	movlb	0	; select bank0
  4411  1216  0820               	movf	PROTOCOL_Set_Tick_Handler@tick_handler,w
  4412  1217  0022               	movlb	2	; select bank2
  4413  1218  00A8               	movwf	_PROTOCOL_Tick_Handler^(0+256)
  4414  1219  0008               	return
  4415  121A                     __end_of_PROTOCOL_Set_Tick_Handler:	
  4416                           
  4417                           	psect	text10
  4418  1208                     __ptext10:	
  4419 ;; *************** function _PROTOCOL_Set_Extension_Handler *****************
  4420 ;; Defined at:
  4421 ;;		line 81 in file "protocol.c"
  4422 ;; Parameters:    Size  Location     Type
  4423 ;;  extension_ha    2    0[BANK0 ] PTR void 
  4424 ;;		 -> command_handler(1), 
  4425 ;; Auto vars:     Size  Location     Type
  4426 ;;		None
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  1    wreg      void 
  4429 ;; Registers used:
  4430 ;;		wreg
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4436 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4439 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4440 ;;Total ram usage:        2 bytes
  4441 ;; Hardware stack levels used:    1
  4442 ;; Hardware stack levels required when called:    3
  4443 ;; This function calls:
  4444 ;;		Nothing
  4445 ;; This function is called by:
  4446 ;;		_main
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           
  4451                           ;psect for function _PROTOCOL_Set_Extension_Handler
  4452  1208                     _PROTOCOL_Set_Extension_Handler:	
  4453                           
  4454                           ;protocol.c: 82: PROTOCOL_Extension_Handler = extension_handler;
  4455                           
  4456                           ;incstack = 0
  4457                           ; Regs used in _PROTOCOL_Set_Extension_Handler: [wreg]
  4458  1208  0020               	movlb	0	; select bank0
  4459  1209  0821               	movf	PROTOCOL_Set_Extension_Handler@extension_handler+1,w
  4460  120A  0022               	movlb	2	; select bank2
  4461  120B  00AD               	movwf	(_PROTOCOL_Extension_Handler+1)^(0+256)
  4462  120C  0020               	movlb	0	; select bank0
  4463  120D  0820               	movf	PROTOCOL_Set_Extension_Handler@extension_handler,w
  4464  120E  0022               	movlb	2	; select bank2
  4465  120F  00AC               	movwf	_PROTOCOL_Extension_Handler^(0+256)
  4466  1210  0008               	return
  4467  1211                     __end_of_PROTOCOL_Set_Extension_Handler:	
  4468                           
  4469                           	psect	text11
  4470  0CA0                     __ptext11:	
  4471 ;; *************** function _PROTOCOL_Loop *****************
  4472 ;; Defined at:
  4473 ;;		line 136 in file "protocol.c"
  4474 ;; Parameters:    Size  Location     Type
  4475 ;;		None
  4476 ;; Auto vars:     Size  Location     Type
  4477 ;;  device_addre    1   74[BANK0 ] unsigned char 
  4478 ;;  c               1   73[BANK0 ] unsigned char 
  4479 ;; Return value:  Size  Location     Type
  4480 ;;                  1    wreg      void 
  4481 ;; Registers used:
  4482 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4483 ;; Tracked objects:
  4484 ;;		On entry : 0/0
  4485 ;;		On exit  : 0/0
  4486 ;;		Unchanged: 0/0
  4487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4489 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;Total ram usage:        4 bytes
  4493 ;; Hardware stack levels used:    1
  4494 ;; Hardware stack levels required when called:   11
  4495 ;; This function calls:
  4496 ;;		Absolute function
  4497 ;;		_EUSART_Read
  4498 ;;		_PROTOCOL_EXT
  4499 ;;		_PROTOCOL_Read_Device_Address
  4500 ;;		_PROTOCOL_SAV
  4501 ;;		_PROTOCOL_SET
  4502 ;;		_PROTOCOL_STA
  4503 ;;		_PROTOCOL_STP
  4504 ;;		_PROTOCOL_Write_Device_Address
  4505 ;;		_TMR0_HasOverflowOccured
  4506 ;;		_atoi
  4507 ;;		_inv_handler
  4508 ;;		_printf
  4509 ;;		_strncmp
  4510 ;;		_tick_handler
  4511 ;; This function is called by:
  4512 ;;		_main
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           
  4517                           ;psect for function _PROTOCOL_Loop
  4518  0CA0                     _PROTOCOL_Loop:	
  4519  0CA0                     l841:	
  4520                           ;incstack = 0
  4521                           ; Regs used in _PROTOCOL_Loop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4522                           ;protocol.c: 137: uint8_t device_address;
  4523                           ;protocol.c: 138: uint8_t c;
  4524                           ;protocol.c: 139: while (1) {
  4525                           
  4526                           
  4527                           ;protocol.c: 140: tmr_overflow = TMR0_HasOverflowOccured();
  4528  0CA0  3191  21EF  318C   	fcall	_TMR0_HasOverflowOccured
  4529  0CA3  0020               	movlb	0	; select bank0
  4530  0CA4  00E7               	movwf	??_PROTOCOL_Loop
  4531  0CA5  0867               	movf	??_PROTOCOL_Loop,w
  4532  0CA6  0022               	movlb	2	; select bank2
  4533  0CA7  00BE               	movwf	_tmr_overflow^(0+256)
  4534                           
  4535                           ;protocol.c: 141: if (tmr_overflow) {
  4536  0CA8  083E               	movf	_tmr_overflow^(0+256),w
  4537  0CA9  1903               	btfsc	3,2
  4538  0CAA  2CD7               	goto	l6049
  4539                           
  4540                           ;protocol.c: 142: TMR0IF = 0;
  4541  0CAB  110B               	bcf	11,2	;volatile
  4542                           
  4543                           ;protocol.c: 143: if (PROTOCOL_Tick_Handler) PROTOCOL_Tick_Handler();
  4544  0CAC  0828               	movf	_PROTOCOL_Tick_Handler^(0+256),w
  4545  0CAD  0429               	iorwf	(_PROTOCOL_Tick_Handler+1)^(0+256),w
  4546  0CAE  1903               	btfsc	3,2
  4547  0CAF  2CB5               	goto	l6035
  4548  0CB0  0829               	movf	(_PROTOCOL_Tick_Handler+1)^(0+256),w
  4549  0CB1  008A               	movwf	10
  4550  0CB2  0828               	movf	_PROTOCOL_Tick_Handler^(0+256),w
  4551  0CB3  000A               	callw
  4552  0CB4  318C               	pagesel	$
  4553  0CB5                     l6035:	
  4554                           
  4555                           ;protocol.c: 144: if (PROTOCOL_Inv_Handler && (++tmr_cnt >= value)) {
  4556  0CB5  0022               	movlb	2	; select bank2
  4557  0CB6  082A               	movf	_PROTOCOL_Inv_Handler^(0+256),w
  4558  0CB7  042B               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+256),w
  4559  0CB8  1903               	btfsc	3,2
  4560  0CB9  2CD7               	goto	l6049
  4561  0CBA  3001               	movlw	1
  4562  0CBB  0020               	movlb	0	; select bank0
  4563  0CBC  00E7               	movwf	??_PROTOCOL_Loop
  4564  0CBD  0867               	movf	??_PROTOCOL_Loop,w
  4565  0CBE  0022               	movlb	2	; select bank2
  4566  0CBF  07BF               	addwf	_tmr_cnt^(0+256),f
  4567  0CC0  0021               	movlb	1	; select bank1
  4568  0CC1  085E               	movf	_value^(0+128),w
  4569  0CC2  0022               	movlb	2	; select bank2
  4570  0CC3  023F               	subwf	_tmr_cnt^(0+256),w
  4571  0CC4  1C03               	skipc
  4572  0CC5  2CD7               	goto	l6049
  4573                           
  4574                           ;protocol.c: 145: tmr_cnt = 0;
  4575  0CC6  01BF               	clrf	_tmr_cnt^(0+256)
  4576                           
  4577                           ;protocol.c: 146: if (++sec_cnt >= tmr_scaler) {
  4578  0CC7  3001               	movlw	1
  4579  0CC8  0020               	movlb	0	; select bank0
  4580  0CC9  00E7               	movwf	??_PROTOCOL_Loop
  4581  0CCA  0867               	movf	??_PROTOCOL_Loop,w
  4582  0CCB  0022               	movlb	2	; select bank2
  4583  0CCC  07C0               	addwf	_sec_cnt^(0+256),f
  4584  0CCD  0862               	movf	_tmr_scaler^(0+256),w
  4585  0CCE  0240               	subwf	_sec_cnt^(0+256),w
  4586  0CCF  1C03               	skipc
  4587  0CD0  2CD7               	goto	l6049
  4588                           
  4589                           ;protocol.c: 147: if (running) invoked = 1;
  4590  0CD1  0842               	movf	_running^(0+256),w
  4591  0CD2  1903               	btfsc	3,2
  4592  0CD3  2CD6               	goto	l6047
  4593  0CD4  01C1               	clrf	_invoked^(0+256)
  4594  0CD5  0AC1               	incf	_invoked^(0+256),f
  4595  0CD6                     l6047:	
  4596                           
  4597                           ;protocol.c: 148: sec_cnt = 0;
  4598  0CD6  01C0               	clrf	_sec_cnt^(0+256)
  4599  0CD7                     l6049:	
  4600                           
  4601                           ;protocol.c: 149: }
  4602                           ;protocol.c: 150: }
  4603                           ;protocol.c: 151: }
  4604                           ;protocol.c: 152: if (invoked && PROTOCOL_Inv_Handler) {
  4605  0CD7  0841               	movf	_invoked^(0+256),w
  4606  0CD8  1903               	btfsc	3,2
  4607  0CD9  2CE5               	goto	l6059
  4608  0CDA  082A               	movf	_PROTOCOL_Inv_Handler^(0+256),w
  4609  0CDB  042B               	iorwf	(_PROTOCOL_Inv_Handler+1)^(0+256),w
  4610  0CDC  1903               	btfsc	3,2
  4611  0CDD  2CE5               	goto	l6059
  4612                           
  4613                           ;protocol.c: 153: PROTOCOL_Inv_Handler();
  4614  0CDE  082B               	movf	(_PROTOCOL_Inv_Handler+1)^(0+256),w
  4615  0CDF  008A               	movwf	10
  4616  0CE0  082A               	movf	_PROTOCOL_Inv_Handler^(0+256),w
  4617  0CE1  000A               	callw
  4618  0CE2  318C               	pagesel	$
  4619                           
  4620                           ;protocol.c: 154: invoked = 0;
  4621  0CE3  0022               	movlb	2	; select bank2
  4622  0CE4  01C1               	clrf	_invoked^(0+256)
  4623  0CE5                     l6059:	
  4624                           
  4625                           ;protocol.c: 157: if ((eusartRxCount)) {
  4626  0CE5  0021               	movlb	1	; select bank1
  4627  0CE6  0866               	movf	_eusartRxCount^(0+128),w	;volatile
  4628  0CE7  1903               	btfsc	3,2
  4629  0CE8  2CA0               	goto	l841
  4630                           
  4631                           ;protocol.c: 158: c = EUSART_Read();
  4632  0CE9  3193  23B1  318C   	fcall	_EUSART_Read
  4633  0CEC  0020               	movlb	0	; select bank0
  4634  0CED  00E7               	movwf	??_PROTOCOL_Loop
  4635  0CEE  0867               	movf	??_PROTOCOL_Loop,w
  4636  0CEF  00E9               	movwf	PROTOCOL_Loop@c
  4637                           
  4638                           ;protocol.c: 159: buf[cnt++] = c;
  4639  0CF0  0869               	movf	PROTOCOL_Loop@c,w
  4640  0CF1  00E7               	movwf	??_PROTOCOL_Loop
  4641  0CF2  0021               	movlb	1	; select bank1
  4642  0CF3  085F               	movf	_cnt^(0+128),w
  4643  0CF4  3E20               	addlw	(low (_buf| (0+512)))& (0+255)
  4644  0CF5  0086               	movwf	6
  4645  0CF6  3002               	movlw	2	; select bank4/5
  4646  0CF7  0087               	movwf	7
  4647  0CF8  0020               	movlb	0	; select bank0
  4648  0CF9  0867               	movf	??_PROTOCOL_Loop,w
  4649  0CFA  0081               	movwf	1
  4650  0CFB  3001               	movlw	1
  4651  0CFC  00E7               	movwf	??_PROTOCOL_Loop
  4652  0CFD  0867               	movf	??_PROTOCOL_Loop,w
  4653  0CFE  0021               	movlb	1	; select bank1
  4654  0CFF  07DF               	addwf	_cnt^(0+128),f
  4655                           
  4656                           ;protocol.c: 160: if (c == '\n') {
  4657  0D00  300A               	movlw	10
  4658  0D01  0020               	movlb	0	; select bank0
  4659  0D02  0669               	xorwf	PROTOCOL_Loop@c,w
  4660  0D03  1D03               	btfss	3,2
  4661  0D04  2CA0               	goto	l841
  4662                           
  4663                           ;protocol.c: 161: buf[--cnt] = '\0';
  4664  0D05  3001               	movlw	1
  4665  0D06  0021               	movlb	1	; select bank1
  4666  0D07  02DF               	subwf	_cnt^(0+128),f
  4667  0D08  085F               	movf	_cnt^(0+128),w
  4668  0D09  3E20               	addlw	(low (_buf| (0+512)))& (0+255)
  4669  0D0A  0086               	movwf	6
  4670  0D0B  3002               	movlw	2	; select bank4/5
  4671  0D0C  0087               	movwf	7
  4672  0D0D  0181               	clrf	1
  4673                           
  4674                           ;protocol.c: 162: cnt = 0;
  4675  0D0E  01DF               	clrf	_cnt^(0+128)
  4676                           
  4677                           ;protocol.c: 163: printf("#%s\n", buf);
  4678  0D0F  3058               	movlw	low (STR_35| (0+32768))
  4679  0D10  0020               	movlb	0	; select bank0
  4680  0D11  00AE               	movwf	printf@f
  4681  0D12  3091               	movlw	high (STR_35| (0+32768))
  4682  0D13  00AF               	movwf	printf@f+1
  4683  0D14  3020               	movlw	low _buf
  4684  0D15  00B0               	movwf	low ((?_printf| 0+2))
  4685  0D16  3002               	movlw	high _buf
  4686  0D17  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4687  0D18  3185  2519  318C   	fcall	_printf
  4688                           
  4689                           ;protocol.c: 164: if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  4690  0D1B  0021               	movlb	1	; select bank1
  4691  0D1C  036E               	decf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  4692  0D1D  1903               	btfsc	3,2
  4693  0D1E  2D24               	goto	l6079
  4694                           
  4695                           ;protocol.c: 165: PROTOCOL_EXT(buf);
  4696  0D1F  3020               	movlw	(low (_buf| (0+512)))& (0+255)
  4697  0D20  3192  22AB  318C   	fcall	_PROTOCOL_EXT
  4698                           
  4699                           ;protocol.c: 166: } else if (!strncmp(("WHO"), (buf), 3)) {
  4700  0D23  2CA0               	goto	l841
  4701  0D24                     l6079:	
  4702  0D24  308D               	movlw	low (STR_1| (0+32768))
  4703  0D25  0020               	movlb	0	; select bank0
  4704  0D26  00A0               	movwf	strncmp@s1
  4705  0D27  3091               	movlw	high (STR_1| (0+32768))
  4706  0D28  00A1               	movwf	strncmp@s1+1
  4707  0D29  3020               	movlw	low _buf
  4708  0D2A  00A2               	movwf	strncmp@s2
  4709  0D2B  3002               	movlw	high _buf
  4710  0D2C  00A3               	movwf	strncmp@s2+1
  4711  0D2D  3003               	movlw	3
  4712  0D2E  00A4               	movwf	strncmp@len
  4713  0D2F  3000               	movlw	0
  4714  0D30  00A5               	movwf	strncmp@len+1
  4715  0D31  3188  2002  318C   	fcall	_strncmp
  4716  0D34  0020               	movlb	0	; select bank0
  4717  0D35  0820               	movf	?_strncmp,w
  4718  0D36  0421               	iorwf	?_strncmp+1,w
  4719  0D37  1D03               	btfss	3,2
  4720  0D38  2D49               	goto	l6083
  4721                           
  4722                           ;protocol.c: 167: printf("$:WHO:%s\n", device_id_);
  4723  0D39  30E8               	movlw	low (STR_37| (0+32768))
  4724  0D3A  00AE               	movwf	printf@f
  4725  0D3B  3090               	movlw	high (STR_37| (0+32768))
  4726  0D3C  00AF               	movwf	printf@f+1
  4727  0D3D  0022               	movlb	2	; select bank2
  4728  0D3E  0827               	movf	(_device_id_+1)^(0+256),w
  4729  0D3F  0020               	movlb	0	; select bank0
  4730  0D40  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4731  0D41  0022               	movlb	2	; select bank2
  4732  0D42  0826               	movf	_device_id_^(0+256),w
  4733  0D43  0020               	movlb	0	; select bank0
  4734  0D44  00B0               	movwf	low ((?_printf| 0+2))
  4735  0D45  3185  2519  318C   	fcall	_printf
  4736                           
  4737                           ;protocol.c: 168: } else if (!strncmp(("SAV"), (buf), 3)) {
  4738  0D48  2CA0               	goto	l841
  4739  0D49                     l6083:	
  4740  0D49  30A5               	movlw	low (STR_4| (0+32768))
  4741  0D4A  0020               	movlb	0	; select bank0
  4742  0D4B  00A0               	movwf	strncmp@s1
  4743  0D4C  3091               	movlw	high (STR_4| (0+32768))
  4744  0D4D  00A1               	movwf	strncmp@s1+1
  4745  0D4E  3020               	movlw	low _buf
  4746  0D4F  00A2               	movwf	strncmp@s2
  4747  0D50  3002               	movlw	high _buf
  4748  0D51  00A3               	movwf	strncmp@s2+1
  4749  0D52  3003               	movlw	3
  4750  0D53  00A4               	movwf	strncmp@len
  4751  0D54  3000               	movlw	0
  4752  0D55  00A5               	movwf	strncmp@len+1
  4753  0D56  3188  2002  318C   	fcall	_strncmp
  4754  0D59  0020               	movlb	0	; select bank0
  4755  0D5A  0820               	movf	?_strncmp,w
  4756  0D5B  0421               	iorwf	?_strncmp+1,w
  4757  0D5C  1D03               	btfss	3,2
  4758  0D5D  2D62               	goto	l6087
  4759                           
  4760                           ;protocol.c: 169: PROTOCOL_SAV();
  4761  0D5E  3192  221A  318C   	fcall	_PROTOCOL_SAV
  4762                           
  4763                           ;protocol.c: 170: } else if (!strncmp(("STA"), (buf), 3)) {
  4764  0D61  2CA0               	goto	l841
  4765  0D62                     l6087:	
  4766  0D62  3075               	movlw	low (STR_5| (0+32768))
  4767  0D63  0020               	movlb	0	; select bank0
  4768  0D64  00A0               	movwf	strncmp@s1
  4769  0D65  3091               	movlw	high (STR_5| (0+32768))
  4770  0D66  00A1               	movwf	strncmp@s1+1
  4771  0D67  3020               	movlw	low _buf
  4772  0D68  00A2               	movwf	strncmp@s2
  4773  0D69  3002               	movlw	high _buf
  4774  0D6A  00A3               	movwf	strncmp@s2+1
  4775  0D6B  3003               	movlw	3
  4776  0D6C  00A4               	movwf	strncmp@len
  4777  0D6D  3000               	movlw	0
  4778  0D6E  00A5               	movwf	strncmp@len+1
  4779  0D6F  3188  2002  318C   	fcall	_strncmp
  4780  0D72  0020               	movlb	0	; select bank0
  4781  0D73  0820               	movf	?_strncmp,w
  4782  0D74  0421               	iorwf	?_strncmp+1,w
  4783  0D75  1D03               	btfss	3,2
  4784  0D76  2D7B               	goto	l6091
  4785                           
  4786                           ;protocol.c: 171: PROTOCOL_STA();
  4787  0D77  3191  21EB  318C   	fcall	_PROTOCOL_STA
  4788                           
  4789                           ;protocol.c: 172: } else if (!strncmp(("STP"), (buf), 3)) {
  4790  0D7A  2CA0               	goto	l841
  4791  0D7B                     l6091:	
  4792  0D7B  3095               	movlw	low (STR_6| (0+32768))
  4793  0D7C  0020               	movlb	0	; select bank0
  4794  0D7D  00A0               	movwf	strncmp@s1
  4795  0D7E  3091               	movlw	high (STR_6| (0+32768))
  4796  0D7F  00A1               	movwf	strncmp@s1+1
  4797  0D80  3020               	movlw	low _buf
  4798  0D81  00A2               	movwf	strncmp@s2
  4799  0D82  3002               	movlw	high _buf
  4800  0D83  00A3               	movwf	strncmp@s2+1
  4801  0D84  3003               	movlw	3
  4802  0D85  00A4               	movwf	strncmp@len
  4803  0D86  3000               	movlw	0
  4804  0D87  00A5               	movwf	strncmp@len+1
  4805  0D88  3188  2002  318C   	fcall	_strncmp
  4806  0D8B  0020               	movlb	0	; select bank0
  4807  0D8C  0820               	movf	?_strncmp,w
  4808  0D8D  0421               	iorwf	?_strncmp+1,w
  4809  0D8E  1D03               	btfss	3,2
  4810  0D8F  2DA0               	goto	l6097
  4811                           
  4812                           ;protocol.c: 173: PROTOCOL_STP();
  4813  0D90  3191  21E5  318C   	fcall	_PROTOCOL_STP
  4814                           
  4815                           ;protocol.c: 174: printf("*:STP:%s\n", "ACK");
  4816  0D93  30F2               	movlw	low (STR_41| (0+32768))
  4817  0D94  0020               	movlb	0	; select bank0
  4818  0D95  00AE               	movwf	printf@f
  4819  0D96  3090               	movlw	high (STR_41| (0+32768))
  4820  0D97  00AF               	movwf	printf@f+1
  4821  0D98  306D               	movlw	low (STR_42| (0+32768))
  4822  0D99  00B0               	movwf	low ((?_printf| 0+2))
  4823  0D9A  3091               	movlw	high (STR_42| (0+32768))
  4824  0D9B  00B1               	movwf	(low ((?_printf| 0+2))+1)
  4825  0D9C  3185  2519  318C   	fcall	_printf
  4826                           
  4827                           ;protocol.c: 175: } else if (!strncmp(("SET"), (buf), 3)) {
  4828  0D9F  2CA0               	goto	l841
  4829  0DA0                     l6097:	
  4830  0DA0  30A1               	movlw	low (STR_9| (0+32768))
  4831  0DA1  0020               	movlb	0	; select bank0
  4832  0DA2  00A0               	movwf	strncmp@s1
  4833  0DA3  3091               	movlw	high (STR_9| (0+32768))
  4834  0DA4  00A1               	movwf	strncmp@s1+1
  4835  0DA5  3020               	movlw	low _buf
  4836  0DA6  00A2               	movwf	strncmp@s2
  4837  0DA7  3002               	movlw	high _buf
  4838  0DA8  00A3               	movwf	strncmp@s2+1
  4839  0DA9  3003               	movlw	3
  4840  0DAA  00A4               	movwf	strncmp@len
  4841  0DAB  3000               	movlw	0
  4842  0DAC  00A5               	movwf	strncmp@len+1
  4843  0DAD  3188  2002  318C   	fcall	_strncmp
  4844  0DB0  0020               	movlb	0	; select bank0
  4845  0DB1  0820               	movf	?_strncmp,w
  4846  0DB2  0421               	iorwf	?_strncmp+1,w
  4847  0DB3  1D03               	btfss	3,2
  4848  0DB4  2DC2               	goto	l6101
  4849                           
  4850                           ;protocol.c: 176: PROTOCOL_SET(atoi(&buf[4]));
  4851  0DB5  3024               	movlw	low (_buf+4)
  4852  0DB6  00A6               	movwf	atoi@s
  4853  0DB7  3002               	movlw	high (_buf+4)
  4854  0DB8  00A7               	movwf	atoi@s+1
  4855  0DB9  3189  21E3  318C   	fcall	_atoi
  4856  0DBC  0020               	movlb	0	; select bank0
  4857  0DBD  0826               	movf	?_atoi,w
  4858  0DBE  3192  2200  318C   	fcall	_PROTOCOL_SET
  4859                           
  4860                           ;protocol.c: 177: } else if (!strncmp(("GET"), (buf), 3)) {
  4861  0DC1  2CA0               	goto	l841
  4862  0DC2                     l6101:	
  4863  0DC2  309D               	movlw	low (STR_10| (0+32768))
  4864  0DC3  0020               	movlb	0	; select bank0
  4865  0DC4  00A0               	movwf	strncmp@s1
  4866  0DC5  3091               	movlw	high (STR_10| (0+32768))
  4867  0DC6  00A1               	movwf	strncmp@s1+1
  4868  0DC7  3020               	movlw	low _buf
  4869  0DC8  00A2               	movwf	strncmp@s2
  4870  0DC9  3002               	movlw	high _buf
  4871  0DCA  00A3               	movwf	strncmp@s2+1
  4872  0DCB  3003               	movlw	3
  4873  0DCC  00A4               	movwf	strncmp@len
  4874  0DCD  3000               	movlw	0
  4875  0DCE  00A5               	movwf	strncmp@len+1
  4876  0DCF  3188  2002  318C   	fcall	_strncmp
  4877  0DD2  0020               	movlb	0	; select bank0
  4878  0DD3  0820               	movf	?_strncmp,w
  4879  0DD4  0421               	iorwf	?_strncmp+1,w
  4880  0DD5  1D03               	btfss	3,2
  4881  0DD6  2DE8               	goto	l6105
  4882                           
  4883                           ;protocol.c: 178: printf("$:GET:%d\n", value);
  4884  0DD7  301A               	movlw	low (STR_11| (0+32768))
  4885  0DD8  00AE               	movwf	printf@f
  4886  0DD9  3091               	movlw	high (STR_11| (0+32768))
  4887  0DDA  00AF               	movwf	printf@f+1
  4888  0DDB  0021               	movlb	1	; select bank1
  4889  0DDC  085E               	movf	_value^(0+128),w
  4890  0DDD  0020               	movlb	0	; select bank0
  4891  0DDE  00E7               	movwf	??_PROTOCOL_Loop
  4892  0DDF  01E8               	clrf	??_PROTOCOL_Loop+1
  4893  0DE0  0867               	movf	??_PROTOCOL_Loop,w
  4894  0DE1  00B0               	movwf	?_printf+2
  4895  0DE2  0868               	movf	??_PROTOCOL_Loop+1,w
  4896  0DE3  00B1               	movwf	?_printf+3
  4897  0DE4  3185  2519  318C   	fcall	_printf
  4898                           
  4899                           ;protocol.c: 179: } else if (!strncmp(("WDA"), (buf), 3)) {
  4900  0DE7  2CA0               	goto	l841
  4901  0DE8                     l6105:	
  4902  0DE8  3069               	movlw	low (STR_46| (0+32768))
  4903  0DE9  0020               	movlb	0	; select bank0
  4904  0DEA  00A0               	movwf	strncmp@s1
  4905  0DEB  3091               	movlw	high (STR_46| (0+32768))
  4906  0DEC  00A1               	movwf	strncmp@s1+1
  4907  0DED  3020               	movlw	low _buf
  4908  0DEE  00A2               	movwf	strncmp@s2
  4909  0DEF  3002               	movlw	high _buf
  4910  0DF0  00A3               	movwf	strncmp@s2+1
  4911  0DF1  3003               	movlw	3
  4912  0DF2  00A4               	movwf	strncmp@len
  4913  0DF3  3000               	movlw	0
  4914  0DF4  00A5               	movwf	strncmp@len+1
  4915  0DF5  3188  2002  318C   	fcall	_strncmp
  4916  0DF8  0020               	movlb	0	; select bank0
  4917  0DF9  0820               	movf	?_strncmp,w
  4918  0DFA  0421               	iorwf	?_strncmp+1,w
  4919  0DFB  1D03               	btfss	3,2
  4920  0DFC  2E0E               	goto	l6111
  4921                           
  4922                           ;protocol.c: 180: device_address = atoi(&buf[4]);
  4923  0DFD  3024               	movlw	low (_buf+4)
  4924  0DFE  00A6               	movwf	atoi@s
  4925  0DFF  3002               	movlw	high (_buf+4)
  4926  0E00  00A7               	movwf	atoi@s+1
  4927  0E01  3189  21E3  318C   	fcall	_atoi
  4928  0E04  0020               	movlb	0	; select bank0
  4929  0E05  0826               	movf	?_atoi,w
  4930  0E06  00E7               	movwf	??_PROTOCOL_Loop
  4931  0E07  0867               	movf	??_PROTOCOL_Loop,w
  4932  0E08  00EA               	movwf	PROTOCOL_Loop@device_address
  4933                           
  4934                           ;protocol.c: 181: PROTOCOL_Write_Device_Address(device_address);
  4935  0E09  086A               	movf	PROTOCOL_Loop@device_address,w
  4936  0E0A  3192  2266  318C   	fcall	_PROTOCOL_Write_Device_Address
  4937                           
  4938                           ;protocol.c: 182: } else if (!strncmp(("RDA"), (buf), 3)) {
  4939  0E0D  2CA0               	goto	l841
  4940  0E0E                     l6111:	
  4941  0E0E  3065               	movlw	low (STR_47| (0+32768))
  4942  0E0F  0020               	movlb	0	; select bank0
  4943  0E10  00A0               	movwf	strncmp@s1
  4944  0E11  3091               	movlw	high (STR_47| (0+32768))
  4945  0E12  00A1               	movwf	strncmp@s1+1
  4946  0E13  3020               	movlw	low _buf
  4947  0E14  00A2               	movwf	strncmp@s2
  4948  0E15  3002               	movlw	high _buf
  4949  0E16  00A3               	movwf	strncmp@s2+1
  4950  0E17  3003               	movlw	3
  4951  0E18  00A4               	movwf	strncmp@len
  4952  0E19  3000               	movlw	0
  4953  0E1A  00A5               	movwf	strncmp@len+1
  4954  0E1B  3188  2002  318C   	fcall	_strncmp
  4955  0E1E  0020               	movlb	0	; select bank0
  4956  0E1F  0820               	movf	?_strncmp,w
  4957  0E20  0421               	iorwf	?_strncmp+1,w
  4958  0E21  1D03               	btfss	3,2
  4959  0E22  2E39               	goto	l6117
  4960                           
  4961                           ;protocol.c: 183: device_address = PROTOCOL_Read_Device_Address();
  4962  0E23  3191  21E2  318C   	fcall	_PROTOCOL_Read_Device_Address
  4963  0E26  0020               	movlb	0	; select bank0
  4964  0E27  00E7               	movwf	??_PROTOCOL_Loop
  4965  0E28  0867               	movf	??_PROTOCOL_Loop,w
  4966  0E29  00EA               	movwf	PROTOCOL_Loop@device_address
  4967                           
  4968                           ;protocol.c: 184: printf("$:RDA:%d\n", device_address);
  4969  0E2A  30D4               	movlw	low (STR_48| (0+32768))
  4970  0E2B  00AE               	movwf	printf@f
  4971  0E2C  3090               	movlw	high (STR_48| (0+32768))
  4972  0E2D  00AF               	movwf	printf@f+1
  4973  0E2E  086A               	movf	PROTOCOL_Loop@device_address,w
  4974  0E2F  00E7               	movwf	??_PROTOCOL_Loop
  4975  0E30  01E8               	clrf	??_PROTOCOL_Loop+1
  4976  0E31  0867               	movf	??_PROTOCOL_Loop,w
  4977  0E32  00B0               	movwf	?_printf+2
  4978  0E33  0868               	movf	??_PROTOCOL_Loop+1,w
  4979  0E34  00B1               	movwf	?_printf+3
  4980  0E35  3185  2519  318C   	fcall	_printf
  4981                           
  4982                           ;protocol.c: 185: } else {
  4983  0E38  2CA0               	goto	l841
  4984  0E39                     l6117:	
  4985                           
  4986                           ;protocol.c: 186: PROTOCOL_EXT(buf);
  4987  0E39  3020               	movlw	(low (_buf| (0+512)))& (0+255)
  4988  0E3A  3192  22AB  318C   	fcall	_PROTOCOL_EXT
  4989  0E3D  2CA0               	goto	l841
  4990  0E3E                     __end_of_PROTOCOL_Loop:	
  4991                           
  4992                           	psect	text12
  4993  16D2                     __ptext12:	
  4994 ;; *************** function _tick_handler *****************
  4995 ;; Defined at:
  4996 ;;		line 306 in file "main.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;		None
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;		None
  5001 ;; Return value:  Size  Location     Type
  5002 ;;                  1    wreg      void 
  5003 ;; Registers used:
  5004 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5012 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5013 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5014 ;;Total ram usage:        1 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    8
  5017 ;; This function calls:
  5018 ;;		___lwmod
  5019 ;;		_check_plg
  5020 ;;		_exec_remote_cmd
  5021 ;;		_scan_dev
  5022 ;; This function is called by:
  5023 ;;		_main
  5024 ;;		_PROTOCOL_Loop
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           
  5029                           ;psect for function _tick_handler
  5030  16D2                     _tick_handler:	
  5031                           
  5032                           ;main.c: 307: static uint16_t t = 0;
  5033                           ;main.c: 308: static int8_t cmd_next = 0;
  5034                           ;main.c: 309: t++;
  5035                           
  5036                           ;incstack = 0
  5037                           ; Regs used in _tick_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5038  16D2  3001               	movlw	1
  5039  16D3  0022               	movlb	2	; select bank2
  5040  16D4  07B6               	addwf	tick_handler@t^(0+256),f
  5041  16D5  3000               	movlw	0
  5042  16D6  3DB7               	addwfc	(tick_handler@t+1)^(0+256),f
  5043                           
  5044                           ;main.c: 310: if (t % 60 == 0) {
  5045  16D7  303C               	movlw	60
  5046  16D8  0020               	movlb	0	; select bank0
  5047  16D9  00A8               	movwf	___lwmod@divisor
  5048  16DA  3000               	movlw	0
  5049  16DB  00A9               	movwf	___lwmod@divisor+1
  5050  16DC  0022               	movlb	2	; select bank2
  5051  16DD  0837               	movf	(tick_handler@t+1)^(0+256),w
  5052  16DE  0020               	movlb	0	; select bank0
  5053  16DF  00AB               	movwf	___lwmod@dividend+1
  5054  16E0  0022               	movlb	2	; select bank2
  5055  16E1  0836               	movf	tick_handler@t^(0+256),w
  5056  16E2  0020               	movlb	0	; select bank0
  5057  16E3  00AA               	movwf	___lwmod@dividend
  5058  16E4  3195  250D  3196   	fcall	___lwmod
  5059  16E7  0020               	movlb	0	; select bank0
  5060  16E8  0828               	movf	?___lwmod,w
  5061  16E9  0429               	iorwf	?___lwmod+1,w
  5062  16EA  1D03               	btfss	3,2
  5063  16EB  2EFF               	goto	l5739
  5064                           
  5065                           ;main.c: 311: check_plg();
  5066  16EC  3192  22BE  3196   	fcall	_check_plg
  5067                           
  5068                           ;main.c: 312: if (cmd_next > 3) cmd_next = 0;
  5069  16EF  0021               	movlb	1	; select bank1
  5070  16F0  0861               	movf	tick_handler@cmd_next^(0+128),w
  5071  16F1  3A80               	xorlw	128
  5072  16F2  3E7C               	addlw	-132
  5073  16F3  1803               	btfsc	3,0
  5074  16F4  01E1               	clrf	tick_handler@cmd_next^(0+128)
  5075                           
  5076                           ;main.c: 313: exec_remote_cmd(cmd_next);
  5077  16F5  0861               	movf	tick_handler@cmd_next^(0+128),w
  5078  16F6  3183  2329         	fcall	_exec_remote_cmd
  5079                           
  5080                           ;main.c: 314: cmd_next++;
  5081  16F8  3001               	movlw	1
  5082  16F9  0020               	movlb	0	; select bank0
  5083  16FA  00C9               	movwf	??_tick_handler
  5084  16FB  0849               	movf	??_tick_handler,w
  5085  16FC  0021               	movlb	1	; select bank1
  5086  16FD  07E1               	addwf	tick_handler@cmd_next^(0+128),f
  5087                           
  5088                           ;main.c: 315: } else if (t % 600 == 0) {
  5089  16FE  0008               	return
  5090  16FF                     l5739:	
  5091  16FF  3058               	movlw	88
  5092  1700  0020               	movlb	0	; select bank0
  5093  1701  00A8               	movwf	___lwmod@divisor
  5094  1702  3002               	movlw	2
  5095  1703  00A9               	movwf	___lwmod@divisor+1
  5096  1704  0022               	movlb	2	; select bank2
  5097  1705  0837               	movf	(tick_handler@t+1)^(0+256),w
  5098  1706  0020               	movlb	0	; select bank0
  5099  1707  00AB               	movwf	___lwmod@dividend+1
  5100  1708  0022               	movlb	2	; select bank2
  5101  1709  0836               	movf	tick_handler@t^(0+256),w
  5102  170A  0020               	movlb	0	; select bank0
  5103  170B  00AA               	movwf	___lwmod@dividend
  5104  170C  3195  250D  3196   	fcall	___lwmod
  5105  170F  0020               	movlb	0	; select bank0
  5106  1710  0828               	movf	?___lwmod,w
  5107  1711  0429               	iorwf	?___lwmod+1,w
  5108  1712  1D03               	btfss	3,2
  5109  1713  0008               	return
  5110                           
  5111                           ;main.c: 316: scan_dev();
  5112  1714  3195  25CB         	fcall	_scan_dev
  5113                           
  5114                           ;main.c: 317: t = 0;
  5115  1716  0022               	movlb	2	; select bank2
  5116  1717  01B6               	clrf	tick_handler@t^(0+256)
  5117  1718  01B7               	clrf	(tick_handler@t+1)^(0+256)
  5118  1719  0008               	return
  5119  171A                     __end_of_tick_handler:	
  5120                           
  5121                           	psect	text13
  5122  0329                     __ptext13:	
  5123 ;; *************** function _exec_remote_cmd *****************
  5124 ;; Defined at:
  5125 ;;		line 53 in file "main.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;  idx             1    wreg     unsigned char 
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;  idx             1   50[BANK1 ] unsigned char 
  5130 ;;  send_buf       50    0[BANK1 ] unsigned char [50]
  5131 ;;  buf             2   55[BANK1 ] PTR unsigned char 
  5132 ;;		 -> cmd_buf(192), 
  5133 ;;  data            1   54[BANK1 ] unsigned char 
  5134 ;;  status          1   53[BANK1 ] unsigned char 
  5135 ;;  i               1   52[BANK1 ] unsigned char 
  5136 ;;  j               1   51[BANK1 ] unsigned char 
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  1    wreg      void 
  5139 ;; Registers used:
  5140 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5147 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0
  5148 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5149 ;;      Totals:         0       5      57       0       0       0       0       0       0       0       0       0       
      +0       0
  5150 ;;Total ram usage:       62 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; Hardware stack levels required when called:    6
  5153 ;; This function calls:
  5154 ;;		___wmul
  5155 ;;		_atoi
  5156 ;;		_i2c1_read
  5157 ;;		_i2c1_write
  5158 ;;		_i2c1_write_no_data
  5159 ;;		_printf
  5160 ;;		_strncmp
  5161 ;; This function is called by:
  5162 ;;		_tick_handler
  5163 ;; This function uses a non-reentrant model
  5164 ;;
  5165                           
  5166                           
  5167                           ;psect for function _exec_remote_cmd
  5168  0329                     _exec_remote_cmd:	
  5169                           
  5170                           ;incstack = 0
  5171                           ; Regs used in _exec_remote_cmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5172                           ;exec_remote_cmd@idx stored from wreg
  5173  0329  0021               	movlb	1	; select bank1
  5174  032A  00D2               	movwf	exec_remote_cmd@idx^(0+128)
  5175                           
  5176                           ;main.c: 54: uint8_t data;
  5177                           ;main.c: 55: uint8_t i, j;
  5178                           ;main.c: 56: uint8_t status;
  5179                           ;main.c: 58: uint8_t send_buf[48 + 2];
  5180                           ;main.c: 60: char *buf = cmd_buf[idx];
  5181  032B  0852               	movf	exec_remote_cmd@idx^(0+128),w
  5182  032C  0020               	movlb	0	; select bank0
  5183  032D  00C4               	movwf	??_exec_remote_cmd
  5184  032E  01C5               	clrf	??_exec_remote_cmd+1
  5185  032F  0844               	movf	??_exec_remote_cmd,w
  5186  0330  00A0               	movwf	___wmul@multiplier
  5187  0331  0845               	movf	??_exec_remote_cmd+1,w
  5188  0332  00A1               	movwf	___wmul@multiplier+1
  5189  0333  3030               	movlw	48
  5190  0334  00A2               	movwf	___wmul@multiplicand
  5191  0335  3000               	movlw	0
  5192  0336  00A3               	movwf	___wmul@multiplicand+1
  5193  0337  3193  235A  3183   	fcall	___wmul
  5194  033A  3030               	movlw	48
  5195  033B  0020               	movlb	0	; select bank0
  5196  033C  00C6               	movwf	??_exec_remote_cmd+2
  5197  033D  3023               	movlw	35
  5198  033E  00C7               	movwf	??_exec_remote_cmd+3
  5199  033F  0820               	movf	?___wmul,w
  5200  0340  0746               	addwf	??_exec_remote_cmd+2,w
  5201  0341  0021               	movlb	1	; select bank1
  5202  0342  00D7               	movwf	exec_remote_cmd@buf^(0+128)
  5203  0343  0020               	movlb	0	; select bank0
  5204  0344  0821               	movf	?___wmul+1,w
  5205  0345  3D47               	addwfc	??_exec_remote_cmd+3,w
  5206  0346  0021               	movlb	1	; select bank1
  5207  0347  00D8               	movwf	(exec_remote_cmd@buf+1)^(0+128)
  5208                           
  5209                           ;main.c: 61: if (buf[0] == '\0') return;
  5210  0348  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5211  0349  0086               	movwf	6
  5212  034A  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5213  034B  0087               	movwf	7
  5214  034C  0801               	movf	1,w
  5215  034D  1903               	btfsc	3,2
  5216  034E  0008               	return
  5217                           
  5218                           ;main.c: 63: if (!strncmp(("WHO"), (buf), 3)) {
  5219  034F  308D               	movlw	low (STR_1| (0+32768))
  5220  0350  0020               	movlb	0	; select bank0
  5221  0351  00A0               	movwf	strncmp@s1
  5222  0352  3091               	movlw	high (STR_1| (0+32768))
  5223  0353  00A1               	movwf	strncmp@s1+1
  5224  0354  0021               	movlb	1	; select bank1
  5225  0355  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5226  0356  0020               	movlb	0	; select bank0
  5227  0357  00A3               	movwf	strncmp@s2+1
  5228  0358  0021               	movlb	1	; select bank1
  5229  0359  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5230  035A  0020               	movlb	0	; select bank0
  5231  035B  00A2               	movwf	strncmp@s2
  5232  035C  3003               	movlw	3
  5233  035D  00A4               	movwf	strncmp@len
  5234  035E  3000               	movlw	0
  5235  035F  00A5               	movwf	strncmp@len+1
  5236  0360  3188  2002  3183   	fcall	_strncmp
  5237  0363  0020               	movlb	0	; select bank0
  5238  0364  0820               	movf	?_strncmp,w
  5239  0365  0421               	iorwf	?_strncmp+1,w
  5240  0366  1D03               	btfss	3,2
  5241  0367  2B8E               	goto	l5479
  5242                           
  5243                           ;main.c: 64: status = i2c1_read(BACKPLANE_SLAVE_ADDRESS, 0x01, &data, 1);
  5244  0368  0021               	movlb	1	; select bank1
  5245  0369  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5246  036A  0020               	movlb	0	; select bank0
  5247  036B  00C4               	movwf	??_exec_remote_cmd
  5248  036C  01C5               	clrf	??_exec_remote_cmd+1
  5249  036D  0844               	movf	??_exec_remote_cmd,w
  5250  036E  00B0               	movwf	i2c1_read@dev_addr
  5251  036F  0845               	movf	??_exec_remote_cmd+1,w
  5252  0370  00B1               	movwf	i2c1_read@dev_addr+1
  5253  0371  01B2               	clrf	i2c1_read@reg_addr
  5254  0372  0AB2               	incf	i2c1_read@reg_addr,f
  5255  0373  30D6               	movlw	low exec_remote_cmd@data
  5256  0374  00B3               	movwf	i2c1_read@pbuf
  5257  0375  3000               	movlw	high exec_remote_cmd@data
  5258  0376  00B4               	movwf	i2c1_read@pbuf+1
  5259  0377  01B5               	clrf	i2c1_read@len
  5260  0378  0AB5               	incf	i2c1_read@len,f
  5261  0379  3189  2137  3183   	fcall	_i2c1_read
  5262  037C  0020               	movlb	0	; select bank0
  5263  037D  00C6               	movwf	??_exec_remote_cmd+2
  5264  037E  0846               	movf	??_exec_remote_cmd+2,w
  5265  037F  0021               	movlb	1	; select bank1
  5266  0380  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5267                           
  5268                           ;main.c: 65: if (status == 0) printf("$:WHO:%d\n", data);
  5269  0381  0855               	movf	exec_remote_cmd@status^(0+128),w
  5270  0382  1D03               	btfss	3,2
  5271  0383  2B89               	goto	l5477
  5272  0384  3010               	movlw	low (STR_2| (0+32768))
  5273  0385  0020               	movlb	0	; select bank0
  5274  0386  00AE               	movwf	printf@f
  5275  0387  3091               	movlw	high (STR_2| (0+32768))
  5276  0388  2CA1               	goto	L5
  5277  0389                     l5477:	
  5278                           
  5279                           ;main.c: 66: else printf("!\n");
  5280  0389  30AD               	movlw	low (STR_3| (0+32768))
  5281  038A  0020               	movlb	0	; select bank0
  5282  038B  00AE               	movwf	printf@f
  5283  038C  3091               	movlw	high (STR_3| (0+32768))
  5284  038D  2D0F               	goto	L6
  5285  038E                     l5479:	
  5286                           ;main.c: 67: } else if (!strncmp(("SAV"), (buf), 3)) {
  5287                           
  5288  038E  30A5               	movlw	low (STR_4| (0+32768))
  5289  038F  0020               	movlb	0	; select bank0
  5290  0390  00A0               	movwf	strncmp@s1
  5291  0391  3091               	movlw	high (STR_4| (0+32768))
  5292  0392  00A1               	movwf	strncmp@s1+1
  5293  0393  0021               	movlb	1	; select bank1
  5294  0394  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5295  0395  0020               	movlb	0	; select bank0
  5296  0396  00A3               	movwf	strncmp@s2+1
  5297  0397  0021               	movlb	1	; select bank1
  5298  0398  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5299  0399  0020               	movlb	0	; select bank0
  5300  039A  00A2               	movwf	strncmp@s2
  5301  039B  3003               	movlw	3
  5302  039C  00A4               	movwf	strncmp@len
  5303  039D  3000               	movlw	0
  5304  039E  00A5               	movwf	strncmp@len+1
  5305  039F  3188  2002  3183   	fcall	_strncmp
  5306  03A2  0020               	movlb	0	; select bank0
  5307  03A3  0820               	movf	?_strncmp,w
  5308  03A4  0421               	iorwf	?_strncmp+1,w
  5309  03A5  1D03               	btfss	3,2
  5310  03A6  2BB2               	goto	l5483
  5311                           
  5312                           ;main.c: 68: status = i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x03);
  5313  03A7  0021               	movlb	1	; select bank1
  5314  03A8  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5315  03A9  0020               	movlb	0	; select bank0
  5316  03AA  00C4               	movwf	??_exec_remote_cmd
  5317  03AB  01C5               	clrf	??_exec_remote_cmd+1
  5318  03AC  0844               	movf	??_exec_remote_cmd,w
  5319  03AD  00AE               	movwf	i2c1_write_no_data@dev_addr
  5320  03AE  0845               	movf	??_exec_remote_cmd+1,w
  5321  03AF  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5322  03B0  3003               	movlw	3
  5323  03B1  2BD5               	goto	L4
  5324  03B2                     l5483:	
  5325                           ;main.c: 69: } else if (!strncmp(("STA"), (buf), 3)) {
  5326                           
  5327  03B2  3075               	movlw	low (STR_5| (0+32768))
  5328  03B3  0020               	movlb	0	; select bank0
  5329  03B4  00A0               	movwf	strncmp@s1
  5330  03B5  3091               	movlw	high (STR_5| (0+32768))
  5331  03B6  00A1               	movwf	strncmp@s1+1
  5332  03B7  0021               	movlb	1	; select bank1
  5333  03B8  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5334  03B9  0020               	movlb	0	; select bank0
  5335  03BA  00A3               	movwf	strncmp@s2+1
  5336  03BB  0021               	movlb	1	; select bank1
  5337  03BC  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5338  03BD  0020               	movlb	0	; select bank0
  5339  03BE  00A2               	movwf	strncmp@s2
  5340  03BF  3003               	movlw	3
  5341  03C0  00A4               	movwf	strncmp@len
  5342  03C1  3000               	movlw	0
  5343  03C2  00A5               	movwf	strncmp@len+1
  5344  03C3  3188  2002  3183   	fcall	_strncmp
  5345  03C6  0020               	movlb	0	; select bank0
  5346  03C7  0820               	movf	?_strncmp,w
  5347  03C8  0421               	iorwf	?_strncmp+1,w
  5348  03C9  1D03               	btfss	3,2
  5349  03CA  2BE1               	goto	l5487
  5350                           
  5351                           ;main.c: 70: status = i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x04);
  5352  03CB  0021               	movlb	1	; select bank1
  5353  03CC  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5354  03CD  0020               	movlb	0	; select bank0
  5355  03CE  00C4               	movwf	??_exec_remote_cmd
  5356  03CF  01C5               	clrf	??_exec_remote_cmd+1
  5357  03D0  0844               	movf	??_exec_remote_cmd,w
  5358  03D1  00AE               	movwf	i2c1_write_no_data@dev_addr
  5359  03D2  0845               	movf	??_exec_remote_cmd+1,w
  5360  03D3  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5361  03D4  3004               	movlw	4
  5362  03D5                     L4:	
  5363  03D5  00C6               	movwf	??_exec_remote_cmd+2
  5364  03D6  0846               	movf	??_exec_remote_cmd+2,w
  5365  03D7  00B0               	movwf	i2c1_write_no_data@reg_addr
  5366  03D8  3194  24B6  3183   	fcall	_i2c1_write_no_data
  5367  03DB  0020               	movlb	0	; select bank0
  5368  03DC  00C7               	movwf	??_exec_remote_cmd+3
  5369  03DD  0847               	movf	??_exec_remote_cmd+3,w
  5370  03DE  0021               	movlb	1	; select bank1
  5371  03DF  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5372                           
  5373                           ;main.c: 71: } else if (!strncmp(("STP"), (buf), 3)) {
  5374  03E0  2D12               	goto	l5525
  5375  03E1                     l5487:	
  5376  03E1  3095               	movlw	low (STR_6| (0+32768))
  5377  03E2  0020               	movlb	0	; select bank0
  5378  03E3  00A0               	movwf	strncmp@s1
  5379  03E4  3091               	movlw	high (STR_6| (0+32768))
  5380  03E5  00A1               	movwf	strncmp@s1+1
  5381  03E6  0021               	movlb	1	; select bank1
  5382  03E7  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5383  03E8  0020               	movlb	0	; select bank0
  5384  03E9  00A3               	movwf	strncmp@s2+1
  5385  03EA  0021               	movlb	1	; select bank1
  5386  03EB  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5387  03EC  0020               	movlb	0	; select bank0
  5388  03ED  00A2               	movwf	strncmp@s2
  5389  03EE  3003               	movlw	3
  5390  03EF  00A4               	movwf	strncmp@len
  5391  03F0  3000               	movlw	0
  5392  03F1  00A5               	movwf	strncmp@len+1
  5393  03F2  3188  2002  3183   	fcall	_strncmp
  5394  03F5  0020               	movlb	0	; select bank0
  5395  03F6  0820               	movf	?_strncmp,w
  5396  03F7  0421               	iorwf	?_strncmp+1,w
  5397  03F8  1D03               	btfss	3,2
  5398  03F9  2C1C               	goto	l5497
  5399                           
  5400                           ;main.c: 72: status = i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x05);
  5401  03FA  0021               	movlb	1	; select bank1
  5402  03FB  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5403  03FC  0020               	movlb	0	; select bank0
  5404  03FD  00C4               	movwf	??_exec_remote_cmd
  5405  03FE  01C5               	clrf	??_exec_remote_cmd+1
  5406  03FF  0844               	movf	??_exec_remote_cmd,w
  5407  0400  00AE               	movwf	i2c1_write_no_data@dev_addr
  5408  0401  0845               	movf	??_exec_remote_cmd+1,w
  5409  0402  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5410  0403  3005               	movlw	5
  5411  0404  00C6               	movwf	??_exec_remote_cmd+2
  5412  0405  0846               	movf	??_exec_remote_cmd+2,w
  5413  0406  00B0               	movwf	i2c1_write_no_data@reg_addr
  5414  0407  3194  24B6  3183   	fcall	_i2c1_write_no_data
  5415  040A  0020               	movlb	0	; select bank0
  5416  040B  00C7               	movwf	??_exec_remote_cmd+3
  5417  040C  0847               	movf	??_exec_remote_cmd+3,w
  5418  040D  0021               	movlb	1	; select bank1
  5419  040E  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5420                           
  5421                           ;main.c: 73: if (status == 0) printf("*:STP:ACK\n");
  5422  040F  0855               	movf	exec_remote_cmd@status^(0+128),w
  5423  0410  1D03               	btfss	3,2
  5424  0411  2C17               	goto	l5495
  5425  0412  30C9               	movlw	low (STR_7| (0+32768))
  5426  0413  0020               	movlb	0	; select bank0
  5427  0414  00AE               	movwf	printf@f
  5428  0415  3090               	movlw	high (STR_7| (0+32768))
  5429  0416  2D0F               	goto	L6
  5430  0417                     l5495:	
  5431                           
  5432                           ;main.c: 74: else printf("!:STP:NACK\n");
  5433  0417  30BD               	movlw	low (STR_8| (0+32768))
  5434  0418  0020               	movlb	0	; select bank0
  5435  0419  00AE               	movwf	printf@f
  5436  041A  3090               	movlw	high (STR_8| (0+32768))
  5437  041B  2D0F               	goto	L6
  5438  041C                     l5497:	
  5439                           ;main.c: 75: } else if (!strncmp(("SET"), (buf), 3)) {
  5440                           
  5441  041C  30A1               	movlw	low (STR_9| (0+32768))
  5442  041D  0020               	movlb	0	; select bank0
  5443  041E  00A0               	movwf	strncmp@s1
  5444  041F  3091               	movlw	high (STR_9| (0+32768))
  5445  0420  00A1               	movwf	strncmp@s1+1
  5446  0421  0021               	movlb	1	; select bank1
  5447  0422  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5448  0423  0020               	movlb	0	; select bank0
  5449  0424  00A3               	movwf	strncmp@s2+1
  5450  0425  0021               	movlb	1	; select bank1
  5451  0426  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5452  0427  0020               	movlb	0	; select bank0
  5453  0428  00A2               	movwf	strncmp@s2
  5454  0429  3003               	movlw	3
  5455  042A  00A4               	movwf	strncmp@len
  5456  042B  3000               	movlw	0
  5457  042C  00A5               	movwf	strncmp@len+1
  5458  042D  3188  2002  3183   	fcall	_strncmp
  5459  0430  0020               	movlb	0	; select bank0
  5460  0431  0820               	movf	?_strncmp,w
  5461  0432  0421               	iorwf	?_strncmp+1,w
  5462  0433  1D03               	btfss	3,2
  5463  0434  2C6E               	goto	l5501
  5464                           
  5465                           ;main.c: 76: data = atoi(&buf[4]);
  5466  0435  0021               	movlb	1	; select bank1
  5467  0436  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5468  0437  3E04               	addlw	4
  5469  0438  0020               	movlb	0	; select bank0
  5470  0439  00C4               	movwf	??_exec_remote_cmd
  5471  043A  3000               	movlw	0
  5472  043B  0021               	movlb	1	; select bank1
  5473  043C  3D58               	addwfc	(exec_remote_cmd@buf+1)^(0+128),w
  5474  043D  0020               	movlb	0	; select bank0
  5475  043E  00C5               	movwf	??_exec_remote_cmd+1
  5476  043F  0844               	movf	??_exec_remote_cmd,w
  5477  0440  00A6               	movwf	atoi@s
  5478  0441  0845               	movf	??_exec_remote_cmd+1,w
  5479  0442  00A7               	movwf	atoi@s+1
  5480  0443  3189  21E3  3183   	fcall	_atoi
  5481  0446  0020               	movlb	0	; select bank0
  5482  0447  0826               	movf	?_atoi,w
  5483  0448  00C6               	movwf	??_exec_remote_cmd+2
  5484  0449  0846               	movf	??_exec_remote_cmd+2,w
  5485  044A  0021               	movlb	1	; select bank1
  5486  044B  00D6               	movwf	exec_remote_cmd@data^(0+128)
  5487                           
  5488                           ;main.c: 77: i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, 0x08);
  5489  044C  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5490  044D  0020               	movlb	0	; select bank0
  5491  044E  00C4               	movwf	??_exec_remote_cmd
  5492  044F  01C5               	clrf	??_exec_remote_cmd+1
  5493  0450  0844               	movf	??_exec_remote_cmd,w
  5494  0451  00AE               	movwf	i2c1_write_no_data@dev_addr
  5495  0452  0845               	movf	??_exec_remote_cmd+1,w
  5496  0453  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5497  0454  3008               	movlw	8
  5498  0455  00C6               	movwf	??_exec_remote_cmd+2
  5499  0456  0846               	movf	??_exec_remote_cmd+2,w
  5500  0457  00B0               	movwf	i2c1_write_no_data@reg_addr
  5501  0458  3194  24B6  3183   	fcall	_i2c1_write_no_data
  5502                           
  5503                           ;main.c: 78: i2c1_write_no_data(BACKPLANE_SLAVE_ADDRESS, data);
  5504  045B  0021               	movlb	1	; select bank1
  5505  045C  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5506  045D  0020               	movlb	0	; select bank0
  5507  045E  00C4               	movwf	??_exec_remote_cmd
  5508  045F  01C5               	clrf	??_exec_remote_cmd+1
  5509  0460  0844               	movf	??_exec_remote_cmd,w
  5510  0461  00AE               	movwf	i2c1_write_no_data@dev_addr
  5511  0462  0845               	movf	??_exec_remote_cmd+1,w
  5512  0463  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5513  0464  0021               	movlb	1	; select bank1
  5514  0465  0856               	movf	exec_remote_cmd@data^(0+128),w
  5515  0466  0020               	movlb	0	; select bank0
  5516  0467  00C6               	movwf	??_exec_remote_cmd+2
  5517  0468  0846               	movf	??_exec_remote_cmd+2,w
  5518  0469  00B0               	movwf	i2c1_write_no_data@reg_addr
  5519  046A  3194  24B6  3183   	fcall	_i2c1_write_no_data
  5520                           
  5521                           ;main.c: 79: } else if (!strncmp(("GET"), (buf), 3)) {
  5522  046D  2D12               	goto	l5525
  5523  046E                     l5501:	
  5524  046E  309D               	movlw	low (STR_10| (0+32768))
  5525  046F  0020               	movlb	0	; select bank0
  5526  0470  00A0               	movwf	strncmp@s1
  5527  0471  3091               	movlw	high (STR_10| (0+32768))
  5528  0472  00A1               	movwf	strncmp@s1+1
  5529  0473  0021               	movlb	1	; select bank1
  5530  0474  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5531  0475  0020               	movlb	0	; select bank0
  5532  0476  00A3               	movwf	strncmp@s2+1
  5533  0477  0021               	movlb	1	; select bank1
  5534  0478  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5535  0479  0020               	movlb	0	; select bank0
  5536  047A  00A2               	movwf	strncmp@s2
  5537  047B  3003               	movlw	3
  5538  047C  00A4               	movwf	strncmp@len
  5539  047D  3000               	movlw	0
  5540  047E  00A5               	movwf	strncmp@len+1
  5541  047F  3188  2002  3183   	fcall	_strncmp
  5542  0482  0020               	movlb	0	; select bank0
  5543  0483  0820               	movf	?_strncmp,w
  5544  0484  0421               	iorwf	?_strncmp+1,w
  5545  0485  1D03               	btfss	3,2
  5546  0486  2CAC               	goto	l5507
  5547                           
  5548                           ;main.c: 80: i2c1_read(BACKPLANE_SLAVE_ADDRESS, 0x09, &data, 1);
  5549  0487  0021               	movlb	1	; select bank1
  5550  0488  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5551  0489  0020               	movlb	0	; select bank0
  5552  048A  00C4               	movwf	??_exec_remote_cmd
  5553  048B  01C5               	clrf	??_exec_remote_cmd+1
  5554  048C  0844               	movf	??_exec_remote_cmd,w
  5555  048D  00B0               	movwf	i2c1_read@dev_addr
  5556  048E  0845               	movf	??_exec_remote_cmd+1,w
  5557  048F  00B1               	movwf	i2c1_read@dev_addr+1
  5558  0490  3009               	movlw	9
  5559  0491  00C6               	movwf	??_exec_remote_cmd+2
  5560  0492  0846               	movf	??_exec_remote_cmd+2,w
  5561  0493  00B2               	movwf	i2c1_read@reg_addr
  5562  0494  30D6               	movlw	low exec_remote_cmd@data
  5563  0495  00B3               	movwf	i2c1_read@pbuf
  5564  0496  3000               	movlw	high exec_remote_cmd@data
  5565  0497  00B4               	movwf	i2c1_read@pbuf+1
  5566  0498  01B5               	clrf	i2c1_read@len
  5567  0499  0AB5               	incf	i2c1_read@len,f
  5568  049A  3189  2137  3183   	fcall	_i2c1_read
  5569                           
  5570                           ;main.c: 81: printf("$:GET:%d\n", data);
  5571  049D  301A               	movlw	low (STR_11| (0+32768))
  5572  049E  0020               	movlb	0	; select bank0
  5573  049F  00AE               	movwf	printf@f
  5574  04A0  3091               	movlw	high (STR_11| (0+32768))
  5575  04A1                     L5:	
  5576  04A1  00AF               	movwf	printf@f+1
  5577  04A2  0021               	movlb	1	; select bank1
  5578  04A3  0856               	movf	exec_remote_cmd@data^(0+128),w
  5579  04A4  0020               	movlb	0	; select bank0
  5580  04A5  00C4               	movwf	??_exec_remote_cmd
  5581  04A6  01C5               	clrf	??_exec_remote_cmd+1
  5582  04A7  0844               	movf	??_exec_remote_cmd,w
  5583  04A8  00B0               	movwf	?_printf+2
  5584  04A9  0845               	movf	??_exec_remote_cmd+1,w
  5585  04AA  00B1               	movwf	?_printf+3
  5586  04AB  2D10               	goto	L3
  5587  04AC                     l5507:	
  5588                           ;main.c: 83: } else {
  5589                           
  5590                           
  5591                           ;main.c: 84: i = 0;
  5592  04AC  0021               	movlb	1	; select bank1
  5593  04AD  01D4               	clrf	exec_remote_cmd@i^(0+128)
  5594                           
  5595                           ;main.c: 85: j = 2;
  5596  04AE  3002               	movlw	2
  5597  04AF  0020               	movlb	0	; select bank0
  5598  04B0  00C4               	movwf	??_exec_remote_cmd
  5599  04B1  0844               	movf	??_exec_remote_cmd,w
  5600  04B2  0021               	movlb	1	; select bank1
  5601  04B3  00D3               	movwf	exec_remote_cmd@j^(0+128)
  5602  04B4                     l5511:	
  5603                           ;main.c: 86: do {
  5604                           
  5605                           
  5606                           ;main.c: 87: send_buf[j++] = (uint8_t)buf[i];
  5607  04B4  0854               	movf	exec_remote_cmd@i^(0+128),w
  5608  04B5  0020               	movlb	0	; select bank0
  5609  04B6  00C4               	movwf	??_exec_remote_cmd
  5610  04B7  01C5               	clrf	??_exec_remote_cmd+1
  5611  04B8  0844               	movf	??_exec_remote_cmd,w
  5612  04B9  0021               	movlb	1	; select bank1
  5613  04BA  0757               	addwf	exec_remote_cmd@buf^(0+128),w
  5614  04BB  0086               	movwf	6
  5615  04BC  0020               	movlb	0	; select bank0
  5616  04BD  0845               	movf	??_exec_remote_cmd+1,w
  5617  04BE  0021               	movlb	1	; select bank1
  5618  04BF  3D58               	addwfc	(exec_remote_cmd@buf+1)^(0+128),w
  5619  04C0  0087               	movwf	7
  5620  04C1  0801               	movf	1,w
  5621  04C2  0020               	movlb	0	; select bank0
  5622  04C3  00C6               	movwf	??_exec_remote_cmd+2
  5623  04C4  0021               	movlb	1	; select bank1
  5624  04C5  0853               	movf	exec_remote_cmd@j^(0+128),w
  5625  04C6  3EA0               	addlw	(low (exec_remote_cmd@send_buf| 0))& (0+255)
  5626  04C7  0086               	movwf	6
  5627  04C8  0187               	clrf	7
  5628  04C9  0020               	movlb	0	; select bank0
  5629  04CA  0846               	movf	??_exec_remote_cmd+2,w
  5630  04CB  0081               	movwf	1
  5631  04CC  3001               	movlw	1
  5632  04CD  00C4               	movwf	??_exec_remote_cmd
  5633  04CE  0844               	movf	??_exec_remote_cmd,w
  5634  04CF  0021               	movlb	1	; select bank1
  5635  04D0  07D3               	addwf	exec_remote_cmd@j^(0+128),f
  5636                           
  5637                           ;main.c: 88: } while (buf[i++] != '\0');
  5638  04D1  0854               	movf	exec_remote_cmd@i^(0+128),w
  5639  04D2  0AD4               	incf	exec_remote_cmd@i^(0+128),f
  5640  04D3  0020               	movlb	0	; select bank0
  5641  04D4  00C4               	movwf	??_exec_remote_cmd
  5642  04D5  01C5               	clrf	??_exec_remote_cmd+1
  5643  04D6  0844               	movf	??_exec_remote_cmd,w
  5644  04D7  0021               	movlb	1	; select bank1
  5645  04D8  0757               	addwf	exec_remote_cmd@buf^(0+128),w
  5646  04D9  0086               	movwf	6
  5647  04DA  0020               	movlb	0	; select bank0
  5648  04DB  0845               	movf	??_exec_remote_cmd+1,w
  5649  04DC  0021               	movlb	1	; select bank1
  5650  04DD  3D58               	addwfc	(exec_remote_cmd@buf+1)^(0+128),w
  5651  04DE  0087               	movwf	7
  5652  04DF  0801               	movf	1,w
  5653  04E0  1D03               	btfss	3,2
  5654  04E1  2CB4               	goto	l5511
  5655                           
  5656                           ;main.c: 89: send_buf[0] = 0x0a;
  5657  04E2  300A               	movlw	10
  5658  04E3  0020               	movlb	0	; select bank0
  5659  04E4  00C4               	movwf	??_exec_remote_cmd
  5660  04E5  0844               	movf	??_exec_remote_cmd,w
  5661  04E6  0021               	movlb	1	; select bank1
  5662  04E7  00A0               	movwf	exec_remote_cmd@send_buf^(0+128)
  5663                           
  5664                           ;main.c: 90: send_buf[1] = i;
  5665  04E8  0854               	movf	exec_remote_cmd@i^(0+128),w
  5666  04E9  0020               	movlb	0	; select bank0
  5667  04EA  00C4               	movwf	??_exec_remote_cmd
  5668  04EB  0844               	movf	??_exec_remote_cmd,w
  5669  04EC  0021               	movlb	1	; select bank1
  5670  04ED  00A1               	movwf	(exec_remote_cmd@send_buf^(0+128)+1)
  5671                           
  5672                           ;main.c: 91: status = i2c1_write(BACKPLANE_SLAVE_ADDRESS, send_buf, j);
  5673  04EE  086E               	movf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  5674  04EF  0020               	movlb	0	; select bank0
  5675  04F0  00C4               	movwf	??_exec_remote_cmd
  5676  04F1  01C5               	clrf	??_exec_remote_cmd+1
  5677  04F2  0844               	movf	??_exec_remote_cmd,w
  5678  04F3  00AE               	movwf	i2c1_write@dev_addr
  5679  04F4  0845               	movf	??_exec_remote_cmd+1,w
  5680  04F5  00AF               	movwf	i2c1_write@dev_addr+1
  5681  04F6  30A0               	movlw	(low (exec_remote_cmd@send_buf| 0))& (0+255)
  5682  04F7  00C6               	movwf	??_exec_remote_cmd+2
  5683  04F8  0846               	movf	??_exec_remote_cmd+2,w
  5684  04F9  00B0               	movwf	i2c1_write@pbuf
  5685  04FA  0021               	movlb	1	; select bank1
  5686  04FB  0853               	movf	exec_remote_cmd@j^(0+128),w
  5687  04FC  0020               	movlb	0	; select bank0
  5688  04FD  00C7               	movwf	??_exec_remote_cmd+3
  5689  04FE  0847               	movf	??_exec_remote_cmd+3,w
  5690  04FF  00B1               	movwf	i2c1_write@len
  5691  0500  3194  2464  3183   	fcall	_i2c1_write
  5692  0503  0020               	movlb	0	; select bank0
  5693  0504  00C8               	movwf	??_exec_remote_cmd+4
  5694  0505  0848               	movf	??_exec_remote_cmd+4,w
  5695  0506  0021               	movlb	1	; select bank1
  5696  0507  00D5               	movwf	exec_remote_cmd@status^(0+128)
  5697                           
  5698                           ;main.c: 92: if (status != 0) printf("!:NO ACK FROM I2C SLAVE\n");
  5699  0508  0855               	movf	exec_remote_cmd@status^(0+128),w
  5700  0509  1903               	btfsc	3,2
  5701  050A  2D12               	goto	l5525
  5702  050B  3059               	movlw	low (STR_12| (0+32768))
  5703  050C  0020               	movlb	0	; select bank0
  5704  050D  00AE               	movwf	printf@f
  5705  050E  3090               	movlw	high (STR_12| (0+32768))
  5706  050F                     L6:	
  5707  050F  00AF               	movwf	printf@f+1
  5708  0510                     L3:	
  5709  0510  3185  2519         	fcall	_printf
  5710  0512                     l5525:	
  5711                           
  5712                           ;main.c: 94: }
  5713                           ;main.c: 95: buf[0] = '\0';
  5714  0512  0021               	movlb	1	; select bank1
  5715  0513  0857               	movf	exec_remote_cmd@buf^(0+128),w
  5716  0514  0086               	movwf	6
  5717  0515  0858               	movf	(exec_remote_cmd@buf+1)^(0+128),w
  5718  0516  0087               	movwf	7
  5719  0517  0181               	clrf	1
  5720  0518  0008               	return
  5721  0519                     __end_of_exec_remote_cmd:	
  5722                           
  5723                           	psect	text14
  5724  1464                     __ptext14:	
  5725 ;; *************** function _i2c1_write *****************
  5726 ;; Defined at:
  5727 ;;		line 8 in file "i2c1_util.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;  dev_addr        2   14[BANK0 ] unsigned int 
  5730 ;;  pbuf            1   16[BANK0 ] PTR unsigned char 
  5731 ;;		 -> exec_remote_cmd@send_buf(50), 
  5732 ;;  len             1   17[BANK0 ] unsigned char 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;  status          1   21[BANK0 ] enum E3078
  5735 ;;  write_status    1   20[BANK0 ] unsigned char 
  5736 ;; Return value:  Size  Location     Type
  5737 ;;                  1    wreg      unsigned char 
  5738 ;; Registers used:
  5739 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5740 ;; Tracked objects:
  5741 ;;		On entry : 0/0
  5742 ;;		On exit  : 0/0
  5743 ;;		Unchanged: 0/0
  5744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5745 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5746 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5747 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5748 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5749 ;;Total ram usage:        8 bytes
  5750 ;; Hardware stack levels used:    1
  5751 ;; Hardware stack levels required when called:    5
  5752 ;; This function calls:
  5753 ;;		_I2C1_MasterWrite
  5754 ;; This function is called by:
  5755 ;;		_exec_remote_cmd
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           
  5760                           ;psect for function _i2c1_write
  5761  1464                     _i2c1_write:	
  5762                           
  5763                           ;i2c1_util.c: 10: I2C1_MESSAGE_STATUS status;
  5764                           ;i2c1_util.c: 11: uint8_t write_status;
  5765                           ;i2c1_util.c: 12: _delay((unsigned long)((100)*(32000000/4000000.0)));
  5766                           
  5767                           ;incstack = 0
  5768                           ; Regs used in _i2c1_write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5769  1464  30A0               	movlw	160
  5770  1465                     u7367:	
  5771  1465  3200               	nop2
  5772  1466  0B89               	decfsz	9,f
  5773  1467  2C65               	goto	u7367
  5774                           
  5775                           ;i2c1_util.c: 13: I2C1_MasterWrite(pbuf, len, dev_addr, &status);
  5776  1468  0020               	movlb	0	; select bank0
  5777  1469  0831               	movf	i2c1_write@len,w
  5778  146A  00B2               	movwf	??_i2c1_write
  5779  146B  0832               	movf	??_i2c1_write,w
  5780  146C  00A7               	movwf	I2C1_MasterWrite@length
  5781  146D  082F               	movf	i2c1_write@dev_addr+1,w
  5782  146E  00A9               	movwf	I2C1_MasterWrite@address+1
  5783  146F  082E               	movf	i2c1_write@dev_addr,w
  5784  1470  00A8               	movwf	I2C1_MasterWrite@address
  5785  1471  3035               	movlw	(low (i2c1_write@status| 0))& (0+255)
  5786  1472  00B3               	movwf	??_i2c1_write+1
  5787  1473  0833               	movf	??_i2c1_write+1,w
  5788  1474  00AA               	movwf	I2C1_MasterWrite@pflag
  5789  1475  0830               	movf	i2c1_write@pbuf,w
  5790  1476  3194  248C  3194   	fcall	_I2C1_MasterWrite
  5791  1479                     l5395:	
  5792                           ;i2c1_util.c: 14: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  5793                           
  5794  1479  3002               	movlw	2
  5795  147A  0020               	movlb	0	; select bank0
  5796  147B  0635               	xorwf	i2c1_write@status,w
  5797  147C  1D03               	btfss	3,2
  5798  147D  2C83               	goto	l5397
  5799  147E  30A0               	movlw	160
  5800  147F                     u7377:	
  5801  147F  3200               	nop2
  5802  1480  0B89               	decfsz	9,f
  5803  1481  2C7F               	goto	u7377
  5804  1482  2C79               	goto	l5395
  5805  1483                     l5397:	
  5806                           
  5807                           ;i2c1_util.c: 15: if (status == I2C1_MESSAGE_COMPLETE) {
  5808  1483  0835               	movf	i2c1_write@status,w
  5809  1484  1D03               	btfss	3,2
  5810  1485  2C88               	goto	l619
  5811                           
  5812                           ;i2c1_util.c: 16: write_status = 0;
  5813  1486  01B4               	clrf	i2c1_write@write_status
  5814                           
  5815                           ;i2c1_util.c: 17: } else {
  5816  1487  2C8A               	goto	l5401
  5817  1488                     l619:	
  5818                           
  5819                           ;i2c1_util.c: 18: write_status = 1;
  5820  1488  01B4               	clrf	i2c1_write@write_status
  5821  1489  0AB4               	incf	i2c1_write@write_status,f
  5822  148A                     l5401:	
  5823                           
  5824                           ;i2c1_util.c: 19: }
  5825                           ;i2c1_util.c: 20: return write_status;
  5826  148A  0834               	movf	i2c1_write@write_status,w
  5827  148B  0008               	return
  5828  148C                     __end_of_i2c1_write:	
  5829                           
  5830                           	psect	text15
  5831  12BE                     __ptext15:	
  5832 ;; *************** function _check_plg *****************
  5833 ;; Defined at:
  5834 ;;		line 197 in file "main.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;		None
  5837 ;; Auto vars:     Size  Location     Type
  5838 ;;  status          1   34[BANK0 ] unsigned char 
  5839 ;; Return value:  Size  Location     Type
  5840 ;;                  1    wreg      void 
  5841 ;; Registers used:
  5842 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5843 ;; Tracked objects:
  5844 ;;		On entry : 0/0
  5845 ;;		On exit  : 0/0
  5846 ;;		Unchanged: 0/0
  5847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5850 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5851 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5852 ;;Total ram usage:        3 bytes
  5853 ;; Hardware stack levels used:    1
  5854 ;; Hardware stack levels required when called:    7
  5855 ;; This function calls:
  5856 ;;		_i2c1_write_no_data
  5857 ;;		_scan_dev
  5858 ;; This function is called by:
  5859 ;;		_tick_handler
  5860 ;; This function uses a non-reentrant model
  5861 ;;
  5862                           
  5863                           
  5864                           ;psect for function _check_plg
  5865  12BE                     _check_plg:	
  5866                           
  5867                           ;main.c: 198: uint8_t status = i2c1_write_no_data(0x00, 0x02);
  5868                           
  5869                           ;incstack = 0
  5870                           ; Regs used in _check_plg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5871  12BE  3000               	movlw	0
  5872  12BF  0020               	movlb	0	; select bank0
  5873  12C0  00AE               	movwf	i2c1_write_no_data@dev_addr
  5874  12C1  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  5875  12C2  3002               	movlw	2
  5876  12C3  00C0               	movwf	??_check_plg
  5877  12C4  0840               	movf	??_check_plg,w
  5878  12C5  00B0               	movwf	i2c1_write_no_data@reg_addr
  5879  12C6  3194  24B6  3192   	fcall	_i2c1_write_no_data
  5880  12C9  0020               	movlb	0	; select bank0
  5881  12CA  00C1               	movwf	??_check_plg+1
  5882  12CB  0841               	movf	??_check_plg+1,w
  5883  12CC  00C2               	movwf	check_plg@status
  5884                           
  5885                           ;main.c: 199: if (status == 0) scan_dev();
  5886  12CD  0842               	movf	check_plg@status,w
  5887  12CE  1D03               	btfss	3,2
  5888  12CF  0008               	return
  5889  12D0  3195  25CB         	fcall	_scan_dev
  5890  12D2  0008               	return
  5891  12D3                     __end_of_check_plg:	
  5892                           
  5893                           	psect	text16
  5894  15CB                     __ptext16:	
  5895 ;; *************** function _scan_dev *****************
  5896 ;; Defined at:
  5897 ;;		line 181 in file "main.c"
  5898 ;; Parameters:    Size  Location     Type
  5899 ;;		None
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;  dev_addr        1   31[BANK0 ] unsigned char 
  5902 ;;  status          1   30[BANK0 ] unsigned char 
  5903 ;; Return value:  Size  Location     Type
  5904 ;;                  1    wreg      void 
  5905 ;; Registers used:
  5906 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5907 ;; Tracked objects:
  5908 ;;		On entry : 0/0
  5909 ;;		On exit  : 0/0
  5910 ;;		Unchanged: 0/0
  5911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5913 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5914 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5915 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5916 ;;Total ram usage:        5 bytes
  5917 ;; Hardware stack levels used:    1
  5918 ;; Hardware stack levels required when called:    6
  5919 ;; This function calls:
  5920 ;;		_add_dev
  5921 ;;		_del_dev
  5922 ;;		_i2c1_read
  5923 ;; This function is called by:
  5924 ;;		_check_plg
  5925 ;;		_tick_handler
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           
  5930                           ;psect for function _scan_dev
  5931  15CB                     _scan_dev:	
  5932                           
  5933                           ;main.c: 182: uint8_t dev_addr, status;
  5934                           ;main.c: 183: for (dev_addr=0x10; dev_addr<=0x20; dev_addr++) {
  5935                           
  5936                           ;incstack = 0
  5937                           ; Regs used in _scan_dev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5938  15CB  3010               	movlw	16
  5939  15CC  0020               	movlb	0	; select bank0
  5940  15CD  00BB               	movwf	??_scan_dev
  5941  15CE  083B               	movf	??_scan_dev,w
  5942  15CF  00BF               	movwf	scan_dev@dev_addr
  5943  15D0                     L7:	
  5944  15D0  3021               	movlw	33
  5945  15D1  023F               	subwf	scan_dev@dev_addr,w
  5946  15D2  1803               	btfsc	3,0
  5947  15D3  0008               	return
  5948                           
  5949                           ;main.c: 184: status = i2c1_read(dev_addr, 0x01, &read_buf[0], 1);
  5950  15D4  083F               	movf	scan_dev@dev_addr,w
  5951  15D5  00BB               	movwf	??_scan_dev
  5952  15D6  01BC               	clrf	??_scan_dev+1
  5953  15D7  083B               	movf	??_scan_dev,w
  5954  15D8  00B0               	movwf	i2c1_read@dev_addr
  5955  15D9  083C               	movf	??_scan_dev+1,w
  5956  15DA  00B1               	movwf	i2c1_read@dev_addr+1
  5957  15DB  01B2               	clrf	i2c1_read@reg_addr
  5958  15DC  0AB2               	incf	i2c1_read@reg_addr,f
  5959  15DD  30BC               	movlw	low _read_buf
  5960  15DE  00B3               	movwf	i2c1_read@pbuf
  5961  15DF  3001               	movlw	high _read_buf
  5962  15E0  00B4               	movwf	i2c1_read@pbuf+1
  5963  15E1  01B5               	clrf	i2c1_read@len
  5964  15E2  0AB5               	incf	i2c1_read@len,f
  5965  15E3  3189  2137  3195   	fcall	_i2c1_read
  5966  15E6  0020               	movlb	0	; select bank0
  5967  15E7  00BD               	movwf	??_scan_dev+2
  5968  15E8  083D               	movf	??_scan_dev+2,w
  5969  15E9  00BE               	movwf	scan_dev@status
  5970                           
  5971                           ;main.c: 186: if (status == 0 && dev_addr == read_buf[0]) {
  5972  15EA  083E               	movf	scan_dev@status,w
  5973  15EB  1D03               	btfss	3,2
  5974  15EC  2DF8               	goto	l5417
  5975  15ED  0023               	movlb	3	; select bank3
  5976  15EE  083C               	movf	_read_buf^(0+384),w
  5977  15EF  0020               	movlb	0	; select bank0
  5978  15F0  063F               	xorwf	scan_dev@dev_addr,w
  5979  15F1  1D03               	skipz
  5980  15F2  2DF8               	goto	l5417
  5981                           
  5982                           ;main.c: 187: add_dev(dev_addr);
  5983  15F3  083F               	movf	scan_dev@dev_addr,w
  5984  15F4  3197  27B2  3195   	fcall	_add_dev
  5985                           
  5986                           ;main.c: 188: } else {
  5987  15F7  2DFD               	goto	l5419
  5988  15F8                     l5417:	
  5989                           
  5990                           ;main.c: 189: del_dev(dev_addr);
  5991  15F8  0020               	movlb	0	; select bank0
  5992  15F9  083F               	movf	scan_dev@dev_addr,w
  5993  15FA  3197  2765  3195   	fcall	_del_dev
  5994  15FD                     l5419:	
  5995  15FD  3001               	movlw	1
  5996  15FE  0020               	movlb	0	; select bank0
  5997  15FF  00BB               	movwf	??_scan_dev
  5998  1600  083B               	movf	??_scan_dev,w
  5999  1601  07BF               	addwf	scan_dev@dev_addr,f
  6000  1602  2DD0               	goto	L7
  6001  1603                     __end_of_scan_dev:	
  6002                           
  6003                           	psect	text17
  6004  1765                     __ptext17:	
  6005 ;; *************** function _del_dev *****************
  6006 ;; Defined at:
  6007 ;;		line 133 in file "main.c"
  6008 ;; Parameters:    Size  Location     Type
  6009 ;;  dev_addr        1    wreg     unsigned char 
  6010 ;; Auto vars:     Size  Location     Type
  6011 ;;  dev_addr        1   16[BANK0 ] unsigned char 
  6012 ;;  y               1   15[BANK0 ] unsigned char 
  6013 ;;  new_map         1   14[BANK0 ] unsigned char 
  6014 ;;  old_map         1   13[BANK0 ] unsigned char 
  6015 ;;  x               1   12[BANK0 ] unsigned char 
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  1    wreg      void 
  6018 ;; Registers used:
  6019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6026 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6027 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6028 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6029 ;;Total ram usage:        8 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:    4
  6032 ;; This function calls:
  6033 ;;		___awdiv
  6034 ;; This function is called by:
  6035 ;;		_scan_dev
  6036 ;; This function uses a non-reentrant model
  6037 ;;
  6038                           
  6039                           
  6040                           ;psect for function _del_dev
  6041  1765                     _del_dev:	
  6042                           
  6043                           ;incstack = 0
  6044                           ; Regs used in _del_dev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6045                           ;del_dev@dev_addr stored from wreg
  6046  1765  0020               	movlb	0	; select bank0
  6047  1766  00B0               	movwf	del_dev@dev_addr
  6048                           
  6049                           ;main.c: 134: uint8_t x, y;
  6050                           ;main.c: 135: uint8_t new_map, old_map;
  6051                           ;main.c: 136: if (dev_addr >= 1 && dev_addr <= 0x20) {
  6052  1767  0830               	movf	del_dev@dev_addr,w
  6053  1768  1903               	btfsc	3,2
  6054  1769  0008               	return
  6055  176A  3021               	movlw	33
  6056  176B  0230               	subwf	del_dev@dev_addr,w
  6057  176C  1803               	skipnc
  6058  176D  0008               	return
  6059                           
  6060                           ;main.c: 137: y = dev_addr / 8;
  6061  176E  3008               	movlw	8
  6062  176F  00A0               	movwf	___awdiv@divisor
  6063  1770  3000               	movlw	0
  6064  1771  00A1               	movwf	___awdiv@divisor+1
  6065  1772  0830               	movf	del_dev@dev_addr,w
  6066  1773  00A9               	movwf	??_del_dev
  6067  1774  01AA               	clrf	??_del_dev+1
  6068  1775  0829               	movf	??_del_dev,w
  6069  1776  00A2               	movwf	___awdiv@dividend
  6070  1777  082A               	movf	??_del_dev+1,w
  6071  1778  00A3               	movwf	___awdiv@dividend+1
  6072  1779  3188  20E5  3197   	fcall	___awdiv
  6073  177C  0020               	movlb	0	; select bank0
  6074  177D  0820               	movf	?___awdiv,w
  6075  177E  00AB               	movwf	??_del_dev+2
  6076  177F  082B               	movf	??_del_dev+2,w
  6077  1780  00AF               	movwf	del_dev@y
  6078                           
  6079                           ;main.c: 138: x = dev_addr % 8;
  6080  1781  0830               	movf	del_dev@dev_addr,w
  6081  1782  3907               	andlw	7
  6082  1783  00A9               	movwf	??_del_dev
  6083  1784  0829               	movf	??_del_dev,w
  6084  1785  00AC               	movwf	del_dev@x
  6085                           
  6086                           ;main.c: 139: old_map = dev_map[y];
  6087  1786  082F               	movf	del_dev@y,w
  6088  1787  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6089  1788  0086               	movwf	6
  6090  1789  3001               	movlw	1	; select bank2/3
  6091  178A  0087               	movwf	7
  6092  178B  0801               	movf	1,w
  6093  178C  00A9               	movwf	??_del_dev
  6094  178D  0829               	movf	??_del_dev,w
  6095  178E  00AD               	movwf	del_dev@old_map
  6096                           
  6097                           ;main.c: 140: new_map = dev_map[y] & ~(0x01 << x);
  6098  178F  082F               	movf	del_dev@y,w
  6099  1790  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6100  1791  0086               	movwf	6
  6101  1792  3001               	movlw	1	; select bank2/3
  6102  1793  0087               	movwf	7
  6103  1794  3001               	movlw	1
  6104  1795  00A9               	movwf	??_del_dev
  6105  1796  0A2C               	incf	del_dev@x,w
  6106  1797  2F99               	goto	u5894
  6107  1798                     u5895:	
  6108  1798  35A9               	lslf	??_del_dev,f
  6109  1799                     u5894:	
  6110  1799  0B89               	decfsz	9,f
  6111  179A  2F98               	goto	u5895
  6112  179B  0829               	movf	??_del_dev,w
  6113  179C  3AFF               	xorlw	255
  6114  179D  0501               	andwf	1,w
  6115  179E  00AA               	movwf	??_del_dev+1
  6116  179F  082A               	movf	??_del_dev+1,w
  6117  17A0  00AE               	movwf	del_dev@new_map
  6118                           
  6119                           ;main.c: 141: if (old_map != new_map) {
  6120  17A1  082D               	movf	del_dev@old_map,w
  6121  17A2  062E               	xorwf	del_dev@new_map,w
  6122  17A3  1903               	skipnz
  6123  17A4  0008               	return
  6124                           
  6125                           ;main.c: 142: dev_map[y] = new_map;
  6126  17A5  082E               	movf	del_dev@new_map,w
  6127  17A6  00A9               	movwf	??_del_dev
  6128  17A7  082F               	movf	del_dev@y,w
  6129  17A8  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6130  17A9  0086               	movwf	6
  6131  17AA  3001               	movlw	1	; select bank2/3
  6132  17AB  0087               	movwf	7
  6133  17AC  0829               	movf	??_del_dev,w
  6134  17AD  0081               	movwf	1
  6135                           
  6136                           ;main.c: 143: devs--;
  6137  17AE  3001               	movlw	1
  6138  17AF  0021               	movlb	1	; select bank1
  6139  17B0  02E4               	subwf	_devs^(0+128),f
  6140  17B1  0008               	return
  6141  17B2                     __end_of_del_dev:	
  6142                           
  6143                           	psect	text18
  6144  17B2                     __ptext18:	
  6145 ;; *************** function _add_dev *****************
  6146 ;; Defined at:
  6147 ;;		line 118 in file "main.c"
  6148 ;; Parameters:    Size  Location     Type
  6149 ;;  dev_addr        1    wreg     unsigned char 
  6150 ;; Auto vars:     Size  Location     Type
  6151 ;;  dev_addr        1   16[BANK0 ] unsigned char 
  6152 ;;  y               1   15[BANK0 ] unsigned char 
  6153 ;;  new_map         1   14[BANK0 ] unsigned char 
  6154 ;;  old_map         1   13[BANK0 ] unsigned char 
  6155 ;;  x               1   12[BANK0 ] unsigned char 
  6156 ;; Return value:  Size  Location     Type
  6157 ;;                  1    wreg      void 
  6158 ;; Registers used:
  6159 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6160 ;; Tracked objects:
  6161 ;;		On entry : 0/0
  6162 ;;		On exit  : 0/0
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6166 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6167 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6168 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6169 ;;Total ram usage:        8 bytes
  6170 ;; Hardware stack levels used:    1
  6171 ;; Hardware stack levels required when called:    4
  6172 ;; This function calls:
  6173 ;;		___awdiv
  6174 ;; This function is called by:
  6175 ;;		_scan_dev
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           
  6179                           
  6180                           ;psect for function _add_dev
  6181  17B2                     _add_dev:	
  6182                           
  6183                           ;incstack = 0
  6184                           ; Regs used in _add_dev: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6185                           ;add_dev@dev_addr stored from wreg
  6186  17B2  0020               	movlb	0	; select bank0
  6187  17B3  00B0               	movwf	add_dev@dev_addr
  6188                           
  6189                           ;main.c: 119: uint8_t x, y;
  6190                           ;main.c: 120: uint8_t new_map, old_map;
  6191                           ;main.c: 121: if (dev_addr >= 1 && dev_addr <= 0x20) {
  6192  17B4  0830               	movf	add_dev@dev_addr,w
  6193  17B5  1903               	btfsc	3,2
  6194  17B6  0008               	return
  6195  17B7  3021               	movlw	33
  6196  17B8  0230               	subwf	add_dev@dev_addr,w
  6197  17B9  1803               	skipnc
  6198  17BA  0008               	return
  6199                           
  6200                           ;main.c: 122: y = dev_addr / 8;
  6201  17BB  3008               	movlw	8
  6202  17BC  00A0               	movwf	___awdiv@divisor
  6203  17BD  3000               	movlw	0
  6204  17BE  00A1               	movwf	___awdiv@divisor+1
  6205  17BF  0830               	movf	add_dev@dev_addr,w
  6206  17C0  00A9               	movwf	??_add_dev
  6207  17C1  01AA               	clrf	??_add_dev+1
  6208  17C2  0829               	movf	??_add_dev,w
  6209  17C3  00A2               	movwf	___awdiv@dividend
  6210  17C4  082A               	movf	??_add_dev+1,w
  6211  17C5  00A3               	movwf	___awdiv@dividend+1
  6212  17C6  3188  20E5  3197   	fcall	___awdiv
  6213  17C9  0020               	movlb	0	; select bank0
  6214  17CA  0820               	movf	?___awdiv,w
  6215  17CB  00AB               	movwf	??_add_dev+2
  6216  17CC  082B               	movf	??_add_dev+2,w
  6217  17CD  00AF               	movwf	add_dev@y
  6218                           
  6219                           ;main.c: 123: x = dev_addr % 8;
  6220  17CE  0830               	movf	add_dev@dev_addr,w
  6221  17CF  3907               	andlw	7
  6222  17D0  00A9               	movwf	??_add_dev
  6223  17D1  0829               	movf	??_add_dev,w
  6224  17D2  00AC               	movwf	add_dev@x
  6225                           
  6226                           ;main.c: 124: old_map = dev_map[y];
  6227  17D3  082F               	movf	add_dev@y,w
  6228  17D4  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6229  17D5  0086               	movwf	6
  6230  17D6  3001               	movlw	1	; select bank2/3
  6231  17D7  0087               	movwf	7
  6232  17D8  0801               	movf	1,w
  6233  17D9  00A9               	movwf	??_add_dev
  6234  17DA  0829               	movf	??_add_dev,w
  6235  17DB  00AD               	movwf	add_dev@old_map
  6236                           
  6237                           ;main.c: 125: new_map = dev_map[y] | (0x01 << x);
  6238  17DC  082F               	movf	add_dev@y,w
  6239  17DD  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6240  17DE  0086               	movwf	6
  6241  17DF  3001               	movlw	1	; select bank2/3
  6242  17E0  0087               	movwf	7
  6243  17E1  3001               	movlw	1
  6244  17E2  00A9               	movwf	??_add_dev
  6245  17E3  0A2C               	incf	add_dev@x,w
  6246  17E4  2FE6               	goto	u5854
  6247  17E5                     u5855:	
  6248  17E5  35A9               	lslf	??_add_dev,f
  6249  17E6                     u5854:	
  6250  17E6  0B89               	decfsz	9,f
  6251  17E7  2FE5               	goto	u5855
  6252  17E8  0829               	movf	??_add_dev,w
  6253  17E9  0401               	iorwf	1,w
  6254  17EA  00AA               	movwf	??_add_dev+1
  6255  17EB  082A               	movf	??_add_dev+1,w
  6256  17EC  00AE               	movwf	add_dev@new_map
  6257                           
  6258                           ;main.c: 126: if (old_map != new_map) {
  6259  17ED  082D               	movf	add_dev@old_map,w
  6260  17EE  062E               	xorwf	add_dev@new_map,w
  6261  17EF  1903               	skipnz
  6262  17F0  0008               	return
  6263                           
  6264                           ;main.c: 127: dev_map[y] = new_map;
  6265  17F1  082E               	movf	add_dev@new_map,w
  6266  17F2  00A9               	movwf	??_add_dev
  6267  17F3  082F               	movf	add_dev@y,w
  6268  17F4  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  6269  17F5  0086               	movwf	6
  6270  17F6  3001               	movlw	1	; select bank2/3
  6271  17F7  0087               	movwf	7
  6272  17F8  0829               	movf	??_add_dev,w
  6273  17F9  0081               	movwf	1
  6274                           
  6275                           ;main.c: 128: devs++;
  6276  17FA  3001               	movlw	1
  6277  17FB  00A9               	movwf	??_add_dev
  6278  17FC  0829               	movf	??_add_dev,w
  6279  17FD  0021               	movlb	1	; select bank1
  6280  17FE  07E4               	addwf	_devs^(0+128),f
  6281  17FF  0008               	return
  6282  1800                     __end_of_add_dev:	
  6283                           
  6284                           	psect	text19
  6285  0ACE                     __ptext19:	
  6286 ;; *************** function _inv_handler *****************
  6287 ;; Defined at:
  6288 ;;		line 324 in file "main.c"
  6289 ;; Parameters:    Size  Location     Type
  6290 ;;		None
  6291 ;; Auto vars:     Size  Location     Type
  6292 ;;  status          1    0        unsigned char 
  6293 ;;  dev_addr        1    0        unsigned char 
  6294 ;; Return value:  Size  Location     Type
  6295 ;;                  1    wreg      void 
  6296 ;; Registers used:
  6297 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/0
  6300 ;;		On exit  : 0/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;Total ram usage:        0 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; Hardware stack levels required when called:    9
  6310 ;; This function calls:
  6311 ;;		___lwmod
  6312 ;;		_fetch
  6313 ;; This function is called by:
  6314 ;;		_main
  6315 ;;		_PROTOCOL_Loop
  6316 ;; This function uses a non-reentrant model
  6317 ;;
  6318                           
  6319                           
  6320                           ;psect for function _inv_handler
  6321  0ACE                     _inv_handler:	
  6322                           
  6323                           ;main.c: 325: uint8_t dev_addr, status;
  6324                           ;main.c: 326: static uint16_t t = 0;
  6325                           ;main.c: 329: fetch(schedule[0]);
  6326                           
  6327                           ;incstack = 0
  6328                           ; Regs used in _inv_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6329  0ACE  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  6330  0ACF  3188  2044  318A   	fcall	_fetch
  6331                           
  6332                           ;main.c: 331: if (t % 2 == 0) fetch(schedule[1]);
  6333  0AD2  1870               	btfsc	inv_handler@t,0
  6334  0AD3  2AD8               	goto	l5751
  6335  0AD4  30A4               	movlw	(low ((_schedule| (0+256)+4)))& (0+255)
  6336  0AD5  3188  2044  318A   	fcall	_fetch
  6337  0AD8                     l5751:	
  6338                           
  6339                           ;main.c: 333: if (t % 6 == 0) fetch(schedule[2]);
  6340  0AD8  3006               	movlw	6
  6341  0AD9  0020               	movlb	0	; select bank0
  6342  0ADA  00A8               	movwf	___lwmod@divisor
  6343  0ADB  3000               	movlw	0
  6344  0ADC  00A9               	movwf	___lwmod@divisor+1
  6345  0ADD  0871               	movf	inv_handler@t+1,w
  6346  0ADE  00AB               	movwf	___lwmod@dividend+1
  6347  0ADF  0870               	movf	inv_handler@t,w
  6348  0AE0  00AA               	movwf	___lwmod@dividend
  6349  0AE1  3195  250D  318A   	fcall	___lwmod
  6350  0AE4  0020               	movlb	0	; select bank0
  6351  0AE5  0828               	movf	?___lwmod,w
  6352  0AE6  0429               	iorwf	?___lwmod+1,w
  6353  0AE7  1D03               	btfss	3,2
  6354  0AE8  2AED               	goto	l5755
  6355  0AE9  30A8               	movlw	(low ((_schedule| (0+256)+8)))& (0+255)
  6356  0AEA  3188  2044  318A   	fcall	_fetch
  6357  0AED                     l5755:	
  6358                           
  6359                           ;main.c: 335: if (t % 12 == 0) fetch(schedule[3]);
  6360  0AED  300C               	movlw	12
  6361  0AEE  0020               	movlb	0	; select bank0
  6362  0AEF  00A8               	movwf	___lwmod@divisor
  6363  0AF0  3000               	movlw	0
  6364  0AF1  00A9               	movwf	___lwmod@divisor+1
  6365  0AF2  0871               	movf	inv_handler@t+1,w
  6366  0AF3  00AB               	movwf	___lwmod@dividend+1
  6367  0AF4  0870               	movf	inv_handler@t,w
  6368  0AF5  00AA               	movwf	___lwmod@dividend
  6369  0AF6  3195  250D  318A   	fcall	___lwmod
  6370  0AF9  0020               	movlb	0	; select bank0
  6371  0AFA  0828               	movf	?___lwmod,w
  6372  0AFB  0429               	iorwf	?___lwmod+1,w
  6373  0AFC  1D03               	btfss	3,2
  6374  0AFD  2B02               	goto	l5759
  6375  0AFE  30AC               	movlw	(low ((_schedule| (0+256)+12)))& (0+255)
  6376  0AFF  3188  2044  318A   	fcall	_fetch
  6377  0B02                     l5759:	
  6378                           
  6379                           ;main.c: 337: if (t % 60 == 0) fetch(schedule[4]);
  6380  0B02  303C               	movlw	60
  6381  0B03  0020               	movlb	0	; select bank0
  6382  0B04  00A8               	movwf	___lwmod@divisor
  6383  0B05  3000               	movlw	0
  6384  0B06  00A9               	movwf	___lwmod@divisor+1
  6385  0B07  0871               	movf	inv_handler@t+1,w
  6386  0B08  00AB               	movwf	___lwmod@dividend+1
  6387  0B09  0870               	movf	inv_handler@t,w
  6388  0B0A  00AA               	movwf	___lwmod@dividend
  6389  0B0B  3195  250D  318A   	fcall	___lwmod
  6390  0B0E  0020               	movlb	0	; select bank0
  6391  0B0F  0828               	movf	?___lwmod,w
  6392  0B10  0429               	iorwf	?___lwmod+1,w
  6393  0B11  1D03               	btfss	3,2
  6394  0B12  2B17               	goto	l5763
  6395  0B13  30B0               	movlw	(low ((_schedule| (0+256)+16)))& (0+255)
  6396  0B14  3188  2044  318A   	fcall	_fetch
  6397  0B17                     l5763:	
  6398                           
  6399                           ;main.c: 339: if (t % 120 == 0) fetch(schedule[5]);
  6400  0B17  3078               	movlw	120
  6401  0B18  0020               	movlb	0	; select bank0
  6402  0B19  00A8               	movwf	___lwmod@divisor
  6403  0B1A  3000               	movlw	0
  6404  0B1B  00A9               	movwf	___lwmod@divisor+1
  6405  0B1C  0871               	movf	inv_handler@t+1,w
  6406  0B1D  00AB               	movwf	___lwmod@dividend+1
  6407  0B1E  0870               	movf	inv_handler@t,w
  6408  0B1F  00AA               	movwf	___lwmod@dividend
  6409  0B20  3195  250D  318A   	fcall	___lwmod
  6410  0B23  0020               	movlb	0	; select bank0
  6411  0B24  0828               	movf	?___lwmod,w
  6412  0B25  0429               	iorwf	?___lwmod+1,w
  6413  0B26  1D03               	btfss	3,2
  6414  0B27  2B2C               	goto	l5767
  6415  0B28  30B4               	movlw	(low ((_schedule| (0+256)+20)))& (0+255)
  6416  0B29  3188  2044  318A   	fcall	_fetch
  6417  0B2C                     l5767:	
  6418                           
  6419                           ;main.c: 341: if (t % 600 == 0) {
  6420  0B2C  3058               	movlw	88
  6421  0B2D  0020               	movlb	0	; select bank0
  6422  0B2E  00A8               	movwf	___lwmod@divisor
  6423  0B2F  3002               	movlw	2
  6424  0B30  00A9               	movwf	___lwmod@divisor+1
  6425  0B31  0871               	movf	inv_handler@t+1,w
  6426  0B32  00AB               	movwf	___lwmod@dividend+1
  6427  0B33  0870               	movf	inv_handler@t,w
  6428  0B34  00AA               	movwf	___lwmod@dividend
  6429  0B35  3195  250D  318A   	fcall	___lwmod
  6430  0B38  0020               	movlb	0	; select bank0
  6431  0B39  0828               	movf	?___lwmod,w
  6432  0B3A  0429               	iorwf	?___lwmod+1,w
  6433  0B3B  1D03               	btfss	3,2
  6434  0B3C  2B44               	goto	l5773
  6435                           
  6436                           ;main.c: 342: fetch(schedule[6]);
  6437  0B3D  30B8               	movlw	(low ((_schedule| (0+256)+24)))& (0+255)
  6438  0B3E  3188  2044         	fcall	_fetch
  6439                           
  6440                           ;main.c: 343: t = 1;
  6441  0B40  3001               	movlw	1
  6442  0B41  00F0               	movwf	inv_handler@t
  6443  0B42  3000               	movlw	0
  6444  0B43  00F1               	movwf	inv_handler@t+1
  6445  0B44                     l5773:	
  6446                           
  6447                           ;main.c: 344: }
  6448                           ;main.c: 346: t++;
  6449  0B44  3001               	movlw	1
  6450  0B45  07F0               	addwf	inv_handler@t,f
  6451  0B46  3000               	movlw	0
  6452  0B47  3DF1               	addwfc	inv_handler@t+1,f
  6453  0B48  0008               	return
  6454  0B49                     __end_of_inv_handler:	
  6455                           
  6456                           	psect	text20
  6457  0844                     __ptext20:	
  6458 ;; *************** function _fetch *****************
  6459 ;; Defined at:
  6460 ;;		line 280 in file "main.c"
  6461 ;; Parameters:    Size  Location     Type
  6462 ;;  sch             1    wreg     PTR unsigned char 
  6463 ;;		 -> schedule(28), 
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;  sch             1   58[BANK0 ] PTR unsigned char 
  6466 ;;		 -> schedule(28), 
  6467 ;;  dev_addr        1   60[BANK0 ] unsigned char 
  6468 ;;  pos             1   59[BANK0 ] unsigned char 
  6469 ;;  status          1   57[BANK0 ] unsigned char 
  6470 ;; Return value:  Size  Location     Type
  6471 ;;                  1    wreg      void 
  6472 ;; Registers used:
  6473 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6480 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;Total ram usage:        7 bytes
  6484 ;; Hardware stack levels used:    1
  6485 ;; Hardware stack levels required when called:    8
  6486 ;; This function calls:
  6487 ;;		_detected
  6488 ;;		_i2c1_write_no_data
  6489 ;;		_printf
  6490 ;;		_sen
  6491 ;; This function is called by:
  6492 ;;		_inv_handler
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           
  6497                           ;psect for function _fetch
  6498  0844                     _fetch:	
  6499                           
  6500                           ;incstack = 0
  6501                           ; Regs used in _fetch: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6502                           ;fetch@sch stored from wreg
  6503  0844  0020               	movlb	0	; select bank0
  6504  0845  00DA               	movwf	fetch@sch
  6505                           
  6506                           ;main.c: 281: uint8_t pos;
  6507                           ;main.c: 282: uint8_t dev_addr;
  6508                           ;main.c: 283: uint8_t status;
  6509                           ;main.c: 284: for (pos=0; pos<4; pos++) {
  6510  0846  01DB               	clrf	fetch@pos
  6511  0847                     L8:	
  6512  0847  3004               	movlw	4
  6513  0848  025B               	subwf	fetch@pos,w
  6514  0849  1803               	btfsc	3,0
  6515  084A  0008               	return
  6516                           
  6517                           ;main.c: 285: dev_addr = sch[pos];
  6518  084B  085B               	movf	fetch@pos,w
  6519  084C  075A               	addwf	fetch@sch,w
  6520  084D  00D6               	movwf	??_fetch
  6521  084E  0856               	movf	??_fetch,w
  6522  084F  0086               	movwf	6
  6523  0850  3001               	movlw	1	; select bank2/3
  6524  0851  0087               	movwf	7
  6525  0852  0801               	movf	1,w
  6526  0853  00D7               	movwf	??_fetch+1
  6527  0854  0857               	movf	??_fetch+1,w
  6528  0855  00DC               	movwf	fetch@dev_addr
  6529                           
  6530                           ;main.c: 286: if (dev_addr == 0 || dev_addr > 0x20) {
  6531  0856  085C               	movf	fetch@dev_addr,w
  6532  0857  1903               	btfsc	3,2
  6533  0858  0008               	return
  6534  0859  3021               	movlw	33
  6535  085A  025C               	subwf	fetch@dev_addr,w
  6536  085B  1803               	btfsc	3,0
  6537  085C  0008               	return
  6538                           
  6539                           ;main.c: 288: } else if (detected(dev_addr)) {
  6540                           
  6541                           ;main.c: 287: break;
  6542  085D  085C               	movf	fetch@dev_addr,w
  6543  085E  3195  2567  3188   	fcall	_detected
  6544  0861  3A00               	xorlw	0
  6545  0862  1903               	skipnz
  6546  0863  288D               	goto	l5557
  6547                           
  6548                           ;main.c: 289: status = sen(dev_addr);
  6549  0864  0020               	movlb	0	; select bank0
  6550  0865  085C               	movf	fetch@dev_addr,w
  6551  0866  3186  26EE  3188   	fcall	_sen
  6552  0869  0020               	movlb	0	; select bank0
  6553  086A  00D6               	movwf	??_fetch
  6554  086B  0856               	movf	??_fetch,w
  6555  086C  00D9               	movwf	fetch@status
  6556                           
  6557                           ;main.c: 290: if (status > 0) {
  6558  086D  0859               	movf	fetch@status,w
  6559  086E  1903               	btfsc	3,2
  6560  086F  288D               	goto	l5557
  6561                           
  6562                           ;main.c: 291: printf("!:%%%d:NETWORK_ERROR\n", dev_addr);
  6563  0870  3088               	movlw	low (STR_18| (0+32768))
  6564  0871  00AE               	movwf	printf@f
  6565  0872  3090               	movlw	high (STR_18| (0+32768))
  6566  0873  00AF               	movwf	printf@f+1
  6567  0874  085C               	movf	fetch@dev_addr,w
  6568  0875  00D6               	movwf	??_fetch
  6569  0876  01D7               	clrf	??_fetch+1
  6570  0877  0856               	movf	??_fetch,w
  6571  0878  00B0               	movwf	?_printf+2
  6572  0879  0857               	movf	??_fetch+1,w
  6573  087A  00B1               	movwf	?_printf+3
  6574  087B  3185  2519  3188   	fcall	_printf
  6575                           
  6576                           ;main.c: 292: i2c1_write_no_data(dev_addr, 0x0c);
  6577  087E  0020               	movlb	0	; select bank0
  6578  087F  085C               	movf	fetch@dev_addr,w
  6579  0880  00D6               	movwf	??_fetch
  6580  0881  01D7               	clrf	??_fetch+1
  6581  0882  0856               	movf	??_fetch,w
  6582  0883  00AE               	movwf	i2c1_write_no_data@dev_addr
  6583  0884  0857               	movf	??_fetch+1,w
  6584  0885  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  6585  0886  300C               	movlw	12
  6586  0887  00D8               	movwf	??_fetch+2
  6587  0888  0858               	movf	??_fetch+2,w
  6588  0889  00B0               	movwf	i2c1_write_no_data@reg_addr
  6589  088A  3194  24B6  3188   	fcall	_i2c1_write_no_data
  6590  088D                     l5557:	
  6591  088D  3001               	movlw	1
  6592  088E  0020               	movlb	0	; select bank0
  6593  088F  00D6               	movwf	??_fetch
  6594  0890  0856               	movf	??_fetch,w
  6595  0891  07DB               	addwf	fetch@pos,f
  6596  0892  2847               	goto	L8
  6597  0893                     __end_of_fetch:	
  6598                           
  6599                           	psect	text21
  6600  11EF                     __ptext21:	
  6601 ;; *************** function _TMR0_HasOverflowOccured *****************
  6602 ;; Defined at:
  6603 ;;		line 101 in file "mcc_generated_files/tmr0.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;		None
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;		None
  6608 ;; Return value:  Size  Location     Type
  6609 ;;                  1    wreg      unsigned char 
  6610 ;; Registers used:
  6611 ;;		wreg, status,2, status,0
  6612 ;; Tracked objects:
  6613 ;;		On entry : 0/0
  6614 ;;		On exit  : 0/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;Total ram usage:        0 bytes
  6622 ;; Hardware stack levels used:    1
  6623 ;; Hardware stack levels required when called:    3
  6624 ;; This function calls:
  6625 ;;		Nothing
  6626 ;; This function is called by:
  6627 ;;		_PROTOCOL_Loop
  6628 ;; This function uses a non-reentrant model
  6629 ;;
  6630                           
  6631                           
  6632                           ;psect for function _TMR0_HasOverflowOccured
  6633  11EF                     _TMR0_HasOverflowOccured:	
  6634                           
  6635                           ;tmr0.c: 104: return(INTCONbits.TMR0IF);
  6636                           
  6637                           ;incstack = 0
  6638                           ; Regs used in _TMR0_HasOverflowOccured: [wreg+status,2+status,0]
  6639  11EF  0C0B               	rrf	11,w	;volatile
  6640  11F0  0C89               	rrf	9,f
  6641  11F1  3901               	andlw	1
  6642  11F2  0008               	return
  6643  11F3                     __end_of_TMR0_HasOverflowOccured:	
  6644                           
  6645                           	psect	text22
  6646  1266                     __ptext22:	
  6647 ;; *************** function _PROTOCOL_Write_Device_Address *****************
  6648 ;; Defined at:
  6649 ;;		line 89 in file "protocol.c"
  6650 ;; Parameters:    Size  Location     Type
  6651 ;;  device_id_i2    1    wreg     unsigned char 
  6652 ;; Auto vars:     Size  Location     Type
  6653 ;;  device_id_i2    1    4[BANK0 ] unsigned char 
  6654 ;; Return value:  Size  Location     Type
  6655 ;;                  1    wreg      void 
  6656 ;; Registers used:
  6657 ;;		wreg, status,2, status,0, pclath, cstack
  6658 ;; Tracked objects:
  6659 ;;		On entry : 0/0
  6660 ;;		On exit  : 0/0
  6661 ;;		Unchanged: 0/0
  6662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6666 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;Total ram usage:        2 bytes
  6668 ;; Hardware stack levels used:    1
  6669 ;; Hardware stack levels required when called:    4
  6670 ;; This function calls:
  6671 ;;		_DATAEE_WriteByte
  6672 ;; This function is called by:
  6673 ;;		_PROTOCOL_Loop
  6674 ;; This function uses a non-reentrant model
  6675 ;;
  6676                           
  6677                           
  6678                           ;psect for function _PROTOCOL_Write_Device_Address
  6679  1266                     _PROTOCOL_Write_Device_Address:	
  6680                           
  6681                           ;incstack = 0
  6682                           ; Regs used in _PROTOCOL_Write_Device_Address: [wreg+status,2+status,0+pclath+cstack]
  6683                           ;PROTOCOL_Write_Device_Address@device_id_i2c stored from wreg
  6684  1266  0020               	movlb	0	; select bank0
  6685  1267  00A4               	movwf	PROTOCOL_Write_Device_Address@device_id_i2c
  6686                           
  6687                           ;protocol.c: 90: DATAEE_WriteByte(0, device_id_i2c);
  6688  1268  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6689  1269  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6690  126A  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6691  126B  00A0               	movwf	DATAEE_WriteByte@bData
  6692  126C  3000               	movlw	0
  6693  126D  3193  23D1         	fcall	_DATAEE_WriteByte
  6694                           
  6695                           ;protocol.c: 91: slave_address = device_id_i2c;
  6696  126F  0020               	movlb	0	; select bank0
  6697  1270  0824               	movf	PROTOCOL_Write_Device_Address@device_id_i2c,w
  6698  1271  00A3               	movwf	??_PROTOCOL_Write_Device_Address
  6699  1272  0823               	movf	??_PROTOCOL_Write_Device_Address,w
  6700  1273  0021               	movlb	1	; select bank1
  6701  1274  00E0               	movwf	_slave_address^(0+128)
  6702  1275  0008               	return
  6703  1276                     __end_of_PROTOCOL_Write_Device_Address:	
  6704                           
  6705                           	psect	text23
  6706  11E5                     __ptext23:	
  6707 ;; *************** function _PROTOCOL_STP *****************
  6708 ;; Defined at:
  6709 ;;		line 103 in file "protocol.c"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;		None
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;		None
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  1    wreg      void 
  6716 ;; Registers used:
  6717 ;;		wreg, status,2, status,0
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6726 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6727 ;;Total ram usage:        0 bytes
  6728 ;; Hardware stack levels used:    1
  6729 ;; Hardware stack levels required when called:    3
  6730 ;; This function calls:
  6731 ;;		Nothing
  6732 ;; This function is called by:
  6733 ;;		_PROTOCOL_Loop
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737                           
  6738                           ;psect for function _PROTOCOL_STP
  6739  11E5                     _PROTOCOL_STP:	
  6740                           
  6741                           ;protocol.c: 105: running = 0;
  6742                           
  6743                           ;incstack = 0
  6744                           ; Regs used in _PROTOCOL_STP: [wreg+status,2+status,0]
  6745  11E5  0022               	movlb	2	; select bank2
  6746  11E6  01C2               	clrf	_running^(0+256)
  6747  11E7  0008               	return
  6748  11E8                     __end_of_PROTOCOL_STP:	
  6749                           
  6750                           	psect	text24
  6751  11EB                     __ptext24:	
  6752 ;; *************** function _PROTOCOL_STA *****************
  6753 ;; Defined at:
  6754 ;;		line 98 in file "protocol.c"
  6755 ;; Parameters:    Size  Location     Type
  6756 ;;		None
  6757 ;; Auto vars:     Size  Location     Type
  6758 ;;		None
  6759 ;; Return value:  Size  Location     Type
  6760 ;;                  1    wreg      void 
  6761 ;; Registers used:
  6762 ;;		wreg, status,2, status,0
  6763 ;; Tracked objects:
  6764 ;;		On entry : 0/0
  6765 ;;		On exit  : 0/0
  6766 ;;		Unchanged: 0/0
  6767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6772 ;;Total ram usage:        0 bytes
  6773 ;; Hardware stack levels used:    1
  6774 ;; Hardware stack levels required when called:    3
  6775 ;; This function calls:
  6776 ;;		Nothing
  6777 ;; This function is called by:
  6778 ;;		_PROTOCOL_Loop
  6779 ;; This function uses a non-reentrant model
  6780 ;;
  6781                           
  6782                           
  6783                           ;psect for function _PROTOCOL_STA
  6784  11EB                     _PROTOCOL_STA:	
  6785                           
  6786                           ;protocol.c: 100: running = 1;
  6787                           
  6788                           ;incstack = 0
  6789                           ; Regs used in _PROTOCOL_STA: [wreg+status,2+status,0]
  6790  11EB  0022               	movlb	2	; select bank2
  6791  11EC  01C2               	clrf	_running^(0+256)
  6792  11ED  0AC2               	incf	_running^(0+256),f
  6793  11EE  0008               	return
  6794  11EF                     __end_of_PROTOCOL_STA:	
  6795                           
  6796                           	psect	text25
  6797  1200                     __ptext25:	
  6798 ;; *************** function _PROTOCOL_SET *****************
  6799 ;; Defined at:
  6800 ;;		line 116 in file "protocol.c"
  6801 ;; Parameters:    Size  Location     Type
  6802 ;;  value_          1    wreg     unsigned char 
  6803 ;; Auto vars:     Size  Location     Type
  6804 ;;  value_          1    1[BANK0 ] unsigned char 
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  1    wreg      void 
  6807 ;; Registers used:
  6808 ;;		wreg, status,2, status,0
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6817 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6818 ;;Total ram usage:        2 bytes
  6819 ;; Hardware stack levels used:    1
  6820 ;; Hardware stack levels required when called:    3
  6821 ;; This function calls:
  6822 ;;		Nothing
  6823 ;; This function is called by:
  6824 ;;		_PROTOCOL_Loop
  6825 ;; This function uses a non-reentrant model
  6826 ;;
  6827                           
  6828                           
  6829                           ;psect for function _PROTOCOL_SET
  6830  1200                     _PROTOCOL_SET:	
  6831                           
  6832                           ;incstack = 0
  6833                           ; Regs used in _PROTOCOL_SET: [wreg+status,2+status,0]
  6834                           ;PROTOCOL_SET@value_ stored from wreg
  6835  1200  0020               	movlb	0	; select bank0
  6836  1201  00A1               	movwf	PROTOCOL_SET@value_
  6837                           
  6838                           ;protocol.c: 117: value = value_;
  6839  1202  0821               	movf	PROTOCOL_SET@value_,w
  6840  1203  00A0               	movwf	??_PROTOCOL_SET
  6841  1204  0820               	movf	??_PROTOCOL_SET,w
  6842  1205  0021               	movlb	1	; select bank1
  6843  1206  00DE               	movwf	_value^(0+128)
  6844  1207  0008               	return
  6845  1208                     __end_of_PROTOCOL_SET:	
  6846                           
  6847                           	psect	text26
  6848  121A                     __ptext26:	
  6849 ;; *************** function _PROTOCOL_SAV *****************
  6850 ;; Defined at:
  6851 ;;		line 112 in file "protocol.c"
  6852 ;; Parameters:    Size  Location     Type
  6853 ;;		None
  6854 ;; Auto vars:     Size  Location     Type
  6855 ;;		None
  6856 ;; Return value:  Size  Location     Type
  6857 ;;                  1    wreg      void 
  6858 ;; Registers used:
  6859 ;;		wreg, status,2, status,0, pclath, cstack
  6860 ;; Tracked objects:
  6861 ;;		On entry : 0/0
  6862 ;;		On exit  : 0/0
  6863 ;;		Unchanged: 0/0
  6864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6868 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6869 ;;Total ram usage:        1 bytes
  6870 ;; Hardware stack levels used:    1
  6871 ;; Hardware stack levels required when called:    4
  6872 ;; This function calls:
  6873 ;;		_DATAEE_WriteByte
  6874 ;; This function is called by:
  6875 ;;		_PROTOCOL_Loop
  6876 ;; This function uses a non-reentrant model
  6877 ;;
  6878                           
  6879                           
  6880                           ;psect for function _PROTOCOL_SAV
  6881  121A                     _PROTOCOL_SAV:	
  6882                           
  6883                           ;protocol.c: 113: DATAEE_WriteByte(1, value);
  6884                           
  6885                           ;incstack = 0
  6886                           ; Regs used in _PROTOCOL_SAV: [wreg+status,2+status,0+pclath+cstack]
  6887  121A  0021               	movlb	1	; select bank1
  6888  121B  085E               	movf	_value^(0+128),w
  6889  121C  0020               	movlb	0	; select bank0
  6890  121D  00A3               	movwf	??_PROTOCOL_SAV
  6891  121E  0823               	movf	??_PROTOCOL_SAV,w
  6892  121F  00A0               	movwf	DATAEE_WriteByte@bData
  6893  1220  3001               	movlw	1
  6894  1221  3193  23D1         	fcall	_DATAEE_WriteByte
  6895  1223  0008               	return
  6896  1224                     __end_of_PROTOCOL_SAV:	
  6897                           
  6898                           	psect	text27
  6899  11E2                     __ptext27:	
  6900 ;; *************** function _PROTOCOL_Read_Device_Address *****************
  6901 ;; Defined at:
  6902 ;;		line 94 in file "protocol.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;		None
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;		None
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  1    wreg      unsigned char 
  6909 ;; Registers used:
  6910 ;;		wreg
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6920 ;;Total ram usage:        0 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    3
  6923 ;; This function calls:
  6924 ;;		Nothing
  6925 ;; This function is called by:
  6926 ;;		_PROTOCOL_Loop
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           
  6931                           ;psect for function _PROTOCOL_Read_Device_Address
  6932  11E2                     _PROTOCOL_Read_Device_Address:	
  6933                           
  6934                           ;protocol.c: 95: return slave_address;
  6935                           
  6936                           ;incstack = 0
  6937                           ; Regs used in _PROTOCOL_Read_Device_Address: [wreg]
  6938  11E2  0021               	movlb	1	; select bank1
  6939  11E3  0860               	movf	_slave_address^(0+128),w
  6940  11E4  0008               	return
  6941  11E5                     __end_of_PROTOCOL_Read_Device_Address:	
  6942                           
  6943                           	psect	text28
  6944  12AB                     __ptext28:	
  6945 ;; *************** function _PROTOCOL_EXT *****************
  6946 ;; Defined at:
  6947 ;;		line 121 in file "protocol.c"
  6948 ;; Parameters:    Size  Location     Type
  6949 ;;  char_buf        1    wreg     PTR unsigned char 
  6950 ;;		 -> buf(48), 
  6951 ;; Auto vars:     Size  Location     Type
  6952 ;;  char_buf        1   70[BANK0 ] PTR unsigned char 
  6953 ;;		 -> buf(48), 
  6954 ;; Return value:  Size  Location     Type
  6955 ;;                  1    wreg      void 
  6956 ;; Registers used:
  6957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6958 ;; Tracked objects:
  6959 ;;		On entry : 0/0
  6960 ;;		On exit  : 0/0
  6961 ;;		Unchanged: 0/0
  6962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6966 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6967 ;;Total ram usage:        2 bytes
  6968 ;; Hardware stack levels used:    1
  6969 ;; Hardware stack levels required when called:   10
  6970 ;; This function calls:
  6971 ;;		Absolute function
  6972 ;;		_command_handler
  6973 ;; This function is called by:
  6974 ;;		_PROTOCOL_Loop
  6975 ;; This function uses a non-reentrant model
  6976 ;;
  6977                           
  6978                           
  6979                           ;psect for function _PROTOCOL_EXT
  6980  12AB                     _PROTOCOL_EXT:	
  6981                           
  6982                           ;incstack = 0
  6983                           ; Regs used in _PROTOCOL_EXT: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6984                           ;PROTOCOL_EXT@char_buf stored from wreg
  6985  12AB  0020               	movlb	0	; select bank0
  6986  12AC  00E6               	movwf	PROTOCOL_EXT@char_buf
  6987                           
  6988                           ;protocol.c: 122: if (PROTOCOL_Extension_Handler) PROTOCOL_Extension_Handler(char_buf);
  6989  12AD  0022               	movlb	2	; select bank2
  6990  12AE  082C               	movf	_PROTOCOL_Extension_Handler^(0+256),w
  6991  12AF  042D               	iorwf	(_PROTOCOL_Extension_Handler+1)^(0+256),w
  6992  12B0  1903               	btfsc	3,2
  6993  12B1  0008               	return
  6994  12B2  0020               	movlb	0	; select bank0
  6995  12B3  0866               	movf	PROTOCOL_EXT@char_buf,w
  6996  12B4  00E5               	movwf	??_PROTOCOL_EXT
  6997  12B5  0865               	movf	??_PROTOCOL_EXT,w
  6998  12B6  00DB               	movwf	command_handler@buf
  6999  12B7  0022               	movlb	2	; select bank2
  7000  12B8  082D               	movf	(_PROTOCOL_Extension_Handler+1)^(0+256),w
  7001  12B9  008A               	movwf	10
  7002  12BA  082C               	movf	_PROTOCOL_Extension_Handler^(0+256),w
  7003  12BB  000A               	callw
  7004  12BC  3192               	pagesel	$
  7005  12BD  0008               	return
  7006  12BE                     __end_of_PROTOCOL_EXT:	
  7007                           
  7008                           	psect	text29
  7009  0E3E                     __ptext29:	
  7010 ;; *************** function _command_handler *****************
  7011 ;; Defined at:
  7012 ;;		line 361 in file "main.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;  buf             1   59[BANK0 ] PTR unsigned char 
  7015 ;;		 -> buf(48), 
  7016 ;; Auto vars:     Size  Location     Type
  7017 ;;  i               1   68[BANK0 ] unsigned char 
  7018 ;;  dev_addr        1   67[BANK0 ] unsigned char 
  7019 ;; Return value:  Size  Location     Type
  7020 ;;                  1    wreg      void 
  7021 ;; Registers used:
  7022 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7023 ;; Tracked objects:
  7024 ;;		On entry : 0/0
  7025 ;;		On exit  : 0/0
  7026 ;;		Unchanged: 0/0
  7027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7028 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7029 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7030 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7031 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7032 ;;Total ram usage:       10 bytes
  7033 ;; Hardware stack levels used:    1
  7034 ;; Hardware stack levels required when called:    9
  7035 ;; This function calls:
  7036 ;;		_DATAEE_WriteByte
  7037 ;;		___awdiv
  7038 ;;		_atoi
  7039 ;;		_one_shot_sen
  7040 ;;		_print_dev_map
  7041 ;;		_printf
  7042 ;;		_put_cmd
  7043 ;;		_strncmp
  7044 ;; This function is called by:
  7045 ;;		_main
  7046 ;;		_PROTOCOL_EXT
  7047 ;; This function uses a non-reentrant model
  7048 ;;
  7049                           
  7050                           
  7051                           ;psect for function _command_handler
  7052  0E3E                     _command_handler:	
  7053                           
  7054                           ;main.c: 362: static uint8_t pos = 0;
  7055                           ;main.c: 363: uint8_t i;
  7056                           ;main.c: 364: uint8_t dev_addr;
  7057                           ;main.c: 365: if (!strncmp(("I2C"), (buf), 3)) {
  7058                           
  7059                           ;incstack = 0
  7060                           ; Regs used in _command_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7061  0E3E  3079               	movlw	low (STR_20| (0+32768))
  7062  0E3F  0020               	movlb	0	; select bank0
  7063  0E40  00A0               	movwf	strncmp@s1
  7064  0E41  3091               	movlw	high (STR_20| (0+32768))
  7065  0E42  00A1               	movwf	strncmp@s1+1
  7066  0E43  085B               	movf	command_handler@buf,w
  7067  0E44  00A2               	movwf	strncmp@s2
  7068  0E45  3002               	movlw	2
  7069  0E46  00A3               	movwf	strncmp@s2+1
  7070  0E47  3003               	movlw	3
  7071  0E48  00A4               	movwf	strncmp@len
  7072  0E49  3000               	movlw	0
  7073  0E4A  00A5               	movwf	strncmp@len+1
  7074  0E4B  3188  2002  318E   	fcall	_strncmp
  7075  0E4E  0020               	movlb	0	; select bank0
  7076  0E4F  0820               	movf	?_strncmp,w
  7077  0E50  0421               	iorwf	?_strncmp+1,w
  7078  0E51  1D03               	btfss	3,2
  7079  0E52  2E61               	goto	l5565
  7080                           
  7081                           ;main.c: 366: BACKPLANE_SLAVE_ADDRESS = atoi(&buf[4]);
  7082  0E53  085B               	movf	command_handler@buf,w
  7083  0E54  3E04               	addlw	4
  7084  0E55  00A6               	movwf	atoi@s
  7085  0E56  3002               	movlw	2
  7086  0E57  00A7               	movwf	atoi@s+1
  7087  0E58  3189  21E3         	fcall	_atoi
  7088  0E5A  0020               	movlb	0	; select bank0
  7089  0E5B  0826               	movf	?_atoi,w
  7090  0E5C  00DC               	movwf	??_command_handler
  7091  0E5D  085C               	movf	??_command_handler,w
  7092  0E5E  0021               	movlb	1	; select bank1
  7093  0E5F  00EE               	movwf	_BACKPLANE_SLAVE_ADDRESS^(0+128)
  7094                           
  7095                           ;main.c: 367: } else if (!strncmp(("MAP"), (buf), 3)) {
  7096  0E60  0008               	return
  7097  0E61                     l5565:	
  7098  0E61  3091               	movlw	low (STR_21| (0+32768))
  7099  0E62  0020               	movlb	0	; select bank0
  7100  0E63  00A0               	movwf	strncmp@s1
  7101  0E64  3091               	movlw	high (STR_21| (0+32768))
  7102  0E65  00A1               	movwf	strncmp@s1+1
  7103  0E66  085B               	movf	command_handler@buf,w
  7104  0E67  00A2               	movwf	strncmp@s2
  7105  0E68  3002               	movlw	2
  7106  0E69  00A3               	movwf	strncmp@s2+1
  7107  0E6A  3003               	movlw	3
  7108  0E6B  00A4               	movwf	strncmp@len
  7109  0E6C  3000               	movlw	0
  7110  0E6D  00A5               	movwf	strncmp@len+1
  7111  0E6E  3188  2002  318E   	fcall	_strncmp
  7112  0E71  0020               	movlb	0	; select bank0
  7113  0E72  0820               	movf	?_strncmp,w
  7114  0E73  0421               	iorwf	?_strncmp+1,w
  7115  0E74  1D03               	btfss	3,2
  7116  0E75  2E79               	goto	l5569
  7117                           
  7118                           ;main.c: 368: print_dev_map();
  7119  0E76  3196  268A         	fcall	_print_dev_map
  7120                           
  7121                           ;main.c: 369: } else if (!strncmp(("POS"), (buf), 3)) {
  7122  0E78  0008               	return
  7123  0E79                     l5569:	
  7124  0E79  3099               	movlw	low (STR_22| (0+32768))
  7125  0E7A  0020               	movlb	0	; select bank0
  7126  0E7B  00A0               	movwf	strncmp@s1
  7127  0E7C  3091               	movlw	high (STR_22| (0+32768))
  7128  0E7D  00A1               	movwf	strncmp@s1+1
  7129  0E7E  085B               	movf	command_handler@buf,w
  7130  0E7F  00A2               	movwf	strncmp@s2
  7131  0E80  3002               	movlw	2
  7132  0E81  00A3               	movwf	strncmp@s2+1
  7133  0E82  3003               	movlw	3
  7134  0E83  00A4               	movwf	strncmp@len
  7135  0E84  3000               	movlw	0
  7136  0E85  00A5               	movwf	strncmp@len+1
  7137  0E86  3188  2002  318E   	fcall	_strncmp
  7138  0E89  0020               	movlb	0	; select bank0
  7139  0E8A  0820               	movf	?_strncmp,w
  7140  0E8B  0421               	iorwf	?_strncmp+1,w
  7141  0E8C  1D03               	btfss	3,2
  7142  0E8D  2EA6               	goto	l5577
  7143                           
  7144                           ;main.c: 370: pos = atoi(&buf[4]);
  7145  0E8E  085B               	movf	command_handler@buf,w
  7146  0E8F  3E04               	addlw	4
  7147  0E90  00A6               	movwf	atoi@s
  7148  0E91  3002               	movlw	2
  7149  0E92  00A7               	movwf	atoi@s+1
  7150  0E93  3189  21E3  318E   	fcall	_atoi
  7151  0E96  0020               	movlb	0	; select bank0
  7152  0E97  0826               	movf	?_atoi,w
  7153  0E98  00DC               	movwf	??_command_handler
  7154  0E99  085C               	movf	??_command_handler,w
  7155  0E9A  00EC               	movwf	command_handler@pos
  7156                           
  7157                           ;main.c: 371: if (pos > 27) printf("!:POS:POS LARGER THAN 27\n");
  7158  0E9B  301C               	movlw	28
  7159  0E9C  026C               	subwf	command_handler@pos,w
  7160  0E9D  1C03               	skipc
  7161  0E9E  0008               	return
  7162  0E9F  3025               	movlw	low (STR_23| (0+32768))
  7163  0EA0  00AE               	movwf	printf@f
  7164  0EA1  3090               	movlw	high (STR_23| (0+32768))
  7165  0EA2  00AF               	movwf	printf@f+1
  7166  0EA3  3185  2519         	fcall	_printf
  7167                           
  7168                           ;main.c: 372: } else if (!strncmp(("WSC"), (buf), 3)) {
  7169  0EA5  0008               	return
  7170  0EA6                     l5577:	
  7171  0EA6  3085               	movlw	low (STR_24| (0+32768))
  7172  0EA7  0020               	movlb	0	; select bank0
  7173  0EA8  00A0               	movwf	strncmp@s1
  7174  0EA9  3091               	movlw	high (STR_24| (0+32768))
  7175  0EAA  00A1               	movwf	strncmp@s1+1
  7176  0EAB  085B               	movf	command_handler@buf,w
  7177  0EAC  00A2               	movwf	strncmp@s2
  7178  0EAD  3002               	movlw	2
  7179  0EAE  00A3               	movwf	strncmp@s2+1
  7180  0EAF  3003               	movlw	3
  7181  0EB0  00A4               	movwf	strncmp@len
  7182  0EB1  3000               	movlw	0
  7183  0EB2  00A5               	movwf	strncmp@len+1
  7184  0EB3  3188  2002  318E   	fcall	_strncmp
  7185  0EB6  0020               	movlb	0	; select bank0
  7186  0EB7  0820               	movf	?_strncmp,w
  7187  0EB8  0421               	iorwf	?_strncmp+1,w
  7188  0EB9  1D03               	btfss	3,2
  7189  0EBA  2F02               	goto	l5589
  7190                           
  7191                           ;main.c: 373: if (pos <= 27) {
  7192  0EBB  301C               	movlw	28
  7193  0EBC  026C               	subwf	command_handler@pos,w
  7194  0EBD  1803               	skipnc
  7195  0EBE  2EFB               	goto	l5587
  7196                           
  7197                           ;main.c: 374: dev_addr = atoi(&buf[4]);
  7198  0EBF  085B               	movf	command_handler@buf,w
  7199  0EC0  3E04               	addlw	4
  7200  0EC1  00A6               	movwf	atoi@s
  7201  0EC2  3002               	movlw	2
  7202  0EC3  00A7               	movwf	atoi@s+1
  7203  0EC4  3189  21E3  318E   	fcall	_atoi
  7204  0EC7  0020               	movlb	0	; select bank0
  7205  0EC8  0826               	movf	?_atoi,w
  7206  0EC9  00DC               	movwf	??_command_handler
  7207  0ECA  085C               	movf	??_command_handler,w
  7208  0ECB  00E3               	movwf	command_handler@dev_addr
  7209                           
  7210                           ;main.c: 375: DATAEE_WriteByte(1 + pos + 1, dev_addr);
  7211  0ECC  0863               	movf	command_handler@dev_addr,w
  7212  0ECD  00DC               	movwf	??_command_handler
  7213  0ECE  085C               	movf	??_command_handler,w
  7214  0ECF  00A0               	movwf	DATAEE_WriteByte@bData
  7215  0ED0  086C               	movf	command_handler@pos,w
  7216  0ED1  3E02               	addlw	2
  7217  0ED2  3193  23D1  318E   	fcall	_DATAEE_WriteByte
  7218                           
  7219                           ;main.c: 376: schedule[pos/4][pos%4] = dev_addr;
  7220  0ED5  0020               	movlb	0	; select bank0
  7221  0ED6  0863               	movf	command_handler@dev_addr,w
  7222  0ED7  00DC               	movwf	??_command_handler
  7223  0ED8  3004               	movlw	4
  7224  0ED9  00A0               	movwf	___awdiv@divisor
  7225  0EDA  3000               	movlw	0
  7226  0EDB  00A1               	movwf	___awdiv@divisor+1
  7227  0EDC  086C               	movf	command_handler@pos,w
  7228  0EDD  00DD               	movwf	??_command_handler+1
  7229  0EDE  01DE               	clrf	??_command_handler+2
  7230  0EDF  085D               	movf	??_command_handler+1,w
  7231  0EE0  00A2               	movwf	___awdiv@dividend
  7232  0EE1  085E               	movf	??_command_handler+2,w
  7233  0EE2  00A3               	movwf	___awdiv@dividend+1
  7234  0EE3  3188  20E5  318E   	fcall	___awdiv
  7235  0EE6  0020               	movlb	0	; select bank0
  7236  0EE7  0820               	movf	?___awdiv,w
  7237  0EE8  00DF               	movwf	??_command_handler+3
  7238  0EE9  3002               	movlw	2
  7239  0EEA                     u6505:	
  7240  0EEA  35DF               	lslf	??_command_handler+3,f
  7241  0EEB  0B89               	decfsz	9,f
  7242  0EEC  2EEA               	goto	u6505
  7243  0EED  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  7244  0EEE  075F               	addwf	??_command_handler+3,w
  7245  0EEF  00E0               	movwf	??_command_handler+4
  7246  0EF0  086C               	movf	command_handler@pos,w
  7247  0EF1  3903               	andlw	3
  7248  0EF2  0760               	addwf	??_command_handler+4,w
  7249  0EF3  00E1               	movwf	??_command_handler+5
  7250  0EF4  0861               	movf	??_command_handler+5,w
  7251  0EF5  0086               	movwf	6
  7252  0EF6  3001               	movlw	1	; select bank3/4
  7253  0EF7  0087               	movwf	7
  7254  0EF8  085C               	movf	??_command_handler,w
  7255  0EF9  0081               	movwf	1
  7256                           
  7257                           ;main.c: 377: } else {
  7258  0EFA  0008               	return
  7259  0EFB                     l5587:	
  7260                           
  7261                           ;main.c: 378: printf("!:WSC:POS LARGER THAN 27\n");
  7262  0EFB  300B               	movlw	low (STR_25| (0+32768))
  7263  0EFC  00AE               	movwf	printf@f
  7264  0EFD  3090               	movlw	high (STR_25| (0+32768))
  7265  0EFE  00AF               	movwf	printf@f+1
  7266  0EFF  3185  2519         	fcall	_printf
  7267                           
  7268                           ;main.c: 379: }
  7269                           ;main.c: 380: } else if (!strncmp(("RSC"), (buf), 3)) {
  7270  0F01  0008               	return
  7271  0F02                     l5589:	
  7272  0F02  3081               	movlw	low (STR_26| (0+32768))
  7273  0F03  0020               	movlb	0	; select bank0
  7274  0F04  00A0               	movwf	strncmp@s1
  7275  0F05  3091               	movlw	high (STR_26| (0+32768))
  7276  0F06  00A1               	movwf	strncmp@s1+1
  7277  0F07  085B               	movf	command_handler@buf,w
  7278  0F08  00A2               	movwf	strncmp@s2
  7279  0F09  3002               	movlw	2
  7280  0F0A  00A3               	movwf	strncmp@s2+1
  7281  0F0B  3003               	movlw	3
  7282  0F0C  00A4               	movwf	strncmp@len
  7283  0F0D  3000               	movlw	0
  7284  0F0E  00A5               	movwf	strncmp@len+1
  7285  0F0F  3188  2002  318E   	fcall	_strncmp
  7286  0F12  0020               	movlb	0	; select bank0
  7287  0F13  0820               	movf	?_strncmp,w
  7288  0F14  0421               	iorwf	?_strncmp+1,w
  7289  0F15  1D03               	btfss	3,2
  7290  0F16  2F8B               	goto	l5611
  7291                           
  7292                           ;main.c: 381: printf("$:RSC:");
  7293  0F17  3044               	movlw	low (STR_27| (0+32768))
  7294  0F18  00AE               	movwf	printf@f
  7295  0F19  3091               	movlw	high (STR_27| (0+32768))
  7296  0F1A  00AF               	movwf	printf@f+1
  7297  0F1B  3185  2519  318E   	fcall	_printf
  7298                           
  7299                           ;main.c: 382: for (i=0; i<27; i++) {
  7300  0F1E  0020               	movlb	0	; select bank0
  7301  0F1F  01E4               	clrf	command_handler@i
  7302  0F20  301B               	movlw	27
  7303  0F21  0264               	subwf	command_handler@i,w
  7304  0F22  1803               	btfsc	3,0
  7305  0F23  2F7B               	goto	l5609
  7306  0F24                     l5599:	
  7307                           
  7308                           ;main.c: 383: if ((i+1) % 4 == 0) {
  7309  0F24  0864               	movf	command_handler@i,w
  7310  0F25  3E01               	addlw	1
  7311  0F26  3903               	andlw	3
  7312  0F27  1D03               	btfss	3,2
  7313  0F28  2F43               	goto	l5603
  7314                           
  7315                           ;main.c: 384: printf("%d|", schedule[i/4][i%4]);
  7316  0F29  30A9               	movlw	low (STR_28| (0+32768))
  7317  0F2A  00AE               	movwf	printf@f
  7318  0F2B  3091               	movlw	high (STR_28| (0+32768))
  7319  0F2C  00AF               	movwf	printf@f+1
  7320  0F2D  3004               	movlw	4
  7321  0F2E  00A0               	movwf	___awdiv@divisor
  7322  0F2F  3000               	movlw	0
  7323  0F30  00A1               	movwf	___awdiv@divisor+1
  7324  0F31  0864               	movf	command_handler@i,w
  7325  0F32  00DC               	movwf	??_command_handler
  7326  0F33  01DD               	clrf	??_command_handler+1
  7327  0F34  085C               	movf	??_command_handler,w
  7328  0F35  00A2               	movwf	___awdiv@dividend
  7329  0F36  085D               	movf	??_command_handler+1,w
  7330  0F37  00A3               	movwf	___awdiv@dividend+1
  7331  0F38  3188  20E5  318E   	fcall	___awdiv
  7332  0F3B  0020               	movlb	0	; select bank0
  7333  0F3C  0820               	movf	?___awdiv,w
  7334  0F3D  00DE               	movwf	??_command_handler+2
  7335  0F3E  3002               	movlw	2
  7336  0F3F                     u6545:	
  7337  0F3F  35DE               	lslf	??_command_handler+2,f
  7338  0F40  0B89               	decfsz	9,f
  7339  0F41  2F3F               	goto	u6545
  7340  0F42  2F5D               	goto	L9
  7341  0F43                     l5603:	
  7342                           ;main.c: 385: } else {
  7343                           
  7344                           
  7345                           ;main.c: 386: printf("%d,", schedule[i/4][i%4]);
  7346  0F43  3071               	movlw	low (STR_14| (0+32768))
  7347  0F44  0020               	movlb	0	; select bank0
  7348  0F45  00AE               	movwf	printf@f
  7349  0F46  3091               	movlw	high (STR_14| (0+32768))
  7350  0F47  00AF               	movwf	printf@f+1
  7351  0F48  3004               	movlw	4
  7352  0F49  00A0               	movwf	___awdiv@divisor
  7353  0F4A  3000               	movlw	0
  7354  0F4B  00A1               	movwf	___awdiv@divisor+1
  7355  0F4C  0864               	movf	command_handler@i,w
  7356  0F4D  00DC               	movwf	??_command_handler
  7357  0F4E  01DD               	clrf	??_command_handler+1
  7358  0F4F  085C               	movf	??_command_handler,w
  7359  0F50  00A2               	movwf	___awdiv@dividend
  7360  0F51  085D               	movf	??_command_handler+1,w
  7361  0F52  00A3               	movwf	___awdiv@dividend+1
  7362  0F53  3188  20E5  318E   	fcall	___awdiv
  7363  0F56  0020               	movlb	0	; select bank0
  7364  0F57  0820               	movf	?___awdiv,w
  7365  0F58  00DE               	movwf	??_command_handler+2
  7366  0F59  3002               	movlw	2
  7367  0F5A                     u6555:	
  7368  0F5A  35DE               	lslf	??_command_handler+2,f
  7369  0F5B  0B89               	decfsz	9,f
  7370  0F5C  2F5A               	goto	u6555
  7371  0F5D                     L9:	
  7372  0F5D  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  7373  0F5E  075E               	addwf	??_command_handler+2,w
  7374  0F5F  00DF               	movwf	??_command_handler+3
  7375  0F60  0864               	movf	command_handler@i,w
  7376  0F61  3903               	andlw	3
  7377  0F62  075F               	addwf	??_command_handler+3,w
  7378  0F63  00E0               	movwf	??_command_handler+4
  7379  0F64  0860               	movf	??_command_handler+4,w
  7380  0F65  0086               	movwf	6
  7381  0F66  3001               	movlw	1	; select bank3/4
  7382  0F67  0087               	movwf	7
  7383  0F68  0801               	movf	1,w
  7384  0F69  00E1               	movwf	??_command_handler+5
  7385  0F6A  01E2               	clrf	??_command_handler+6
  7386  0F6B  0861               	movf	??_command_handler+5,w
  7387  0F6C  00B0               	movwf	?_printf+2
  7388  0F6D  0862               	movf	??_command_handler+6,w
  7389  0F6E  00B1               	movwf	?_printf+3
  7390  0F6F  3185  2519  318E   	fcall	_printf
  7391  0F72  3001               	movlw	1
  7392  0F73  0020               	movlb	0	; select bank0
  7393  0F74  00DC               	movwf	??_command_handler
  7394  0F75  085C               	movf	??_command_handler,w
  7395  0F76  07E4               	addwf	command_handler@i,f
  7396  0F77  301B               	movlw	27
  7397  0F78  0264               	subwf	command_handler@i,w
  7398  0F79  1C03               	skipc
  7399  0F7A  2F24               	goto	l5599
  7400  0F7B                     l5609:	
  7401                           
  7402                           ;main.c: 387: }
  7403                           ;main.c: 388: }
  7404                           ;main.c: 389: printf("%d\n", schedule[6][3]);
  7405  0F7B  30DA               	movlw	low ((STR_48+6)| (0+32768))
  7406  0F7C  00AE               	movwf	printf@f
  7407  0F7D  3090               	movlw	high ((STR_48+6)| (0+32768))
  7408  0F7E  00AF               	movwf	printf@f+1
  7409  0F7F  0023               	movlb	3	; select bank3
  7410  0F80  083B               	movf	(_schedule^(0+384)+27),w
  7411  0F81  0020               	movlb	0	; select bank0
  7412  0F82  00DC               	movwf	??_command_handler
  7413  0F83  01DD               	clrf	??_command_handler+1
  7414  0F84  085C               	movf	??_command_handler,w
  7415  0F85  00B0               	movwf	?_printf+2
  7416  0F86  085D               	movf	??_command_handler+1,w
  7417  0F87  00B1               	movwf	?_printf+3
  7418  0F88  3185  2519         	fcall	_printf
  7419                           
  7420                           ;main.c: 390: } else if (!strncmp(("CSC"), (buf), 3)) {
  7421  0F8A  0008               	return
  7422  0F8B                     l5611:	
  7423  0F8B  307D               	movlw	low (STR_31| (0+32768))
  7424  0F8C  0020               	movlb	0	; select bank0
  7425  0F8D  00A0               	movwf	strncmp@s1
  7426  0F8E  3091               	movlw	high (STR_31| (0+32768))
  7427  0F8F  00A1               	movwf	strncmp@s1+1
  7428  0F90  085B               	movf	command_handler@buf,w
  7429  0F91  00A2               	movwf	strncmp@s2
  7430  0F92  3002               	movlw	2
  7431  0F93  00A3               	movwf	strncmp@s2+1
  7432  0F94  3003               	movlw	3
  7433  0F95  00A4               	movwf	strncmp@len
  7434  0F96  3000               	movlw	0
  7435  0F97  00A5               	movwf	strncmp@len+1
  7436  0F98  3188  2002  318E   	fcall	_strncmp
  7437  0F9B  0020               	movlb	0	; select bank0
  7438  0F9C  0820               	movf	?_strncmp,w
  7439  0F9D  0421               	iorwf	?_strncmp+1,w
  7440  0F9E  1D03               	btfss	3,2
  7441  0F9F  2FD2               	goto	l5627
  7442                           
  7443                           ;main.c: 391: for (i=0; i<28; i++) {
  7444  0FA0  01E4               	clrf	command_handler@i
  7445  0FA1                     L10:	
  7446  0FA1  301C               	movlw	28
  7447  0FA2  0264               	subwf	command_handler@i,w
  7448  0FA3  1803               	btfsc	3,0
  7449  0FA4  0008               	return
  7450                           
  7451                           ;main.c: 392: DATAEE_WriteByte(1+i+1, 0);
  7452  0FA5  01A0               	clrf	DATAEE_WriteByte@bData
  7453  0FA6  0864               	movf	command_handler@i,w
  7454  0FA7  3E02               	addlw	2
  7455  0FA8  3193  23D1  318E   	fcall	_DATAEE_WriteByte
  7456                           
  7457                           ;main.c: 393: schedule[i/4][i%4] = 0;
  7458  0FAB  3004               	movlw	4
  7459  0FAC  0020               	movlb	0	; select bank0
  7460  0FAD  00A0               	movwf	___awdiv@divisor
  7461  0FAE  3000               	movlw	0
  7462  0FAF  00A1               	movwf	___awdiv@divisor+1
  7463  0FB0  0864               	movf	command_handler@i,w
  7464  0FB1  00DC               	movwf	??_command_handler
  7465  0FB2  01DD               	clrf	??_command_handler+1
  7466  0FB3  085C               	movf	??_command_handler,w
  7467  0FB4  00A2               	movwf	___awdiv@dividend
  7468  0FB5  085D               	movf	??_command_handler+1,w
  7469  0FB6  00A3               	movwf	___awdiv@dividend+1
  7470  0FB7  3188  20E5  318E   	fcall	___awdiv
  7471  0FBA  0020               	movlb	0	; select bank0
  7472  0FBB  0820               	movf	?___awdiv,w
  7473  0FBC  00DE               	movwf	??_command_handler+2
  7474  0FBD  3002               	movlw	2
  7475  0FBE                     u6595:	
  7476  0FBE  35DE               	lslf	??_command_handler+2,f
  7477  0FBF  0B89               	decfsz	9,f
  7478  0FC0  2FBE               	goto	u6595
  7479  0FC1  30A0               	movlw	(low (_schedule| (0+256)))& (0+255)
  7480  0FC2  075E               	addwf	??_command_handler+2,w
  7481  0FC3  00DF               	movwf	??_command_handler+3
  7482  0FC4  0864               	movf	command_handler@i,w
  7483  0FC5  3903               	andlw	3
  7484  0FC6  075F               	addwf	??_command_handler+3,w
  7485  0FC7  00E0               	movwf	??_command_handler+4
  7486  0FC8  0860               	movf	??_command_handler+4,w
  7487  0FC9  0086               	movwf	6
  7488  0FCA  3001               	movlw	1	; select bank3/4
  7489  0FCB  0087               	movwf	7
  7490  0FCC  0181               	clrf	1
  7491  0FCD  3001               	movlw	1
  7492  0FCE  00DC               	movwf	??_command_handler
  7493  0FCF  085C               	movf	??_command_handler,w
  7494  0FD0  07E4               	addwf	command_handler@i,f
  7495  0FD1  2FA1               	goto	L10
  7496  0FD2                     l5627:	
  7497                           ;main.c: 394: }
  7498                           ;main.c: 395: } else if (!strncmp(("SEN"), (buf), 3)) {
  7499                           
  7500  0FD2  3089               	movlw	low (STR_32| (0+32768))
  7501  0FD3  00A0               	movwf	strncmp@s1
  7502  0FD4  3091               	movlw	high (STR_32| (0+32768))
  7503  0FD5  00A1               	movwf	strncmp@s1+1
  7504  0FD6  085B               	movf	command_handler@buf,w
  7505  0FD7  00A2               	movwf	strncmp@s2
  7506  0FD8  3002               	movlw	2
  7507  0FD9  00A3               	movwf	strncmp@s2+1
  7508  0FDA  3003               	movlw	3
  7509  0FDB  00A4               	movwf	strncmp@len
  7510  0FDC  3000               	movlw	0
  7511  0FDD  00A5               	movwf	strncmp@len+1
  7512  0FDE  3188  2002  318E   	fcall	_strncmp
  7513  0FE1  0020               	movlb	0	; select bank0
  7514  0FE2  0820               	movf	?_strncmp,w
  7515  0FE3  0421               	iorwf	?_strncmp+1,w
  7516  0FE4  1D03               	btfss	3,2
  7517  0FE5  2FF7               	goto	l5633
  7518                           
  7519                           ;main.c: 396: dev_addr = atoi(&buf[4]);
  7520  0FE6  085B               	movf	command_handler@buf,w
  7521  0FE7  3E04               	addlw	4
  7522  0FE8  00A6               	movwf	atoi@s
  7523  0FE9  3002               	movlw	2
  7524  0FEA  00A7               	movwf	atoi@s+1
  7525  0FEB  3189  21E3  318E   	fcall	_atoi
  7526  0FEE  0020               	movlb	0	; select bank0
  7527  0FEF  0826               	movf	?_atoi,w
  7528  0FF0  00DC               	movwf	??_command_handler
  7529  0FF1  085C               	movf	??_command_handler,w
  7530  0FF2  00E3               	movwf	command_handler@dev_addr
  7531                           
  7532                           ;main.c: 397: one_shot_sen(dev_addr);
  7533  0FF3  0863               	movf	command_handler@dev_addr,w
  7534  0FF4  3196  2603         	fcall	_one_shot_sen
  7535                           
  7536                           ;main.c: 398: } else if (BACKPLANE_SLAVE_ADDRESS != 0x01) {
  7537  0FF6  0008               	return
  7538  0FF7                     l5633:	
  7539  0FF7  0021               	movlb	1	; select bank1
  7540  0FF8  036E               	decf	_BACKPLANE_SLAVE_ADDRESS^(0+128),w
  7541  0FF9  1903               	btfsc	3,2
  7542  0FFA  0008               	return
  7543                           
  7544                           ;main.c: 399: put_cmd(buf);
  7545  0FFB  0020               	movlb	0	; select bank0
  7546  0FFC  085B               	movf	command_handler@buf,w
  7547  0FFD  3197  271A         	fcall	_put_cmd
  7548  0FFF  0008               	return
  7549  1000                     __end_of_command_handler:	
  7550                           
  7551                           	psect	text30
  7552  0802                     __ptext30:	
  7553 ;; *************** function _strncmp *****************
  7554 ;; Defined at:
  7555 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strncmp.c"
  7556 ;; Parameters:    Size  Location     Type
  7557 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  7558 ;;		 -> STR_47(4), STR_46(4), STR_44(4), STR_43(4), 
  7559 ;;		 -> STR_40(4), STR_39(4), STR_38(4), STR_36(4), 
  7560 ;;		 -> STR_32(4), STR_31(4), STR_26(4), STR_24(4), 
  7561 ;;		 -> STR_22(4), STR_21(4), STR_20(4), STR_10(4), 
  7562 ;;		 -> STR_9(4), STR_6(4), STR_5(4), STR_4(4), 
  7563 ;;		 -> STR_1(4), 
  7564 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  7565 ;;		 -> buf(48), cmd_buf(192), 
  7566 ;;  len             2    4[BANK0 ] unsigned int 
  7567 ;; Auto vars:     Size  Location     Type
  7568 ;;		None
  7569 ;; Return value:  Size  Location     Type
  7570 ;;                  2    0[BANK0 ] int 
  7571 ;; Registers used:
  7572 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  7573 ;; Tracked objects:
  7574 ;;		On entry : 0/0
  7575 ;;		On exit  : 0/0
  7576 ;;		Unchanged: 0/0
  7577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7578 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7580 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7581 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7582 ;;Total ram usage:        8 bytes
  7583 ;; Hardware stack levels used:    1
  7584 ;; Hardware stack levels required when called:    3
  7585 ;; This function calls:
  7586 ;;		Nothing
  7587 ;; This function is called by:
  7588 ;;		_exec_remote_cmd
  7589 ;;		_command_handler
  7590 ;;		_PROTOCOL_Loop
  7591 ;; This function uses a non-reentrant model
  7592 ;;
  7593                           
  7594                           
  7595                           ;psect for function _strncmp
  7596  0802                     _strncmp:	
  7597  0802                     l5347:	
  7598                           ;incstack = 0
  7599                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  7600                           
  7601  0802  3001               	movlw	1
  7602  0803  0020               	movlb	0	; select bank0
  7603  0804  02A4               	subwf	strncmp@len,f
  7604  0805  3000               	movlw	0
  7605  0806  3BA5               	subwfb	strncmp@len+1,f
  7606  0807  0A24               	incf	strncmp@len,w
  7607  0808  1903               	btfsc	3,2
  7608  0809  0A25               	incf	strncmp@len+1,w
  7609  080A  1903               	btfsc	3,2
  7610  080B  2841               	goto	l5349
  7611  080C  0020               	movlb	0	; select bank0
  7612  080D  0820               	movf	strncmp@s1,w
  7613  080E  0084               	movwf	4
  7614  080F  0821               	movf	strncmp@s1+1,w
  7615  0810  0085               	movwf	5
  7616  0811  0012               	moviw fsr0++
  7617  0812  1903               	btfsc	3,2
  7618  0813  2820               	goto	l5341
  7619  0814  0822               	movf	strncmp@s2,w
  7620  0815  0086               	movwf	6
  7621  0816  0823               	movf	strncmp@s2+1,w
  7622  0817  0087               	movwf	7
  7623  0818  0820               	movf	strncmp@s1,w
  7624  0819  0084               	movwf	4
  7625  081A  0821               	movf	strncmp@s1+1,w
  7626  081B  0085               	movwf	5
  7627  081C  0800               	movf	0,w	;code access
  7628  081D  0601               	xorwf	1,w
  7629  081E  1903               	skipnz
  7630  081F  2838               	goto	l5345
  7631  0820                     l5341:	
  7632  0820  0822               	movf	strncmp@s2,w
  7633  0821  0086               	movwf	6
  7634  0822  0823               	movf	strncmp@s2+1,w
  7635  0823  0087               	movwf	7
  7636  0824  0801               	movf	1,w
  7637  0825  00A6               	movwf	??_strncmp
  7638  0826  01A7               	clrf	??_strncmp+1
  7639  0827  09A6               	comf	??_strncmp,f
  7640  0828  09A7               	comf	??_strncmp+1,f
  7641  0829  0AA6               	incf	??_strncmp,f
  7642  082A  1903               	skipnz
  7643  082B  0AA7               	incf	??_strncmp+1,f
  7644  082C  0820               	movf	strncmp@s1,w
  7645  082D  0084               	movwf	4
  7646  082E  0821               	movf	strncmp@s1+1,w
  7647  082F  0085               	movwf	5
  7648  0830  0800               	movf	0,w	;code access
  7649  0831  0726               	addwf	??_strncmp,w
  7650  0832  00A0               	movwf	?_strncmp
  7651  0833  0827               	movf	??_strncmp+1,w
  7652  0834  1803               	skipnc
  7653  0835  0A27               	incf	??_strncmp+1,w
  7654  0836  00A1               	movwf	?_strncmp+1
  7655  0837  0008               	return
  7656  0838                     l5345:	
  7657  0838  3001               	movlw	1
  7658  0839  07A0               	addwf	strncmp@s1,f
  7659  083A  3000               	movlw	0
  7660  083B  3DA1               	addwfc	strncmp@s1+1,f
  7661  083C  3001               	movlw	1
  7662  083D  07A2               	addwf	strncmp@s2,f
  7663  083E  3000               	movlw	0
  7664  083F  3DA3               	addwfc	strncmp@s2+1,f
  7665  0840  2802               	goto	l5347
  7666  0841                     l5349:	
  7667  0841  01A0               	clrf	?_strncmp
  7668  0842  01A1               	clrf	?_strncmp+1
  7669  0843  0008               	return
  7670  0844                     __end_of_strncmp:	
  7671                           
  7672                           	psect	text31
  7673  171A                     __ptext31:	
  7674 ;; *************** function _put_cmd *****************
  7675 ;; Defined at:
  7676 ;;		line 352 in file "main.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  buf             1    wreg     PTR unsigned char 
  7679 ;;		 -> buf(48), 
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;  buf             1   17[BANK0 ] PTR unsigned char 
  7682 ;;		 -> buf(48), 
  7683 ;; Return value:  Size  Location     Type
  7684 ;;                  1    wreg      void 
  7685 ;; Registers used:
  7686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7687 ;; Tracked objects:
  7688 ;;		On entry : 0/0
  7689 ;;		On exit  : 0/0
  7690 ;;		Unchanged: 0/0
  7691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7694 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7696 ;;Total ram usage:        6 bytes
  7697 ;; Hardware stack levels used:    1
  7698 ;; Hardware stack levels required when called:    4
  7699 ;; This function calls:
  7700 ;;		___wmul
  7701 ;;		_strcpy
  7702 ;; This function is called by:
  7703 ;;		_command_handler
  7704 ;; This function uses a non-reentrant model
  7705 ;;
  7706                           
  7707                           
  7708                           ;psect for function _put_cmd
  7709  171A                     _put_cmd:	
  7710                           
  7711                           ;incstack = 0
  7712                           ; Regs used in _put_cmd: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7713                           ;put_cmd@buf stored from wreg
  7714  171A  0020               	movlb	0	; select bank0
  7715  171B  00B1               	movwf	put_cmd@buf
  7716                           
  7717                           ;main.c: 353: static int8_t idx = -1;
  7718                           ;main.c: 354: if (++idx > 3) idx = 0;
  7719  171C  3001               	movlw	1
  7720  171D  00AC               	movwf	??_put_cmd
  7721  171E  082C               	movf	??_put_cmd,w
  7722  171F  0021               	movlb	1	; select bank1
  7723  1720  07ED               	addwf	put_cmd@idx^(0+128),f
  7724  1721  086D               	movf	put_cmd@idx^(0+128),w
  7725  1722  3A80               	xorlw	128
  7726  1723  3E7C               	addlw	-132
  7727  1724  1803               	btfsc	3,0
  7728  1725  01ED               	clrf	put_cmd@idx^(0+128)
  7729                           
  7730                           ;main.c: 355: if (cmd_buf[idx][0] == '\0') strcpy(cmd_buf[idx], buf);
  7731  1726  086D               	movf	put_cmd@idx^(0+128),w
  7732  1727  0020               	movlb	0	; select bank0
  7733  1728  00AC               	movwf	??_put_cmd
  7734  1729  01AD               	clrf	??_put_cmd+1
  7735  172A  082C               	movf	??_put_cmd,w
  7736  172B  00A0               	movwf	___wmul@multiplier
  7737  172C  082D               	movf	??_put_cmd+1,w
  7738  172D  00A1               	movwf	___wmul@multiplier+1
  7739  172E  3030               	movlw	48
  7740  172F  00A2               	movwf	___wmul@multiplicand
  7741  1730  3000               	movlw	0
  7742  1731  00A3               	movwf	___wmul@multiplicand+1
  7743  1732  3193  235A  3197   	fcall	___wmul
  7744  1735  3030               	movlw	48
  7745  1736  0020               	movlb	0	; select bank0
  7746  1737  00AE               	movwf	??_put_cmd+2
  7747  1738  3023               	movlw	35
  7748  1739  00AF               	movwf	??_put_cmd+3
  7749  173A  0820               	movf	?___wmul,w
  7750  173B  072E               	addwf	??_put_cmd+2,w
  7751  173C  0086               	movwf	6
  7752  173D  0821               	movf	?___wmul+1,w
  7753  173E  3D2F               	addwfc	??_put_cmd+3,w
  7754  173F  0087               	movwf	7
  7755  1740  0801               	movf	1,w
  7756  1741  1D03               	btfss	3,2
  7757  1742  0008               	return
  7758  1743  0021               	movlb	1	; select bank1
  7759  1744  086D               	movf	put_cmd@idx^(0+128),w
  7760  1745  0020               	movlb	0	; select bank0
  7761  1746  00AC               	movwf	??_put_cmd
  7762  1747  01AD               	clrf	??_put_cmd+1
  7763  1748  082C               	movf	??_put_cmd,w
  7764  1749  00A0               	movwf	___wmul@multiplier
  7765  174A  082D               	movf	??_put_cmd+1,w
  7766  174B  00A1               	movwf	___wmul@multiplier+1
  7767  174C  3030               	movlw	48
  7768  174D  00A2               	movwf	___wmul@multiplicand
  7769  174E  3000               	movlw	0
  7770  174F  00A3               	movwf	___wmul@multiplicand+1
  7771  1750  3193  235A  3197   	fcall	___wmul
  7772  1753  3030               	movlw	48
  7773  1754  0020               	movlb	0	; select bank0
  7774  1755  00AE               	movwf	??_put_cmd+2
  7775  1756  3023               	movlw	35
  7776  1757  00AF               	movwf	??_put_cmd+3
  7777  1758  0820               	movf	?___wmul,w
  7778  1759  072E               	addwf	??_put_cmd+2,w
  7779  175A  00A6               	movwf	strcpy@to
  7780  175B  0821               	movf	?___wmul+1,w
  7781  175C  3D2F               	addwfc	??_put_cmd+3,w
  7782  175D  00A7               	movwf	strcpy@to+1
  7783  175E  0831               	movf	put_cmd@buf,w
  7784  175F  00B0               	movwf	??_put_cmd+4
  7785  1760  0830               	movf	??_put_cmd+4,w
  7786  1761  00A8               	movwf	strcpy@from
  7787  1762  3193  2307         	fcall	_strcpy
  7788  1764  0008               	return
  7789  1765                     __end_of_put_cmd:	
  7790                           
  7791                           	psect	text32
  7792  1307                     __ptext32:	
  7793 ;; *************** function _strcpy *****************
  7794 ;; Defined at:
  7795 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\strcpy.c"
  7796 ;; Parameters:    Size  Location     Type
  7797 ;;  to              2    6[BANK0 ] PTR unsigned char 
  7798 ;;		 -> cmd_buf(192), 
  7799 ;;  from            1    8[BANK0 ] PTR const unsigned char 
  7800 ;;		 -> buf(48), 
  7801 ;; Auto vars:     Size  Location     Type
  7802 ;;  cp              2   10[BANK0 ] PTR unsigned char 
  7803 ;;		 -> cmd_buf(192), 
  7804 ;; Return value:  Size  Location     Type
  7805 ;;                  2    6[BANK0 ] PTR unsigned char 
  7806 ;; Registers used:
  7807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  7808 ;; Tracked objects:
  7809 ;;		On entry : 0/0
  7810 ;;		On exit  : 0/0
  7811 ;;		Unchanged: 0/0
  7812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7813 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7814 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7816 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7817 ;;Total ram usage:        6 bytes
  7818 ;; Hardware stack levels used:    1
  7819 ;; Hardware stack levels required when called:    3
  7820 ;; This function calls:
  7821 ;;		Nothing
  7822 ;; This function is called by:
  7823 ;;		_put_cmd
  7824 ;; This function uses a non-reentrant model
  7825 ;;
  7826                           
  7827                           
  7828                           ;psect for function _strcpy
  7829  1307                     _strcpy:	
  7830                           
  7831                           ;incstack = 0
  7832                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
  7833  1307  0020               	movlb	0	; select bank0
  7834  1308  0827               	movf	strcpy@to+1,w
  7835  1309  00AB               	movwf	strcpy@cp+1
  7836  130A  0826               	movf	strcpy@to,w
  7837  130B  00AA               	movwf	strcpy@cp
  7838  130C                     l5313:	
  7839  130C  082A               	movf	strcpy@cp,w
  7840  130D  0086               	movwf	6
  7841  130E  082B               	movf	strcpy@cp+1,w
  7842  130F  0087               	movwf	7
  7843  1310  0828               	movf	strcpy@from,w
  7844  1311  0084               	movwf	4
  7845  1312  3002               	movlw	2	; select bank4/5
  7846  1313  0085               	movwf	5
  7847  1314  0800               	movf	0,w
  7848  1315  3FC0               	movwi [0]fsr1
  7849  1316  0889               	movf	9,f
  7850  1317  1903               	btfsc	3,2
  7851  1318  0008               	return
  7852  1319  3001               	movlw	1
  7853  131A  07AA               	addwf	strcpy@cp,f
  7854  131B  3000               	movlw	0
  7855  131C  3DAB               	addwfc	strcpy@cp+1,f
  7856  131D  3001               	movlw	1
  7857  131E  00A9               	movwf	??_strcpy
  7858  131F  0829               	movf	??_strcpy,w
  7859  1320  07A8               	addwf	strcpy@from,f
  7860  1321  2B0C               	goto	l5313
  7861  1322                     __end_of_strcpy:	
  7862                           ;	Return value of _strcpy is never used
  7863                           
  7864                           
  7865                           	psect	text33
  7866  168A                     __ptext33:	
  7867 ;; *************** function _print_dev_map *****************
  7868 ;; Defined at:
  7869 ;;		line 215 in file "main.c"
  7870 ;; Parameters:    Size  Location     Type
  7871 ;;		None
  7872 ;; Auto vars:     Size  Location     Type
  7873 ;;  len             1   39[BANK0 ] unsigned char 
  7874 ;;  i               1   38[BANK0 ] unsigned char 
  7875 ;; Return value:  Size  Location     Type
  7876 ;;                  1    wreg      void 
  7877 ;; Registers used:
  7878 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7879 ;; Tracked objects:
  7880 ;;		On entry : 0/0
  7881 ;;		On exit  : 0/0
  7882 ;;		Unchanged: 0/0
  7883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7885 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7886 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7887 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7888 ;;Total ram usage:        4 bytes
  7889 ;; Hardware stack levels used:    1
  7890 ;; Hardware stack levels required when called:    6
  7891 ;; This function calls:
  7892 ;;		_dev_map_iterator
  7893 ;;		_printf
  7894 ;; This function is called by:
  7895 ;;		_command_handler
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899                           
  7900                           ;psect for function _print_dev_map
  7901  168A                     _print_dev_map:	
  7902                           
  7903                           ;main.c: 216: uint8_t i;
  7904                           ;main.c: 217: uint8_t len = devs;
  7905                           
  7906                           ;incstack = 0
  7907                           ; Regs used in _print_dev_map: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7908  168A  0021               	movlb	1	; select bank1
  7909  168B  0864               	movf	_devs^(0+128),w
  7910  168C  0020               	movlb	0	; select bank0
  7911  168D  00C4               	movwf	??_print_dev_map
  7912  168E  0844               	movf	??_print_dev_map,w
  7913  168F  00C7               	movwf	print_dev_map@len
  7914                           
  7915                           ;main.c: 218: if (len > 0) {
  7916  1690  0847               	movf	print_dev_map@len,w
  7917  1691  1903               	btfsc	3,2
  7918  1692  2ECA               	goto	l5441
  7919                           
  7920                           ;main.c: 219: len--;
  7921  1693  3001               	movlw	1
  7922  1694  02C7               	subwf	print_dev_map@len,f
  7923                           
  7924                           ;main.c: 220: printf("$:MAP:");
  7925  1695  304B               	movlw	low (STR_13| (0+32768))
  7926  1696  00AE               	movwf	printf@f
  7927  1697  3091               	movlw	high (STR_13| (0+32768))
  7928  1698  00AF               	movwf	printf@f+1
  7929  1699  3185  2519  3196   	fcall	_printf
  7930                           
  7931                           ;main.c: 221: for (i=0; i<len; i++) printf("%d,", dev_map_iterator());
  7932  169C  0020               	movlb	0	; select bank0
  7933  169D  01C6               	clrf	print_dev_map@i
  7934  169E                     l5437:	
  7935  169E  0847               	movf	print_dev_map@len,w
  7936  169F  0246               	subwf	print_dev_map@i,w
  7937  16A0  1803               	btfsc	3,0
  7938  16A1  2EB9               	goto	l5439
  7939  16A2  3071               	movlw	low (STR_14| (0+32768))
  7940  16A3  00AE               	movwf	printf@f
  7941  16A4  3091               	movlw	high (STR_14| (0+32768))
  7942  16A5  00AF               	movwf	printf@f+1
  7943  16A6  3187  27A2  3196   	fcall	_dev_map_iterator
  7944  16A9  0020               	movlb	0	; select bank0
  7945  16AA  00C4               	movwf	??_print_dev_map
  7946  16AB  01C5               	clrf	??_print_dev_map+1
  7947  16AC  0844               	movf	??_print_dev_map,w
  7948  16AD  00B0               	movwf	?_printf+2
  7949  16AE  0845               	movf	??_print_dev_map+1,w
  7950  16AF  00B1               	movwf	?_printf+3
  7951  16B0  3185  2519  3196   	fcall	_printf
  7952  16B3  3001               	movlw	1
  7953  16B4  0020               	movlb	0	; select bank0
  7954  16B5  00C4               	movwf	??_print_dev_map
  7955  16B6  0844               	movf	??_print_dev_map,w
  7956  16B7  07C6               	addwf	print_dev_map@i,f
  7957  16B8  2E9E               	goto	l5437
  7958  16B9                     l5439:	
  7959                           
  7960                           ;main.c: 222: printf("%d\n", dev_map_iterator());
  7961  16B9  30DA               	movlw	low ((STR_48+6)| (0+32768))
  7962  16BA  00AE               	movwf	printf@f
  7963  16BB  3090               	movlw	high ((STR_48+6)| (0+32768))
  7964  16BC  00AF               	movwf	printf@f+1
  7965  16BD  3187  27A2  3196   	fcall	_dev_map_iterator
  7966  16C0  0020               	movlb	0	; select bank0
  7967  16C1  00C4               	movwf	??_print_dev_map
  7968  16C2  01C5               	clrf	??_print_dev_map+1
  7969  16C3  0844               	movf	??_print_dev_map,w
  7970  16C4  00B0               	movwf	?_printf+2
  7971  16C5  0845               	movf	??_print_dev_map+1,w
  7972  16C6  00B1               	movwf	?_printf+3
  7973  16C7  3185  2519         	fcall	_printf
  7974                           
  7975                           ;main.c: 223: } else {
  7976  16C9  0008               	return
  7977  16CA                     l5441:	
  7978                           
  7979                           ;main.c: 224: printf("!:MAP:NO SLAVE FOUND\n");
  7980  16CA  3072               	movlw	low (STR_16| (0+32768))
  7981  16CB  0020               	movlb	0	; select bank0
  7982  16CC  00AE               	movwf	printf@f
  7983  16CD  3090               	movlw	high (STR_16| (0+32768))
  7984  16CE  00AF               	movwf	printf@f+1
  7985  16CF  3185  2519         	fcall	_printf
  7986  16D1  0008               	return
  7987  16D2                     __end_of_print_dev_map:	
  7988                           
  7989                           	psect	text34
  7990  07A2                     __ptext34:	
  7991 ;; *************** function _dev_map_iterator *****************
  7992 ;; Defined at:
  7993 ;;		line 151 in file "main.c"
  7994 ;; Parameters:    Size  Location     Type
  7995 ;;		None
  7996 ;; Auto vars:     Size  Location     Type
  7997 ;;  dev_addr        1    7[BANK0 ] unsigned char 
  7998 ;;  exist           1    6[BANK0 ] unsigned char 
  7999 ;; Return value:  Size  Location     Type
  8000 ;;                  1    wreg      unsigned char 
  8001 ;; Registers used:
  8002 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  8003 ;; Tracked objects:
  8004 ;;		On entry : 0/0
  8005 ;;		On exit  : 0/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8011 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;Total ram usage:        8 bytes
  8013 ;; Hardware stack levels used:    1
  8014 ;; Hardware stack levels required when called:    3
  8015 ;; This function calls:
  8016 ;;		Nothing
  8017 ;; This function is called by:
  8018 ;;		_print_dev_map
  8019 ;; This function uses a non-reentrant model
  8020 ;;
  8021                           
  8022                           
  8023                           ;psect for function _dev_map_iterator
  8024  07A2                     _dev_map_iterator:	
  8025                           
  8026                           ;main.c: 152: static uint8_t xx = 0;
  8027                           ;main.c: 153: static uint8_t yy = 0;
  8028                           ;main.c: 154: static bool start = 1;
  8029                           ;main.c: 155: bool exist = 0;
  8030                           
  8031                           ;incstack = 0
  8032                           ; Regs used in _dev_map_iterator: [wreg-fsr1h+status,2+status,0+pclath]
  8033  07A2  0020               	movlb	0	; select bank0
  8034  07A3  01A6               	clrf	dev_map_iterator@exist
  8035                           
  8036                           ;main.c: 156: uint8_t dev_addr;
  8037                           ;main.c: 158: if (devs) {
  8038  07A4  0021               	movlb	1	; select bank1
  8039  07A5  0864               	movf	_devs^(0+128),w
  8040  07A6  1903               	btfsc	3,2
  8041  07A7  2FF9               	goto	l5253
  8042  07A8                     l5237:	
  8043                           ;main.c: 159: while(1) {
  8044                           
  8045                           
  8046                           ;main.c: 160: if (xx > 7) {
  8047  07A8  3008               	movlw	8
  8048  07A9  0263               	subwf	dev_map_iterator@xx^(0+128),w
  8049  07AA  1C03               	skipc
  8050  07AB  2FB3               	goto	l5243
  8051                           
  8052                           ;main.c: 161: xx = 0;
  8053  07AC  01E3               	clrf	dev_map_iterator@xx^(0+128)
  8054                           
  8055                           ;main.c: 162: yy++;
  8056  07AD  3001               	movlw	1
  8057  07AE  0020               	movlb	0	; select bank0
  8058  07AF  00A0               	movwf	??_dev_map_iterator
  8059  07B0  0820               	movf	??_dev_map_iterator,w
  8060  07B1  0021               	movlb	1	; select bank1
  8061  07B2  07E2               	addwf	dev_map_iterator@yy^(0+128),f
  8062  07B3                     l5243:	
  8063                           
  8064                           ;main.c: 163: }
  8065                           ;main.c: 164: if (yy >= MAX_Y) {
  8066  07B3  300A               	movlw	low (_MAX_Y| (0+32768))
  8067  07B4  0084               	movwf	4
  8068  07B5  3090               	movlw	high (_MAX_Y| (0+32768))
  8069  07B6  0085               	movwf	5
  8070  07B7  0800               	movf	0,w	;code access
  8071  07B8  0262               	subwf	dev_map_iterator@yy^(0+128),w
  8072  07B9  1C03               	skipc
  8073  07BA  2FBD               	goto	l5247
  8074                           
  8075                           ;main.c: 165: xx = 0;
  8076  07BB  01E3               	clrf	dev_map_iterator@xx^(0+128)
  8077                           
  8078                           ;main.c: 166: yy = 0;
  8079  07BC  01E2               	clrf	dev_map_iterator@yy^(0+128)
  8080  07BD                     l5247:	
  8081                           
  8082                           ;main.c: 167: }
  8083                           ;main.c: 168: if ((0x01 << xx) & dev_map[yy]) {
  8084  07BD  0862               	movf	dev_map_iterator@yy^(0+128),w
  8085  07BE  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
  8086  07BF  0086               	movwf	6
  8087  07C0  3001               	movlw	1	; select bank2/3
  8088  07C1  0087               	movwf	7
  8089  07C2  0801               	movf	1,w
  8090  07C3  0020               	movlb	0	; select bank0
  8091  07C4  00A0               	movwf	??_dev_map_iterator
  8092  07C5  01A1               	clrf	??_dev_map_iterator+1
  8093  07C6  3001               	movlw	1
  8094  07C7  00A2               	movwf	??_dev_map_iterator+2
  8095  07C8  3000               	movlw	0
  8096  07C9  00A3               	movwf	??_dev_map_iterator+3
  8097  07CA  0021               	movlb	1	; select bank1
  8098  07CB  0A63               	incf	dev_map_iterator@xx^(0+128),w
  8099  07CC  0020               	movlb	0	; select bank0
  8100  07CD  2FD0               	goto	u5944
  8101  07CE                     u5945:	
  8102  07CE  35A2               	lslf	??_dev_map_iterator+2,f
  8103  07CF  0DA3               	rlf	??_dev_map_iterator+3,f
  8104  07D0                     u5944:	
  8105  07D0  0B89               	decfsz	9,f
  8106  07D1  2FCE               	goto	u5945
  8107  07D2  0820               	movf	??_dev_map_iterator,w
  8108  07D3  0522               	andwf	??_dev_map_iterator+2,w
  8109  07D4  00A4               	movwf	??_dev_map_iterator+4
  8110  07D5  0821               	movf	??_dev_map_iterator+1,w
  8111  07D6  0523               	andwf	??_dev_map_iterator+3,w
  8112  07D7  00A5               	movwf	??_dev_map_iterator+5
  8113  07D8  0824               	movf	??_dev_map_iterator+4,w
  8114  07D9  0425               	iorwf	??_dev_map_iterator+5,w
  8115  07DA  1903               	btfsc	3,2
  8116  07DB  2FF2               	goto	l5251
  8117                           
  8118                           ;main.c: 169: dev_addr = yy * 8 + xx++;
  8119  07DC  0021               	movlb	1	; select bank1
  8120  07DD  0862               	movf	dev_map_iterator@yy^(0+128),w
  8121  07DE  0020               	movlb	0	; select bank0
  8122  07DF  00A0               	movwf	??_dev_map_iterator
  8123  07E0  3002               	movlw	2
  8124  07E1                     u5965:	
  8125  07E1  35A0               	lslf	??_dev_map_iterator,f
  8126  07E2  3EFF               	addlw	-1
  8127  07E3  1D03               	skipz
  8128  07E4  2FE1               	goto	u5965
  8129  07E5  3520               	lslf	??_dev_map_iterator,w
  8130  07E6  0021               	movlb	1	; select bank1
  8131  07E7  0763               	addwf	dev_map_iterator@xx^(0+128),w
  8132  07E8  0020               	movlb	0	; select bank0
  8133  07E9  00A1               	movwf	??_dev_map_iterator+1
  8134  07EA  0821               	movf	??_dev_map_iterator+1,w
  8135  07EB  00A7               	movwf	dev_map_iterator@dev_addr
  8136  07EC  3001               	movlw	1
  8137  07ED  00A0               	movwf	??_dev_map_iterator
  8138  07EE  0820               	movf	??_dev_map_iterator,w
  8139  07EF  0021               	movlb	1	; select bank1
  8140  07F0  07E3               	addwf	dev_map_iterator@xx^(0+128),f
  8141                           
  8142                           ;main.c: 170: break;
  8143  07F1  2FF9               	goto	l5253
  8144  07F2                     l5251:	
  8145                           
  8146                           ;main.c: 171: }
  8147                           ;main.c: 172: xx++;
  8148  07F2  3001               	movlw	1
  8149  07F3  0020               	movlb	0	; select bank0
  8150  07F4  00A0               	movwf	??_dev_map_iterator
  8151  07F5  0820               	movf	??_dev_map_iterator,w
  8152  07F6  0021               	movlb	1	; select bank1
  8153  07F7  07E3               	addwf	dev_map_iterator@xx^(0+128),f
  8154  07F8  2FA8               	goto	l5237
  8155  07F9                     l5253:	
  8156                           
  8157                           ;main.c: 173: }
  8158                           ;main.c: 174: }
  8159                           ;main.c: 175: return dev_addr;
  8160  07F9  0020               	movlb	0	; select bank0
  8161  07FA  0827               	movf	dev_map_iterator@dev_addr,w
  8162  07FB  0008               	return
  8163  07FC                     __end_of_dev_map_iterator:	
  8164                           
  8165                           	psect	text35
  8166  1603                     __ptext35:	
  8167 ;; *************** function _one_shot_sen *****************
  8168 ;; Defined at:
  8169 ;;		line 265 in file "main.c"
  8170 ;; Parameters:    Size  Location     Type
  8171 ;;  dev_addr        1    wreg     unsigned char 
  8172 ;; Auto vars:     Size  Location     Type
  8173 ;;  dev_addr        1   58[BANK0 ] unsigned char 
  8174 ;;  status          1   57[BANK0 ] unsigned char 
  8175 ;; Return value:  Size  Location     Type
  8176 ;;                  1    wreg      void 
  8177 ;; Registers used:
  8178 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8179 ;; Tracked objects:
  8180 ;;		On entry : 0/0
  8181 ;;		On exit  : 0/0
  8182 ;;		Unchanged: 0/0
  8183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8185 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8186 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8187 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8188 ;;Total ram usage:        5 bytes
  8189 ;; Hardware stack levels used:    1
  8190 ;; Hardware stack levels required when called:    8
  8191 ;; This function calls:
  8192 ;;		_detected
  8193 ;;		_i2c1_write_no_data
  8194 ;;		_printf
  8195 ;;		_sen
  8196 ;; This function is called by:
  8197 ;;		_command_handler
  8198 ;; This function uses a non-reentrant model
  8199 ;;
  8200                           
  8201                           
  8202                           ;psect for function _one_shot_sen
  8203  1603                     _one_shot_sen:	
  8204                           
  8205                           ;incstack = 0
  8206                           ; Regs used in _one_shot_sen: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8207                           ;one_shot_sen@dev_addr stored from wreg
  8208  1603  0020               	movlb	0	; select bank0
  8209  1604  00DA               	movwf	one_shot_sen@dev_addr
  8210                           
  8211                           ;main.c: 266: if (!detected(dev_addr)) {
  8212  1605  085A               	movf	one_shot_sen@dev_addr,w
  8213  1606  3195  2567  3196   	fcall	_detected
  8214  1609  3A00               	xorlw	0
  8215  160A  1D03               	skipz
  8216  160B  2E1B               	goto	l5447
  8217                           
  8218                           ;main.c: 267: printf("!:%%%d:UNDETECTED_DEVICE\n", dev_addr);
  8219  160C  303F               	movlw	low (STR_17| (0+32768))
  8220  160D  0020               	movlb	0	; select bank0
  8221  160E  00AE               	movwf	printf@f
  8222  160F  3090               	movlw	high (STR_17| (0+32768))
  8223  1610  00AF               	movwf	printf@f+1
  8224  1611  085A               	movf	one_shot_sen@dev_addr,w
  8225  1612  00D6               	movwf	??_one_shot_sen
  8226  1613  01D7               	clrf	??_one_shot_sen+1
  8227  1614  0856               	movf	??_one_shot_sen,w
  8228  1615  00B0               	movwf	?_printf+2
  8229  1616  0857               	movf	??_one_shot_sen+1,w
  8230  1617  00B1               	movwf	?_printf+3
  8231  1618  3185  2519         	fcall	_printf
  8232                           
  8233                           ;main.c: 268: } else {
  8234  161A  0008               	return
  8235  161B                     l5447:	
  8236                           
  8237                           ;main.c: 269: uint8_t status = sen(dev_addr);
  8238  161B  0020               	movlb	0	; select bank0
  8239  161C  085A               	movf	one_shot_sen@dev_addr,w
  8240  161D  3186  26EE  3196   	fcall	_sen
  8241  1620  0020               	movlb	0	; select bank0
  8242  1621  00D6               	movwf	??_one_shot_sen
  8243  1622  0856               	movf	??_one_shot_sen,w
  8244  1623  00D9               	movwf	one_shot_sen@status
  8245                           
  8246                           ;main.c: 270: if (status > 0) {
  8247  1624  0859               	movf	one_shot_sen@status,w
  8248  1625  1903               	btfsc	3,2
  8249  1626  0008               	return
  8250                           
  8251                           ;main.c: 271: printf("!:%%%d:NETWORK_ERROR\n", dev_addr);
  8252  1627  3088               	movlw	low (STR_18| (0+32768))
  8253  1628  00AE               	movwf	printf@f
  8254  1629  3090               	movlw	high (STR_18| (0+32768))
  8255  162A  00AF               	movwf	printf@f+1
  8256  162B  085A               	movf	one_shot_sen@dev_addr,w
  8257  162C  00D6               	movwf	??_one_shot_sen
  8258  162D  01D7               	clrf	??_one_shot_sen+1
  8259  162E  0856               	movf	??_one_shot_sen,w
  8260  162F  00B0               	movwf	?_printf+2
  8261  1630  0857               	movf	??_one_shot_sen+1,w
  8262  1631  00B1               	movwf	?_printf+3
  8263  1632  3185  2519  3196   	fcall	_printf
  8264                           
  8265                           ;main.c: 272: i2c1_write_no_data(dev_addr, 0x0c);
  8266  1635  0020               	movlb	0	; select bank0
  8267  1636  085A               	movf	one_shot_sen@dev_addr,w
  8268  1637  00D6               	movwf	??_one_shot_sen
  8269  1638  01D7               	clrf	??_one_shot_sen+1
  8270  1639  0856               	movf	??_one_shot_sen,w
  8271  163A  00AE               	movwf	i2c1_write_no_data@dev_addr
  8272  163B  0857               	movf	??_one_shot_sen+1,w
  8273  163C  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  8274  163D  300C               	movlw	12
  8275  163E  00D8               	movwf	??_one_shot_sen+2
  8276  163F  0858               	movf	??_one_shot_sen+2,w
  8277  1640  00B0               	movwf	i2c1_write_no_data@reg_addr
  8278  1641  3194  24B6         	fcall	_i2c1_write_no_data
  8279  1643  0008               	return
  8280  1644                     __end_of_one_shot_sen:	
  8281                           
  8282                           	psect	text36
  8283  06EE                     __ptext36:	
  8284 ;; *************** function _sen *****************
  8285 ;; Defined at:
  8286 ;;		line 232 in file "main.c"
  8287 ;; Parameters:    Size  Location     Type
  8288 ;;  dev_addr        1    wreg     unsigned char 
  8289 ;; Auto vars:     Size  Location     Type
  8290 ;;  dev_addr        1   53[BANK0 ] unsigned char 
  8291 ;;  status          1   52[BANK0 ] unsigned char 
  8292 ;;  length          1   51[BANK0 ] unsigned char 
  8293 ;;  type            1   50[BANK0 ] unsigned char 
  8294 ;;  i               1    0        unsigned char 
  8295 ;;  data            1    0        unsigned char 
  8296 ;; Return value:  Size  Location     Type
  8297 ;;                  1    wreg      unsigned char 
  8298 ;; Registers used:
  8299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8300 ;; Tracked objects:
  8301 ;;		On entry : 0/0
  8302 ;;		On exit  : 0/0
  8303 ;;		Unchanged: 0/0
  8304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8306 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8307 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8308 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8309 ;;Total ram usage:        9 bytes
  8310 ;; Hardware stack levels used:    1
  8311 ;; Hardware stack levels required when called:    7
  8312 ;; This function calls:
  8313 ;;		_PROTOCOL_Print_TLV
  8314 ;;		_i2c1_read
  8315 ;;		_i2c1_write_no_data
  8316 ;; This function is called by:
  8317 ;;		_one_shot_sen
  8318 ;;		_fetch
  8319 ;; This function uses a non-reentrant model
  8320 ;;
  8321                           
  8322                           
  8323                           ;psect for function _sen
  8324  06EE                     _sen:	
  8325                           
  8326                           ;incstack = 0
  8327                           ; Regs used in _sen: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8328                           ;sen@dev_addr stored from wreg
  8329  06EE  0020               	movlb	0	; select bank0
  8330  06EF  00D5               	movwf	sen@dev_addr
  8331                           
  8332                           ;main.c: 233: uint8_t status;
  8333                           ;main.c: 234: uint8_t type;
  8334                           ;main.c: 235: uint8_t length ,data, i;
  8335                           ;main.c: 236: LATCbits.LATC7 ^= 1;
  8336  06F0  0022               	movlb	2	; select bank2
  8337  06F1  0D0E               	rlf	14,w	;volatile
  8338  06F2  0D0E               	rlf	14,w	;volatile
  8339  06F3  3901               	andlw	1
  8340  06F4  0020               	movlb	0	; select bank0
  8341  06F5  00CD               	movwf	??_sen
  8342  06F6  3001               	movlw	1
  8343  06F7  06CD               	xorwf	??_sen,f
  8344  06F8  0CCD               	rrf	??_sen,f
  8345  06F9  0CCD               	rrf	??_sen,f
  8346  06FA  0022               	movlb	2	; select bank2
  8347  06FB  080E               	movf	14,w	;volatile
  8348  06FC  0020               	movlb	0	; select bank0
  8349  06FD  064D               	xorwf	??_sen,w
  8350  06FE  397F               	andlw	-129
  8351  06FF  064D               	xorwf	??_sen,w
  8352  0700  0022               	movlb	2	; select bank2
  8353  0701  008E               	movwf	14	;volatile
  8354                           
  8355                           ;main.c: 238: _delay((unsigned long)((200)*(32000000/4000000.0)));
  8356  0702  30E4               	movlw	228
  8357  0703                     u7387:	
  8358  0703  3200               	nop2
  8359  0704  3200               	nop2
  8360  0705  0B89               	decfsz	9,f
  8361  0706  2F03               	goto	u7387
  8362  0707  3200               	nop2
  8363  0708  3200               	nop2
  8364                           
  8365                           ;main.c: 239: i2c1_write_no_data(dev_addr, 0x06);
  8366  0709  0020               	movlb	0	; select bank0
  8367  070A  0855               	movf	sen@dev_addr,w
  8368  070B  00CD               	movwf	??_sen
  8369  070C  01CE               	clrf	??_sen+1
  8370  070D  084D               	movf	??_sen,w
  8371  070E  00AE               	movwf	i2c1_write_no_data@dev_addr
  8372  070F  084E               	movf	??_sen+1,w
  8373  0710  00AF               	movwf	i2c1_write_no_data@dev_addr+1
  8374  0711  3006               	movlw	6
  8375  0712  00CF               	movwf	??_sen+2
  8376  0713  084F               	movf	??_sen+2,w
  8377  0714  00B0               	movwf	i2c1_write_no_data@reg_addr
  8378  0715  3194  24B6  3186   	fcall	_i2c1_write_no_data
  8379                           
  8380                           ;main.c: 241: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  8381  0718  300B               	movlw	11
  8382  0719  0020               	movlb	0	; select bank0
  8383  071A  00CD               	movwf	??_sen
  8384  071B  3062               	movlw	98
  8385  071C                     u7397:	
  8386  071C  0B89               	decfsz	9,f
  8387  071D  2F1C               	goto	u7397
  8388  071E  0BCD               	decfsz	??_sen,f
  8389  071F  2F1C               	goto	u7397
  8390  0720  0000               	nop
  8391                           
  8392                           ;main.c: 242: status = i2c1_read(dev_addr, 0x07, &type, 1);
  8393  0721  0020               	movlb	0	; select bank0
  8394  0722  0855               	movf	sen@dev_addr,w
  8395  0723  00CD               	movwf	??_sen
  8396  0724  01CE               	clrf	??_sen+1
  8397  0725  084D               	movf	??_sen,w
  8398  0726  00B0               	movwf	i2c1_read@dev_addr
  8399  0727  084E               	movf	??_sen+1,w
  8400  0728  00B1               	movwf	i2c1_read@dev_addr+1
  8401  0729  3007               	movlw	7
  8402  072A  00CF               	movwf	??_sen+2
  8403  072B  084F               	movf	??_sen+2,w
  8404  072C  00B2               	movwf	i2c1_read@reg_addr
  8405  072D  3052               	movlw	low sen@type
  8406  072E  00B3               	movwf	i2c1_read@pbuf
  8407  072F  3000               	movlw	high sen@type
  8408  0730  00B4               	movwf	i2c1_read@pbuf+1
  8409  0731  01B5               	clrf	i2c1_read@len
  8410  0732  0AB5               	incf	i2c1_read@len,f
  8411  0733  3189  2137  3186   	fcall	_i2c1_read
  8412  0736  0020               	movlb	0	; select bank0
  8413  0737  00D0               	movwf	??_sen+3
  8414  0738  0850               	movf	??_sen+3,w
  8415  0739  00D4               	movwf	sen@status
  8416                           
  8417                           ;main.c: 243: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8418  073A  30A0               	movlw	160
  8419  073B                     u7407:	
  8420  073B  3200               	nop2
  8421  073C  0B89               	decfsz	9,f
  8422  073D  2F3B               	goto	u7407
  8423                           
  8424                           ;main.c: 244: if (status == 0) {
  8425  073E  0020               	movlb	0	; select bank0
  8426  073F  0854               	movf	sen@status,w
  8427  0740  1D03               	btfss	3,2
  8428  0741  2F9F               	goto	l5303
  8429                           
  8430                           ;main.c: 245: if (type == 0x06) {
  8431  0742  3006               	movlw	6
  8432  0743  0652               	xorwf	sen@type,w
  8433  0744  1D03               	btfss	3,2
  8434  0745  2F4D               	goto	l5289
  8435                           
  8436                           ;main.c: 246: PROTOCOL_Print_TLV(dev_addr, 0x06, 0, (0));
  8437  0746  3006               	movlw	6
  8438  0747  00CD               	movwf	??_sen
  8439  0748  084D               	movf	??_sen,w
  8440  0749  00C4               	movwf	PROTOCOL_Print_TLV@type
  8441  074A  01C5               	clrf	PROTOCOL_Print_TLV@length
  8442  074B  01C6               	clrf	PROTOCOL_Print_TLV@pbuffer
  8443  074C  2F9C               	goto	L11
  8444  074D                     l5289:	
  8445                           ;main.c: 247: } else {
  8446                           
  8447                           
  8448                           ;main.c: 248: status = i2c1_read(dev_addr, 0x07, &length, 1);
  8449  074D  0020               	movlb	0	; select bank0
  8450  074E  0855               	movf	sen@dev_addr,w
  8451  074F  00CD               	movwf	??_sen
  8452  0750  01CE               	clrf	??_sen+1
  8453  0751  084D               	movf	??_sen,w
  8454  0752  00B0               	movwf	i2c1_read@dev_addr
  8455  0753  084E               	movf	??_sen+1,w
  8456  0754  00B1               	movwf	i2c1_read@dev_addr+1
  8457  0755  3007               	movlw	7
  8458  0756  00CF               	movwf	??_sen+2
  8459  0757  084F               	movf	??_sen+2,w
  8460  0758  00B2               	movwf	i2c1_read@reg_addr
  8461  0759  3053               	movlw	low sen@length
  8462  075A  00B3               	movwf	i2c1_read@pbuf
  8463  075B  3000               	movlw	high sen@length
  8464  075C  00B4               	movwf	i2c1_read@pbuf+1
  8465  075D  01B5               	clrf	i2c1_read@len
  8466  075E  0AB5               	incf	i2c1_read@len,f
  8467  075F  3189  2137  3186   	fcall	_i2c1_read
  8468  0762  0020               	movlb	0	; select bank0
  8469  0763  00D0               	movwf	??_sen+3
  8470  0764  0850               	movf	??_sen+3,w
  8471  0765  00D4               	movwf	sen@status
  8472                           
  8473                           ;main.c: 249: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8474  0766  30A0               	movlw	160
  8475  0767                     u7417:	
  8476  0767  3200               	nop2
  8477  0768  0B89               	decfsz	9,f
  8478  0769  2F67               	goto	u7417
  8479                           
  8480                           ;main.c: 250: if (status == 0) {
  8481  076A  0020               	movlb	0	; select bank0
  8482  076B  0854               	movf	sen@status,w
  8483  076C  1D03               	btfss	3,2
  8484  076D  2F9F               	goto	l5303
  8485                           
  8486                           ;main.c: 251: status = i2c1_read(dev_addr, 0x07, read_buf, length);
  8487  076E  0855               	movf	sen@dev_addr,w
  8488  076F  00CD               	movwf	??_sen
  8489  0770  01CE               	clrf	??_sen+1
  8490  0771  084D               	movf	??_sen,w
  8491  0772  00B0               	movwf	i2c1_read@dev_addr
  8492  0773  084E               	movf	??_sen+1,w
  8493  0774  00B1               	movwf	i2c1_read@dev_addr+1
  8494  0775  3007               	movlw	7
  8495  0776  00CF               	movwf	??_sen+2
  8496  0777  084F               	movf	??_sen+2,w
  8497  0778  00B2               	movwf	i2c1_read@reg_addr
  8498  0779  30BC               	movlw	low _read_buf
  8499  077A  00B3               	movwf	i2c1_read@pbuf
  8500  077B  3001               	movlw	high _read_buf
  8501  077C  00B4               	movwf	i2c1_read@pbuf+1
  8502  077D  0853               	movf	sen@length,w
  8503  077E  00D0               	movwf	??_sen+3
  8504  077F  0850               	movf	??_sen+3,w
  8505  0780  00B5               	movwf	i2c1_read@len
  8506  0781  3189  2137  3186   	fcall	_i2c1_read
  8507  0784  0020               	movlb	0	; select bank0
  8508  0785  00D1               	movwf	??_sen+4
  8509  0786  0851               	movf	??_sen+4,w
  8510  0787  00D4               	movwf	sen@status
  8511                           
  8512                           ;main.c: 252: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8513  0788  30A0               	movlw	160
  8514  0789                     u7427:	
  8515  0789  3200               	nop2
  8516  078A  0B89               	decfsz	9,f
  8517  078B  2F89               	goto	u7427
  8518                           
  8519                           ;main.c: 253: if (status == 0) {
  8520  078C  0020               	movlb	0	; select bank0
  8521  078D  0854               	movf	sen@status,w
  8522  078E  1D03               	btfss	3,2
  8523  078F  2F9F               	goto	l5303
  8524                           
  8525                           ;main.c: 254: PROTOCOL_Print_TLV(dev_addr, type, length, read_buf);
  8526  0790  0852               	movf	sen@type,w
  8527  0791  00CD               	movwf	??_sen
  8528  0792  084D               	movf	??_sen,w
  8529  0793  00C4               	movwf	PROTOCOL_Print_TLV@type
  8530  0794  0853               	movf	sen@length,w
  8531  0795  00CE               	movwf	??_sen+1
  8532  0796  084E               	movf	??_sen+1,w
  8533  0797  00C5               	movwf	PROTOCOL_Print_TLV@length
  8534  0798  30BC               	movlw	(low (_read_buf| (0+256)))& (0+255)
  8535  0799  00CF               	movwf	??_sen+2
  8536  079A  084F               	movf	??_sen+2,w
  8537  079B  00C6               	movwf	PROTOCOL_Print_TLV@pbuffer
  8538  079C                     L11:	
  8539  079C  0855               	movf	sen@dev_addr,w
  8540  079D  3180  20B0         	fcall	_PROTOCOL_Print_TLV
  8541  079F                     l5303:	
  8542                           
  8543                           ;main.c: 255: }
  8544                           ;main.c: 256: }
  8545                           ;main.c: 257: }
  8546                           ;main.c: 258: }
  8547                           ;main.c: 259: return status;
  8548  079F  0020               	movlb	0	; select bank0
  8549  07A0  0854               	movf	sen@status,w
  8550  07A1  0008               	return
  8551  07A2                     __end_of_sen:	
  8552                           
  8553                           	psect	text37
  8554  14B6                     __ptext37:	
  8555 ;; *************** function _i2c1_write_no_data *****************
  8556 ;; Defined at:
  8557 ;;		line 49 in file "i2c1_util.c"
  8558 ;; Parameters:    Size  Location     Type
  8559 ;;  dev_addr        2   14[BANK0 ] unsigned int 
  8560 ;;  reg_addr        1   16[BANK0 ] unsigned char 
  8561 ;; Auto vars:     Size  Location     Type
  8562 ;;  status          1   20[BANK0 ] enum E3078
  8563 ;;  buf             1   19[BANK0 ] unsigned char [1]
  8564 ;;  write_status    1   18[BANK0 ] unsigned char 
  8565 ;; Return value:  Size  Location     Type
  8566 ;;                  1    wreg      unsigned char 
  8567 ;; Registers used:
  8568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8569 ;; Tracked objects:
  8570 ;;		On entry : 0/0
  8571 ;;		On exit  : 0/0
  8572 ;;		Unchanged: 0/0
  8573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8574 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8575 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8576 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8577 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8578 ;;Total ram usage:        7 bytes
  8579 ;; Hardware stack levels used:    1
  8580 ;; Hardware stack levels required when called:    5
  8581 ;; This function calls:
  8582 ;;		_I2C1_MasterWrite
  8583 ;; This function is called by:
  8584 ;;		_exec_remote_cmd
  8585 ;;		_check_plg
  8586 ;;		_sen
  8587 ;;		_one_shot_sen
  8588 ;;		_fetch
  8589 ;; This function uses a non-reentrant model
  8590 ;;
  8591                           
  8592                           
  8593                           ;psect for function _i2c1_write_no_data
  8594  14B6                     _i2c1_write_no_data:	
  8595                           
  8596                           ;i2c1_util.c: 51: uint8_t buf[1];
  8597                           ;i2c1_util.c: 52: I2C1_MESSAGE_STATUS status;
  8598                           ;i2c1_util.c: 53: uint8_t write_status;
  8599                           ;i2c1_util.c: 54: buf[0] = reg_addr;
  8600                           
  8601                           ;incstack = 0
  8602                           ; Regs used in _i2c1_write_no_data: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8603  14B6  0020               	movlb	0	; select bank0
  8604  14B7  0830               	movf	i2c1_write_no_data@reg_addr,w
  8605  14B8  00B1               	movwf	??_i2c1_write_no_data
  8606  14B9  0831               	movf	??_i2c1_write_no_data,w
  8607  14BA  00B3               	movwf	i2c1_write_no_data@buf
  8608                           
  8609                           ;i2c1_util.c: 55: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8610  14BB  30A0               	movlw	160
  8611  14BC                     u7437:	
  8612  14BC  3200               	nop2
  8613  14BD  0B89               	decfsz	9,f
  8614  14BE  2CBC               	goto	u7437
  8615                           
  8616                           ;i2c1_util.c: 56: I2C1_MasterWrite(buf, 1, dev_addr, &status);
  8617  14BF  0020               	movlb	0	; select bank0
  8618  14C0  01A7               	clrf	I2C1_MasterWrite@length
  8619  14C1  0AA7               	incf	I2C1_MasterWrite@length,f
  8620  14C2  082F               	movf	i2c1_write_no_data@dev_addr+1,w
  8621  14C3  00A9               	movwf	I2C1_MasterWrite@address+1
  8622  14C4  082E               	movf	i2c1_write_no_data@dev_addr,w
  8623  14C5  00A8               	movwf	I2C1_MasterWrite@address
  8624  14C6  3034               	movlw	(low (i2c1_write_no_data@status| 0))& (0+255)
  8625  14C7  00B1               	movwf	??_i2c1_write_no_data
  8626  14C8  0831               	movf	??_i2c1_write_no_data,w
  8627  14C9  00AA               	movwf	I2C1_MasterWrite@pflag
  8628  14CA  3033               	movlw	(low (i2c1_write_no_data@buf| 0))& (0+255)
  8629  14CB  3194  248C  3194   	fcall	_I2C1_MasterWrite
  8630  14CE                     l5089:	
  8631                           ;i2c1_util.c: 57: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  8632                           
  8633  14CE  3002               	movlw	2
  8634  14CF  0020               	movlb	0	; select bank0
  8635  14D0  0634               	xorwf	i2c1_write_no_data@status,w
  8636  14D1  1D03               	btfss	3,2
  8637  14D2  2CD8               	goto	l5091
  8638  14D3  30A0               	movlw	160
  8639  14D4                     u7447:	
  8640  14D4  3200               	nop2
  8641  14D5  0B89               	decfsz	9,f
  8642  14D6  2CD4               	goto	u7447
  8643  14D7  2CCE               	goto	l5089
  8644  14D8                     l5091:	
  8645                           
  8646                           ;i2c1_util.c: 58: if (status == I2C1_MESSAGE_COMPLETE) {
  8647  14D8  0834               	movf	i2c1_write_no_data@status,w
  8648  14D9  1D03               	btfss	3,2
  8649  14DA  2CDD               	goto	l640
  8650                           
  8651                           ;i2c1_util.c: 59: write_status = 0;
  8652  14DB  01B2               	clrf	i2c1_write_no_data@write_status
  8653                           
  8654                           ;i2c1_util.c: 60: } else {
  8655  14DC  2CDF               	goto	l5095
  8656  14DD                     l640:	
  8657                           
  8658                           ;i2c1_util.c: 61: write_status = 1;
  8659  14DD  01B2               	clrf	i2c1_write_no_data@write_status
  8660  14DE  0AB2               	incf	i2c1_write_no_data@write_status,f
  8661  14DF                     l5095:	
  8662                           
  8663                           ;i2c1_util.c: 62: }
  8664                           ;i2c1_util.c: 63: return write_status;
  8665  14DF  0832               	movf	i2c1_write_no_data@write_status,w
  8666  14E0  0008               	return
  8667  14E1                     __end_of_i2c1_write_no_data:	
  8668                           
  8669                           	psect	text38
  8670  0937                     __ptext38:	
  8671 ;; *************** function _i2c1_read *****************
  8672 ;; Defined at:
  8673 ;;		line 24 in file "i2c1_util.c"
  8674 ;; Parameters:    Size  Location     Type
  8675 ;;  dev_addr        2   16[BANK0 ] unsigned int 
  8676 ;;  reg_addr        1   18[BANK0 ] unsigned char 
  8677 ;;  pbuf            2   19[BANK0 ] PTR unsigned char 
  8678 ;;		 -> sen@length(1), sen@type(1), read_buf(16), exec_remote_cmd@data(1), 
  8679 ;;  len             1   21[BANK0 ] unsigned char 
  8680 ;; Auto vars:     Size  Location     Type
  8681 ;;  status          1   26[BANK0 ] enum E3078
  8682 ;;  reg             1   25[BANK0 ] unsigned char [1]
  8683 ;;  read_status     1   24[BANK0 ] unsigned char 
  8684 ;; Return value:  Size  Location     Type
  8685 ;;                  1    wreg      unsigned char 
  8686 ;; Registers used:
  8687 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8688 ;; Tracked objects:
  8689 ;;		On entry : 0/0
  8690 ;;		On exit  : 0/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8693 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8694 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8695 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8696 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8697 ;;Total ram usage:       11 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    5
  8700 ;; This function calls:
  8701 ;;		_I2C1_MasterRead
  8702 ;;		_I2C1_MasterWrite
  8703 ;; This function is called by:
  8704 ;;		_exec_remote_cmd
  8705 ;;		_scan_dev
  8706 ;;		_sen
  8707 ;; This function uses a non-reentrant model
  8708 ;;
  8709                           
  8710                           
  8711                           ;psect for function _i2c1_read
  8712  0937                     _i2c1_read:	
  8713                           
  8714                           ;i2c1_util.c: 26: uint8_t reg[1];
  8715                           ;i2c1_util.c: 27: I2C1_MESSAGE_STATUS status;
  8716                           ;i2c1_util.c: 28: uint8_t read_status;
  8717                           ;i2c1_util.c: 29: reg[0] = reg_addr;
  8718                           
  8719                           ;incstack = 0
  8720                           ; Regs used in _i2c1_read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8721  0937  0020               	movlb	0	; select bank0
  8722  0938  0832               	movf	i2c1_read@reg_addr,w
  8723  0939  00B6               	movwf	??_i2c1_read
  8724  093A  0836               	movf	??_i2c1_read,w
  8725  093B  00B9               	movwf	i2c1_read@reg
  8726                           
  8727                           ;i2c1_util.c: 30: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8728  093C  30A0               	movlw	160
  8729  093D                     u7457:	
  8730  093D  3200               	nop2
  8731  093E  0B89               	decfsz	9,f
  8732  093F  293D               	goto	u7457
  8733                           
  8734                           ;i2c1_util.c: 31: I2C1_MasterWrite(reg, 1, dev_addr, &status);
  8735  0940  0020               	movlb	0	; select bank0
  8736  0941  01A7               	clrf	I2C1_MasterWrite@length
  8737  0942  0AA7               	incf	I2C1_MasterWrite@length,f
  8738  0943  0831               	movf	i2c1_read@dev_addr+1,w
  8739  0944  00A9               	movwf	I2C1_MasterWrite@address+1
  8740  0945  0830               	movf	i2c1_read@dev_addr,w
  8741  0946  00A8               	movwf	I2C1_MasterWrite@address
  8742  0947  303A               	movlw	(low (i2c1_read@status| 0))& (0+255)
  8743  0948  00B6               	movwf	??_i2c1_read
  8744  0949  0836               	movf	??_i2c1_read,w
  8745  094A  00AA               	movwf	I2C1_MasterWrite@pflag
  8746  094B  3039               	movlw	(low (i2c1_read@reg| 0))& (0+255)
  8747  094C  3194  248C  3189   	fcall	_I2C1_MasterWrite
  8748  094F                     l5061:	
  8749                           ;i2c1_util.c: 32: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  8750                           
  8751  094F  3002               	movlw	2
  8752  0950  0020               	movlb	0	; select bank0
  8753  0951  063A               	xorwf	i2c1_read@status,w
  8754  0952  1D03               	btfss	3,2
  8755  0953  2959               	goto	l5063
  8756  0954  30A0               	movlw	160
  8757  0955                     u7467:	
  8758  0955  3200               	nop2
  8759  0956  0B89               	decfsz	9,f
  8760  0957  2955               	goto	u7467
  8761  0958  294F               	goto	l5061
  8762  0959                     l5063:	
  8763                           
  8764                           ;i2c1_util.c: 33: if (status == I2C1_MESSAGE_COMPLETE) {
  8765  0959  083A               	movf	i2c1_read@status,w
  8766  095A  1D03               	btfss	3,2
  8767  095B  2988               	goto	l627
  8768                           
  8769                           ;i2c1_util.c: 34: _delay((unsigned long)((100)*(32000000/4000000.0)));
  8770  095C  30A0               	movlw	160
  8771  095D                     u7477:	
  8772  095D  3200               	nop2
  8773  095E  0B89               	decfsz	9,f
  8774  095F  295D               	goto	u7477
  8775                           
  8776                           ;i2c1_util.c: 35: I2C1_MasterRead(pbuf, len, dev_addr, &status);
  8777  0960  0020               	movlb	0	; select bank0
  8778  0961  0834               	movf	i2c1_read@pbuf+1,w
  8779  0962  00A9               	movwf	I2C1_MasterRead@pdata+1
  8780  0963  0833               	movf	i2c1_read@pbuf,w
  8781  0964  00A8               	movwf	I2C1_MasterRead@pdata
  8782  0965  0835               	movf	i2c1_read@len,w
  8783  0966  00B6               	movwf	??_i2c1_read
  8784  0967  0836               	movf	??_i2c1_read,w
  8785  0968  00AA               	movwf	I2C1_MasterRead@length
  8786  0969  0831               	movf	i2c1_read@dev_addr+1,w
  8787  096A  00AC               	movwf	I2C1_MasterRead@address+1
  8788  096B  0830               	movf	i2c1_read@dev_addr,w
  8789  096C  00AB               	movwf	I2C1_MasterRead@address
  8790  096D  303A               	movlw	(low (i2c1_read@status| 0))& (0+255)
  8791  096E  00B7               	movwf	??_i2c1_read+1
  8792  096F  0837               	movf	??_i2c1_read+1,w
  8793  0970  00AD               	movwf	I2C1_MasterRead@pflag
  8794  0971  3194  243C  3189   	fcall	_I2C1_MasterRead
  8795  0974                     l5071:	
  8796                           ;i2c1_util.c: 36: while (status == I2C1_MESSAGE_PENDING) {_delay((unsigned long)((100)*(
      +                          32000000/4000000.0)));};
  8797                           
  8798  0974  3002               	movlw	2
  8799  0975  0020               	movlb	0	; select bank0
  8800  0976  063A               	xorwf	i2c1_read@status,w
  8801  0977  1D03               	btfss	3,2
  8802  0978  297E               	goto	l5073
  8803  0979  30A0               	movlw	160
  8804  097A                     u7487:	
  8805  097A  3200               	nop2
  8806  097B  0B89               	decfsz	9,f
  8807  097C  297A               	goto	u7487
  8808  097D  2974               	goto	l5071
  8809  097E                     l5073:	
  8810                           
  8811                           ;i2c1_util.c: 37: if (status == I2C1_MESSAGE_COMPLETE) {
  8812  097E  083A               	movf	i2c1_read@status,w
  8813  097F  1D03               	btfss	3,2
  8814  0980  2983               	goto	l5077
  8815                           
  8816                           ;i2c1_util.c: 38: read_status = 0;
  8817  0981  01B8               	clrf	i2c1_read@read_status
  8818                           
  8819                           ;i2c1_util.c: 39: } else {
  8820  0982  298A               	goto	l5079
  8821  0983                     l5077:	
  8822                           
  8823                           ;i2c1_util.c: 40: read_status = 2;
  8824  0983  3002               	movlw	2
  8825  0984  00B6               	movwf	??_i2c1_read
  8826  0985  0836               	movf	??_i2c1_read,w
  8827  0986  00B8               	movwf	i2c1_read@read_status
  8828                           
  8829                           ;i2c1_util.c: 41: }
  8830                           ;i2c1_util.c: 42: } else {
  8831  0987  298A               	goto	l5079
  8832  0988                     l627:	
  8833                           
  8834                           ;i2c1_util.c: 43: read_status = 1;
  8835  0988  01B8               	clrf	i2c1_read@read_status
  8836  0989  0AB8               	incf	i2c1_read@read_status,f
  8837  098A                     l5079:	
  8838                           
  8839                           ;i2c1_util.c: 44: }
  8840                           ;i2c1_util.c: 45: return read_status;
  8841  098A  0838               	movf	i2c1_read@read_status,w
  8842  098B  0008               	return
  8843  098C                     __end_of_i2c1_read:	
  8844                           
  8845                           	psect	text39
  8846  148C                     __ptext39:	
  8847 ;; *************** function _I2C1_MasterWrite *****************
  8848 ;; Defined at:
  8849 ;;		line 598 in file "mcc_generated_files/i2c1.c"
  8850 ;; Parameters:    Size  Location     Type
  8851 ;;  pdata           1    wreg     PTR unsigned char 
  8852 ;;		 -> i2c1_write_no_data@buf(1), i2c1_read@reg(1), exec_remote_cmd@send_buf(50), 
  8853 ;;  length          1    7[BANK0 ] unsigned char 
  8854 ;;  address         2    8[BANK0 ] unsigned int 
  8855 ;;  pflag           1   10[BANK0 ] PTR enum E2972
  8856 ;;		 -> i2c1_write_no_data@status(1), i2c1_read@status(1), i2c1_write@status(1), 
  8857 ;; Auto vars:     Size  Location     Type
  8858 ;;  pdata           1   13[BANK0 ] PTR unsigned char 
  8859 ;;		 -> i2c1_write_no_data@buf(1), i2c1_read@reg(1), exec_remote_cmd@send_buf(50), 
  8860 ;; Return value:  Size  Location     Type
  8861 ;;                  1    wreg      void 
  8862 ;; Registers used:
  8863 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8864 ;; Tracked objects:
  8865 ;;		On entry : 0/0
  8866 ;;		On exit  : 0/0
  8867 ;;		Unchanged: 0/0
  8868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8869 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8870 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8871 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8872 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8873 ;;Total ram usage:        7 bytes
  8874 ;; Hardware stack levels used:    1
  8875 ;; Hardware stack levels required when called:    4
  8876 ;; This function calls:
  8877 ;;		_I2C1_MasterTRBInsert
  8878 ;;		_I2C1_MasterWriteTRBBuild
  8879 ;; This function is called by:
  8880 ;;		_i2c1_write
  8881 ;;		_i2c1_read
  8882 ;;		_i2c1_write_no_data
  8883 ;; This function uses a non-reentrant model
  8884 ;;
  8885                           
  8886                           
  8887                           ;psect for function _I2C1_MasterWrite
  8888  148C                     _I2C1_MasterWrite:	
  8889                           
  8890                           ;incstack = 0
  8891                           ; Regs used in _I2C1_MasterWrite: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8892                           ;I2C1_MasterWrite@pdata stored from wreg
  8893  148C  0020               	movlb	0	; select bank0
  8894  148D  00AD               	movwf	I2C1_MasterWrite@pdata
  8895                           
  8896                           ;i2c1.c: 604: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  8897                           ;i2c1.c: 607: if (i2c1_object.trStatus.s.full != 1)
  8898  148E  0021               	movlb	1	; select bank1
  8899  148F  185B               	btfsc	(_i2c1_object^(0+128)+2),0
  8900  1490  2CAF               	goto	l4823
  8901                           
  8902                           ;i2c1.c: 608: {
  8903                           ;i2c1.c: 609: I2C1_MasterWriteTRBBuild(&trBlock, pdata, length, address);
  8904  1491  0020               	movlb	0	; select bank0
  8905  1492  082D               	movf	I2C1_MasterWrite@pdata,w
  8906  1493  00AB               	movwf	??_I2C1_MasterWrite
  8907  1494  082B               	movf	??_I2C1_MasterWrite,w
  8908  1495  00A0               	movwf	I2C1_MasterWriteTRBBuild@pdata
  8909  1496  0827               	movf	I2C1_MasterWrite@length,w
  8910  1497  00AC               	movwf	??_I2C1_MasterWrite+1
  8911  1498  082C               	movf	??_I2C1_MasterWrite+1,w
  8912  1499  00A1               	movwf	I2C1_MasterWriteTRBBuild@length
  8913  149A  0829               	movf	I2C1_MasterWrite@address+1,w
  8914  149B  00A3               	movwf	I2C1_MasterWriteTRBBuild@address+1
  8915  149C  0828               	movf	I2C1_MasterWrite@address,w
  8916  149D  00A2               	movwf	I2C1_MasterWriteTRBBuild@address
  8917  149E  3051               	movlw	(low (I2C1_MasterWrite@trBlock| (0+256)))& (0+255)
  8918  149F  3193  23F4  3194   	fcall	_I2C1_MasterWriteTRBBuild
  8919                           
  8920                           ;i2c1.c: 610: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  8921  14A2  3051               	movlw	(low (I2C1_MasterWrite@trBlock| (0+256)))& (0+255)
  8922  14A3  0020               	movlb	0	; select bank0
  8923  14A4  00AB               	movwf	??_I2C1_MasterWrite
  8924  14A5  082B               	movf	??_I2C1_MasterWrite,w
  8925  14A6  00A0               	movwf	I2C1_MasterTRBInsert@ptrb_list
  8926  14A7  082A               	movf	I2C1_MasterWrite@pflag,w
  8927  14A8  00AC               	movwf	??_I2C1_MasterWrite+1
  8928  14A9  082C               	movf	??_I2C1_MasterWrite+1,w
  8929  14AA  00A1               	movwf	I2C1_MasterTRBInsert@pflag
  8930  14AB  3001               	movlw	1
  8931  14AC  3189  218C         	fcall	_I2C1_MasterTRBInsert
  8932                           
  8933                           ;i2c1.c: 611: }
  8934  14AE  0008               	return
  8935  14AF                     l4823:	
  8936                           
  8937                           ;i2c1.c: 612: else
  8938                           ;i2c1.c: 613: {
  8939                           ;i2c1.c: 614: *pflag = I2C1_MESSAGE_FAIL;
  8940  14AF  0020               	movlb	0	; select bank0
  8941  14B0  082A               	movf	I2C1_MasterWrite@pflag,w
  8942  14B1  0086               	movwf	6
  8943  14B2  0187               	clrf	7
  8944  14B3  0181               	clrf	1
  8945  14B4  0A81               	incf	1,f
  8946  14B5  0008               	return
  8947  14B6                     __end_of_I2C1_MasterWrite:	
  8948                           
  8949                           	psect	text40
  8950  13F4                     __ptext40:	
  8951 ;; *************** function _I2C1_MasterWriteTRBBuild *****************
  8952 ;; Defined at:
  8953 ;;		line 707 in file "mcc_generated_files/i2c1.c"
  8954 ;; Parameters:    Size  Location     Type
  8955 ;;  ptrb            1    wreg     PTR struct .
  8956 ;;		 -> I2C1_MasterWrite@trBlock(5), 
  8957 ;;  pdata           1    0[BANK0 ] PTR unsigned char 
  8958 ;;		 -> i2c1_write_no_data@buf(1), i2c1_read@reg(1), exec_remote_cmd@send_buf(50), 
  8959 ;;  length          1    1[BANK0 ] unsigned char 
  8960 ;;  address         2    2[BANK0 ] unsigned int 
  8961 ;; Auto vars:     Size  Location     Type
  8962 ;;  ptrb            1    6[BANK0 ] PTR struct .
  8963 ;;		 -> I2C1_MasterWrite@trBlock(5), 
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  1    wreg      void 
  8966 ;; Registers used:
  8967 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8973 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;Total ram usage:        7 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    3
  8980 ;; This function calls:
  8981 ;;		Nothing
  8982 ;; This function is called by:
  8983 ;;		_I2C1_MasterWrite
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           
  8988                           ;psect for function _I2C1_MasterWriteTRBBuild
  8989  13F4                     _I2C1_MasterWriteTRBBuild:	
  8990                           
  8991                           ;incstack = 0
  8992                           ; Regs used in _I2C1_MasterWriteTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  8993                           ;I2C1_MasterWriteTRBBuild@ptrb stored from wreg
  8994  13F4  0020               	movlb	0	; select bank0
  8995  13F5  00A6               	movwf	I2C1_MasterWriteTRBBuild@ptrb
  8996                           
  8997                           ;i2c1.c: 713: ptrb->address = address << 1;
  8998  13F6  0823               	movf	I2C1_MasterWriteTRBBuild@address+1,w
  8999  13F7  00A5               	movwf	??_I2C1_MasterWriteTRBBuild+1
  9000  13F8  0822               	movf	I2C1_MasterWriteTRBBuild@address,w
  9001  13F9  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9002  13FA  35A4               	lslf	??_I2C1_MasterWriteTRBBuild,f
  9003  13FB  0DA5               	rlf	??_I2C1_MasterWriteTRBBuild+1,f
  9004  13FC  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9005  13FD  0086               	movwf	6
  9006  13FE  3001               	movlw	1	; select bank2/3
  9007  13FF  0087               	movwf	7
  9008  1400  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9009  1401  3FC0               	movwi [0]fsr1
  9010  1402  0825               	movf	??_I2C1_MasterWriteTRBBuild+1,w
  9011  1403  3FC1               	movwi [1]fsr1
  9012                           
  9013                           ;i2c1.c: 714: ptrb->length = length;
  9014  1404  0821               	movf	I2C1_MasterWriteTRBBuild@length,w
  9015  1405  00A4               	movwf	??_I2C1_MasterWriteTRBBuild
  9016  1406  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9017  1407  3E02               	addlw	2
  9018  1408  0086               	movwf	6
  9019  1409  3001               	movlw	1	; select bank2/3
  9020  140A  0087               	movwf	7
  9021  140B  0824               	movf	??_I2C1_MasterWriteTRBBuild,w
  9022  140C  0081               	movwf	1
  9023                           
  9024                           ;i2c1.c: 715: ptrb->pbuffer = pdata;
  9025  140D  0826               	movf	I2C1_MasterWriteTRBBuild@ptrb,w
  9026  140E  3E03               	addlw	3
  9027  140F  0086               	movwf	6
  9028  1410  3001               	movlw	1	; select bank2/3
  9029  1411  0087               	movwf	7
  9030  1412  0820               	movf	I2C1_MasterWriteTRBBuild@pdata,w
  9031  1413  3FC0               	movwi [0]fsr1
  9032  1414  3000               	movlw	0
  9033  1415  3FC1               	movwi [1]fsr1
  9034  1416  0008               	return
  9035  1417                     __end_of_I2C1_MasterWriteTRBBuild:	
  9036                           
  9037                           	psect	text41
  9038  143C                     __ptext41:	
  9039 ;; *************** function _I2C1_MasterRead *****************
  9040 ;; Defined at:
  9041 ;;		line 619 in file "mcc_generated_files/i2c1.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;  pdata           2    8[BANK0 ] PTR unsigned char 
  9044 ;;		 -> sen@length(1), sen@type(1), read_buf(16), exec_remote_cmd@data(1), 
  9045 ;;  length          1   10[BANK0 ] unsigned char 
  9046 ;;  address         2   11[BANK0 ] unsigned int 
  9047 ;;  pflag           1   13[BANK0 ] PTR enum E2972
  9048 ;;		 -> i2c1_read@status(1), 
  9049 ;; Auto vars:     Size  Location     Type
  9050 ;;		None
  9051 ;; Return value:  Size  Location     Type
  9052 ;;                  1    wreg      void 
  9053 ;; Registers used:
  9054 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9055 ;; Tracked objects:
  9056 ;;		On entry : 0/0
  9057 ;;		On exit  : 0/0
  9058 ;;		Unchanged: 0/0
  9059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9060 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;Total ram usage:        8 bytes
  9065 ;; Hardware stack levels used:    1
  9066 ;; Hardware stack levels required when called:    4
  9067 ;; This function calls:
  9068 ;;		_I2C1_MasterReadTRBBuild
  9069 ;;		_I2C1_MasterTRBInsert
  9070 ;; This function is called by:
  9071 ;;		_i2c1_read
  9072 ;; This function uses a non-reentrant model
  9073 ;;
  9074                           
  9075                           
  9076                           ;psect for function _I2C1_MasterRead
  9077  143C                     _I2C1_MasterRead:	
  9078                           
  9079                           ;i2c1.c: 625: static I2C1_TRANSACTION_REQUEST_BLOCK trBlock;
  9080                           ;i2c1.c: 629: if (i2c1_object.trStatus.s.full != 1)
  9081                           
  9082                           ;incstack = 0
  9083                           ; Regs used in _I2C1_MasterRead: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9084  143C  0021               	movlb	1	; select bank1
  9085  143D  185B               	btfsc	(_i2c1_object^(0+128)+2),0
  9086  143E  2C5D               	goto	l4829
  9087                           
  9088                           ;i2c1.c: 630: {
  9089                           ;i2c1.c: 631: I2C1_MasterReadTRBBuild(&trBlock, pdata, length, address);
  9090  143F  0020               	movlb	0	; select bank0
  9091  1440  0829               	movf	I2C1_MasterRead@pdata+1,w
  9092  1441  00A1               	movwf	I2C1_MasterReadTRBBuild@pdata+1
  9093  1442  0828               	movf	I2C1_MasterRead@pdata,w
  9094  1443  00A0               	movwf	I2C1_MasterReadTRBBuild@pdata
  9095  1444  082A               	movf	I2C1_MasterRead@length,w
  9096  1445  00AE               	movwf	??_I2C1_MasterRead
  9097  1446  082E               	movf	??_I2C1_MasterRead,w
  9098  1447  00A2               	movwf	I2C1_MasterReadTRBBuild@length
  9099  1448  082C               	movf	I2C1_MasterRead@address+1,w
  9100  1449  00A4               	movwf	I2C1_MasterReadTRBBuild@address+1
  9101  144A  082B               	movf	I2C1_MasterRead@address,w
  9102  144B  00A3               	movwf	I2C1_MasterReadTRBBuild@address
  9103  144C  304C               	movlw	(low (I2C1_MasterRead@trBlock| (0+256)))& (0+255)
  9104  144D  3194  24E1  3194   	fcall	_I2C1_MasterReadTRBBuild
  9105                           
  9106                           ;i2c1.c: 632: I2C1_MasterTRBInsert(1, &trBlock, pflag);
  9107  1450  304C               	movlw	(low (I2C1_MasterRead@trBlock| (0+256)))& (0+255)
  9108  1451  0020               	movlb	0	; select bank0
  9109  1452  00AE               	movwf	??_I2C1_MasterRead
  9110  1453  082E               	movf	??_I2C1_MasterRead,w
  9111  1454  00A0               	movwf	I2C1_MasterTRBInsert@ptrb_list
  9112  1455  082D               	movf	I2C1_MasterRead@pflag,w
  9113  1456  00AF               	movwf	??_I2C1_MasterRead+1
  9114  1457  082F               	movf	??_I2C1_MasterRead+1,w
  9115  1458  00A1               	movwf	I2C1_MasterTRBInsert@pflag
  9116  1459  3001               	movlw	1
  9117  145A  3189  218C         	fcall	_I2C1_MasterTRBInsert
  9118                           
  9119                           ;i2c1.c: 633: }
  9120  145C  0008               	return
  9121  145D                     l4829:	
  9122                           
  9123                           ;i2c1.c: 634: else
  9124                           ;i2c1.c: 635: {
  9125                           ;i2c1.c: 636: *pflag = I2C1_MESSAGE_FAIL;
  9126  145D  0020               	movlb	0	; select bank0
  9127  145E  082D               	movf	I2C1_MasterRead@pflag,w
  9128  145F  0086               	movwf	6
  9129  1460  0187               	clrf	7
  9130  1461  0181               	clrf	1
  9131  1462  0A81               	incf	1,f
  9132  1463  0008               	return
  9133  1464                     __end_of_I2C1_MasterRead:	
  9134                           
  9135                           	psect	text42
  9136  098C                     __ptext42:	
  9137 ;; *************** function _I2C1_MasterTRBInsert *****************
  9138 ;; Defined at:
  9139 ;;		line 641 in file "mcc_generated_files/i2c1.c"
  9140 ;; Parameters:    Size  Location     Type
  9141 ;;  count           1    wreg     unsigned char 
  9142 ;;  ptrb_list       1    0[BANK0 ] PTR struct .
  9143 ;;		 -> I2C1_MasterRead@trBlock(5), I2C1_MasterWrite@trBlock(5), 
  9144 ;;  pflag           1    1[BANK0 ] PTR enum E2972
  9145 ;;		 -> i2c1_write_no_data@status(1), i2c1_read@status(1), i2c1_write@status(1), 
  9146 ;; Auto vars:     Size  Location     Type
  9147 ;;  count           1    3[BANK0 ] unsigned char 
  9148 ;; Return value:  Size  Location     Type
  9149 ;;                  1    wreg      void 
  9150 ;; Registers used:
  9151 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9152 ;; Tracked objects:
  9153 ;;		On entry : 0/0
  9154 ;;		On exit  : 0/0
  9155 ;;		Unchanged: 0/0
  9156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9157 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9159 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9160 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9161 ;;Total ram usage:        4 bytes
  9162 ;; Hardware stack levels used:    1
  9163 ;; Hardware stack levels required when called:    3
  9164 ;; This function calls:
  9165 ;;		Nothing
  9166 ;; This function is called by:
  9167 ;;		_I2C1_MasterWrite
  9168 ;;		_I2C1_MasterRead
  9169 ;; This function uses a non-reentrant model
  9170 ;;
  9171                           
  9172                           
  9173                           ;psect for function _I2C1_MasterTRBInsert
  9174  098C                     _I2C1_MasterTRBInsert:	
  9175                           
  9176                           ;incstack = 0
  9177                           ; Regs used in _I2C1_MasterTRBInsert: [wreg+fsr1l+fsr1h+status,2+status,0]
  9178                           ;I2C1_MasterTRBInsert@count stored from wreg
  9179  098C  0020               	movlb	0	; select bank0
  9180  098D  00A3               	movwf	I2C1_MasterTRBInsert@count
  9181                           
  9182                           ;i2c1.c: 648: if (i2c1_object.trStatus.s.full != 1)
  9183  098E  0021               	movlb	1	; select bank1
  9184  098F  185B               	btfsc	(_i2c1_object^(0+128)+2),0
  9185  0990  29CE               	goto	l4733
  9186                           
  9187                           ;i2c1.c: 649: {
  9188                           ;i2c1.c: 650: *pflag = I2C1_MESSAGE_PENDING;
  9189  0991  3002               	movlw	2
  9190  0992  0020               	movlb	0	; select bank0
  9191  0993  00A2               	movwf	??_I2C1_MasterTRBInsert
  9192  0994  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9193  0995  0086               	movwf	6
  9194  0996  0187               	clrf	7
  9195  0997  0822               	movf	??_I2C1_MasterTRBInsert,w
  9196  0998  0081               	movwf	1
  9197                           
  9198                           ;i2c1.c: 652: i2c1_object.pTrTail->ptrb_list = ptrb_list;
  9199  0999  0820               	movf	I2C1_MasterTRBInsert@ptrb_list,w
  9200  099A  00A2               	movwf	??_I2C1_MasterTRBInsert
  9201  099B  0021               	movlb	1	; select bank1
  9202  099C  0A59               	incf	_i2c1_object^(0+128),w
  9203  099D  0086               	movwf	6
  9204  099E  3001               	movlw	1	; select bank2/3
  9205  099F  0087               	movwf	7
  9206  09A0  0020               	movlb	0	; select bank0
  9207  09A1  0822               	movf	??_I2C1_MasterTRBInsert,w
  9208  09A2  0081               	movwf	1
  9209                           
  9210                           ;i2c1.c: 653: i2c1_object.pTrTail->count = count;
  9211  09A3  0823               	movf	I2C1_MasterTRBInsert@count,w
  9212  09A4  00A2               	movwf	??_I2C1_MasterTRBInsert
  9213  09A5  0021               	movlb	1	; select bank1
  9214  09A6  0859               	movf	_i2c1_object^(0+128),w
  9215  09A7  0086               	movwf	6
  9216  09A8  3001               	movlw	1	; select bank2/3
  9217  09A9  0087               	movwf	7
  9218  09AA  0020               	movlb	0	; select bank0
  9219  09AB  0822               	movf	??_I2C1_MasterTRBInsert,w
  9220  09AC  0081               	movwf	1
  9221                           
  9222                           ;i2c1.c: 654: i2c1_object.pTrTail->pTrFlag = pflag;
  9223  09AD  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9224  09AE  00A2               	movwf	??_I2C1_MasterTRBInsert
  9225  09AF  0021               	movlb	1	; select bank1
  9226  09B0  0859               	movf	_i2c1_object^(0+128),w
  9227  09B1  3E02               	addlw	2
  9228  09B2  0086               	movwf	6
  9229  09B3  3001               	movlw	1	; select bank2/3
  9230  09B4  0087               	movwf	7
  9231  09B5  0020               	movlb	0	; select bank0
  9232  09B6  0822               	movf	??_I2C1_MasterTRBInsert,w
  9233  09B7  0081               	movwf	1
  9234                           
  9235                           ;i2c1.c: 655: i2c1_object.pTrTail++;
  9236  09B8  3003               	movlw	3
  9237  09B9  00A2               	movwf	??_I2C1_MasterTRBInsert
  9238  09BA  0822               	movf	??_I2C1_MasterTRBInsert,w
  9239  09BB  0021               	movlb	1	; select bank1
  9240  09BC  07D9               	addwf	_i2c1_object^(0+128),f
  9241                           
  9242                           ;i2c1.c: 658: if (i2c1_object.pTrTail == (i2c1_tr_queue + 1))
  9243  09BD  0859               	movf	_i2c1_object^(0+128),w
  9244  09BE  3A5C               	xorlw	(low ((_i2c1_tr_queue| (0+256)+3)))& (0+255)
  9245  09BF  1D03               	skipz
  9246  09C0  29C7               	goto	l4729
  9247                           
  9248                           ;i2c1.c: 659: {
  9249                           ;i2c1.c: 661: i2c1_object.pTrTail = i2c1_tr_queue;
  9250  09C1  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
  9251  09C2  0020               	movlb	0	; select bank0
  9252  09C3  00A2               	movwf	??_I2C1_MasterTRBInsert
  9253  09C4  0822               	movf	??_I2C1_MasterTRBInsert,w
  9254  09C5  0021               	movlb	1	; select bank1
  9255  09C6  00D9               	movwf	_i2c1_object^(0+128)
  9256  09C7                     l4729:	
  9257                           
  9258                           ;i2c1.c: 662: }
  9259                           ;i2c1.c: 666: i2c1_object.trStatus.s.empty = 0;
  9260  09C7  10DB               	bcf	(_i2c1_object^(0+128)+2),1
  9261                           
  9262                           ;i2c1.c: 669: if (i2c1_object.pTrHead == i2c1_object.pTrTail)
  9263  09C8  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
  9264  09C9  0659               	xorwf	_i2c1_object^(0+128),w
  9265  09CA  1D03               	skipz
  9266  09CB  29D4               	goto	l4735
  9267                           
  9268                           ;i2c1.c: 670: {
  9269                           ;i2c1.c: 672: i2c1_object.trStatus.s.full = 1;
  9270  09CC  145B               	bsf	(_i2c1_object^(0+128)+2),0
  9271                           
  9272                           ;i2c1.c: 673: }
  9273                           ;i2c1.c: 675: }
  9274  09CD  29D4               	goto	l4735
  9275  09CE                     l4733:	
  9276                           
  9277                           ;i2c1.c: 676: else
  9278                           ;i2c1.c: 677: {
  9279                           ;i2c1.c: 678: *pflag = I2C1_MESSAGE_FAIL;
  9280  09CE  0020               	movlb	0	; select bank0
  9281  09CF  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9282  09D0  0086               	movwf	6
  9283  09D1  0187               	clrf	7
  9284  09D2  0181               	clrf	1
  9285  09D3  0A81               	incf	1,f
  9286  09D4                     l4735:	
  9287                           
  9288                           ;i2c1.c: 679: }
  9289                           ;i2c1.c: 682: if (*pflag == I2C1_MESSAGE_PENDING)
  9290  09D4  0020               	movlb	0	; select bank0
  9291  09D5  0821               	movf	I2C1_MasterTRBInsert@pflag,w
  9292  09D6  0086               	movwf	6
  9293  09D7  0187               	clrf	7
  9294  09D8  3002               	movlw	2
  9295  09D9  0601               	xorwf	1,w
  9296  09DA  1D03               	btfss	3,2
  9297  09DB  0008               	return
  9298  09DC                     l4739:	
  9299                           ;i2c1.c: 683: {
  9300                           ;i2c1.c: 684: while(i2c1_state != S_MASTER_IDLE);
  9301                           
  9302  09DC  0021               	movlb	1	; select bank1
  9303  09DD  086C               	movf	_i2c1_state^(0+128),w
  9304  09DE  1D03               	btfss	3,2
  9305  09DF  29DC               	goto	l4739
  9306                           
  9307                           ;i2c1.c: 685: {
  9308                           ;i2c1.c: 688: PIR1bits.SSP1IF = 1;
  9309  09E0  0020               	movlb	0	; select bank0
  9310  09E1  1591               	bsf	17,3	;volatile
  9311  09E2  0008               	return
  9312  09E3                     __end_of_I2C1_MasterTRBInsert:	
  9313                           
  9314                           	psect	text43
  9315  14E1                     __ptext43:	
  9316 ;; *************** function _I2C1_MasterReadTRBBuild *****************
  9317 ;; Defined at:
  9318 ;;		line 694 in file "mcc_generated_files/i2c1.c"
  9319 ;; Parameters:    Size  Location     Type
  9320 ;;  ptrb            1    wreg     PTR struct .
  9321 ;;		 -> I2C1_MasterRead@trBlock(5), 
  9322 ;;  pdata           2    0[BANK0 ] PTR unsigned char 
  9323 ;;		 -> sen@length(1), sen@type(1), read_buf(16), exec_remote_cmd@data(1), 
  9324 ;;  length          1    2[BANK0 ] unsigned char 
  9325 ;;  address         2    3[BANK0 ] unsigned int 
  9326 ;; Auto vars:     Size  Location     Type
  9327 ;;  ptrb            1    7[BANK0 ] PTR struct .
  9328 ;;		 -> I2C1_MasterRead@trBlock(5), 
  9329 ;; Return value:  Size  Location     Type
  9330 ;;                  1    wreg      void 
  9331 ;; Registers used:
  9332 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9333 ;; Tracked objects:
  9334 ;;		On entry : 0/0
  9335 ;;		On exit  : 0/0
  9336 ;;		Unchanged: 0/0
  9337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9338 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9339 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;Total ram usage:        8 bytes
  9343 ;; Hardware stack levels used:    1
  9344 ;; Hardware stack levels required when called:    3
  9345 ;; This function calls:
  9346 ;;		Nothing
  9347 ;; This function is called by:
  9348 ;;		_I2C1_MasterRead
  9349 ;; This function uses a non-reentrant model
  9350 ;;
  9351                           
  9352                           
  9353                           ;psect for function _I2C1_MasterReadTRBBuild
  9354  14E1                     _I2C1_MasterReadTRBBuild:	
  9355                           
  9356                           ;incstack = 0
  9357                           ; Regs used in _I2C1_MasterReadTRBBuild: [wreg+fsr1l+fsr1h+status,2+status,0]
  9358                           ;I2C1_MasterReadTRBBuild@ptrb stored from wreg
  9359  14E1  0020               	movlb	0	; select bank0
  9360  14E2  00A7               	movwf	I2C1_MasterReadTRBBuild@ptrb
  9361                           
  9362                           ;i2c1.c: 700: ptrb->address = address << 1;
  9363  14E3  0824               	movf	I2C1_MasterReadTRBBuild@address+1,w
  9364  14E4  00A6               	movwf	??_I2C1_MasterReadTRBBuild+1
  9365  14E5  0823               	movf	I2C1_MasterReadTRBBuild@address,w
  9366  14E6  00A5               	movwf	??_I2C1_MasterReadTRBBuild
  9367  14E7  35A5               	lslf	??_I2C1_MasterReadTRBBuild,f
  9368  14E8  0DA6               	rlf	??_I2C1_MasterReadTRBBuild+1,f
  9369  14E9  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9370  14EA  0086               	movwf	6
  9371  14EB  3001               	movlw	1	; select bank2/3
  9372  14EC  0087               	movwf	7
  9373  14ED  0825               	movf	??_I2C1_MasterReadTRBBuild,w
  9374  14EE  3FC0               	movwi [0]fsr1
  9375  14EF  0826               	movf	??_I2C1_MasterReadTRBBuild+1,w
  9376  14F0  3FC1               	movwi [1]fsr1
  9377                           
  9378                           ;i2c1.c: 702: ptrb->address |= 0x01;
  9379  14F1  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9380  14F2  0086               	movwf	6
  9381  14F3  3001               	movlw	1	; select bank2/3
  9382  14F4  0087               	movwf	7
  9383  14F5  3001               	movlw	1
  9384  14F6  0481               	iorwf	1,f
  9385  14F7  3141               	addfsr 1,1
  9386  14F8  3000               	movlw	0
  9387  14F9  0481               	iorwf	1,f
  9388                           
  9389                           ;i2c1.c: 703: ptrb->length = length;
  9390  14FA  0822               	movf	I2C1_MasterReadTRBBuild@length,w
  9391  14FB  00A5               	movwf	??_I2C1_MasterReadTRBBuild
  9392  14FC  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9393  14FD  3E02               	addlw	2
  9394  14FE  0086               	movwf	6
  9395  14FF  3001               	movlw	1	; select bank2/3
  9396  1500  0087               	movwf	7
  9397  1501  0825               	movf	??_I2C1_MasterReadTRBBuild,w
  9398  1502  0081               	movwf	1
  9399                           
  9400                           ;i2c1.c: 704: ptrb->pbuffer = pdata;
  9401  1503  0827               	movf	I2C1_MasterReadTRBBuild@ptrb,w
  9402  1504  3E03               	addlw	3
  9403  1505  0086               	movwf	6
  9404  1506  3001               	movlw	1	; select bank2/3
  9405  1507  0087               	movwf	7
  9406  1508  0820               	movf	I2C1_MasterReadTRBBuild@pdata,w
  9407  1509  3FC0               	movwi [0]fsr1
  9408  150A  0821               	movf	I2C1_MasterReadTRBBuild@pdata+1,w
  9409  150B  3FC1               	movwi [1]fsr1
  9410  150C  0008               	return
  9411  150D                     __end_of_I2C1_MasterReadTRBBuild:	
  9412                           
  9413                           	psect	text44
  9414  00B0                     __ptext44:	
  9415 ;; *************** function _PROTOCOL_Print_TLV *****************
  9416 ;; Defined at:
  9417 ;;		line 224 in file "protocol.c"
  9418 ;; Parameters:    Size  Location     Type
  9419 ;;  dev_addr        1    wreg     unsigned char 
  9420 ;;  type            1   36[BANK0 ] unsigned char 
  9421 ;;  length          1   37[BANK0 ] unsigned char 
  9422 ;;  pbuffer         1   38[BANK0 ] PTR unsigned char 
  9423 ;;		 -> read_buf(16), NULL(0), 
  9424 ;; Auto vars:     Size  Location     Type
  9425 ;;  dev_addr        1   42[BANK0 ] unsigned char 
  9426 ;;  v               2   43[BANK0 ] int 
  9427 ;; Return value:  Size  Location     Type
  9428 ;;                  1    wreg      void 
  9429 ;; Registers used:
  9430 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9431 ;; Tracked objects:
  9432 ;;		On entry : 0/0
  9433 ;;		On exit  : 0/0
  9434 ;;		Unchanged: 0/0
  9435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9436 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;Total ram usage:        9 bytes
  9441 ;; Hardware stack levels used:    1
  9442 ;; Hardware stack levels required when called:    6
  9443 ;; This function calls:
  9444 ;;		___awdiv
  9445 ;;		___awmod
  9446 ;;		_abs
  9447 ;;		_concat
  9448 ;;		_printf
  9449 ;; This function is called by:
  9450 ;;		_sen
  9451 ;; This function uses a non-reentrant model
  9452 ;;
  9453                           
  9454                           
  9455                           ;psect for function _PROTOCOL_Print_TLV
  9456  00B0                     _PROTOCOL_Print_TLV:	
  9457                           
  9458                           ;incstack = 0
  9459                           ; Regs used in _PROTOCOL_Print_TLV: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9460                           ;PROTOCOL_Print_TLV@dev_addr stored from wreg
  9461  00B0  0020               	movlb	0	; select bank0
  9462  00B1  00CA               	movwf	PROTOCOL_Print_TLV@dev_addr
  9463                           
  9464                           ;protocol.c: 225: int16_t v;
  9465                           ;protocol.c: 226: if (dev_addr != 0) printf("%%%d:", dev_addr);
  9466  00B2  084A               	movf	PROTOCOL_Print_TLV@dev_addr,w
  9467  00B3  1903               	btfsc	3,2
  9468  00B4  2B13               	goto	l5195
  9469  00B5  3052               	movlw	low (STR_49| (0+32768))
  9470  00B6  00AE               	movwf	printf@f
  9471  00B7  3091               	movlw	high (STR_49| (0+32768))
  9472  00B8  00AF               	movwf	printf@f+1
  9473  00B9  084A               	movf	PROTOCOL_Print_TLV@dev_addr,w
  9474  00BA  00C7               	movwf	??_PROTOCOL_Print_TLV
  9475  00BB  01C8               	clrf	??_PROTOCOL_Print_TLV+1
  9476  00BC  0847               	movf	??_PROTOCOL_Print_TLV,w
  9477  00BD  00B0               	movwf	?_printf+2
  9478  00BE  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9479  00BF  00B1               	movwf	?_printf+3
  9480  00C0  3185  2519  3180   	fcall	_printf
  9481                           
  9482                           ;protocol.c: 227: switch(type) {
  9483  00C3  2B13               	goto	l5195
  9484  00C4                     l5103:	
  9485                           ;protocol.c: 228: case 0x01:
  9486                           
  9487                           
  9488                           ;protocol.c: 229: length--;
  9489  00C4  3001               	movlw	1
  9490  00C5  0020               	movlb	0	; select bank0
  9491  00C6  02C5               	subwf	PROTOCOL_Print_TLV@length,f
  9492                           
  9493                           ;protocol.c: 230: printf("UINT8_T:");
  9494  00C7  302D               	movlw	low (STR_50| (0+32768))
  9495  00C8  00AE               	movwf	printf@f
  9496  00C9  3091               	movlw	high (STR_50| (0+32768))
  9497  00CA  00AF               	movwf	printf@f+1
  9498  00CB  3185  2519  3180   	fcall	_printf
  9499                           
  9500                           ;protocol.c: 231: for (i=0; i<length; i++) printf("%u,", pbuffer[i]);
  9501  00CE  0020               	movlb	0	; select bank0
  9502  00CF  01EB               	clrf	_i
  9503  00D0                     l5113:	
  9504  00D0  0845               	movf	PROTOCOL_Print_TLV@length,w
  9505  00D1  026B               	subwf	_i,w
  9506  00D2  1803               	btfsc	3,0
  9507  00D3  28EF               	goto	l5115
  9508  00D4  3061               	movlw	low (STR_51| (0+32768))
  9509  00D5  00AE               	movwf	printf@f
  9510  00D6  3091               	movlw	high (STR_51| (0+32768))
  9511  00D7  00AF               	movwf	printf@f+1
  9512  00D8  086B               	movf	_i,w
  9513  00D9  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9514  00DA  00C7               	movwf	??_PROTOCOL_Print_TLV
  9515  00DB  0847               	movf	??_PROTOCOL_Print_TLV,w
  9516  00DC  0086               	movwf	6
  9517  00DD  3001               	movlw	1	; select bank2/3
  9518  00DE  0087               	movwf	7
  9519  00DF  0801               	movf	1,w
  9520  00E0  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9521  00E1  01C9               	clrf	??_PROTOCOL_Print_TLV+2
  9522  00E2  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9523  00E3  00B0               	movwf	?_printf+2
  9524  00E4  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9525  00E5  00B1               	movwf	?_printf+3
  9526  00E6  3185  2519  3180   	fcall	_printf
  9527  00E9  3001               	movlw	1
  9528  00EA  0020               	movlb	0	; select bank0
  9529  00EB  00C7               	movwf	??_PROTOCOL_Print_TLV
  9530  00EC  0847               	movf	??_PROTOCOL_Print_TLV,w
  9531  00ED  07EB               	addwf	_i,f
  9532  00EE  28D0               	goto	l5113
  9533  00EF                     l5115:	
  9534                           
  9535                           ;protocol.c: 232: printf("%u\n", pbuffer[i]);
  9536  00EF  305D               	movlw	low (STR_52| (0+32768))
  9537  00F0  00AE               	movwf	printf@f
  9538  00F1  3091               	movlw	high (STR_52| (0+32768))
  9539  00F2  00AF               	movwf	printf@f+1
  9540  00F3  086B               	movf	_i,w
  9541  00F4  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9542  00F5  00C7               	movwf	??_PROTOCOL_Print_TLV
  9543  00F6  0847               	movf	??_PROTOCOL_Print_TLV,w
  9544  00F7  0086               	movwf	6
  9545  00F8  3001               	movlw	1	; select bank2/3
  9546  00F9  0087               	movwf	7
  9547  00FA  0801               	movf	1,w
  9548  00FB  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9549  00FC  01C9               	clrf	??_PROTOCOL_Print_TLV+2
  9550  00FD  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9551  00FE  00B0               	movwf	?_printf+2
  9552  00FF  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9553  0100  00B1               	movwf	?_printf+3
  9554  0101  3185  2519         	fcall	_printf
  9555                           
  9556                           ;protocol.c: 233: break;
  9557  0103  0008               	return
  9558  0104                     l5117:	
  9559                           ;protocol.c: 234: case 0x02:
  9560                           
  9561                           
  9562                           ;protocol.c: 235: length--;
  9563  0104  3001               	movlw	1
  9564  0105  0020               	movlb	0	; select bank0
  9565  0106  02C5               	subwf	PROTOCOL_Print_TLV@length,f
  9566                           
  9567                           ;protocol.c: 236: printf("INT8_T:");
  9568  0107  302E               	movlw	low ((STR_50+1)| (0+32768))
  9569  0108  00AE               	movwf	printf@f
  9570  0109  3091               	movlw	high ((STR_50+1)| (0+32768))
  9571  010A  00AF               	movwf	printf@f+1
  9572  010B  3185  2519  3180   	fcall	_printf
  9573                           
  9574                           ;protocol.c: 237: for (i=0; i<length; i++) printf("%d,", (int8_t)pbuffer[i]);
  9575  010E  0020               	movlb	0	; select bank0
  9576  010F  01EB               	clrf	_i
  9577  0110                     l5127:	
  9578  0110  0845               	movf	PROTOCOL_Print_TLV@length,w
  9579  0111  026B               	subwf	_i,w
  9580  0112  1803               	btfsc	3,0
  9581  0113  292D               	goto	l5129
  9582  0114  3071               	movlw	low (STR_14| (0+32768))
  9583  0115  00AE               	movwf	printf@f
  9584  0116  3091               	movlw	high (STR_14| (0+32768))
  9585  0117  00AF               	movwf	printf@f+1
  9586  0118  086B               	movf	_i,w
  9587  0119  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9588  011A  00C7               	movwf	??_PROTOCOL_Print_TLV
  9589  011B  0847               	movf	??_PROTOCOL_Print_TLV,w
  9590  011C  0086               	movwf	6
  9591  011D  3001               	movlw	1	; select bank2/3
  9592  011E  0087               	movwf	7
  9593  011F  0801               	movf	1,w
  9594  0120  00B0               	movwf	?_printf+2
  9595  0121  01B1               	clrf	?_printf+3
  9596  0122  1BB0               	btfsc	?_printf+2,7
  9597  0123  03B1               	decf	?_printf+3,f
  9598  0124  3185  2519  3180   	fcall	_printf
  9599  0127  3001               	movlw	1
  9600  0128  0020               	movlb	0	; select bank0
  9601  0129  00C7               	movwf	??_PROTOCOL_Print_TLV
  9602  012A  0847               	movf	??_PROTOCOL_Print_TLV,w
  9603  012B  07EB               	addwf	_i,f
  9604  012C  2910               	goto	l5127
  9605  012D                     l5129:	
  9606                           
  9607                           ;protocol.c: 238: printf("%d\n", (int8_t)pbuffer[i]);
  9608  012D  30DA               	movlw	low ((STR_48+6)| (0+32768))
  9609  012E  00AE               	movwf	printf@f
  9610  012F  3090               	movlw	high ((STR_48+6)| (0+32768))
  9611  0130  00AF               	movwf	printf@f+1
  9612  0131  086B               	movf	_i,w
  9613  0132  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9614  0133  00C7               	movwf	??_PROTOCOL_Print_TLV
  9615  0134  0847               	movf	??_PROTOCOL_Print_TLV,w
  9616  0135  0086               	movwf	6
  9617  0136  3001               	movlw	1	; select bank2/3
  9618  0137  0087               	movwf	7
  9619  0138  0801               	movf	1,w
  9620  0139  00B0               	movwf	?_printf+2
  9621  013A  01B1               	clrf	?_printf+3
  9622  013B  1BB0               	btfsc	?_printf+2,7
  9623  013C  03B1               	decf	?_printf+3,f
  9624  013D  3185  2519         	fcall	_printf
  9625                           
  9626                           ;protocol.c: 239: break;
  9627  013F  0008               	return
  9628  0140                     l5131:	
  9629                           ;protocol.c: 240: case 0x03:
  9630                           
  9631                           
  9632                           ;protocol.c: 241: printf("UINT16_T:");
  9633  0140  3006               	movlw	low (STR_56| (0+32768))
  9634  0141  0020               	movlb	0	; select bank0
  9635  0142  00AE               	movwf	printf@f
  9636  0143  3091               	movlw	high (STR_56| (0+32768))
  9637  0144  00AF               	movwf	printf@f+1
  9638  0145  3185  2519  3180   	fcall	_printf
  9639                           
  9640                           ;protocol.c: 242: length = length - 2;
  9641  0148  0020               	movlb	0	; select bank0
  9642  0149  0845               	movf	PROTOCOL_Print_TLV@length,w
  9643  014A  3EFE               	addlw	254
  9644  014B  00C7               	movwf	??_PROTOCOL_Print_TLV
  9645  014C  0847               	movf	??_PROTOCOL_Print_TLV,w
  9646  014D  00C5               	movwf	PROTOCOL_Print_TLV@length
  9647                           
  9648                           ;protocol.c: 243: for(i=0; i<length; i=i+2) printf("%u,", concat(pbuffer[i], pbuffer[i+1
      +                          ]));
  9649  014E  01EB               	clrf	_i
  9650  014F                     l5141:	
  9651  014F  0845               	movf	PROTOCOL_Print_TLV@length,w
  9652  0150  026B               	subwf	_i,w
  9653  0151  1803               	btfsc	3,0
  9654  0152  297D               	goto	l5143
  9655  0153  3061               	movlw	low (STR_51| (0+32768))
  9656  0154  00AE               	movwf	printf@f
  9657  0155  3091               	movlw	high (STR_51| (0+32768))
  9658  0156  00AF               	movwf	printf@f+1
  9659  0157  086B               	movf	_i,w
  9660  0158  3E01               	addlw	1
  9661  0159  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9662  015A  00C7               	movwf	??_PROTOCOL_Print_TLV
  9663  015B  0847               	movf	??_PROTOCOL_Print_TLV,w
  9664  015C  0086               	movwf	6
  9665  015D  3001               	movlw	1	; select bank2/3
  9666  015E  0087               	movwf	7
  9667  015F  0801               	movf	1,w
  9668  0160  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9669  0161  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9670  0162  00A0               	movwf	concat@lsb
  9671  0163  086B               	movf	_i,w
  9672  0164  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9673  0165  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9674  0166  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9675  0167  0086               	movwf	6
  9676  0168  3001               	movlw	1	; select bank2/3
  9677  0169  0087               	movwf	7
  9678  016A  0801               	movf	1,w
  9679  016B  3192  2287  3180   	fcall	_concat
  9680  016E  0020               	movlb	0	; select bank0
  9681  016F  0821               	movf	?_concat+1,w
  9682  0170  00B1               	movwf	?_printf+3
  9683  0171  0820               	movf	?_concat,w
  9684  0172  00B0               	movwf	?_printf+2
  9685  0173  3185  2519  3180   	fcall	_printf
  9686  0176  0020               	movlb	0	; select bank0
  9687  0177  086B               	movf	_i,w
  9688  0178  3E02               	addlw	2
  9689  0179  00C7               	movwf	??_PROTOCOL_Print_TLV
  9690  017A  0847               	movf	??_PROTOCOL_Print_TLV,w
  9691  017B  00EB               	movwf	_i
  9692  017C  294F               	goto	l5141
  9693  017D                     l5143:	
  9694                           
  9695                           ;protocol.c: 244: printf("%u\n", concat(pbuffer[i], pbuffer[i+1]));
  9696  017D  305D               	movlw	low (STR_52| (0+32768))
  9697  017E  00AE               	movwf	printf@f
  9698  017F  3091               	movlw	high (STR_52| (0+32768))
  9699  0180  00AF               	movwf	printf@f+1
  9700  0181  086B               	movf	_i,w
  9701  0182  3E01               	addlw	1
  9702  0183  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9703  0184  00C7               	movwf	??_PROTOCOL_Print_TLV
  9704  0185  0847               	movf	??_PROTOCOL_Print_TLV,w
  9705  0186  0086               	movwf	6
  9706  0187  3001               	movlw	1	; select bank2/3
  9707  0188  0087               	movwf	7
  9708  0189  0801               	movf	1,w
  9709  018A  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9710  018B  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9711  018C  00A0               	movwf	concat@lsb
  9712  018D  086B               	movf	_i,w
  9713  018E  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9714  018F  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9715  0190  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9716  0191  0086               	movwf	6
  9717  0192  3001               	movlw	1	; select bank2/3
  9718  0193  0087               	movwf	7
  9719  0194  0801               	movf	1,w
  9720  0195  3192  2287  3180   	fcall	_concat
  9721  0198  0020               	movlb	0	; select bank0
  9722  0199  0821               	movf	?_concat+1,w
  9723  019A  00B1               	movwf	?_printf+3
  9724  019B  0820               	movf	?_concat,w
  9725  019C  00B0               	movwf	?_printf+2
  9726  019D  3185  2519         	fcall	_printf
  9727                           
  9728                           ;protocol.c: 245: break;
  9729  019F  0008               	return
  9730  01A0                     l5145:	
  9731                           ;protocol.c: 246: case 0x04:
  9732                           
  9733                           
  9734                           ;protocol.c: 247: printf("INT16_T:");
  9735  01A0  3007               	movlw	low ((STR_56+1)| (0+32768))
  9736  01A1  0020               	movlb	0	; select bank0
  9737  01A2  00AE               	movwf	printf@f
  9738  01A3  3091               	movlw	high ((STR_56+1)| (0+32768))
  9739  01A4  00AF               	movwf	printf@f+1
  9740  01A5  3185  2519  3180   	fcall	_printf
  9741                           
  9742                           ;protocol.c: 248: length = length - 2;
  9743  01A8  0020               	movlb	0	; select bank0
  9744  01A9  0845               	movf	PROTOCOL_Print_TLV@length,w
  9745  01AA  3EFE               	addlw	254
  9746  01AB  00C7               	movwf	??_PROTOCOL_Print_TLV
  9747  01AC  0847               	movf	??_PROTOCOL_Print_TLV,w
  9748  01AD  00C5               	movwf	PROTOCOL_Print_TLV@length
  9749                           
  9750                           ;protocol.c: 249: for(i=0; i<length; i=i+2) printf("%d,", (int16_t)(concat(pbuffer[i], p
      +                          buffer[i+1])));
  9751  01AE  01EB               	clrf	_i
  9752  01AF                     l5155:	
  9753  01AF  0845               	movf	PROTOCOL_Print_TLV@length,w
  9754  01B0  026B               	subwf	_i,w
  9755  01B1  1803               	btfsc	3,0
  9756  01B2  29DD               	goto	l5157
  9757  01B3  3071               	movlw	low (STR_14| (0+32768))
  9758  01B4  00AE               	movwf	printf@f
  9759  01B5  3091               	movlw	high (STR_14| (0+32768))
  9760  01B6  00AF               	movwf	printf@f+1
  9761  01B7  086B               	movf	_i,w
  9762  01B8  3E01               	addlw	1
  9763  01B9  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9764  01BA  00C7               	movwf	??_PROTOCOL_Print_TLV
  9765  01BB  0847               	movf	??_PROTOCOL_Print_TLV,w
  9766  01BC  0086               	movwf	6
  9767  01BD  3001               	movlw	1	; select bank2/3
  9768  01BE  0087               	movwf	7
  9769  01BF  0801               	movf	1,w
  9770  01C0  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9771  01C1  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9772  01C2  00A0               	movwf	concat@lsb
  9773  01C3  086B               	movf	_i,w
  9774  01C4  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9775  01C5  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9776  01C6  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9777  01C7  0086               	movwf	6
  9778  01C8  3001               	movlw	1	; select bank2/3
  9779  01C9  0087               	movwf	7
  9780  01CA  0801               	movf	1,w
  9781  01CB  3192  2287  3180   	fcall	_concat
  9782  01CE  0020               	movlb	0	; select bank0
  9783  01CF  0821               	movf	?_concat+1,w
  9784  01D0  00B1               	movwf	?_printf+3
  9785  01D1  0820               	movf	?_concat,w
  9786  01D2  00B0               	movwf	?_printf+2
  9787  01D3  3185  2519  3180   	fcall	_printf
  9788  01D6  0020               	movlb	0	; select bank0
  9789  01D7  086B               	movf	_i,w
  9790  01D8  3E02               	addlw	2
  9791  01D9  00C7               	movwf	??_PROTOCOL_Print_TLV
  9792  01DA  0847               	movf	??_PROTOCOL_Print_TLV,w
  9793  01DB  00EB               	movwf	_i
  9794  01DC  29AF               	goto	l5155
  9795  01DD                     l5157:	
  9796                           
  9797                           ;protocol.c: 250: printf("%d\n", (int16_t)(concat(pbuffer[i], pbuffer[i+1])));
  9798  01DD  30DA               	movlw	low ((STR_48+6)| (0+32768))
  9799  01DE  00AE               	movwf	printf@f
  9800  01DF  3090               	movlw	high ((STR_48+6)| (0+32768))
  9801  01E0  00AF               	movwf	printf@f+1
  9802  01E1  086B               	movf	_i,w
  9803  01E2  3E01               	addlw	1
  9804  01E3  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9805  01E4  00C7               	movwf	??_PROTOCOL_Print_TLV
  9806  01E5  0847               	movf	??_PROTOCOL_Print_TLV,w
  9807  01E6  0086               	movwf	6
  9808  01E7  3001               	movlw	1	; select bank2/3
  9809  01E8  0087               	movwf	7
  9810  01E9  0801               	movf	1,w
  9811  01EA  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9812  01EB  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9813  01EC  00A0               	movwf	concat@lsb
  9814  01ED  086B               	movf	_i,w
  9815  01EE  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9816  01EF  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9817  01F0  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9818  01F1  0086               	movwf	6
  9819  01F2  3001               	movlw	1	; select bank2/3
  9820  01F3  0087               	movwf	7
  9821  01F4  0801               	movf	1,w
  9822  01F5  3192  2287  3180   	fcall	_concat
  9823  01F8  0020               	movlb	0	; select bank0
  9824  01F9  0821               	movf	?_concat+1,w
  9825  01FA  00B1               	movwf	?_printf+3
  9826  01FB  0820               	movf	?_concat,w
  9827  01FC  00B0               	movwf	?_printf+2
  9828  01FD  3185  2519         	fcall	_printf
  9829                           
  9830                           ;protocol.c: 251: break;
  9831  01FF  0008               	return
  9832  0200                     l5159:	
  9833                           ;protocol.c: 252: case 0x05:
  9834                           
  9835                           
  9836                           ;protocol.c: 253: printf("FLOAT:");
  9837  0200  3036               	movlw	low (STR_62| (0+32768))
  9838  0201  0020               	movlb	0	; select bank0
  9839  0202  00AE               	movwf	printf@f
  9840  0203  3091               	movlw	high (STR_62| (0+32768))
  9841  0204  00AF               	movwf	printf@f+1
  9842  0205  3185  2519  3180   	fcall	_printf
  9843                           
  9844                           ;protocol.c: 254: length = length - 2;
  9845  0208  0020               	movlb	0	; select bank0
  9846  0209  0845               	movf	PROTOCOL_Print_TLV@length,w
  9847  020A  3EFE               	addlw	254
  9848  020B  00C7               	movwf	??_PROTOCOL_Print_TLV
  9849  020C  0847               	movf	??_PROTOCOL_Print_TLV,w
  9850  020D  00C5               	movwf	PROTOCOL_Print_TLV@length
  9851                           
  9852                           ;protocol.c: 255: for (i=0; i<length; i=i+2) {
  9853  020E  01EB               	clrf	_i
  9854  020F                     l5177:	
  9855  020F  0845               	movf	PROTOCOL_Print_TLV@length,w
  9856  0210  026B               	subwf	_i,w
  9857  0211  1803               	btfsc	3,0
  9858  0212  2A79               	goto	l5179
  9859                           
  9860                           ;protocol.c: 256: v = (int16_t)(concat(pbuffer[i], pbuffer[i+1]));
  9861  0213  086B               	movf	_i,w
  9862  0214  3E01               	addlw	1
  9863  0215  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9864  0216  00C7               	movwf	??_PROTOCOL_Print_TLV
  9865  0217  0847               	movf	??_PROTOCOL_Print_TLV,w
  9866  0218  0086               	movwf	6
  9867  0219  3001               	movlw	1	; select bank2/3
  9868  021A  0087               	movwf	7
  9869  021B  0801               	movf	1,w
  9870  021C  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9871  021D  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9872  021E  00A0               	movwf	concat@lsb
  9873  021F  086B               	movf	_i,w
  9874  0220  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9875  0221  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9876  0222  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9877  0223  0086               	movwf	6
  9878  0224  3001               	movlw	1	; select bank2/3
  9879  0225  0087               	movwf	7
  9880  0226  0801               	movf	1,w
  9881  0227  3192  2287  3180   	fcall	_concat
  9882  022A  0020               	movlb	0	; select bank0
  9883  022B  0821               	movf	?_concat+1,w
  9884  022C  00CC               	movwf	PROTOCOL_Print_TLV@v+1
  9885  022D  0820               	movf	?_concat,w
  9886  022E  00CB               	movwf	PROTOCOL_Print_TLV@v
  9887                           
  9888                           ;protocol.c: 257: if (v <= -100 || v >= 0) {
  9889  022F  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  9890  0230  3A80               	xorlw	128
  9891  0231  00C7               	movwf	??_PROTOCOL_Print_TLV
  9892  0232  307F               	movlw	127
  9893  0233  0247               	subwf	??_PROTOCOL_Print_TLV,w
  9894  0234  1D03               	skipz
  9895  0235  2A38               	goto	u5785
  9896  0236  309D               	movlw	157
  9897  0237  024B               	subwf	PROTOCOL_Print_TLV@v,w
  9898  0238                     u5785:	
  9899  0238  1C03               	skipc
  9900  0239  2A3D               	goto	l5171
  9901  023A  0020               	movlb	0	; select bank0
  9902  023B  1BCC               	btfsc	PROTOCOL_Print_TLV@v+1,7
  9903  023C  2A42               	goto	l5173
  9904  023D                     l5171:	
  9905                           
  9906                           ;protocol.c: 258: printf("%d.%02d,", v/100, abs(v%100));
  9907  023D  30FD               	movlw	low ((STR_64+1)| (0+32768))
  9908  023E  0020               	movlb	0	; select bank0
  9909  023F  00AE               	movwf	printf@f
  9910  0240  3090               	movlw	high ((STR_64+1)| (0+32768))
  9911  0241  2A46               	goto	L12
  9912  0242                     l5173:	
  9913                           ;protocol.c: 259: } else {
  9914                           
  9915                           
  9916                           ;protocol.c: 260: printf("-%d.%02d,", v/100, abs(v%100));
  9917  0242  30FC               	movlw	low (STR_64| (0+32768))
  9918  0243  0020               	movlb	0	; select bank0
  9919  0244  00AE               	movwf	printf@f
  9920  0245  3090               	movlw	high (STR_64| (0+32768))
  9921  0246                     L12:	
  9922  0246  00AF               	movwf	printf@f+1
  9923  0247  3064               	movlw	100
  9924  0248  00A0               	movwf	___awdiv@divisor
  9925  0249  3000               	movlw	0
  9926  024A  00A1               	movwf	___awdiv@divisor+1
  9927  024B  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  9928  024C  00A3               	movwf	___awdiv@dividend+1
  9929  024D  084B               	movf	PROTOCOL_Print_TLV@v,w
  9930  024E  00A2               	movwf	___awdiv@dividend
  9931  024F  3188  20E5  3180   	fcall	___awdiv
  9932  0252  0020               	movlb	0	; select bank0
  9933  0253  0821               	movf	?___awdiv+1,w
  9934  0254  00B1               	movwf	?_printf+3
  9935  0255  0820               	movf	?___awdiv,w
  9936  0256  00B0               	movwf	?_printf+2
  9937  0257  3064               	movlw	100
  9938  0258  00A0               	movwf	___awmod@divisor
  9939  0259  3000               	movlw	0
  9940  025A  00A1               	movwf	___awmod@divisor+1
  9941  025B  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  9942  025C  00A3               	movwf	___awmod@dividend+1
  9943  025D  084B               	movf	PROTOCOL_Print_TLV@v,w
  9944  025E  00A2               	movwf	___awmod@dividend
  9945  025F  3196  2644  3180   	fcall	___awmod
  9946  0262  0020               	movlb	0	; select bank0
  9947  0263  0821               	movf	?___awmod+1,w
  9948  0264  00A8               	movwf	abs@a+1
  9949  0265  0820               	movf	?___awmod,w
  9950  0266  00A7               	movwf	abs@a
  9951  0267  3192  2257  3180   	fcall	_abs
  9952  026A  0020               	movlb	0	; select bank0
  9953  026B  0828               	movf	?_abs+1,w
  9954  026C  00B3               	movwf	?_printf+5
  9955  026D  0827               	movf	?_abs,w
  9956  026E  00B2               	movwf	?_printf+4
  9957  026F  3185  2519  3180   	fcall	_printf
  9958  0272  0020               	movlb	0	; select bank0
  9959  0273  086B               	movf	_i,w
  9960  0274  3E02               	addlw	2
  9961  0275  00C7               	movwf	??_PROTOCOL_Print_TLV
  9962  0276  0847               	movf	??_PROTOCOL_Print_TLV,w
  9963  0277  00EB               	movwf	_i
  9964  0278  2A0F               	goto	l5177
  9965  0279                     l5179:	
  9966                           
  9967                           ;protocol.c: 261: }
  9968                           ;protocol.c: 262: }
  9969                           ;protocol.c: 263: v = (int16_t)(concat(pbuffer[i], pbuffer[i+1]));
  9970  0279  086B               	movf	_i,w
  9971  027A  3E01               	addlw	1
  9972  027B  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9973  027C  00C7               	movwf	??_PROTOCOL_Print_TLV
  9974  027D  0847               	movf	??_PROTOCOL_Print_TLV,w
  9975  027E  0086               	movwf	6
  9976  027F  3001               	movlw	1	; select bank2/3
  9977  0280  0087               	movwf	7
  9978  0281  0801               	movf	1,w
  9979  0282  00C8               	movwf	??_PROTOCOL_Print_TLV+1
  9980  0283  0848               	movf	??_PROTOCOL_Print_TLV+1,w
  9981  0284  00A0               	movwf	concat@lsb
  9982  0285  086B               	movf	_i,w
  9983  0286  0746               	addwf	PROTOCOL_Print_TLV@pbuffer,w
  9984  0287  00C9               	movwf	??_PROTOCOL_Print_TLV+2
  9985  0288  0849               	movf	??_PROTOCOL_Print_TLV+2,w
  9986  0289  0086               	movwf	6
  9987  028A  3001               	movlw	1	; select bank2/3
  9988  028B  0087               	movwf	7
  9989  028C  0801               	movf	1,w
  9990  028D  3192  2287  3180   	fcall	_concat
  9991  0290  0020               	movlb	0	; select bank0
  9992  0291  0821               	movf	?_concat+1,w
  9993  0292  00CC               	movwf	PROTOCOL_Print_TLV@v+1
  9994  0293  0820               	movf	?_concat,w
  9995  0294  00CB               	movwf	PROTOCOL_Print_TLV@v
  9996                           
  9997                           ;protocol.c: 264: if (v <= -100 || v >= 0) {
  9998  0295  084C               	movf	PROTOCOL_Print_TLV@v+1,w
  9999  0296  3A80               	xorlw	128
 10000  0297  00C7               	movwf	??_PROTOCOL_Print_TLV
 10001  0298  307F               	movlw	127
 10002  0299  0247               	subwf	??_PROTOCOL_Print_TLV,w
 10003  029A  1D03               	skipz
 10004  029B  2A9E               	goto	u5815
 10005  029C  309D               	movlw	157
 10006  029D  024B               	subwf	PROTOCOL_Print_TLV@v,w
 10007  029E                     u5815:	
 10008  029E  1C03               	skipc
 10009  029F  2AA3               	goto	l5185
 10010  02A0  0020               	movlb	0	; select bank0
 10011  02A1  1BCC               	btfsc	PROTOCOL_Print_TLV@v+1,7
 10012  02A2  2AD3               	goto	l5187
 10013  02A3                     l5185:	
 10014                           
 10015                           ;protocol.c: 265: printf("%d.%02d\n", v/100, abs(v%100));
 10016  02A3  30DF               	movlw	low ((STR_66+1)| (0+32768))
 10017  02A4  0020               	movlb	0	; select bank0
 10018  02A5  00AE               	movwf	printf@f
 10019  02A6  3090               	movlw	high ((STR_66+1)| (0+32768))
 10020  02A7  00AF               	movwf	printf@f+1
 10021  02A8  3064               	movlw	100
 10022  02A9  00A0               	movwf	___awdiv@divisor
 10023  02AA  3000               	movlw	0
 10024  02AB  00A1               	movwf	___awdiv@divisor+1
 10025  02AC  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10026  02AD  00A3               	movwf	___awdiv@dividend+1
 10027  02AE  084B               	movf	PROTOCOL_Print_TLV@v,w
 10028  02AF  00A2               	movwf	___awdiv@dividend
 10029  02B0  3188  20E5  3180   	fcall	___awdiv
 10030  02B3  0020               	movlb	0	; select bank0
 10031  02B4  0821               	movf	?___awdiv+1,w
 10032  02B5  00B1               	movwf	?_printf+3
 10033  02B6  0820               	movf	?___awdiv,w
 10034  02B7  00B0               	movwf	?_printf+2
 10035  02B8  3064               	movlw	100
 10036  02B9  00A0               	movwf	___awmod@divisor
 10037  02BA  3000               	movlw	0
 10038  02BB  00A1               	movwf	___awmod@divisor+1
 10039  02BC  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10040  02BD  00A3               	movwf	___awmod@dividend+1
 10041  02BE  084B               	movf	PROTOCOL_Print_TLV@v,w
 10042  02BF  00A2               	movwf	___awmod@dividend
 10043  02C0  3196  2644  3180   	fcall	___awmod
 10044  02C3  0020               	movlb	0	; select bank0
 10045  02C4  0821               	movf	?___awmod+1,w
 10046  02C5  00A8               	movwf	abs@a+1
 10047  02C6  0820               	movf	?___awmod,w
 10048  02C7  00A7               	movwf	abs@a
 10049  02C8  3192  2257  3180   	fcall	_abs
 10050  02CB  0020               	movlb	0	; select bank0
 10051  02CC  0828               	movf	?_abs+1,w
 10052  02CD  00B3               	movwf	?_printf+5
 10053  02CE  0827               	movf	?_abs,w
 10054  02CF  00B2               	movwf	?_printf+4
 10055  02D0  3185  2519         	fcall	_printf
 10056                           
 10057                           ;protocol.c: 266: } else {
 10058  02D2  0008               	return
 10059  02D3                     l5187:	
 10060                           
 10061                           ;protocol.c: 267: printf("-%d.%02d\n", v/100, abs(v%100));
 10062  02D3  30DE               	movlw	low (STR_66| (0+32768))
 10063  02D4  0020               	movlb	0	; select bank0
 10064  02D5  00AE               	movwf	printf@f
 10065  02D6  3090               	movlw	high (STR_66| (0+32768))
 10066  02D7  00AF               	movwf	printf@f+1
 10067  02D8  3064               	movlw	100
 10068  02D9  00A0               	movwf	___awdiv@divisor
 10069  02DA  3000               	movlw	0
 10070  02DB  00A1               	movwf	___awdiv@divisor+1
 10071  02DC  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10072  02DD  00A3               	movwf	___awdiv@dividend+1
 10073  02DE  084B               	movf	PROTOCOL_Print_TLV@v,w
 10074  02DF  00A2               	movwf	___awdiv@dividend
 10075  02E0  3188  20E5  3180   	fcall	___awdiv
 10076  02E3  0020               	movlb	0	; select bank0
 10077  02E4  0821               	movf	?___awdiv+1,w
 10078  02E5  00B1               	movwf	?_printf+3
 10079  02E6  0820               	movf	?___awdiv,w
 10080  02E7  00B0               	movwf	?_printf+2
 10081  02E8  3064               	movlw	100
 10082  02E9  00A0               	movwf	___awmod@divisor
 10083  02EA  3000               	movlw	0
 10084  02EB  00A1               	movwf	___awmod@divisor+1
 10085  02EC  084C               	movf	PROTOCOL_Print_TLV@v+1,w
 10086  02ED  00A3               	movwf	___awmod@dividend+1
 10087  02EE  084B               	movf	PROTOCOL_Print_TLV@v,w
 10088  02EF  00A2               	movwf	___awmod@dividend
 10089  02F0  3196  2644  3180   	fcall	___awmod
 10090  02F3  0020               	movlb	0	; select bank0
 10091  02F4  0821               	movf	?___awmod+1,w
 10092  02F5  00A8               	movwf	abs@a+1
 10093  02F6  0820               	movf	?___awmod,w
 10094  02F7  00A7               	movwf	abs@a
 10095  02F8  3192  2257  3180   	fcall	_abs
 10096  02FB  0020               	movlb	0	; select bank0
 10097  02FC  0828               	movf	?_abs+1,w
 10098  02FD  00B3               	movwf	?_printf+5
 10099  02FE  0827               	movf	?_abs,w
 10100  02FF  00B2               	movwf	?_printf+4
 10101  0300  3185  2519         	fcall	_printf
 10102                           
 10103                           ;protocol.c: 268: }
 10104                           ;protocol.c: 269: break;
 10105  0302  0008               	return
 10106  0303                     l5189:	
 10107                           ;protocol.c: 270: case 0x06:
 10108                           
 10109                           
 10110                           ;protocol.c: 271: printf("NO_DATA\n");
 10111  0303  3024               	movlw	low (STR_67| (0+32768))
 10112  0304  0020               	movlb	0	; select bank0
 10113  0305  00AE               	movwf	printf@f
 10114  0306  3091               	movlw	high (STR_67| (0+32768))
 10115  0307  00AF               	movwf	printf@f+1
 10116  0308  3185  2519         	fcall	_printf
 10117                           
 10118                           ;protocol.c: 272: break;
 10119  030A  0008               	return
 10120  030B                     l5191:	
 10121                           ;protocol.c: 273: default:
 10122                           
 10123                           
 10124                           ;protocol.c: 274: printf("ILLEGAL_TYPE\n");
 10125  030B  30AF               	movlw	low (STR_68| (0+32768))
 10126  030C  0020               	movlb	0	; select bank0
 10127  030D  00AE               	movwf	printf@f
 10128  030E  3090               	movlw	high (STR_68| (0+32768))
 10129  030F  00AF               	movwf	printf@f+1
 10130  0310  3185  2519         	fcall	_printf
 10131                           
 10132                           ;protocol.c: 276: }
 10133                           
 10134                           ;protocol.c: 275: break;
 10135  0312  0008               	return
 10136  0313                     l5195:	
 10137  0313  0020               	movlb	0	; select bank0
 10138  0314  0844               	movf	PROTOCOL_Print_TLV@type,w
 10139                           
 10140                           ; Switch size 1, requested type "space"
 10141                           ; Number of cases is 6, Range of values is 1 to 6
 10142                           ; switch strategies available:
 10143                           ; Name         Instructions Cycles
 10144                           ; simple_byte           19    10 (average)
 10145                           ; direct_byte           21     9 (fixed)
 10146                           ; jumptable            263     9 (fixed)
 10147                           ;	Chosen strategy is simple_byte
 10148  0315  3A01               	xorlw	1	; case 1
 10149  0316  1903               	skipnz
 10150  0317  28C4               	goto	l5103
 10151  0318  3A03               	xorlw	3	; case 2
 10152  0319  1903               	skipnz
 10153  031A  2904               	goto	l5117
 10154  031B  3A01               	xorlw	1	; case 3
 10155  031C  1903               	skipnz
 10156  031D  2940               	goto	l5131
 10157  031E  3A07               	xorlw	7	; case 4
 10158  031F  1903               	skipnz
 10159  0320  29A0               	goto	l5145
 10160  0321  3A01               	xorlw	1	; case 5
 10161  0322  1903               	skipnz
 10162  0323  2A00               	goto	l5159
 10163  0324  3A03               	xorlw	3	; case 6
 10164  0325  1903               	skipnz
 10165  0326  2B03               	goto	l5189
 10166  0327  2B0B               	goto	l5191
 10167  0328  0008               	return
 10168  0329                     __end_of_PROTOCOL_Print_TLV:	
 10169                           
 10170                           	psect	text45
 10171  0519                     __ptext45:	
 10172 ;; *************** function _printf *****************
 10173 ;; Defined at:
 10174 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
 10175 ;; Parameters:    Size  Location     Type
 10176 ;;  f               2   14[BANK0 ] PTR const unsigned char 
 10177 ;;		 -> STR_80(10), STR_79(9), STR_78(10), STR_77(9), 
 10178 ;;		 -> STR_76(4), STR_75(4), STR_74(4), STR_73(4), 
 10179 ;;		 -> STR_72(4), STR_71(4), STR_70(4), STR_69(4), 
 10180 ;;		 -> STR_68(14), STR_67(9), STR_66(10), STR_65(9), 
 10181 ;;		 -> STR_64(10), STR_63(9), STR_62(7), STR_61(4), 
 10182 ;;		 -> STR_60(4), STR_59(9), STR_58(4), STR_57(4), 
 10183 ;;		 -> STR_56(10), STR_55(4), STR_54(4), STR_53(8), 
 10184 ;;		 -> STR_52(4), STR_51(4), STR_50(9), STR_49(6), 
 10185 ;;		 -> STR_48(10), STR_45(10), STR_41(10), STR_37(10), 
 10186 ;;		 -> STR_35(5), STR_30(4), STR_29(4), STR_28(4), 
 10187 ;;		 -> STR_27(7), STR_25(26), STR_23(26), STR_19(22), 
 10188 ;;		 -> STR_18(22), STR_17(26), STR_16(22), STR_15(4), 
 10189 ;;		 -> STR_14(4), STR_13(7), STR_12(25), STR_11(10), 
 10190 ;;		 -> STR_8(12), STR_7(11), STR_3(3), STR_2(10), 
 10191 ;; Auto vars:     Size  Location     Type
 10192 ;;  tmpval          4    0        struct .
 10193 ;;  width           2   33[BANK0 ] int 
 10194 ;;  len             2   30[BANK0 ] unsigned int 
 10195 ;;  val             2   28[BANK0 ] unsigned int 
 10196 ;;  cp              2   25[BANK0 ] PTR const unsigned char 
 10197 ;;		 -> STR_42(4), buf(48), STR_34(7), ROM(8192), 
 10198 ;;		 -> printf@c(1), STR_33(17), I2C1_ISR@i2c_address(2), 
 10199 ;;  c               1   35[BANK0 ] char 
 10200 ;;  flag            1   32[BANK0 ] unsigned char 
 10201 ;;  ap              1   27[BANK0 ] PTR void [1]
 10202 ;;		 -> ?_printf(2), 
 10203 ;;  prec            1   24[BANK0 ] char 
 10204 ;; Return value:  Size  Location     Type
 10205 ;;                  2   14[BANK0 ] int 
 10206 ;; Registers used:
 10207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10208 ;; Tracked objects:
 10209 ;;		On entry : 0/0
 10210 ;;		On exit  : 0/0
 10211 ;;		Unchanged: 0/0
 10212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10213 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;Total ram usage:       22 bytes
 10218 ;; Hardware stack levels used:    1
 10219 ;; Hardware stack levels required when called:    5
 10220 ;; This function calls:
 10221 ;;		___lwdiv
 10222 ;;		___lwmod
 10223 ;;		___wmul
 10224 ;;		_isdigit
 10225 ;;		_putch
 10226 ;; This function is called by:
 10227 ;;		_exec_remote_cmd
 10228 ;;		_print_dev_map
 10229 ;;		_one_shot_sen
 10230 ;;		_fetch
 10231 ;;		_command_handler
 10232 ;;		_PROTOCOL_Loop
 10233 ;;		_PROTOCOL_Print_TLV
 10234 ;; This function uses a non-reentrant model
 10235 ;;
 10236                           
 10237                           
 10238                           ;psect for function _printf
 10239  0519                     _printf:	
 10240                           
 10241                           ;doprnt.c: 466: va_list ap;
 10242                           ;doprnt.c: 499: signed char c;
 10243                           ;doprnt.c: 501: int width;
 10244                           ;doprnt.c: 506: signed char prec;
 10245                           ;doprnt.c: 508: unsigned char flag;
 10246                           ;doprnt.c: 523: union {
 10247                           ;doprnt.c: 524: unsigned long vd;
 10248                           ;doprnt.c: 525: double integ;
 10249                           ;doprnt.c: 526: } tmpval;
 10250                           ;doprnt.c: 528: unsigned int val;
 10251                           ;doprnt.c: 529: unsigned len;
 10252                           ;doprnt.c: 530: const char * cp;
 10253                           ;doprnt.c: 533: *ap = __va_start();
 10254                           
 10255                           ;incstack = 0
 10256                           ; Regs used in _printf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10257  0519  3030               	movlw	(low ((?_printf| 0+2)))& (0+255)
 10258  051A  0020               	movlb	0	; select bank0
 10259  051B  00B4               	movwf	??_printf
 10260  051C  0834               	movf	??_printf,w
 10261  051D  00BB               	movwf	printf@ap
 10262  051E                     l4961:	
 10263                           ;doprnt.c: 536: while(c = *f++) {
 10264                           
 10265  051E  0020               	movlb	0	; select bank0
 10266  051F  082F               	movf	printf@f+1,w
 10267  0520  00B5               	movwf	??_printf+1
 10268  0521  082E               	movf	printf@f,w
 10269  0522  00B4               	movwf	??_printf
 10270  0523  0AAE               	incf	printf@f,f
 10271  0524  1903               	skipnz
 10272  0525  0AAF               	incf	printf@f+1,f
 10273  0526  0834               	movf	??_printf,w
 10274  0527  0084               	movwf	4
 10275  0528  0835               	movf	??_printf+1,w
 10276  0529  0085               	movwf	5
 10277  052A  0800               	movf	0,w	;code access
 10278  052B  00B6               	movwf	??_printf+2
 10279  052C  0836               	movf	??_printf+2,w
 10280  052D  00C3               	movwf	printf@c
 10281  052E  0843               	movf	printf@c,w
 10282  052F  1903               	btfsc	3,2
 10283  0530  0008               	return
 10284                           
 10285                           ;doprnt.c: 538: if(c != '%')
 10286  0531  3025               	movlw	37
 10287  0532  0643               	xorwf	printf@c,w
 10288  0533  1903               	btfsc	3,2
 10289  0534  2D3A               	goto	l4837
 10290                           
 10291                           ;doprnt.c: 540: {
 10292                           ;doprnt.c: 541: (putch(c) );
 10293  0535  0843               	movf	printf@c,w
 10294  0536  3191  21F3  3185   	fcall	_putch
 10295                           
 10296                           ;doprnt.c: 542: continue;
 10297  0539  2D1E               	goto	l4961
 10298  053A                     l4837:	
 10299                           
 10300                           ;doprnt.c: 543: }
 10301                           ;doprnt.c: 546: width = 0;
 10302  053A  0020               	movlb	0	; select bank0
 10303  053B  01C1               	clrf	printf@width
 10304  053C  01C2               	clrf	printf@width+1
 10305                           
 10306                           ;doprnt.c: 548: flag = 0;
 10307  053D  01C0               	clrf	printf@flag
 10308                           
 10309                           ;doprnt.c: 551: switch(*f) {
 10310                           
 10311                           ;doprnt.c: 550: for(;;) {
 10312  053E  2D44               	goto	l4843
 10313  053F                     l660:	
 10314                           ;doprnt.c: 579: case '0':
 10315                           
 10316                           
 10317                           ;doprnt.c: 580: flag |= 0x04;
 10318  053F  1540               	bsf	printf@flag,2
 10319                           
 10320                           ;doprnt.c: 581: f++;
 10321  0540  3001               	movlw	1
 10322  0541  07AE               	addwf	printf@f,f
 10323  0542  3000               	movlw	0
 10324  0543  3DAF               	addwfc	printf@f+1,f
 10325  0544                     l4843:	
 10326                           ;doprnt.c: 584: }
 10327                           
 10328                           ;doprnt.c: 582: continue;
 10329                           
 10330  0544  082E               	movf	printf@f,w
 10331  0545  0084               	movwf	4
 10332  0546  082F               	movf	printf@f+1,w
 10333  0547  0085               	movwf	5
 10334  0548  0800               	movf	0,w	;code access
 10335                           
 10336                           ; Switch size 1, requested type "space"
 10337                           ; Number of cases is 1, Range of values is 48 to 48
 10338                           ; switch strategies available:
 10339                           ; Name         Instructions Cycles
 10340                           ; simple_byte            4     3 (average)
 10341                           ; direct_byte           11     9 (fixed)
 10342                           ; jumptable            263     9 (fixed)
 10343                           ;	Chosen strategy is simple_byte
 10344  0549  3A30               	xorlw	48	; case 48
 10345  054A  1903               	skipnz
 10346  054B  2D3F               	goto	l660
 10347  054C  2D4D               	goto	l4845
 10348  054D                     l4845:	
 10349                           ;doprnt.c: 586: }
 10350                           
 10351                           ;doprnt.c: 585: break;
 10352                           
 10353                           
 10354                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 10355  054D  082E               	movf	printf@f,w
 10356  054E  0084               	movwf	4
 10357  054F  082F               	movf	printf@f+1,w
 10358  0550  0085               	movwf	5
 10359  0551  0800               	movf	0,w	;code access
 10360  0552  3192  2248  3185   	fcall	_isdigit
 10361  0555  1C03               	btfss	3,0
 10362  0556  2DEE               	goto	l4893
 10363                           
 10364                           ;doprnt.c: 598: width = 0;
 10365  0557  0020               	movlb	0	; select bank0
 10366  0558  01C1               	clrf	printf@width
 10367  0559  01C2               	clrf	printf@width+1
 10368  055A                     l4849:	
 10369                           ;doprnt.c: 599: do {
 10370                           
 10371                           
 10372                           ;doprnt.c: 600: width *= 10;
 10373  055A  300A               	movlw	10
 10374  055B  0020               	movlb	0	; select bank0
 10375  055C  00A0               	movwf	___wmul@multiplier
 10376  055D  3000               	movlw	0
 10377  055E  00A1               	movwf	___wmul@multiplier+1
 10378  055F  0842               	movf	printf@width+1,w
 10379  0560  00A3               	movwf	___wmul@multiplicand+1
 10380  0561  0841               	movf	printf@width,w
 10381  0562  00A2               	movwf	___wmul@multiplicand
 10382  0563  3193  235A  3185   	fcall	___wmul
 10383  0566  0020               	movlb	0	; select bank0
 10384  0567  0821               	movf	?___wmul+1,w
 10385  0568  00C2               	movwf	printf@width+1
 10386  0569  0820               	movf	?___wmul,w
 10387  056A  00C1               	movwf	printf@width
 10388                           
 10389                           ;doprnt.c: 601: width += *f++ - '0';
 10390  056B  082E               	movf	printf@f,w
 10391  056C  0084               	movwf	4
 10392  056D  082F               	movf	printf@f+1,w
 10393  056E  0085               	movwf	5
 10394  056F  0800               	movf	0,w	;code access
 10395  0570  3ED0               	addlw	208
 10396  0571  00B4               	movwf	??_printf
 10397  0572  30FF               	movlw	255
 10398  0573  1803               	skipnc
 10399  0574  3000               	movlw	0
 10400  0575  00B5               	movwf	??_printf+1
 10401  0576  0834               	movf	??_printf,w
 10402  0577  07C1               	addwf	printf@width,f
 10403  0578  0835               	movf	??_printf+1,w
 10404  0579  3DC2               	addwfc	printf@width+1,f
 10405  057A  3001               	movlw	1
 10406  057B  07AE               	addwf	printf@f,f
 10407  057C  3000               	movlw	0
 10408  057D  3DAF               	addwfc	printf@f+1,f
 10409                           
 10410                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 10411  057E  082E               	movf	printf@f,w
 10412  057F  0084               	movwf	4
 10413  0580  082F               	movf	printf@f+1,w
 10414  0581  0085               	movwf	5
 10415  0582  0800               	movf	0,w	;code access
 10416  0583  3192  2248  3185   	fcall	_isdigit
 10417  0586  1C03               	btfss	3,0
 10418  0587  2DEE               	goto	l4893
 10419  0588  2D5A               	goto	l4849
 10420  0589                     l4857:	
 10421                           ;doprnt.c: 728: case 's':
 10422                           
 10423                           ;doprnt.c: 698: case 'i':
 10424                           ;doprnt.c: 699: break;
 10425                           
 10426                           ;doprnt.c: 697: case 'd':
 10427                           
 10428                           ;doprnt.c: 638: goto alldone;
 10429                           
 10430                           ;doprnt.c: 637: case 0:
 10431                           
 10432                           ;doprnt.c: 608: }
 10433                           ;doprnt.c: 635: switch(c = *f++) {
 10434                           
 10435                           
 10436                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 10437  0589  0020               	movlb	0	; select bank0
 10438  058A  083B               	movf	printf@ap,w
 10439  058B  0086               	movwf	6
 10440  058C  0187               	clrf	7
 10441  058D  3F40               	moviw [0]fsr1
 10442  058E  00B9               	movwf	printf@cp
 10443  058F  3F41               	moviw [1]fsr1
 10444  0590  00BA               	movwf	printf@cp+1
 10445  0591  3002               	movlw	2
 10446  0592  00B4               	movwf	??_printf
 10447  0593  0834               	movf	??_printf,w
 10448  0594  07BB               	addwf	printf@ap,f
 10449                           
 10450                           ;doprnt.c: 740: if(!cp)
 10451  0595  0839               	movf	printf@cp,w
 10452  0596  043A               	iorwf	printf@cp+1,w
 10453  0597  1D03               	btfss	3,2
 10454  0598  2D9D               	goto	l4865
 10455                           
 10456                           ;doprnt.c: 741: cp = "(null)";
 10457  0599  303D               	movlw	low (STR_34| (0+32768))
 10458  059A  00B9               	movwf	printf@cp
 10459  059B  3091               	movlw	high (STR_34| (0+32768))
 10460  059C  00BA               	movwf	printf@cp+1
 10461  059D                     l4865:	
 10462                           
 10463                           ;doprnt.c: 745: len = 0;
 10464  059D  01BE               	clrf	printf@len
 10465  059E  01BF               	clrf	printf@len+1
 10466  059F                     l4869:	
 10467                           ;doprnt.c: 746: while(cp[len])
 10468                           
 10469  059F  0839               	movf	printf@cp,w
 10470  05A0  073E               	addwf	printf@len,w
 10471  05A1  0084               	movwf	4
 10472  05A2  083A               	movf	printf@cp+1,w
 10473  05A3  3D3F               	addwfc	printf@len+1,w
 10474  05A4  0085               	movwf	5
 10475  05A5  0012               	moviw fsr0++
 10476  05A6  1903               	btfsc	3,2
 10477  05A7  2DAD               	goto	l4871
 10478                           
 10479                           ;doprnt.c: 747: len++;
 10480  05A8  3001               	movlw	1
 10481  05A9  07BE               	addwf	printf@len,f
 10482  05AA  3000               	movlw	0
 10483  05AB  3DBF               	addwfc	printf@len+1,f
 10484  05AC  2D9F               	goto	l4869
 10485  05AD                     l4871:	
 10486                           ;doprnt.c: 750: dostring:
 10487                           
 10488                           
 10489                           ;doprnt.c: 757: if(width > len)
 10490  05AD  0842               	movf	printf@width+1,w
 10491  05AE  023F               	subwf	printf@len+1,w
 10492  05AF  1D03               	skipz
 10493  05B0  2DB3               	goto	u5275
 10494  05B1  0841               	movf	printf@width,w
 10495  05B2  023E               	subwf	printf@len,w
 10496  05B3                     u5275:	
 10497  05B3  1803               	skipnc
 10498  05B4  2DBA               	goto	l4875
 10499                           
 10500                           ;doprnt.c: 758: width -= len;
 10501  05B5  083E               	movf	printf@len,w
 10502  05B6  02C1               	subwf	printf@width,f
 10503  05B7  083F               	movf	printf@len+1,w
 10504  05B8  3BC2               	subwfb	printf@width+1,f
 10505  05B9  2DBC               	goto	l4879
 10506  05BA                     l4875:	
 10507                           
 10508                           ;doprnt.c: 759: else
 10509                           ;doprnt.c: 760: width = 0;
 10510  05BA  01C1               	clrf	printf@width
 10511  05BB  01C2               	clrf	printf@width+1
 10512  05BC                     l4879:	
 10513                           ;doprnt.c: 764: while(width--)
 10514                           
 10515  05BC  30FF               	movlw	255
 10516  05BD  0020               	movlb	0	; select bank0
 10517  05BE  07C1               	addwf	printf@width,f
 10518  05BF  30FF               	movlw	255
 10519  05C0  3DC2               	addwfc	printf@width+1,f
 10520  05C1  0A41               	incf	printf@width,w
 10521  05C2  1903               	btfsc	3,2
 10522  05C3  0A42               	incf	printf@width+1,w
 10523  05C4  1903               	btfsc	3,2
 10524  05C5  2DD8               	goto	l4885
 10525                           
 10526                           ;doprnt.c: 765: (putch(' ') );
 10527  05C6  3020               	movlw	32
 10528  05C7  3191  21F3  3185   	fcall	_putch
 10529  05CA  2DBC               	goto	l4879
 10530  05CB                     l4881:	
 10531                           ;doprnt.c: 767: while(len--)
 10532                           
 10533                           
 10534                           ;doprnt.c: 768: (putch(*cp++) );
 10535  05CB  0839               	movf	printf@cp,w
 10536  05CC  0084               	movwf	4
 10537  05CD  083A               	movf	printf@cp+1,w
 10538  05CE  0085               	movwf	5
 10539  05CF  0800               	movf	0,w	;code access
 10540  05D0  3191  21F3  3185   	fcall	_putch
 10541  05D3  3001               	movlw	1
 10542  05D4  0020               	movlb	0	; select bank0
 10543  05D5  07B9               	addwf	printf@cp,f
 10544  05D6  3000               	movlw	0
 10545  05D7  3DBA               	addwfc	printf@cp+1,f
 10546  05D8                     l4885:	
 10547  05D8  3001               	movlw	1
 10548  05D9  02BE               	subwf	printf@len,f
 10549  05DA  3000               	movlw	0
 10550  05DB  3BBF               	subwfb	printf@len+1,f
 10551  05DC  0A3E               	incf	printf@len,w
 10552  05DD  1D03               	skipz
 10553  05DE  2DCB               	goto	l4881
 10554  05DF  0A3F               	incf	printf@len+1,w
 10555  05E0  1903               	btfsc	3,2
 10556  05E1  2D1E               	goto	l4961
 10557  05E2  2DCB               	goto	l4881
 10558  05E3                     l4887:	
 10559                           ;doprnt.c: 802: default:
 10560                           
 10561                           ;doprnt.c: 774: continue;
 10562                           
 10563                           
 10564                           ;doprnt.c: 805: cp = (char *)&c;
 10565  05E3  3043               	movlw	low printf@c
 10566  05E4  00B9               	movwf	printf@cp
 10567  05E5  3000               	movlw	high printf@c
 10568  05E6  00BA               	movwf	printf@cp+1
 10569                           
 10570                           ;doprnt.c: 806: len = 1;
 10571  05E7  3001               	movlw	1
 10572  05E8  00BE               	movwf	printf@len
 10573  05E9  3000               	movlw	0
 10574  05EA  00BF               	movwf	printf@len+1
 10575                           
 10576                           ;doprnt.c: 807: goto dostring;
 10577  05EB  2DAD               	goto	l4871
 10578  05EC                     l688:	
 10579                           ;doprnt.c: 817: case 'u':
 10580                           
 10581                           
 10582                           ;doprnt.c: 818: flag |= 0x40;
 10583  05EC  1740               	bsf	printf@flag,6
 10584                           
 10585                           ;doprnt.c: 822: }
 10586                           
 10587                           ;doprnt.c: 819: break;
 10588  05ED  2E0C               	goto	l672
 10589  05EE                     l4893:	
 10590  05EE  0020               	movlb	0	; select bank0
 10591  05EF  082F               	movf	printf@f+1,w
 10592  05F0  00B5               	movwf	??_printf+1
 10593  05F1  082E               	movf	printf@f,w
 10594  05F2  00B4               	movwf	??_printf
 10595  05F3  0AAE               	incf	printf@f,f
 10596  05F4  1903               	skipnz
 10597  05F5  0AAF               	incf	printf@f+1,f
 10598  05F6  0834               	movf	??_printf,w
 10599  05F7  0084               	movwf	4
 10600  05F8  0835               	movf	??_printf+1,w
 10601  05F9  0085               	movwf	5
 10602  05FA  0800               	movf	0,w	;code access
 10603  05FB  00C3               	movwf	printf@c
 10604                           
 10605                           ; Switch size 1, requested type "space"
 10606                           ; Number of cases is 5, Range of values is 0 to 117
 10607                           ; switch strategies available:
 10608                           ; Name         Instructions Cycles
 10609                           ; simple_byte           16     9 (average)
 10610                           ; direct_byte          242     6 (fixed)
 10611                           ; jumptable            260     6 (fixed)
 10612                           ;	Chosen strategy is simple_byte
 10613  05FC  3A00               	xorlw	0	; case 0
 10614  05FD  1903               	skipnz
 10615  05FE  2EED               	goto	l712
 10616  05FF  3A64               	xorlw	100	; case 100
 10617  0600  1903               	skipnz
 10618  0601  2E0C               	goto	l672
 10619  0602  3A0D               	xorlw	13	; case 105
 10620  0603  1903               	skipnz
 10621  0604  2E0C               	goto	l672
 10622  0605  3A1A               	xorlw	26	; case 115
 10623  0606  1903               	skipnz
 10624  0607  2D89               	goto	l4857
 10625  0608  3A06               	xorlw	6	; case 117
 10626  0609  1903               	skipnz
 10627  060A  2DEC               	goto	l688
 10628  060B  2DE3               	goto	l4887
 10629  060C                     l672:	
 10630                           
 10631                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
 10632  060C  0020               	movlb	0	; select bank0
 10633  060D  1B40               	btfsc	printf@flag,6
 10634  060E  2E26               	goto	l4905
 10635                           
 10636                           ;doprnt.c: 1253: {
 10637                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10638  060F  083B               	movf	printf@ap,w
 10639  0610  0086               	movwf	6
 10640  0611  0187               	clrf	7
 10641  0612  3F40               	moviw [0]fsr1
 10642  0613  00BC               	movwf	printf@val
 10643  0614  3F41               	moviw [1]fsr1
 10644  0615  00BD               	movwf	printf@val+1
 10645  0616  3002               	movlw	2
 10646  0617  00B4               	movwf	??_printf
 10647  0618  0834               	movf	??_printf,w
 10648  0619  07BB               	addwf	printf@ap,f
 10649                           
 10650                           ;doprnt.c: 1261: if((int)val < 0) {
 10651  061A  1FBD               	btfss	printf@val+1,7
 10652  061B  2E31               	goto	l4909
 10653                           
 10654                           ;doprnt.c: 1262: flag |= 0x03;
 10655  061C  3003               	movlw	3
 10656  061D  00B4               	movwf	??_printf
 10657  061E  0834               	movf	??_printf,w
 10658  061F  04C0               	iorwf	printf@flag,f
 10659                           
 10660                           ;doprnt.c: 1263: val = -val;
 10661  0620  09BC               	comf	printf@val,f
 10662  0621  09BD               	comf	printf@val+1,f
 10663  0622  0ABC               	incf	printf@val,f
 10664  0623  1903               	skipnz
 10665  0624  0ABD               	incf	printf@val+1,f
 10666                           
 10667                           ;doprnt.c: 1264: }
 10668                           ;doprnt.c: 1266: }
 10669  0625  2E31               	goto	l4909
 10670  0626                     l4905:	
 10671                           
 10672                           ;doprnt.c: 1268: else
 10673                           ;doprnt.c: 1273: {
 10674                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10675  0626  083B               	movf	printf@ap,w
 10676  0627  0086               	movwf	6
 10677  0628  0187               	clrf	7
 10678  0629  3F40               	moviw [0]fsr1
 10679  062A  00BC               	movwf	printf@val
 10680  062B  3F41               	moviw [1]fsr1
 10681  062C  00BD               	movwf	printf@val+1
 10682  062D  3002               	movlw	2
 10683  062E  00B4               	movwf	??_printf
 10684  062F  0834               	movf	??_printf,w
 10685  0630  07BB               	addwf	printf@ap,f
 10686  0631                     l4909:	
 10687                           
 10688                           ;doprnt.c: 1287: }
 10689                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10690  0631  01C3               	clrf	printf@c
 10691  0632  0AC3               	incf	printf@c,f
 10692  0633  3005               	movlw	5
 10693  0634  0643               	xorwf	printf@c,w
 10694  0635  1903               	btfsc	3,2
 10695  0636  2E56               	goto	l4921
 10696  0637                     l4915:	
 10697                           
 10698                           ;doprnt.c: 1306: if(val < dpowers[c])
 10699  0637  0843               	movf	printf@c,w
 10700  0638  00B4               	movwf	??_printf
 10701  0639  01B5               	clrf	??_printf+1
 10702  063A  35B4               	lslf	??_printf,f
 10703  063B  0DB5               	rlf	??_printf+1,f
 10704  063C  3000               	movlw	low (_dpowers| (0+32768))
 10705  063D  0734               	addwf	??_printf,w
 10706  063E  0084               	movwf	4
 10707  063F  3090               	movlw	high (_dpowers| (0+32768))
 10708  0640  3D35               	addwfc	??_printf+1,w
 10709  0641  0085               	movwf	5
 10710  0642  3F00               	moviw [0]fsr0
 10711  0643  00B6               	movwf	??_printf+2
 10712  0644  3F01               	moviw [1]fsr0
 10713  0645  00B7               	movwf	??_printf+3
 10714  0646  0837               	movf	??_printf+3,w
 10715  0647  023D               	subwf	printf@val+1,w
 10716  0648  1D03               	skipz
 10717  0649  2E4C               	goto	u5335
 10718  064A  0836               	movf	??_printf+2,w
 10719  064B  023C               	subwf	printf@val,w
 10720  064C                     u5335:	
 10721  064C  1C03               	btfss	3,0
 10722  064D  2E56               	goto	l4921
 10723                           
 10724                           ;doprnt.c: 1307: break;
 10725  064E  3001               	movlw	1
 10726  064F  00B4               	movwf	??_printf
 10727  0650  0834               	movf	??_printf,w
 10728  0651  07C3               	addwf	printf@c,f
 10729  0652  3005               	movlw	5
 10730  0653  0643               	xorwf	printf@c,w
 10731  0654  1D03               	btfss	3,2
 10732  0655  2E37               	goto	l4915
 10733  0656                     l4921:	
 10734                           
 10735                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10736  0656  0841               	movf	printf@width,w
 10737  0657  0442               	iorwf	printf@width+1,w
 10738  0658  1903               	btfsc	3,2
 10739  0659  2E62               	goto	l695
 10740  065A  0840               	movf	printf@flag,w
 10741  065B  3903               	andlw	3
 10742  065C  1903               	btfsc	3,2
 10743  065D  2E62               	goto	l695
 10744                           
 10745                           ;doprnt.c: 1346: width--;
 10746  065E  30FF               	movlw	255
 10747  065F  07C1               	addwf	printf@width,f
 10748  0660  30FF               	movlw	255
 10749  0661  3DC2               	addwfc	printf@width+1,f
 10750  0662                     l695:	
 10751                           
 10752                           ;doprnt.c: 1381: if(width > c)
 10753  0662  0843               	movf	printf@c,w
 10754  0663  00B4               	movwf	??_printf
 10755  0664  01B5               	clrf	??_printf+1
 10756  0665  1BB4               	btfsc	??_printf,7
 10757  0666  03B5               	decf	??_printf+1,f
 10758  0667  0835               	movf	??_printf+1,w
 10759  0668  3A80               	xorlw	128
 10760  0669  00B6               	movwf	??_printf+2
 10761  066A  0842               	movf	printf@width+1,w
 10762  066B  3A80               	xorlw	128
 10763  066C  0236               	subwf	??_printf+2,w
 10764  066D  1D03               	skipz
 10765  066E  2E71               	goto	u5375
 10766  066F  0841               	movf	printf@width,w
 10767  0670  0234               	subwf	??_printf,w
 10768  0671                     u5375:	
 10769  0671  1803               	skipnc
 10770  0672  2E7E               	goto	l4929
 10771                           
 10772                           ;doprnt.c: 1382: width -= c;
 10773  0673  0020               	movlb	0	; select bank0
 10774  0674  0843               	movf	printf@c,w
 10775  0675  00B4               	movwf	??_printf
 10776  0676  01B5               	clrf	??_printf+1
 10777  0677  1BB4               	btfsc	??_printf,7
 10778  0678  03B5               	decf	??_printf+1,f
 10779  0679  0834               	movf	??_printf,w
 10780  067A  02C1               	subwf	printf@width,f
 10781  067B  0835               	movf	??_printf+1,w
 10782  067C  3BC2               	subwfb	printf@width+1,f
 10783  067D  2E81               	goto	l4931
 10784  067E                     l4929:	
 10785                           
 10786                           ;doprnt.c: 1383: else
 10787                           ;doprnt.c: 1384: width = 0;
 10788  067E  0020               	movlb	0	; select bank0
 10789  067F  01C1               	clrf	printf@width
 10790  0680  01C2               	clrf	printf@width+1
 10791  0681                     l4931:	
 10792                           
 10793                           ;doprnt.c: 1387: if(flag & 0x04) {
 10794  0681  1D40               	btfss	printf@flag,2
 10795  0682  2E9A               	goto	l4943
 10796                           
 10797                           ;doprnt.c: 1392: if(flag & 0x03)
 10798  0683  0840               	movf	printf@flag,w
 10799  0684  3903               	andlw	3
 10800  0685  1903               	btfsc	3,2
 10801  0686  2E8B               	goto	l4937
 10802                           
 10803                           ;doprnt.c: 1393: (putch('-') );
 10804  0687  302D               	movlw	45
 10805  0688  3191  21F3  3185   	fcall	_putch
 10806  068B                     l4937:	
 10807                           
 10808                           ;doprnt.c: 1415: if(width)
 10809  068B  0020               	movlb	0	; select bank0
 10810  068C                     L14:	
 10811  068C  0841               	movf	printf@width,w
 10812  068D  0442               	iorwf	printf@width+1,w
 10813  068E  1903               	btfsc	3,2
 10814  068F  2EB3               	goto	l4953
 10815                           
 10816                           ;doprnt.c: 1417: (putch('0') );
 10817                           
 10818                           ;doprnt.c: 1416: do
 10819  0690  3030               	movlw	48
 10820  0691  3191  21F3  3185   	fcall	_putch
 10821                           
 10822                           ;doprnt.c: 1418: while(--width);
 10823  0694  30FF               	movlw	255
 10824  0695  0020               	movlb	0	; select bank0
 10825  0696  07C1               	addwf	printf@width,f
 10826  0697  30FF               	movlw	255
 10827  0698  3DC2               	addwfc	printf@width+1,f
 10828  0699  2E8C               	goto	L14
 10829  069A                     l4943:	
 10830                           ;doprnt.c: 1420: } else
 10831                           
 10832                           
 10833                           ;doprnt.c: 1422: {
 10834                           ;doprnt.c: 1424: if(width
 10835                           ;doprnt.c: 1428: )
 10836  069A  0841               	movf	printf@width,w
 10837  069B  0442               	iorwf	printf@width+1,w
 10838  069C  1903               	btfsc	3,2
 10839  069D  2EAB               	goto	l4949
 10840  069E                     l4945:	
 10841                           ;doprnt.c: 1429: do
 10842                           
 10843                           
 10844                           ;doprnt.c: 1430: (putch(' ') );
 10845  069E  3020               	movlw	32
 10846  069F  3191  21F3  3185   	fcall	_putch
 10847                           
 10848                           ;doprnt.c: 1431: while(--width);
 10849  06A2  30FF               	movlw	255
 10850  06A3  0020               	movlb	0	; select bank0
 10851  06A4  07C1               	addwf	printf@width,f
 10852  06A5  30FF               	movlw	255
 10853  06A6  3DC2               	addwfc	printf@width+1,f
 10854  06A7  0841               	movf	printf@width,w
 10855  06A8  0442               	iorwf	printf@width+1,w
 10856  06A9  1D03               	btfss	3,2
 10857  06AA  2E9E               	goto	l4945
 10858  06AB                     l4949:	
 10859                           
 10860                           ;doprnt.c: 1438: if(flag & 0x03)
 10861  06AB  0840               	movf	printf@flag,w
 10862  06AC  3903               	andlw	3
 10863  06AD  1903               	btfsc	3,2
 10864  06AE  2EB3               	goto	l4953
 10865                           
 10866                           ;doprnt.c: 1439: (putch('-') );
 10867  06AF  302D               	movlw	45
 10868  06B0  3191  21F3  3185   	fcall	_putch
 10869  06B3                     l4953:	
 10870                           
 10871                           ;doprnt.c: 1469: }
 10872                           ;doprnt.c: 1472: prec = c;
 10873  06B3  0020               	movlb	0	; select bank0
 10874  06B4  0843               	movf	printf@c,w
 10875  06B5  00B4               	movwf	??_printf
 10876  06B6  0834               	movf	??_printf,w
 10877  06B7  00B8               	movwf	printf@prec
 10878  06B8                     l4959:	
 10879                           ;doprnt.c: 1474: while(prec--) {
 10880                           
 10881  06B8  30FF               	movlw	255
 10882  06B9  0020               	movlb	0	; select bank0
 10883  06BA  00B4               	movwf	??_printf
 10884  06BB  0834               	movf	??_printf,w
 10885  06BC  07B8               	addwf	printf@prec,f
 10886  06BD  0A38               	incf	printf@prec,w
 10887  06BE  1903               	btfsc	3,2
 10888  06BF  2D1E               	goto	l4961
 10889                           
 10890                           ;doprnt.c: 1478: {
 10891                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10892  06C0  300A               	movlw	10
 10893  06C1  00A8               	movwf	___lwmod@divisor
 10894  06C2  3000               	movlw	0
 10895  06C3  00A9               	movwf	___lwmod@divisor+1
 10896  06C4  0838               	movf	printf@prec,w
 10897  06C5  00B4               	movwf	??_printf
 10898  06C6  01B5               	clrf	??_printf+1
 10899  06C7  35B4               	lslf	??_printf,f
 10900  06C8  0DB5               	rlf	??_printf+1,f
 10901  06C9  3000               	movlw	low (_dpowers| (0+32768))
 10902  06CA  0734               	addwf	??_printf,w
 10903  06CB  0084               	movwf	4
 10904  06CC  3090               	movlw	high (_dpowers| (0+32768))
 10905  06CD  3D35               	addwfc	??_printf+1,w
 10906  06CE  0085               	movwf	5
 10907  06CF  3F00               	moviw [0]fsr0
 10908  06D0  00A0               	movwf	___lwdiv@divisor
 10909  06D1  3F01               	moviw [1]fsr0
 10910  06D2  00A1               	movwf	___lwdiv@divisor+1
 10911  06D3  083D               	movf	printf@val+1,w
 10912  06D4  00A3               	movwf	___lwdiv@dividend+1
 10913  06D5  083C               	movf	printf@val,w
 10914  06D6  00A2               	movwf	___lwdiv@dividend
 10915  06D7  3195  2596  3185   	fcall	___lwdiv
 10916  06DA  0020               	movlb	0	; select bank0
 10917  06DB  0821               	movf	?___lwdiv+1,w
 10918  06DC  00AB               	movwf	___lwmod@dividend+1
 10919  06DD  0820               	movf	?___lwdiv,w
 10920  06DE  00AA               	movwf	___lwmod@dividend
 10921  06DF  3195  250D  3185   	fcall	___lwmod
 10922  06E2  0020               	movlb	0	; select bank0
 10923  06E3  0828               	movf	?___lwmod,w
 10924  06E4  3E30               	addlw	48
 10925  06E5  00B6               	movwf	??_printf+2
 10926  06E6  0836               	movf	??_printf+2,w
 10927  06E7  00C3               	movwf	printf@c
 10928                           
 10929                           ;doprnt.c: 1523: }
 10930                           ;doprnt.c: 1524: (putch(c) );
 10931  06E8  0843               	movf	printf@c,w
 10932  06E9  3191  21F3  3185   	fcall	_putch
 10933  06EC  2EB8               	goto	l4959
 10934  06ED                     l712:	
 10935                           ;doprnt.c: 1540: return 0;
 10936                           ;	Return value of _printf is never used
 10937                           
 10938                           ;doprnt.c: 1525: }
 10939                           ;doprnt.c: 1533: }
 10940                           ;doprnt.c: 1535: alldone:
 10941                           
 10942  06ED  0008               	return
 10943  06EE                     __end_of_printf:	
 10944                           
 10945                           	psect	text46
 10946  11F3                     __ptext46:	
 10947 ;; *************** function _putch *****************
 10948 ;; Defined at:
 10949 ;;		line 160 in file "mcc_generated_files/eusart.c"
 10950 ;; Parameters:    Size  Location     Type
 10951 ;;  txData          1    wreg     unsigned char 
 10952 ;; Auto vars:     Size  Location     Type
 10953 ;;  txData          1    2[BANK0 ] unsigned char 
 10954 ;; Return value:  Size  Location     Type
 10955 ;;                  1    wreg      void 
 10956 ;; Registers used:
 10957 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10958 ;; Tracked objects:
 10959 ;;		On entry : 0/0
 10960 ;;		On exit  : 0/0
 10961 ;;		Unchanged: 0/0
 10962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10966 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10967 ;;Total ram usage:        1 bytes
 10968 ;; Hardware stack levels used:    1
 10969 ;; Hardware stack levels required when called:    4
 10970 ;; This function calls:
 10971 ;;		_EUSART_Write
 10972 ;; This function is called by:
 10973 ;;		_printf
 10974 ;; This function uses a non-reentrant model
 10975 ;;
 10976                           
 10977                           
 10978                           ;psect for function _putch
 10979  11F3                     _putch:	
 10980                           
 10981                           ;incstack = 0
 10982                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10983                           ;putch@txData stored from wreg
 10984  11F3  0020               	movlb	0	; select bank0
 10985  11F4  00A2               	movwf	putch@txData
 10986                           
 10987                           ;eusart.c: 162: EUSART_Write(txData);
 10988  11F5  0822               	movf	putch@txData,w
 10989  11F6  3194  2417         	fcall	_EUSART_Write
 10990  11F8  0008               	return
 10991  11F9                     __end_of_putch:	
 10992                           
 10993                           	psect	text47
 10994  1417                     __ptext47:	
 10995 ;; *************** function _EUSART_Write *****************
 10996 ;; Defined at:
 10997 ;;		line 132 in file "mcc_generated_files/eusart.c"
 10998 ;; Parameters:    Size  Location     Type
 10999 ;;  txData          1    wreg     unsigned char 
 11000 ;; Auto vars:     Size  Location     Type
 11001 ;;  txData          1    1[BANK0 ] unsigned char 
 11002 ;; Return value:  Size  Location     Type
 11003 ;;                  1    wreg      void 
 11004 ;; Registers used:
 11005 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11006 ;; Tracked objects:
 11007 ;;		On entry : 0/0
 11008 ;;		On exit  : 0/0
 11009 ;;		Unchanged: 0/0
 11010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11012 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11015 ;;Total ram usage:        2 bytes
 11016 ;; Hardware stack levels used:    1
 11017 ;; Hardware stack levels required when called:    3
 11018 ;; This function calls:
 11019 ;;		Nothing
 11020 ;; This function is called by:
 11021 ;;		_putch
 11022 ;; This function uses a non-reentrant model
 11023 ;;
 11024                           
 11025                           
 11026                           ;psect for function _EUSART_Write
 11027  1417                     _EUSART_Write:	
 11028                           
 11029                           ;incstack = 0
 11030                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 11031                           ;EUSART_Write@txData stored from wreg
 11032  1417  0020               	movlb	0	; select bank0
 11033  1418  00A1               	movwf	EUSART_Write@txData
 11034  1419                     l4701:	
 11035                           ;eusart.c: 135: {
 11036                           
 11037                           ;eusart.c: 134: while(0 == eusartTxBufferRemaining)
 11038                           
 11039  1419  0874               	movf	_eusartTxBufferRemaining,w	;volatile
 11040  141A  1903               	btfsc	3,2
 11041  141B  2C19               	goto	l4701
 11042                           
 11043                           ;eusart.c: 136: }
 11044                           ;eusart.c: 138: if(0 == PIE1bits.TXIE)
 11045  141C  0021               	movlb	1	; select bank1
 11046  141D  1A11               	btfsc	17,4	;volatile
 11047  141E  2C24               	goto	l244
 11048                           
 11049                           ;eusart.c: 139: {
 11050                           ;eusart.c: 140: TXREG = txData;
 11051  141F  0020               	movlb	0	; select bank0
 11052  1420  0821               	movf	EUSART_Write@txData,w
 11053  1421  0023               	movlb	3	; select bank3
 11054  1422  009A               	movwf	26	;volatile
 11055                           
 11056                           ;eusart.c: 141: }
 11057  1423  2C39               	goto	l4715
 11058  1424                     l244:	
 11059                           
 11060                           ;eusart.c: 142: else
 11061                           ;eusart.c: 143: {
 11062                           ;eusart.c: 144: PIE1bits.TXIE = 0;
 11063  1424  1211               	bcf	17,4	;volatile
 11064                           
 11065                           ;eusart.c: 145: eusartTxBuffer[eusartTxHead++] = txData;
 11066  1425  0020               	movlb	0	; select bank0
 11067  1426  0821               	movf	EUSART_Write@txData,w
 11068  1427  00A0               	movwf	??_EUSART_Write
 11069  1428  0876               	movf	_eusartTxHead,w
 11070  1429  3EA0               	addlw	(low (_eusartTxBuffer| (0+512)))& (0+255)
 11071  142A  0086               	movwf	6
 11072  142B  3002               	movlw	2	; select bank5/6
 11073  142C  0087               	movwf	7
 11074  142D  0820               	movf	??_EUSART_Write,w
 11075  142E  0081               	movwf	1
 11076  142F  3001               	movlw	1
 11077  1430  00A0               	movwf	??_EUSART_Write
 11078  1431  0820               	movf	??_EUSART_Write,w
 11079  1432  07F6               	addwf	_eusartTxHead,f	;volatile
 11080                           
 11081                           ;eusart.c: 146: if(sizeof(eusartTxBuffer) <= eusartTxHead)
 11082  1433  3040               	movlw	64
 11083  1434  0276               	subwf	_eusartTxHead,w	;volatile
 11084  1435  1803               	btfsc	3,0
 11085                           
 11086                           ;eusart.c: 147: {
 11087                           ;eusart.c: 148: eusartTxHead = 0;
 11088  1436  01F6               	clrf	_eusartTxHead	;volatile
 11089                           
 11090                           ;eusart.c: 149: }
 11091                           ;eusart.c: 150: eusartTxBufferRemaining--;
 11092  1437  3001               	movlw	1
 11093  1438  02F4               	subwf	_eusartTxBufferRemaining,f	;volatile
 11094  1439                     l4715:	
 11095                           
 11096                           ;eusart.c: 151: }
 11097                           ;eusart.c: 152: PIE1bits.TXIE = 1;
 11098  1439  0021               	movlb	1	; select bank1
 11099  143A  1611               	bsf	17,4	;volatile
 11100  143B  0008               	return
 11101  143C                     __end_of_EUSART_Write:	
 11102                           
 11103                           	psect	text48
 11104  150D                     __ptext48:	
 11105 ;; *************** function ___lwmod *****************
 11106 ;; Defined at:
 11107 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 11108 ;; Parameters:    Size  Location     Type
 11109 ;;  divisor         2    8[BANK0 ] unsigned int 
 11110 ;;  dividend        2   10[BANK0 ] unsigned int 
 11111 ;; Auto vars:     Size  Location     Type
 11112 ;;  counter         1   13[BANK0 ] unsigned char 
 11113 ;; Return value:  Size  Location     Type
 11114 ;;                  2    8[BANK0 ] unsigned int 
 11115 ;; Registers used:
 11116 ;;		wreg, status,2, status,0
 11117 ;; Tracked objects:
 11118 ;;		On entry : 0/0
 11119 ;;		On exit  : 0/0
 11120 ;;		Unchanged: 0/0
 11121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11122 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11123 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11125 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11126 ;;Total ram usage:        6 bytes
 11127 ;; Hardware stack levels used:    1
 11128 ;; Hardware stack levels required when called:    3
 11129 ;; This function calls:
 11130 ;;		Nothing
 11131 ;; This function is called by:
 11132 ;;		_tick_handler
 11133 ;;		_inv_handler
 11134 ;;		_printf
 11135 ;; This function uses a non-reentrant model
 11136 ;;
 11137                           
 11138                           
 11139                           ;psect for function ___lwmod
 11140  150D                     ___lwmod:	
 11141                           
 11142                           ;incstack = 0
 11143                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 11144  150D  0020               	movlb	0	; select bank0
 11145  150E  0828               	movf	___lwmod@divisor,w
 11146  150F  0429               	iorwf	___lwmod@divisor+1,w
 11147  1510  1903               	btfsc	3,2
 11148  1511  2D35               	goto	l4815
 11149  1512  01AD               	clrf	___lwmod@counter
 11150  1513  0AAD               	incf	___lwmod@counter,f
 11151  1514                     l4805:	
 11152  1514  1BA9               	btfsc	___lwmod@divisor+1,7
 11153  1515  2D20               	goto	l4807
 11154  1516  3001               	movlw	1
 11155  1517                     u5155:	
 11156  1517  35A8               	lslf	___lwmod@divisor,f
 11157  1518  0DA9               	rlf	___lwmod@divisor+1,f
 11158  1519  0B89               	decfsz	9,f
 11159  151A  2D17               	goto	u5155
 11160  151B  3001               	movlw	1
 11161  151C  00AC               	movwf	??___lwmod
 11162  151D  082C               	movf	??___lwmod,w
 11163  151E  07AD               	addwf	___lwmod@counter,f
 11164  151F  2D14               	goto	l4805
 11165  1520                     l4807:	
 11166  1520  0829               	movf	___lwmod@divisor+1,w
 11167  1521  022B               	subwf	___lwmod@dividend+1,w
 11168  1522  1D03               	skipz
 11169  1523  2D26               	goto	u5175
 11170  1524  0828               	movf	___lwmod@divisor,w
 11171  1525  022A               	subwf	___lwmod@dividend,w
 11172  1526                     u5175:	
 11173  1526  1C03               	skipc
 11174  1527  2D2C               	goto	l4811
 11175  1528  0828               	movf	___lwmod@divisor,w
 11176  1529  02AA               	subwf	___lwmod@dividend,f
 11177  152A  0829               	movf	___lwmod@divisor+1,w
 11178  152B  3BAB               	subwfb	___lwmod@dividend+1,f
 11179  152C                     l4811:	
 11180  152C  3001               	movlw	1
 11181  152D                     u5185:	
 11182  152D  36A9               	lsrf	___lwmod@divisor+1,f
 11183  152E  0CA8               	rrf	___lwmod@divisor,f
 11184  152F  0B89               	decfsz	9,f
 11185  1530  2D2D               	goto	u5185
 11186  1531  3001               	movlw	1
 11187  1532  02AD               	subwf	___lwmod@counter,f
 11188  1533  1D03               	btfss	3,2
 11189  1534  2D20               	goto	l4807
 11190  1535                     l4815:	
 11191  1535  082B               	movf	___lwmod@dividend+1,w
 11192  1536  00A9               	movwf	?___lwmod+1
 11193  1537  082A               	movf	___lwmod@dividend,w
 11194  1538  00A8               	movwf	?___lwmod
 11195  1539  0008               	return
 11196  153A                     __end_of___lwmod:	
 11197                           
 11198                           	psect	text49
 11199  1596                     __ptext49:	
 11200 ;; *************** function ___lwdiv *****************
 11201 ;; Defined at:
 11202 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 11203 ;; Parameters:    Size  Location     Type
 11204 ;;  divisor         2    0[BANK0 ] unsigned int 
 11205 ;;  dividend        2    2[BANK0 ] unsigned int 
 11206 ;; Auto vars:     Size  Location     Type
 11207 ;;  quotient        2    6[BANK0 ] unsigned int 
 11208 ;;  counter         1    5[BANK0 ] unsigned char 
 11209 ;; Return value:  Size  Location     Type
 11210 ;;                  2    0[BANK0 ] unsigned int 
 11211 ;; Registers used:
 11212 ;;		wreg, status,2, status,0
 11213 ;; Tracked objects:
 11214 ;;		On entry : 0/0
 11215 ;;		On exit  : 0/0
 11216 ;;		Unchanged: 0/0
 11217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11218 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11221 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11222 ;;Total ram usage:        8 bytes
 11223 ;; Hardware stack levels used:    1
 11224 ;; Hardware stack levels required when called:    3
 11225 ;; This function calls:
 11226 ;;		Nothing
 11227 ;; This function is called by:
 11228 ;;		_printf
 11229 ;; This function uses a non-reentrant model
 11230 ;;
 11231                           
 11232                           
 11233                           ;psect for function ___lwdiv
 11234  1596                     ___lwdiv:	
 11235                           
 11236                           ;incstack = 0
 11237                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11238  1596  0020               	movlb	0	; select bank0
 11239  1597  01A6               	clrf	___lwdiv@quotient
 11240  1598  01A7               	clrf	___lwdiv@quotient+1
 11241  1599  0820               	movf	___lwdiv@divisor,w
 11242  159A  0421               	iorwf	___lwdiv@divisor+1,w
 11243  159B  1903               	btfsc	3,2
 11244  159C  2DC6               	goto	l4793
 11245  159D  01A5               	clrf	___lwdiv@counter
 11246  159E  0AA5               	incf	___lwdiv@counter,f
 11247  159F                     l4781:	
 11248  159F  1BA1               	btfsc	___lwdiv@divisor+1,7
 11249  15A0  2DAB               	goto	l4783
 11250  15A1  3001               	movlw	1
 11251  15A2                     u5085:	
 11252  15A2  35A0               	lslf	___lwdiv@divisor,f
 11253  15A3  0DA1               	rlf	___lwdiv@divisor+1,f
 11254  15A4  0B89               	decfsz	9,f
 11255  15A5  2DA2               	goto	u5085
 11256  15A6  3001               	movlw	1
 11257  15A7  00A4               	movwf	??___lwdiv
 11258  15A8  0824               	movf	??___lwdiv,w
 11259  15A9  07A5               	addwf	___lwdiv@counter,f
 11260  15AA  2D9F               	goto	l4781
 11261  15AB                     l4783:	
 11262  15AB  3001               	movlw	1
 11263  15AC                     u5105:	
 11264  15AC  35A6               	lslf	___lwdiv@quotient,f
 11265  15AD  0DA7               	rlf	___lwdiv@quotient+1,f
 11266  15AE  0B89               	decfsz	9,f
 11267  15AF  2DAC               	goto	u5105
 11268  15B0  0821               	movf	___lwdiv@divisor+1,w
 11269  15B1  0223               	subwf	___lwdiv@dividend+1,w
 11270  15B2  1D03               	skipz
 11271  15B3  2DB6               	goto	u5115
 11272  15B4  0820               	movf	___lwdiv@divisor,w
 11273  15B5  0222               	subwf	___lwdiv@dividend,w
 11274  15B6                     u5115:	
 11275  15B6  1C03               	skipc
 11276  15B7  2DBD               	goto	l4789
 11277  15B8  0820               	movf	___lwdiv@divisor,w
 11278  15B9  02A2               	subwf	___lwdiv@dividend,f
 11279  15BA  0821               	movf	___lwdiv@divisor+1,w
 11280  15BB  3BA3               	subwfb	___lwdiv@dividend+1,f
 11281  15BC  1426               	bsf	___lwdiv@quotient,0
 11282  15BD                     l4789:	
 11283  15BD  3001               	movlw	1
 11284  15BE                     u5125:	
 11285  15BE  36A1               	lsrf	___lwdiv@divisor+1,f
 11286  15BF  0CA0               	rrf	___lwdiv@divisor,f
 11287  15C0  0B89               	decfsz	9,f
 11288  15C1  2DBE               	goto	u5125
 11289  15C2  3001               	movlw	1
 11290  15C3  02A5               	subwf	___lwdiv@counter,f
 11291  15C4  1D03               	btfss	3,2
 11292  15C5  2DAB               	goto	l4783
 11293  15C6                     l4793:	
 11294  15C6  0827               	movf	___lwdiv@quotient+1,w
 11295  15C7  00A1               	movwf	?___lwdiv+1
 11296  15C8  0826               	movf	___lwdiv@quotient,w
 11297  15C9  00A0               	movwf	?___lwdiv
 11298  15CA  0008               	return
 11299  15CB                     __end_of___lwdiv:	
 11300                           
 11301                           	psect	text50
 11302  1287                     __ptext50:	
 11303 ;; *************** function _concat *****************
 11304 ;; Defined at:
 11305 ;;		line 197 in file "protocol.c"
 11306 ;; Parameters:    Size  Location     Type
 11307 ;;  msb             1    wreg     unsigned char 
 11308 ;;  lsb             1    0[BANK0 ] unsigned char 
 11309 ;; Auto vars:     Size  Location     Type
 11310 ;;  msb             1    7[BANK0 ] unsigned char 
 11311 ;; Return value:  Size  Location     Type
 11312 ;;                  2    0[BANK0 ] unsigned int 
 11313 ;; Registers used:
 11314 ;;		wreg, status,2, status,0
 11315 ;; Tracked objects:
 11316 ;;		On entry : 0/0
 11317 ;;		On exit  : 0/0
 11318 ;;		Unchanged: 0/0
 11319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11320 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11321 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11322 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11324 ;;Total ram usage:        8 bytes
 11325 ;; Hardware stack levels used:    1
 11326 ;; Hardware stack levels required when called:    3
 11327 ;; This function calls:
 11328 ;;		Nothing
 11329 ;; This function is called by:
 11330 ;;		_PROTOCOL_Print_TLV
 11331 ;; This function uses a non-reentrant model
 11332 ;;
 11333                           
 11334                           
 11335                           ;psect for function _concat
 11336  1287                     _concat:	
 11337                           
 11338                           ;incstack = 0
 11339                           ; Regs used in _concat: [wreg+status,2+status,0]
 11340                           ;concat@msb stored from wreg
 11341  1287  0020               	movlb	0	; select bank0
 11342  1288  00A7               	movwf	concat@msb
 11343                           
 11344                           ;protocol.c: 198: return (uint16_t)msb * 256 + (uint16_t)lsb;
 11345  1289  0820               	movf	concat@lsb,w
 11346  128A  00A2               	movwf	??_concat
 11347  128B  01A3               	clrf	??_concat+1
 11348  128C  0827               	movf	concat@msb,w
 11349  128D  00A4               	movwf	??_concat+2
 11350  128E  01A5               	clrf	??_concat+3
 11351  128F  0824               	movf	??_concat+2,w
 11352  1290  00A5               	movwf	??_concat+3
 11353  1291  01A4               	clrf	??_concat+2
 11354  1292  0822               	movf	??_concat,w
 11355  1293  0724               	addwf	??_concat+2,w
 11356  1294  00A0               	movwf	?_concat
 11357  1295  0823               	movf	??_concat+1,w
 11358  1296  3D25               	addwfc	??_concat+3,w
 11359  1297  00A1               	movwf	?_concat+1
 11360  1298  0008               	return
 11361  1299                     __end_of_concat:	
 11362                           
 11363                           	psect	text51
 11364  1257                     __ptext51:	
 11365 ;; *************** function _abs *****************
 11366 ;; Defined at:
 11367 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\abs.c"
 11368 ;; Parameters:    Size  Location     Type
 11369 ;;  a               2    7[BANK0 ] int 
 11370 ;; Auto vars:     Size  Location     Type
 11371 ;;		None
 11372 ;; Return value:  Size  Location     Type
 11373 ;;                  2    7[BANK0 ] int 
 11374 ;; Registers used:
 11375 ;;		wreg, status,2, status,0
 11376 ;; Tracked objects:
 11377 ;;		On entry : 0/0
 11378 ;;		On exit  : 0/0
 11379 ;;		Unchanged: 0/0
 11380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11381 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11383 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11384 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11385 ;;Total ram usage:        4 bytes
 11386 ;; Hardware stack levels used:    1
 11387 ;; Hardware stack levels required when called:    3
 11388 ;; This function calls:
 11389 ;;		Nothing
 11390 ;; This function is called by:
 11391 ;;		_PROTOCOL_Print_TLV
 11392 ;; This function uses a non-reentrant model
 11393 ;;
 11394                           
 11395                           
 11396                           ;psect for function _abs
 11397  1257                     _abs:	
 11398                           
 11399                           ;incstack = 0
 11400                           ; Regs used in _abs: [wreg+status,2+status,0]
 11401  1257  0020               	movlb	0	; select bank0
 11402  1258  1FA8               	btfss	abs@a+1,7
 11403  1259  0008               	return
 11404  125A  0927               	comf	abs@a,w
 11405  125B  00A9               	movwf	??_abs
 11406  125C  0928               	comf	abs@a+1,w
 11407  125D  00AA               	movwf	??_abs+1
 11408  125E  0AA9               	incf	??_abs,f
 11409  125F  1903               	skipnz
 11410  1260  0AAA               	incf	??_abs+1,f
 11411  1261  0829               	movf	??_abs,w
 11412  1262  00A7               	movwf	?_abs
 11413  1263  082A               	movf	??_abs+1,w
 11414  1264  00A8               	movwf	?_abs+1
 11415  1265  0008               	return
 11416  1266                     __end_of_abs:	
 11417                           
 11418                           	psect	text52
 11419  1644                     __ptext52:	
 11420 ;; *************** function ___awmod *****************
 11421 ;; Defined at:
 11422 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
 11423 ;; Parameters:    Size  Location     Type
 11424 ;;  divisor         2    0[BANK0 ] int 
 11425 ;;  dividend        2    2[BANK0 ] int 
 11426 ;; Auto vars:     Size  Location     Type
 11427 ;;  sign            1    6[BANK0 ] unsigned char 
 11428 ;;  counter         1    5[BANK0 ] unsigned char 
 11429 ;; Return value:  Size  Location     Type
 11430 ;;                  2    0[BANK0 ] int 
 11431 ;; Registers used:
 11432 ;;		wreg, status,2, status,0
 11433 ;; Tracked objects:
 11434 ;;		On entry : 0/0
 11435 ;;		On exit  : 0/0
 11436 ;;		Unchanged: 0/0
 11437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11438 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11439 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11440 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11441 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11442 ;;Total ram usage:        7 bytes
 11443 ;; Hardware stack levels used:    1
 11444 ;; Hardware stack levels required when called:    3
 11445 ;; This function calls:
 11446 ;;		Nothing
 11447 ;; This function is called by:
 11448 ;;		_PROTOCOL_Print_TLV
 11449 ;; This function uses a non-reentrant model
 11450 ;;
 11451                           
 11452                           
 11453                           ;psect for function ___awmod
 11454  1644                     ___awmod:	
 11455                           
 11456                           ;incstack = 0
 11457                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 11458  1644  0020               	movlb	0	; select bank0
 11459  1645  01A6               	clrf	___awmod@sign
 11460  1646  1FA3               	btfss	___awmod@dividend+1,7
 11461  1647  2E4F               	goto	l5025
 11462  1648  09A2               	comf	___awmod@dividend,f
 11463  1649  09A3               	comf	___awmod@dividend+1,f
 11464  164A  0AA2               	incf	___awmod@dividend,f
 11465  164B  1903               	skipnz
 11466  164C  0AA3               	incf	___awmod@dividend+1,f
 11467  164D  01A6               	clrf	___awmod@sign
 11468  164E  0AA6               	incf	___awmod@sign,f
 11469  164F                     l5025:	
 11470  164F  1FA1               	btfss	___awmod@divisor+1,7
 11471  1650  2E56               	goto	l5029
 11472  1651  09A0               	comf	___awmod@divisor,f
 11473  1652  09A1               	comf	___awmod@divisor+1,f
 11474  1653  0AA0               	incf	___awmod@divisor,f
 11475  1654  1903               	skipnz
 11476  1655  0AA1               	incf	___awmod@divisor+1,f
 11477  1656                     l5029:	
 11478  1656  0820               	movf	___awmod@divisor,w
 11479  1657  0421               	iorwf	___awmod@divisor+1,w
 11480  1658  1903               	btfsc	3,2
 11481  1659  2E7D               	goto	l5047
 11482  165A  01A5               	clrf	___awmod@counter
 11483  165B  0AA5               	incf	___awmod@counter,f
 11484  165C                     l5037:	
 11485  165C  1BA1               	btfsc	___awmod@divisor+1,7
 11486  165D  2E68               	goto	l5039
 11487  165E  3001               	movlw	1
 11488  165F                     u5615:	
 11489  165F  35A0               	lslf	___awmod@divisor,f
 11490  1660  0DA1               	rlf	___awmod@divisor+1,f
 11491  1661  0B89               	decfsz	9,f
 11492  1662  2E5F               	goto	u5615
 11493  1663  3001               	movlw	1
 11494  1664  00A4               	movwf	??___awmod
 11495  1665  0824               	movf	??___awmod,w
 11496  1666  07A5               	addwf	___awmod@counter,f
 11497  1667  2E5C               	goto	l5037
 11498  1668                     l5039:	
 11499  1668  0821               	movf	___awmod@divisor+1,w
 11500  1669  0223               	subwf	___awmod@dividend+1,w
 11501  166A  1D03               	skipz
 11502  166B  2E6E               	goto	u5635
 11503  166C  0820               	movf	___awmod@divisor,w
 11504  166D  0222               	subwf	___awmod@dividend,w
 11505  166E                     u5635:	
 11506  166E  1C03               	skipc
 11507  166F  2E74               	goto	l5043
 11508  1670  0820               	movf	___awmod@divisor,w
 11509  1671  02A2               	subwf	___awmod@dividend,f
 11510  1672  0821               	movf	___awmod@divisor+1,w
 11511  1673  3BA3               	subwfb	___awmod@dividend+1,f
 11512  1674                     l5043:	
 11513  1674  3001               	movlw	1
 11514  1675                     u5645:	
 11515  1675  36A1               	lsrf	___awmod@divisor+1,f
 11516  1676  0CA0               	rrf	___awmod@divisor,f
 11517  1677  0B89               	decfsz	9,f
 11518  1678  2E75               	goto	u5645
 11519  1679  3001               	movlw	1
 11520  167A  02A5               	subwf	___awmod@counter,f
 11521  167B  1D03               	btfss	3,2
 11522  167C  2E68               	goto	l5039
 11523  167D                     l5047:	
 11524  167D  0826               	movf	___awmod@sign,w
 11525  167E  1903               	btfsc	3,2
 11526  167F  2E85               	goto	l5051
 11527  1680  09A2               	comf	___awmod@dividend,f
 11528  1681  09A3               	comf	___awmod@dividend+1,f
 11529  1682  0AA2               	incf	___awmod@dividend,f
 11530  1683  1903               	skipnz
 11531  1684  0AA3               	incf	___awmod@dividend+1,f
 11532  1685                     l5051:	
 11533  1685  0823               	movf	___awmod@dividend+1,w
 11534  1686  00A1               	movwf	?___awmod+1
 11535  1687  0822               	movf	___awmod@dividend,w
 11536  1688  00A0               	movwf	?___awmod
 11537  1689  0008               	return
 11538  168A                     __end_of___awmod:	
 11539                           
 11540                           	psect	text53
 11541  1567                     __ptext53:	
 11542 ;; *************** function _detected *****************
 11543 ;; Defined at:
 11544 ;;		line 205 in file "main.c"
 11545 ;; Parameters:    Size  Location     Type
 11546 ;;  dev_addr        1    wreg     unsigned char 
 11547 ;; Auto vars:     Size  Location     Type
 11548 ;;  dev_addr        1   15[BANK0 ] unsigned char 
 11549 ;;  exist           1   14[BANK0 ] unsigned char 
 11550 ;;  x               1   13[BANK0 ] unsigned char 
 11551 ;;  y               1   12[BANK0 ] unsigned char 
 11552 ;; Return value:  Size  Location     Type
 11553 ;;                  1    wreg      unsigned char 
 11554 ;; Registers used:
 11555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11556 ;; Tracked objects:
 11557 ;;		On entry : 0/0
 11558 ;;		On exit  : 0/0
 11559 ;;		Unchanged: 0/0
 11560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11562 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11563 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11564 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11565 ;;Total ram usage:        7 bytes
 11566 ;; Hardware stack levels used:    1
 11567 ;; Hardware stack levels required when called:    4
 11568 ;; This function calls:
 11569 ;;		___awdiv
 11570 ;; This function is called by:
 11571 ;;		_one_shot_sen
 11572 ;;		_fetch
 11573 ;; This function uses a non-reentrant model
 11574 ;;
 11575                           
 11576                           
 11577                           ;psect for function _detected
 11578  1567                     _detected:	
 11579                           
 11580                           ;incstack = 0
 11581                           ; Regs used in _detected: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11582                           ;detected@dev_addr stored from wreg
 11583  1567  0020               	movlb	0	; select bank0
 11584  1568  00AF               	movwf	detected@dev_addr
 11585                           
 11586                           ;main.c: 206: uint8_t y = dev_addr / 8;
 11587  1569  3008               	movlw	8
 11588  156A  00A0               	movwf	___awdiv@divisor
 11589  156B  3000               	movlw	0
 11590  156C  00A1               	movwf	___awdiv@divisor+1
 11591  156D  082F               	movf	detected@dev_addr,w
 11592  156E  00A9               	movwf	??_detected
 11593  156F  01AA               	clrf	??_detected+1
 11594  1570  0829               	movf	??_detected,w
 11595  1571  00A2               	movwf	___awdiv@dividend
 11596  1572  082A               	movf	??_detected+1,w
 11597  1573  00A3               	movwf	___awdiv@dividend+1
 11598  1574  3188  20E5  3195   	fcall	___awdiv
 11599  1577  0020               	movlb	0	; select bank0
 11600  1578  0820               	movf	?___awdiv,w
 11601  1579  00AB               	movwf	??_detected+2
 11602  157A  082B               	movf	??_detected+2,w
 11603  157B  00AC               	movwf	detected@y
 11604                           
 11605                           ;main.c: 207: uint8_t x = dev_addr % 8;
 11606  157C  082F               	movf	detected@dev_addr,w
 11607  157D  3907               	andlw	7
 11608  157E  00A9               	movwf	??_detected
 11609  157F  0829               	movf	??_detected,w
 11610  1580  00AD               	movwf	detected@x
 11611                           
 11612                           ;main.c: 208: bool exist = 0;
 11613  1581  01AE               	clrf	detected@exist
 11614                           
 11615                           ;main.c: 209: if ((dev_map[y] & (0x01 << x)) > 0) {
 11616  1582  082C               	movf	detected@y,w
 11617  1583  3E20               	addlw	(low (_dev_map| (0+256)))& (0+255)
 11618  1584  0086               	movwf	6
 11619  1585  3001               	movlw	1	; select bank2/3
 11620  1586  0087               	movwf	7
 11621  1587  3001               	movlw	1
 11622  1588  00A9               	movwf	??_detected
 11623  1589  0A2D               	incf	detected@x,w
 11624  158A  2D8C               	goto	u5974
 11625  158B                     u5975:	
 11626  158B  35A9               	lslf	??_detected,f
 11627  158C                     u5974:	
 11628  158C  0B89               	decfsz	9,f
 11629  158D  2D8B               	goto	u5975
 11630  158E  0829               	movf	??_detected,w
 11631  158F  0501               	andwf	1,w
 11632  1590  1903               	btfsc	3,2
 11633  1591  2D94               	goto	l5267
 11634                           
 11635                           ;main.c: 210: exist = 1;
 11636  1592  01AE               	clrf	detected@exist
 11637  1593  0AAE               	incf	detected@exist,f
 11638  1594                     l5267:	
 11639                           
 11640                           ;main.c: 211: }
 11641                           ;main.c: 212: return exist;
 11642  1594  082E               	movf	detected@exist,w
 11643  1595  0008               	return
 11644  1596                     __end_of_detected:	
 11645                           
 11646                           	psect	text54
 11647  08E5                     __ptext54:	
 11648 ;; *************** function ___awdiv *****************
 11649 ;; Defined at:
 11650 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 11651 ;; Parameters:    Size  Location     Type
 11652 ;;  divisor         2    0[BANK0 ] int 
 11653 ;;  dividend        2    2[BANK0 ] int 
 11654 ;; Auto vars:     Size  Location     Type
 11655 ;;  quotient        2    7[BANK0 ] int 
 11656 ;;  sign            1    6[BANK0 ] unsigned char 
 11657 ;;  counter         1    5[BANK0 ] unsigned char 
 11658 ;; Return value:  Size  Location     Type
 11659 ;;                  2    0[BANK0 ] int 
 11660 ;; Registers used:
 11661 ;;		wreg, status,2, status,0
 11662 ;; Tracked objects:
 11663 ;;		On entry : 0/0
 11664 ;;		On exit  : 0/0
 11665 ;;		Unchanged: 0/0
 11666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11667 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11671 ;;Total ram usage:        9 bytes
 11672 ;; Hardware stack levels used:    1
 11673 ;; Hardware stack levels required when called:    3
 11674 ;; This function calls:
 11675 ;;		Nothing
 11676 ;; This function is called by:
 11677 ;;		_init
 11678 ;;		_add_dev
 11679 ;;		_del_dev
 11680 ;;		_detected
 11681 ;;		_command_handler
 11682 ;;		_PROTOCOL_Print_TLV
 11683 ;; This function uses a non-reentrant model
 11684 ;;
 11685                           
 11686                           
 11687                           ;psect for function ___awdiv
 11688  08E5                     ___awdiv:	
 11689                           
 11690                           ;incstack = 0
 11691                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11692  08E5  0020               	movlb	0	; select bank0
 11693  08E6  01A6               	clrf	___awdiv@sign
 11694  08E7  1FA1               	btfss	___awdiv@divisor+1,7
 11695  08E8  28F0               	goto	l4981
 11696  08E9  09A0               	comf	___awdiv@divisor,f
 11697  08EA  09A1               	comf	___awdiv@divisor+1,f
 11698  08EB  0AA0               	incf	___awdiv@divisor,f
 11699  08EC  1903               	skipnz
 11700  08ED  0AA1               	incf	___awdiv@divisor+1,f
 11701  08EE  01A6               	clrf	___awdiv@sign
 11702  08EF  0AA6               	incf	___awdiv@sign,f
 11703  08F0                     l4981:	
 11704  08F0  1FA3               	btfss	___awdiv@dividend+1,7
 11705  08F1  28FB               	goto	l4987
 11706  08F2  09A2               	comf	___awdiv@dividend,f
 11707  08F3  09A3               	comf	___awdiv@dividend+1,f
 11708  08F4  0AA2               	incf	___awdiv@dividend,f
 11709  08F5  1903               	skipnz
 11710  08F6  0AA3               	incf	___awdiv@dividend+1,f
 11711  08F7  3001               	movlw	1
 11712  08F8  00A4               	movwf	??___awdiv
 11713  08F9  0824               	movf	??___awdiv,w
 11714  08FA  06A6               	xorwf	___awdiv@sign,f
 11715  08FB                     l4987:	
 11716  08FB  01A7               	clrf	___awdiv@quotient
 11717  08FC  01A8               	clrf	___awdiv@quotient+1
 11718  08FD  0820               	movf	___awdiv@divisor,w
 11719  08FE  0421               	iorwf	___awdiv@divisor+1,w
 11720  08FF  1903               	btfsc	3,2
 11721  0900  292A               	goto	l5009
 11722  0901  01A5               	clrf	___awdiv@counter
 11723  0902  0AA5               	incf	___awdiv@counter,f
 11724  0903                     l4997:	
 11725  0903  1BA1               	btfsc	___awdiv@divisor+1,7
 11726  0904  290F               	goto	l4999
 11727  0905  3001               	movlw	1
 11728  0906                     u5515:	
 11729  0906  35A0               	lslf	___awdiv@divisor,f
 11730  0907  0DA1               	rlf	___awdiv@divisor+1,f
 11731  0908  0B89               	decfsz	9,f
 11732  0909  2906               	goto	u5515
 11733  090A  3001               	movlw	1
 11734  090B  00A4               	movwf	??___awdiv
 11735  090C  0824               	movf	??___awdiv,w
 11736  090D  07A5               	addwf	___awdiv@counter,f
 11737  090E  2903               	goto	l4997
 11738  090F                     l4999:	
 11739  090F  3001               	movlw	1
 11740  0910                     u5535:	
 11741  0910  35A7               	lslf	___awdiv@quotient,f
 11742  0911  0DA8               	rlf	___awdiv@quotient+1,f
 11743  0912  0B89               	decfsz	9,f
 11744  0913  2910               	goto	u5535
 11745  0914  0821               	movf	___awdiv@divisor+1,w
 11746  0915  0223               	subwf	___awdiv@dividend+1,w
 11747  0916  1D03               	skipz
 11748  0917  291A               	goto	u5545
 11749  0918  0820               	movf	___awdiv@divisor,w
 11750  0919  0222               	subwf	___awdiv@dividend,w
 11751  091A                     u5545:	
 11752  091A  1C03               	skipc
 11753  091B  2921               	goto	l5005
 11754  091C  0820               	movf	___awdiv@divisor,w
 11755  091D  02A2               	subwf	___awdiv@dividend,f
 11756  091E  0821               	movf	___awdiv@divisor+1,w
 11757  091F  3BA3               	subwfb	___awdiv@dividend+1,f
 11758  0920  1427               	bsf	___awdiv@quotient,0
 11759  0921                     l5005:	
 11760  0921  3001               	movlw	1
 11761  0922                     u5555:	
 11762  0922  36A1               	lsrf	___awdiv@divisor+1,f
 11763  0923  0CA0               	rrf	___awdiv@divisor,f
 11764  0924  0B89               	decfsz	9,f
 11765  0925  2922               	goto	u5555
 11766  0926  3001               	movlw	1
 11767  0927  02A5               	subwf	___awdiv@counter,f
 11768  0928  1D03               	btfss	3,2
 11769  0929  290F               	goto	l4999
 11770  092A                     l5009:	
 11771  092A  0826               	movf	___awdiv@sign,w
 11772  092B  1903               	btfsc	3,2
 11773  092C  2932               	goto	l5013
 11774  092D  09A7               	comf	___awdiv@quotient,f
 11775  092E  09A8               	comf	___awdiv@quotient+1,f
 11776  092F  0AA7               	incf	___awdiv@quotient,f
 11777  0930  1903               	skipnz
 11778  0931  0AA8               	incf	___awdiv@quotient+1,f
 11779  0932                     l5013:	
 11780  0932  0828               	movf	___awdiv@quotient+1,w
 11781  0933  00A1               	movwf	?___awdiv+1
 11782  0934  0827               	movf	___awdiv@quotient,w
 11783  0935  00A0               	movwf	?___awdiv
 11784  0936  0008               	return
 11785  0937                     __end_of___awdiv:	
 11786                           
 11787                           	psect	text55
 11788  09E3                     __ptext55:	
 11789 ;; *************** function _atoi *****************
 11790 ;; Defined at:
 11791 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\atoi.c"
 11792 ;; Parameters:    Size  Location     Type
 11793 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 11794 ;;		 -> buf(48), cmd_buf(192), 
 11795 ;; Auto vars:     Size  Location     Type
 11796 ;;  a               2   11[BANK0 ] int 
 11797 ;;  sign            1   10[BANK0 ] unsigned char 
 11798 ;; Return value:  Size  Location     Type
 11799 ;;                  2    6[BANK0 ] int 
 11800 ;; Registers used:
 11801 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11802 ;; Tracked objects:
 11803 ;;		On entry : 0/0
 11804 ;;		On exit  : 0/0
 11805 ;;		Unchanged: 0/0
 11806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11807 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11809 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11810 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11811 ;;Total ram usage:        7 bytes
 11812 ;; Hardware stack levels used:    1
 11813 ;; Hardware stack levels required when called:    4
 11814 ;; This function calls:
 11815 ;;		___wmul
 11816 ;;		_isdigit
 11817 ;; This function is called by:
 11818 ;;		_exec_remote_cmd
 11819 ;;		_command_handler
 11820 ;;		_PROTOCOL_Loop
 11821 ;; This function uses a non-reentrant model
 11822 ;;
 11823                           
 11824                           
 11825                           ;psect for function _atoi
 11826  09E3                     _atoi:	
 11827  09E3                     l5357:	
 11828                           ;incstack = 0
 11829                           ; Regs used in _atoi: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11830                           
 11831  09E3  0020               	movlb	0	; select bank0
 11832  09E4  0826               	movf	atoi@s,w
 11833  09E5  0086               	movwf	6
 11834  09E6  0827               	movf	atoi@s+1,w
 11835  09E7  0087               	movwf	7
 11836  09E8  3020               	movlw	32
 11837  09E9  0601               	xorwf	1,w
 11838  09EA  1D03               	btfss	3,2
 11839  09EB  29F2               	goto	l5359
 11840  09EC                     l5355:	
 11841  09EC  3001               	movlw	1
 11842  09ED  0020               	movlb	0	; select bank0
 11843  09EE  07A6               	addwf	atoi@s,f
 11844  09EF  3000               	movlw	0
 11845  09F0  3DA7               	addwfc	atoi@s+1,f
 11846  09F1  29E3               	goto	l5357
 11847  09F2                     l5359:	
 11848  09F2  0826               	movf	atoi@s,w
 11849  09F3  0086               	movwf	6
 11850  09F4  0827               	movf	atoi@s+1,w
 11851  09F5  0087               	movwf	7
 11852  09F6  3009               	movlw	9
 11853  09F7  0601               	xorwf	1,w
 11854  09F8  1903               	btfsc	3,2
 11855  09F9  29EC               	goto	l5355
 11856  09FA  01AB               	clrf	atoi@a
 11857  09FB  01AC               	clrf	atoi@a+1
 11858  09FC  01AA               	clrf	atoi@sign
 11859  09FD  0826               	movf	atoi@s,w
 11860  09FE  0086               	movwf	6
 11861  09FF  0827               	movf	atoi@s+1,w
 11862  0A00  0087               	movwf	7
 11863  0A01  302D               	movlw	45
 11864  0A02  0601               	xorwf	1,w
 11865  0A03  1D03               	btfss	3,2
 11866  0A04  2A0A               	goto	l5369
 11867  0A05  3001               	movlw	1
 11868  0A06  00A8               	movwf	??_atoi
 11869  0A07  0828               	movf	??_atoi,w
 11870  0A08  07AA               	addwf	atoi@sign,f
 11871  0A09  2A12               	goto	l5375
 11872  0A0A                     l5369:	
 11873  0A0A  0826               	movf	atoi@s,w
 11874  0A0B  0086               	movwf	6
 11875  0A0C  0827               	movf	atoi@s+1,w
 11876  0A0D  0087               	movwf	7
 11877  0A0E  302B               	movlw	43
 11878  0A0F  0601               	xorwf	1,w
 11879  0A10  1D03               	btfss	3,2
 11880  0A11  2A16               	goto	l5377
 11881  0A12                     l5375:	
 11882  0A12  3001               	movlw	1
 11883  0A13  07A6               	addwf	atoi@s,f
 11884  0A14  3000               	movlw	0
 11885  0A15  3DA7               	addwfc	atoi@s+1,f
 11886  0A16                     l5377:	
 11887  0A16  0826               	movf	atoi@s,w
 11888  0A17  0086               	movwf	6
 11889  0A18  0827               	movf	atoi@s+1,w
 11890  0A19  0087               	movwf	7
 11891  0A1A  0801               	movf	1,w
 11892  0A1B  3192  2248  3189   	fcall	_isdigit
 11893  0A1E  1C03               	btfss	3,0
 11894  0A1F  2A3F               	goto	l5379
 11895  0A20  0020               	movlb	0	; select bank0
 11896  0A21  082C               	movf	atoi@a+1,w
 11897  0A22  00A1               	movwf	___wmul@multiplier+1
 11898  0A23  082B               	movf	atoi@a,w
 11899  0A24  00A0               	movwf	___wmul@multiplier
 11900  0A25  300A               	movlw	10
 11901  0A26  00A2               	movwf	___wmul@multiplicand
 11902  0A27  3000               	movlw	0
 11903  0A28  00A3               	movwf	___wmul@multiplicand+1
 11904  0A29  3193  235A  3189   	fcall	___wmul
 11905  0A2C  0020               	movlb	0	; select bank0
 11906  0A2D  0826               	movf	atoi@s,w
 11907  0A2E  0086               	movwf	6
 11908  0A2F  0827               	movf	atoi@s+1,w
 11909  0A30  0087               	movwf	7
 11910  0A31  0801               	movf	1,w
 11911  0A32  0720               	addwf	?___wmul,w
 11912  0A33  00A8               	movwf	??_atoi
 11913  0A34  0821               	movf	?___wmul+1,w
 11914  0A35  1803               	skipnc
 11915  0A36  0A21               	incf	?___wmul+1,w
 11916  0A37  00A9               	movwf	??_atoi+1
 11917  0A38  0828               	movf	??_atoi,w
 11918  0A39  3ED0               	addlw	208
 11919  0A3A  00AB               	movwf	atoi@a
 11920  0A3B  30FF               	movlw	255
 11921  0A3C  3D29               	addwfc	??_atoi+1,w
 11922  0A3D  00AC               	movwf	atoi@a+1
 11923  0A3E  2A12               	goto	l5375
 11924  0A3F                     l5379:	
 11925  0A3F  0020               	movlb	0	; select bank0
 11926  0A40  082A               	movf	atoi@sign,w
 11927  0A41  1903               	btfsc	3,2
 11928  0A42  2A4F               	goto	l5385
 11929  0A43  092B               	comf	atoi@a,w
 11930  0A44  00A8               	movwf	??_atoi
 11931  0A45  092C               	comf	atoi@a+1,w
 11932  0A46  00A9               	movwf	??_atoi+1
 11933  0A47  0AA8               	incf	??_atoi,f
 11934  0A48  1903               	skipnz
 11935  0A49  0AA9               	incf	??_atoi+1,f
 11936  0A4A  0828               	movf	??_atoi,w
 11937  0A4B  00A6               	movwf	?_atoi
 11938  0A4C  0829               	movf	??_atoi+1,w
 11939  0A4D  00A7               	movwf	?_atoi+1
 11940  0A4E  0008               	return
 11941  0A4F                     l5385:	
 11942  0A4F  082C               	movf	atoi@a+1,w
 11943  0A50  00A7               	movwf	?_atoi+1
 11944  0A51  082B               	movf	atoi@a,w
 11945  0A52  00A6               	movwf	?_atoi
 11946  0A53  0008               	return
 11947  0A54                     __end_of_atoi:	
 11948                           
 11949                           	psect	text56
 11950  1248                     __ptext56:	
 11951 ;; *************** function _isdigit *****************
 11952 ;; Defined at:
 11953 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 11954 ;; Parameters:    Size  Location     Type
 11955 ;;  c               1    wreg     unsigned char 
 11956 ;; Auto vars:     Size  Location     Type
 11957 ;;  c               1    1[BANK0 ] unsigned char 
 11958 ;; Return value:  Size  Location     Type
 11959 ;;		None               void
 11960 ;; Registers used:
 11961 ;;		wreg, status,2, status,0
 11962 ;; Tracked objects:
 11963 ;;		On entry : 0/0
 11964 ;;		On exit  : 0/0
 11965 ;;		Unchanged: 0/0
 11966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11968 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11970 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11971 ;;Total ram usage:        2 bytes
 11972 ;; Hardware stack levels used:    1
 11973 ;; Hardware stack levels required when called:    3
 11974 ;; This function calls:
 11975 ;;		Nothing
 11976 ;; This function is called by:
 11977 ;;		_printf
 11978 ;;		_atoi
 11979 ;; This function uses a non-reentrant model
 11980 ;;
 11981                           
 11982                           
 11983                           ;psect for function _isdigit
 11984  1248                     _isdigit:	
 11985                           
 11986                           ;incstack = 0
 11987                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 11988                           ;isdigit@c stored from wreg
 11989  1248  0020               	movlb	0	; select bank0
 11990  1249  00A1               	movwf	isdigit@c
 11991  124A  01A0               	clrf	_isdigit$1459
 11992  124B  303A               	movlw	58
 11993  124C  0221               	subwf	isdigit@c,w
 11994  124D  1803               	skipnc
 11995  124E  2A55               	goto	l4753
 11996  124F  3030               	movlw	48
 11997  1250  0221               	subwf	isdigit@c,w
 11998  1251  1C03               	skipc
 11999  1252  2A55               	goto	l4753
 12000  1253  01A0               	clrf	_isdigit$1459
 12001  1254  0AA0               	incf	_isdigit$1459,f
 12002  1255                     l4753:	
 12003  1255  0C20               	rrf	_isdigit$1459,w
 12004  1256  0008               	return
 12005  1257                     __end_of_isdigit:	
 12006                           
 12007                           	psect	text57
 12008  135A                     __ptext57:	
 12009 ;; *************** function ___wmul *****************
 12010 ;; Defined at:
 12011 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 12012 ;; Parameters:    Size  Location     Type
 12013 ;;  multiplier      2    0[BANK0 ] unsigned int 
 12014 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 12015 ;; Auto vars:     Size  Location     Type
 12016 ;;  product         2    4[BANK0 ] unsigned int 
 12017 ;; Return value:  Size  Location     Type
 12018 ;;                  2    0[BANK0 ] unsigned int 
 12019 ;; Registers used:
 12020 ;;		wreg, status,2, status,0
 12021 ;; Tracked objects:
 12022 ;;		On entry : 0/0
 12023 ;;		On exit  : 0/0
 12024 ;;		Unchanged: 0/0
 12025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12026 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12027 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12029 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12030 ;;Total ram usage:        6 bytes
 12031 ;; Hardware stack levels used:    1
 12032 ;; Hardware stack levels required when called:    3
 12033 ;; This function calls:
 12034 ;;		Nothing
 12035 ;; This function is called by:
 12036 ;;		_exec_remote_cmd
 12037 ;;		_init
 12038 ;;		_put_cmd
 12039 ;;		_printf
 12040 ;;		_atoi
 12041 ;; This function uses a non-reentrant model
 12042 ;;
 12043                           
 12044                           
 12045                           ;psect for function ___wmul
 12046  135A                     ___wmul:	
 12047                           
 12048                           ;incstack = 0
 12049                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 12050  135A  0020               	movlb	0	; select bank0
 12051  135B  01A4               	clrf	___wmul@product
 12052  135C  01A5               	clrf	___wmul@product+1
 12053  135D                     l4759:	
 12054  135D  1C20               	btfss	___wmul@multiplier,0
 12055  135E  2B63               	goto	l1112
 12056  135F  0822               	movf	___wmul@multiplicand,w
 12057  1360  07A4               	addwf	___wmul@product,f
 12058  1361  0823               	movf	___wmul@multiplicand+1,w
 12059  1362  3DA5               	addwfc	___wmul@product+1,f
 12060  1363                     l1112:	
 12061  1363  3001               	movlw	1
 12062  1364                     u5045:	
 12063  1364  35A2               	lslf	___wmul@multiplicand,f
 12064  1365  0DA3               	rlf	___wmul@multiplicand+1,f
 12065  1366  0B89               	decfsz	9,f
 12066  1367  2B64               	goto	u5045
 12067  1368  3001               	movlw	1
 12068  1369                     u5055:	
 12069  1369  36A1               	lsrf	___wmul@multiplier+1,f
 12070  136A  0CA0               	rrf	___wmul@multiplier,f
 12071  136B  0B89               	decfsz	9,f
 12072  136C  2B69               	goto	u5055
 12073  136D  0820               	movf	___wmul@multiplier,w
 12074  136E  0421               	iorwf	___wmul@multiplier+1,w
 12075  136F  1D03               	btfss	3,2
 12076  1370  2B5D               	goto	l4759
 12077  1371  0825               	movf	___wmul@product+1,w
 12078  1372  00A1               	movwf	?___wmul+1
 12079  1373  0824               	movf	___wmul@product,w
 12080  1374  00A0               	movwf	?___wmul
 12081  1375  0008               	return
 12082  1376                     __end_of___wmul:	
 12083                           
 12084                           	psect	text58
 12085  13D1                     __ptext58:	
 12086 ;; *************** function _DATAEE_WriteByte *****************
 12087 ;; Defined at:
 12088 ;;		line 180 in file "mcc_generated_files/memory.c"
 12089 ;; Parameters:    Size  Location     Type
 12090 ;;  bAdd            1    wreg     unsigned char 
 12091 ;;  bData           1    0[BANK0 ] unsigned char 
 12092 ;; Auto vars:     Size  Location     Type
 12093 ;;  bAdd            1    1[BANK0 ] unsigned char 
 12094 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
 12095 ;; Return value:  Size  Location     Type
 12096 ;;                  1    wreg      void 
 12097 ;; Registers used:
 12098 ;;		wreg, status,2, status,0
 12099 ;; Tracked objects:
 12100 ;;		On entry : 0/0
 12101 ;;		On exit  : 0/0
 12102 ;;		Unchanged: 0/0
 12103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12104 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12105 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12107 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12108 ;;Total ram usage:        3 bytes
 12109 ;; Hardware stack levels used:    1
 12110 ;; Hardware stack levels required when called:    3
 12111 ;; This function calls:
 12112 ;;		Nothing
 12113 ;; This function is called by:
 12114 ;;		_command_handler
 12115 ;;		_PROTOCOL_Write_Device_Address
 12116 ;;		_PROTOCOL_SAV
 12117 ;; This function uses a non-reentrant model
 12118 ;;
 12119                           
 12120                           
 12121                           ;psect for function _DATAEE_WriteByte
 12122  13D1                     _DATAEE_WriteByte:	
 12123                           
 12124                           ;incstack = 0
 12125                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 12126                           ;DATAEE_WriteByte@bAdd stored from wreg
 12127  13D1  0020               	movlb	0	; select bank0
 12128  13D2  00A1               	movwf	DATAEE_WriteByte@bAdd
 12129                           
 12130                           ;memory.c: 182: uint8_t GIEBitValue = 0;
 12131  13D3  01A2               	clrf	DATAEE_WriteByte@GIEBitValue
 12132                           
 12133                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
 12134  13D4  0821               	movf	DATAEE_WriteByte@bAdd,w
 12135  13D5  0023               	movlb	3	; select bank3
 12136  13D6  0091               	movwf	17	;volatile
 12137                           
 12138                           ;memory.c: 185: EEDATL = bData;
 12139  13D7  0020               	movlb	0	; select bank0
 12140  13D8  0820               	movf	DATAEE_WriteByte@bData,w
 12141  13D9  0023               	movlb	3	; select bank3
 12142  13DA  0093               	movwf	19	;volatile
 12143                           
 12144                           ;memory.c: 186: EECON1bits.EEPGD = 0;
 12145  13DB  1395               	bcf	21,7	;volsfr
 12146                           
 12147                           ;memory.c: 187: EECON1bits.CFGS = 0;
 12148  13DC  1315               	bcf	21,6	;volsfr
 12149                           
 12150                           ;memory.c: 188: EECON1bits.WREN = 1;
 12151  13DD  1515               	bsf	21,2	;volsfr
 12152                           
 12153                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
 12154  13DE  3000               	movlw	0
 12155  13DF  1B8B               	btfsc	11,7	;volatile
 12156  13E0  3001               	movlw	1
 12157  13E1  0020               	movlb	0	; select bank0
 12158  13E2  00A2               	movwf	DATAEE_WriteByte@GIEBitValue
 12159                           
 12160                           ;memory.c: 191: INTCONbits.GIE = 0;
 12161  13E3  138B               	bcf	11,7	;volatile
 12162                           
 12163                           ;memory.c: 192: EECON2 = 0x55;
 12164  13E4  3055               	movlw	85
 12165  13E5  0023               	movlb	3	; select bank3
 12166  13E6  0096               	movwf	22	;volsfr
 12167                           
 12168                           ;memory.c: 193: EECON2 = 0xAA;
 12169  13E7  30AA               	movlw	170
 12170  13E8  0096               	movwf	22	;volsfr
 12171                           
 12172                           ;memory.c: 194: EECON1bits.WR = 1;
 12173  13E9  1495               	bsf	21,1	;volsfr
 12174  13EA                     l188:	
 12175                           ;memory.c: 197: {
 12176                           
 12177                           ;memory.c: 196: while (EECON1bits.WR)
 12178                           
 12179  13EA  1895               	btfsc	21,1	;volsfr
 12180  13EB  2BEA               	goto	l188
 12181                           
 12182                           ;memory.c: 198: }
 12183                           ;memory.c: 200: EECON1bits.WREN = 0;
 12184  13EC  1115               	bcf	21,2	;volsfr
 12185                           
 12186                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 12187  13ED  0020               	movlb	0	; select bank0
 12188  13EE  0C22               	rrf	DATAEE_WriteByte@GIEBitValue,w
 12189  13EF  1C03               	skipc
 12190  13F0  138B               	bcf	11,7	;volatile
 12191  13F1  1803               	skipnc
 12192  13F2  178B               	bsf	11,7	;volatile
 12193  13F3  0008               	return
 12194  13F4                     __end_of_DATAEE_WriteByte:	
 12195                           
 12196                           	psect	text59
 12197  13B1                     __ptext59:	
 12198 ;; *************** function _EUSART_Read *****************
 12199 ;; Defined at:
 12200 ;;		line 112 in file "mcc_generated_files/eusart.c"
 12201 ;; Parameters:    Size  Location     Type
 12202 ;;		None
 12203 ;; Auto vars:     Size  Location     Type
 12204 ;;  readValue       1    1[BANK0 ] unsigned char 
 12205 ;; Return value:  Size  Location     Type
 12206 ;;                  1    wreg      unsigned char 
 12207 ;; Registers used:
 12208 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12209 ;; Tracked objects:
 12210 ;;		On entry : 0/0
 12211 ;;		On exit  : 0/0
 12212 ;;		Unchanged: 0/0
 12213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12215 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12217 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;Total ram usage:        2 bytes
 12219 ;; Hardware stack levels used:    1
 12220 ;; Hardware stack levels required when called:    3
 12221 ;; This function calls:
 12222 ;;		Nothing
 12223 ;; This function is called by:
 12224 ;;		_PROTOCOL_Loop
 12225 ;;		_getch
 12226 ;; This function uses a non-reentrant model
 12227 ;;
 12228                           
 12229                           
 12230                           ;psect for function _EUSART_Read
 12231  13B1                     _EUSART_Read:	
 12232                           
 12233                           ;eusart.c: 114: uint8_t readValue = 0;
 12234                           
 12235                           ;incstack = 0
 12236                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
 12237  13B1  0020               	movlb	0	; select bank0
 12238  13B2  01A1               	clrf	EUSART_Read@readValue
 12239  13B3                     l5665:	
 12240                           ;eusart.c: 117: {
 12241                           
 12242                           ;eusart.c: 116: while(0 == eusartRxCount)
 12243                           
 12244  13B3  0021               	movlb	1	; select bank1
 12245  13B4  0866               	movf	_eusartRxCount^(0+128),w	;volatile
 12246  13B5  1903               	btfsc	3,2
 12247  13B6  2BB3               	goto	l5665
 12248                           
 12249                           ;eusart.c: 118: }
 12250                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
 12251  13B7  0872               	movf	_eusartRxTail,w
 12252  13B8  3E20               	addlw	(low (_eusartRxBuffer| (0+768)))& (0+255)
 12253  13B9  0086               	movwf	6
 12254  13BA  3003               	movlw	3	; select bank6/7
 12255  13BB  0087               	movwf	7
 12256  13BC  0801               	movf	1,w
 12257  13BD  0020               	movlb	0	; select bank0
 12258  13BE  00A0               	movwf	??_EUSART_Read
 12259  13BF  0820               	movf	??_EUSART_Read,w
 12260  13C0  00A1               	movwf	EUSART_Read@readValue
 12261  13C1  3001               	movlw	1
 12262  13C2  00A0               	movwf	??_EUSART_Read
 12263  13C3  0820               	movf	??_EUSART_Read,w
 12264  13C4  07F2               	addwf	_eusartRxTail,f	;volatile
 12265                           
 12266                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
 12267  13C5  3040               	movlw	64
 12268  13C6  0272               	subwf	_eusartRxTail,w	;volatile
 12269  13C7  1803               	btfsc	3,0
 12270                           
 12271                           ;eusart.c: 122: {
 12272                           ;eusart.c: 123: eusartRxTail = 0;
 12273  13C8  01F2               	clrf	_eusartRxTail	;volatile
 12274                           
 12275                           ;eusart.c: 124: }
 12276                           ;eusart.c: 125: PIE1bits.RCIE = 0;
 12277  13C9  0021               	movlb	1	; select bank1
 12278  13CA  1291               	bcf	17,5	;volatile
 12279                           
 12280                           ;eusart.c: 126: eusartRxCount--;
 12281  13CB  3001               	movlw	1
 12282  13CC  02E6               	subwf	_eusartRxCount^(0+128),f	;volatile
 12283                           
 12284                           ;eusart.c: 127: PIE1bits.RCIE = 1;
 12285  13CD  1691               	bsf	17,5	;volatile
 12286                           
 12287                           ;eusart.c: 129: return readValue;
 12288  13CE  0020               	movlb	0	; select bank0
 12289  13CF  0821               	movf	EUSART_Read@readValue,w
 12290  13D0  0008               	return
 12291  13D1                     __end_of_EUSART_Read:	
 12292                           
 12293                           	psect	text60
 12294  0893                     __ptext60:	
 12295 ;; *************** function _PROTOCOL_Initialize *****************
 12296 ;; Defined at:
 12297 ;;		line 60 in file "protocol.c"
 12298 ;; Parameters:    Size  Location     Type
 12299 ;;  device_id       2    1[BANK0 ] PTR const unsigned char 
 12300 ;;		 -> STR_33(17), 
 12301 ;;  start_handle    1    3[BANK0 ] PTR void 
 12302 ;;		 -> NULL(0), 
 12303 ;;  stop_handler    1    4[BANK0 ] PTR void 
 12304 ;;		 -> NULL(0), 
 12305 ;;  set_handler     1    5[BANK0 ] PTR void 
 12306 ;;		 -> NULL(0), 
 12307 ;;  inv_handler     2    6[BANK0 ] PTR void 
 12308 ;;		 -> inv_handler(1), 
 12309 ;;  scaler          1    8[BANK0 ] unsigned char 
 12310 ;; Auto vars:     Size  Location     Type
 12311 ;;		None
 12312 ;; Return value:  Size  Location     Type
 12313 ;;                  1    wreg      void 
 12314 ;; Registers used:
 12315 ;;		wreg, status,2, status,0, pclath, cstack
 12316 ;; Tracked objects:
 12317 ;;		On entry : 0/0
 12318 ;;		On exit  : 0/0
 12319 ;;		Unchanged: 0/0
 12320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12321 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12323 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12324 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12325 ;;Total ram usage:       10 bytes
 12326 ;; Hardware stack levels used:    1
 12327 ;; Hardware stack levels required when called:    4
 12328 ;; This function calls:
 12329 ;;		_DATAEE_ReadByte
 12330 ;; This function is called by:
 12331 ;;		_main
 12332 ;; This function uses a non-reentrant model
 12333 ;;
 12334                           
 12335                           
 12336                           ;psect for function _PROTOCOL_Initialize
 12337  0893                     _PROTOCOL_Initialize:	
 12338                           
 12339                           ;protocol.c: 61: device_id_ = device_id;
 12340                           
 12341                           ;incstack = 0
 12342                           ; Regs used in _PROTOCOL_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12343  0893  0020               	movlb	0	; select bank0
 12344  0894  0822               	movf	PROTOCOL_Initialize@device_id+1,w
 12345  0895  0022               	movlb	2	; select bank2
 12346  0896  00A7               	movwf	(_device_id_+1)^(0+256)
 12347  0897  0020               	movlb	0	; select bank0
 12348  0898  0821               	movf	PROTOCOL_Initialize@device_id,w
 12349  0899  0022               	movlb	2	; select bank2
 12350  089A  00A6               	movwf	_device_id_^(0+256)
 12351                           
 12352                           ;protocol.c: 62: PROTOCOL_Start_Handler = start_handler;
 12353  089B  0020               	movlb	0	; select bank0
 12354  089C  0823               	movf	PROTOCOL_Initialize@start_handler,w
 12355  089D  00A9               	movwf	??_PROTOCOL_Initialize
 12356  089E  3000               	movlw	0
 12357  089F  00AA               	movwf	??_PROTOCOL_Initialize+1
 12358  08A0  0829               	movf	??_PROTOCOL_Initialize,w
 12359  08A1  0022               	movlb	2	; select bank2
 12360  08A2  00B4               	movwf	_PROTOCOL_Start_Handler^(0+256)
 12361  08A3  0020               	movlb	0	; select bank0
 12362  08A4  082A               	movf	??_PROTOCOL_Initialize+1,w
 12363  08A5  0022               	movlb	2	; select bank2
 12364  08A6  00B5               	movwf	(_PROTOCOL_Start_Handler+1)^(0+256)
 12365                           
 12366                           ;protocol.c: 63: PROTOCOL_Stop_Handler = stop_handler;
 12367  08A7  0020               	movlb	0	; select bank0
 12368  08A8  0824               	movf	PROTOCOL_Initialize@stop_handler,w
 12369  08A9  00A9               	movwf	??_PROTOCOL_Initialize
 12370  08AA  3000               	movlw	0
 12371  08AB  00AA               	movwf	??_PROTOCOL_Initialize+1
 12372  08AC  0829               	movf	??_PROTOCOL_Initialize,w
 12373  08AD  0022               	movlb	2	; select bank2
 12374  08AE  00B2               	movwf	_PROTOCOL_Stop_Handler^(0+256)
 12375  08AF  0020               	movlb	0	; select bank0
 12376  08B0  082A               	movf	??_PROTOCOL_Initialize+1,w
 12377  08B1  0022               	movlb	2	; select bank2
 12378  08B2  00B3               	movwf	(_PROTOCOL_Stop_Handler+1)^(0+256)
 12379                           
 12380                           ;protocol.c: 64: PROTOCOL_Set_Handler = set_handler;
 12381  08B3  0020               	movlb	0	; select bank0
 12382  08B4  0825               	movf	PROTOCOL_Initialize@set_handler,w
 12383  08B5  00A9               	movwf	??_PROTOCOL_Initialize
 12384  08B6  3000               	movlw	0
 12385  08B7  00AA               	movwf	??_PROTOCOL_Initialize+1
 12386  08B8  0829               	movf	??_PROTOCOL_Initialize,w
 12387  08B9  0022               	movlb	2	; select bank2
 12388  08BA  00B0               	movwf	_PROTOCOL_Set_Handler^(0+256)
 12389  08BB  0020               	movlb	0	; select bank0
 12390  08BC  082A               	movf	??_PROTOCOL_Initialize+1,w
 12391  08BD  0022               	movlb	2	; select bank2
 12392  08BE  00B1               	movwf	(_PROTOCOL_Set_Handler+1)^(0+256)
 12393                           
 12394                           ;protocol.c: 67: value = DATAEE_ReadByte(1);
 12395  08BF  3001               	movlw	1
 12396  08C0  3192  223B  3188   	fcall	_DATAEE_ReadByte
 12397  08C3  0020               	movlb	0	; select bank0
 12398  08C4  00A9               	movwf	??_PROTOCOL_Initialize
 12399  08C5  0829               	movf	??_PROTOCOL_Initialize,w
 12400  08C6  0021               	movlb	1	; select bank1
 12401  08C7  00DE               	movwf	_value^(0+128)
 12402                           
 12403                           ;protocol.c: 69: slave_address = DATAEE_ReadByte(0);
 12404  08C8  3000               	movlw	0
 12405  08C9  3192  223B         	fcall	_DATAEE_ReadByte
 12406  08CB  0020               	movlb	0	; select bank0
 12407  08CC  00A9               	movwf	??_PROTOCOL_Initialize
 12408  08CD  0829               	movf	??_PROTOCOL_Initialize,w
 12409  08CE  0021               	movlb	1	; select bank1
 12410  08CF  00E0               	movwf	_slave_address^(0+128)
 12411                           
 12412                           ;protocol.c: 72: readbuf.status = COMPLETE;
 12413  08D0  3003               	movlw	3
 12414  08D1  0020               	movlb	0	; select bank0
 12415  08D2  00A9               	movwf	??_PROTOCOL_Initialize
 12416  08D3  0829               	movf	??_PROTOCOL_Initialize,w
 12417  08D4  0022               	movlb	2	; select bank2
 12418  08D5  00CA               	movwf	(_readbuf^(0+256)+4)
 12419                           
 12420                           ;protocol.c: 73: PROTOCOL_Inv_Handler = inv_handler;
 12421  08D6  0020               	movlb	0	; select bank0
 12422  08D7  0827               	movf	PROTOCOL_Initialize@inv_handler+1,w
 12423  08D8  0022               	movlb	2	; select bank2
 12424  08D9  00AB               	movwf	(_PROTOCOL_Inv_Handler+1)^(0+256)
 12425  08DA  0020               	movlb	0	; select bank0
 12426  08DB  0826               	movf	PROTOCOL_Initialize@inv_handler,w
 12427  08DC  0022               	movlb	2	; select bank2
 12428  08DD  00AA               	movwf	_PROTOCOL_Inv_Handler^(0+256)
 12429                           
 12430                           ;protocol.c: 74: tmr_scaler = scaler;
 12431  08DE  0020               	movlb	0	; select bank0
 12432  08DF  0828               	movf	PROTOCOL_Initialize@scaler,w
 12433  08E0  00A9               	movwf	??_PROTOCOL_Initialize
 12434  08E1  0829               	movf	??_PROTOCOL_Initialize,w
 12435  08E2  0022               	movlb	2	; select bank2
 12436  08E3  00E2               	movwf	_tmr_scaler^(0+256)
 12437  08E4  0008               	return
 12438  08E5                     __end_of_PROTOCOL_Initialize:	
 12439                           
 12440                           	psect	text61
 12441  123B                     __ptext61:	
 12442 ;; *************** function _DATAEE_ReadByte *****************
 12443 ;; Defined at:
 12444 ;;		line 204 in file "mcc_generated_files/memory.c"
 12445 ;; Parameters:    Size  Location     Type
 12446 ;;  bAdd            1    wreg     unsigned char 
 12447 ;; Auto vars:     Size  Location     Type
 12448 ;;  bAdd            1    0[BANK0 ] unsigned char 
 12449 ;; Return value:  Size  Location     Type
 12450 ;;                  1    wreg      unsigned char 
 12451 ;; Registers used:
 12452 ;;		wreg
 12453 ;; Tracked objects:
 12454 ;;		On entry : 0/0
 12455 ;;		On exit  : 0/0
 12456 ;;		Unchanged: 0/0
 12457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12459 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12461 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12462 ;;Total ram usage:        1 bytes
 12463 ;; Hardware stack levels used:    1
 12464 ;; Hardware stack levels required when called:    3
 12465 ;; This function calls:
 12466 ;;		Nothing
 12467 ;; This function is called by:
 12468 ;;		_init
 12469 ;;		_PROTOCOL_Initialize
 12470 ;; This function uses a non-reentrant model
 12471 ;;
 12472                           
 12473                           
 12474                           ;psect for function _DATAEE_ReadByte
 12475  123B                     _DATAEE_ReadByte:	
 12476                           
 12477                           ;incstack = 0
 12478                           ; Regs used in _DATAEE_ReadByte: [wreg]
 12479                           ;DATAEE_ReadByte@bAdd stored from wreg
 12480  123B  0020               	movlb	0	; select bank0
 12481  123C  00A0               	movwf	DATAEE_ReadByte@bAdd
 12482                           
 12483                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
 12484  123D  0820               	movf	DATAEE_ReadByte@bAdd,w
 12485  123E  0023               	movlb	3	; select bank3
 12486  123F  0091               	movwf	17	;volatile
 12487                           
 12488                           ;memory.c: 207: EECON1bits.CFGS = 0;
 12489  1240  1315               	bcf	21,6	;volsfr
 12490                           
 12491                           ;memory.c: 208: EECON1bits.EEPGD = 0;
 12492  1241  1395               	bcf	21,7	;volsfr
 12493                           
 12494                           ;memory.c: 209: EECON1bits.RD = 1;
 12495  1242  1415               	bsf	21,0	;volsfr
 12496                           
 12497                           ;memory.c: 210: __nop();
 12498  1243  0000               	nop
 12499                           
 12500                           ;memory.c: 211: __nop();
 12501  1244  0000               	nop
 12502                           
 12503                           ;memory.c: 213: return (EEDATL);
 12504  1245  0023               	movlb	3	; select bank3
 12505  1246  0813               	movf	19,w	;volatile
 12506  1247  0008               	return
 12507  1248                     __end_of_DATAEE_ReadByte:	
 12508                           
 12509                           	psect	intentry
 12510  0004                     __pintentry:	
 12511 ;; *************** function _INTERRUPT_InterruptManager *****************
 12512 ;; Defined at:
 12513 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 12514 ;; Parameters:    Size  Location     Type
 12515 ;;		None
 12516 ;; Auto vars:     Size  Location     Type
 12517 ;;		None
 12518 ;; Return value:  Size  Location     Type
 12519 ;;                  1    wreg      void 
 12520 ;; Registers used:
 12521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12522 ;; Tracked objects:
 12523 ;;		On entry : 0/0
 12524 ;;		On exit  : 0/0
 12525 ;;		Unchanged: 0/0
 12526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12529 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12530 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12531 ;;Total ram usage:        1 bytes
 12532 ;; Hardware stack levels used:    1
 12533 ;; Hardware stack levels required when called:    2
 12534 ;; This function calls:
 12535 ;;		_EUSART_Receive_ISR
 12536 ;;		_EUSART_Transmit_ISR
 12537 ;;		_I2C1_BusCollisionISR
 12538 ;;		_I2C1_ISR
 12539 ;; This function is called by:
 12540 ;;		Interrupt level 1
 12541 ;; This function uses a non-reentrant model
 12542 ;;
 12543                           
 12544  0004                     _INTERRUPT_InterruptManager:	
 12545                           
 12546                           ;incstack = 0
 12547  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12548                           
 12549                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12550  0005  3180               	pagesel	$
 12551  0006  0020               	movlb	0	; select bank0
 12552  0007  087F               	movf	127,w
 12553  0008  00FD               	movwf	??_INTERRUPT_InterruptManager
 12554                           
 12555                           ;interrupt_manager.c: 54: if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits.TXIF
      +                           == 1)
 12556  0009  1F0B               	btfss	11,6	;volatile
 12557  000A  2815               	goto	i1l321
 12558  000B  0021               	movlb	1	; select bank1
 12559  000C  1E11               	btfss	17,4	;volatile
 12560  000D  2815               	goto	i1l321
 12561  000E  0020               	movlb	0	; select bank0
 12562  000F  1E11               	btfss	17,4	;volatile
 12563  0010  2815               	goto	i1l321
 12564                           
 12565                           ;interrupt_manager.c: 55: {
 12566                           ;interrupt_manager.c: 56: EUSART_Transmit_ISR();
 12567  0011  3193  233E  3180   	fcall	_EUSART_Transmit_ISR
 12568                           
 12569                           ;interrupt_manager.c: 57: }
 12570  0014  2837               	goto	i1l329
 12571  0015                     i1l321:	
 12572                           
 12573                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
 12574  0015  1F0B               	btfss	11,6	;volatile
 12575  0016  2821               	goto	i1l323
 12576  0017  0021               	movlb	1	; select bank1
 12577  0018  1E91               	btfss	17,5	;volatile
 12578  0019  2821               	goto	i1l323
 12579  001A  0020               	movlb	0	; select bank0
 12580  001B  1E91               	btfss	17,5	;volatile
 12581  001C  2821               	goto	i1l323
 12582                           
 12583                           ;interrupt_manager.c: 59: {
 12584                           ;interrupt_manager.c: 60: EUSART_Receive_ISR();
 12585  001D  3193  2322  3180   	fcall	_EUSART_Receive_ISR
 12586                           
 12587                           ;interrupt_manager.c: 61: }
 12588  0020  2837               	goto	i1l329
 12589  0021                     i1l323:	
 12590                           
 12591                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE2bits.BCL1IE == 1 && PIR2bi
      +                          ts.BCL1IF == 1)
 12592  0021  1F0B               	btfss	11,6	;volatile
 12593  0022  282D               	goto	i1l325
 12594  0023  0021               	movlb	1	; select bank1
 12595  0024  1D92               	btfss	18,3	;volatile
 12596  0025  282D               	goto	i1l325
 12597  0026  0020               	movlb	0	; select bank0
 12598  0027  1D92               	btfss	18,3	;volatile
 12599  0028  282D               	goto	i1l325
 12600                           
 12601                           ;interrupt_manager.c: 63: {
 12602                           ;interrupt_manager.c: 64: I2C1_BusCollisionISR();
 12603  0029  3188  2001  3180   	fcall	_I2C1_BusCollisionISR
 12604                           
 12605                           ;interrupt_manager.c: 65: }
 12606  002C  2837               	goto	i1l329
 12607  002D                     i1l325:	
 12608                           
 12609                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE1bits.SSP1IE == 1 && PIR1bi
      +                          ts.SSP1IF == 1)
 12610  002D  1F0B               	btfss	11,6	;volatile
 12611  002E  2837               	goto	i1l329
 12612  002F  0021               	movlb	1	; select bank1
 12613  0030  1D91               	btfss	17,3	;volatile
 12614  0031  2837               	goto	i1l329
 12615  0032  0020               	movlb	0	; select bank0
 12616  0033  1D91               	btfss	17,3	;volatile
 12617  0034  2837               	goto	i1l329
 12618                           
 12619                           ;interrupt_manager.c: 67: {
 12620                           ;interrupt_manager.c: 68: I2C1_ISR();
 12621  0035  318B  2349         	fcall	_I2C1_ISR
 12622  0037                     i1l329:	
 12623                           ;interrupt_manager.c: 70: else
 12624                           ;interrupt_manager.c: 71: {
 12625                           
 12626                           ;interrupt_manager.c: 69: }
 12627                           
 12628  0037  087D               	movf	??_INTERRUPT_InterruptManager,w
 12629  0038  0020               	movlb	0	; select bank0
 12630  0039  00FF               	movwf	127
 12631  003A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12632  003B  0009               	retfie
 12633  003C                     __end_of_INTERRUPT_InterruptManager:	
 12634                           
 12635                           	psect	text63
 12636  0B49                     __ptext63:	
 12637 ;; *************** function _I2C1_ISR *****************
 12638 ;; Defined at:
 12639 ;;		line 233 in file "mcc_generated_files/i2c1.c"
 12640 ;; Parameters:    Size  Location     Type
 12641 ;;		None
 12642 ;; Auto vars:     Size  Location     Type
 12643 ;;		None
 12644 ;; Return value:  Size  Location     Type
 12645 ;;                  1    wreg      void 
 12646 ;; Registers used:
 12647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12648 ;; Tracked objects:
 12649 ;;		On entry : 0/0
 12650 ;;		On exit  : 0/0
 12651 ;;		Unchanged: 0/0
 12652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12655 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12656 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12657 ;;Total ram usage:        4 bytes
 12658 ;; Hardware stack levels used:    1
 12659 ;; Hardware stack levels required when called:    1
 12660 ;; This function calls:
 12661 ;;		_I2C1_FunctionComplete
 12662 ;;		_I2C1_Stop
 12663 ;; This function is called by:
 12664 ;;		_INTERRUPT_InterruptManager
 12665 ;; This function uses a non-reentrant model
 12666 ;;
 12667                           
 12668                           
 12669                           ;psect for function _I2C1_ISR
 12670  0B49                     _I2C1_ISR:	
 12671                           
 12672                           ;i2c1.c: 236: static uint8_t *pi2c_buf_ptr;
 12673                           ;i2c1.c: 237: static uint16_t i2c_address = 0;
 12674                           ;i2c1.c: 238: static uint8_t i2c_bytes_left = 0;
 12675                           ;i2c1.c: 239: static uint8_t i2c_10bit_address_restart = 0;
 12676                           ;i2c1.c: 241: PIR1bits.SSP1IF = 0;
 12677                           
 12678                           ;incstack = 0
 12679                           ; Regs used in _I2C1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12680  0B49  0020               	movlb	0	; select bank0
 12681  0B4A  1191               	bcf	17,3	;volatile
 12682                           
 12683                           ;i2c1.c: 245: if(SSP1CON1bits.WCOL)
 12684  0B4B  0024               	movlb	4	; select bank4
 12685  0B4C  1F95               	btfss	21,7	;volatile
 12686  0B4D  2C94               	goto	i1l5933
 12687                           
 12688                           ;i2c1.c: 246: {
 12689                           ;i2c1.c: 248: SSP1CON1bits.WCOL = 0;
 12690  0B4E  1395               	bcf	21,7	;volatile
 12691                           
 12692                           ;i2c1.c: 249: i2c1_state = S_MASTER_IDLE;
 12693  0B4F  0021               	movlb	1	; select bank1
 12694  0B50  01EC               	clrf	_i2c1_state^(0+128)
 12695                           
 12696                           ;i2c1.c: 250: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 12697  0B51  0869               	movf	_p_i2c1_current^(0+128),w
 12698  0B52  3E02               	addlw	2
 12699  0B53  0086               	movwf	6
 12700  0B54  3001               	movlw	1	; select bank2/3
 12701  0B55  0087               	movwf	7
 12702  0B56  0801               	movf	1,w
 12703  0B57  0086               	movwf	6
 12704  0B58  0187               	clrf	7
 12705  0B59  0181               	clrf	1
 12706  0B5A  0A81               	incf	1,f
 12707                           
 12708                           ;i2c1.c: 253: p_i2c1_current = (0);
 12709  0B5B  01E9               	clrf	_p_i2c1_current^(0+128)
 12710                           
 12711                           ;i2c1.c: 255: return;
 12712  0B5C  0008               	return
 12713  0B5D                     i1l60:	
 12714                           ;i2c1.c: 260: {
 12715                           ;i2c1.c: 261: case S_MASTER_IDLE:
 12716                           
 12717                           ;i2c1.c: 256: }
 12718                           ;i2c1.c: 259: switch(i2c1_state)
 12719                           
 12720                           
 12721                           ;i2c1.c: 263: if(i2c1_object.trStatus.s.empty != 1)
 12722  0B5D  18DB               	btfsc	(_i2c1_object^(0+128)+2),1
 12723  0B5E  0008               	return
 12724                           
 12725                           ;i2c1.c: 264: {
 12726                           ;i2c1.c: 266: p_i2c1_current = i2c1_object.pTrHead;
 12727  0B5F  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12728  0B60  00F9               	movwf	??_I2C1_ISR
 12729  0B61  0879               	movf	??_I2C1_ISR,w
 12730  0B62  00E9               	movwf	_p_i2c1_current^(0+128)
 12731                           
 12732                           ;i2c1.c: 267: i2c1_trb_count = i2c1_object.pTrHead->count;
 12733  0B63  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12734  0B64  0086               	movwf	6
 12735  0B65  3001               	movlw	1	; select bank2/3
 12736  0B66  0087               	movwf	7
 12737  0B67  0801               	movf	1,w
 12738  0B68  00F9               	movwf	??_I2C1_ISR
 12739  0B69  0879               	movf	??_I2C1_ISR,w
 12740  0B6A  00EB               	movwf	_i2c1_trb_count^(0+128)
 12741                           
 12742                           ;i2c1.c: 268: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 12743  0B6B  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12744  0B6C  0086               	movwf	6
 12745  0B6D  3001               	movlw	1	; select bank2/3
 12746  0B6E  0087               	movwf	7
 12747  0B6F  3001               	movlw	1	; select bank2/3
 12748  0B70  3F41               	moviw [1]fsr1
 12749  0B71  00EA               	movwf	_p_i2c1_trb_current^(0+128)
 12750                           
 12751                           ;i2c1.c: 270: i2c1_object.pTrHead++;
 12752  0B72  3003               	movlw	3
 12753  0B73  00F9               	movwf	??_I2C1_ISR
 12754  0B74  0879               	movf	??_I2C1_ISR,w
 12755  0B75  07DA               	addwf	(low ((_i2c1_object| 0+1)))^(0+128),f
 12756                           
 12757                           ;i2c1.c: 273: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 12758  0B76  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12759  0B77  3A5C               	xorlw	(low ((_i2c1_tr_queue| (0+256)+3)))& (0+255)
 12760  0B78  1D03               	skipz
 12761  0B79  2B7E               	goto	i1l5823
 12762                           
 12763                           ;i2c1.c: 274: {
 12764                           ;i2c1.c: 276: i2c1_object.pTrHead = i2c1_tr_queue;
 12765  0B7A  3059               	movlw	(low (_i2c1_tr_queue| (0+256)))& (0+255)
 12766  0B7B  00F9               	movwf	??_I2C1_ISR
 12767  0B7C  0879               	movf	??_I2C1_ISR,w
 12768  0B7D  00DA               	movwf	(low ((_i2c1_object| 0+1)))^(0+128)
 12769  0B7E                     i1l5823:	
 12770                           
 12771                           ;i2c1.c: 277: }
 12772                           ;i2c1.c: 281: i2c1_object.trStatus.s.full = 0;
 12773  0B7E  105B               	bcf	(_i2c1_object^(0+128)+2),0
 12774                           
 12775                           ;i2c1.c: 284: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 12776  0B7F  085A               	movf	(low ((_i2c1_object| 0+1)))^(0+128),w
 12777  0B80  0659               	xorwf	_i2c1_object^(0+128),w
 12778  0B81  1903               	btfsc	3,2
 12779                           
 12780                           ;i2c1.c: 285: {
 12781                           ;i2c1.c: 287: i2c1_object.trStatus.s.empty = 1;
 12782  0B82  14DB               	bsf	(_i2c1_object^(0+128)+2),1
 12783                           
 12784                           ;i2c1.c: 288: }
 12785                           ;i2c1.c: 291: SSP1CON2bits.SEN = 1;
 12786  0B83  0024               	movlb	4	; select bank4
 12787  0B84  1416               	bsf	22,0	;volatile
 12788                           
 12789                           ;i2c1.c: 294: i2c1_state = S_MASTER_SEND_ADDR;
 12790  0B85  3002               	movlw	2
 12791  0B86  00F9               	movwf	??_I2C1_ISR
 12792  0B87  0879               	movf	??_I2C1_ISR,w
 12793  0B88  0021               	movlb	1	; select bank1
 12794  0B89  00EC               	movwf	_i2c1_state^(0+128)
 12795                           
 12796                           ;i2c1.c: 295: }
 12797                           ;i2c1.c: 297: break;
 12798  0B8A  0008               	return
 12799  0B8B                     i1l65:	
 12800                           ;i2c1.c: 299: case S_MASTER_RESTART:
 12801                           
 12802                           
 12803                           ;i2c1.c: 304: SSP1CON2bits.RSEN = 1;
 12804  0B8B  0024               	movlb	4	; select bank4
 12805  0B8C  1496               	bsf	22,1	;volatile
 12806                           
 12807                           ;i2c1.c: 307: i2c1_state = S_MASTER_SEND_ADDR;
 12808  0B8D  3002               	movlw	2
 12809  0B8E  00F9               	movwf	??_I2C1_ISR
 12810  0B8F  0879               	movf	??_I2C1_ISR,w
 12811  0B90  0021               	movlb	1	; select bank1
 12812  0B91  00EC               	movwf	_i2c1_state^(0+128)
 12813                           
 12814                           ;i2c1.c: 309: break;
 12815  0B92  0008               	return
 12816  0B93                     i1l66:	
 12817                           ;i2c1.c: 311: case S_MASTER_SEND_ADDR_10BIT_LSB:
 12818                           
 12819                           
 12820                           ;i2c1.c: 313: if(SSP1CON2bits.ACKSTAT)
 12821  0B93  0024               	movlb	4	; select bank4
 12822  0B94  1F16               	btfss	22,6	;volatile
 12823  0B95  2B9F               	goto	i1l5835
 12824                           
 12825                           ;i2c1.c: 314: {
 12826                           ;i2c1.c: 315: i2c1_object.i2cErrors++;
 12827  0B96  3001               	movlw	1
 12828  0B97  00F9               	movwf	??_I2C1_ISR
 12829  0B98  0879               	movf	??_I2C1_ISR,w
 12830  0B99  0021               	movlb	1	; select bank1
 12831  0B9A  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 12832                           
 12833                           ;i2c1.c: 316: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 12834  0B9B  3004               	movlw	4
 12835  0B9C  3192  22D3         	fcall	_I2C1_Stop
 12836                           
 12837                           ;i2c1.c: 317: }
 12838  0B9E  0008               	return
 12839  0B9F                     i1l5835:	
 12840                           
 12841                           ;i2c1.c: 318: else
 12842                           ;i2c1.c: 319: {
 12843                           ;i2c1.c: 321: SSP1BUF = (i2c_address >> 1) & 0x00FF;
 12844  0B9F  0020               	movlb	0	; select bank0
 12845  0BA0  086E               	movf	I2C1_ISR@i2c_address+1,w
 12846  0BA1  00FA               	movwf	??_I2C1_ISR+1
 12847  0BA2  086D               	movf	I2C1_ISR@i2c_address,w
 12848  0BA3  00F9               	movwf	??_I2C1_ISR
 12849  0BA4  36FA               	lsrf	??_I2C1_ISR+1,f
 12850  0BA5  0CF9               	rrf	??_I2C1_ISR,f
 12851  0BA6  0879               	movf	??_I2C1_ISR,w
 12852  0BA7  0024               	movlb	4	; select bank4
 12853  0BA8  0091               	movwf	17	;volatile
 12854                           
 12855                           ;i2c1.c: 324: if(i2c_address & 0x01)
 12856  0BA9  0020               	movlb	0	; select bank0
 12857  0BAA  1C6D               	btfss	I2C1_ISR@i2c_address,0
 12858  0BAB  2BB2               	goto	i1l5841
 12859                           
 12860                           ;i2c1.c: 325: {
 12861                           ;i2c1.c: 328: i2c1_state = S_MASTER_10BIT_RESTART;
 12862  0BAC  300B               	movlw	11
 12863  0BAD  00F9               	movwf	??_I2C1_ISR
 12864  0BAE  0879               	movf	??_I2C1_ISR,w
 12865  0BAF  0021               	movlb	1	; select bank1
 12866  0BB0  00EC               	movwf	_i2c1_state^(0+128)
 12867                           
 12868                           ;i2c1.c: 329: }
 12869  0BB1  0008               	return
 12870  0BB2                     i1l5841:	
 12871                           
 12872                           ;i2c1.c: 330: else
 12873                           ;i2c1.c: 331: {
 12874                           ;i2c1.c: 333: i2c1_state = S_MASTER_SEND_DATA;
 12875  0BB2  3003               	movlw	3
 12876  0BB3  00F9               	movwf	??_I2C1_ISR
 12877  0BB4  0879               	movf	??_I2C1_ISR,w
 12878  0BB5  0021               	movlb	1	; select bank1
 12879  0BB6  00EC               	movwf	_i2c1_state^(0+128)
 12880                           
 12881                           ;i2c1.c: 334: }
 12882                           ;i2c1.c: 335: }
 12883                           ;i2c1.c: 337: break;
 12884  0BB7  0008               	return
 12885  0BB8                     i1l71:	
 12886                           ;i2c1.c: 339: case S_MASTER_10BIT_RESTART:
 12887                           
 12888                           
 12889                           ;i2c1.c: 341: if(SSP1CON2bits.ACKSTAT)
 12890  0BB8  0024               	movlb	4	; select bank4
 12891  0BB9  1F16               	btfss	22,6	;volatile
 12892  0BBA  2BC4               	goto	i1l72
 12893                           
 12894                           ;i2c1.c: 342: {
 12895                           ;i2c1.c: 343: i2c1_object.i2cErrors++;
 12896  0BBB  3001               	movlw	1
 12897  0BBC  00F9               	movwf	??_I2C1_ISR
 12898  0BBD  0879               	movf	??_I2C1_ISR,w
 12899  0BBE  0021               	movlb	1	; select bank1
 12900  0BBF  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 12901                           
 12902                           ;i2c1.c: 344: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 12903  0BC0  3004               	movlw	4
 12904  0BC1  3192  22D3         	fcall	_I2C1_Stop
 12905                           
 12906                           ;i2c1.c: 345: }
 12907  0BC3  0008               	return
 12908  0BC4                     i1l72:	
 12909                           
 12910                           ;i2c1.c: 346: else
 12911                           ;i2c1.c: 347: {
 12912                           ;i2c1.c: 350: SSP1CON2bits.RSEN = 1;
 12913  0BC4  1496               	bsf	22,1	;volatile
 12914                           
 12915                           ;i2c1.c: 354: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 12916  0BC5  0020               	movlb	0	; select bank0
 12917  0BC6  086E               	movf	I2C1_ISR@i2c_address+1,w
 12918  0BC7  00FA               	movwf	??_I2C1_ISR+1
 12919  0BC8  086D               	movf	I2C1_ISR@i2c_address,w
 12920  0BC9  00F9               	movwf	??_I2C1_ISR
 12921  0BCA  087A               	movf	??_I2C1_ISR+1,w
 12922  0BCB  00F9               	movwf	??_I2C1_ISR
 12923  0BCC  01FA               	clrf	??_I2C1_ISR+1
 12924  0BCD  3006               	movlw	6
 12925  0BCE  0579               	andwf	??_I2C1_ISR,w
 12926  0BCF  00FB               	movwf	??_I2C1_ISR+2
 12927  0BD0  3000               	movlw	0
 12928  0BD1  057A               	andwf	??_I2C1_ISR+1,w
 12929  0BD2  00FC               	movwf	??_I2C1_ISR+3
 12930  0BD3  30F0               	movlw	240
 12931  0BD4  047B               	iorwf	??_I2C1_ISR+2,w
 12932  0BD5  00ED               	movwf	I2C1_ISR@i2c_address
 12933  0BD6  3000               	movlw	0
 12934  0BD7  047C               	iorwf	??_I2C1_ISR+3,w
 12935  0BD8  00EE               	movwf	I2C1_ISR@i2c_address+1
 12936                           
 12937                           ;i2c1.c: 357: i2c_address |= 0x0001;
 12938  0BD9  146D               	bsf	I2C1_ISR@i2c_address,0
 12939                           
 12940                           ;i2c1.c: 360: i2c_10bit_address_restart = 1;
 12941  0BDA  0021               	movlb	1	; select bank1
 12942  0BDB  01E7               	clrf	I2C1_ISR@i2c_10bit_address_restart^(0+128)
 12943  0BDC  0AE7               	incf	I2C1_ISR@i2c_10bit_address_restart^(0+128),f
 12944                           
 12945                           ;i2c1.c: 363: i2c1_state = S_MASTER_SEND_ADDR;
 12946  0BDD  3002               	movlw	2
 12947  0BDE  00F9               	movwf	??_I2C1_ISR
 12948  0BDF  0879               	movf	??_I2C1_ISR,w
 12949  0BE0  00EC               	movwf	_i2c1_state^(0+128)
 12950                           
 12951                           ;i2c1.c: 364: }
 12952                           ;i2c1.c: 366: break;
 12953  0BE1  0008               	return
 12954  0BE2                     i1l5855:	
 12955                           ;i2c1.c: 368: case S_MASTER_SEND_ADDR:
 12956                           
 12957                           
 12958                           ;i2c1.c: 381: if(i2c_10bit_address_restart != 1)
 12959  0BE2  0367               	decf	I2C1_ISR@i2c_10bit_address_restart^(0+128),w
 12960  0BE3  1903               	btfsc	3,2
 12961  0BE4  2C01               	goto	i1l5873
 12962                           
 12963                           ;i2c1.c: 382: {
 12964                           ;i2c1.c: 384: i2c_address = p_i2c1_trb_current->address;
 12965  0BE5  086A               	movf	_p_i2c1_trb_current^(0+128),w
 12966  0BE6  0086               	movwf	6
 12967  0BE7  3001               	movlw	1	; select bank2/3
 12968  0BE8  0087               	movwf	7
 12969  0BE9  3F40               	moviw [0]fsr1
 12970  0BEA  0020               	movlb	0	; select bank0
 12971  0BEB  00ED               	movwf	I2C1_ISR@i2c_address
 12972  0BEC  3F41               	moviw [1]fsr1
 12973  0BED  00EE               	movwf	I2C1_ISR@i2c_address+1
 12974                           
 12975                           ;i2c1.c: 385: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 12976  0BEE  0021               	movlb	1	; select bank1
 12977  0BEF  086A               	movf	_p_i2c1_trb_current^(0+128),w
 12978  0BF0  3E03               	addlw	3
 12979  0BF1  0086               	movwf	6
 12980  0BF2  3001               	movlw	1	; select bank2/3
 12981  0BF3  0087               	movwf	7
 12982  0BF4  3F40               	moviw [0]fsr1
 12983  0BF5  0022               	movlb	2	; select bank2
 12984  0BF6  00B8               	movwf	I2C1_ISR@pi2c_buf_ptr^(0+256)
 12985  0BF7  3F41               	moviw [1]fsr1
 12986  0BF8  00B9               	movwf	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256)
 12987                           
 12988                           ;i2c1.c: 386: i2c_bytes_left = p_i2c1_trb_current->length;
 12989  0BF9  0021               	movlb	1	; select bank1
 12990  0BFA  086A               	movf	_p_i2c1_trb_current^(0+128),w
 12991  0BFB  0086               	movwf	6
 12992  0BFC  3001               	movlw	1	; select bank2/3
 12993  0BFD  0087               	movwf	7
 12994  0BFE  3001               	movlw	1	; select bank2/3
 12995  0BFF  3F42               	moviw [2]fsr1
 12996  0C00  00E8               	movwf	I2C1_ISR@i2c_bytes_left^(0+128)
 12997  0C01                     i1l5873:	
 12998                           ;i2c1.c: 407: }
 12999                           ;i2c1.c: 408: }
 13000                           
 13001                           ;i2c1.c: 406: i2c_10bit_address_restart = 0;
 13002                           
 13003                           ;i2c1.c: 404: i2c1_state = S_MASTER_ACK_ADDR;
 13004                           
 13005                           ;i2c1.c: 400: else
 13006                           ;i2c1.c: 401: {
 13007                           ;i2c1.c: 403: SSP1BUF = i2c_address;
 13008                           
 13009                           ;i2c1.c: 399: }
 13010                           
 13011                           ;i2c1.c: 398: i2c1_state = S_MASTER_SEND_ADDR_10BIT_LSB;
 13012                           
 13013                           ;i2c1.c: 393: {
 13014                           ;i2c1.c: 397: SSP1BUF = 0xF0 | ((i2c_address >> 8) & 0x0006);
 13015                           
 13016                           ;i2c1.c: 391: {
 13017                           ;i2c1.c: 392: if (0 == i2c_10bit_address_restart)
 13018                           
 13019                           ;i2c1.c: 387: }
 13020                           ;i2c1.c: 390: if(!1 && (0x0 != i2c_address))
 13021                           
 13022                           
 13023                           ;i2c1.c: 409: else
 13024                           ;i2c1.c: 410: {
 13025                           ;i2c1.c: 412: SSP1BUF = i2c_address;
 13026  0C01  0020               	movlb	0	; select bank0
 13027  0C02  086D               	movf	I2C1_ISR@i2c_address,w
 13028  0C03  0024               	movlb	4	; select bank4
 13029  0C04  0091               	movwf	17	;volatile
 13030                           
 13031                           ;i2c1.c: 413: if(i2c_address & 0x01)
 13032  0C05  0020               	movlb	0	; select bank0
 13033  0C06  1C6D               	btfss	I2C1_ISR@i2c_address,0
 13034  0C07  2C0E               	goto	i1l5879
 13035                           
 13036                           ;i2c1.c: 414: {
 13037                           ;i2c1.c: 416: i2c1_state = S_MASTER_ACK_ADDR;
 13038  0C08  3005               	movlw	5
 13039  0C09  00F9               	movwf	??_I2C1_ISR
 13040  0C0A  0879               	movf	??_I2C1_ISR,w
 13041  0C0B  0021               	movlb	1	; select bank1
 13042  0C0C  00EC               	movwf	_i2c1_state^(0+128)
 13043                           
 13044                           ;i2c1.c: 417: }
 13045  0C0D  0008               	return
 13046  0C0E                     i1l5879:	
 13047                           
 13048                           ;i2c1.c: 418: else
 13049                           ;i2c1.c: 419: {
 13050                           ;i2c1.c: 421: i2c1_state = S_MASTER_SEND_DATA;
 13051  0C0E  3003               	movlw	3
 13052  0C0F  00F9               	movwf	??_I2C1_ISR
 13053  0C10  0879               	movf	??_I2C1_ISR,w
 13054  0C11  0021               	movlb	1	; select bank1
 13055  0C12  00EC               	movwf	_i2c1_state^(0+128)
 13056                           
 13057                           ;i2c1.c: 422: }
 13058                           ;i2c1.c: 423: }
 13059                           ;i2c1.c: 424: break;
 13060  0C13  0008               	return
 13061  0C14                     i1l82:	
 13062                           ;i2c1.c: 426: case S_MASTER_SEND_DATA:
 13063                           
 13064                           
 13065                           ;i2c1.c: 429: if(SSP1CON2bits.ACKSTAT)
 13066  0C14  0024               	movlb	4	; select bank4
 13067  0C15  1F16               	btfss	22,6	;volatile
 13068  0C16  2C22               	goto	i1l5887
 13069                           
 13070                           ;i2c1.c: 430: {
 13071                           ;i2c1.c: 432: i2c1_object.i2cErrors++;
 13072  0C17  3001               	movlw	1
 13073  0C18  00F9               	movwf	??_I2C1_ISR
 13074  0C19  0879               	movf	??_I2C1_ISR,w
 13075  0C1A  0021               	movlb	1	; select bank1
 13076  0C1B  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13077                           
 13078                           ;i2c1.c: 435: SSP1CON2bits.ACKSTAT = 0;
 13079  0C1C  0024               	movlb	4	; select bank4
 13080  0C1D  1316               	bcf	22,6	;volatile
 13081                           
 13082                           ;i2c1.c: 438: I2C1_Stop(I2C1_DATA_NO_ACK);
 13083  0C1E  3005               	movlw	5
 13084  0C1F  3192  22D3         	fcall	_I2C1_Stop
 13085                           
 13086                           ;i2c1.c: 440: }
 13087  0C21  0008               	return
 13088  0C22                     i1l5887:	
 13089                           
 13090                           ;i2c1.c: 441: else
 13091                           ;i2c1.c: 442: {
 13092                           ;i2c1.c: 444: if(i2c_bytes_left-- == 0U)
 13093  0C22  3001               	movlw	1
 13094  0C23  0021               	movlb	1	; select bank1
 13095  0C24  02E8               	subwf	I2C1_ISR@i2c_bytes_left^(0+128),f
 13096  0C25  0A68               	incf	I2C1_ISR@i2c_bytes_left^(0+128),w
 13097  0C26  1D03               	btfss	3,2
 13098  0C27  2C3C               	goto	i1l5895
 13099                           
 13100                           ;i2c1.c: 445: {
 13101                           ;i2c1.c: 449: p_i2c1_trb_current++;
 13102  0C28  3005               	movlw	5
 13103  0C29  00F9               	movwf	??_I2C1_ISR
 13104  0C2A  0879               	movf	??_I2C1_ISR,w
 13105  0C2B  07EA               	addwf	_p_i2c1_trb_current^(0+128),f
 13106                           
 13107                           ;i2c1.c: 452: if(--i2c1_trb_count == 0)
 13108  0C2C  3001               	movlw	1
 13109  0C2D  02EB               	subwf	_i2c1_trb_count^(0+128),f
 13110  0C2E  1D03               	btfss	3,2
 13111  0C2F  2C34               	goto	i1l86
 13112                           
 13113                           ;i2c1.c: 453: {
 13114                           ;i2c1.c: 454: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 13115  0C30  3000               	movlw	0
 13116  0C31  3192  22D3         	fcall	_I2C1_Stop
 13117                           
 13118                           ;i2c1.c: 455: }
 13119  0C33  0008               	return
 13120  0C34                     i1l86:	
 13121                           
 13122                           ;i2c1.c: 456: else
 13123                           ;i2c1.c: 457: {
 13124                           ;i2c1.c: 464: SSP1CON2bits.RSEN = 1;
 13125  0C34  0024               	movlb	4	; select bank4
 13126  0C35  1496               	bsf	22,1	;volatile
 13127                           
 13128                           ;i2c1.c: 467: i2c1_state = S_MASTER_SEND_ADDR;
 13129  0C36  3002               	movlw	2
 13130  0C37  00F9               	movwf	??_I2C1_ISR
 13131  0C38  0879               	movf	??_I2C1_ISR,w
 13132  0C39  0021               	movlb	1	; select bank1
 13133  0C3A  00EC               	movwf	_i2c1_state^(0+128)
 13134                           
 13135                           ;i2c1.c: 469: }
 13136                           ;i2c1.c: 470: }
 13137  0C3B  0008               	return
 13138  0C3C                     i1l5895:	
 13139                           
 13140                           ;i2c1.c: 471: else
 13141                           ;i2c1.c: 472: {
 13142                           ;i2c1.c: 474: SSP1BUF = *pi2c_buf_ptr++;
 13143  0C3C  0022               	movlb	2	; select bank2
 13144  0C3D  0838               	movf	I2C1_ISR@pi2c_buf_ptr^(0+256),w
 13145  0C3E  0086               	movwf	6
 13146  0C3F  0839               	movf	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),w
 13147  0C40  0087               	movwf	7
 13148  0C41  0801               	movf	1,w
 13149  0C42  0024               	movlb	4	; select bank4
 13150  0C43  0091               	movwf	17	;volatile
 13151  0C44  3001               	movlw	1
 13152  0C45  0022               	movlb	2	; select bank2
 13153  0C46  07B8               	addwf	I2C1_ISR@pi2c_buf_ptr^(0+256),f
 13154  0C47  3000               	movlw	0
 13155  0C48  3DB9               	addwfc	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),f
 13156                           
 13157                           ;i2c1.c: 475: }
 13158                           ;i2c1.c: 476: }
 13159                           ;i2c1.c: 477: break;
 13160  0C49  0008               	return
 13161  0C4A                     i1l89:	
 13162                           ;i2c1.c: 479: case S_MASTER_ACK_ADDR:
 13163                           
 13164                           
 13165                           ;i2c1.c: 482: if(SSP1CON2bits.ACKSTAT)
 13166  0C4A  0024               	movlb	4	; select bank4
 13167  0C4B  1F16               	btfss	22,6	;volatile
 13168  0C4C  2C58               	goto	i1l90
 13169                           
 13170                           ;i2c1.c: 483: {
 13171                           ;i2c1.c: 486: i2c1_object.i2cErrors++;
 13172  0C4D  3001               	movlw	1
 13173  0C4E  00F9               	movwf	??_I2C1_ISR
 13174  0C4F  0879               	movf	??_I2C1_ISR,w
 13175  0C50  0021               	movlb	1	; select bank1
 13176  0C51  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13177                           
 13178                           ;i2c1.c: 489: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 13179  0C52  3004               	movlw	4
 13180  0C53  3192  22D3         	fcall	_I2C1_Stop
 13181                           
 13182                           ;i2c1.c: 492: SSP1CON2bits.ACKSTAT = 0;
 13183  0C55  0024               	movlb	4	; select bank4
 13184  0C56  1316               	bcf	22,6	;volatile
 13185                           
 13186                           ;i2c1.c: 493: }
 13187  0C57  0008               	return
 13188  0C58                     i1l90:	
 13189                           
 13190                           ;i2c1.c: 494: else
 13191                           ;i2c1.c: 495: {
 13192                           ;i2c1.c: 496: SSP1CON2bits.RCEN = 1;
 13193  0C58  1596               	bsf	22,3	;volatile
 13194                           
 13195                           ;i2c1.c: 497: i2c1_state = S_MASTER_ACK_RCV_DATA;
 13196  0C59  3008               	movlw	8
 13197  0C5A  00F9               	movwf	??_I2C1_ISR
 13198  0C5B  0879               	movf	??_I2C1_ISR,w
 13199  0C5C  0021               	movlb	1	; select bank1
 13200  0C5D  00EC               	movwf	_i2c1_state^(0+128)
 13201                           
 13202                           ;i2c1.c: 498: }
 13203                           ;i2c1.c: 499: break;
 13204  0C5E  0008               	return
 13205  0C5F                     i1l5907:	
 13206                           ;i2c1.c: 501: case S_MASTER_RCV_DATA:
 13207                           
 13208                           
 13209                           ;i2c1.c: 506: i2c1_state = S_MASTER_ACK_RCV_DATA;
 13210  0C5F  3008               	movlw	8
 13211  0C60  00F9               	movwf	??_I2C1_ISR
 13212  0C61  0879               	movf	??_I2C1_ISR,w
 13213  0C62  00EC               	movwf	_i2c1_state^(0+128)
 13214                           
 13215                           ;i2c1.c: 509: SSP1CON2bits.RCEN = 1;
 13216  0C63  0024               	movlb	4	; select bank4
 13217  0C64  1596               	bsf	22,3	;volatile
 13218                           
 13219                           ;i2c1.c: 511: break;
 13220  0C65  0008               	return
 13221  0C66                     i1l5911:	
 13222                           ;i2c1.c: 513: case S_MASTER_ACK_RCV_DATA:
 13223                           
 13224                           
 13225                           ;i2c1.c: 516: *pi2c_buf_ptr++ = SSP1BUF;
 13226  0C66  0022               	movlb	2	; select bank2
 13227  0C67  0838               	movf	I2C1_ISR@pi2c_buf_ptr^(0+256),w
 13228  0C68  0086               	movwf	6
 13229  0C69  0839               	movf	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),w
 13230  0C6A  0087               	movwf	7
 13231  0C6B  0024               	movlb	4	; select bank4
 13232  0C6C  0811               	movf	17,w	;volatile
 13233  0C6D  0081               	movwf	1
 13234  0C6E  3001               	movlw	1
 13235  0C6F  0022               	movlb	2	; select bank2
 13236  0C70  07B8               	addwf	I2C1_ISR@pi2c_buf_ptr^(0+256),f
 13237  0C71  3000               	movlw	0
 13238  0C72  3DB9               	addwfc	(I2C1_ISR@pi2c_buf_ptr+1)^(0+256),f
 13239                           
 13240                           ;i2c1.c: 519: if(--i2c_bytes_left)
 13241  0C73  3001               	movlw	1
 13242  0C74  0021               	movlb	1	; select bank1
 13243  0C75  02E8               	subwf	I2C1_ISR@i2c_bytes_left^(0+128),f
 13244  0C76  1903               	btfsc	3,2
 13245  0C77  2C80               	goto	i1l94
 13246                           
 13247                           ;i2c1.c: 520: {
 13248                           ;i2c1.c: 526: SSP1CON2bits.ACKDT = 0;
 13249  0C78  0024               	movlb	4	; select bank4
 13250  0C79  1296               	bcf	22,5	;volatile
 13251                           
 13252                           ;i2c1.c: 529: i2c1_state = S_MASTER_RCV_DATA;
 13253  0C7A  3006               	movlw	6
 13254  0C7B  00F9               	movwf	??_I2C1_ISR
 13255  0C7C  0879               	movf	??_I2C1_ISR,w
 13256  0C7D  0021               	movlb	1	; select bank1
 13257  0C7E  00EC               	movwf	_i2c1_state^(0+128)
 13258                           
 13259                           ;i2c1.c: 530: }
 13260  0C7F  2C84               	goto	i1l5923
 13261  0C80                     i1l94:	
 13262                           
 13263                           ;i2c1.c: 531: else
 13264                           ;i2c1.c: 532: {
 13265                           ;i2c1.c: 536: SSP1CON2bits.ACKDT = 1;
 13266  0C80  0024               	movlb	4	; select bank4
 13267  0C81  1696               	bsf	22,5	;volatile
 13268                           
 13269                           ;i2c1.c: 538: I2C1_FunctionComplete();
 13270  0C82  3192  2276         	fcall	_I2C1_FunctionComplete
 13271  0C84                     i1l5923:	
 13272                           
 13273                           ;i2c1.c: 539: }
 13274                           ;i2c1.c: 542: SSP1CON2bits.ACKEN = 1;
 13275  0C84  0024               	movlb	4	; select bank4
 13276  0C85  1616               	bsf	22,4	;volatile
 13277                           
 13278                           ;i2c1.c: 543: break;
 13279  0C86  0008               	return
 13280  0C87                     i1l5925:	
 13281                           ;i2c1.c: 545: case S_MASTER_RCV_STOP:
 13282                           
 13283                           
 13284                           ;i2c1.c: 546: case S_MASTER_SEND_STOP:
 13285                           ;i2c1.c: 549: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 13286  0C87  3000               	movlw	0
 13287  0C88  3192  22D3         	fcall	_I2C1_Stop
 13288                           
 13289                           ;i2c1.c: 550: break;
 13290  0C8A  0008               	return
 13291  0C8B                     i1l5927:	
 13292                           ;i2c1.c: 552: default:
 13293                           
 13294                           
 13295                           ;i2c1.c: 556: i2c1_object.i2cErrors++;
 13296  0C8B  3001               	movlw	1
 13297  0C8C  00F9               	movwf	??_I2C1_ISR
 13298  0C8D  0879               	movf	??_I2C1_ISR,w
 13299  0C8E  0021               	movlb	1	; select bank1
 13300  0C8F  07DD               	addwf	(_i2c1_object^(0+128)+4),f
 13301                           
 13302                           ;i2c1.c: 557: I2C1_Stop(I2C1_LOST_STATE);
 13303  0C90  3006               	movlw	6
 13304  0C91  3192  22D3         	fcall	_I2C1_Stop
 13305                           
 13306                           ;i2c1.c: 560: }
 13307                           
 13308                           ;i2c1.c: 558: break;
 13309  0C93  0008               	return
 13310  0C94                     i1l5933:	
 13311  0C94  0021               	movlb	1	; select bank1
 13312  0C95  086C               	movf	_i2c1_state^(0+128),w
 13313                           
 13314                           ; Switch size 1, requested type "space"
 13315                           ; Number of cases is 11, Range of values is 0 to 11
 13316                           ; switch strategies available:
 13317                           ; Name         Instructions Cycles
 13318                           ; direct_byte           30     6 (fixed)
 13319                           ; simple_byte           34    18 (average)
 13320                           ; jumptable            260     6 (fixed)
 13321                           ;	Chosen strategy is direct_byte
 13322  0C96  0084               	movwf	4
 13323  0C97  300C               	movlw	12
 13324  0C98  0204               	subwf	4,w
 13325  0C99  1803               	skipnc
 13326  0C9A  2C8B               	goto	i1l5927
 13327  0C9B  3191               	movlp	high i1S6183
 13328  0C9C  3504               	lslf	4,w
 13329  0C9D  3EB0               	addlw	low i1S6183
 13330  0C9E  0082               	movwf	2
 13331  0C9F  0008               	return
 13332  0CA0                     __end_of_I2C1_ISR:	
 13333                           
 13334                           	psect	swtext1
 13335  11B0                     __pswtext1:	
 13336  11B0                     i1S6183:	
 13337  11B0  318B  2B5D         	ljmp	i1l60
 13338  11B2  318B  2B8B         	ljmp	i1l65
 13339  11B4  318B  2BE2         	ljmp	i1l5855
 13340  11B6  318C  2C14         	ljmp	i1l82
 13341  11B8  318C  2C87         	ljmp	i1l5925
 13342  11BA  318C  2C4A         	ljmp	i1l89
 13343  11BC  318C  2C5F         	ljmp	i1l5907
 13344  11BE  318C  2C87         	ljmp	i1l5925
 13345  11C0  318C  2C66         	ljmp	i1l5911
 13346  11C2  318C  2C8B         	ljmp	i1l5927
 13347  11C4  318B  2B93         	ljmp	i1l66
 13348  11C6  318B  2BB8         	ljmp	i1l71
 13349                           
 13350                           	psect	text64
 13351  12D3                     __ptext64:	
 13352 ;; *************** function _I2C1_Stop *****************
 13353 ;; Defined at:
 13354 ;;		line 581 in file "mcc_generated_files/i2c1.c"
 13355 ;; Parameters:    Size  Location     Type
 13356 ;;  completion_c    1    wreg     enum E2972
 13357 ;; Auto vars:     Size  Location     Type
 13358 ;;  completion_c    1    1[COMMON] enum E2972
 13359 ;; Return value:  Size  Location     Type
 13360 ;;                  1    wreg      void 
 13361 ;; Registers used:
 13362 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13363 ;; Tracked objects:
 13364 ;;		On entry : 0/0
 13365 ;;		On exit  : 0/0
 13366 ;;		Unchanged: 0/0
 13367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13369 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13370 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13371 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13372 ;;Total ram usage:        2 bytes
 13373 ;; Hardware stack levels used:    1
 13374 ;; This function calls:
 13375 ;;		Nothing
 13376 ;; This function is called by:
 13377 ;;		_I2C1_ISR
 13378 ;; This function uses a non-reentrant model
 13379 ;;
 13380                           
 13381                           
 13382                           ;psect for function _I2C1_Stop
 13383  12D3                     _I2C1_Stop:	
 13384                           
 13385                           ;incstack = 0
 13386                           ; Regs used in _I2C1_Stop: [wreg+fsr1l+fsr1h+status,2+status,0]
 13387                           ;I2C1_Stop@completion_code stored from wreg
 13388  12D3  00F8               	movwf	I2C1_Stop@completion_code
 13389                           
 13390                           ;i2c1.c: 584: SSP1CON2bits.PEN = 1;
 13391  12D4  0024               	movlb	4	; select bank4
 13392  12D5  1516               	bsf	22,2	;volatile
 13393                           
 13394                           ;i2c1.c: 587: if (p_i2c1_current->pTrFlag != (0))
 13395  12D6  0021               	movlb	1	; select bank1
 13396  12D7  0869               	movf	_p_i2c1_current^(0+128),w
 13397  12D8  3E02               	addlw	2
 13398  12D9  0086               	movwf	6
 13399  12DA  3001               	movlw	1	; select bank2/3
 13400  12DB  0087               	movwf	7
 13401  12DC  0801               	movf	1,w
 13402  12DD  1903               	btfsc	3,2
 13403  12DE  2AEB               	goto	i1l5643
 13404                           
 13405                           ;i2c1.c: 588: {
 13406                           ;i2c1.c: 590: *(p_i2c1_current->pTrFlag) = completion_code;
 13407  12DF  0878               	movf	I2C1_Stop@completion_code,w
 13408  12E0  00F7               	movwf	??_I2C1_Stop
 13409  12E1  0869               	movf	_p_i2c1_current^(0+128),w
 13410  12E2  3E02               	addlw	2
 13411  12E3  0086               	movwf	6
 13412  12E4  3001               	movlw	1	; select bank2/3
 13413  12E5  0087               	movwf	7
 13414  12E6  0801               	movf	1,w
 13415  12E7  0086               	movwf	6
 13416  12E8  0187               	clrf	7
 13417  12E9  0877               	movf	??_I2C1_Stop,w
 13418  12EA  0081               	movwf	1
 13419  12EB                     i1l5643:	
 13420                           
 13421                           ;i2c1.c: 591: }
 13422                           ;i2c1.c: 594: i2c1_state = S_MASTER_IDLE;
 13423  12EB  01EC               	clrf	_i2c1_state^(0+128)
 13424  12EC  0008               	return
 13425  12ED                     __end_of_I2C1_Stop:	
 13426                           
 13427                           	psect	text65
 13428  1276                     __ptext65:	
 13429 ;; *************** function _I2C1_FunctionComplete *****************
 13430 ;; Defined at:
 13431 ;;		line 563 in file "mcc_generated_files/i2c1.c"
 13432 ;; Parameters:    Size  Location     Type
 13433 ;;		None
 13434 ;; Auto vars:     Size  Location     Type
 13435 ;;		None
 13436 ;; Return value:  Size  Location     Type
 13437 ;;                  1    wreg      void 
 13438 ;; Registers used:
 13439 ;;		wreg, status,2, status,0
 13440 ;; Tracked objects:
 13441 ;;		On entry : 0/0
 13442 ;;		On exit  : 0/0
 13443 ;;		Unchanged: 0/0
 13444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13447 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13448 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13449 ;;Total ram usage:        1 bytes
 13450 ;; Hardware stack levels used:    1
 13451 ;; This function calls:
 13452 ;;		Nothing
 13453 ;; This function is called by:
 13454 ;;		_I2C1_ISR
 13455 ;; This function uses a non-reentrant model
 13456 ;;
 13457                           
 13458                           
 13459                           ;psect for function _I2C1_FunctionComplete
 13460  1276                     _I2C1_FunctionComplete:	
 13461                           
 13462                           ;i2c1.c: 567: p_i2c1_trb_current++;
 13463                           
 13464                           ;incstack = 0
 13465                           ; Regs used in _I2C1_FunctionComplete: [wreg+status,2+status,0]
 13466  1276  3005               	movlw	5
 13467  1277  00F7               	movwf	??_I2C1_FunctionComplete
 13468  1278  0877               	movf	??_I2C1_FunctionComplete,w
 13469  1279  0021               	movlb	1	; select bank1
 13470  127A  07EA               	addwf	_p_i2c1_trb_current^(0+128),f
 13471                           
 13472                           ;i2c1.c: 570: if(--i2c1_trb_count == 0)
 13473  127B  3001               	movlw	1
 13474  127C  02EB               	subwf	_i2c1_trb_count^(0+128),f
 13475  127D  1D03               	btfss	3,2
 13476  127E  2A84               	goto	i1l101
 13477                           
 13478                           ;i2c1.c: 571: {
 13479                           ;i2c1.c: 572: i2c1_state = S_MASTER_SEND_STOP;
 13480  127F  3004               	movlw	4
 13481  1280  00F7               	movwf	??_I2C1_FunctionComplete
 13482  1281  0877               	movf	??_I2C1_FunctionComplete,w
 13483  1282  00EC               	movwf	_i2c1_state^(0+128)
 13484                           
 13485                           ;i2c1.c: 573: }
 13486  1283  0008               	return
 13487  1284                     i1l101:	
 13488                           
 13489                           ;i2c1.c: 574: else
 13490                           ;i2c1.c: 575: {
 13491                           ;i2c1.c: 576: i2c1_state = S_MASTER_RESTART;
 13492  1284  01EC               	clrf	_i2c1_state^(0+128)
 13493  1285  0AEC               	incf	_i2c1_state^(0+128),f
 13494  1286  0008               	return
 13495  1287                     __end_of_I2C1_FunctionComplete:	
 13496                           
 13497                           	psect	text66
 13498  0801                     __ptext66:	
 13499 ;; *************** function _I2C1_BusCollisionISR *****************
 13500 ;; Defined at:
 13501 ;;		line 728 in file "mcc_generated_files/i2c1.c"
 13502 ;; Parameters:    Size  Location     Type
 13503 ;;		None
 13504 ;; Auto vars:     Size  Location     Type
 13505 ;;		None
 13506 ;; Return value:  Size  Location     Type
 13507 ;;                  1    wreg      void 
 13508 ;; Registers used:
 13509 ;;		None
 13510 ;; Tracked objects:
 13511 ;;		On entry : 0/0
 13512 ;;		On exit  : 0/0
 13513 ;;		Unchanged: 0/0
 13514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;Total ram usage:        0 bytes
 13520 ;; Hardware stack levels used:    1
 13521 ;; This function calls:
 13522 ;;		Nothing
 13523 ;; This function is called by:
 13524 ;;		_INTERRUPT_InterruptManager
 13525 ;; This function uses a non-reentrant model
 13526 ;;
 13527                           
 13528                           
 13529                           ;psect for function _I2C1_BusCollisionISR
 13530  0801                     _I2C1_BusCollisionISR:	
 13531                           
 13532                           ;incstack = 0
 13533                           ; Regs used in _I2C1_BusCollisionISR: []
 13534  0801  0008               	return
 13535  0802                     __end_of_I2C1_BusCollisionISR:	
 13536                           
 13537                           	psect	text67
 13538  133E                     __ptext67:	
 13539 ;; *************** function _EUSART_Transmit_ISR *****************
 13540 ;; Defined at:
 13541 ;;		line 165 in file "mcc_generated_files/eusart.c"
 13542 ;; Parameters:    Size  Location     Type
 13543 ;;		None
 13544 ;; Auto vars:     Size  Location     Type
 13545 ;;		None
 13546 ;; Return value:  Size  Location     Type
 13547 ;;                  1    wreg      void 
 13548 ;; Registers used:
 13549 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13550 ;; Tracked objects:
 13551 ;;		On entry : 0/0
 13552 ;;		On exit  : 0/0
 13553 ;;		Unchanged: 0/0
 13554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13557 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13559 ;;Total ram usage:        1 bytes
 13560 ;; Hardware stack levels used:    1
 13561 ;; This function calls:
 13562 ;;		Nothing
 13563 ;; This function is called by:
 13564 ;;		_INTERRUPT_InterruptManager
 13565 ;; This function uses a non-reentrant model
 13566 ;;
 13567                           
 13568                           
 13569                           ;psect for function _EUSART_Transmit_ISR
 13570  133E                     _EUSART_Transmit_ISR:	
 13571                           
 13572                           ;eusart.c: 169: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 13573                           
 13574                           ;incstack = 0
 13575                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13576  133E  3040               	movlw	64
 13577  133F  0274               	subwf	_eusartTxBufferRemaining,w	;volatile
 13578  1340  1803               	skipnc
 13579  1341  2B57               	goto	i1l256
 13580                           
 13581                           ;eusart.c: 170: {
 13582                           ;eusart.c: 171: TXREG = eusartTxBuffer[eusartTxTail++];
 13583  1342  0875               	movf	_eusartTxTail,w
 13584  1343  3EA0               	addlw	(low (_eusartTxBuffer| (0+512)))& (0+255)
 13585  1344  0086               	movwf	6
 13586  1345  3002               	movlw	2	; select bank5/6
 13587  1346  0087               	movwf	7
 13588  1347  0801               	movf	1,w
 13589  1348  0023               	movlb	3	; select bank3
 13590  1349  009A               	movwf	26	;volatile
 13591  134A  3001               	movlw	1
 13592  134B  00F7               	movwf	??_EUSART_Transmit_ISR
 13593  134C  0877               	movf	??_EUSART_Transmit_ISR,w
 13594  134D  07F5               	addwf	_eusartTxTail,f	;volatile
 13595                           
 13596                           ;eusart.c: 172: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 13597  134E  3040               	movlw	64
 13598  134F  0275               	subwf	_eusartTxTail,w	;volatile
 13599  1350  1803               	btfsc	3,0
 13600                           
 13601                           ;eusart.c: 173: {
 13602                           ;eusart.c: 174: eusartTxTail = 0;
 13603  1351  01F5               	clrf	_eusartTxTail	;volatile
 13604                           
 13605                           ;eusart.c: 175: }
 13606                           ;eusart.c: 176: eusartTxBufferRemaining++;
 13607  1352  3001               	movlw	1
 13608  1353  00F7               	movwf	??_EUSART_Transmit_ISR
 13609  1354  0877               	movf	??_EUSART_Transmit_ISR,w
 13610  1355  07F4               	addwf	_eusartTxBufferRemaining,f	;volatile
 13611                           
 13612                           ;eusart.c: 177: }
 13613  1356  0008               	return
 13614  1357                     i1l256:	
 13615                           
 13616                           ;eusart.c: 178: else
 13617                           ;eusart.c: 179: {
 13618                           ;eusart.c: 180: PIE1bits.TXIE = 0;
 13619  1357  0021               	movlb	1	; select bank1
 13620  1358  1211               	bcf	17,4	;volatile
 13621  1359  0008               	return
 13622  135A                     __end_of_EUSART_Transmit_ISR:	
 13623                           
 13624                           	psect	text68
 13625  1322                     __ptext68:	
 13626 ;; *************** function _EUSART_Receive_ISR *****************
 13627 ;; Defined at:
 13628 ;;		line 184 in file "mcc_generated_files/eusart.c"
 13629 ;; Parameters:    Size  Location     Type
 13630 ;;		None
 13631 ;; Auto vars:     Size  Location     Type
 13632 ;;		None
 13633 ;; Return value:  Size  Location     Type
 13634 ;;                  1    wreg      void 
 13635 ;; Registers used:
 13636 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13637 ;; Tracked objects:
 13638 ;;		On entry : 0/0
 13639 ;;		On exit  : 0/0
 13640 ;;		Unchanged: 0/0
 13641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13644 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13645 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13646 ;;Total ram usage:        1 bytes
 13647 ;; Hardware stack levels used:    1
 13648 ;; This function calls:
 13649 ;;		Nothing
 13650 ;; This function is called by:
 13651 ;;		_INTERRUPT_InterruptManager
 13652 ;; This function uses a non-reentrant model
 13653 ;;
 13654                           
 13655                           
 13656                           ;psect for function _EUSART_Receive_ISR
 13657  1322                     _EUSART_Receive_ISR:	
 13658                           
 13659                           ;eusart.c: 187: if(1 == RCSTAbits.OERR)
 13660                           
 13661                           ;incstack = 0
 13662                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 13663  1322  0023               	movlb	3	; select bank3
 13664  1323  1C9D               	btfss	29,1	;volatile
 13665  1324  2B27               	goto	i1l5955
 13666                           
 13667                           ;eusart.c: 188: {
 13668                           ;eusart.c: 191: RCSTAbits.CREN = 0;
 13669  1325  121D               	bcf	29,4	;volatile
 13670                           
 13671                           ;eusart.c: 192: RCSTAbits.CREN = 1;
 13672  1326  161D               	bsf	29,4	;volatile
 13673  1327                     i1l5955:	
 13674                           
 13675                           ;eusart.c: 193: }
 13676                           ;eusart.c: 196: eusartRxBuffer[eusartRxHead++] = RCREG;
 13677  1327  0819               	movf	25,w	;volatile
 13678  1328  00F7               	movwf	??_EUSART_Receive_ISR
 13679  1329  0873               	movf	_eusartRxHead,w
 13680  132A  3E20               	addlw	(low (_eusartRxBuffer| (0+768)))& (0+255)
 13681  132B  0086               	movwf	6
 13682  132C  3003               	movlw	3	; select bank6/7
 13683  132D  0087               	movwf	7
 13684  132E  0877               	movf	??_EUSART_Receive_ISR,w
 13685  132F  0081               	movwf	1
 13686  1330  3001               	movlw	1
 13687  1331  00F7               	movwf	??_EUSART_Receive_ISR
 13688  1332  0877               	movf	??_EUSART_Receive_ISR,w
 13689  1333  07F3               	addwf	_eusartRxHead,f	;volatile
 13690                           
 13691                           ;eusart.c: 197: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 13692  1334  3040               	movlw	64
 13693  1335  0273               	subwf	_eusartRxHead,w	;volatile
 13694  1336  1803               	btfsc	3,0
 13695                           
 13696                           ;eusart.c: 198: {
 13697                           ;eusart.c: 199: eusartRxHead = 0;
 13698  1337  01F3               	clrf	_eusartRxHead	;volatile
 13699                           
 13700                           ;eusart.c: 200: }
 13701                           ;eusart.c: 201: eusartRxCount++;
 13702  1338  3001               	movlw	1
 13703  1339  00F7               	movwf	??_EUSART_Receive_ISR
 13704  133A  0877               	movf	??_EUSART_Receive_ISR,w
 13705  133B  0021               	movlb	1	; select bank1
 13706  133C  07E6               	addwf	_eusartRxCount^(0+128),f	;volatile
 13707  133D  0008               	return
 13708  133E                     __end_of_EUSART_Receive_ISR:	
 13709  007E                     btemp	set	126	;btemp
 13710  007E                     int$flags	set	126
 13711  007E                     wtemp0	set	126


Data Sizes:
    Strings     421
    Constant    11
    Data        5
    BSS         333
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      14
    BANK0            80     75      79
    BANK1            80     57      79
    BANK2            80      0      69
    BANK3            80      0      44
    BANK4            80      0      64
    BANK5            80      0      64
    BANK6            80      0      64
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           16      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    i2c1_tr_queue.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    i2c1_tr_queue.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    PROTOCOL_Extension_Handler$0	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    data	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strncmp@s2	PTR const unsigned char  size(2) Largest target is 192
		 -> buf(BANK4[48]), cmd_buf(BIGRAM[192]), 

    strncmp@s1	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_44(CODE[4]), STR_43(CODE[4]), 
		 -> STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), STR_36(CODE[4]), 
		 -> STR_32(CODE[4]), STR_31(CODE[4]), STR_26(CODE[4]), STR_24(CODE[4]), 
		 -> STR_22(CODE[4]), STR_21(CODE[4]), STR_20(CODE[4]), STR_10(CODE[4]), 
		 -> STR_9(CODE[4]), STR_6(CODE[4]), STR_5(CODE[4]), STR_4(CODE[4]), 
		 -> STR_1(CODE[4]), 

    strcpy@from	PTR const unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 192
		 -> buf(BANK4[48]), cmd_buf(BIGRAM[192]), 

    sp__PROTOCOL_I2C_SEN	PTR unsigned char  size(2) Largest target is 16
		 -> type_no_data(BANK2[1]), PROTOCOL_Send_uint8_t@pbuf(BANK2[1]), sendbuf(BANK4[16]), readbuf.length(BANK2[1]), 
		 -> readbuf.type(BANK2[1]), readbuf(BANK2[6]), 

    PROTOCOL_Print_TLV@pbuffer	PTR unsigned char  size(1) Largest target is 16
		 -> read_buf(BANK3[16]), NULL(NULL[0]), 

    PROTOCOL_EXT@char_buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    PROTOCOL_Set_Tick_Handler@tick_handler	PTR void  size(2) Largest target is 1
		 -> tick_handler(), 

    PROTOCOL_Tick_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), tick_handler(), 

    PROTOCOL_Set_Extension_Handler@extension_handler	PTR void  size(2) Largest target is 1
		 -> command_handler(), 

    PROTOCOL_Extension_Handler	PTR FTN(PTR unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), command_handler(), 

    PROTOCOL_Loop_Func	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    PROTOCOL_Initialize@inv_handler	PTR void  size(2) Largest target is 1
		 -> inv_handler(), 

    PROTOCOL_Inv_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), inv_handler(), 

    PROTOCOL_Initialize@set_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Set_Handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@stop_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Stop_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@start_handler	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    PROTOCOL_Start_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), NULL(NULL[0]), 

    PROTOCOL_Initialize@device_id	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_33(CODE[17]), 

    device_id_	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), STR_33(CODE[17]), 

    S1052$pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK2[1]), sendbuf(BANK4[16]), 

    readbuf.pbuffer	PTR unsigned char  size(2) Largest target is 16
		 -> PROTOCOL_Send_uint8_t@pbuf(BANK2[1]), sendbuf(BANK4[16]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 8192
		 -> STR_42(CODE[4]), buf(BANK4[48]), STR_34(CODE[7]), ROM(CODE[8192]), 
		 -> printf@c(BANK0[1]), STR_33(CODE[17]), I2C1_ISR@i2c_address(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_80(CODE[10]), STR_79(CODE[9]), STR_78(CODE[10]), STR_77(CODE[9]), 
		 -> STR_76(CODE[4]), STR_75(CODE[4]), STR_74(CODE[4]), STR_73(CODE[4]), 
		 -> STR_72(CODE[4]), STR_71(CODE[4]), STR_70(CODE[4]), STR_69(CODE[4]), 
		 -> STR_68(CODE[14]), STR_67(CODE[9]), STR_66(CODE[10]), STR_65(CODE[9]), 
		 -> STR_64(CODE[10]), STR_63(CODE[9]), STR_62(CODE[7]), STR_61(CODE[4]), 
		 -> STR_60(CODE[4]), STR_59(CODE[9]), STR_58(CODE[4]), STR_57(CODE[4]), 
		 -> STR_56(CODE[10]), STR_55(CODE[4]), STR_54(CODE[4]), STR_53(CODE[8]), 
		 -> STR_52(CODE[4]), STR_51(CODE[4]), STR_50(CODE[9]), STR_49(CODE[6]), 
		 -> STR_48(CODE[10]), STR_45(CODE[10]), STR_41(CODE[10]), STR_37(CODE[10]), 
		 -> STR_35(CODE[5]), STR_30(CODE[4]), STR_29(CODE[4]), STR_28(CODE[4]), 
		 -> STR_27(CODE[7]), STR_25(CODE[26]), STR_23(CODE[26]), STR_19(CODE[22]), 
		 -> STR_18(CODE[22]), STR_17(CODE[26]), STR_16(CODE[22]), STR_15(CODE[4]), 
		 -> STR_14(CODE[4]), STR_13(CODE[7]), STR_12(CODE[25]), STR_11(CODE[10]), 
		 -> STR_8(CODE[12]), STR_7(CODE[11]), STR_3(CODE[3]), STR_2(CODE[10]), 

    printf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    i2c1_read@pbuf	PTR unsigned char  size(2) Largest target is 16
		 -> sen@length(BANK0[1]), sen@type(BANK0[1]), read_buf(BANK3[16]), exec_remote_cmd@data(BANK1[1]), 

    i2c1_write@pbuf	PTR unsigned char  size(1) Largest target is 50
		 -> exec_remote_cmd@send_buf(BANK1[50]), 

    command_handler@buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    put_cmd@buf	PTR unsigned char  size(1) Largest target is 48
		 -> buf(BANK4[48]), 

    fetch@sch	PTR unsigned char  size(1) Largest target is 28
		 -> schedule(BANK3[28]), 

    exec_remote_cmd@buf	PTR unsigned char  size(2) Largest target is 192
		 -> cmd_buf(BIGRAM[192]), 

    I2C1_MasterWriteTRBBuild@pdata	PTR unsigned char  size(1) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), exec_remote_cmd@send_buf(BANK1[50]), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterWriteTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterWrite@trBlock(BANK2[5]), 

    I2C1_MasterReadTRBBuild@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> sen@length(BANK0[1]), sen@type(BANK0[1]), read_buf(BANK3[16]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterReadTRBBuild@ptrb	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), 

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    i2c1_object.pTrTail.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    I2C1_MasterTRBInsert@ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    I2C1_MasterTRBInsert@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    I2C1_MasterRead@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_read@status(BANK0[1]), 

    I2C1_MasterRead@pdata	PTR unsigned char  size(2) Largest target is 16
		 -> sen@length(BANK0[1]), sen@type(BANK0[1]), read_buf(BANK3[16]), exec_remote_cmd@data(BANK1[1]), 

    F3084.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_MasterWrite@pflag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    I2C1_MasterWrite@pdata	PTR unsigned char  size(1) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), exec_remote_cmd@send_buf(BANK1[50]), 

    F3079.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), I2C1_ISR@i2c_address(BANK0[2]), 
		 -> NULL(NULL[0]), 

    S19$pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 50
		 -> i2c1_write_no_data@buf(BANK0[1]), i2c1_read@reg(BANK0[1]), sen@length(BANK0[1]), sen@type(BANK0[1]), 
		 -> read_buf(BANK3[16]), exec_remote_cmd@send_buf(BANK1[50]), exec_remote_cmd@data(BANK1[1]), 

    p_i2c1_trb_current	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    S31$pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    p_i2c1_current.pTrFlag	PTR enum E2972 size(1) Largest target is 1
		 -> i2c1_write_no_data@status(BANK0[1]), i2c1_read@status(BANK0[1]), i2c1_write@status(BANK0[1]), 

    S31$ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    p_i2c1_current.ptrb_list	PTR struct . size(1) Largest target is 5
		 -> I2C1_MasterRead@trBlock(BANK2[5]), I2C1_MasterWrite@trBlock(BANK2[5]), 

    p_i2c1_current	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), NULL(NULL[0]), 

    S42$pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 

    i2c1_object.pTrHead	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 

    S42$pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 

    i2c1_object.pTrTail	PTR struct . size(1) Largest target is 5
		 -> i2c1_tr_queue(BANK2[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_I2C1_ISR
    _I2C1_ISR->_I2C1_Stop

Critical Paths under _main in BANK0

    _main->_PROTOCOL_Loop
    _init->___awdiv
    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_I2C1_Initialize
    _PROTOCOL_Loop->_PROTOCOL_EXT
    _tick_handler->_exec_remote_cmd
    _exec_remote_cmd->_printf
    _i2c1_write->_I2C1_MasterWrite
    _check_plg->_scan_dev
    _scan_dev->_i2c1_read
    _del_dev->___awdiv
    _add_dev->___awdiv
    _inv_handler->_fetch
    _fetch->_sen
    _PROTOCOL_Write_Device_Address->_DATAEE_WriteByte
    _PROTOCOL_SAV->_DATAEE_WriteByte
    _PROTOCOL_EXT->_command_handler
    _command_handler->_one_shot_sen
    _put_cmd->_strcpy
    _strcpy->___wmul
    _print_dev_map->_printf
    _one_shot_sen->_sen
    _sen->_PROTOCOL_Print_TLV
    _i2c1_write_no_data->_I2C1_MasterWrite
    _i2c1_read->_I2C1_MasterRead
    _I2C1_MasterWrite->_I2C1_MasterWriteTRBBuild
    _I2C1_MasterRead->_I2C1_MasterReadTRBBuild
    _PROTOCOL_Print_TLV->_printf
    _printf->___lwmod
    _putch->_EUSART_Write
    ___lwmod->___lwdiv
    _abs->___awmod
    _detected->___awdiv
    _atoi->___wmul
    _PROTOCOL_Initialize->_DATAEE_ReadByte

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _tick_handler->_exec_remote_cmd

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  196132
                _PROTOCOL_Initialize
                      _PROTOCOL_Loop
     _PROTOCOL_Set_Extension_Handler
          _PROTOCOL_Set_Tick_Handler
                  _SYSTEM_Initialize
                               _init
 ---------------------------------------------------------------------------------
 (1) _init                                                11    11      0    4371
                                              9 BANK0      9     9      0
                    _DATAEE_ReadByte
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
                    _I2C1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C1_Initialize                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Tick_Handler                            2     0      2     108
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Set_Extension_Handler                       2     0      2     108
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Loop                                        4     4      0  190866
                                             71 BANK0      4     4      0
                   Absolute function *
                        _EUSART_Read
                       _PROTOCOL_EXT
       _PROTOCOL_Read_Device_Address
                       _PROTOCOL_SAV
                       _PROTOCOL_SET
                       _PROTOCOL_STA
                       _PROTOCOL_STP
      _PROTOCOL_Write_Device_Address
            _TMR0_HasOverflowOccured
                               _atoi
                        _inv_handler *
                             _printf
                            _strncmp
                       _tick_handler *
 ---------------------------------------------------------------------------------
 (2) _tick_handler                                         1     1      0   58826
                                             41 BANK0      1     1      0
                            ___lwmod
                          _check_plg
                    _exec_remote_cmd
                           _scan_dev
 ---------------------------------------------------------------------------------
 (3) _exec_remote_cmd                                     62    62      0   29723
                                             36 BANK0      5     5      0
                                              0 BANK1     57    57      0
                             ___wmul
                               _atoi
                          _i2c1_read
                         _i2c1_write
                 _i2c1_write_no_data
                             _printf
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _i2c1_write                                           8     4      4    2378
                                             14 BANK0      8     4      4
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (3) _check_plg                                            3     3      0   15609
                                             32 BANK0      3     3      0
                 _i2c1_write_no_data
                           _scan_dev
 ---------------------------------------------------------------------------------
 (3) _scan_dev                                             5     5      0   12030
                                             27 BANK0      5     5      0
                            _add_dev
                            _del_dev
                          _i2c1_read
 ---------------------------------------------------------------------------------
 (4) _del_dev                                              8     8      0    3102
                                              9 BANK0      8     8      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) _add_dev                                              8     8      0    3102
                                              9 BANK0      8     8      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) _inv_handler                                          2     2      0   42992
                            ___lwmod
                              _fetch
 ---------------------------------------------------------------------------------
 (3) _fetch                                                7     7      0   41528
                                             54 BANK0      7     7      0
                           _detected
                 _i2c1_write_no_data
                             _printf
                                _sen
 ---------------------------------------------------------------------------------
 (2) _TMR0_HasOverflowOccured                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Write_Device_Address                        2     2      0     469
                                              3 BANK0      2     2      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STP                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_STA                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SET                                         2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_SAV                                         1     1      0     407
                                              3 BANK0      1     1      0
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_Read_Device_Address                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PROTOCOL_EXT                                         2     2      0   71900
                                             69 BANK0      2     2      0
                   Absolute function *
                    _command_handler *
 ---------------------------------------------------------------------------------
 (3) _command_handler                                     10     9      1   71803
                                             59 BANK0     10     9      1
                   _DATAEE_WriteByte
                            ___awdiv
                               _atoi
                       _one_shot_sen
                      _print_dev_map
                             _printf
                            _put_cmd
                            _strncmp
 ---------------------------------------------------------------------------------
 (4) _strncmp                                              8     2      6    5043
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (4) _put_cmd                                              6     6      0    1534
                                             12 BANK0      6     6      0
                             ___wmul
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     3      3     263
                                              6 BANK0      6     3      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _print_dev_map                                        4     4      0    9000
                                             36 BANK0      4     4      0
                   _dev_map_iterator
                             _printf
 ---------------------------------------------------------------------------------
 (5) _dev_map_iterator                                     8     8      0      37
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _one_shot_sen                                         5     5      0   41133
                                             54 BANK0      5     5      0
                           _detected
                 _i2c1_write_no_data
                             _printf
                                _sen
 ---------------------------------------------------------------------------------
 (4) _sen                                                 11    11      0   25625
                                             45 BANK0      9     9      0
                 _PROTOCOL_Print_TLV
                          _i2c1_read
                 _i2c1_write_no_data
 ---------------------------------------------------------------------------------
 (4) _i2c1_write_no_data                                   7     4      3    3545
                                             14 BANK0      7     4      3
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (4) _i2c1_read                                           11     5      6    5600
                                             16 BANK0     11     5      6
                    _I2C1_MasterRead
                   _I2C1_MasterWrite
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterWrite                                     7     3      4    1891
                                              7 BANK0      7     3      4
               _I2C1_MasterTRBInsert
           _I2C1_MasterWriteTRBBuild
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterWriteTRBBuild                             7     3      4     450
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _I2C1_MasterRead                                      8     2      6    1398
                                              8 BANK0      8     2      6
            _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterTRBInsert                                 4     2      2     494
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (6) _I2C1_MasterReadTRBBuild                              8     3      5     481
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (5) _PROTOCOL_Print_TLV                                   9     6      3   15957
                                             36 BANK0      9     6      3
                            ___awdiv
                            ___awmod
                                _abs
                             _concat
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              26    20      6    8858
                                             14 BANK0     22    16      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                                _abs (ARG)
                             _concat (ARG)
                   _dev_map_iterator (ARG)
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0      93
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART_Write                                         2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4    1464
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     395
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _concat                                               8     6      2     524
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     629
                                              7 BANK0      4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              7     3      4    1505
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _detected                                             7     7      0    2916
                                              9 BANK0      7     7      0
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    2749
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 7     5      2    2170
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1198
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     407
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) Absolute function(Fake)                               1     0      1       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          2     2      0      37
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _PROTOCOL_Initialize                                 10     2      8     679
                                              1 BANK0     10     2      8
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0      31
                                              6 COMMON     1     1      0
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
               _I2C1_BusCollisionISR
                           _I2C1_ISR
 ---------------------------------------------------------------------------------
 (11) _I2C1_ISR                                            4     4      0      31
                                              2 COMMON     4     4      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (12) _I2C1_Stop                                           2     2      0      31
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _I2C1_FunctionComplete                               1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _I2C1_BusCollisionISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _EUSART_Receive_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _PROTOCOL_Initialize
     _DATAEE_ReadByte
   _PROTOCOL_Loop
     Absolute function(Fake) *
     _EUSART_Read *
     _PROTOCOL_EXT *
       Absolute function(Fake) *
       _command_handler *
         _DATAEE_WriteByte
         ___awdiv
         _atoi
           ___wmul
           _isdigit
         _one_shot_sen
           _detected
             ___awdiv
           _i2c1_write_no_data
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
           _printf
             ___awdiv (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _abs (ARG)
               ___awmod (ARG)
             _concat (ARG)
             _dev_map_iterator (ARG)
             _isdigit (ARG)
             _putch (ARG)
               _EUSART_Write
           _sen
             _PROTOCOL_Print_TLV
               ___awdiv
               ___awmod
               _abs
                 ___awmod (ARG)
               _concat
               _printf
                 ___awdiv (ARG)
                 ___awmod (ARG)
                 ___lwdiv (ARG)
                 ___lwmod (ARG)
                   ___lwdiv (ARG)
                 ___wmul (ARG)
                 _abs (ARG)
                   ___awmod (ARG)
                 _concat (ARG)
                 _dev_map_iterator (ARG)
                 _isdigit (ARG)
                 _putch (ARG)
                   _EUSART_Write
             _i2c1_read
               _I2C1_MasterRead
                 _I2C1_MasterReadTRBBuild
                 _I2C1_MasterTRBInsert
               _I2C1_MasterWrite
                 _I2C1_MasterTRBInsert
                 _I2C1_MasterWriteTRBBuild
             _i2c1_write_no_data
               _I2C1_MasterWrite
                 _I2C1_MasterTRBInsert
                 _I2C1_MasterWriteTRBBuild
         _print_dev_map
           _dev_map_iterator
           _printf
             ___awdiv (ARG)
             ___awmod (ARG)
             ___lwdiv (ARG)
             ___lwmod (ARG)
               ___lwdiv (ARG)
             ___wmul (ARG)
             _abs (ARG)
               ___awmod (ARG)
             _concat (ARG)
             _dev_map_iterator (ARG)
             _isdigit (ARG)
             _putch (ARG)
               _EUSART_Write
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _concat (ARG)
           _dev_map_iterator (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
         _put_cmd
           ___wmul
           _strcpy
             ___wmul (ARG)
         _strncmp
     _PROTOCOL_Read_Device_Address *
     _PROTOCOL_SAV *
       _DATAEE_WriteByte
     _PROTOCOL_SET *
     _PROTOCOL_STA *
     _PROTOCOL_STP *
     _PROTOCOL_Write_Device_Address *
       _DATAEE_WriteByte
     _TMR0_HasOverflowOccured *
     _atoi *
       ___wmul
       _isdigit
     _inv_handler *
       ___lwmod
         ___lwdiv (ARG)
       _fetch
         _detected
           ___awdiv
         _i2c1_write_no_data
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _concat (ARG)
           _dev_map_iterator (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
         _sen
           _PROTOCOL_Print_TLV
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _concat
             _printf
               ___awdiv (ARG)
               ___awmod (ARG)
               ___lwdiv (ARG)
               ___lwmod (ARG)
                 ___lwdiv (ARG)
               ___wmul (ARG)
               _abs (ARG)
                 ___awmod (ARG)
               _concat (ARG)
               _dev_map_iterator (ARG)
               _isdigit (ARG)
               _putch (ARG)
                 _EUSART_Write
           _i2c1_read
             _I2C1_MasterRead
               _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
           _i2c1_write_no_data
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
     _printf *
       ___awdiv (ARG)
       ___awmod (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _abs (ARG)
         ___awmod (ARG)
       _concat (ARG)
       _dev_map_iterator (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _EUSART_Write
     _strncmp *
     _tick_handler *
       ___lwmod
         ___lwdiv (ARG)
       _check_plg
         _i2c1_write_no_data
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _scan_dev
           _add_dev
             ___awdiv
           _del_dev
             ___awdiv
           _i2c1_read
             _I2C1_MasterRead
               _I2C1_MasterReadTRBBuild
               _I2C1_MasterTRBInsert
             _I2C1_MasterWrite
               _I2C1_MasterTRBInsert
               _I2C1_MasterWriteTRBBuild
       _exec_remote_cmd
         ___wmul
         _atoi
           ___wmul
           _isdigit
         _i2c1_read
           _I2C1_MasterRead
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _i2c1_write
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _i2c1_write_no_data
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
         _printf
           ___awdiv (ARG)
           ___awmod (ARG)
           ___lwdiv (ARG)
           ___lwmod (ARG)
             ___lwdiv (ARG)
           ___wmul (ARG)
           _abs (ARG)
             ___awmod (ARG)
           _concat (ARG)
           _dev_map_iterator (ARG)
           _isdigit (ARG)
           _putch (ARG)
             _EUSART_Write
         _strncmp
       _scan_dev
         _add_dev
           ___awdiv
         _del_dev
           ___awdiv
         _i2c1_read
           _I2C1_MasterRead
             _I2C1_MasterReadTRBBuild
             _I2C1_MasterTRBInsert
           _I2C1_MasterWrite
             _I2C1_MasterTRBInsert
             _I2C1_MasterWriteTRBBuild
   _PROTOCOL_Set_Extension_Handler
   _PROTOCOL_Set_Tick_Handler
   _SYSTEM_Initialize
     _EUSART_Initialize
     _I2C1_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
     _WDT_Initialize
   _init
     _DATAEE_ReadByte
     ___awdiv
     ___wmul

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      7       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4B      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     39      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      45       9       86.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2C      11       55.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      40      15       80.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0      40      17       80.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1DD      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              10      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     1DD      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Sep 21 20:01:18 2017

                    ??_PROTOCOL_Set_Tick_Handler 0022                                                _i 006B  
                                              _j 013B                                                pc 0002  
                __end_of_TMR0_HasOverflowOccured 11F3                                      __CFG_CP$OFF 0000  
                                   ___awdiv@sign 0026                              ___wmul@multiplicand 0022  
                                _timer0ReloadVal 00E5                                      __CFG_LVP$ON 0000  
                                            l244 1424                                              l355 11FD  
                                            l188 13EA                                              l712 06ED  
                                            l640 14DD                                              l627 0988  
                                            l619 1488                                              l660 053F  
                                            l672 060C                                              l841 0CA0  
                                            l695 0662                                              l688 05EC  
                                   __CFG_CPD$OFF 0000                                              _abs 1257  
                                            _buf 0220                                              _cnt 00DF  
                                            _sen 06EE           __end_of_PROTOCOL_Set_Extension_Handler 1211  
        __size_of_PROTOCOL_Set_Extension_Handler 0009                   _PROTOCOL_Set_Extension_Handler 1208  
                                   ___awmod@sign 0026                                     __CFG_BORV$LO 0000  
                                            wreg 0009                                     __CFG_IESO$ON 0000  
                    __size_of_i2c1_write_no_data 002B                                 detected@dev_addr 002F  
                               exec_remote_cmd@i 00D4                                 exec_remote_cmd@j 00D3  
                                   ?_EUSART_Read 0077                         i2c1_write_no_data@status 0034  
                               __end_of_I2C1_ISR 0CA0                                 ?_command_handler 005B  
                                           l1112 1363                                             ?_abs 0027  
                                           l5013 0932                                             l5005 0921  
                                           l5103 00C4                                     _tmr_overflow 013E  
                                           l5009 092A                                             l5025 164F  
                                           l5113 00D0                                             l5051 1685  
                                           l5043 1674                                             l5131 0140  
                                           l5115 00EF                                             l5037 165C  
                                           l5029 1656                                             l5141 014F  
                                           l5117 0104                                             l5061 094F  
                                           l6101 0DC2                                             l5039 1668  
                                           l5047 167D                                             l5143 017D  
                                           l5127 0110                                             l5071 0974  
                                           l5063 0959                                             l5303 079F  
                                           l6111 0E0E                                             l5145 01A0  
                                           l5129 012D                                             l5073 097E  
                                           l5313 130C                                             l5401 148A  
                                           l6105 0DE8                                             l5171 023D  
                                           l5155 01AF                                             l5091 14D8  
                                           l5251 07F2                                             l5243 07B3  
                                           l6035 0CB5                                             l4701 1419  
                                           l5173 0242                                             l5157 01DD  
                                           l5077 0983                                             l5237 07A8  
                                           l5253 07F9                                             l5341 0820  
                                           l5501 046E                                             l6117 0E39  
                                           l5191 030B                                             l5159 0200  
                                           l5079 098A                                             l5095 14DF  
                                           l5247 07BD                                             l5511 04B4  
                                           l6047 0CD6                                             l5185 02A3  
                                           l5177 020F                                             l5089 14CE  
                                           l5441 16CA                                             l5345 0838  
                                           l5417 15F8                                             l6049 0CD7  
                                           l5355 09EC                                             l5267 1594  
                                           l4811 152C                                             l4715 1439  
                                           l5187 02D3                                             l5179 0279  
                                           l5195 0313                                             l5347 0802  
                                           l5603 0F43                                             l5611 0F8B  
                                           l5419 15FD                                             l5507 04AC  
                                           l6091 0D7B                                             l6083 0D49  
                                           l6059 0CE5                                             l5357 09E3  
                                           l4805 1514                                             l5189 0303  
                                           l4733 09CE                                             l5437 169E  
                                           l5349 0841                                             l5525 0512  
                                           l5375 0A12                                             l5359 09F2  
                                           l4807 1520                                             l4815 1535  
                                           l4735 09D4                                             l4823 14AF  
                                           l5447 161B                                             l5439 16B9  
                                           l6087 0D62                                             l6079 0D24  
                                           l4753 1255                                             l5385 0A4F  
                                           l5377 0A16                                             l5369 0A0A  
                                           l4921 0656                                             l4905 0626  
                                           l4729 09C7                                             l5289 074D  
                                           l5633 0FF7                                             l5609 0F7B  
                                           l6097 0DA0                                             l5379 0A3F  
                                           l4931 0681                                             l4915 0637  
                                           l4843 0544                                             l4739 09DC  
                                           l5627 0FD2                                             l5395 1479  
                                           l5483 03B2                                             l4781 159F  
                                           l4909 0631                                             l4845 054D  
                                           l4837 053A                                             l4829 145D  
                                           l5565 0E61                                             l5557 088D  
                                           l5397 1483                                             l5477 0389  
                                           l4759 135D                                             l4783 15AB  
                                           l4943 069A                                             l4871 05AD  
                                           l5751 0AD8                                             l5495 0417  
                                           l5487 03E1                                             l5479 038E  
                                           l5665 13B3                                             l4793 15C6  
                                           l4945 069E                                             l4953 06B3  
                                           l4937 068B                                             l4929 067E  
                                           l4881 05CB                                             l4865 059D  
                                           l4857 0589                                             l4849 055A  
                                           l4961 051E                                             l5577 0EA6  
                                           l5569 0E79                                             l5497 041C  
                                           l4875 05BA                                             l5587 0EFB  
                                           l5763 0B17                                             l5755 0AED  
                                           l5739 16FF                                             l4981 08F0  
                                           l4789 15BD                                             l4949 06AB  
                                           l4885 05D8                                             l4869 059F  
                                           l4893 05EE                                             l5589 0F02  
                                           l5773 0B44                                             l4959 06B8  
                                           l4887 05E3                                             l4879 05BC  
                                           l5599 0F24                                             l5767 0B2C  
                                           l5759 0B02                                             l4987 08FB  
                                           ?_sen 0077                                             l4997 0903  
                                           l5973 0A5E                                             l4999 090F  
                                           l5991 0A97                                             l5985 0A75  
                                           l5979 0A70                                             STR_1 118D  
                                           STR_2 1110                                             STR_3 11AD  
                                           STR_4 11A5                                             STR_5 1175  
                                           STR_6 1195                                             STR_7 10C9  
                                           STR_8 10BD                                             STR_9 11A1  
                                           _LATA 010C                                             _LATB 010D  
                                           _LATC 010E                                             u5105 15AC  
                                           u5115 15B6                                             u5045 1364  
                                           u5125 15BE                                             u5055 1369  
                                           u5155 1517                                             u5085 15A2  
                                           u5175 1526                                             u5335 064C  
                                           u5185 152D                                             u5515 0906  
                                           u5275 05B3                                             u7035 0AB9  
                                           i1l60 0B5D                                             i1l71 0BB8  
                                           u5535 0910                                             u5615 165F  
                                           u5375 0671                                             i1l72 0BC4  
                                           i1l65 0B8B                                             u5545 091A  
                                           u6505 0EEA                                             i1l90 0C58  
                                           i1l82 0C14                                             i1l66 0B93  
                                           u5555 0922                                             u5635 166E  
                                           u5645 1675                                             i1l94 0C80  
                                           i1l86 0C34                                             u5815 029E  
                                           u7407 073B                                             i1l89 0C4A  
                                           u7417 0767                                             u6545 0F3F  
                                           u7427 0789                                             u6555 0F5A  
                                           u7437 14BC                                             u5854 17E6  
                                           u7447 14D4                                             u5855 17E5  
                                           u7367 1465                                             u5944 07D0  
                                           u5785 0238                                             u7457 093D  
                                           u5945 07CE                                             u7377 147F  
                                           u7467 0955                                             u7387 0703  
                                           u6595 0FBE                                             u7477 095D  
                                           u7397 071C                                             u5965 07E1  
                                           u5974 158C                                             u5894 1799  
                                           u5975 158B                                             u7487 097A  
                                           u5895 1798                                             _PLLR 04D6  
                                           _TMR0 0015                                             _WPUA 020C  
                                           _WPUB 020D                                             _WPUC 020E  
                __end_of_I2C1_MasterReadTRBBuild 150D                                     __CFG_WRT$OFF 0000  
                                  __CFG_FCMEN$ON 0000                                             abs@a 0027  
                                           _data 013A                                             _devs 00E4  
                                           _atoi 09E3                                             _main 153A  
                                           _init 0A54                            exec_remote_cmd@status 00D5  
                                           fsr0h 0005                                             fsr1h 0007  
                                           indf0 0000                                             fsr0l 0004  
                                           indf1 0001                                             fsr1l 0006  
                         ??_I2C1_MasterTRBInsert 0022                                             btemp 007E  
                                  __CFG_BOREN$ON 0000                                             start 003C  
                 i2c1_write_no_data@write_status 0032                          command_handler@dev_addr 0063  
                                  __CFG_MCLRE$ON 0000                   I2C1_MasterWriteTRBBuild@length 0021  
                                          ??_abs 0029                        __size_of_DATAEE_WriteByte 0023  
                                          ??_sen 004D                          __end_of_TMR0_Initialize 122F  
                                     _i2c1_state 00EC                                    __CFG_PLLEN$ON 0000  
                                     _i2c1_write 1464                                    ?_EUSART_Write 0077  
                 __size_of_OSCILLATOR_Initialize 0007                        I2C1_MasterTRBInsert@count 0023  
                  __end_of_OSCILLATOR_Initialize 1200                        I2C1_MasterTRBInsert@pflag 0021  
                            PROTOCOL_Print_TLV@v 004B                                            ?_atoi 0026  
                                          ?_main 0077                                            ?_init 0077  
                                __end_of___awdiv 0937                                __end_of_I2C1_Stop 12ED  
                                          STR_10 119D                                            STR_11 111A  
                                          STR_20 1179                                            STR_12 1059  
                                          STR_21 1191                                            STR_13 114B  
                                          STR_30 10DA                                            STR_22 1199  
                                          STR_14 1171                                            STR_15 10DA  
                                          STR_31 117D                                            STR_23 1025  
                                          STR_40 1195                                            STR_32 1189  
                                          STR_24 1185                                            STR_16 1072  
                                          STR_41 10F2                                            STR_33 109E  
                                          STR_17 103F                                            STR_25 100B  
                                  __CFG_WDTE$OFF 0000                                            STR_26 1181  
                                          STR_42 116D                                            STR_34 113D  
                                          STR_50 112D                                            STR_18 1088  
                                          STR_19 1088                                            STR_43 11A1  
                                          STR_51 1161                                            STR_35 1158  
                                          STR_27 1144                                            STR_60 1171  
                                          STR_36 118D                                            STR_44 119D  
                                          STR_28 11A9                                            STR_52 115D  
                                __end_of___awmod 168A                                            STR_61 10DA  
                                          STR_45 111A                                            STR_29 1171  
                                          STR_53 112E                                            STR_37 10E8  
                                          STR_54 1171                                            STR_38 11A5  
                                          STR_46 1169                                            STR_62 1136  
                                          STR_55 10DA                                            STR_63 10FD  
                                          STR_39 1175                                            STR_47 1165  
                                          STR_56 1106                                            STR_64 10FC  
                                          STR_48 10D4                                            STR_65 10DF  
                                          STR_57 1161                                            STR_49 1152  
                                          STR_58 115D                                            STR_66 10DE  
                                          STR_59 1107                                            STR_67 1124  
                                          STR_68 10AF                                  ___awdiv@divisor 0020  
                                __end_of_add_dev 1800                                  __end_of___lwdiv 15CB  
                                          i1l101 1284                                            i1l321 0015  
                                          i1l323 0021                                            i1l325 002D  
                                          i1l256 1357                                            i1l329 0037  
                                __end_of___lwmod 153A                                  ___awdiv@counter 0025  
                                          _MAX_Y 100A                                            _RCREG 0199  
                                          _RCSTA 019D                                            _TRISA 008C  
                                          _TRISB 008D                                            _TRISC 008E  
                                          _TXREG 019A                                  __end_of_del_dev 17B2  
                                          _TXSTA 019E                     __end_of_I2C1_BusCollisionISR 0802  
                   __size_of_PROTOCOL_Initialize 0052                                ??_I2C1_MasterRead 002E  
                              ??_I2C1_Initialize 0020                        _PROTOCOL_Set_Tick_Handler 1211  
                                _DATAEE_ReadByte 123B                                            _fetch 0844  
                ??_PROTOCOL_Write_Device_Address 0023                                  __end_of_dpowers 100A  
                                 _WDT_Initialize 07FC                   PROTOCOL_Initialize@inv_handler 0026  
                                __end_of_isdigit 1257                                     ?_inv_handler 0077  
                                          _value 00DE                                            atoi@a 002B  
                                          atoi@s 0026                                            _putch 11F3  
                                          init@i 0031                                            init@y 0030  
                                 i2c1_write@pbuf 0030                                            pclath 000A  
                                ??_print_dev_map 0044                                  __end_of_put_cmd 1765  
                                          status 0003                                            wtemp0 007E  
                                __end_of_strncmp 0844                  I2C1_MasterWriteTRBBuild@address 0022  
                             exec_remote_cmd@buf 00D7                               exec_remote_cmd@idx 00D2  
                                __initialization 003E                            I2C1_MasterWrite@pdata 002D  
                          I2C1_MasterWrite@pflag 002A                                     __end_of_atoi 0A54  
                                   __end_of_main 1567                                     __end_of_init 0ACE  
                                 ??_EUSART_Write 0020                      ?_INTERRUPT_InterruptManager 0077  
               PROTOCOL_Initialize@start_handler 0023                                      _i2c1_object 00D9  
                                         ??_atoi 0028                                           ??_main 006B  
                                         ??_init 0029                               __size_of_i2c1_read 0055  
                                 scan_dev@status 003E                           __end_of_WDT_Initialize 0800  
                                         ?_fetch 0077                                           i1S6183 11B0  
                                         _EEADRH 0192                                           _EEADRL 0191  
                                         _EEDATH 0194                                           _EEDATL 0193  
                                         _EECON2 0196                                 ___awdiv@dividend 0022  
                                         _ANSELA 018C                                           ?_putch 0077  
                                         _ANSELB 018D                                           _ANSELC 018E  
                             _PROTOCOL_Loop_Func 012E                                           i1l5643 12EB  
                                         i1l5911 0C66                                           i1l5823 0B7E  
                                         i1l5841 0BB2                                           i1l5923 0C84  
                                         i1l5907 0C5F                                           i1l5835 0B9F  
                                         i1l5925 0C87                                           i1l5933 0C94  
                                         i1l5927 0C8B                                           i1l5855 0BE2  
                                         i1l5873 0C01                                           i1l5955 1327  
                                         i1l5895 0C3C                                           i1l5887 0C22  
                                         i1l5879 0C0E                                           _OSCCON 0099  
               __size_of_TMR0_HasOverflowOccured 0004                                           _TMR0IF 005A  
                                         _SPBRGH 019C                                           _SPBRGL 019B  
                                         _WDTCON 0097                   PROTOCOL_Initialize@set_handler 0025  
                              ?_I2C1_MasterWrite 0027                                   __CFG_PWRTE$OFF 0000  
                               __end_of_detected 1596                               ??_I2C1_MasterWrite 002B  
                        exec_remote_cmd@send_buf 00A0                               _PROTOCOL_Print_TLV 00B0  
                      PROTOCOL_Initialize@scaler 0028                                   _p_i2c1_current 00E9  
                                         ___wmul 135A                                        ??___awdiv 0024  
                                 __CFG_STVREN$ON 0000                                        ??___awmod 0024  
                                      ??_add_dev 0029                                        ??___lwdiv 0024  
                                      ??___lwmod 002C                                           _concat 1287  
                                 add_dev@old_map 002D                                   add_dev@new_map 002E  
                                   _type_no_data 0164                              _EUSART_Transmit_ISR 133E  
                     ??_I2C1_MasterWriteTRBBuild 0024                                 ?_TMR0_Initialize 0077  
                                    ?_i2c1_write 002E                                           _locked 0143  
                                      ?_I2C1_ISR 0077                                        ??_del_dev 0029  
                               ___awdiv@quotient 0027                                  check_plg@status 0042  
                                ___awmod@divisor 0020                              ?_PROTOCOL_Print_TLV 0044  
                               __end_of_scan_dev 1603                                  ___awmod@counter 0025  
                                         _printf 0519                          __end_of_DATAEE_ReadByte 1248  
                                         _strcpy 1307                 __size_of_I2C1_MasterReadTRBBuild 002C  
                                      ??_isdigit 0020                         __end_of_dev_map_iterator 07FC  
                                ?_WDT_Initialize 0077                                      sen@dev_addr 0055  
                                      ??_put_cmd 002C                                   print_dev_map@i 0046  
                  I2C1_MasterWriteTRBBuild@pdata 0020                                        ??_strncmp 0026  
                      PROTOCOL_Send_uint8_t@pbuf 0161                             ?_EUSART_Transmit_ISR 0077  
                           ??_PROTOCOL_Print_TLV 0047                             __size_of_EUSART_Read 0020  
                              _SYSTEM_Initialize 1299                          __end_of__initialization 00AC  
PROTOCOL_Set_Extension_Handler@extension_handler 0020                               ?_SYSTEM_Initialize 0077  
                              __end_of_i2c1_read 098C                              exec_remote_cmd@data 00D6  
                                  __end_of_MAX_Y 100B                                   _i2c1_trb_count 00EB  
                          _I2C1_FunctionComplete 1276                             _I2C1_BusCollisionISR 0801  
                                 __pcstackCOMMON 0077                           I2C1_MasterWrite@length 0027  
                                   __pidataBANK1 0002                                     __pidataBANK2 11E8  
                            ??_SYSTEM_Initialize 0021                                    __end_of_fetch 0893  
                               _DATAEE_WriteByte 13D1                               __size_of_check_plg 0015  
                                  __end_of_putch 11F9                                       ??_I2C1_ISR 0079  
                             command_handler@buf 005B                               command_handler@pos 006C  
                          __end_of_PROTOCOL_Loop 0E3E                   I2C1_MasterReadTRBBuild@address 0023  
                                 _OPTION_REGbits 0095                       i2c1_write_no_data@dev_addr 002E  
                                   init@dev_addr 002F                             one_shot_sen@dev_addr 005A  
                                        ??_fetch 0056                          PROTOCOL_Send_float@pbuf 0156  
                      __end_of_SYSTEM_Initialize 12AB                            ??_EUSART_Transmit_ISR 0077  
                           i2c1_read@read_status 0038                                          ??_putch 0022  
                                  ?_one_shot_sen 0077                                       __pbssBANK0 006B  
                                     __pbssBANK1 00D9                                       __pbssBANK2 0120  
                                     __pbssBANK3 01A0                                       __pbssBANK4 0220  
                                     __pbssBANK5 02A0                                       __pbssBANK6 0320  
                           __end_of_EUSART_Write 143C                       i2c1_write_no_data@reg_addr 0030  
                           __size_of_inv_handler 007B                              __size_of_i2c1_write 0028  
                               command_handler@i 0064                 ??_PROTOCOL_Set_Extension_Handler 0022  
                ?_PROTOCOL_Set_Extension_Handler 0020                         __size_of_exec_remote_cmd 01F0  
                    __size_of_EUSART_Receive_ISR 001C                              _PROTOCOL_Initialize 0893  
                          ?_I2C1_BusCollisionISR 0077                                       __pmaintext 153A  
                             one_shot_sen@status 0059                                          ?___wmul 0020  
                                _I2C1_MasterRead 143C                                       __pintentry 0004  
                                        ?_concat 0020                                  _I2C1_Initialize 1376  
                                        _BAUDCON 019F                                       _device_id_ 0126  
                                        _APFCON0 011D                                          _APFCON1 011E  
                                        ?_printf 002E                                          ?_strcpy 0026  
                     __end_of_i2c1_write_no_data 14E1                                 ?_DATAEE_ReadByte 0077  
                                  _eusartRxCount 00E6                       PROTOCOL_Send_uint16_t@pbuf 015E  
                           ?_PROTOCOL_Initialize 0021                                        _I2C1_Stop 12D3  
                                        _OSCTUNE 0098                                        ?_detected 0077  
                                        _SSP1ADD 0212                                          _SSP1BUF 0211  
                                 ??_one_shot_sen 0056                           _PROTOCOL_Start_Handler 0134  
                                  ?_tick_handler 0077                                __end_of_check_plg 12D3  
                                del_dev@dev_addr 0030                          _TMR0_HasOverflowOccured 11EF  
                  I2C1_MasterTRBInsert@ptrb_list 0020                             DATAEE_WriteByte@bAdd 0021  
                                      ?_scan_dev 0077                           ?_I2C1_FunctionComplete 0077  
                       __size_of_command_handler 01C2                    __size_of_I2C1_MasterTRBInsert 0057  
                                add_dev@dev_addr 0030                               _p_i2c1_trb_current 00EA  
                                        ___awdiv 08E5                                          ___awmod 1644  
                                  ?_PROTOCOL_EXT 0077                                    ?_PROTOCOL_SAV 0077  
                                  ?_PROTOCOL_SET 0077                                    ?_PROTOCOL_STA 0077  
                                  ?_PROTOCOL_STP 0077                                  __size_of___wmul 001C  
                                        _add_dev 17B2                                          ___lwdiv 1596  
                                        ___lwmod 150D                                  __size_of_concat 0012  
                                        _del_dev 1765                                          _cmd_buf 2330  
                        _I2C1_MasterReadTRBBuild 14E1                                          _dev_map 0120  
                                        _do_func 0144                                          __ptext1 0A54  
                                        __ptext2 1299                                          __ptext3 07FC  
                                        __ptext4 1224                                          __ptext5 1392  
                                        __ptext6 11F9                                          __ptext7 1376  
                                        __ptext8 12ED                                          __ptext9 1211  
                                __size_of_printf 01D5                                  __size_of_strcpy 001B  
                                        _dpowers 1000                            _OSCILLATOR_Initialize 11F9  
                                   __size_of_abs 000F                           i2c1_write@write_status 0034  
     PROTOCOL_Write_Device_Address@device_id_i2c 0024                            ??_PROTOCOL_Initialize 0029  
                                        _isdigit 1248                                     __size_of_sen 00B4  
                                        _readbuf 0146                     I2C1_MasterReadTRBBuild@pdata 0020  
                           I2C1_MasterRead@pdata 0028                                          _sec_cnt 0140  
                           I2C1_MasterRead@pflag 002D                                 ___awmod@dividend 0022  
                                        _invoked 0141                         ??_PIN_MANAGER_Initialize 0020  
                                        _sendbuf 0250                                       ?_I2C1_Stop 0077  
                                     ??_detected 0029                                          _tmr_cnt 013F  
                                        _put_cmd 171A                       __size_of_SYSTEM_Initialize 0012  
                           I2C1_ISR@pi2c_buf_ptr 0138                                          clrloop0 1230  
                                 ??_tick_handler 0049                                          _running 0142  
                                        _strncmp 0802                             end_of_initialization 00AC  
          PROTOCOL_Set_Tick_Handler@tick_handler 0020                            __end_of_print_dev_map 16D2  
                                        sen@type 0052                                       ??_scan_dev 003B  
                     _PROTOCOL_Extension_Handler 012C                                 i2c1_write@status 0035  
                        __end_of_I2C1_MasterRead 1464                           ??_I2C1_BusCollisionISR 0077  
                              _EUSART_Initialize 12ED                          __end_of_I2C1_Initialize 1392  
                             ?_EUSART_Initialize 0077                            _PROTOCOL_Tick_Handler 0128  
                                      _RCSTAbits 019D                                          printf@c 0043  
                                        printf@f 002E                                   ??_PROTOCOL_EXT 0065  
                                 ??_PROTOCOL_SAV 0023                                   ??_PROTOCOL_SET 0020  
                                 ??_PROTOCOL_STA 0020                                   ??_PROTOCOL_STP 0020  
                              ??_exec_remote_cmd 0044                                     __pstringtext 1000  
                                   ??_i2c1_write 0032                              ??_EUSART_Initialize 0020  
                               ??_WDT_Initialize 0020                                    i2c1_read@pbuf 0033  
                      __size_of_I2C1_MasterWrite 002A                                __size_of_I2C1_ISR 0157  
                               __CFG_FOSC$INTOSC 0000                                ?_dev_map_iterator 0077  
                          __size_of_EUSART_Write 0025                        ??_TMR0_HasOverflowOccured 0020  
                          i2c1_write_no_data@buf 0033                                     inv_handler@t 0070  
                             ??_dev_map_iterator 0020                                       _tmr_scaler 0162  
                       __end_of_DATAEE_WriteByte 13F4                I2C1_ISR@i2c_10bit_address_restart 00E7  
                      __end_of_EUSART_Initialize 1307                               __end_of_i2c1_write 148C  
                                    printf@width 0041                          I2C1_MasterWrite@address 0028  
                                      _i2c1_read 0937                        ??_I2C1_MasterReadTRBBuild 0025  
                           __end_of_one_shot_sen 1644                                   __end_of___wmul 1376  
                              ??_command_handler 005C                          I2C1_MasterWrite@trBlock 0151  
                                   _EUSART_Write 1417                                   __end_of_concat 1299  
                       I2C1_Stop@completion_code 0078                           ?_OSCILLATOR_Initialize 0077  
                                  i2c1_write@len 0031                                   __end_of_printf 06EE  
                                 __end_of_strcpy 1322                                   PROTOCOL_Loop@c 0069  
                            start_initialization 003E                                      ??_I2C1_Stop 0077  
                       __size_of_TMR0_Initialize 000B                  __size_of_PIN_MANAGER_Initialize 001F  
                                    __end_of_abs 1266                                      __end_of_sen 07A2  
                                  ??_EUSART_Read 0020                __size_of_I2C1_MasterWriteTRBBuild 0023  
                                    putch@txData 0022                        ?_I2C1_MasterWriteTRBBuild 0020  
                       dev_map_iterator@dev_addr 0027                      __size_of_PROTOCOL_Print_TLV 0279  
                             dev_map_iterator@xx 00E3                               dev_map_iterator@yy 00E2  
                            DATAEE_ReadByte@bAdd 0020                                 ?_I2C1_MasterRead 0028  
                               ?_I2C1_Initialize 0077                                       ?_i2c1_read 0030  
                                       ??___wmul 0024                         PROTOCOL_Send_int8_t@pbuf 0160  
           __end_of_PROTOCOL_Read_Device_Address 11E5            __size_of_PROTOCOL_Read_Device_Address 0003  
                   _PROTOCOL_Read_Device_Address 11E2                                         ??_concat 0022  
                                    __pdataBANK1 00ED                                 scan_dev@dev_addr 003F  
                                    __pdataBANK2 0162                             __end_of_tick_handler 171A  
                                       ??_printf 0034                                         ??_strcpy 0029  
                   I2C1_MasterWriteTRBBuild@ptrb 0026                                      __pbssBIGRAM 2330  
                    __end_of_EUSART_Transmit_ISR 135A                                      __pbssCOMMON 0070  
                                      ___latbits 0002                                    __pcstackBANK0 0020  
                                  __pcstackBANK1 00A0                                    _i2c1_tr_queue 0159  
                           _PROTOCOL_Inv_Handler 012A                                     _isdigit$1459 0020  
                                  ??_inv_handler 005D                             __end_of_PROTOCOL_EXT 12BE  
                           __end_of_PROTOCOL_SAV 1224                             __end_of_PROTOCOL_SET 1208  
                           __end_of_PROTOCOL_STA 11EF                             __end_of_PROTOCOL_STP 11E8  
                              __size_of_detected 002F                               _i2c1_write_no_data 14B6  
                     __end_of_EUSART_Receive_ISR 133E                  PROTOCOL_Initialize@stop_handler 0024  
                        ??_I2C1_FunctionComplete 0077                       __size_of_EUSART_Initialize 001A  
                            __end_of_EUSART_Read 13D1                                    tick_handler@t 0136  
                         __size_of_PROTOCOL_Loop 019E                                        _check_plg 12BE  
          __end_of_PROTOCOL_Write_Device_Address 1276           __size_of_PROTOCOL_Write_Device_Address 0010  
                  _PROTOCOL_Write_Device_Address 1266                              ?_i2c1_write_no_data 002E  
                               ___lwdiv@dividend 0022                           _PIN_MANAGER_Initialize 1392  
                              __size_of_scan_dev 0038                             EUSART_Read@readValue 0021  
                                       ?___awdiv 0020                                         ?___awmod 0020  
                         PROTOCOL_Print_TLV@type 0044                                         ?_add_dev 0077  
                                       ?___lwdiv 0020                                         ?___lwmod 0028  
                                   _eusartRxHead 0073                                     _eusartTxHead 0076  
                                   _eusartRxTail 0072                                     _eusartTxTail 0075  
                                       _I2C1_ISR 0B49                                         ?_del_dev 0077  
                  ?_PROTOCOL_Read_Device_Address 0077                     ??_INTERRUPT_InterruptManager 007D  
                      PROTOCOL_Send_int16_t@pbuf 015C                                        __pswtext1 11B0  
                               _I2C1_MasterWrite 148C                          _eusartTxBufferRemaining 0074  
                   __end_of_I2C1_MasterTRBInsert 09E3                         PROTOCOL_Print_TLV@length 0045  
                                       ?_isdigit 0077                             ??_i2c1_write_no_data 0031  
                         I2C1_MasterRead@address 002B                            dev_map_iterator@exist 0026  
                                 del_dev@old_map 002D                                   del_dev@new_map 002E  
                          dev_map_iterator@start 0163                                         ?_put_cmd 0077  
                               ___lwdiv@quotient 0026                                   __size_of_fetch 004F  
                       __size_of_DATAEE_ReadByte 000D                                         ?_strncmp 0020  
                                 __size_of_putch 0006                                   _eusartRxBuffer 0320  
                    I2C1_MasterReadTRBBuild@ptrb 0027                           I2C1_MasterRead@trBlock 014C  
                              ??_TMR0_Initialize 0020                                   _eusartTxBuffer 02A0  
                                _exec_remote_cmd 0329                                   ___wmul@product 0024  
                                       _LATCbits 010E                             _PROTOCOL_Set_Handler 0130  
                                     ?_check_plg 0077                                        clear_ram0 122F  
                            __end_of_inv_handler 0B49                                         _PIE1bits 0091  
                                       _PIE2bits 0092                            __size_of_one_shot_sen 0041  
            __size_of_INTERRUPT_InterruptManager 0038                                         _PIR1bits 0011  
                                       _PIR2bits 0012               __size_of_PROTOCOL_Set_Tick_Handler 0009  
                                      detected@x 002D                                        detected@y 002C  
                     ?_PROTOCOL_Set_Tick_Handler 0020                                      ??_i2c1_read 0036  
                                       _SSP1CON1 0215                                         _SSP1CON3 0217  
                   PROTOCOL_Initialize@device_id 0021                                        _timer_cnt 0145  
                                       _SSP1STAT 0214                                     i2c1_read@len 0035  
                                   i2c1_read@reg 0039                                   _readbuf_status 013D  
                          _PROTOCOL_Stop_Handler 0132                      __end_of_PROTOCOL_Initialize 08E5  
                                      concat@lsb 0020                                        concat@msb 0027  
                              ___wmul@multiplier 0020                                    _PROTOCOL_Loop 0CA0  
                                  detected@exist 002E                                       printf@flag 0040  
                                     printf@prec 0038                            DATAEE_WriteByte@bData 0020  
                              i2c1_read@dev_addr 0030                                      _EUSART_Read 13B1  
                                   _one_shot_sen 1603                                ?_DATAEE_WriteByte 0020  
                             i2c1_write@dev_addr 002E                               ??_DATAEE_WriteByte 0021  
                                  _slave_address 00E0                                       put_cmd@buf 0031  
                              i2c1_read@reg_addr 0032                                       put_cmd@idx 00ED  
                                _command_handler 0E3E                                       _EECON1bits 0195  
                             PROTOCOL_SET@value_ 0021                        __size_of_dev_map_iterator 005A  
                          __size_of_tick_handler 0048                    __size_of_I2C1_BusCollisionISR 0001  
                         I2C1_ISR@i2c_bytes_left 00E8                __end_of_PROTOCOL_Set_Tick_Handler 121A  
                        ??_OSCILLATOR_Initialize 0020                   ?_PROTOCOL_Write_Device_Address 0077  
                               __size_of___awdiv 0052                                 __size_of___awmod 0046  
                                      sen@length 0053                                 __size_of_add_dev 004E  
                               __size_of___lwdiv 0035                                 __size_of___lwmod 002D  
               __end_of_I2C1_MasterWriteTRBBuild 1417                                   ?_PROTOCOL_Loop 0077  
                               __size_of_del_dev 004D                                        sen@status 0054  
                         __size_of_print_dev_map 0048                            __size_of_PROTOCOL_EXT 0013  
                          __size_of_PROTOCOL_SAV 000A                            __size_of_PROTOCOL_SET 0008  
                          __size_of_PROTOCOL_STA 0004                            __size_of_PROTOCOL_STP 0003  
                 ??_PROTOCOL_Read_Device_Address 0020                                         add_dev@x 002C  
                                       add_dev@y 002F                             tick_handler@cmd_next 00E1  
                               __size_of_isdigit 000F                                  ___lwdiv@divisor 0020  
                        __end_of_exec_remote_cmd 0519                              I2C1_ISR@i2c_address 006D  
                                ___lwdiv@counter 0025                                         _detected 1567  
                                       __ptext10 1208                                         __ptext11 0CA0  
                                       __ptext20 0844                                         __ptext12 16D2  
                                       __ptext21 11EF                                         __ptext13 0329  
                                       __ptext30 0802                                         __ptext22 1266  
                                       __ptext14 1464                                         __ptext31 171A  
                                       __ptext23 11E5                                         __ptext15 12BE  
                                       __ptext40 13F4                                         __ptext32 1307  
                                       __ptext24 11EB                                         __ptext16 15CB  
                                       __ptext41 143C                                         __ptext33 168A  
                                       __ptext25 1200                                         __ptext17 1765  
                                       __ptext50 1287                                         __ptext42 098C  
                                       __ptext34 07A2                                         __ptext26 121A  
                                       __ptext18 17B2                                         __ptext51 1257  
                                       __ptext43 14E1                                         __ptext35 1603  
                                       __ptext27 11E2                                         __ptext19 0ACE  
                                       __ptext60 0893                                         __ptext52 1644  
                                       __ptext44 00B0                                         __ptext36 06EE  
                                       __ptext28 12AB                                         __ptext61 123B  
                                       __ptext53 1567                                         __ptext45 0519  
                                       __ptext37 14B6                                         __ptext29 0E3E  
                                       __ptext54 08E5                                         __ptext46 11F3  
                                       __ptext38 0937                                         __ptext63 0B49  
                                       __ptext55 09E3                                         __ptext47 1417  
                                       __ptext39 148C                                         __ptext64 12D3  
                                       __ptext56 1248                                         __ptext48 150D  
                                       __ptext65 1276                                         __ptext57 135A  
                                       __ptext49 1596                                         __ptext66 0801  
                                       __ptext58 13D1                                         __ptext67 133E  
                                       __ptext59 13B1                                         __ptext68 1322  
                                  fetch@dev_addr 005C                                     _SSP1CON1bits 0215  
                                   _SSP1CON2bits 0216                                         _float100 0124  
                                    _inv_handler 0ACE                                 __size_of_put_cmd 004B  
                    DATAEE_WriteByte@GIEBitValue 0022                                     _tick_handler 16D2  
                               __size_of_strncmp 0042                                       strcpy@from 0028  
                                  __size_of_atoi 0071                                    __size_of_main 002D  
                                  __size_of_init 007A                                         _read_buf 01BC  
                                       del_dev@x 002C                                         del_dev@y 002F  
                  I2C1_MasterReadTRBBuild@length 0022                            I2C1_MasterRead@length 002A  
                                       _scan_dev 15CB                                      ??_check_plg 0040  
                                     strncmp@len 0024                                ??_DATAEE_ReadByte 0020  
                                       _schedule 01A0                             _I2C1_MasterTRBInsert 098C  
                        _BACKPLANE_SLAVE_ADDRESS 00EE                                         fetch@sch 005A  
                                       fetch@pos 005B                                         int$flags 007E  
                                       atoi@sign 002A                                     _PROTOCOL_EXT 12AB  
                                   _PROTOCOL_SAV 121A                                     _PROTOCOL_SET 1200  
                                   _PROTOCOL_STA 11EB                                     _PROTOCOL_STP 11E5  
             __end_of_INTERRUPT_InterruptManager 003C                       _INTERRUPT_InterruptManager 0004  
                                      printf@len 003E                                        printf@val 003C  
                       ?_TMR0_HasOverflowOccured 0077                                       _INTCONbits 000B  
                                       isdigit@c 0021                       __end_of_PROTOCOL_Print_TLV 0329  
                        __end_of_command_handler 1000                          __size_of_WDT_Initialize 0004  
                                       intlevel1 0000                                 ___lwmod@dividend 002A  
                        ?_PIN_MANAGER_Initialize 0077                         __end_of_I2C1_MasterWrite 14B6  
                              __CFG_CLKOUTEN$OFF 0000                   __size_of_I2C1_FunctionComplete 0011  
                  __end_of_I2C1_FunctionComplete 1287                                    _print_dev_map 168A  
                          ?_I2C1_MasterTRBInsert 0020                                        strncmp@s1 0020  
                                      strncmp@s2 0022                         ?_I2C1_MasterReadTRBBuild 0020  
                     PROTOCOL_Print_TLV@dev_addr 004A                          _backplane_slave_enabled 013C  
                                       printf@ap 003B                                         printf@cp 0039  
                             _EUSART_Receive_ISR 1322                                  ??_PROTOCOL_Loop 0067  
                       __size_of_I2C1_MasterRead 0028                         __size_of_I2C1_Initialize 001C  
                                i2c1_read@status 003A                                       _OPTION_REG 0095  
                            ?_EUSART_Receive_ISR 0077                                 print_dev_map@len 0047  
                                ___lwmod@divisor 0028                                  _TMR0_Initialize 1224  
                                       strcpy@cp 002A                                         strcpy@to 0026  
                                ___lwmod@counter 002D                         _I2C1_MasterWriteTRBBuild 13F4  
                    PROTOCOL_Loop@device_address 006A                                 ?_exec_remote_cmd 0077  
                                    fetch@status 0059                             PROTOCOL_EXT@char_buf 0066  
                             EUSART_Write@txData 0021                     __size_of_EUSART_Transmit_ISR 001C  
                      PROTOCOL_Print_TLV@pbuffer 0046                   __end_of_PIN_MANAGER_Initialize 13B1  
                             __size_of_I2C1_Stop 001A                                   ?_print_dev_map 0077  
                           ??_EUSART_Receive_ISR 0077                                 _dev_map_iterator 07A2  
